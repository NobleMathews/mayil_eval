{
    "id": "id",
    "repo_name": "testbed/aftersell",
    "task_id": 6727056435323101340,
    "title": "",
    "body": "Fulfillment hold not releasing on time\n\nIs this related to a specific store?\n\nmyvillagegreen.myshopify.com\nhttps://app.intercom.com/a/inbox/l7yr8zsg/inbox/shared/all/conversation/147709000013207?view=List\n\nWhat technical input is needed?\n\nOrders are being placed on hold for an hr, when they have the release  setting enabled:\n",
    "classification": "bug",
    "state": "closed",
    "repo_link": "https://github.com/testbed/aftersell.git",
    "requested_commit": "",
    "mayil_response": "To ensure that orders at \"myvillagegreen.myshopify.com\" are released from hold in a timely manner, as per the expected behavior of being released after an hour, a thorough investigation and adjustment of the fulfillment hold release process is necessary. The following steps are crucial to address the issue where orders remain on hold for longer than anticipated:\n\n- Verify that the `releaseFulfillmentHoldsAsap` setting is active for the store \"myvillagegreen.myshopify.com\" to ensure immediate processing of holds.\n- Inspect the `PossibleHoldsModel` associated with the store to confirm that the `minimumHoldMinutes` parameter is set accurately, which influences the timing of order release.\n- Examine the loop responsible for processing scheduled hold releases, ensuring it operates at the intended intervals and correctly calculates the `releaseHoldAt` time in relation to the current time.\n- Implement additional logging within the release process to obtain more comprehensive data on any failures or complications that may arise during the hold release.\n- In cases where problems continue, enhance error handling and establish alert systems to alert the development team of consistent failures in the release process.\n\n### Code snippets to check\n\n-  \u2192 [web](https://github.com/testbed/aftersell/tree//web) \u2192 [backend](https://github.com/testbed/aftersell/tree//web/backend) \u2192 [src](https://github.com/testbed/aftersell/tree//web/backend/src) \u2192 [modules](https://github.com/testbed/aftersell/tree//web/backend/src/modules) \u2192 [fulfillment-hold-release](https://github.com/testbed/aftersell/tree//web/backend/src/modules/fulfillment-hold-release)- [Lines 133 - 181](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts#L133-L181)\n\n This snippet contains the logic for releasing holds, which is directly related to the issue. \n\n\n   - [Lines 1 - 194](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts#L1-L194)\n\n This snippet defines functions for scheduling fulfillment hold releases, which is relevant to the issue. \n\n\n   - [Lines 119 - 119](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts#L119-L119)\n\n This snippet is an async function related to releasing scheduled fulfillment holds, which is relevant to the issue. \n\n\n   - [Lines 121 - 121](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts#L121-L121)\n\n This snippet involves a loop checking for scheduled hold releases, which is relevant to the issue.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree//web) \u2192 [backend](https://github.com/testbed/aftersell/tree//web/backend) \u2192 [src](https://github.com/testbed/aftersell/tree//web/backend/src) \u2192 [modules](https://github.com/testbed/aftersell/tree//web/backend/src/modules) \u2192 [fulfillment-hold-release](https://github.com/testbed/aftersell/tree//web/backend/src/modules/fulfillment-hold-release)- [Lines 1 - 7](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.controller.ts#L1-L7)\n\n This snippet shows the controller function responsible for releasing fulfillment holds, which is the expected behavior not occurring.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree//web) \u2192 [client](https://github.com/testbed/aftersell/tree//web/client) \u2192 [src](https://github.com/testbed/aftersell/tree//web/client/src) \u2192 [pages](https://github.com/testbed/aftersell/tree//web/client/src/pages) \u2192 [settings](https://github.com/testbed/aftersell/tree//web/client/src/pages/settings)- [Lines 68 - 93](https://github.com/testbed/aftersell/blob//web/client/src/pages/settings/settings-fulfillment-and-payment.page.tsx#L68-L93)\n\n This snippet provides information about a setting related to releasing fulfillment holds after a certain time period, which is the core of the issue.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree//web) \u2192 [backend](https://github.com/testbed/aftersell/tree//web/backend) \u2192 [src](https://github.com/testbed/aftersell/tree//web/backend/src) \u2192 [modules](https://github.com/testbed/aftersell/tree//web/backend/src/modules) \u2192 [shopify](https://github.com/testbed/aftersell/tree//web/backend/src/modules/shopify) \u2192 [graphql](https://github.com/testbed/aftersell/tree//web/backend/src/modules/shopify/graphql) \u2192 [generated](https://github.com/testbed/aftersell/tree//web/backend/src/modules/shopify/graphql/generated)- [Lines 21804 - 21848](https://github.com/testbed/aftersell/blob//web/backend/src/modules/shopify/graphql/generated/index.ts#L21804-L21848)\n\n This snippet provides information on releasing the fulfillment hold on a fulfillment order, which is directly related to the issue.",
    "ai_cost": {
        "issue_classifier": 0.000195,
        "issue_summarizer": 0.00598,
        "search_embedding": 1.079e-05,
        "documentation_agent": 0.00658,
        "repo_summary": 0.086842,
        "issue_star_solver": 0.11402300000000001,
        "snippet_processor": 0.020200000000000003,
        "bouncer": 0.02703
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1712636066.343306,
        "classification": "bug",
        "initial_code_snippets": [
            {
                "code": "try {\n            const settings = await SettingsService.getSettings({ shop: scheduledHoldRelease.shop });\n            if (!settings.releaseFulfillmentHoldsAsap) {\n                continue;\n            }\n            const { accessToken } = (await userModel.findOne({ myshopify_domain: scheduledHoldRelease.shop })) as any;\n            const shopifyService = new ShopifyService({ shop: scheduledHoldRelease.shop, accessToken });\n            const fulfillmentOrders = await shopifyService.getFulfillmentOrders({\n                orderId: scheduledHoldRelease.orderId!,\n            });\n            if (getOrderIsOnPostPurchaseFulfillmentHold({ fulfillmentOrders })) {\n                const fulfillmentOrdersOnHold = fulfillmentOrders.filter(\n                    (fo) => fo.status === FulfillmentOrderStatusRest.ON_HOLD\n                );\n                for (const fulfillmentOrder of fulfillmentOrdersOnHold) {\n                    await shopifyService.releaseFulfillmentOrderHold({ fulfillmentOrderId: fulfillmentOrder.id });\n                    console.log(\n                        `[${scheduledHoldRelease.shop}] Released fulfillment order hold. Order: ${scheduledHoldRelease.orderId}. Fulfillment order: ${fulfillmentOrder.id}.`\n                    );\n                }\n            } else {\n                console.log(\n                    `[${scheduledHoldRelease.shop}] Skipped releasing fulfillment hold because order is no longer on hold. Order: ${scheduledHoldRelease.orderId}.`\n                );\n            }\n        } catch (e) {\n            if (scheduledHoldRelease.previousAttemptsCount < 5) {\n                // If there is an error, we will insert the hold release back into the\n                // database for some loop instance (maybe this one, maybe a different one)\n                // to process it again.\n                const recreatedScheduledRelease: ScheduledHoldRelease = {\n                    shop: scheduledHoldRelease.shop,\n                    orderId: scheduledHoldRelease.orderId,\n                    releaseHoldAt: scheduledHoldRelease.releaseHoldAt,\n                    previousAttemptsCount: scheduledHoldRelease.previousAttemptsCount + 1,\n                };\n                await ScheduledHoldReleasesModel.create(recreatedScheduledRelease);\n                console.log(\n                    `[${scheduledHoldRelease.shop}] Retrying fulfillment hold release. Attempt: ${scheduledHoldRelease.previousAttemptsCount}. Order: ${scheduledHoldRelease.orderId}.`\n                );\n            } else {\n                // If we've tried 5 times before, and failed again on the 6th time, we will log the error and\n                // move on.\n                console.error(\n                    `[${scheduledHoldRelease.shop}] Failed to release fulfillment hold. Order: ${scheduledHoldRelease.orderId}. ${e}`\n                );\n            }\n        }\n    }",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 6435,
                "end_index": 9313,
                "start_line": 133,
                "end_line": 181,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "import { SettingsService } from '../settings/settings.service';\nimport { FulfillmentOrderRest, FulfillmentOrderStatusRest, ShopifyService } from '../shopify/shopify.service';\nimport userModel from '../users/users.model';\nimport { PossibleHold, PossibleHoldsModel } from './possible-holds.model';\nimport { ScheduledHoldRelease, ScheduledHoldReleasesModel } from './scheduled-hold-releases.model';\n\nexport async function upsertPossibleFulfillmentHold({\n    shop,\n    checkoutToken,\n    minimumHoldMinutes,\n}: Pick<PossibleHold, 'shop' | 'checkoutToken' | 'minimumHoldMinutes'>) {\n    await PossibleHoldsModel.updateOne(\n        { shop, checkoutToken },\n        { minimumHoldMinutes, lastUpdatedAt: new Date() },\n        { upsert: true }\n    );\n}\n\nexport async function scheduleFulfillmentHoldReleaseIfNecessary({\n    shopifyService,\n    order: { id: orderId, checkout_token: checkoutToken },\n}: {\n    shopifyService: ShopifyService;\n    order: { id: number; checkout_token: string };\n}) {\n    // We use findOneAndDelete here to prevent storing old possible holds. We delete the possible hold\n    // regardless of whether or not the order actually has a fulfillment hold.\n    //\n    // We don't need to check if the setting is enabled here since the possible hold should only be created\n    // if the setting is enabled.\n    const possibleHold = await PossibleHoldsModel.findOneAndDelete({ shop: shopifyService.shop, checkoutToken });\n    if (!possibleHold) {\n        return;\n    }\n\n    // This call will fail if the merchant has not granted the `write_merchant_managed_fulfillment_orders` scope.\n    // This should only happen if the merchant enabled the setting but didn't add the scope. We can just throw in\n    // this case see the error in Sentry and contact the merchant to add the scope or disable the setting.\n    const fulfillmentOrders = await shopifyService.getFulfillmentOrders({ orderId });\n    const isOnHold = getOrderIsOnPostPurchaseFulfillmentHold({ fulfillmentOrders });\n\n    if (isOnHold) {\n        const scheduledHoldRelease: ScheduledHoldRelease = {\n            shop: shopifyService.shop,\n            orderId,\n            releaseHoldAt: new Date(Date.now() + possibleHold.minimumHoldMinutes * 60 * 1000),\n            previousAttemptsCount: 0,\n        };\n        await ScheduledHoldReleasesModel.create(scheduledHoldRelease);\n        console.log(`[${shopifyService.shop}] Scheduled fulfillment hold release. Order ID: ${orderId}`);\n    }\n}",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 0,
                "end_index": 2456,
                "start_line": 1,
                "end_line": 194,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "function getOrderIsOnPostPurchaseFulfillmentHold({\n    fulfillmentOrders,\n}: {\n    fulfillmentOrders: FulfillmentOrderRest[];\n}): boolean {\n    return fulfillmentOrders.some(\n        (fo) =>\n            fo.status === FulfillmentOrderStatusRest.ON_HOLD &&\n            fo.fulfillment_holds.some((fh) => fh.reason === 'online_store_post_purchase_cross_sell')\n    );\n}",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 9317,
                "end_index": 9681,
                "start_line": 184,
                "end_line": 194,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "import { RequestHandler } from 'express';\nimport { releaseScheduledFulfillmentHolds } from './fulfillment-hold-release';\n\nexport const releaseAllScheduledFulfillmentHoldsJob: RequestHandler = async (req, res, next) => {\n    await releaseScheduledFulfillmentHolds();\n    res.status(200).send();\n};",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.controller.ts",
                "start_index": 0,
                "end_index": 296,
                "start_line": 1,
                "end_line": 7,
                "max_line": 7,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "async function releaseScheduledFulfillmentHolds()",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 5638,
                "end_index": 5687,
                "start_line": 119,
                "end_line": 119,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "pename: 'ShopifyPaymentsDisputeFulfillment' }\n        |",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1917988,
                "end_index": 1918043,
                "start_line": 44888,
                "end_line": 44904,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "while (hasScheduledHoldRelease)",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 5734,
                "end_index": 5765,
                "start_line": 121,
                "end_line": 121,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "leaseHoldsPayload = {\n    __typename?: 'FulfillmentOrdersReleaseHoldsPayload';\n    /** The asynchronous job that will release the fulfillment holds. */\n    job?: Maybe<Job>;\n    /** The list of errors that occurred from executing the mutation. */\n    userErrors: Array<FulfillmentOrdersReleaseHoldsUserError>;\n};\n\n/** An error that occurs during the execution of `FulfillmentOrdersReleaseHolds`. */\nexport type FulfillmentOrdersReleaseHoldsUserError = DisplayableError & {\n    __typename?: 'FulfillmentOrdersReleaseHoldsUserError';\n    /** The error code. */\n    code?: Maybe<FulfillmentOrdersReleaseHoldsUserErrorCode>;\n    /** The path to the input field that caused the error. */\n    field?: Maybe<Array<Scalars['String']>>;\n    /** The error message. */\n    message: Scalars['String'];\n};\n\n/** Possible error codes that can be returned by `FulfillmentOrdersReleaseHoldsUserError`. */\nexport enum FulfillmentOrdersReleaseHoldsUserErrorCode {\n    /** Failed to create release fulfillment order holds job. */\n    FailedToCreateJob = 'FAILED_TO_CREATE_JOB',\n}\n\n/** Return type for `fulfillmentOrdersSetFulfillmentDeadline` mutation. */\nexport type FulfillmentOrdersSetFulfillmentDeadlinePayload = {\n    __typename?: 'FulfillmentOrdersSetFulfillmentDeadlinePayload';\n    /** Whether the fulfillment deadline was successfully set. */\n    success?: Maybe<Scalars['Boolean']>;\n    /** The list of errors that occurred from executing the mutation. */\n    userErrors: Array<FulfillmentOrdersSetFulfillmentDeadlineUserError>;\n};\n\n/** An error that occurs during the execution of `FulfillmentOrdersSetFulfillmentDeadline`. */\nexport type FulfillmentOrdersSetFulfillmentDeadlineUserError = DisplayableError & {\n    __typename?: 'FulfillmentOrdersSetFulfillmentDeadlineUserError';\n    /** The error code. */\n    code?: Maybe<FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode>;\n    /** The path to the input field that caused the error. */\n    field?: Maybe<Array<Scalars['String']>>;\n    /** The error message. */\n    message: Scalars['String'];\n};\n\n/** Possible error codes that can be returned by `FulfillmentOrdersSetFulfillmentDeadlineUserError`. */\nexport enum FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode {\n    /** The fulfillment orders could not be found. */\n    FulfillmentOrdersNotFound = 'FULFILLMENT_ORDERS_NOT_FOUND',\n}\n\n/** The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center. */\nexport type FulfillmentOriginAd",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 609111,
                "end_index": 611601,
                "start_line": 14620,
                "end_line": 14689,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "{\n    let hasScheduledHoldRelease = true;",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 5688,
                "end_index": 5729,
                "start_line": 1,
                "end_line": 120,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<Checkbox\n                                    label=\"Release fulfillment holds from 1-click offers when offer timer ends\"\n                                    helpText='If the customer closes their browser tab while on the post-purchase page, the order will stay \"On Hold\" for 60 minutes by default. This setting reduces the delay to be equal to the upsell offer timer duration (e.g. 10 minutes).'\n                                    checked={fields.releaseFulfillmentHoldsAsap.value}\n                                    onChange={fields.releaseFulfillmentHoldsAsap.onChange}\n                                    disabled={!hasAllRequiredScopes}\n                                />\n                            </VerticalStack>\n                        </VerticalStack>\n                    </Card>\n                </AnnotatedLayout>\n                <AnnotatedLayout title=\"Partially paid\">\n                    <Card>\n                        <VerticalStack gap=\"3\">\n                            <VerticalStack gap=\"2\">\n                                <Checkbox\n                                    label={\n                                        tyPageOrderMergingEnabled\n                                            ? 'Automatically remove unpaid upsell products (from 1-click and TY page) from orders'\n                                            : 'Automatically remove unpaid 1-click upsell products from orders'\n                                    }\n                                    checked={fields.removePartiallyPaidItems.value}\n                                    onChange={fields.removePartiallyPaidItems.onChange}\n                                />\n                                {fields.removePartiallyPaidItems.value && (\n                                    <Box paddingInlineStart=\"6\">",
                "filename": "web/client/src/pages/settings/settings-fulfillment-and-payment.page.tsx",
                "start_index": 2848,
                "end_index": 4640,
                "start_line": 68,
                "end_line": 93,
                "max_line": 141,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "ame?: 'ShopifyPaymentsDispute' }",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1859473,
                "end_index": 1859505,
                "start_line": 43520,
                "end_line": 44516,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "ame?: 'ShopifyPaymentsDispute' }",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1859473,
                "end_index": 1859505,
                "start_line": 43520,
                "end_line": 44516,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "ame?: 'ShopifyPaymentsDispute' }",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1859473,
                "end_index": 1859505,
                "start_line": 43520,
                "end_line": 44516,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "{\n        // To start the loop, we need to atomically remove a scheduled hold release. There may\n        // be many other instances of this function running in parallel, so we need to make sure\n        // that we are the only one that processes this hold release.\n        const scheduledHoldRelease = await ScheduledHoldReleasesModel.findOneAndDelete({\n            releaseHoldAt: { $lte: Date.now() },\n        });\n        hasScheduledHoldRelease = Boolean(hasScheduledHoldRelease);\n        // If we have no more hold releases in the database, we can exit this loop and return from the function.\n        if (!scheduledHoldRelease) {\n            break;\n        }",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 5766,
                "end_index": 6426,
                "start_line": 1,
                "end_line": 180,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "ickup notification to the customer to let them know that their order is ready\n     * to be picked up.\n     *\n     */\n    fulfillmentOrderLineItemsPreparedForPickup?: Maybe<FulfillmentOrderLineItemsPreparedForPickupPayload>;\n    /**\n     * Changes the location which is assigned to fulfill a number of unfulfilled fulfillment order line items.\n     *\n     * Line items which have already been fulfilled can't be re-assigned\n     * and will always remain assigned to the original location.\n     *\n     * You can't change the assigned location while a fulfillment order has a\n     * [request status](https://shopify.dev/docs/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus)\n     * of `SUBMITTED`, `ACCEPTED`, `CANCELLATION_REQUESTED`, or `CANCELLATION_REJECTED`.\n     * These request statuses mean that a fulfillment order is awaiting action by a fulfillment service\n     * and can't be re-assigned without first having the fulfillment service accept a cancellation request.\n     * This behavior is intended to prevent items from being fulfilled by multiple locations or fulfillment services.\n     *\n     * ### How re-assigning line items affects fulfillment orders\n     *\n     * **First scenario:** Re-assign all line items belonging to a fulfillment order to a new location.\n     *\n     * In this case, the\n     * [assignedLocation](https://shopify.dev/docs/api/admin-graphql/latest/objects/fulfillmentorder#field-fulfillmentorder-assignedlocation)\n     * of the original fulfillment order will be updated to the new location.\n     *\n     * **Second scenario:** Re-assign a subset of the line items belonging to a fulfillment order to a new location.\n     * You can specify a subset of line items using the `fulfillmentOrderLineItems` parameter\n     * (available as of the `2023-07` API version),\n     * or specify that the original fulfillment order contains line items which have already been fulfilled.\n     *\n     * If the new location is already assigned to another active fulfillment order, on the same order,\n     * then the line items are moved to the existing fulfillment order.\n     * Otherwise, a new fulfillment order is created for the new location, and the line items are moved to the new location.\n     *\n     */\n    fulfillmentOrderMove?: Maybe<FulfillmentOrderMovePayload>;\n    /** Marks a scheduled fulfillment order as open. */\n    fulfillmentOrderOpen?: Maybe<FulfillmentOrderOpenPayload>;\n    /** Rejects a cancellation request sent to a fulfillment service for a fulfillment order. */\n    fulfillmentOrderRejectCancellationRequest?: Maybe<FulfillmentOrderRejectCancellationRequestPayload>;\n    /** Rejects a fulfillment request sent to a fulfillment service for a fulfillment order. */\n    fulfillmentOrderRejectFulfillmentRequest?: Maybe<FulfillmentOrderRejectFulfillmentRequestPayload>;\n    /** Releases the fulfillment hold on a fulfillment order. */\n    fulfillmentOrderReleaseHold?: Maybe<FulfillmentOrderReleaseHoldPayload>;",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 913079,
                "end_index": 916043,
                "start_line": 21804,
                "end_line": 21848,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "me?: 'ReverseFulfillmentOrderDisposition' }",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1858829,
                "end_index": 1858872,
                "start_line": 43507,
                "end_line": 44503,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "import { getModelForClass, prop } from '@typegoose/typegoose';\nimport { REGEX_MYSHOPIFY } from '../../utils/regexes';\n\n// We can delete the possible hold after 3 days since it is almost\n// impossible that the customer would leave the checkout page open for\n// 3 days, come back, and then checkout without refreshing the page.\nconst POSSIBLE_HOLD_TTL_SECS = 259_200; // 3 days in seconds\n\nexport class PossibleHold {\n    @prop({ required: true, expires: POSSIBLE_HOLD_TTL_SECS, default: Date.now() })\n    lastUpdatedAt!: Date;\n\n    @prop({ required: true, match: REGEX_MYSHOPIFY })\n    shop!: string;\n\n    @prop({ required: true })\n    checkoutToken!: string;\n\n    @prop({ required: true })\n    minimumHoldMinutes!: number;\n}\n\nexport const PossibleHoldsModel = getModelForClass(PossibleHold);",
                "filename": "web/backend/src/modules/fulfillment-hold-release/possible-holds.model.ts",
                "start_index": 0,
                "end_index": 791,
                "start_line": 1,
                "end_line": 23,
                "max_line": 23,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "_typename?: 'ReverseFulfillmentOrder",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1456892,
                "end_index": 1456928,
                "start_line": 34520,
                "end_line": 44504,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "_typename?: 'ReverseFulfillmentOrder",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1456892,
                "end_index": 1456928,
                "start_line": 34520,
                "end_line": 44504,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "_typename?: 'ReverseFulfillmentOrder",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1456892,
                "end_index": 1456928,
                "start_line": 34520,
                "end_line": 44504,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            }
        ],
        "initial_doc_snippets": [
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/backend` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 1000,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"content-box__row text-container\">\n                                                <h2 class=\"heading-2 os-step__title\" id=\"main-header\" tabindex=\"-1\">\n                                                    Your order is confirmed\n                                                </h2>\n                                                <p class=\"os-step__description\">\n                                                    You\u2019ll receive an email when your order is ready.\n                                                </p>\n                                            </div>\n                                        </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 317828,
                "end_index": 318454,
                "start_line": 6200,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<head>\n        <!-- Shopify App Bridge [START] -->\n        <meta name=\"shopify-api-key\" content=\"%SHOPIFY_API_KEY%\" />",
                "filename": "web/client/index.html",
                "start_index": 38,
                "end_index": 156,
                "start_line": 4,
                "end_line": 6,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"step__sections\">\n                                <div class=\"section\">\n                                    <div class=\"section__header os-header\">\n                                        <svg\n                                            width=\"56\"\n                                            height=\"56\"\n                                            viewBox=\"0 0 56 56\"\n                                            fill=\"none\"\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                            <circle cx=\"28\" cy=\"28\" r=\"26\" stroke=\"#E5E5E5\" stroke-width=\"2.29412\" />\n                                            <path\n                                                fill-rule=\"evenodd\"\n                                                clip-rule=\"evenodd\"\n                                                d=\"M22.4811 37.3603L16.3636 31.3947C15.5663 30.6172 15.5663 29.3605 16.3636 28.583C17.1609 27.8055 18.4497 27.8055 19.247 28.583L23.8066 33.0293L36.6493 18.7538C37.3834 17.9186 38.6701 17.8231 39.5225 18.537C40.379 19.2529 40.4789 20.5056 39.7448 21.3388L25.4706 37.2469C25.1015 37.6685 24.5672 37.9191 24.0003 37.9409C23.3825 37.9429 22.8625 37.7341 22.4811 37.3603Z\"\n                                                fill=\"#008060\"\n                                                stroke=\"#E5E5E5\"\n                                                stroke-width=\"0.764706\"\n                                            />\n                                        </svg>\n                                        <div class=\"os-header__heading\">\n                                            <span class=\"os-order-number\"> Order #1001 </span>\n                                            <h2 class=\"os-header__title\" id=\"main-header\" tabindex=\"-1\">\n                                                Thank you {{Customer Name}}!\n                                            </h2>\n                                        </div>\n                                    </div>\n                                </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245858,
                "end_index": 247957,
                "start_line": 6161,
                "end_line": 6451,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<script defer src=\"./thankyoupage_bundle.js?v2\"></script>\n        <script defer src=\"/apps/aftersell_sdk.bundle.min.js?v2\"></script>\n    </head>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241237,
                "end_index": 241381,
                "start_line": 6073,
                "end_line": 6075,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"order-summary__section__content\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323949,
                "end_index": 323994,
                "start_line": 6297,
                "end_line": 6297,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<body class=\"aftersell-preview\">\n        <a href=\"#main-header\" class=\"skip-to-content\"> Skip to content </a>\n\n        <header class=\"banner\" data-header=\"\" role=\"banner\">\n            <div class=\"wrap\">\n                <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n            </div>\n        </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241387,
                "end_index": 241804,
                "start_line": 6077,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<html\n    lang=\"en\"\n    dir=\"ltr\"\n    class=\"js desktop page--no-banner page--logo-main page--show page--show card-fields cors svg opacity placeholder no-touchevents displaytable display-table generatedcontent cssanimations flexbox no-flexboxtweener anyflexbox shopemoji floating-labels\"\n>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 0,
                "end_index": 289,
                "start_line": 1,
                "end_line": 6518,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# Shopify Function development with Rust\n\n## Dependencies\n\n-   [Install Rust](https://www.rust-lang.org/tools/install)\n    -   On Windows, Rust requires the [Microsoft C++ Build Tools](https://docs.microsoft.com/en-us/windows/dev-environment/rust/setup). Be sure to select the _Desktop development with C++_ workload when installing them.\n-   Install [`cargo-wasi`](https://bytecodealliance.github.io/cargo-wasi/)\n    -   `cargo install cargo-wasi`\n-   On Macs with Apple Silicon, you'll also need to install the Binaryen toolchain and set the `WASM_OPT` environment variable. ([related issue](https://github.com/bytecodealliance/cargo-wasi/issues/112))\n    -   `brew install binaryen`\n    -   Add `export WASM_OPT=/opt/homebrew/bin/wasm-opt` to your `.bashrc` or `.zshrc`\n\n## Building the function\n\nYou can build this individual function using `cargo wasi`.\n\n```shell\ncargo wasi build --release\n```\n\nThe Shopify CLI `build` command will also execute this, based on the configuration in `shopify.function.extension.toml`.\n\n## Testing\n\n> Requires Node v16+\n\n1. Create a temporary JSON file (e.g., `a.json`) in the following format:\n\n```json\n{\n    \"data\": {\n        \"foo\": \"bar\"\n    },\n    \"secretKey\": \"abc123\"\n}\n```\n\n2. Run the following command\n\n```\nyarn test:new-hmac < a.json\n```\n\n3. Copy the generated HMAC into the test file",
                "filename": "extensions/upsell-offer-discount-function/README.md",
                "start_index": 0,
                "end_index": 1329,
                "start_line": 1,
                "end_line": 44,
                "max_line": 44,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<span class=\"order-summary-toggle__inner\">\n                        <span class=\"order-summary-toggle__icon-wrapper\">\n                            <svg\n                                width=\"20\"\n                                height=\"19\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__icon\"\n                            >\n                                <path\n                                    d=\"M17.178 13.088H5.453c-.454 0-.91-.364-.91-.818L3.727 1.818H0V0h4.544c.455 0 .91.364.91.818l.09 1.272h13.45c.274 0 .547.09.73.364.18.182.27.454.18.727l-1.817 9.18c-.09.455-.455.728-.91.728zM6.27 11.27h10.09l1.454-7.362H5.634l.637 7.362zm.092 7.715c1.004 0 1.818-.813 1.818-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817zm9.18 0c1.004 0 1.817-.813 1.817-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--show\">\n                            <span>Show order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"6\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M.504 1.813l4.358 3.845.496.438.496-.438 4.642-4.096L9.504.438 4.862 4.534h.992L1.496.69.504 1.812z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--hide\">\n                            <span>Hide order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"7\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M6.138.876L5.642.438l-.496.438L.504 4.972l.992 1.124L6.138 2l-.496.436 3.862 3.408.992-1.122L6.138.876z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span\n                            class=\"order-summary-toggle__total-recap total-recap\"\n                            data-order-summary-section=\"toggle-total-recap\"\n                        >\n                            <span class=\"total-recap__final-price\" data-checkout-payment-due-target=\"5073\">$50.73</span>\n                        </span>\n                    </span>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 242214,
                "end_index": 245205,
                "start_line": 6097,
                "end_line": 6446,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"section__content\">\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Contact information</h3>\n\n                                                            <p class=\"as-dummy-line\"></p>\n\n                                                            <h3 class=\"heading-3\">Shipping address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n\n                                                            <h3 class=\"heading-3\">Shipping method</h3>\n                                                            <p class=\"as-dummy-line as-w40\"></p>\n                                                        </div>\n                                                    </div>\n\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Payment method</h3>\n                                                            <ul class=\"payment-method-list\">\n                                                                <li class=\"payment-method-list__item\">\n                                                                    <p class=\"as-dummy-line as-w80\"></p>\n                                                                </li>\n                                                            </ul>\n\n                                                            <h3 class=\"heading-3\">Billing address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n                                                        </div>\n                                                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318877,
                "end_index": 321837,
                "start_line": 6191,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<tbody data-order-summary-section=\"line-items\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 325247,
                "end_index": 325294,
                "start_line": 6314,
                "end_line": 6314,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"hidden\">\n                            <span class=\"visually-hidden\" id=\"forwarding-external-new-window-message\">\n                                Opens external website in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-new-window-message\">\n                                Opens in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-external-message\">\n                                Opens external website.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"checkout-context-step-one\">\n                                Customer information - Checkout\n                            </span>\n                        </div>\n                    </main>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 322226,
                "end_index": 323078,
                "start_line": 6265,
                "end_line": 6282,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"order-summary__sections\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323769,
                "end_index": 323806,
                "start_line": 6295,
                "end_line": 6295,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<th class=\"product__description\" scope=\"row\">\n                                                        <span class=\"product__description__name order-summary__emphasis\"\n                                                            >Product Name</span\n                                                        >\n                                                        <span\n                                                            class=\"product__description__variant order-summary__small-text\"\n                                                            >Variant Name</span\n                                                        >\n                                                    </th>\n                                                    <td class=\"product__quantity visually-hidden\">1</td>\n                                                    <td class=\"product__price\">\n                                                        <span class=\"order-summary__emphasis\">$42.99</span>\n                                                    </td>\n                                                </tr>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 331038,
                "end_index": 332129,
                "start_line": 6363,
                "end_line": 6376,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# [[[ --- CLIENT --- ]]]\nFROM node:18.16.1-alpine AS client\nARG SHOPIFY_API_KEY\nENV SHOPIFY_API_KEY=$SHOPIFY_API_KEY\nARG HOST\nENV HOST=$HOST\nARG NODE_ENV\nENV NODE_ENV=$NODE_ENV\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/client/package.json ./web/client/package.json\nCOPY web/client/yarn.lock ./web/client/yarn.lock\nRUN cd web/client && yarn install --frozen-lockfile --production=false\nCOPY extensions-web-common/package.json ./extensions-web-common/package.json\nCOPY extensions-web-common/yarn.lock ./extensions-web-common/yarn.lock\nRUN cd extensions-web-common && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY extensions/post-purchase ./extensions/post-purchase\nCOPY extensions-web-common/post-purchase ./extensions-web-common/post-purchase\nCOPY extensions-web-common/checkout ./extensions-web-common/checkout\nCOPY extensions-web-common/shared ./extensions-web-common/shared\nCOPY extensions-web-common/ty-page ./extensions-web-common/ty-page\nCOPY web/client ./web/client\nRUN cd web/client && yarn build\n\n# [[[ --- TY PAGE --- ]]]\nFROM node:18.16.1-alpine AS ty-page\nARG HOST\nENV HOST=$HOST\nWORKDIR /usr/src/app\nCOPY web/widgets/package.json ./web/widgets/package.json\nCOPY web/widgets/yarn.lock ./web/widgets/yarn.lock\nRUN cd web/widgets && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY web/widgets ./web/widgets\nRUN cd web/widgets && yarn build\n\n# [[[ --- BACKEND --- ]]]\nFROM node:18.16.1-alpine AS backend\nWORKDIR /usr/src/app\nCOPY web/backend/package.json ./web/backend/package.json\nCOPY web/backend/yarn.lock ./web/backend/yarn.lock\nCOPY web/backend/patches ./web/backend/patches\nRUN cd web/backend && yarn install --frozen-lockfile --production=false\nCOPY web/backend ./web/backend\nCOPY web/common ./web/common\nRUN cd web/backend && yarn build\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM node:18.16.1-alpine AS final\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/backend/package.json ./web/backend/package.json\nCOPY web/backend/yarn.lock ./web/backend/yarn.lock\nCOPY web/backend/patches ./web/backend/patches\nRUN cd web/backend && yarn install --frozen-lockfile --production=true\nCOPY --from=backend /usr/src/app/web/backend/build ./web/backend/build\nCOPY --from=ty-page /usr/src/app/web/widgets/dist ./web/backend/build/backend/dist\nCOPY --from=client /usr/src/app/web/client/dist ./web/backend/build/backend/dist/client\nCOPY package.json ./package.json\nCMD [\"yarn\", \"start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2540,
                "start_line": 1,
                "end_line": 61,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"order-summary__section order-summary__section--product-list\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323839,
                "end_index": 323912,
                "start_line": 6296,
                "end_line": 6296,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# AfterSell\n\n### All Docs on Notion \ud83d\udc49 [AfterSell Notion Docs](https://www.notion.so/aftersell/AfterSell-Docs-9d43566167b5426d86b5983925872953?pvs=4)",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 148,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            }
        ],
        "intial_documentation_sources": {
            "shopify": {
                "collection": "shopify_documentation",
                "reason_for_relevance": "The issue involves a specific setting in a Shopify store that affects order fulfillment timing, and Shopify's API reference and templating documentation may contain relevant information on how the fulfillment release setting is supposed to work and how to troubleshoot issues related to it."
            }
        },
        "external_documentation_snippets": {
            "external_shopify": [
                {
                    "code": "183\n        \"discount_allocations\": [\n 184\n 185\n        ],\n 186\n        \"duties\": [\n 187\n 188\n        ],\n 189\n        \"admin_graphql_api_id\": \"gid:\\/\\/shopify\\/LineItem\\/866550311766439020\",\n 190\n        \"tax_lines\": [\n 191\n 192\n        ]\n 193\n      },\n 194\n      {\n 195\n        \"id\": 141249953214522974,\n 196\n        \"variant_id\": 808950810,\n 197\n        \"title\": \"IPod Nano - 8GB\",\n 198\n        \"quantity\": 1,\n 199\n        \"sku\": \"IPOD2008PINK\",\n 200\n        \"variant_title\": null,\n 201\n        \"vendor\": null,\n 202\n        \"fulfillment_service\": \"manual\",\n 203\n        \"product_id\": 632910392,\n 204\n        \"requires_shipping\": true,\n 205\n        \"taxable\": true,\n 206\n        \"gift_card\": false,\n 207\n        \"name\": \"IPod Nano - 8GB\",\n 208\n        \"variant_inventory_management\": \"shopify\",\n 209\n        \"properties\": [\n 210\n 211\n        ],\n 212\n        \"product_exists\": true,\n 213\n        \"fulfillable_quantity\": 1,\n 214\n        \"grams\": 567,\n 215\n        \"price\": \"199.00\",\n 216\n        \"total_discount\": \"5.00\",\n 217\n        \"fulfillment_status\": null,\n 218\n        \"price_set\": {\n 219\n          \"shop_money\": {\n 220\n            \"amount\": \"199.00\",\n 221\n            \"currency_code\": \"USD\"\n 222\n          },\n 223\n          \"presentment_money\": {\n 224\n            \"amount\": \"199.00\",\n 225\n            \"currency_code\": \"USD\"\n 226\n          }\n 227\n        },\n 228\n        \"total_discount_set\": {\n 229\n          \"shop_money\": {\n 230\n            \"amount\": \"5.00\",\n 231\n            \"currency_code\": \"USD\"\n 232\n          },\n 233\n          \"presentment_money\": {\n 234\n            \"amount\": \"5.00\",\n 235\n            \"currency_code\": \"USD\"\n 236\n          }\n 237\n        },\n 238\n        \"discount_allocations\": [\n 239\n          {\n 240\n            \"amount\": \"5.00\",\n 241\n            \"discount_application_index\": 0,\n 242\n            \"amount_set\": {\n 243\n              \"shop_money\": {\n 244\n                \"amount\": \"5.00\",\n 245\n                \"currency_code\": \"USD\"\n 246\n              },\n 247\n              \"presentment_money\": {\n 248\n                \"amount\": \"5.00\",\n 249\n                \"currency_code\": \"USD\"\n 250\n              }\n 251\n            }\n 252\n          }\n 253\n        ],\n 254\n        \"duties\": [\n 255\n 256\n        ],\n 257\n        \"admin_graphql_api_id\": \"gid:\\/\\/shopify\\/LineItem\\/141249953214522974\",\n 258\n        \"tax_lines\": [\n 259\n 260\n        ]\n 261\n      }\n 262\n    ],\n 263\n    \"fulfillments\": [\n 264\n 265\n    ],\n 266\n    \"refunds\": [\n 267\n 268\n    ],\n 269\n    \"total_tip_received\": \"0.0\",\n 270\n    \"original_total_duties_set\": null,\n 271\n    \"current_total_duties_set\": null,\n 272\n    \"payment_terms\": null,\n 273\n    \"admin_graphql_api_id\": \"gid:\\/\\/shopify\\/Order\\/820982911946154508\",\n 274\n    \"shipping_lines\": [\n 275\n      {\n 276\n        \"id\": 271878346596884015,\n 277\n        \"title\": \"Generic Shipping\",\n 278\n        \"price\": \"10.00\",\n 279\n        \"code\": null,\n 280\n        \"source\": \"shopify\",\n 281\n        \"phone\": null,\n 282\n        \"requested_fulfillment_service_id\": null,\n 283\n        \"delivery_category\": null,\n 284\n        \"carrier_identifier\": null,\n 285\n        \"discounted_price\": \"10.00\",\n 286\n        \"price_set\": {\n 287\n          \"shop_money\": {\n 288\n            \"amount\": \"10.00\",\n 289\n            \"currency_code\": \"USD\"\n 290\n          },\n 291\n          \"presentment_money\": {\n 292\n            \"amount\": \"10.00\",\n 293\n            \"currency_code\": \"USD\"\n 294\n          }\n 295\n        },\n 296\n        \"discounted_price_set\": {\n 297\n          \"shop_money\": {\n 298\n            \"amount\": \"10.00\",\n 299\n            \"currency_code\": \"USD\"\n 300\n          },\n 301\n          \"presentment_money\": {\n 302\n            \"amount\": \"10.00\",\n 303\n            \"currency_code\": \"USD\"\n 304\n          }\n 305\n        },\n 306\n        \"discount_allocations\": [\n 307\n 308\n        ],\n 309\n        \"tax_lines\": [\n 310\n 311\n        ]\n 312\n      }\n 313\n    ],\n 314\n    \"billing_address\": {\n 315\n      \"first_name\": \"Bob\",\n 316\n      \"address1\": \"123 Billing Street\",\n 317\n      \"phone\": \"555-555-BILL\",\n 318\n      \"city\": \"Billtown\",\n 319\n      \"zip\": \"K2P0B0\",\n 320\n      \"province\": \"Kentucky\",\n 321\n      \"country\": \"United States\",\n 322\n      \"last_name\": \"Biller\",\n 323\n      \"address2\": null,\n 324\n      \"company\": \"My Company\",\n 325\n      \"latitude\": null,\n 326\n      \"longitude\": null,\n 327\n      \"name\": \"Bob Biller\",\n 328\n      \"country_code\": \"US\",\n 329\n      \"province_code\": \"KY\"\n 330\n    },\n 331\n    \"shipping_address\": {\n 332\n      \"first_name\": \"Steve\",\n 333\n      \"address1\": \"123 Shipping Street\",\n 334\n      \"phone\": \"555-555-SHIP\",\n 335\n      \"city\": \"Shippington\",\n 336\n      \"zip\": \"40003\",\n 337\n      \"province\": \"Kentucky\",\n 338\n      \"country\": \"United States\",\n 339\n      \"last_name\": \"Shipper\",\n 340\n      \"address2\": null,\n 341\n      \"company\": \"Shipping Company\",\n 342\n      \"latitude\": null,\n 343\n      \"longitude\": null,\n 344\n      \"name\": \"Steve Shipper\",\n 345\n      \"country_code\": \"US\",\n 346\n      \"province_code\": \"KY\"\n 347\n    },\n 348\n    \"customer\": {\n 349\n      \"id\": 115310627314723954,\n 350\n      \"email\": \"john@example.com\",\n 351\n      \"accepts_marketing\": false,\n 352\n      \"created_at\": null,\n 353\n      \"updated_at\": null,\n 354\n      \"first_name\": \"John\",\n 355\n      \"last_name\": \"Smith\",\n 356\n      \"orders_count\": 0,\n 357\n      \"state\": \"disabled\",\n 358\n      \"total_spent\": \"0.00\",\n 359\n      \"last_order_id\": null,\n 360\n      \"note\": null,\n 361\n      \"verified_email\": true,\n 362\n      \"multipass_identifier\": null,\n 363\n      \"tax_exempt\": false,\n 364\n      \"tags\": \"\",\n 365\n      \"last_order_name\": null,\n 366\n      \"currency\": \"USD\",\n 367\n      \"phone\": null,\n 368\n      \"accepts_marketing_updated_at\": null,\n 369\n      \"marketing_opt_in_level\": null,\n 370\n      \"sms_marketing_consent\": null,\n 371\n      \"admin_graphql_api_id\": \"gid:\\/\\/shopify\\/Customer\\/115310627314723954\",\n 372\n      \"default_address\": {\n 373\n        \"id\": 715243470612851245,\n 374\n        \"customer_id\": 115310627314723954,\n 375\n        \"first_name\": null,\n 376\n        \"last_name\": null,\n 377\n        \"company\": null,\n 378\n        \"address1\": \"123 Elm St.\",\n 379\n        \"address2\": null,\n 380\n        \"city\": \"Ottawa\",\n 381\n        \"province\": \"Ontario\",\n 382\n        \"country\": \"Canada\",\n 383\n        \"zip\": \"K2H7A8\",\n 384\n        \"phone\": \"123-123-1234\",\n 385\n        \"name\": \"\",\n 386\n        \"province_code\": \"ON\",\n 387\n        \"country_code\": \"CA\",\n 388\n        \"country_name\": \"Canada\",\n 389\n        \"default\": true\n 390\n      }\n 391\n    }\n 392 }\n Note\n To know when items should be fulfilled, apps should query fulfillmentOrders when they receive the orders/create webhook. If apps don't query fulfillmentOrders and submit a request to create fulfillments for items that shouldn't be fulfilled yet, then the request fails.\n Next steps\n Learn about fulfillments for prepaid subscriptions.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Keeping orders and subscription contracts in sync\n Order tagging\n Automatic fulfillment\n Order CSV export\n Order webhooks\n Next steps\n Updates & News\n Developer changelog\n Partner blog",
                    "filename": "docs/apps/selling-strategies/subscriptions/orders/content.txt",
                    "start_index": 9749,
                    "end_index": 16814,
                    "start_line": 451,
                    "end_line": 875,
                    "max_line": 875,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "3\n      \"fulfillment_order\": {\n 4\n          \"id\": 5859333242902,\n 5\n          \"shop_id\": 20978040854,\n 6\n          \"order_id\": 4804938989590,\n 7\n          \"assigned_location_id\": 67794436118,\n 8\n          \"request_status\": \"submitted\",\n 9\n          \"status\": \"closed\",\n 10\n          \"supported_actions\": [],\n 11\n          \"destination\": {\n 12\n              \"id\": 5479404371990,\n 13\n              \"address1\": \"23 Hassall Street\",\n 14\n              \"address2\": \"\",\n 15\n              \"city\": \"Parramatta\",\n 16\n              \"company\": null,\n 17\n              \"country\": \"Australia\",\n 18\n              \"email\": \"\",\n 19\n              \"first_name\": \"Tyler\",\n 20\n              \"last_name\": \"Kelleher\",\n 21\n              \"phone\": null,\n 22\n              \"province\": \"New South Wales\",\n 23\n              \"zip\": \"2150\"\n 24\n          },\n 25\n          \"line_items\": [],\n 26\n          \"fulfill_at\": \"2022-10-13T13:00:00-04:00\",\n 27\n          \"fulfill_by\": null,\n 28\n          \"international_duties\": {\n 29\n              \"incoterm\": \"DAP\"\n 30\n          },\n 31\n          \"fulfillment_holds\": [],\n 32\n          \"delivery_method\": {\n 33\n              \"id\": 140816351254,\n 34\n              \"method_type\": \"shipping\",\n 35\n              \"min_delivery_date_time\": null,\n 36\n              \"max_delivery_date_time\": null\n 37\n          },\n 38\n          \"assigned_location\": {\n 39\n              \"address1\": null,\n 40\n              \"address2\": null,\n 41\n              \"city\": null,\n 42\n              \"country_code\": \"CA\",\n 43\n              \"location_id\": 67794436118,\n 44\n              \"name\": \"test-created-via-api-2\",\n 45\n              \"phone\": null,\n 46\n              \"province\": null,\n 47\n              \"zip\": null\n 48\n          },\n 49\n          \"merchant_requests\": [\n 50\n              {\n 51\n                  \"message\": null,\n 52\n                  \"request_options\": {\n 53\n                      \"notify_customer\": false\n 54\n                  },\n 55\n                  \"sent_at\": \"2022-10-13T14:20:56-04:00\",\n 56\n                  \"kind\": \"fulfillment_request\"\n 57\n              }\n 58\n          ]\n 59\n      },\n 60\n    // The new fulfillment order, which is assigned to the same fulfillment service. This fulfillment order will be in an `open` status, with a `request_status` of `unsubmitted`.\n 61\n      \"replacement_fulfillment_order\": {\n 62\n          \"id\": 5859337732118,\n 63\n          \"shop_id\": 20978040854,\n 64\n          \"order_id\": 4804938989590,\n 65\n          \"assigned_location_id\": 67794436118,\n 66\n          \"request_status\": \"unsubmitted\",\n 67\n          \"status\": \"open\",\n 68\n          \"supported_actions\": [\n 69\n              \"request_fulfillment\",\n 70\n              \"hold\",\n 71\n              \"move\"\n 72\n          ],\n 73\n          \"destination\": {\n 74\n              \"id\": 5479406731286,\n 75\n              \"address1\": \"23 Hassall Street\",\n 76\n              \"address2\": \"\",\n 77\n              \"city\": \"Parramatta\",\n 78\n              \"company\": null,\n 79\n              \"country\": \"Australia\",\n 80\n              \"email\": \"\",\n 81\n              \"first_name\": \"Tyler\",\n 82\n              \"last_name\": \"Kelleher\",\n 83\n              \"phone\": null,\n 84\n              \"province\": \"New South Wales\",\n 85\n              \"zip\": \"2150\"\n 86\n          },\n 87\n          \"line_items\": [\n 88\n              {\n 89\n                  \"id\": 12675478814742,\n 90\n                  \"shop_id\": 20978040854,\n 91\n                  \"fulfillment_order_id\": 5859337732118,\n 92\n                  \"quantity\": 1,\n 93\n                  \"line_item_id\": 12553770336278,\n 94\n                  \"inventory_item_id\": 44276125368342,\n 95\n                  \"fulfillable_quantity\": 1,\n 96\n                  \"variant_id\": 42182036422678\n 97\n              }\n 98\n          ],\n 99\n          \"fulfill_at\": \"2022-10-13T13:00:00-04:00\",\n 100\n          \"fulfill_by\": null,\n 101\n          \"international_duties\": {\n 102\n              \"incoterm\": \"DAP\"\n 103\n          },\n 104\n          \"fulfillment_holds\": [],\n 105\n          \"delivery_method\": {\n 106\n              \"id\": 140820774934,\n 107\n              \"method_type\": \"shipping\",\n 108\n              \"min_delivery_date_time\": null,\n 109\n              \"max_delivery_date_time\": null\n 110\n          },\n 111\n          \"assigned_location\": {\n 112\n              \"address1\": null,\n 113\n              \"address2\": null,\n 114\n              \"city\": null,\n 115\n              \"country_code\": \"CA\",\n 116\n              \"location_id\": 67794436118,\n 117\n              \"name\": \"test-created-via-api-2\",\n 118\n              \"phone\": null,\n 119\n              \"province\": null,\n 120\n              \"zip\": null\n 121\n          },\n 122\n          \"merchant_requests\": []\n 123\n      }\n 124 }\n Caution\n If you use the REST Admin API's POST fulfillment_orders/cancel endpoint or the GraphQL Admin API's fulfillmentOrderCancel mutation on a fulfillment order assigned to a legacy fulfillment service that hasn't opted into FulfillmentOrder-based fulfillment, then the request will fail. For more information, refer to Migrate to fulfillment orders.\n Request to cancel a fulfillment order\n If a merchant is using a third-party fulfillment service, then the service can support the REQUEST_CANCELLATION action.\n You can use the REST Admin API's POST fulfillment_orders/cancellation_request endpoint or the GraphQL Admin API's fulfillmentOrderSubmitCancellationRequest mutation to send a request to the third-party fulfillment service to cancel the fulfillment order.\n The following example shows how to send a request to the third-party fulfillment service to cancel the fulfillment order. The response returns that the cancellation request is in progress.\n Tip\n Even after a fulfillment request is accepted for a fulfillment order, apps can also submit cancellation requests for the fulfillment order.\n Request to cancel a fulfillment order\n Endpoint\n REST\n GraphQL\n 1 POST https://{shop_name}.com/admin/api/{api_version}/fulfillment_orders/{fulfillment_order_id}/cancellation_request.json\n Request\n REST\n GraphQL\n 1 {\n 2\n    \"fulfillment_order_id\": \"5859337961494\",\n 3\n    \"message\": \"Test Message\"\n 4 }\n JSON response\n REST\n GraphQL\n 1 {\n 2\n    \"fulfillment_order\": {\n 3\n      \"id\": 5859337961494,\n 4\n      \"shop_id\": 20978040854,\n 5\n      \"order_id\": 4804938989590,\n 6\n      \"assigned_location_id\": 67794436118,\n 7\n      \"request_status\": \"cancellation_requested\",\n 8\n      \"status\": \"in_progress\",\n 9\n      \"supported_actions\": [\n 10\n        \"cancel_fulfillment_order\"\n 11\n      ],\n 12\n      \"destination\": {\n 13\n        \"id\": 5479406895126,\n 14\n        \"address1\": \"23 Hassall Street\",\n 15\n        \"address2\": \"\",\n 16\n        \"city\": \"Parramatta\",\n 17\n        \"company\": null,\n 18\n        \"country\": \"Australia\",\n 19\n        \"email\": \"\",\n 20\n        \"first_name\": \"Tyler\",\n 21\n        \"last_name\": \"Kelleher\",\n 22\n        \"phone\": null,\n 23\n        \"province\": \"New South Wales\",\n 24\n        \"zip\": \"2150\"\n 25\n      },\n 26\n      \"origin\": {\n 27\n        \"address1\": null,\n 28\n        \"address2\": null,\n 29\n        \"city\": null,\n 30\n        \"country_code\": \"CA\",\n 31\n        \"location_id\": 67794436118,\n 32\n        \"name\": \"test-created-via-api-2\",\n 33\n        \"phone\": null,\n 34\n        \"province\": null,\n 35\n        \"zip\": null\n 36\n      },\n 37\n      \"line_items\": [\n 38\n        {\n 39\n          \"id\": 12675478814742,\n 40\n          \"shop_id\": 20978040854,\n 41\n          \"fulfillment_order_id\": 5859337961494,\n 42\n          \"quantity\": 1,\n 43\n          \"line_item_id\": 12553770336278,\n 44\n          \"inventory_item_id\": 44276125368342,\n 45\n          \"fulfillable_quantity\": 1,\n 46\n          \"variant_id\": 42182036422678\n 47\n        }\n 48\n      ],\n 49\n      \"outgoing_requests\": [\n 50\n        {\n 51\n          \"message\": \"\",\n 52\n          \"request_options\": {\n 53\n            \"notify_customer\": false\n 54\n          },\n 55\n          \"sent_at\": \"2022-10-13T14:31:20-04:00\",\n 56\n          \"kind\": \"fulfillment_request\"\n 57\n        },\n 58\n        {\n 59\n          \"message\": null,\n 60\n          \"request_options\": {},\n 61\n          \"sent_at\": \"2022-10-13T14:32:45-04:00\",\n 62\n          \"kind\": \"cancellation_request\"\n 63\n        }\n 64\n      ],\n 65\n      \"fulfill_at\": \"2022-10-13T13:00:00-04:00\",\n 66\n      \"fulfill_by\": null,\n 67\n      \"international_duties\": {\n 68\n        \"incoterm\": \"DAP\"\n 69\n      },\n 70\n      \"fulfillment_holds\": [],\n 71\n      \"delivery_method\": {\n 72\n        \"id\": 140821004310,\n 73\n        \"method_type\": \"shipping\",\n 74\n        \"min_delivery_date_time\": null,\n 75\n        \"max_delivery_date_time\": null\n 76\n      }\n 77\n    }\n 78 }\n Caution\n If you use the REST Admin API's POST fulfillment_orders/cancellation_request endpoint or the GraphQL Admin API's fulfillmentOrderSubmitCancellationRequest mutation on a fulfillment order assigned to a legacy fulfillment service that hasn't opted into FulfillmentOrder-based fulfillment, then the request will fail. For more information, refer to Migrate to fulfillment orders.\n Fulfillment outside of Shopify\n Fulfillment orders that are assigned to an external fulfillment service return EXTERNAL as a supported action.\n When dealing with a fulfillment order that's assigned to an external fulfillment service, your app should redirect the merchant to the URL in the externalUrl field to initiate the fulfillment process outside of Shopify.\n Webhooks\n In API version 2023-01 and higher, your app can subscribe to webhooks for event notifications related to fulfillment orders. The following examples show the JSON responses from each of the available webhooks.\n To learn how to set up and consume webhooks, refer to Webhooks configuration overview.\n Example webhook responses\n fulfillment_orders/order_routing_complete\n fulfillment_orders/fulfillment_request_submitted\n fulfillment_orders/fulfillment_request_accepted\n fulfillment_orders/fulfillment_request_rejected\n fulfillment_orders/placed_on_hold\n fulfillment_orders/hold_released\n fulfillment_orders/scheduled_fulfillment_order_ready\n fulfilment_orders/rescheduled\n fulfillment_orders/cancellation_request_submitted\n fulfillment_orders/cancellation_request_accepted\n fulfillment_orders/cancellation_request_rejected\n fulfillment_orders/cancelled\n fulfillment_orders/fulfillment_service_failed_to_complete\n 1 // Occurs when a fulfillment order is created and the order routing has been completed for the order\n 2 {\n 3\n   \"fulfillment_order\": {\n 4\n     \"id\": \"gid://shopify/FulfillmentOrder/1\",\n 5\n     \"status\": \"open\",\n 6\n   }\n 7 }\n Next steps\n Learn about the recommended workflow for using Shopify APIs to track orders placed through third-party marketplaces.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Requirements\n Step 1: Retrieve an order\n Step 2: Retrieve inventory levels\n Step 3: Query supported fulfillment order actions\n Step 4: Determine which actions to take\n Webhooks\n Next steps\n Updates & News\n Developer changelog\n Partner blog",
                    "filename": "docs/apps/fulfillment/order-management-apps/manage-fulfillments/content.txt",
                    "start_index": 36637,
                    "end_index": 47457,
                    "start_line": 32,
                    "end_line": 2235,
                    "max_line": 2235,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Billing\n App Store\n Track orders placed through third-party marketplaces\n Orders that are created through third-party marketplaces, like Facebook or Google, use Shopify Payments as the payment processor.\n This guide describes a high-level, recommended workflow for using Shopify APIs to track orders placed through third-party marketplaces.\n Caution\n If you maintain a third-party app or Shopify Flow workflow that relies on Order (GraphQL or REST) and Fulfillment (GraphQL or REST) API resources for order automation, then you should review and implement the recommendations in this guide to make sure that your apps and workflows continue to work as expected.\n Requirements\n Your app can make authenticated requests to the REST Admin API or GraphQL Admin API.\n Your store has existing orders that are unfulfilled.\n If you want to create test orders, then refer to Manage test orders.\n If you need to make changes to an unfulfilled item, then you can edit an order.\n You're familiar with the API objects that pertain to fulfillment orders.\n You've met Shopify's protected customer data requirements.\n How it works\n Orders that are placed through third-party marketplaces and orders placed from other channels go through different workflows. The following diagram illustrates the differences between the workflows:\n Orders placed through third-party marketplaces\n The following workflow considerations apply for orders that are placed through third-party marketplaces:\n Orders aren't created with automatically captured transactions.\n Merchants have to fulfill an order before the transaction is captured automatically and the order is marked as paid. Transaction capture is initiated by the third-party marketplace.\n Orders can't be fulfilled immediately.\n They must be held until a period between 30 minutes and 24 hours has passed before they can be fulfilled. This is to account for customer cancellation, payment authorization, and fraud and risk analysis.\n From the time that a payment is authorized until it's captured, merchants can't perform the following actions on an order:\n Change the destination address\n Edit the order\n Issue refunds for custom amounts\n Capture the payment manually\n Orders placed through other channels\n For orders placed through other channels, transactions are automatically captured before the order is fulfilled. Merchants or third-party fulfillment services can also immediately act on orders to begin the fulfillment process.\n To learn more about fulfillment workflows for orders placed through other channels, refer to the following guides:\n Manage fulfillments as an order management app\n Manage fulfillments as a fulfillment service app\n Step 1: Migrate your app to use fulfillment orders\n In Shopify, the FulfillmentOrder resource models an end-to-end fulfillment process and is available in both the REST Admin API and the GraphQL Admin API. The FulfillmentOrder resource enables fulfillment data to sync accurately between Shopify and apps.\n By API version 2023-07, all apps should be using the FulfillmentOrder object to manage fulfillments. Apps using the following REST or GraphQL Admin API resources or objects to fulfill orders are using a legacy workflow that is no longer supported as of API version 2022-07:\n Order REST or GraphQL.\n Fulfillment REST or GraphQL.\n To learn how to migrate your app, refer to Migrate to fulfillment orders.\n Step 2: Determine the source channel of an order\n You can use the following API resources to determine the source channel of an order:\n REST Admin API: Use the Order or Checkout resources.\n GraphQL Admin API: Use the DraftOrderInput input object.\n Note\n For an order to be correctly attributed to a channel, you must register the channels that your app is managing. After that, or if your app already has its channels registered, you can refer to the list of source_name values in the Partner Dashboard, on the app's Marketplace extension.\n Identify orders processed with Shopify Payments or Facebook Payments\n To identify an order that was processed with Shopify Payments or Facebook Payments, you can retrieve the order using the GraphQL Admin API or REST Admin API and review the information in specific response fields.\n The following table lists the response fields and values that you can review when you retrieve an order:\n GraphQL order response fields and values\n API Field or property Shopify Payments value Facebook Payments value\n GraphQL Admin API displayFulfillmentStatus ON_HOLD UNFULFILLED\n displayFinancialStatus AUTHORIZED PAID\n paymentGatewayNames [\"shopify_payments\"] [\"instagram\"]\n REST Admin API financial_status authorized paid\n gateway shopify_payments instagram\n payment_gateway_names [\"shopify_payments\"] [\"instagram\"]\n processing_method \"direct\" \"\"\n source_identifier 250736083723744,2283522795111633 255082969810519\n reference nil 255082969810519\n customer_locale en nil\n shipping_lines\n source: custom\n title: STANDARD (3-5 Business days)\n source: nil\n title: FB STANDARD (3-7 Business days)\n Considerations\n Because orders that are placed through third-party marketplaces use Shopify Payments instead of a unique payment gateway, the gateway value doesn't reflect the channel in which the order is created. Fields like reference and source_identifier aren't guaranteed across different apps.\n Orders that are created using the GraphQL Admin API or REST Admin API can be assigned any of the source_name values that are listed in the Partner Dashboard.\n Use the source_name of an order to determine its channel source. The source_name property can be set only during order creation. It's not writeable afterwards.\n Alternatively, orders can be assigned a custom string or left unspecified:\n If source_name is a custom string, then the order is unattributed.\n If source_name is unspecified, then new orders are assigned the value of your app's ID.\n Step 3: Determine if the order can be fulfilled\n You can use the order financial status and fulfillment order status to determine if an order should be fulfilled. The following table describes the fields or properties, values, and webhooks that you can use to determine if an order can be fulfilled:\n Fields and values in the GraphQL Admin and REST Admin APIs\n API Object or resource Field or property Value Webhooks\n GraphQL Admin API Order displayFinancialStatus AUTHORIZED or PAID orders/updated\n FulfillmentOrder status OPEN fulfillment_orders/\n order_routing_complete\n \n fulfillment_orders/\n scheduled_fulfillment_order_ready\n \n fulfillment_orders/\n hold_released\n \n (API version 2023-01 and higher)\n REST Admin API Order financial_status authorized or paid orders/updated\n FulfillmentOrder status open fulfillment_orders/\n order_routing_complete\n \n fulfillment_orders/\n scheduled_fulfillment_order_ready\n \n fulfillment_orders/\n hold_released\n \n (API version 2023-01 and higher)\n Order financial status\n Sales channel apps for third-party marketplaces require that an order is fulfilled before payments are automatically captured by the marketplace.\n To prevent the expiration of authorized payments, a post-order workflow shouldn't use payment captured as the condition for fulfillment. Instead, determine if an order has payment authorization (\"status\": \"authorized\") and an open fulfillment order (\"status\": \"open\") before fulfillment. You can do this by reviewing the following information:\n the financial_status property in the REST Admin API Order resource\n the displayFinancialStatus field in the GraphQL Admin API Order object\n Fulfillment order status\n A fulfillment order is ready for fulfillment when its status is open. For more information about how a fulfillment order transitions to different statuses, refer to Statuses.\n Each fulfillment order includes a list of supported fulfillment order actions to determine which actions it can take. For more information about fulfillment order actions, refer to determine which actions to take.\n Considerations\n You can't use line_items.fulfillable_quantity to determine if an order is fulfillable if the fulfillment order is on hold. The value 0 is returned.\n Check the status of the fulfillment order before you create a fulfillment following an order/create webhook. If the status is on_hold, then the API request to create a fulfillment fails.\n Avoid using a predetermined value for the on-hold time period. This value differs across marketplaces.\n Avoid using the gateway field or property to determine if an order is created through a channel.\n For example, after migrating your app, the gateway value of an order created on the Facebook sales channel app changes from instagram/facebook to shopify_payments. Instead, use source_name to determine the source of an order.\n Best practices\n The following section provides some best practices for tracking orders that are placed through third-party marketplaces.\n Don't rely on order creation events to initiate fulfillments\n Avoid workflows that depend on the orders/create, order_transactions/create or order/paid webhook events to initiate fulfillments.\n Instead, use the fulfillment_orders/ready_to_fulfill webhook (available only in the unstable version of the API) and the FulfillmentOrder response body to determine if a fulfillment order is ready for fulfillment.\n Support Facebook Payments and Shopify Payments workflows\n During the transition, apps need to support both the Facebook Payments and Shopify Payments workflows. For the transition period, we recommend determining the post-order workflow based on the gateway.\n Orders that are created through a sales channel app on a Shopify Payments-enabled store will see transactions created in an authorized state. Orders have to complete fulfillment before payment is captured automatically by the marketplace. During the transition period, create a condition check on the payment gateways value to determine the post-order workflow.\n Next steps\n Learn how to manage fulfillments as an order management app.\n Learn how to manage fulfillments as a fulfillment service app.\n Learn how to create test orders and transactions to validate your app's behavior.\n Edit existing orders using the GraphQL Admin API.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Requirements\n How it works\n Step 1: Migrate your app to use fulfillment orders\n Step 2: Determine the source channel of an order\n Step 3: Determine if the order can be fulfilled\n Best practices\n Next steps\n Updates & News",
                    "filename": "docs/apps/fulfillment/order-management-apps/third-party-marketplaces/content.txt",
                    "start_index": 0,
                    "end_index": 10418,
                    "start_line": 1,
                    "end_line": 135,
                    "max_line": 135,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Billing\n App Store\n Manage fulfillments as an order management app\n Order management apps can automate the fulfillment process in Shopify on behalf of merchants.\n This guide describes how to use the REST and GraphQL Admin APIs to query orders and inventory levels, and manage orders using fulfillment order actions.\n Requirements\n Your app can make authenticated requests to the REST Admin API or GraphQL Admin API.\n Your app has the merchant_managed_fulfillment_orders and third_party_fulfillment_orders access scopes. Learn how to configure your access scopes using Shopify CLI.\n Your store has existing orders that are unfulfilled.\n If you want to create test orders, then refer to Manage test orders.\n If you need to make changes to an unfulfilled item, then you can edit an order.\n You're familiar with the API objects that pertain to fulfillment orders.\n You've met Shopify's protected customer data requirements.\n Step 1: Retrieve an order\n You can use the REST Admin API's GET fulfillment_orders endpoint or the GraphQL Admin API's order query to retrieve an order and its associated fulfillment orders. To retrieve fulfillment orders, provide the ID of the order in the request.\n The response returns information about the associated fulfillment orders, including the fulfillment order ID, fulfillment order line items, supported actions, and assigned locations. Make note of the inventory item ID, as you'll use it to query inventory levels in the next step.\n Retrieve an order\n Endpoint\n REST\n GraphQL\n 1 GET https://{shop}.myshopify.com/admin/api/{api_version}/orders/{order_id}/fulfillment_orders.json\n Request\n REST\n GraphQL\n 1 {empty request body}\n JSON response\n REST\n GraphQL\n 1 {\n 2\n    \"fulfillment_orders\": [\n 3\n      {\n 4\n        \"id\": 5862182256662,\n 5\n        \"shop_id\": 20978040854,\n 6\n        \"order_id\": 4807783546902,\n 7\n        \"assigned_location_id\": 67794436118,\n 8\n        \"request_status\": \"submitted\",\n 9\n        \"status\": \"closed\",\n 10\n        \"supported_actions\": [],\n 11\n        \"destination\": {\n 12\n          \"id\": 5482111664150,\n 13\n          \"address1\": \"23 Ferny Avenue\",\n 14\n          \"address2\": null,\n 15\n          \"city\": \"Surfers Paradise\",\n 16\n          \"company\": null,\n 17\n          \"country\": \"Australia\",\n 18\n          \"email\": \"fake@example.com\",\n 19\n          \"first_name\": \"Tyler\",\n 20\n          \"last_name\": \"Kelleher\",\n 21\n          \"phone\": null,\n 22\n          \"province\": \"Queensland\",\n 23\n          \"zip\": \"4217\"\n 24\n        },\n 25\n        \"line_items\": [],\n 26\n        \"fulfill_at\": \"2022-10-17T15:00:00-04:00\",\n 27\n        \"fulfill_by\": null,\n 28\n        \"international_duties\": {\n 29\n          \"incoterm\": \"DAP\"\n 30\n        },\n 31\n        \"fulfillment_holds\": [],\n 32\n        \"delivery_method\": {\n 33\n          \"id\": 143626010646,\n 34\n          \"method_type\": \"shipping\",\n 35\n          \"min_delivery_date_time\": null,\n 36\n          \"max_delivery_date_time\": null\n 37\n        },\n 38\n        \"assigned_location\": {\n 39\n          \"address1\": null,\n 40\n          \"address2\": null,\n 41\n          \"city\": null,\n 42\n          \"country_code\": \"CA\",\n 43\n          \"location_id\": 67794436118,\n 44\n          \"name\": \"test-created-via-api-2\",\n 45\n          \"phone\": null,\n 46\n          \"province\": null,\n 47\n          \"zip\": null\n 48\n        },\n 49\n        \"merchant_requests\": [\n 50\n          {\n 51\n            \"message\": null,\n 52\n            \"request_options\": {\n 53\n              \"notify_customer\": false\n 54\n            },\n 55\n            \"sent_at\": \"2022-10-17T15:55:29-04:00\",\n 56\n            \"kind\": \"fulfillment_request\"\n 57\n          }\n 58\n        ]\n 59\n      },\n 60\n      {\n 61\n        \"id\": 5862310150166,\n 62\n        \"shop_id\": 20978040854,\n 63\n        \"order_id\": 4807783546902,\n 64\n        \"assigned_location_id\": 67794436118,\n 65\n        \"request_status\": \"unsubmitted\",\n 66\n        \"status\": \"open\",\n 67\n        \"supported_actions\": [\n 68\n          \"request_fulfillment\",\n 69\n          \"hold\",\n 70\n          \"move\"\n 71\n        ],\n 72\n        \"destination\": {\n 73\n          \"id\": 5482189881366,\n 74\n          \"address1\": \"23 Ferny Avenue\",\n 75\n          \"address2\": null,\n 76\n          \"city\": \"Surfers Paradise\",\n 77\n          \"company\": null,\n 78\n          \"country\": \"Australia\",\n 79\n          \"email\": \"fake@example.com\",\n 80\n          \"first_name\": \"Tyler\",\n 81\n          \"last_name\": \"Kelleher\",\n 82\n          \"phone\": null,\n 83\n          \"province\": \"Queensland\",\n 84\n          \"zip\": \"4217\"\n 85\n        },\n 86\n        \"line_items\": [\n 87\n          {\n 88\n            \"id\": 12680896348182,\n 89\n            \"shop_id\": 20978040854,\n 90\n            \"fulfillment_order_id\": 5862310150166,\n 91\n            \"quantity\": 1,\n 92\n            \"line_item_id\": 12559203336214,\n 93\n            \"inventory_item_id\": 44276125368342,\n 94\n            \"fulfillable_quantity\": 1,\n 95\n            \"variant_id\": 42182036422678\n 96\n          },\n 97\n          {\n 98\n            \"id\": 12680896380950,\n 99\n            \"shop_id\": 20978040854,\n 100\n            \"fulfillment_order_id\": 5862310150166,\n 101\n            \"quantity\": 1,\n 102\n            \"line_item_id\": 12559203368982,\n 103\n            \"inventory_item_id\": 32884276494358,\n 104\n            \"fulfillable_quantity\": 1,\n 105\n            \"variant_id\": 31360689504278\n 106\n          }\n 107\n        ],\n 108\n        \"fulfill_at\": \"2022-10-17T15:00:00-04:00\",\n 109\n        \"fulfill_by\": null,\n 110\n        \"international_duties\": {\n 111\n          \"incoterm\": \"DAP\"\n 112\n        },\n 113\n        \"fulfillment_holds\": [],\n 114\n        \"delivery_method\": {\n 115\n          \"id\": 143738765334,\n 116\n          \"method_type\": \"shipping\",\n 117\n          \"min_delivery_date_time\": null,\n 118\n          \"max_delivery_date_time\": null\n 119\n        },\n 120\n        \"assigned_location\": {\n 121\n          \"address1\": null,\n 122\n          \"address2\": null,\n 123\n          \"city\": null,\n 124\n          \"country_code\": \"CA\",\n 125\n          \"location_id\": 67794436118,\n 126\n          \"name\": \"test-created-via-api-2\",\n 127\n          \"phone\": null,\n 128\n          \"province\": null,\n 129\n          \"zip\": null\n 130\n        },\n 131\n        \"merchant_requests\": []\n 132\n      }\n 133\n    ]\n 134 }\n Step 2: Retrieve inventory levels\n You can use the REST Admin API's GET inventory_items endpoint or the GraphQL Admin API's inventoryItem query to retrieve the inventory levels for items and the locations where the items are stocked.\n To retrieve inventory levels, provide the ID of the inventory item in your request:\n Retrieve inventory levels\n Endpoint\n REST\n GraphQL\n 1 GET https://{shop}.myshopify.com/admin/api/{api_version}/inventory_items/{inventory_item_id}.json\n Request\n REST\n GraphQL\n 1 {empty request body}\n JSON response\n REST\n GraphQL\n 1 {\n 2\n    \"inventory_item\": {\n 3\n      \"id\": 32884276494358,\n 4\n      \"sku\": \"123456\",\n 5\n      \"created_at\": \"2020-04-19T15:35:48-04:00\",\n 6\n      \"updated_at\": \"2022-04-28T13:29:30-04:00\",\n 7\n      \"requires_shipping\": true,\n 8\n      \"cost\": null,\n 9\n      \"country_code_of_origin\": \"US\",\n 10\n      \"province_code_of_origin\": null,\n 11\n      \"harmonized_system_code\": null,\n 12\n      \"tracked\": true,\n 13\n      \"country_harmonized_system_codes\": [],\n 14\n      \"admin_graphql_api_id\": \"gid://shopify/InventoryItem/32884276494358\"\n 15\n    }\n 16 }\n Step 3: Query supported fulfillment order actions\n Each fulfillment order object includes a list of supported fulfillment order actions to determine which actions the app can take. This information is available in the JSON response received in the first step in this guide.\n If you're using the GraphQL Admin API, then you can use the order query to independently request information about fulfillment order actions. Provide the order ID to retrieve supported actions:\n POST https://{shop}.myshopify.com/admin/api/unstable/graphql.json\n GraphQL query\n 1 query getOrderByID {\n 2\n    order(id: \"gid://shopify/Order/4057210552342\") {\n 3\n      id\n 4\n      name\n 5\n      fulfillmentOrders(first: 10) {\n 6\n        edges {\n 7\n          node {\n 8\n            id\n 9\n            status\n 10\n            requestStatus\n 11\n            supportedActions {\n 12\n              action\n 13\n            }\n 14\n          }\n 15\n        }\n 16\n      }\n 2\n    \"data\": {\n 3\n      \"order\": {\n 4\n        \"id\": \"gid://shopify/Order/4057210552342\",\n 5\n        \"name\": \"#1007\",\n 6\n        \"fulfillmentOrders\": {\n 7\n          \"edges\": [\n 8\n            {\n 9\n              \"node\": {\n 10\n                \"id\": \"gid://shopify/FulfillmentOrder/5012074758166\",\n 11\n                \"status\": \"OPEN\",\n 12\n                \"requestStatus\": \"UNSUBMITTED\",\n 13\n                \"supportedActions\": [\n 14\n                  {\n 15\n                    \"action\": \"CREATE_FULFILLMENT\"\n 16\n                  },\n 17\n                  {\n 18\n                    \"action\": \"MOVE\"\n 19\n                  }\n 20\n                ]\n 21\n              }\n 22\n            }\n 23\n          ]\n 24\n        }\n 25\n      }\n 26\n    }\n 27 }\n Step 4: Determine which actions to take\n If a fulfillment order is open, then apps can inspect the list of supported actions and decide what to action to take.\n The following table describes the list of supported fulfillment order actions. Each action is used at a different stage in the fulfillment process.\n Fulfillment order action Description\n MOVE Moves a fulfillment order between merchant-managed locations.\n CREATE_FULFILLMENT Creates a fulfillment for an order that a merchant or third-party fulfillment service can manage.\n REQUEST_FULFILLMENT Sends a request to a third-party fulfillment service to fulfill an order.\n CANCEL_FULFILLMENT_ORDER Immediately cancels a fulfillment that's being managed by a third-party fulfillment service.\n REQUEST_CANCELLATION Sends a request to a third-party fulfillment service to cancel a fulfillment order.\n EXTERNAL Indicates fulfillment orders that are assigned to an external fulfillment service.\n Note\n Apps should filter out closed fulfillment orders. Closed fulfillment orders have no supported actions, and can't be changed.\n Move a fulfillment order\n You can use the REST Admin API's POST fulfillment_orders/move endpoint or the GraphQL Admin API's fulfillmentOrderMove mutation to move a fulfillment order from one location to another.\n Only fulfillment orders assigned to merchant-managed locations can be moved between locations, and moving a fulfillment order has no impact on the shipping rate that the customer has already paid.\n Move a fulfillment order\n Endpoint\n REST\n GraphQL\n 1 POST https://{shop}.myshopify.com/admin/api/{api_version}/fulfillment_orders/{fufillment_order_id}/move.json\n Request\n REST\n GraphQL\n 1 {\n 2\n    \"fulfillment_order_id\": \"5859333242902\",\n 3\n    \"fulfillment_order\": {\n 4\n      \"new_location_id\": \"67794436118\"\n 5\n    }\n 6 }\n JSON response\n REST\n GraphQL\n 1 {\n 2\n    // The original `fulfillment_order` that was requested to be moved.",
                    "filename": "docs/apps/fulfillment/order-management-apps/manage-fulfillments/content.txt",
                    "start_index": 0,
                    "end_index": 10860,
                    "start_line": 1,
                    "end_line": 465,
                    "max_line": 2235,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Shipping and fulfillment\n AssignedFulfillmentOrder\n CancellationRequest\n CarrierService\n Fulfillment\n FulfillmentEvent\n FulfillmentOrder\n FulfillmentRequest\n JSON\n The FulfillmentRequest resource\n POST\n Sends a fulfillment request\n POST\n Accepts a fulfillment request\n POST\n Rejects a fulfillment request\n FulfillmentService\n LocationsForMove\n Shopify Payments\n Store properties\n TenderTransaction\n Webhooks\n Deprecated API calls\n FulfillmentRequest\n Multiple access scopes needed \u2014 refer to each endpoint for access scope requirements.\n The FulfillmentRequest resource represents a fulfillment request made by the merchant or an order management app to a fulfillment service for a fulfillment order. A fulfillment service can accept or reject the fulfillment request.\n Terminating a fulfillment request\n A fulfillment service can stop fulfilling an accepted fulfillment request if they choose closing the fulfillment order as incomplete. The fulfillment order can be partially fulfilled when a fulfillment service chooses to stop the fulfillment.\n The merchant or an order management app can notify the fulfillment service to cancel an accepted fulfillment request by sending a cancellation request. The fulfillment service can accept or reject the cancellation request. The fulfillment order can be partially fulfilled at this time.\n The merchant or an order management app can also cancel a fulfillment order. Calling the cancel endpoint results in the fulfilment order being cancelled within Shopify. This change will not be communicated to the fulfilment service. If the intention is for a fulfilment service to halt fulfilment activity, a cancellation request should be sent to the fulfilment service instead, as described above.\n Retrieving fulfillment request details\n The FulfillmentOrder resource and the merchant_requests field can be used to retrieve the merchant requests which have been made. The overall status of these requests is also available using the request_status field of the fulfillment order.\n To learn more about the fulfillment request process in the fulfillment workflow, refer to Manage fulfillments as a fulfillment service app guide.\n Was this section helpful?\n YesNo\n #\n Endpoints\n POST\n /admin/api/2024-04/fulfillment_orders/{fulfillment_order_id}/fulfillment_request.json\n Sends a fulfillment request\n POST\n /admin/api/2024-04/fulfillment_orders/{fulfillment_order_id}/fulfillment_request/accept.json\n Accepts a fulfillment request\n POST\n /admin/api/2024-04/fulfillment_orders/{fulfillment_order_id}/fulfillment_request/reject.json\n Rejects a fulfillment request\n The FulfillmentRequest resource\n Properties\n Was this section helpful?\n YesNo\n {}\n The FulfillmentRequest resource\n 1\n {}\n POST\n Sends a fulfillment request\n Requires third_party_fulfillment_orders access scope.\n Sends a fulfillment request to the fulfillment service of a fulfillment order.\n Parameters\n api_version\n string\n required\n fulfillment_order_id\n string\n required\n fulfillment_order_line_items\n The fulfillment order line items to be requested for fulfillment. If left blank, all line items of the fulfillment order are requested for fulfillment.\n message\n An optional message for the fulfillment request.\n Was this section helpful?\n YesNo\n Examples\n Sends a fulfillment request to the fulfillment service for all line items on the fulfillment order if fulfillment_order_line_items is left blank\n Path parameters\n fulfillment_order_id=1046000934\n string\n required\n Sends a fulfillment request to the fulfillment service of a fulfillment order for the specified line items\n Was this section helpful?\n YesNo\n POST\n /admin/api/2024-04/fulfillment_orders/1046000934/fulfillment_request.json\n cURL\n Remix\n Ruby\n 4\n 5\n curl -d '{\"fulfillment_request\":{\"message\":\"Fulfill this ASAP please.\"}}' \\\n -X POST \"https://your-development-store.myshopify.com/admin/api/2024-04/fulfillment_orders/1046000934/fulfillment_request.json\" \\\n -H \"X-Shopify-Access-Token: {access_token}\" \\\n -H \"Content-Type: application/json\"\n \n {}\n Response\n JSON\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n HTTP/1.1 200 OK\n {\n \"original_fulfillment_order\": {\n \"id\": 1046000934,\n \"shop_id\": 548380009,\n \"order_id\": 450789469,\n \"assigned_location_id\": 24826418,\n \"request_status\": \"submitted\",\n \"status\": \"open\",\n \"supported_actions\": [\n \"cancel_fulfillment_order\"\n ],\n \"destination\": {\n \"id\": 1046000849,\n \"address1\": \"Chestnut Street 92\",\n \"address2\": \"\",\n \"city\": \"Louisville\",\n \"company\": null,\n \"country\": \"United States\",\n \"email\": \"bob.norman@mail.example.com\",\n \"first_name\": \"Bob\",\n \"last_name\": \"Norman\",\n \"phone\": \"+1(502)-459-2181\",\n \"province\": \"Kentucky\",\n \"zip\": \"40202\"\n },\n \"origin\": {\n \"address1\": null,\n \"address2\": null,\n \"city\": null,\n \"country_code\": \"DE\",\n \"location_id\": 24826418,\n \"name\": \"Apple Api Shipwire\",\n \"phone\": null,\n \"province\": null,\n \"zip\": null\n },\n \"line_items\": [\n {\n \"id\": 1058737693,\n \"shop_id\": 548380009,\n \"fulfillment_order_id\": 1046000934,\n \"quantity\": 1,\n \"line_item_id\": 466157049,\n \"inventory_item_id\": 39072856,\n \"fulfillable_quantity\": 1,\n \"variant_id\": 39072856\n },\n {\n \"id\": 1058737694,\n \"shop_id\": 548380009,\n \"fulfillment_order_id\": 1046000934,\n \"quantity\": 1,\n \"line_item_id\": 518995019,\n \"inventory_item_id\": 49148385,\n POST\n Accepts a fulfillment request\n Requires assigned_fulfillment_orders access scope.\n Accepts a fulfillment request sent to a fulfillment service for a fulfillment order.\n Parameters\n api_version\n string\n required\n fulfillment_order_id\n string\n required\n message\n An optional reason for accepting the fulfillment request.\n Was this section helpful?\n YesNo\n Examples\n Accepts a fulfillment request sent to a fulfillment service and updates the fulfillment order\n Path parameters\n fulfillment_order_id=1046000932\n string\n required\n Was this section helpful?\n YesNo\n POST\n /admin/api/2024-04/fulfillment_orders/1046000932/fulfillment_request/accept.json\n curl -d '{\"fulfillment_request\":{\"message\":\"We will start processing your fulfillment on the next business day.\"}}' \\\n -X POST \"https://your-development-store.myshopify.com/admin/api/2024-04/fulfillment_orders/1046000932/fulfillment_request/accept.json\" \\\n -H \"X-Shopify-Access-Token: {access_token}\" \\\n -H \"Content-Type: application/json\"\n \n 53\n 54\n 55\n HTTP/1.1 200 OK\n {\n \"fulfillment_order\": {\n \"id\": 1046000932,\n \"shop_id\": 548380009,\n \"order_id\": 450789469,\n \"assigned_location_id\": 24826418,\n \"request_status\": \"accepted\",\n \"status\": \"in_progress\",\n \"supported_actions\": [\n \"request_cancellation\"\n ],\n \"destination\": {\n \"id\": 1046000847,\n \"address1\": \"Chestnut Street 92\",\n \"address2\": \"\",\n \"city\": \"Louisville\",\n \"company\": null,\n \"country\": \"United States\",\n \"email\": \"bob.norman@mail.example.com\",\n \"first_name\": \"Bob\",\n \"last_name\": \"Norman\",\n \"phone\": \"+1(502)-459-2181\",\n \"province\": \"Kentucky\",\n \"zip\": \"40202\"\n },\n \"origin\": {\n \"address1\": null,\n \"address2\": null,\n \"city\": null,\n \"country_code\": \"DE\",\n \"location_id\": 24826418,\n \"name\": \"Apple Api Shipwire\",\n \"phone\": null,\n \"province\": null,\n \"zip\": null\n },\n \"line_items\": [\n {\n \"id\": 1058737687,\n \"shop_id\": 548380009,\n \"fulfillment_order_id\": 1046000932,\n \"quantity\": 1,\n \"line_item_id\": 466157049,\n \"inventory_item_id\": 39072856,\n \"fulfillable_quantity\": 1,\n \"variant_id\": 39072856\n },\n {\n \"id\": 1058737688,\n \"shop_id\": 548380009,\n \"fulfillment_order_id\": 1046000932,\n \"quantity\": 1,\n \"line_item_id\": 518995019,\n \"inventory_item_id\": 49148385,\n POST\n Rejects a fulfillment request\n Requires assigned_fulfillment_orders access scope.\n Rejects a fulfillment request sent to a fulfillment service for a fulfillment order.\n Parameters\n api_version\n string\n required\n fulfillment_order_id\n string\n required\n line_items\n array\n An optional array of line item rejection details. If none are provided, all line items will be assumed to be unfulfillable.\n \n Note: After the fulfillment request has been rejected, none of the line items will be able to be fulfilled. This field documents which line items specifically were unable to be fulfilled and why.\n \n Each line item has the following properties:\n Show line_items properties\n message\n An optional message for rejecting the fulfillment request.\n reason\n enum\n An optional reason for the fulfillment request rejection.\n Show reason properties\n Was this section helpful?\n YesNo\n Examples\n Rejects a fulfillment request sent to a fulfillment service and updates the fulfillment order\n Path parameters\n fulfillment_order_id=1046000933\n string\n required\n Was this section helpful?\n YesNo\n POST\n /admin/api/2024-04/fulfillment_orders/1046000933/fulfillment_request/reject.json\n curl -d '{\"fulfillment_request\":{\"message\":\"Not enough inventory on hand to complete the work.\",\"reason\":\"inventory_out_of_stock\",\"line_items\":[{\"fulfillment_order_line_item_id\":1058737690,\"message\":\"Not enough inventory.\"}]}}' \\\n -X POST \"https://your-development-store.myshopify.com/admin/api/2024-04/fulfillment_orders/1046000933/fulfillment_request/reject.json\" \\\n -H \"X-Shopify-Access-Token: {access_token}\" \\\n -H \"Content-Type: application/json\"\n \n 53\n 54\n 55\n HTTP/1.1 200 OK\n {\n \"fulfillment_order\": {\n \"id\": 1046000933,\n \"shop_id\": 548380009,\n \"order_id\": 450789469,\n \"assigned_location_id\": 24826418,\n \"request_status\": \"rejected\",\n \"status\": \"open\",\n \"supported_actions\": [\n \"request_fulfillment\"\n ],\n \"destination\": {\n \"id\": 1046000848,\n \"address1\": \"Chestnut Street 92\",\n \"address2\": \"\",\n \"city\": \"Louisville\",\n \"company\": null,\n \"country\": \"United States\",\n \"email\": \"bob.norman@mail.example.com\",\n \"first_name\": \"Bob\",\n \"last_name\": \"Norman\",\n \"phone\": \"+1(502)-459-2181\",\n \"province\": \"Kentucky\",\n \"zip\": \"40202\"\n },\n \"origin\": {\n \"address1\": null,\n \"address2\": null,\n \"city\": null,\n \"country_code\": \"DE\",\n \"location_id\": 24826418,\n \"name\": \"Apple Api Shipwire\",\n \"phone\": null,\n \"province\": null,\n \"zip\": null\n },\n \"line_items\": [\n {\n \"id\": 1058737690,\n \"shop_id\": 548380009,\n \"fulfillment_order_id\": 1046000933,\n \"quantity\": 1,\n \"line_item_id\": 466157049,\n \"inventory_item_id\": 39072856,\n \"fulfillable_quantity\": 1,\n \"variant_id\": 39072856\n },\n {\n \"id\": 1058737691,\n \"shop_id\": 548380009,\n \"fulfillment_order_id\": 1046000933,\n \"quantity\": 1,\n \"line_item_id\": 518995019,\n \"inventory_item_id\": 49148385,\n Updates & News\n Developer changelog",
                    "filename": "docs/api/admin-rest/current/resources/fulfillmentrequest/content.txt",
                    "start_index": 0,
                    "end_index": 10346,
                    "start_line": 1,
                    "end_line": 375,
                    "max_line": 375,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "If all items from the cancelled fulfillment can't be sourced from the same location, then the new fulfillment order is assigned to a location where the items are stocked, considering the shop\u2019s fulfillment priority settings. This might result in multiple newly opened fulfillment orders for different locations.\n If the fulfillment order was partially fulfilled, then the fulfillment order line item and remaining quantity properties / fields are adjusted back based on the cancelled fulfillment\u2019s line items.\n Cancel a fulfillment\n Endpoint\n REST\n GraphQL\n 1 POST https://{shop}.myshopify.com/admin/api/{api_version}/fulfillments/{fulfillment_id}/cancel.json\n Request\n REST\n GraphQL\n 1 {\n 2\n    \"id\": \"3849425780758\",\n 3 }\n JSON response\n REST\n GraphQL\n 1 {\n 2\n    \"fulfillment\": {\n 3\n      \"order_id\": 4782479474710,\n 4\n      \"status\": \"cancelled\",\n 5\n      \"location_id\": 67794436118,\n 6\n      \"id\": 3849425780758,\n 7\n      \"created_at\": \"2022-10-13T13:27:16-04:00\",\n 8\n      \"service\": \"test-created-via-api-2\",\n 9\n      \"updated_at\": \"2022-10-13T13:30:06-04:00\",\n 10\n      \"tracking_company\": null,\n 11\n      \"shipment_status\": null,\n 12\n      \"origin_address\": null,\n 13\n      \"line_items\": [\n 14\n        {\n 15\n          \"id\": 12450204712982,\n 16\n          \"variant_id\": 31360689504278,\n 17\n          \"title\": \"T\u00ebrvete T-Shirt\",\n 18\n          \"quantity\": 1,\n 19\n          \"sku\": \"123456\",\n 20\n          \"variant_title\": \"\",\n 21\n          \"vendor\": \"tkelleher-usa-store\",\n 22\n          \"fulfillment_service\": \"test-created-via-api-2\",\n 23\n          \"product_id\": 4351387861014,\n 24\n          \"requires_shipping\": true,\n 25\n          \"taxable\": true,\n 26\n          \"gift_card\": false,\n 27\n          \"name\": \"T\u00ebrvete T-Shirt\",\n 28\n          \"variant_inventory_management\": \"shopify\",\n 29\n          \"properties\": [],\n 30\n          \"product_exists\": true,\n 31\n          \"fulfillable_quantity\": 0,\n 32\n          \"grams\": 408,\n 33\n          \"price\": \"10.00\",\n 34\n          \"total_discount\": \"0.00\",\n 35\n          \"fulfillment_status\": \"fulfilled\",\n 36\n          \"price_set\": {\n 37\n            \"shop_money\": {\n 38\n              \"amount\": \"10.00\",\n 39\n              \"currency_code\": \"CAD\"\n 40\n            },\n 41\n            \"presentment_money\": {\n 42\n              \"amount\": \"10.00\",\n 43\n              \"currency_code\": \"CAD\"\n 44\n            }\n 45\n          },\n 46\n          \"total_discount_set\": {\n 47\n            \"shop_money\": {\n 48\n              \"amount\": \"0.00\",\n 49\n              \"currency_code\": \"CAD\"\n 50\n            },\n 51\n            \"presentment_money\": {\n 52\n              \"amount\": \"0.00\",\n 53\n              \"currency_code\": \"CAD\"\n 54\n            }\n 55\n          },\n 56\n          \"discount_allocations\": [],\n 57\n          \"duties\": [],\n 58\n          \"admin_graphql_api_id\": \"gid://shopify/LineItem/12450204712982\",\n 59\n          \"tax_lines\": [],\n 60\n          \"origin_location\": {\n 61\n            \"id\": 2851029516310,\n 62\n            \"country_code\": \"US\",\n 63\n            \"province_code\": \"CT\",\n 64\n            \"name\": \"tkelleher-usa-store\",\n 65\n            \"address1\": \"12 Runway Road\",\n 66\n            \"address2\": \"\",\n 67\n            \"city\": \"East Hartford\",\n 68\n            \"zip\": \"06118\"\n 69\n          },\n 70\n          \"destination_location\": {\n 71\n            \"id\": 3332899569686,\n 72\n            \"country_code\": \"CA\",\n 73\n            \"province_code\": \"ON\",\n 74\n            \"name\": \"Tyler Kelleher\",\n 75\n            \"address1\": \"12 York Street\",\n 76\n            \"address2\": \"\",\n 77\n            \"city\": \"Toronto\",\n 78\n            \"zip\": \"M5J 0A9\"\n 79\n          }\n 80\n        }\n 81\n      ],\n 82\n      \"tracking_number\": null,\n 83\n      \"tracking_numbers\": [],\n 84\n      \"tracking_url\": null,\n 85\n      \"tracking_urls\": [],\n 86\n      \"receipt\": {},\n 87\n      \"name\": \"#6540.1\",\n 88\n      \"admin_graphql_api_id\": \"gid://shopify/Fulfillment/3849425780758\"\n 89\n    }\n 90 }\n After a fulfillment service cancels a fulfillment, the fulfillment order card in the Shopify admin notifies the merchant that the fulfillment request has been cancelled:\n Step 7 (Optional): Close a fulfillment order\n In some cases, a fulfillment service might realize that it can\u2019t fulfill the requested items only after it\u2019s already accepted a fulfillment order request.\n The fulfillment service can use the REST Admin API's POST fulfillment_orders/close endpoint or the GraphQL Admin API's fulfillmentOrderClose mutation to close the fulfillment order and indicate to the merchant that they won't be fulfilling the order.\n Closing a fulfillment results in a fulfillment order where the status is incomplete and the request status is closed.\n Note\n If a merchant makes a new fulfillment request on an order that had a fulfillment order marked as incomplete, then the original incomplete fulfillment order will have a closed status and a new fulfillment order will be created.\n Close a fulfillment order\n Endpoint\n REST\n GraphQL\n 1 POST https://{shop}.myshopify.com/admin/api/{api_version}/fulfillment_orders/{fulfillment_order_id}/close.json\n Request\n REST\n GraphQL\n 1 {\n 2\n    \"id\": \"5859255779350\",\n 3\n    \"message\": \"Apologies, but it appears we are out of stock.\"\n 4 }\n JSON response\n REST\n GraphQL\n 1 {\n 2\n    \"fulfillment_order\": {\n 3\n      \"id\": 5859255779350,\n 4\n      \"shop_id\": 20978040854,\n 5\n      \"order_id\": 4782479474710,\n 6\n      \"assigned_location_id\": 67794436118,\n 7\n      \"request_status\": \"closed\",\n 8\n      \"status\": \"incomplete\",\n 9\n      \"supported_actions\": [\n 10\n        \"request_fulfillment\",\n 11\n        \"create_fulfillment\",\n 12\n        \"hold\"\n 13\n      ],\n 14\n      \"destination\": {\n 15\n        \"id\": 5479359709206,\n 16\n        \"address1\": \"12 York Street\",\n 17\n        \"address2\": \"\",\n 18\n        \"city\": \"Toronto\",\n 19\n        \"company\": \"\",\n 20\n        \"country\": \"Canada\",\n 21\n        \"email\": \"\",\n 22\n        \"first_name\": \"Tyler\",\n 23\n        \"last_name\": \"Kelleher\",\n 24\n        \"phone\": null,\n 25\n        \"province\": \"Ontario\",\n 26\n        \"zip\": \"M5J 0A9\"\n 27\n      },\n 28\n      \"line_items\": [\n 29\n        {\n 30\n          \"id\": 12675378151446,\n 31\n          \"shop_id\": 20978040854,\n 32\n          \"fulfillment_order_id\": 5859255779350,\n 33\n          \"quantity\": 1,\n 34\n          \"line_item_id\": 12450204712982,\n 35\n          \"inventory_item_id\": 32884276494358,\n 36\n          \"fulfillable_quantity\": 1,\n 37\n          \"variant_id\": 31360689504278\n 38\n        }\n 39\n      ],\n 40\n      \"fulfill_at\": \"2022-09-02T10:00:00-04:00\",\n 41\n      \"fulfill_by\": null,\n 42\n      \"international_duties\": null,\n 43\n      \"fulfillment_holds\": [],\n 44\n      \"delivery_method\": null,\n 45\n      \"assigned_location\": {\n 46\n        \"address1\": null,\n 47\n        \"address2\": null,\n 48\n        \"city\": null,\n 49\n        \"country_code\": \"CA\",\n 50\n        \"location_id\": 67794436118,\n 51\n        \"name\": \"test-created-via-api-2\",\n 52\n        \"phone\": null,\n 53\n        \"province\": null,\n 54\n        \"zip\": null\n 55\n      },\n 56\n      \"merchant_requests\": [\n 57\n        {\n 58\n          \"message\": \"\",\n 59\n          \"request_options\": {\n 60\n            \"notify_customer\": false\n 61\n          },\n 62\n          \"sent_at\": \"2022-10-12T16:27:07-04:00\",\n 63\n          \"kind\": \"fulfillment_request\"\n 64\n        },\n 65\n        {\n 66\n          \"message\": \"\",\n 67\n          \"request_options\": {},\n 68\n          \"sent_at\": \"2022-10-12T16:28:47-04:00\",\n 69\n          \"kind\": \"cancellation_request\"\n 70\n        }\n 71\n      ]\n 72\n    }\n 73 }\n Step 8 (Optional): Enable tracking support\n Your app can optionally act on Shopify requests for tracking numbers by exposing a /fetch_tracking_numbers endpoint that's prefixed with the callback_url that you set in step 2.\n If tracking_support is set to true, then once each hour, Shopify makes a request to the /fetch_tracking_numbers endpoint to determine if there are any completed fulfillments awaiting tracking numbers from the remote fulfillment service.\n Example request\n The following example shows how Shopify retrieves a list of tracking numbers for the specified fulfillment names. The request includes the following parameters:\n order_names: The fulfillment names that Shopify requires tracking numbers for. Example: order_names: #1001.1.\n shop: The shop's URL.\n timestamp: The Unix timestamp from when the inventory request was made.\n Shopify retrieves a list of tracking numbers for the specified fulfillment names\n GET <callback_url>/fetch_tracking_numbers\n 1 http://myapp.com/fetch_tracking_numbers.json?order_names[]=#1001.1&order_names[]=#1002.1&order_names[]=#1003.2&shop=testshop.myshopify.com&timestamp=1669900140\n JSON response\n 1 {\n 2\n    \"tracking_numbers\": {\n 3\n      \"#1001.1\": \"qwerty\",\n 4\n      \"#1002.1\": \"asdfg\",\n 5\n      \"#1003.2\": \"zxcvb\"\n 6\n    },\n 7\n    \"message\": \"Successfully received the tracking numbers\",\n 8\n    \"success\": true\n 9 }\n Step 9 (Optional): Share inventory levels with Shopify\n Your app can optionally act on Shopify requests for inventory levels by exposing a /fetch_stock endpoint that's prefixed with the callback_url that you set in step 2.\n If fulfillment_service.inventory_management is set to true, then Shopify makes a request to the /fetch_stock endpoint for the inventory of an individual SKU when the product is set up initially, when its SKU is changed in the Shopify admin, or when its inventory management is set to use the fulfillment service. Please note that SKU strings are case-sensitive at Shopify, and the SKUs returned from the /fetch_stock endpoint will be matched to the Shopify product SKUs respecting the case.\n A request for all inventory data happens once every hour to keep Shopify up to date with the remote fulfillment service.\n Example requests\n The following example shows how Shopify retrieves inventory levels for a particular SKU. The request includes the following parameters:\n location_id: The ID of the fulfillment service location.\n max_retries: The maximum number of times Shopify will send the request for inventory levels.\n shop: The shop's URL.\n sku: The SKU for the product variant you need stock levels for.\n timestamp: The Unix timestamp from when the inventory request was made.\n Shopify retrieves inventory levels for a particular SKU\n GET <callback_url>/fetch_stock\n 1 https://myapp.com/fetch_stock.json?location_id=123&sku=SKU1&shop=testshop.myshopify.com&max_retries=3&timestamp=1532548742\n JSON response\n 1 {\n 2\n    \"SKU1\": 1000\n 3 }\n The following example shows how Shopify retrieves inventory levels for all SKUs:\n Shopify retrieves inventory levels for all SKUs\n GET <callback_url>/fetch_stock\n 1 https://myapp.com/fetch_stock.json?location_id=123&shop=testshop.myshopify.com&max_retries=3&timestamp=1532548742\n JSON response\n 1 {\n 2\n    \"SKU1\": 1000,\n 3\n    \"SKU2\": 500\n 4 }\n Webhooks\n In API version 2023-01 and higher, your app can subscribe to webhooks for event notifications related to fulfillment orders.",
                    "filename": "docs/apps/fulfillment/fulfillment-service-apps/manage-fulfillments/content.txt",
                    "start_index": 32241,
                    "end_index": 43083,
                    "start_line": 1361,
                    "end_line": 1783,
                    "max_line": 1805,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Billing cycles\n Orders\n Fulfillments\n Migrate to the Subscriptions API\n Deferred purchase options\n Build a user interface\n Build a customer-facing portal\n Markets\n B2B\n Channels\n Distribution\n Billing\n App Store\n Manage orders for prepaid subscriptions\n When an order is created by Shopify, and delivery anchors exist, the order contains delayed fulfillment orders for prepaid items. This guide describes how to keep your orders and subscription contracts in sync, and covers some common order management scenarios that relate to fulfillment orders and subscription contracts.\n Caution\n Order editing in the Shopify admin isn't supported for orders with prepaid subscriptions.\n Keeping orders and subscription contracts in sync\n Changes to prepaid subscription contracts aren't automatically reflected on the associated orders. For example, when a customer updates their address for a prepaid subscription in an app, their address isn't automatically updated in the order.\n The following diagram shows the required actions that your app must take to sync updates for prepaid subscription contracts:\n If the item hasn't been billed for, then update the information on the subscription contract using the subscriptionContract and subscriptionDraft objects.\n If the item has been billed for, then update the information on the order using the Order and FulfillmentOrder objects.\n Tip\n Learn how to interact with the SubscriptionDraft object by completing the Update a subscription contract tutorial.\n Managing cancellations\n The cancellation of orders doesn't automatically cancel related subscription contracts. It's recommended that apps subscribe to the orders/cancel webhook and communicate with merchants when subscription contract orders are cancelled, so that merchants know that the subscription contract hasn't also been cancelled.\n Subscription cancellation through a customer portal\n When a customer cancels a subscription order through the customer portal, apps need to notify the merchant of this cancellation. If the cancellation is initiated through the app, then the app needs to handle the associated refunds. This applies to both prepaid and subscribe-and-save subscriptions.\n Order tagging\n Merchants often identify and filter subscription orders in the Shopify admin. To tag orders for subscriptions from your app, you can call the tagsAdd mutation. The following example adds tags to a specified order using the order ID:\n POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json\n GraphQL mutation\n 1 mutation tagsAdd($id: ID!, $tags: [String!]!) {\n 2\n    tagsAdd(id: $id, tags: $tags) {\n 3\n      node {\n 4\n        id\n 5\n      }\n 6\n      userErrors {\n 7\n        field\n 8\n        message\n 9\n      }\n 10\n    }\n 11 }\n Variables\n 1 {\n 2\n    \"id\": \"gid://shopify/Order/2067697074232\",\n 3\n    \"tags\": [\n 4\n      \"subscription\",\n 5\n      \"prepaid\"\n 6\n    ]\n 7 }\n      \"orderUpdate\": {\n 4\n        \"order\": {\n 5\n          \"id\": \"gid://shopify/Order/2067697074232\"\n 6\n        },\n 7\n        \"userErrors\": []\n 8\n      }\n 9\n    }\n 10 }\n Automatic fulfillment\n Scheduled fulfillment orders aren't eligible for automatic fulfillment. However, if a prepaid subscription order is created with its first fulfillment order set to the OPEN state, then the fulfillment order is automatically fulfilled.\n Order CSV export\n Apps that use CSV exports to manage fulfillments can rely on the value of lineItem.fulfillableQuantity to determine which orders are ready to fulfill. This is because SCHEDULED fulfillment orders aren't included in the calculation of the order lineItem.fulfillableQuantity.\n For example, consider a fulfillment order scheduled to ship on January 15. Before January 15, lineItem.fulfillableQuantity is set to 0. After January 15, lineItem.fulfillableQuantity is set to 1. Then, after the item is fulfilled, lineItem.fulfillableQuantity is set back to 0.\n Order webhooks\n Your app can subscribe to order webhooks that are useful for apps that manage fulfillment orders for merchants. The following examples show the JSON responses from each of the available webhooks.\n To learn how to set up and consume webhooks, refer to Webhooks configuration.\n Example webhook responses\n orders/create\n orders/updated\n orders/cancelled\n refunds/create\n 1 // Occurs when an order is created. Subscription apps need to query the order's line items for their selling plan to determine whether this is a subscription order that they own.\n 2 {\n 3\n    \"id\": 820982911946154508,\n 4\n    \"email\": \"jon@doe.ca\",\n 5\n    \"closed_at\": null,\n 6\n    \"created_at\": \"2022-10-03T12:55:00-04:00\",\n 7\n    \"updated_at\": \"2022-10-03T12:55:00-04:00\",\n 8\n    \"number\": 234,\n 9\n    \"note\": null,\n 10\n    \"token\": \"123456abcd\",\n 11\n    \"gateway\": null,\n 12\n    \"test\": true,\n 13\n    \"total_price\": \"403.00\",\n 14\n    \"subtotal_price\": \"393.00\",\n 15\n    \"total_weight\": 0,\n 16\n    \"total_tax\": \"0.00\",\n 17\n    \"taxes_included\": false,\n 18\n    \"currency\": \"USD\",\n 19\n    \"financial_status\": \"voided\",\n 20\n    \"confirmed\": false,\n 21\n    \"total_discounts\": \"5.00\",\n 22\n    \"total_line_items_price\": \"398.00\",\n 23\n    \"cart_token\": null,\n 24\n    \"buyer_accepts_marketing\": true,\n 25\n    \"name\": \"#9999\",\n 26\n    \"referring_site\": null,\n 27\n    \"landing_site\": null,\n 28\n    \"cancelled_at\": \"2022-10-03T12:55:00-04:00\",\n 29\n    \"cancel_reason\": \"customer\",\n 30\n    \"total_price_usd\": null,\n 31\n    \"checkout_token\": null,\n 32\n    \"reference\": null,\n 33\n    \"user_id\": null,\n 34\n    \"location_id\": null,\n 35\n    \"source_identifier\": null,\n 36\n    \"source_url\": null,\n 37\n    \"processed_at\": null,\n 38\n    \"device_id\": null,\n 39\n    \"phone\": null,\n 40\n    \"customer_locale\": \"en\",\n 41\n    \"app_id\": null,\n 42\n    \"browser_ip\": null,\n 43\n    \"landing_site_ref\": null,\n 44\n    \"order_number\": 1234,\n 45\n    \"discount_applications\": [\n 46\n      {\n 47\n        \"type\": \"manual\",\n 48\n        \"value\": \"5.0\",\n 49\n        \"value_type\": \"fixed_amount\",\n 50\n        \"allocation_method\": \"each\",\n 51\n        \"target_selection\": \"explicit\",\n 52\n        \"target_type\": \"line_item\",\n 53\n        \"description\": \"Discount\",\n 54\n        \"title\": \"Discount\"\n 55\n      }\n 56\n    ],\n 57\n    \"discount_codes\": [\n 58\n 59\n    ],\n 60\n    \"note_attributes\": [\n 61\n 62\n    ],\n 63\n    \"payment_gateway_names\": [\n 64\n      \"visa\",\n 65\n      \"bogus\"\n 66\n    ],\n 67\n    \"processing_method\": \"\",\n 68\n    \"checkout_id\": null,\n 69\n    \"source_name\": \"web\",\n 70\n    \"fulfillment_status\": \"pending\",\n 71\n    \"tax_lines\": [\n 72\n 73\n    ],\n 74\n    \"tags\": \"\",\n 75\n    \"contact_email\": \"jon@doe.ca\",\n 76\n    \"order_status_url\": \"https:\\/\\/jsmith.myshopify.com\\/548380009\\/orders\\/123456abcd\\/authenticate?key=abcdefg\",\n 77\n    \"presentment_currency\": \"USD\",\n 78\n    \"total_line_items_price_set\": {\n 79\n      \"shop_money\": {\n 80\n        \"amount\": \"398.00\",\n 81\n        \"currency_code\": \"USD\"\n 82\n      },\n 83\n      \"presentment_money\": {\n 84\n        \"amount\": \"398.00\",\n 85\n        \"currency_code\": \"USD\"\n 86\n      }\n 87\n    },\n 88\n    \"total_discounts_set\": {\n 89\n      \"shop_money\": {\n 90\n        \"amount\": \"5.00\",\n 91\n        \"currency_code\": \"USD\"\n 92\n      },\n 93\n      \"presentment_money\": {\n 94\n        \"amount\": \"5.00\",\n 95\n        \"currency_code\": \"USD\"\n 96\n      }\n 97\n    },\n 98\n    \"total_shipping_price_set\": {\n 99\n      \"shop_money\": {\n 100\n        \"amount\": \"10.00\",\n 101\n        \"currency_code\": \"USD\"\n 102\n      },\n 103\n      \"presentment_money\": {\n 104\n        \"amount\": \"10.00\",\n 105\n        \"currency_code\": \"USD\"\n 106\n      }\n 107\n    },\n 108\n    \"subtotal_price_set\": {\n 109\n      \"shop_money\": {\n 110\n        \"amount\": \"393.00\",\n 111\n        \"currency_code\": \"USD\"\n 112\n      },\n 113\n      \"presentment_money\": {\n 114\n        \"amount\": \"393.00\",\n 115\n        \"currency_code\": \"USD\"\n 116\n      }\n 117\n    },\n 118\n    \"total_price_set\": {\n 119\n      \"shop_money\": {\n 120\n        \"amount\": \"403.00\",\n 121\n        \"currency_code\": \"USD\"\n 122\n      },\n 123\n      \"presentment_money\": {\n 124\n        \"amount\": \"403.00\",\n 125\n        \"currency_code\": \"USD\"\n 126\n      }\n 127\n    },\n 128\n    \"total_tax_set\": {\n 129\n      \"shop_money\": {\n 130\n        \"amount\": \"0.00\",\n 131\n        \"currency_code\": \"USD\"\n 132\n      },\n 133\n      \"presentment_money\": {\n 134\n        \"amount\": \"0.00\",\n 135\n        \"currency_code\": \"USD\"\n 136\n      }\n 137\n    },\n 138\n    \"line_items\": [\n 139\n      {\n 140\n        \"id\": 866550311766439020,\n 141\n        \"variant_id\": 808950810,\n 142\n        \"title\": \"IPod Nano - 8GB\",\n 143\n        \"quantity\": 1,\n 144\n        \"sku\": \"IPOD2008PINK\",\n 145\n        \"variant_title\": null,\n 146\n        \"vendor\": null,\n 147\n        \"fulfillment_service\": \"manual\",\n 148\n        \"product_id\": 632910392,\n 149\n        \"requires_shipping\": true,\n 150\n        \"taxable\": true,\n 151\n        \"gift_card\": false,\n 152\n        \"name\": \"IPod Nano - 8GB\",\n 153\n        \"variant_inventory_management\": \"shopify\",\n 154\n        \"properties\": [\n 155\n 156\n        ],\n 157\n        \"product_exists\": true,\n 158\n        \"fulfillable_quantity\": 1,\n 159\n        \"grams\": 567,\n 160\n        \"price\": \"199.00\",\n 161\n        \"total_discount\": \"0.00\",\n 162\n        \"fulfillment_status\": null,\n 163\n        \"price_set\": {\n 164\n          \"shop_money\": {\n 165\n            \"amount\": \"199.00\",\n 166\n            \"currency_code\": \"USD\"\n 167\n          },\n 168\n          \"presentment_money\": {\n 169\n            \"amount\": \"199.00\",\n 170\n            \"currency_code\": \"USD\"\n 171\n          }\n 172\n        },\n 173\n        \"total_discount_set\": {\n 174\n          \"shop_money\": {\n 175\n            \"amount\": \"0.00\",\n 176\n            \"currency_code\": \"USD\"\n 177\n          },\n 178\n          \"presentment_money\": {\n 179\n            \"amount\": \"0.00\",\n 180\n            \"currency_code\": \"USD\"\n 181\n          }\n 182\n        },\n 183\n        \"discount_allocations\": [\n 184\n 185\n        ],\n 186\n        \"duties\": [\n 187\n 188\n        ],\n 189\n        \"admin_graphql_api_id\": \"gid:\\/\\/shopify\\/LineItem\\/866550311766439020\",\n 190\n        \"tax_lines\": [\n 191\n 192\n        ]\n 193\n      },",
                    "filename": "docs/apps/selling-strategies/subscriptions/orders/content.txt",
                    "start_index": 0,
                    "end_index": 10001,
                    "start_line": 1,
                    "end_line": 688,
                    "max_line": 875,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Inventory management apps\n Order management apps\n Order routing apps\n Fulfillment service apps\n Overview\n Manage fulfillments\n Returns apps\n Migrate to fulfillment orders\n Point of Sale\n Marketing\n Deployment\n Distribution\n Billing\n App Store\n Manage fulfillments as a fulfillment service app\n Fulfillment service apps can provide third-party warehousing, print on demand, or fulfillment services that prepare and ship orders on behalf of merchants.\n This guide describes how to use the REST and GraphQL Admin APIs to manage fulfillments in the following ways:\n Receive fulfillment requests and cancellations\n Accept and reject fulfillment requests and cancellations\n Exchange fulfillment requests notes with merchants\n Create and perform fulfillments for assigned work\n Optionally close fulfillment orders\n Requirements\n Your app can make authenticated requests to the REST Admin API or GraphQL Admin API.\n Your app has the write_fulfillments, read_assigned_fulfillment_orders and write_assigned_fulfillment_orders access scopes. Learn how to configure your access scopes using Shopify CLI..\n Your store has existing orders that are unfulfilled.\n If you want to create test orders, then refer to Manage test orders.\n If you need to make changes to an unfulfilled item, then you can edit an order.\n You've met Shopify's protected customer data requirements.\n Step 1: Create a fulfillment service\n To begin managing fulfillments as a fulfillment service app, you need to create a fulfillment service in Shopify with a callback URL that will listen for fulfillment requests. A fulfillment service needs to opt in to fulfillment orders by letting Shopify know that they\u2019re ready to perform fulfillment order-based fulfillment rather than order-based fulfillment.\n You can use the REST Admin API's POST fulfillment_services endpoint or the GraphQL Admin API's fulfillmentServiceCreate mutation to register a callback URL and opt in a fulfillment service to use fulfillment orders.\n To register a fulfillment service, your app requires the write_fulfillments access scope.\n Create a fulfillment service\n Endpoint\n REST\n GraphQL\n 1 POST https://{shop}.myshopify.com/admin/api/{api_version}/fulfillment_services.json\n Request\n REST\n GraphQL\n 1 {\n 2\n    \"fulfillment_service\": {\n 3\n      \"name\": \"My fulfillment service\",\n 4\n      \"callback_url\": \"https://www.myapp.com/callback_url\",\n 5\n      \"inventory_management\": true,\n 6\n      \"permits_sku_sharing\": true,\n 7\n      \"fulfillment_orders_opt_in\": true,\n 8\n      \"tracking_support\": true,\n 9\n      \"requires_shipping_method\": true,\n 10\n      \"format\": \"json\"\n 11\n    }\n 12 }\n JSON response\n REST\n GraphQL\n 1 {\n 2\n    \"fulfillment_service\": {\n 3\n      \"id\": 10,\n 4\n      \"name\": \"My fulfillment service\",\n 5\n      \"email\": null,\n 6\n      \"service_name\": \"My fulfillment service\",\n 7\n      \"handle\": \"my-fulfillment-service\",\n 8\n      \"fulfillment_orders_opt_in\": true,\n 9\n      \"include_pending_stock\": false,\n 10\n      \"provider_id\": null,\n 11\n      \"location_id\": 20,\n 12\n      \"callback_url\": \"https://www.myapp.com/callback_url\",\n 13\n      \"tracking_support\": true,\n 14\n      \"inventory_management\": true,\n 15\n      \"admin_graphql_api_id\": \"gid://shopify/ApiFulfillmentService/10\"\n 16\n    }\n 17 }\n Step 2: Receive fulfillment requests and cancellations\n Apps must configure an endpoint on a callback URL where Shopify will send the notifications for fulfillment requests. This is a requirement to receive requests from Shopify. The endpoint should be structured in the following format: <callback_url>/fulfillment_order_notification.\n The payloads that the endpoint receives include the kind property or field, which can have one of the following values:\n REST Admin API value GraphQL Admin API value Description\n fulfillment_request FULFILLMENT_REQUEST When a merchant requests a fulfillment in their Shopify admin\n cancellation_request CANCELLATION_REQUEST When a merchant submits a cancellation request in their Shopify admin\n The follow examples show payloads for each type of request:\n Payloads\n Fulfillment request payload\n REST\n GraphQL\n 1 {\n 2\n    \"kind\": \"fulfillment_request\"\n 3 }\n Cancellation request payload\n REST\n GraphQL\n 1 {\n 2\n    \"kind\": \"cancellation_request\"\n 3 }\n Step 3: Act on fulfillment requests\n Each fulfillment order has a status and a request status, both of which indicate the state of the fulfillment order.\n A fulfillment order notification of FULFILLMENT_REQUEST indicates that there\u2019s a new fulfillment order assigned to the service, and it\u2019s ready to be acted on because the merchant has requested a fulfillment.\n Fulfillment services can retrieve assigned fulfillment order requests, and specify the fields that are required to determine whether it should accept or reject a fulfillment request. Requests can be validated with the same HMAC validation method that's used when Shopify sends webhooks to apps.\n Retrieve assigned fulfillment order requests\n The following examples show how to retrieve assigned fulfillment order requests:\n REST example: Shows how to use the GET assigned_fulfillment_orders endpoint to retrieve a list of all requested fulfillment orders on the shop that are assigned to the fulfillment service app.\n The assignment_status (set to fulfillment_requested) and location_ids parameters are included as part of the request URL.\n GraphQL example: Shows how to use the assignedFulfillmentOrders connection to request the first 10 assigned fulfillment orders with the FULFILLMENT_REQUESTED status:\n The fulfillment order destination, line items, and line item SKUs are included as part of the request.\n The query contains the merchantRequests field, which includes any notes that the merchant provided when they submitted the request.\n Retrieve assigned fulfillment order requests\n Endpoint\n REST\n GraphQL\n 1 GET https://{shop}.myshopify.com/admin/api/{api_version}/assigned_fulfillment_orders.json?assignment_status=fulfillment_requested&location_ids[]={assigned_location_id}\n Request\n REST\n GraphQL\n 1 // If you don't include the `assignment_status` parameter, then you receive all assigned fulfillment orders.\n 2\n 3 {empty request body}\n JSON response\n REST\n GraphQL\n 1 {\n 2\n    \"fulfillment_orders\": [\n 3\n      {\n 4\n        \"id\": 5862124781590,\n 5\n        \"shop_id\": 20978040854,\n 6\n        \"order_id\": 4807726071830,\n 7\n        \"assigned_location_id\": 67794436118,\n 8\n        \"request_status\": \"submitted\",\n 9\n        \"status\": \"open\",\n 10\n        \"supported_actions\": [\n 11\n          \"cancel_fulfillment_order\"\n 12\n        ],\n 13\n        \"destination\": {\n 14\n          \"id\": 5482076962838,\n 15\n          \"address1\": \"23 Hassall Street\",\n 16\n          \"address2\": \"\",\n 17\n          \"city\": \"Parramatta\",\n 18\n          \"company\": null,\n 19\n          \"country\": \"Australia\",\n 20\n          \"email\": \"\",\n 21\n          \"first_name\": \"Tyler\",\n 22\n          \"last_name\": \"Kelleher\",\n 23\n          \"phone\": null,\n 24\n          \"province\": \"New South Wales\",\n 25\n          \"zip\": \"2150\"\n 26\n        },\n 27\n        \"line_items\": [\n 28\n          {\n 29\n            \"id\": 12680829239318,\n 30\n            \"shop_id\": 20978040854,\n 31\n            \"fulfillment_order_id\": 5862124781590,\n 32\n            \"quantity\": 1,\n 33\n            \"line_item_id\": 12559131312150,\n 34\n            \"inventory_item_id\": 44276125368342,\n 35\n            \"fulfillable_quantity\": 1,\n 36\n            \"variant_id\": 42182036422678\n 37\n          }\n 38\n        ],\n 39\n        \"outgoing_requests\": [\n 40\n          {\n 41\n            \"message\": \"\",\n 42\n            \"request_options\": {\n 43\n              \"notify_customer\": false\n 44\n            },\n 45\n            \"sent_at\": \"2022-10-17T11:21:54-04:00\",\n 46\n            \"kind\": \"fulfillment_request\"\n 47\n          }\n 48\n        ],\n 49\n        \"fulfill_at\": \"2022-10-17T11:00:00-04:00\",\n 50\n        \"fulfill_by\": null,\n 51\n        \"international_duties\": {\n 52\n          \"incoterm\": \"DAP\"\n 53\n        },\n 54\n        \"fulfillment_holds\": [],\n 55\n        \"delivery_method\": {\n 56\n          \"id\": 143573385238,\n 57\n          \"method_type\": \"shipping\",\n 58\n          \"min_delivery_date_time\": null,\n 59\n          \"max_delivery_date_time\": null\n 60\n        },\n 61\n        \"assigned_location\": {\n 62\n          \"address1\": null,\n 63\n          \"address2\": null,\n 64\n          \"city\": null,\n 65\n          \"country_code\": \"CA\",\n 66\n          \"location_id\": 67794436118,\n 67\n          \"name\": \"test-created-via-api-2\",\n 68\n          \"phone\": null,\n 69\n          \"province\": null,\n 70\n          \"zip\": null\n 71\n        }\n 72\n      }\n 73\n    ]\n 74 }\n Accept a fulfillment request\n After retrieving the assigned fulfillment orders, the fulfillment service can review each fulfillment order, and determine whether it can be fulfilled.\n To accept a fulfillment order, the fulfillment service must send an accepted request using either the REST Admin API's POST fulfillment_request/accept endpoint or the GraphQL Admin API's fulfillmentOrderAcceptFulfillmentRequest mutation:\n Accept a fulfillment request\n Endpoint\n REST\n GraphQL\n 1 POST https://{shop}.myshopify.com/admin/api/{api_version}/fulfillment_orders/{fulfillment_order_id}/fulfillment_request/accept.json\n Request\n REST\n GraphQL\n 1 {\n 2\n    \"id\": \"5859254534166\",\n 3\n    \"message\": \"Reminder that tomorrow is a holiday. We won't be able to ship this until Monday.\"",
                    "filename": "docs/apps/fulfillment/fulfillment-service-apps/manage-fulfillments/content.txt",
                    "start_index": 0,
                    "end_index": 9321,
                    "start_line": 1,
                    "end_line": 307,
                    "max_line": 1805,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Requires the read_publications scope.\n CHECKOUTS_CREATE\n The webhook topic for checkouts/create events. Occurs whenever a checkout is created. Requires the read_orders scope.\n CHECKOUTS_DELETE\n The webhook topic for checkouts/delete events. Occurs whenever a checkout is deleted. Requires the read_orders scope.\n CHECKOUTS_UPDATE\n The webhook topic for checkouts/update events. Occurs whenever a checkout is updated. Requires the read_orders scope.\n COLLECTIONS_CREATE\n The webhook topic for collections/create events. Occurs whenever a collection is created. Requires the read_products scope.\n COLLECTIONS_DELETE\n The webhook topic for collections/delete events. Occurs whenever a collection is deleted. Requires the read_products scope.\n COLLECTIONS_UPDATE\n The webhook topic for collections/update events. Occurs whenever a collection is updated, including whenever products are added or removed from the collection. Occurs once if multiple products are added or removed from a collection at the same time. Requires the read_products scope.\n COLLECTION_LISTINGS_ADD\n The webhook topic for collection_listings/add events. Occurs whenever a collection listing is added. Requires the read_product_listings scope.\n COLLECTION_LISTINGS_REMOVE\n The webhook topic for collection_listings/remove events. Occurs whenever a collection listing is removed. Requires the read_product_listings scope.\n COLLECTION_LISTINGS_UPDATE\n The webhook topic for collection_listings/update events. Occurs whenever a collection listing is updated. Requires the read_product_listings scope.\n COLLECTION_PUBLICATIONS_CREATE\n The webhook topic for collection_publications/create events. Occurs whenever a collection publication listing is created. Requires the read_publications scope.\n COLLECTION_PUBLICATIONS_DELETE\n The webhook topic for collection_publications/delete events. Occurs whenever a collection publication listing is deleted. Requires the read_publications scope.\n COLLECTION_PUBLICATIONS_UPDATE\n The webhook topic for collection_publications/update events. Occurs whenever a collection publication listing is updated. Requires the read_publications scope.\n COMPANIES_CREATE\n The webhook topic for companies/create events. Occurs whenever a company is created. Requires the read_customers scope.\n COMPANIES_DELETE\n The webhook topic for companies/delete events. Occurs whenever a company is deleted. Requires the read_customers scope.\n COMPANIES_UPDATE\n The webhook topic for companies/update events. Occurs whenever a company is updated. Requires the read_customers scope.\n COMPANY_CONTACTS_CREATE\n The webhook topic for company_contacts/create events. Occurs whenever a company contact is created. Requires the read_customers scope.\n COMPANY_CONTACTS_DELETE\n The webhook topic for company_contacts/delete events. Occurs whenever a company contact is deleted. Requires the read_customers scope.\n COMPANY_CONTACTS_UPDATE\n The webhook topic for company_contacts/update events. Occurs whenever a company contact is updated. Requires the read_customers scope.\n COMPANY_CONTACT_ROLES_ASSIGN\n The webhook topic for company_contact_roles/assign events. Occurs whenever a role is assigned to a contact at a location. Requires the read_customers scope.\n COMPANY_CONTACT_ROLES_REVOKE\n The webhook topic for company_contact_roles/revoke events. Occurs whenever a role is revoked from a contact at a location. Requires the read_customers scope.\n COMPANY_LOCATIONS_CREATE\n The webhook topic for company_locations/create events. Occurs whenever a company location is created. Requires the read_customers scope.\n COMPANY_LOCATIONS_DELETE\n The webhook topic for company_locations/delete events. Occurs whenever a company location is deleted. Requires the read_customers scope.\n COMPANY_LOCATIONS_UPDATE\n The webhook topic for company_locations/update events. Occurs whenever a company location is updated. Requires the read_customers scope.\n CUSTOMERS_CREATE\n The webhook topic for customers/create events. Occurs whenever a customer is created. Requires the read_customers scope.\n CUSTOMERS_DELETE\n The webhook topic for customers/delete events. Occurs whenever a customer is deleted. Requires the read_customers scope.\n CUSTOMERS_DISABLE\n The webhook topic for customers/disable events. Occurs whenever a customer account is disabled. Requires the read_customers scope.\n CUSTOMERS_EMAIL_MARKETING_CONSENT_UPDATE\n The webhook topic for customers_email_marketing_consent/update events. Occurs whenever a customer's email marketing consent is updated. Requires the read_customers scope.\n CUSTOMERS_ENABLE\n The webhook topic for customers/enable events. Occurs whenever a customer account is enabled. Requires the read_customers scope.\n CUSTOMERS_MARKETING_CONSENT_UPDATE\n The webhook topic for customers_marketing_consent/update events. Occurs whenever a customer's SMS marketing consent is updated. Requires the read_customers scope.\n CUSTOMERS_MERGE\n The webhook topic for customers/merge events. Triggers when two customers are merged Requires the read_customer_merge scope.\n CUSTOMERS_UPDATE\n The webhook topic for customers/update events. Occurs whenever a customer is updated. Requires the read_customers scope.\n CUSTOMER_GROUPS_CREATE\n The webhook topic for customer_groups/create events. Occurs whenever a customer saved search is created. Requires the read_customers scope.\n CUSTOMER_GROUPS_DELETE\n The webhook topic for customer_groups/delete events. Occurs whenever a customer saved search is deleted. Requires the read_customers scope.\n CUSTOMER_GROUPS_UPDATE\n The webhook topic for customer_groups/update events. Occurs whenever a customer saved search is updated. Requires the read_customers scope.\n CUSTOMER_PAYMENT_METHODS_CREATE\n The webhook topic for customer_payment_methods/create events. Occurs whenever a customer payment method is created. Requires the read_customer_payment_methods scope.\n CUSTOMER_PAYMENT_METHODS_REVOKE\n The webhook topic for customer_payment_methods/revoke events. Occurs whenever a customer payment method is revoked. Requires the read_customer_payment_methods scope.\n CUSTOMER_PAYMENT_METHODS_UPDATE\n The webhook topic for customer_payment_methods/update events. Occurs whenever a customer payment method is updated. Requires the read_customer_payment_methods scope.\n CUSTOMER_TAGS_ADDED\n The webhook topic for customer.tags_added events. Triggers when tags are added to a customer. Requires the read_customers scope.\n CUSTOMER_TAGS_REMOVED\n The webhook topic for customer.tags_removed events. Triggers when tags are removed from a customer. Requires the read_customers scope.\n DISCOUNTS_CREATE\n The webhook topic for discounts/create events. Occurs whenever a discount is created. Requires the read_discounts scope.\n DISCOUNTS_DELETE\n The webhook topic for discounts/delete events. Occurs whenever a discount is deleted. Requires the read_discounts scope.\n DISCOUNTS_REDEEMCODE_ADDED\n The webhook topic for discounts/redeemcode_added events. Occurs whenever a redeem code is added to a code discount. Requires the read_discounts scope.\n DISCOUNTS_REDEEMCODE_REMOVED\n The webhook topic for discounts/redeemcode_removed events. Occurs whenever a redeem code on a code discount is deleted. Requires the read_discounts scope.\n DISCOUNTS_UPDATE\n The webhook topic for discounts/update events. Occurs whenever a discount is updated. Requires the read_discounts scope.\n DISPUTES_CREATE\n The webhook topic for disputes/create events. Occurs whenever a dispute is created. Requires the read_shopify_payments_disputes scope.\n DISPUTES_UPDATE\n The webhook topic for disputes/update events. Occurs whenever a dispute is updated. Requires the read_shopify_payments_disputes scope.\n DOMAINS_CREATE\n The webhook topic for domains/create events. Occurs whenever a domain is created.\n DOMAINS_DESTROY\n The webhook topic for domains/destroy events. Occurs whenever a domain is destroyed.\n DOMAINS_UPDATE\n The webhook topic for domains/update events. Occurs whenever a domain is updated.\n DRAFT_ORDERS_CREATE\n The webhook topic for draft_orders/create events. Occurs whenever a draft order is created. Requires the read_draft_orders scope.\n DRAFT_ORDERS_DELETE\n The webhook topic for draft_orders/delete events. Occurs whenever a draft order is deleted. Requires the read_draft_orders scope.\n DRAFT_ORDERS_UPDATE\n The webhook topic for draft_orders/update events. Occurs whenever a draft order is updated. Requires the read_draft_orders scope.\n FULFILLMENTS_CREATE\n The webhook topic for fulfillments/create events. Occurs whenever a fulfillment is created. Requires at least one of the following scopes: read_fulfillments, read_marketplace_orders.\n FULFILLMENTS_UPDATE\n The webhook topic for fulfillments/update events. Occurs whenever a fulfillment is updated. Requires at least one of the following scopes: read_fulfillments, read_marketplace_orders.\n FULFILLMENT_EVENTS_CREATE\n The webhook topic for fulfillment_events/create events. Occurs whenever a fulfillment event is created. Requires the read_fulfillments scope.\n FULFILLMENT_EVENTS_DELETE\n The webhook topic for fulfillment_events/delete events. Occurs whenever a fulfillment event is deleted. Requires the read_fulfillments scope.\n FULFILLMENT_ORDERS_CANCELLATION_REQUEST_ACCEPTED\n The webhook topic for fulfillment_orders/cancellation_request_accepted events. Occurs when a 3PL accepts a fulfillment cancellation request, received from a merchant. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.\n FULFILLMENT_ORDERS_CANCELLATION_REQUEST_REJECTED\n The webhook topic for fulfillment_orders/cancellation_request_rejected events. Occurs when a 3PL rejects a fulfillment cancellation request, received from a merchant. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.\n FULFILLMENT_ORDERS_CANCELLATION_REQUEST_SUBMITTED\n The webhook topic for fulfillment_orders/cancellation_request_submitted events. Occurs when a merchant requests a fulfillment request to be cancelled after that request was approved by a 3PL. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.\n FULFILLMENT_ORDERS_CANCELLED\n The webhook topic for fulfillment_orders/cancelled events. Occurs when a fulfillment order is cancelled. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.\n FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_ACCEPTED\n The webhook topic for fulfillment_orders/fulfillment_request_accepted events. Occurs when a fulfillment service accepts a request to fulfill a fulfillment order. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.\n FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_REJECTED\n The webhook topic for fulfillment_orders/fulfillment_request_rejected events. Occurs when a 3PL rejects a fulfillment request that was sent by a merchant. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.\n FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_SUBMITTED\n The webhook topic for fulfillment_orders/fulfillment_request_submitted events. Occurs when a merchant submits a fulfillment request to a 3PL. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_buyer_membership_orders, read_marketplace_fulfillment_orders.\n FULFILLMENT_ORDERS_FULFILLMENT_SERVICE_FAILED_TO_COMPLETE\n The webhook topic for fulfillment_orders/fulfillment_service_failed_to_complete events. Occurs when a fulfillment service intends to close an in_progress fulfillment order. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.\n FULFILLMENT_ORDERS_HOLD_RELEASED\n The webhook topic for fulfillment_orders/hold_released events. Occurs whenever a fulfillment order hold is released. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.\n FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_LOCAL_DELIVERY\n The webhook topic for fulfillment_orders/line_items_prepared_for_local_delivery events. Occurs whenever a fulfillment order's line items are prepared for local delivery. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.\n FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_PICKUP\n The webhook topic for fulfillment_orders/line_items_prepared_for_pickup events. Triggers when one or more of the line items for a fulfillment order are prepared for pickup Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.\n FULFILLMENT_ORDERS_MERGED\n The webhook topic for fulfillment_orders/merged events. Occurs when multiple fulfillment orders are merged into a single fulfillment order. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.\n FULFILLMENT_ORDERS_MOVED\n The webhook topic for fulfillment_orders/moved events. Occurs whenever the location which is assigned to fulfill one or more fulfillment order line items is changed.\n original_fulfillment_order - The final state of the original fulfillment order.",
                    "filename": "docs/api/admin-graphql/latest/enums/webhooksubscriptiontopic/content.txt",
                    "start_index": 14678,
                    "end_index": 28936,
                    "start_line": 471,
                    "end_line": 610,
                    "max_line": 875,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Billing\n App Store\n Order management apps\n Order management apps fulfill orders on behalf of merchants. Apps can automate the fulfillment workflow, or merchants can directly fulfill orders through an app.\n This guide describes what fulfillment orders are, the lifecycle of a fulfillment order, use cases for order management apps, and some considerations before you get started.\n Tip\n If your app uses its own location, such as a third-party warehouse that prepares and ships orders on behalf of the store owner, then refer to Fulfillment service apps.\n How it works\n After a customer places an order, a merchant or third-party fulfillment service needs to prepare the items to be delivered to the customer.\n A fulfillment order represents the strategy for how an order will be fulfilled. Fulfillment orders are represented in the REST Admin API by the FulfillmentOrder resource and in the GraphQL Admin API by the FulfillmentOrder object.\n The following diagram shows an example lifecycle of fulfilling an order using an order management app:\n Customers place orders, and receive items after the fulfillment process has completed.\n Order management apps query orders and inventory levels, and query supported fulfillment order actions that they can take on behalf of the merchant. For example, the app can create a fulfillment order and send a fulfillment request to a merchant or third-party fulfillment service to begin the order fulfillment process.\n Merchants or third-party fulfillment services approve the fulfillment request, pick and package the products, label the order for shipment, and ship the package with a mail carrier.\n API objects and relationships\n Before you start building your order management app, we recommend familiarizing yourself with the following API objects and their relationships.\n REST Admin API object GraphQL Admin API object Description\n Order Order Contains information about an order, including an array of the fulfillment orders which include line items that were purchased.\n FulfillmentOrder FulfillmentOrder An item or a group of items in an order that are to be fulfilled from the same location. There can be more than one fulfillment order for an order at a given location.\n FulfillmentOrder.line_items FulfillmentOrderLineItem A line item that belongs to a fulfillment order. It associates an order line item with quantities requiring fulfillment from the respective fulfillment order and any warning messages regarding the current fulfillment status.\n Fulfillment Fulfillment A shipment of one or more items in an order. It includes the line item that the fulfillment applies to, its tracking information, and the location of the fulfillment.\n FulfillmentService FulfillmentService A third-party warehousing service that prepares and ships orders on behalf of the store owner. Each fulfillment service is associated with its own location. When you create a fulfillment service, a new location is automatically created and associated with it.\n Location Location A geographical location where a line item can be fulfilled from. A fulfillment service always has its own location, and variants managed by the fulfillment service should always be fulfilled from that location.\n Statuses\n Each fulfillment order has a status and a request status:\n REST Admin API: FulfillmentOrder status and request_status properties\n GraphQL Admin API: FulfillmentOrderStatus and FulfillmentOrderRequestStatus enums\n Similarly, each fulfillment has a status:\n REST Admin API: Fulfillment status property\n GraphQL Admin API: FulfillmentStatus enum\n The following diagram shows how a fulfillment order's status and request status changes, and how a fulfillment's status changes, based on the REST Admin API or GraphQL Admin API request that's executed:\n Use cases\n Common use cases for order management apps include the following:\n Helping merchants with advanced shipping workflows\n Automating the buying of shipping labels\n Reassigning inventory based on availability\n Rescheduling upcoming shipments for a different date\n Webhooks\n The following table describes the fulfillment order webhooks that your app can subscribe to in API version 2023-01 and higher. For more information, refer to the payloads for fulfillment order webhooks.\n Webhook topic Description\n fulfillment_orders/order_routing_complete Occurs when a fulfillment order is created and the order routing has been completed for the order\n fulfillment_orders/fulfillment_request_submitted Occurs when a merchant requests one or more fulfilment order line items be fulfilled by a fulfilment service\n fulfillment_orders/fulfillment_request_accepted Occurs when a fulfillment service accepts a merchant's request to fulfill one or more fulfillment order line items\n fulfillment_orders/fulfillment_request_rejected Occurs when a fulfillment service rejects a merchant's request to fulfill an order\n fulfillment_orders/placed_on_hold Occurs when a fulfillment order is placed on hold\n fulfillment_orders/hold_released Occurs when a fulfillment order hold is released\n fulfillment_orders/scheduled_fulfillment_order_ready Occurs when a scheduled fulfillment order is ready to be fulfilled\n fulfillment_orders/rescheduled Occurs when a fulfillment order is rescheduled\n fulfillment_orders/cancellation_request_submitted Occurs when a merchant requests to cancel a fulfillment order after the request was accepted by a fulfillment service\n fulfillment_orders/cancellation_request_accepted Occurs when a fulfillment service accepts a fulfillment cancellation request from a merchant\n fulfillment_orders/cancellation_request_rejected Occurs when a fulfillment service rejects a fulfillment cancellation request from a merchant\n fulfillment_orders/cancelled Occurs when a fulfillment service or merchant cancels a fulfillment order\n fulfillment_orders/fulfillment_service_failed_to_complete Occurs when a fulfillment service intends to close an assigned fulfillment order that was previously accepted for fulfillment. After this action, the fulfillment order transitions to an incomplete status. To continue the fulfillment process, the merchant or app needs to determine the next course of action.\n Migrating your app\n In Shopify, the FulfillmentOrder resource models an end-to-end fulfillment process and is available in both the REST Admin API and the GraphQL Admin API. The FulfillmentOrder resource enables fulfillment data to sync accurately between Shopify and apps.\n By API version 2023-07, all apps should be using the FulfillmentOrder object to manage fulfillments. Apps using the following REST or GraphQL Admin API resources or objects to fulfill orders are using a legacy workflow that is no longer supported as of API version 2022-07:\n Order REST or GraphQL.\n Fulfillment REST or GraphQL.\n Benefits\n Migrating your app to the fulfillment orders workflow provides the following benefits:\n You can fetch the assigned location of a given group of unfulfilled line items to determine where fulfillment should occur.\n You no longer need to match SKUs or filter out the items on an order that don\u2019t apply to you before you can determine which items you need to fulfill.\n App users and apps can both add notes to requests, which can improve communication throughout the fulfillment process.\n The process of making fulfillment and cancellation requests is formalized.\n Implementing recommended workflows\n To learn how to migrate your app, refer to Migrate to fulfillment orders.\n If you maintain a third-party app or Shopify Flow workflow that relies on Order and Fulfillment API resources for order automation, then refer to Track orders placed through third-party marketplaces.\n Developer tools and resources\n Explore the following developer tools and resources to learn more about fulfilling orders.\n FulfillmentOrder object\n Consult the GraphQL Admin API reference to learn more about the FulfillmentOrder object.\n FulfillmentOrder resource\n Consult the REST Admin API reference to learn more about the FulfillmentOrder resource.\n Next steps\n Learn how to manage fulfillments as an order management app.\n Learn how to create test orders and transactions to validate your app's behavior.\n Edit existing orders using the GraphQL Admin API.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n How it works\n Statuses\n Use cases\n Webhooks\n Migrating your app\n Developer tools and resources\n Next steps\n Updates & News\n Developer changelog\n Partner blog",
                    "filename": "docs/apps/fulfillment/order-management-apps/content.txt",
                    "start_index": 0,
                    "end_index": 8433,
                    "start_line": 1,
                    "end_line": 90,
                    "max_line": 90,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                }
            ]
        },
        "mmr_code_snippets_initial": [
            {
                "code": "try {\n            const settings = await SettingsService.getSettings({ shop: scheduledHoldRelease.shop });\n            if (!settings.releaseFulfillmentHoldsAsap) {\n                continue;\n            }\n            const { accessToken } = (await userModel.findOne({ myshopify_domain: scheduledHoldRelease.shop })) as any;\n            const shopifyService = new ShopifyService({ shop: scheduledHoldRelease.shop, accessToken });\n            const fulfillmentOrders = await shopifyService.getFulfillmentOrders({\n                orderId: scheduledHoldRelease.orderId!,\n            });\n            if (getOrderIsOnPostPurchaseFulfillmentHold({ fulfillmentOrders })) {\n                const fulfillmentOrdersOnHold = fulfillmentOrders.filter(\n                    (fo) => fo.status === FulfillmentOrderStatusRest.ON_HOLD\n                );\n                for (const fulfillmentOrder of fulfillmentOrdersOnHold) {\n                    await shopifyService.releaseFulfillmentOrderHold({ fulfillmentOrderId: fulfillmentOrder.id });\n                    console.log(\n                        `[${scheduledHoldRelease.shop}] Released fulfillment order hold. Order: ${scheduledHoldRelease.orderId}. Fulfillment order: ${fulfillmentOrder.id}.`\n                    );\n                }\n            } else {\n                console.log(\n                    `[${scheduledHoldRelease.shop}] Skipped releasing fulfillment hold because order is no longer on hold. Order: ${scheduledHoldRelease.orderId}.`\n                );\n            }\n        } catch (e) {\n            if (scheduledHoldRelease.previousAttemptsCount < 5) {\n                // If there is an error, we will insert the hold release back into the\n                // database for some loop instance (maybe this one, maybe a different one)\n                // to process it again.\n                const recreatedScheduledRelease: ScheduledHoldRelease = {\n                    shop: scheduledHoldRelease.shop,\n                    orderId: scheduledHoldRelease.orderId,\n                    releaseHoldAt: scheduledHoldRelease.releaseHoldAt,\n                    previousAttemptsCount: scheduledHoldRelease.previousAttemptsCount + 1,\n                };\n                await ScheduledHoldReleasesModel.create(recreatedScheduledRelease);\n                console.log(\n                    `[${scheduledHoldRelease.shop}] Retrying fulfillment hold release. Attempt: ${scheduledHoldRelease.previousAttemptsCount}. Order: ${scheduledHoldRelease.orderId}.`\n                );\n            } else {\n                // If we've tried 5 times before, and failed again on the 6th time, we will log the error and\n                // move on.\n                console.error(\n                    `[${scheduledHoldRelease.shop}] Failed to release fulfillment hold. Order: ${scheduledHoldRelease.orderId}. ${e}`\n                );\n            }\n        }\n    }",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 6435,
                "end_index": 9313,
                "start_line": 133,
                "end_line": 181,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<Checkbox\n                                    label=\"Release fulfillment holds from 1-click offers when offer timer ends\"\n                                    helpText='If the customer closes their browser tab while on the post-purchase page, the order will stay \"On Hold\" for 60 minutes by default. This setting reduces the delay to be equal to the upsell offer timer duration (e.g. 10 minutes).'\n                                    checked={fields.releaseFulfillmentHoldsAsap.value}\n                                    onChange={fields.releaseFulfillmentHoldsAsap.onChange}\n                                    disabled={!hasAllRequiredScopes}\n                                />\n                            </VerticalStack>\n                        </VerticalStack>\n                    </Card>\n                </AnnotatedLayout>\n                <AnnotatedLayout title=\"Partially paid\">\n                    <Card>\n                        <VerticalStack gap=\"3\">\n                            <VerticalStack gap=\"2\">\n                                <Checkbox\n                                    label={\n                                        tyPageOrderMergingEnabled\n                                            ? 'Automatically remove unpaid upsell products (from 1-click and TY page) from orders'\n                                            : 'Automatically remove unpaid 1-click upsell products from orders'\n                                    }\n                                    checked={fields.removePartiallyPaidItems.value}\n                                    onChange={fields.removePartiallyPaidItems.onChange}\n                                />\n                                {fields.removePartiallyPaidItems.value && (\n                                    <Box paddingInlineStart=\"6\">",
                "filename": "web/client/src/pages/settings/settings-fulfillment-and-payment.page.tsx",
                "start_index": 2848,
                "end_index": 4640,
                "start_line": 68,
                "end_line": 93,
                "max_line": 141,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "ame?: 'ShopifyPaymentsDispute' }",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1859473,
                "end_index": 1859505,
                "start_line": 43520,
                "end_line": 44516,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "function getOrderIsOnPostPurchaseFulfillmentHold({\n    fulfillmentOrders,\n}: {\n    fulfillmentOrders: FulfillmentOrderRest[];\n}): boolean {\n    return fulfillmentOrders.some(\n        (fo) =>\n            fo.status === FulfillmentOrderStatusRest.ON_HOLD &&\n            fo.fulfillment_holds.some((fh) => fh.reason === 'online_store_post_purchase_cross_sell')\n    );\n}",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 9317,
                "end_index": 9681,
                "start_line": 184,
                "end_line": 194,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "_typename?: 'ReverseFulfillmentOrder",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1456892,
                "end_index": 1456928,
                "start_line": 34520,
                "end_line": 44504,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "while (hasScheduledHoldRelease)",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 5734,
                "end_index": 5765,
                "start_line": 121,
                "end_line": 121,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "leaseHoldsPayload = {\n    __typename?: 'FulfillmentOrdersReleaseHoldsPayload';\n    /** The asynchronous job that will release the fulfillment holds. */\n    job?: Maybe<Job>;\n    /** The list of errors that occurred from executing the mutation. */\n    userErrors: Array<FulfillmentOrdersReleaseHoldsUserError>;\n};\n\n/** An error that occurs during the execution of `FulfillmentOrdersReleaseHolds`. */\nexport type FulfillmentOrdersReleaseHoldsUserError = DisplayableError & {\n    __typename?: 'FulfillmentOrdersReleaseHoldsUserError';\n    /** The error code. */\n    code?: Maybe<FulfillmentOrdersReleaseHoldsUserErrorCode>;\n    /** The path to the input field that caused the error. */\n    field?: Maybe<Array<Scalars['String']>>;\n    /** The error message. */\n    message: Scalars['String'];\n};\n\n/** Possible error codes that can be returned by `FulfillmentOrdersReleaseHoldsUserError`. */\nexport enum FulfillmentOrdersReleaseHoldsUserErrorCode {\n    /** Failed to create release fulfillment order holds job. */\n    FailedToCreateJob = 'FAILED_TO_CREATE_JOB',\n}\n\n/** Return type for `fulfillmentOrdersSetFulfillmentDeadline` mutation. */\nexport type FulfillmentOrdersSetFulfillmentDeadlinePayload = {\n    __typename?: 'FulfillmentOrdersSetFulfillmentDeadlinePayload';\n    /** Whether the fulfillment deadline was successfully set. */\n    success?: Maybe<Scalars['Boolean']>;\n    /** The list of errors that occurred from executing the mutation. */\n    userErrors: Array<FulfillmentOrdersSetFulfillmentDeadlineUserError>;\n};\n\n/** An error that occurs during the execution of `FulfillmentOrdersSetFulfillmentDeadline`. */\nexport type FulfillmentOrdersSetFulfillmentDeadlineUserError = DisplayableError & {\n    __typename?: 'FulfillmentOrdersSetFulfillmentDeadlineUserError';\n    /** The error code. */\n    code?: Maybe<FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode>;\n    /** The path to the input field that caused the error. */\n    field?: Maybe<Array<Scalars['String']>>;\n    /** The error message. */\n    message: Scalars['String'];\n};\n\n/** Possible error codes that can be returned by `FulfillmentOrdersSetFulfillmentDeadlineUserError`. */\nexport enum FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode {\n    /** The fulfillment orders could not be found. */\n    FulfillmentOrdersNotFound = 'FULFILLMENT_ORDERS_NOT_FOUND',\n}\n\n/** The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center. */\nexport type FulfillmentOriginAd",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 609111,
                "end_index": 611601,
                "start_line": 14620,
                "end_line": 14689,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "import { getModelForClass, prop } from '@typegoose/typegoose';\nimport { REGEX_MYSHOPIFY } from '../../utils/regexes';\n\n// We can delete the possible hold after 3 days since it is almost\n// impossible that the customer would leave the checkout page open for\n// 3 days, come back, and then checkout without refreshing the page.\nconst POSSIBLE_HOLD_TTL_SECS = 259_200; // 3 days in seconds\n\nexport class PossibleHold {\n    @prop({ required: true, expires: POSSIBLE_HOLD_TTL_SECS, default: Date.now() })\n    lastUpdatedAt!: Date;\n\n    @prop({ required: true, match: REGEX_MYSHOPIFY })\n    shop!: string;\n\n    @prop({ required: true })\n    checkoutToken!: string;\n\n    @prop({ required: true })\n    minimumHoldMinutes!: number;\n}\n\nexport const PossibleHoldsModel = getModelForClass(PossibleHold);",
                "filename": "web/backend/src/modules/fulfillment-hold-release/possible-holds.model.ts",
                "start_index": 0,
                "end_index": 791,
                "start_line": 1,
                "end_line": 23,
                "max_line": 23,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "async function releaseScheduledFulfillmentHolds()",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 5638,
                "end_index": 5687,
                "start_line": 119,
                "end_line": 119,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "import { RequestHandler } from 'express';\nimport { releaseScheduledFulfillmentHolds } from './fulfillment-hold-release';\n\nexport const releaseAllScheduledFulfillmentHoldsJob: RequestHandler = async (req, res, next) => {\n    await releaseScheduledFulfillmentHolds();\n    res.status(200).send();\n};",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.controller.ts",
                "start_index": 0,
                "end_index": 296,
                "start_line": 1,
                "end_line": 7,
                "max_line": 7,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            }
        ],
        "reranked_doc_snippets_initial": [
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/backend` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 1000,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"content-box__row text-container\">\n                                                <h2 class=\"heading-2 os-step__title\" id=\"main-header\" tabindex=\"-1\">\n                                                    Your order is confirmed\n                                                </h2>\n                                                <p class=\"os-step__description\">\n                                                    You\u2019ll receive an email when your order is ready.\n                                                </p>\n                                            </div>\n                                        </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 317828,
                "end_index": 318454,
                "start_line": 6200,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<head>\n        <!-- Shopify App Bridge [START] -->\n        <meta name=\"shopify-api-key\" content=\"%SHOPIFY_API_KEY%\" />",
                "filename": "web/client/index.html",
                "start_index": 38,
                "end_index": 156,
                "start_line": 4,
                "end_line": 6,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<script defer src=\"./thankyoupage_bundle.js?v2\"></script>\n        <script defer src=\"/apps/aftersell_sdk.bundle.min.js?v2\"></script>\n    </head>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241237,
                "end_index": 241381,
                "start_line": 6073,
                "end_line": 6075,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"order-summary__section__content\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323949,
                "end_index": 323994,
                "start_line": 6297,
                "end_line": 6297,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<body class=\"aftersell-preview\">\n        <a href=\"#main-header\" class=\"skip-to-content\"> Skip to content </a>\n\n        <header class=\"banner\" data-header=\"\" role=\"banner\">\n            <div class=\"wrap\">\n                <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n            </div>\n        </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241387,
                "end_index": 241804,
                "start_line": 6077,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# Shopify Function development with Rust\n\n## Dependencies\n\n-   [Install Rust](https://www.rust-lang.org/tools/install)\n    -   On Windows, Rust requires the [Microsoft C++ Build Tools](https://docs.microsoft.com/en-us/windows/dev-environment/rust/setup). Be sure to select the _Desktop development with C++_ workload when installing them.\n-   Install [`cargo-wasi`](https://bytecodealliance.github.io/cargo-wasi/)\n    -   `cargo install cargo-wasi`\n-   On Macs with Apple Silicon, you'll also need to install the Binaryen toolchain and set the `WASM_OPT` environment variable. ([related issue](https://github.com/bytecodealliance/cargo-wasi/issues/112))\n    -   `brew install binaryen`\n    -   Add `export WASM_OPT=/opt/homebrew/bin/wasm-opt` to your `.bashrc` or `.zshrc`\n\n## Building the function\n\nYou can build this individual function using `cargo wasi`.\n\n```shell\ncargo wasi build --release\n```\n\nThe Shopify CLI `build` command will also execute this, based on the configuration in `shopify.function.extension.toml`.\n\n## Testing\n\n> Requires Node v16+\n\n1. Create a temporary JSON file (e.g., `a.json`) in the following format:\n\n```json\n{\n    \"data\": {\n        \"foo\": \"bar\"\n    },\n    \"secretKey\": \"abc123\"\n}\n```\n\n2. Run the following command\n\n```\nyarn test:new-hmac < a.json\n```\n\n3. Copy the generated HMAC into the test file",
                "filename": "extensions/upsell-offer-discount-function/README.md",
                "start_index": 0,
                "end_index": 1329,
                "start_line": 1,
                "end_line": 44,
                "max_line": 44,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"section__content\">\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Contact information</h3>\n\n                                                            <p class=\"as-dummy-line\"></p>\n\n                                                            <h3 class=\"heading-3\">Shipping address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n\n                                                            <h3 class=\"heading-3\">Shipping method</h3>\n                                                            <p class=\"as-dummy-line as-w40\"></p>\n                                                        </div>\n                                                    </div>\n\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Payment method</h3>\n                                                            <ul class=\"payment-method-list\">\n                                                                <li class=\"payment-method-list__item\">\n                                                                    <p class=\"as-dummy-line as-w80\"></p>\n                                                                </li>\n                                                            </ul>\n\n                                                            <h3 class=\"heading-3\">Billing address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n                                                        </div>\n                                                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318877,
                "end_index": 321837,
                "start_line": 6191,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<tbody data-order-summary-section=\"line-items\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 325247,
                "end_index": 325294,
                "start_line": 6314,
                "end_line": 6314,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"hidden\">\n                            <span class=\"visually-hidden\" id=\"forwarding-external-new-window-message\">\n                                Opens external website in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-new-window-message\">\n                                Opens in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-external-message\">\n                                Opens external website.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"checkout-context-step-one\">\n                                Customer information - Checkout\n                            </span>\n                        </div>\n                    </main>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 322226,
                "end_index": 323078,
                "start_line": 6265,
                "end_line": 6282,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"order-summary__sections\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323769,
                "end_index": 323806,
                "start_line": 6295,
                "end_line": 6295,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<th class=\"product__description\" scope=\"row\">\n                                                        <span class=\"product__description__name order-summary__emphasis\"\n                                                            >Product Name</span\n                                                        >\n                                                        <span\n                                                            class=\"product__description__variant order-summary__small-text\"\n                                                            >Variant Name</span\n                                                        >\n                                                    </th>\n                                                    <td class=\"product__quantity visually-hidden\">1</td>\n                                                    <td class=\"product__price\">\n                                                        <span class=\"order-summary__emphasis\">$42.99</span>\n                                                    </td>\n                                                </tr>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 331038,
                "end_index": 332129,
                "start_line": 6363,
                "end_line": 6376,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# [[[ --- CLIENT --- ]]]\nFROM node:18.16.1-alpine AS client\nARG SHOPIFY_API_KEY\nENV SHOPIFY_API_KEY=$SHOPIFY_API_KEY\nARG HOST\nENV HOST=$HOST\nARG NODE_ENV\nENV NODE_ENV=$NODE_ENV\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/client/package.json ./web/client/package.json\nCOPY web/client/yarn.lock ./web/client/yarn.lock\nRUN cd web/client && yarn install --frozen-lockfile --production=false\nCOPY extensions-web-common/package.json ./extensions-web-common/package.json\nCOPY extensions-web-common/yarn.lock ./extensions-web-common/yarn.lock\nRUN cd extensions-web-common && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY extensions/post-purchase ./extensions/post-purchase\nCOPY extensions-web-common/post-purchase ./extensions-web-common/post-purchase\nCOPY extensions-web-common/checkout ./extensions-web-common/checkout\nCOPY extensions-web-common/shared ./extensions-web-common/shared\nCOPY extensions-web-common/ty-page ./extensions-web-common/ty-page\nCOPY web/client ./web/client\nRUN cd web/client && yarn build\n\n# [[[ --- TY PAGE --- ]]]\nFROM node:18.16.1-alpine AS ty-page\nARG HOST\nENV HOST=$HOST\nWORKDIR /usr/src/app\nCOPY web/widgets/package.json ./web/widgets/package.json\nCOPY web/widgets/yarn.lock ./web/widgets/yarn.lock\nRUN cd web/widgets && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY web/widgets ./web/widgets\nRUN cd web/widgets && yarn build\n\n# [[[ --- BACKEND --- ]]]\nFROM node:18.16.1-alpine AS backend\nWORKDIR /usr/src/app\nCOPY web/backend/package.json ./web/backend/package.json\nCOPY web/backend/yarn.lock ./web/backend/yarn.lock\nCOPY web/backend/patches ./web/backend/patches\nRUN cd web/backend && yarn install --frozen-lockfile --production=false\nCOPY web/backend ./web/backend\nCOPY web/common ./web/common\nRUN cd web/backend && yarn build\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM node:18.16.1-alpine AS final\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/backend/package.json ./web/backend/package.json\nCOPY web/backend/yarn.lock ./web/backend/yarn.lock\nCOPY web/backend/patches ./web/backend/patches\nRUN cd web/backend && yarn install --frozen-lockfile --production=true\nCOPY --from=backend /usr/src/app/web/backend/build ./web/backend/build\nCOPY --from=ty-page /usr/src/app/web/widgets/dist ./web/backend/build/backend/dist\nCOPY --from=client /usr/src/app/web/client/dist ./web/backend/build/backend/dist/client\nCOPY package.json ./package.json\nCMD [\"yarn\", \"start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2540,
                "start_line": 1,
                "end_line": 61,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"order-summary__section order-summary__section--product-list\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323839,
                "end_index": 323912,
                "start_line": 6296,
                "end_line": 6296,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# AfterSell\n\n### All Docs on Notion \ud83d\udc49 [AfterSell Notion Docs](https://www.notion.so/aftersell/AfterSell-Docs-9d43566167b5426d86b5983925872953?pvs=4)",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 148,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            }
        ],
        "solution_task": {
            "structured_resp": "Clarify:\nThe issue is that orders are not being released from hold after an hour as expected for the specific store \"myvillagegreen.myshopify.com\". The expected behavior is that orders should be released from hold after an hour, but they remain on hold longer than that.\n\nHypothesize:\n- The logic that schedules the release of the fulfillment hold may not be calculating the release time correctly.\n- The loop that processes scheduled hold releases may not be running as expected or may not be picking up the scheduled releases.\n- There could be an issue with the Shopify API calls that are supposed to release the holds.\n- The settings for the store may not be configured correctly, or the code may not be respecting the settings.\n- There may be an error occurring during the release process that is not being handled correctly, causing the process to fail.\n\nExperiment:\n- Verify the settings for the specific store to ensure that the fulfillment release setting is configured correctly.\n- Check the logs for any errors related to the fulfillment hold release process.\n- Manually trigger the fulfillment hold release process to see if it works as expected.\n- Review the code to ensure that the time calculations for scheduling the release are correct and that the loop is running at the expected intervals.\n\nAnalyze:\n- The provided code snippets show that the release process is contingent on the `releaseFulfillmentHoldsAsap` setting and that there is a loop that should process scheduled hold releases.\n- The code also includes error handling that retries the release up to 5 times before logging an error and giving up.\n- The scheduling of the release is based on the `minimumHoldMinutes` from the `PossibleHoldsModel`, which is used to calculate the `releaseHoldAt` time.\n\nResolve:\n- Ensure that the `releaseFulfillmentHoldsAsap` setting is enabled for the store \"myvillagegreen.myshopify.com\".\n- Check the `PossibleHoldsModel` for the store to see if the `minimumHoldMinutes` is set correctly.\n- Review the logic in the loop that processes scheduled hold releases to ensure that it is running at the correct intervals and that the `releaseHoldAt` time is being calculated correctly based on the current time.\n- Add additional logging around the release process to capture more detailed information about failures or issues.\n- If the issue persists, consider adding more robust error handling and alerting mechanisms to notify developers when the release process fails repeatedly.",
            "response": "To ensure that orders at \"myvillagegreen.myshopify.com\" are released from hold in a timely manner, as per the expected behavior of being released after an hour, a thorough investigation and adjustment of the fulfillment hold release process is necessary. The following steps are crucial to address the issue where orders remain on hold for longer than anticipated:\n\n- Verify that the `releaseFulfillmentHoldsAsap` setting is active for the store \"myvillagegreen.myshopify.com\" to ensure immediate processing of holds.\n- Inspect the `PossibleHoldsModel` associated with the store to confirm that the `minimumHoldMinutes` parameter is set accurately, which influences the timing of order release.\n- Examine the loop responsible for processing scheduled hold releases, ensuring it operates at the intended intervals and correctly calculates the `releaseHoldAt` time in relation to the current time.\n- Implement additional logging within the release process to obtain more comprehensive data on any failures or complications that may arise during the hold release.\n- In cases where problems continue, enhance error handling and establish alert systems to alert the development team of consistent failures in the release process."
        },
        "snippet_processor_task": {
            "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "Code snippet handling fulfillment hold release logic, including conditions for releasing holds, error handling, and retry mechanism",
                        "snippet": {
                            "code": "try {\n            const settings = await SettingsService.getSettings({ shop: scheduledHoldRelease.shop });\n            if (!settings.releaseFulfillmentHoldsAsap) {\n                continue;\n            }\n            const { accessToken } = (await userModel.findOne({ myshopify_domain: scheduledHoldRelease.shop })) as any;\n            const shopifyService = new ShopifyService({ shop: scheduledHoldRelease.shop, accessToken });\n            const fulfillmentOrders = await shopifyService.getFulfillmentOrders({\n                orderId: scheduledHoldRelease.orderId!,\n            });\n            if (getOrderIsOnPostPurchaseFulfillmentHold({ fulfillmentOrders })) {\n                const fulfillmentOrdersOnHold = fulfillmentOrders.filter(\n                    (fo) => fo.status === FulfillmentOrderStatusRest.ON_HOLD\n                );\n                for (const fulfillmentOrder of fulfillmentOrdersOnHold) {\n                    await shopifyService.releaseFulfillmentOrderHold({ fulfillmentOrderId: fulfillmentOrder.id });\n                    console.log(\n                        `[${scheduledHoldRelease.shop}] Released fulfillment order hold. Order: ${scheduledHoldRelease.orderId}. Fulfillment order: ${fulfillmentOrder.id}.`\n                    );\n                }\n            } else {\n                console.log(\n                    `[${scheduledHoldRelease.shop}] Skipped releasing fulfillment hold because order is no longer on hold. Order: ${scheduledHoldRelease.orderId}.`\n                );\n            }\n        } catch (e) {\n            if (scheduledHoldRelease.previousAttemptsCount < 5) {\n                // If there is an error, we will insert the hold release back into the\n                // database for some loop instance (maybe this one, maybe a different one)\n                // to process it again.\n                const recreatedScheduledRelease: ScheduledHoldRelease = {\n                    shop: scheduledHoldRelease.shop,\n                    orderId: scheduledHoldRelease.orderId,\n                    releaseHoldAt: scheduledHoldRelease.releaseHoldAt,\n                    previousAttemptsCount: scheduledHoldRelease.previousAttemptsCount + 1,\n                };\n                await ScheduledHoldReleasesModel.create(recreatedScheduledRelease);\n                console.log(\n                    `[${scheduledHoldRelease.shop}] Retrying fulfillment hold release. Attempt: ${scheduledHoldRelease.previousAttemptsCount}. Order: ${scheduledHoldRelease.orderId}.`\n                );\n            } else {\n                // If we've tried 5 times before, and failed again on the 6th time, we will log the error and\n                // move on.\n                console.error(\n                    `[${scheduledHoldRelease.shop}] Failed to release fulfillment hold. Order: ${scheduledHoldRelease.orderId}. ${e}`\n                );\n            }\n        }\n    }",
                            "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                            "start_index": 6435,
                            "end_index": 9313,
                            "start_line": 133,
                            "end_line": 181,
                            "max_line": 194,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": ""
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet contains the logic for releasing holds, which is directly related to the issue."
                },
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "Functions for upserting possible fulfillment holds and scheduling fulfillment hold releases are defined, including logic for checking and creating holds based on settings and conditions.",
                        "snippet": {
                            "code": "import { SettingsService } from '../settings/settings.service';\nimport { FulfillmentOrderRest, FulfillmentOrderStatusRest, ShopifyService } from '../shopify/shopify.service';\nimport userModel from '../users/users.model';\nimport { PossibleHold, PossibleHoldsModel } from './possible-holds.model';\nimport { ScheduledHoldRelease, ScheduledHoldReleasesModel } from './scheduled-hold-releases.model';\n\nexport async function upsertPossibleFulfillmentHold({\n    shop,\n    checkoutToken,\n    minimumHoldMinutes,\n}: Pick<PossibleHold, 'shop' | 'checkoutToken' | 'minimumHoldMinutes'>) {\n    await PossibleHoldsModel.updateOne(\n        { shop, checkoutToken },\n        { minimumHoldMinutes, lastUpdatedAt: new Date() },\n        { upsert: true }\n    );\n}\n\nexport async function scheduleFulfillmentHoldReleaseIfNecessary({\n    shopifyService,\n    order: { id: orderId, checkout_token: checkoutToken },\n}: {\n    shopifyService: ShopifyService;\n    order: { id: number; checkout_token: string };\n}) {\n    // We use findOneAndDelete here to prevent storing old possible holds. We delete the possible hold\n    // regardless of whether or not the order actually has a fulfillment hold.\n    //\n    // We don't need to check if the setting is enabled here since the possible hold should only be created\n    // if the setting is enabled.\n    const possibleHold = await PossibleHoldsModel.findOneAndDelete({ shop: shopifyService.shop, checkoutToken });\n    if (!possibleHold) {\n        return;\n    }\n\n    // This call will fail if the merchant has not granted the `write_merchant_managed_fulfillment_orders` scope.\n    // This should only happen if the merchant enabled the setting but didn't add the scope. We can just throw in\n    // this case see the error in Sentry and contact the merchant to add the scope or disable the setting.\n    const fulfillmentOrders = await shopifyService.getFulfillmentOrders({ orderId });\n    const isOnHold = getOrderIsOnPostPurchaseFulfillmentHold({ fulfillmentOrders });\n\n    if (isOnHold) {\n        const scheduledHoldRelease: ScheduledHoldRelease = {\n            shop: shopifyService.shop,\n            orderId,\n            releaseHoldAt: new Date(Date.now() + possibleHold.minimumHoldMinutes * 60 * 1000),\n            previousAttemptsCount: 0,\n        };\n        await ScheduledHoldReleasesModel.create(scheduledHoldRelease);\n        console.log(`[${shopifyService.shop}] Scheduled fulfillment hold release. Order ID: ${orderId}`);\n    }\n}",
                            "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                            "start_index": 0,
                            "end_index": 2456,
                            "start_line": 1,
                            "end_line": 194,
                            "max_line": 194,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": ""
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet defines functions for scheduling fulfillment hold releases, which is relevant to the issue."
                },
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "The snippet shows an async function related to releasing scheduled fulfillment holds, which is relevant to the issue of fulfillment hold not releasing on time.",
                        "snippet": {
                            "code": "async function releaseScheduledFulfillmentHolds()",
                            "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                            "start_index": 5638,
                            "end_index": 5687,
                            "start_line": 119,
                            "end_line": 119,
                            "max_line": 194,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": ""
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet is an async function related to releasing scheduled fulfillment holds, which is relevant to the issue."
                },
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "The snippet involves a loop checking for scheduled hold releases, potentially relevant to the issue of fulfillment hold not releasing on time.",
                        "snippet": {
                            "code": "while (hasScheduledHoldRelease)",
                            "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                            "start_index": 5734,
                            "end_index": 5765,
                            "start_line": 121,
                            "end_line": 121,
                            "max_line": 194,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": ""
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet involves a loop checking for scheduled hold releases, which is relevant to the issue."
                }
            ],
            "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.controller.ts": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "The snippet shows the controller function responsible for releasing fulfillment holds in the backend, triggered by a request handler.",
                        "snippet": {
                            "code": "import { RequestHandler } from 'express';\nimport { releaseScheduledFulfillmentHolds } from './fulfillment-hold-release';\n\nexport const releaseAllScheduledFulfillmentHoldsJob: RequestHandler = async (req, res, next) => {\n    await releaseScheduledFulfillmentHolds();\n    res.status(200).send();\n};",
                            "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.controller.ts",
                            "start_index": 0,
                            "end_index": 296,
                            "start_line": 1,
                            "end_line": 7,
                            "max_line": 7,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": ""
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet shows the controller function responsible for releasing fulfillment holds, which is the expected behavior not occurring."
                }
            ],
            "web/client/src/pages/settings/settings-fulfillment-and-payment.page.tsx": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "The snippet provides information about a setting related to releasing fulfillment holds after a certain time period, which could be relevant to the issue of fulfillment holds not releasing on time.",
                        "snippet": {
                            "code": "<Checkbox\n                                    label=\"Release fulfillment holds from 1-click offers when offer timer ends\"\n                                    helpText='If the customer closes their browser tab while on the post-purchase page, the order will stay \"On Hold\" for 60 minutes by default. This setting reduces the delay to be equal to the upsell offer timer duration (e.g. 10 minutes).'\n                                    checked={fields.releaseFulfillmentHoldsAsap.value}\n                                    onChange={fields.releaseFulfillmentHoldsAsap.onChange}\n                                    disabled={!hasAllRequiredScopes}\n                                />\n                            </VerticalStack>\n                        </VerticalStack>\n                    </Card>\n                </AnnotatedLayout>\n                <AnnotatedLayout title=\"Partially paid\">\n                    <Card>\n                        <VerticalStack gap=\"3\">\n                            <VerticalStack gap=\"2\">\n                                <Checkbox\n                                    label={\n                                        tyPageOrderMergingEnabled\n                                            ? 'Automatically remove unpaid upsell products (from 1-click and TY page) from orders'\n                                            : 'Automatically remove unpaid 1-click upsell products from orders'\n                                    }\n                                    checked={fields.removePartiallyPaidItems.value}\n                                    onChange={fields.removePartiallyPaidItems.onChange}\n                                />\n                                {fields.removePartiallyPaidItems.value && (\n                                    <Box paddingInlineStart=\"6\">",
                            "filename": "web/client/src/pages/settings/settings-fulfillment-and-payment.page.tsx",
                            "start_index": 2848,
                            "end_index": 4640,
                            "start_line": 68,
                            "end_line": 93,
                            "max_line": 141,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": ""
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet provides information about a setting related to releasing fulfillment holds after a certain time period, which is the core of the issue."
                }
            ],
            "web/backend/src/modules/shopify/graphql/generated/index.ts": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "The snippet provides information on releasing the fulfillment hold on a fulfillment order, which is relevant to the issue of fulfillment hold not releasing on time in the project.",
                        "snippet": {
                            "code": "ickup notification to the customer to let them know that their order is ready\n     * to be picked up.\n     *\n     */\n    fulfillmentOrderLineItemsPreparedForPickup?: Maybe<FulfillmentOrderLineItemsPreparedForPickupPayload>;\n    /**\n     * Changes the location which is assigned to fulfill a number of unfulfilled fulfillment order line items.\n     *\n     * Line items which have already been fulfilled can't be re-assigned\n     * and will always remain assigned to the original location.\n     *\n     * You can't change the assigned location while a fulfillment order has a\n     * [request status](https://shopify.dev/docs/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus)\n     * of `SUBMITTED`, `ACCEPTED`, `CANCELLATION_REQUESTED`, or `CANCELLATION_REJECTED`.\n     * These request statuses mean that a fulfillment order is awaiting action by a fulfillment service\n     * and can't be re-assigned without first having the fulfillment service accept a cancellation request.\n     * This behavior is intended to prevent items from being fulfilled by multiple locations or fulfillment services.\n     *\n     * ### How re-assigning line items affects fulfillment orders\n     *\n     * **First scenario:** Re-assign all line items belonging to a fulfillment order to a new location.\n     *\n     * In this case, the\n     * [assignedLocation](https://shopify.dev/docs/api/admin-graphql/latest/objects/fulfillmentorder#field-fulfillmentorder-assignedlocation)\n     * of the original fulfillment order will be updated to the new location.\n     *\n     * **Second scenario:** Re-assign a subset of the line items belonging to a fulfillment order to a new location.\n     * You can specify a subset of line items using the `fulfillmentOrderLineItems` parameter\n     * (available as of the `2023-07` API version),\n     * or specify that the original fulfillment order contains line items which have already been fulfilled.\n     *\n     * If the new location is already assigned to another active fulfillment order, on the same order,\n     * then the line items are moved to the existing fulfillment order.\n     * Otherwise, a new fulfillment order is created for the new location, and the line items are moved to the new location.\n     *\n     */\n    fulfillmentOrderMove?: Maybe<FulfillmentOrderMovePayload>;\n    /** Marks a scheduled fulfillment order as open. */\n    fulfillmentOrderOpen?: Maybe<FulfillmentOrderOpenPayload>;\n    /** Rejects a cancellation request sent to a fulfillment service for a fulfillment order. */\n    fulfillmentOrderRejectCancellationRequest?: Maybe<FulfillmentOrderRejectCancellationRequestPayload>;\n    /** Rejects a fulfillment request sent to a fulfillment service for a fulfillment order. */\n    fulfillmentOrderRejectFulfillmentRequest?: Maybe<FulfillmentOrderRejectFulfillmentRequestPayload>;\n    /** Releases the fulfillment hold on a fulfillment order. */\n    fulfillmentOrderReleaseHold?: Maybe<FulfillmentOrderReleaseHoldPayload>;",
                            "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                            "start_index": 913079,
                            "end_index": 916043,
                            "start_line": 21804,
                            "end_line": 21848,
                            "max_line": 45780,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": ""
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet provides information on releasing the fulfillment hold on a fulfillment order, which is directly related to the issue."
                }
            ]
        },
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a detailed and structured approach to troubleshoot and potentially resolve the issue of fulfillment holds not releasing on time for the store 'myvillagegreen.myshopify.com'. It suggests verifying the store's settings, inspecting the model and parameters that control the hold release timing, examining the loop for processing hold releases, and implementing additional logging for better insight into the process. Furthermore, the RESPONSE includes specific code snippets to check, which are directly related to the issue at hand. This level of detail is highly valuable for a developer looking to address the bug. The only reason it does not score a 10 is that it does not explicitly mention checking for any recent changes or updates that might have caused the issue, which is a common troubleshooting step in software development.",
            "clarification_questions": "NONE"
        },
        "end_time": 1712636190.515466,
        "result": "To ensure that orders at \"myvillagegreen.myshopify.com\" are released from hold in a timely manner, as per the expected behavior of being released after an hour, a thorough investigation and adjustment of the fulfillment hold release process is necessary. The following steps are crucial to address the issue where orders remain on hold for longer than anticipated:\n\n- Verify that the `releaseFulfillmentHoldsAsap` setting is active for the store \"myvillagegreen.myshopify.com\" to ensure immediate processing of holds.\n- Inspect the `PossibleHoldsModel` associated with the store to confirm that the `minimumHoldMinutes` parameter is set accurately, which influences the timing of order release.\n- Examine the loop responsible for processing scheduled hold releases, ensuring it operates at the intended intervals and correctly calculates the `releaseHoldAt` time in relation to the current time.\n- Implement additional logging within the release process to obtain more comprehensive data on any failures or complications that may arise during the hold release.\n- In cases where problems continue, enhance error handling and establish alert systems to alert the development team of consistent failures in the release process.\n\n### Code snippets to check\n\n-  \u2192 [web](https://github.com/testbed/aftersell/tree//web) \u2192 [backend](https://github.com/testbed/aftersell/tree//web/backend) \u2192 [src](https://github.com/testbed/aftersell/tree//web/backend/src) \u2192 [modules](https://github.com/testbed/aftersell/tree//web/backend/src/modules) \u2192 [fulfillment-hold-release](https://github.com/testbed/aftersell/tree//web/backend/src/modules/fulfillment-hold-release)- [Lines 133 - 181](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts#L133-L181)\n\n This snippet contains the logic for releasing holds, which is directly related to the issue. \n\n\n   - [Lines 1 - 194](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts#L1-L194)\n\n This snippet defines functions for scheduling fulfillment hold releases, which is relevant to the issue. \n\n\n   - [Lines 119 - 119](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts#L119-L119)\n\n This snippet is an async function related to releasing scheduled fulfillment holds, which is relevant to the issue. \n\n\n   - [Lines 121 - 121](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts#L121-L121)\n\n This snippet involves a loop checking for scheduled hold releases, which is relevant to the issue.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree//web) \u2192 [backend](https://github.com/testbed/aftersell/tree//web/backend) \u2192 [src](https://github.com/testbed/aftersell/tree//web/backend/src) \u2192 [modules](https://github.com/testbed/aftersell/tree//web/backend/src/modules) \u2192 [fulfillment-hold-release](https://github.com/testbed/aftersell/tree//web/backend/src/modules/fulfillment-hold-release)- [Lines 1 - 7](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.controller.ts#L1-L7)\n\n This snippet shows the controller function responsible for releasing fulfillment holds, which is the expected behavior not occurring.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree//web) \u2192 [client](https://github.com/testbed/aftersell/tree//web/client) \u2192 [src](https://github.com/testbed/aftersell/tree//web/client/src) \u2192 [pages](https://github.com/testbed/aftersell/tree//web/client/src/pages) \u2192 [settings](https://github.com/testbed/aftersell/tree//web/client/src/pages/settings)- [Lines 68 - 93](https://github.com/testbed/aftersell/blob//web/client/src/pages/settings/settings-fulfillment-and-payment.page.tsx#L68-L93)\n\n This snippet provides information about a setting related to releasing fulfillment holds after a certain time period, which is the core of the issue.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree//web) \u2192 [backend](https://github.com/testbed/aftersell/tree//web/backend) \u2192 [src](https://github.com/testbed/aftersell/tree//web/backend/src) \u2192 [modules](https://github.com/testbed/aftersell/tree//web/backend/src/modules) \u2192 [shopify](https://github.com/testbed/aftersell/tree//web/backend/src/modules/shopify) \u2192 [graphql](https://github.com/testbed/aftersell/tree//web/backend/src/modules/shopify/graphql) \u2192 [generated](https://github.com/testbed/aftersell/tree//web/backend/src/modules/shopify/graphql/generated)- [Lines 21804 - 21848](https://github.com/testbed/aftersell/blob//web/backend/src/modules/shopify/graphql/generated/index.ts#L21804-L21848)\n\n This snippet provides information on releasing the fulfillment hold on a fulfillment order, which is directly related to the issue."
    }
}