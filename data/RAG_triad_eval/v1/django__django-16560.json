{
    "id": "django__django-16560",
    "repo_name": "testbed/django__django__5.0",
    "task_id": 2750701187068346350,
    "title": "Allow to customize the code attribute of ValidationError raised by BaseConstraint.validate",
    "body": "Description\n\t\nIt is currently possible to customize the violation_error_message of a ValidationError raised by a constraint but not the code.\nI'd like to add a new violation_error_message parameter to BaseConstraint to allow to easily add one.\nCurrently, to achieve the same result, you have to subclass the constraint to tweak validate to catch and reraise the ValidationError.\nSince the documentation recommends to Provide a descriptive error code to the constructor: when raising a ValidationError in \u200bhttps://docs.djangoproject.com/en/4.1/ref/forms/validation/#raising-validationerror , I think it would make sense to provide this possibility for errors raised by constraints.\nIf you think it would be a good idea, I'd be happy to work on a PR.\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/django__django__5.0.git",
    "requested_commit": "",
    "mayil_response": "To implement the feature requested in the ticket, you need to modify the `BaseConstraint` class in the `django/db/models/constraints.py` file to allow passing a custom `violation_error_code` when raising a `ValidationError`. Here's how you can do it:\n\n- Modify the `BaseConstraint.validate` method to use `self.violation_error_code` when raising a `ValidationError`.\n- Ensure that `violation_error_code` can be passed as an argument to the `BaseConstraint` constructor and stored as an instance variable.\n- Update any subclasses of `BaseConstraint` that override the `validate` method to ensure they use the new `violation_error_code` attribute.\n\nHere's a code snippet that demonstrates the changes:\n\n```python\n# django/db/models/constraints.py\n\nclass BaseConstraint:\n    # ... (other parts of the class remain unchanged)\n\n    def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n        # The actual validation logic will depend on the subclass implementation.\n        # If a ValidationError is raised, it should now include the custom code.\n        raise NotImplementedError(\"This method must be implemented by a subclass.\")\n\n    # ... (other parts of the class remain unchanged)\n\n# Example subclass that overrides validate\nclass CheckConstraint(BaseConstraint):\n    # ... (other parts of the class remain unchanged)\n\n    def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n        # ... (existing validation logic)\n        if not Q(self.check).check(against, using=using):\n            raise ValidationError(\n                self.get_violation_error_message(),\n                code=self.violation_error_code  # Use the custom error code\n            )\n        # ... (rest of the method)\n```\n\nMake sure to update the documentation and add tests to cover the new functionality. Once the changes are made, you can submit a pull request to the Django project for review.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__5.0/tree//django) \u2192 [db](https://github.com/testbed/django__django__5.0/tree//django/db) \u2192 [models](https://github.com/testbed/django__django__5.0/tree//django/db/models)- [Lines 19 - 465](https://github.com/testbed/django__django__5.0/blob//django/db/models/constraints.py#L19-L465)\n\n This snippet defines the BaseConstraint class and its __init__ method, which is directly related to the issue of adding a new violation_error_code parameter. \n\n\n   - [Lines 93 - 465](https://github.com/testbed/django__django__5.0/blob//django/db/models/constraints.py#L93-L465)\n\n This snippet shows the CheckConstraint class, which inherits from BaseConstraint. It demonstrates how the violation_error_code and violation_error_message parameters are used, which is relevant to the issue.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.00029749999999999997,
        "snippet_processor": 0.059160000000000004,
        "issue_star_creation": 0.02354,
        "issue_star_solver": 0.06825,
        "bouncer": 0.021790000000000004
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711706019.53567,
        "relevant_snippets": [
            {
                "code": "class BaseConstraint:\n    default_violation_error_message = _(\"Constraint \u201c%(name)s\u201d is violated.\")\n    violation_error_code = None\n    violation_error_message = None\n\n    # RemovedInDjango60Warning: When the deprecation ends, replace with:\n    # def __init__(\n    #     self, *, name, violation_error_code=None, violation_error_message=None\n    # ):\n    def __init__(\n        self, *args, name=None, violation_error_code=None, violation_error_message=None\n    ):\n        # RemovedInDjango60Warning.\n        if name is None and not args:\n            raise TypeError(\n                f\"{self.__class__.__name__}.__init__() missing 1 required keyword-only \"\n                f\"argument: 'name'\"\n            )\n        self.name = name\n        if violation_error_code is not None:\n            self.violation_error_code = violation_error_code\n        if violation_error_message is not None:\n            self.violation_error_message = violation_error_message\n        else:\n            self.violation_error_message = self.default_violation_error_message\n        # RemovedInDjango60Warning.\n        if args:\n            warnings.warn(\n                f\"Passing positional arguments to {self.__class__.__name__} is \"\n                f\"deprecated.\",\n                RemovedInDjango60Warning,\n                stacklevel=2,\n            )\n            for arg, attr in zip(args, [\"name\", \"violation_error_message\"]):\n                if arg:\n                    setattr(self, attr, arg)\n\n    @property\n    def contains_expressions(self):\n        return False\n\n    def constraint_sql(self, model, schema_editor):\n        raise NotImplementedError(\"This method must be implemented by a subclass.\")\n\n    def create_sql(self, model, schema_editor):\n        raise NotImplementedError(\"This method must be implemented by a subclass.\")\n\n    def remove_sql(self, model, schema_editor):\n        raise NotImplementedError(\"This method must be implemented by a subclass.\")\n\n    def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n        raise NotImplementedError(\"This method must be implemented by a subclass.\")\n\n    def get_violation_error_message(self):\n        return self.violation_error_message % {\"name\": self.name}\n\n    def deconstruct(self):\n        path = \"%s.%s\" % (self.__class__.__module__, self.__class__.__name__)\n        path = path.replace(\"django.db.models.constraints\", \"django.db.models\")\n        kwargs = {\"name\": self.name}\n        if (\n            self.violation_error_message is not None\n            and self.violation_error_message != self.default_violation_error_message\n        ):\n            kwargs[\"violation_error_message\"] = self.violation_error_message\n        if self.violation_error_code is not None:\n            kwargs[\"violation_error_code\"] = self.violation_error_code\n        return (path, (), kwargs)\n\n    def clone(self):\n        _, args, kwargs = self.deconstruct()\n        return self.__class__(*args, **kwargs)\n\n\nc",
                "filename": "django/db/models/constraints.py",
                "start_index": 670,
                "end_index": 3624,
                "start_line": 19,
                "end_line": 465,
                "max_line": 466,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "from django.core.exceptions import ValidationError\nfrom django.utils.functional import SimpleLazyObject\nfrom django.utils.text import format_lazy\n\n\ndef prefix_validation_error(error, prefix, code, params):\n    \"\"\"\n    Prefix a validation error message while maintaining the existing\n    validation data structure.\n    \"\"\"\n    if error.error_list == [error]:\n        error_params = error.params or {}\n        return ValidationError(\n            # We can't simply concatenate messages since they might require\n            # their associated parameters to be expressed correctly which\n            # is not something `format_lazy` does. For example, proxied\n            # ngettext calls require a count parameter and are converted\n            # to an empty string if they are missing it.\n            message=format_lazy(\n                \"{} {}\",\n                SimpleLazyObject(lambda: prefix % params),\n                SimpleLazyObject(lambda: error.message % error_params),\n            ),\n            code=code,\n            params={**error_params, **params},\n        )\n    return ValidationError(\n        [prefix_validation_error(e, prefix, code, params) for e in error.error_list]\n    )",
                "filename": "django/contrib/postgres/utils.py",
                "start_index": 0,
                "end_index": 1186,
                "start_line": 1,
                "end_line": 29,
                "max_line": 29,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 0.7
            },
            {
                "code": "lass CheckConstraint(BaseConstraint):\n    def __init__(\n        self, *, check, name, violation_error_code=None, violation_error_message=None\n    ):\n        self.check = check\n        if not getattr(check, \"conditional\", False):\n            raise TypeError(\n                \"CheckConstraint.check must be a Q instance or boolean expression.\"\n            )\n        super().__init__(\n            name=name,\n            violation_error_code=violation_error_code,\n            violation_error_message=violation_error_message,\n        )\n\n    def _get_check_sql(self, model, schema_editor):\n        query = Query(model=model, alias_cols=False)\n        where = query.build_where(self.check)\n        compiler = query.get_compiler(connection=schema_editor.connection)\n        sql, params = where.as_sql(compiler, schema_editor.connection)\n        return sql % tuple(schema_editor.quote_value(p) for p in params)\n\n    def constraint_sql(self, model, schema_editor):\n        check = self._get_check_sql(model, schema_editor)\n        return schema_editor._check_sql(self.name, check)\n\n    def create_sql(self, model, schema_editor):\n        check = self._get_check_sql(model, schema_editor)\n        return schema_editor._create_check_sql(model, self.name, check)\n\n    def remove_sql(self, model, schema_editor):\n        return schema_editor._delete_check_sql(model, self.name)\n\n    def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n        against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n        try:\n            if not Q(self.check).check(against, using=using):\n                raise ValidationError(\n                    self.get_violation_error_message(), code=self.violation_error_code\n                )\n        except FieldError:\n            pass\n\n    def __repr__(self):\n        return \"<%s: check=%s name=%s%s%s>\" % (\n            self.__class__.__qualname__,\n            self.check,\n            repr(self.name),\n            (\n                \"\"\n                if self.violation_error_code is None\n                else \" violation_error_code=%r\" % self.violation_error_code\n            ),\n            (\n                \"\"\n                if self.violation_error_message is None\n                or self.violation_error_message == self.default_violation_error_message\n                else \" violation_error_message=%r\" % self.violation_error_message\n            ),\n        )\n\n    def __eq__(self, other):\n        if isinstance(other, CheckConstraint):\n            return (\n                self.name == other.name\n                and self.check == other.check\n                and self.violation_error_code == other.violation_error_code\n                and self.violation_error_message == other.violation_error_message\n            )\n        return super().__eq__(other)\n\n    def deconstruct(self):\n        path, args, kwargs = super().deconstruct()\n        kwargs[\"check\"] = self.check\n        return path, args, kwargs\n\n\nc",
                "filename": "django/db/models/constraints.py",
                "start_index": 3624,
                "end_index": 6588,
                "start_line": 93,
                "end_line": 465,
                "max_line": 466,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "def unique_error_message(self, model_class, unique_check):\n        opts = model_class._meta\n\n        params = {\n            \"model\": self,\n            \"model_class\": model_class,\n            \"model_name\": capfirst(opts.verbose_name),\n            \"unique_check\": unique_check,\n        }\n\n        # A unique field\n        if len(unique_check) == 1:\n            field = opts.get_field(unique_check[0])\n            params[\"field_label\"] = capfirst(field.verbose_name)\n            return ValidationError(\n                message=field.error_messages[\"unique\"],\n                code=\"unique\",\n                params=params,\n            )\n\n        # unique_together\n        else:\n            field_labels = [\n                capfirst(opts.get_field(f).verbose_name) for f in unique_check\n            ]\n            params[\"field_labels\"] = get_text_list(field_labels, _(\"and\"))\n            return ValidationError(\n                message=_(\"%(model_name)s with this %(field_labels)s already exists.\"),\n                code=\"unique_together\",\n                params=params,\n            )\n\n    def get_constraints(self):\n        constraints = [(self.__class__, self._meta.constraints)]\n        for parent_class in self._meta.get_parent_list():\n            if parent_class._meta.constraints:\n                constraints.append((parent_class, parent_class._meta.constraints))\n        return constraints\n\n    def validate_constraints(self, exclude=None):\n        constraints = self.get_constraints()\n        using = router.db_for_write(self.__class__, instance=self)\n\n        errors = {}\n        for model_class, model_constraints in constraints:\n            for constraint in model_constraints:\n                try:\n                    constraint.validate(model_class, self, exclude=exclude, using=using)\n                except ValidationError as e:\n                    if (\n                        getattr(e, \"code\", None) == \"unique\"\n                        and len(constraint.fields) == 1\n                    ):\n                        errors.setdefault(constraint.fields[0], []).append(e)\n                    else:\n                        errors = e.update_error_dict(errors)\n        if errors:\n            raise ValidationError(errors)",
                "filename": "django/db/models/base.py",
                "start_index": 58047,
                "end_index": 60275,
                "start_line": 1436,
                "end_line": 1565,
                "max_line": 2607,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 0.7
            },
            {
                "code": "nstructible\nclass BaseValidator:\n    message = _(\"Ensure this value is %(limit_value)s (it is %(show_value)s).\")\n    code = \"limit_value\"\n\n    def __init__(self, limit_value, message=None):\n        self.limit_value = limit_value\n        if message:\n            self.message = message\n\n    def __call__(self, value):\n        cleaned = self.clean(value)\n        limit_value = (\n            self.limit_value() if callable(self.limit_value) else self.limit_value\n        )\n        params = {\"limit_value\": limit_value, \"show_value\": cleaned, \"value\": value}\n        if self.compare(cleaned, limit_value):\n            raise ValidationError(self.message, code=self.code, params=params)\n\n    def __eq__(self, other):\n        if not isinstance(other, self.__class__):\n            return NotImplemented\n        return (\n            self.limit_value == other.limit_value\n            and self.message == other.message\n            and self.code == other.code\n        )\n\n    def compare(self, a, b):\n        return a is not b\n\n    def clean(self, x):\n        return x\n\n\n@deconstructible\nclass MaxValueValidator(BaseValidator):\n    message = _(\"Ensure this value is less than or equal to %(limit_value)s.\")\n    code = \"max_value\"\n\n    def compare(self, a, b):\n        return a > b\n\n\n@deconstructible\nclass MinValueValidator(BaseValidator):\n    message = _(\"Ensure this value is greater than or equal to %(limit_value)s.\")\n    code = \"min_value\"\n\n    def compare(self, a, b):\n        return a < b\n\n\n@deconstructible\nclass StepValueValidator(BaseValidator):\n    message = _(\"Ensure this value is a multiple of step size %(limit_value)s.\")\n    code = \"step_size\"\n\n    def __init__(self, limit_value, message=None, offset=None):\n        super().__init__(limit_value, message)\n        if offset is not None:\n            self.message = _(\n                \"Ensure this value is a multiple of step size %(limit_value)s, \"\n                \"starting from %(offset)s, e.g. %(offset)s, %(valid_value1)s, \"\n                \"%(valid_value2)s, and so on.\"\n            )\n        self.offset = offset\n\n    def __call__(self, value):\n        if self.offset is None:\n            super().__call__(value)\n        else:\n            cleaned = self.clean(value)\n            limit_value = (\n                self.limit_value() if callable(self.limit_value) else self.limit_value\n            )\n            if self.compare(cleaned, limit_value):\n                offset = cleaned.__class__(self.offset)\n                params = {\n                    \"limit_value\": limit_value,\n                    \"offset\": offset,\n                    \"valid_value1\": offset + limit_value,\n                    \"valid_value2\": offset + 2 * limit_value,\n                }\n                raise ValidationError(self.message, code=self.code, params=params)\n\n    def compare(self, a, b):\n        offset = 0 if self.offset is None else self.offset\n        return not math.isclose(math.remainder(a - offset, b), 0, abs_tol=1e-9)\n\n\n@deco",
                "filename": "django/core/validators.py",
                "start_index": 11741,
                "end_index": 14711,
                "start_line": 8,
                "end_line": 620,
                "max_line": 642,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "nstructible\nclass MinLengthValidator(BaseValidator):\n    message = ngettext_lazy(\n        \"Ensure this value has at least %(limit_value)d character (it has \"\n        \"%(show_value)d).\",\n        \"Ensure this value has at least %(limit_value)d characters (it has \"\n        \"%(show_value)d).\",\n        \"limit_value\",\n    )\n    code = \"min_length\"\n\n    def compare(self, a, b):\n        return a < b\n\n    def clean(self, x):\n        return len(x)\n\n\n@deconstructible\nclass MaxLengthValidator(BaseValidator):\n    message = ngettext_lazy(\n        \"Ensure this value has at most %(limit_value)d character (it has \"\n        \"%(show_value)d).\",\n        \"Ensure this value has at most %(limit_value)d characters (it has \"\n        \"%(show_value)d).\",\n        \"limit_value\",\n    )\n    code = \"max_length\"\n\n    def compare(self, a, b):\n        return a > b\n\n    def clean(self, x):\n        return len(x)\n\n\n@deco",
                "filename": "django/core/validators.py",
                "start_index": 14711,
                "end_index": 15607,
                "start_line": 8,
                "end_line": 620,
                "max_line": 642,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def validate(self, value, model_instance):\n        \"\"\"\n        Validate value and raise ValidationError if necessary. Subclasses\n        should override this to provide validation logic.\n        \"\"\"\n        if not self.editable:\n            # Skip validation for non-editable fields.\n            return\n\n        if self.choices is not None and value not in self.empty_values:\n            for option_key, option_value in self.choices:\n                if isinstance(option_value, (list, tuple)):\n                    # This is an optgroup, so look inside the group for\n                    # options.\n                    for optgroup_key, optgroup_value in option_value:\n                        if value == optgroup_key:\n                            return\n                elif value == option_key:\n                    return\n            raise exceptions.ValidationError(\n                self.error_messages[\"invalid_choice\"],\n                code=\"invalid_choice\",\n                params={\"value\": value},\n            )\n\n        if value is None and not self.null:\n            raise exceptions.ValidationError(self.error_messages[\"null\"], code=\"null\")\n\n        if not self.blank and value in self.empty_values:\n            raise exceptions.ValidationError(self.error_messages[\"blank\"], code=\"blank\")\n\n    def clean(self, value, model_instance):\n        \"\"\"\n        Convert the value's type and run validation. Validation errors\n        from to_python() and validate() are propagated. Return the correct\n        value if no error is raised.\n        \"\"\"\n        value = self.to_python(value)\n        self.validate(value, model_instance)\n        self.run_validators(value)\n        return value\n\n    def db_type_parameters(self, connection):\n        return DictWrapper(self.__dict__, connection.ops.quote_name, \"qn_\")\n\n    def db_check(self, connection):\n        \"\"\"\n        Return the database column check constraint for this field, for the\n        provided connection. Works the same way as db_type() for the case that\n        get_internal_type() does not map to a preexisting model field.\n        \"\"\"\n        data = self.db_type_parameters(connection)\n        try:\n            return (\n                connection.data_type_check_constraints[self.get_internal_type()] % data\n            )\n        except KeyError:\n            return None",
                "filename": "django/db/models/fields/__init__.py",
                "start_index": 27975,
                "end_index": 30307,
                "start_line": 785,
                "end_line": 2733,
                "max_line": 2869,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 0.7
            },
            {
                "code": "class ValidationError(Exception):",
                "filename": "django/core/exceptions.py",
                "start_index": 2394,
                "end_index": 2427,
                "start_line": 133,
                "end_line": 133,
                "max_line": 254,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "slug_re = _lazy_re_compile(r\"^[-a-zA-Z0-9_]+\\Z\")\nvalidate_slug = RegexValidator(\n    slug_re,\n    # Translators: \"letters\" means latin letters: a-z and A-Z.\n    _(\"Enter a valid \u201cslug\u201d consisting of letters, numbers, underscores or hyphens.\"),\n    \"invalid\",\n)\n\nslug_unicode_re = _lazy_re_compile(r\"^[-\\w]+\\Z\")\nvalidate_unicode_slug = RegexValidator(\n    slug_unicode_re,\n    _(\n        \"Enter a valid \u201cslug\u201d consisting of Unicode letters, numbers, underscores, or \"\n        \"hyphens.\"\n    ),\n    \"invalid\",\n)\n\n\ndef validate_ipv4_address(value):\n    try:\n        ipaddress.IPv4Address(value)\n    except ValueError:\n        raise ValidationError(\n            _(\"Enter a valid IPv4 address.\"), code=\"invalid\", params={\"value\": value}\n        )\n\n\ndef validate_ipv6_address(value):\n    if not is_valid_ipv6_address(value):\n        raise ValidationError(\n            _(\"Enter a valid IPv6 address.\"), code=\"invalid\", params={\"value\": value}\n        )\n\n\ndef validate_ipv46_address(value):\n    try:\n        validate_ipv4_address(value)\n    except ValidationError:\n        try:\n            validate_ipv6_address(value)\n        except ValidationError:\n            raise ValidationError(\n                _(\"Enter a valid IPv4 or IPv6 address.\"),\n                code=\"invalid\",\n                params={\"value\": value},\n            )\n\n\nip_address_validator_map = {\n    \"both\": ([validate_ipv46_address], _(\"Enter a valid IPv4 or IPv6 address.\")),\n    \"ipv4\": ([validate_ipv4_address], _(\"Enter a valid IPv4 address.\")),\n    \"ipv6\": ([validate_ipv6_address], _(\"Enter a valid IPv6 address.\")),\n}\n\n\ndef ip_address_validators(protocol, unpack_ipv4):\n    \"\"\"\n    Depending on the given parameters, return the appropriate validators for\n    the GenericIPAddressField.\n    \"\"\"\n    if protocol != \"both\" and unpack_ipv4:\n        raise ValueError(\n            \"You can only use `unpack_ipv4` if `protocol` is set to 'both'\"\n        )\n    try:\n        return ip_address_validator_map[protocol.lower()]\n    except KeyError:\n        raise ValueError(\n            \"The protocol '%s' is unknown. Supported: %s\"\n            % (protocol, list(ip_address_validator_map))\n        )\n\n\ndef int_list_validator(sep=\",\", message=None, code=\"invalid\", allow_negative=False):\n    regexp = _lazy_re_compile(\n        r\"^%(neg)s\\d+(?:%(sep)s%(neg)s\\d+)*\\Z\"\n        % {\n            \"neg\": \"(-)?\" if allow_negative else \"\",\n            \"sep\": re.escape(sep),\n        }\n    )\n    return RegexValidator(regexp, message=message, code=code)\n\n\nvalidate_comma_separated_integer_list = int_list_validator(\n    message=_(\"Enter only digits separated by commas.\"),\n)\n\n\n@deco",
                "filename": "django/core/validators.py",
                "start_index": 9116,
                "end_index": 11741,
                "start_line": 255,
                "end_line": 620,
                "max_line": 642,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "nstructible\nclass FileExtensionValidator:\n    message = _(\n        \"File extension \u201c%(extension)s\u201d is not allowed. \"\n        \"Allowed extensions are: %(allowed_extensions)s.\"\n    )\n    code = \"invalid_extension\"\n\n    def __init__(self, allowed_extensions=None, message=None, code=None):\n        if allowed_extensions is not None:\n            allowed_extensions = [\n                allowed_extension.lower() for allowed_extension in allowed_extensions\n            ]\n        self.allowed_extensions = allowed_extensions\n        if message is not None:\n            self.message = message\n        if code is not None:\n            self.code = code\n\n    def __call__(self, value):\n        extension = Path(value.name).suffix[1:].lower()\n        if (\n            self.allowed_extensions is not None\n            and extension not in self.allowed_extensions\n        ):\n            raise ValidationError(\n                self.message,\n                code=self.code,\n                params={\n                    \"extension\": extension,\n                    \"allowed_extensions\": \", \".join(self.allowed_extensions),\n                    \"value\": value,\n                },\n            )\n\n    def __eq__(self, other):\n        return (\n            isinstance(other, self.__class__)\n            and self.allowed_extensions == other.allowed_extensions\n            and self.message == other.message\n            and self.code == other.code\n        )\n\n\ndef get_available_image_extensions():\n    try:\n        from PIL import Image\n    except ImportError:\n        return []\n    else:\n        Image.init()\n        return [ext.lower()[1:] for ext in Image.EXTENSION]\n\n\ndef validate_image_file_extension(value):\n    return FileExtensionValidator(allowed_extensions=get_available_image_extensions())(\n        value\n    )\n\n\n@deconstructible\nclass ProhibitNullCharactersValidator:\n    \"\"\"Validate that the string doesn't contain the null character.\"\"\"\n\n    message = _(\"Null characters are not allowed.\")\n    code = \"null_characters_not_allowed\"\n\n    def __init__(self, message=None, code=None):\n        if message is not None:\n            self.message = message\n        if code is not None:\n            self.code = code\n\n    def __call__(self, value):\n        if \"\\x00\" in str(value):\n            raise ValidationError(self.message, code=self.code, params={\"value\": value})\n\n    def __eq__(self, other):\n        return (\n            isinstance(other, self.__class__)\n            and self.message == other.message\n            and self.code == other.code\n        )",
                "filename": "django/core/validators.py",
                "start_index": 18971,
                "end_index": 21505,
                "start_line": 8,
                "end_line": 642,
                "max_line": 642,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 0.9
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "django/db/models/constraints.py": [
                {
                    "chunk": {
                        "code": "class BaseConstraint:\n    default_violation_error_message = _(\"Constraint \u201c%(name)s\u201d is violated.\")\n    violation_error_code = None\n    violation_error_message = None\n\n    # RemovedInDjango60Warning: When the deprecation ends, replace with:\n    # def __init__(\n    #     self, *, name, violation_error_code=None, violation_error_message=None\n    # ):\n    def __init__(\n        self, *args, name=None, violation_error_code=None, violation_error_message=None\n    ):\n        # RemovedInDjango60Warning.\n        if name is None and not args:\n            raise TypeError(\n                f\"{self.__class__.__name__}.__init__() missing 1 required keyword-only \"\n                f\"argument: 'name'\"\n            )\n        self.name = name\n        if violation_error_code is not None:\n            self.violation_error_code = violation_error_code\n        if violation_error_message is not None:\n            self.violation_error_message = violation_error_message\n        else:\n            self.violation_error_message = self.default_violation_error_message\n        # RemovedInDjango60Warning.\n        if args:\n            warnings.warn(\n                f\"Passing positional arguments to {self.__class__.__name__} is \"\n                f\"deprecated.\",\n                RemovedInDjango60Warning,\n                stacklevel=2,\n            )\n            for arg, attr in zip(args, [\"name\", \"violation_error_message\"]):\n                if arg:\n                    setattr(self, attr, arg)\n\n    @property\n    def contains_expressions(self):\n        return False\n\n    def constraint_sql(self, model, schema_editor):\n        raise NotImplementedError(\"This method must be implemented by a subclass.\")\n\n    def create_sql(self, model, schema_editor):\n        raise NotImplementedError(\"This method must be implemented by a subclass.\")\n\n    def remove_sql(self, model, schema_editor):\n        raise NotImplementedError(\"This method must be implemented by a subclass.\")\n\n    def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n        raise NotImplementedError(\"This method must be implemented by a subclass.\")\n\n    def get_violation_error_message(self):\n        return self.violation_error_message % {\"name\": self.name}\n\n    def deconstruct(self):\n        path = \"%s.%s\" % (self.__class__.__module__, self.__class__.__name__)\n        path = path.replace(\"django.db.models.constraints\", \"django.db.models\")\n        kwargs = {\"name\": self.name}\n        if (\n            self.violation_error_message is not None\n            and self.violation_error_message != self.default_violation_error_message\n        ):\n            kwargs[\"violation_error_message\"] = self.violation_error_message\n        if self.violation_error_code is not None:\n            kwargs[\"violation_error_code\"] = self.violation_error_code\n        return (path, (), kwargs)\n\n    def clone(self):\n        _, args, kwargs = self.deconstruct()\n        return self.__class__(*args, **kwargs)\n\n\nc",
                        "filename": "django/db/models/constraints.py",
                        "start_index": 670,
                        "end_index": 3624,
                        "start_line": 19,
                        "end_line": 465,
                        "max_line": 466,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__5.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet defines the BaseConstraint class and its __init__ method, which is directly related to the issue of adding a new violation_error_code parameter."
                },
                {
                    "chunk": {
                        "code": "lass CheckConstraint(BaseConstraint):\n    def __init__(\n        self, *, check, name, violation_error_code=None, violation_error_message=None\n    ):\n        self.check = check\n        if not getattr(check, \"conditional\", False):\n            raise TypeError(\n                \"CheckConstraint.check must be a Q instance or boolean expression.\"\n            )\n        super().__init__(\n            name=name,\n            violation_error_code=violation_error_code,\n            violation_error_message=violation_error_message,\n        )\n\n    def _get_check_sql(self, model, schema_editor):\n        query = Query(model=model, alias_cols=False)\n        where = query.build_where(self.check)\n        compiler = query.get_compiler(connection=schema_editor.connection)\n        sql, params = where.as_sql(compiler, schema_editor.connection)\n        return sql % tuple(schema_editor.quote_value(p) for p in params)\n\n    def constraint_sql(self, model, schema_editor):\n        check = self._get_check_sql(model, schema_editor)\n        return schema_editor._check_sql(self.name, check)\n\n    def create_sql(self, model, schema_editor):\n        check = self._get_check_sql(model, schema_editor)\n        return schema_editor._create_check_sql(model, self.name, check)\n\n    def remove_sql(self, model, schema_editor):\n        return schema_editor._delete_check_sql(model, self.name)\n\n    def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n        against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n        try:\n            if not Q(self.check).check(against, using=using):\n                raise ValidationError(\n                    self.get_violation_error_message(), code=self.violation_error_code\n                )\n        except FieldError:\n            pass\n\n    def __repr__(self):\n        return \"<%s: check=%s name=%s%s%s>\" % (\n            self.__class__.__qualname__,\n            self.check,\n            repr(self.name),\n            (\n                \"\"\n                if self.violation_error_code is None\n                else \" violation_error_code=%r\" % self.violation_error_code\n            ),\n            (\n                \"\"\n                if self.violation_error_message is None\n                or self.violation_error_message == self.default_violation_error_message\n                else \" violation_error_message=%r\" % self.violation_error_message\n            ),\n        )\n\n    def __eq__(self, other):\n        if isinstance(other, CheckConstraint):\n            return (\n                self.name == other.name\n                and self.check == other.check\n                and self.violation_error_code == other.violation_error_code\n                and self.violation_error_message == other.violation_error_message\n            )\n        return super().__eq__(other)\n\n    def deconstruct(self):\n        path, args, kwargs = super().deconstruct()\n        kwargs[\"check\"] = self.check\n        return path, args, kwargs\n\n\nc",
                        "filename": "django/db/models/constraints.py",
                        "start_index": 3624,
                        "end_index": 6588,
                        "start_line": 93,
                        "end_line": 465,
                        "max_line": 466,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__5.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet shows the CheckConstraint class, which inherits from BaseConstraint. It demonstrates how the violation_error_code and violation_error_message parameters are used, which is relevant to the issue."
                }
            ]
        },
        "solution_task": "To implement the feature requested in the ticket, you need to modify the `BaseConstraint` class in the `django/db/models/constraints.py` file to allow passing a custom `violation_error_code` when raising a `ValidationError`. Here's how you can do it:\n\n- Modify the `BaseConstraint.validate` method to use `self.violation_error_code` when raising a `ValidationError`.\n- Ensure that `violation_error_code` can be passed as an argument to the `BaseConstraint` constructor and stored as an instance variable.\n- Update any subclasses of `BaseConstraint` that override the `validate` method to ensure they use the new `violation_error_code` attribute.\n\nHere's a code snippet that demonstrates the changes:\n\n```python\n# django/db/models/constraints.py\n\nclass BaseConstraint:\n    # ... (other parts of the class remain unchanged)\n\n    def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n        # The actual validation logic will depend on the subclass implementation.\n        # If a ValidationError is raised, it should now include the custom code.\n        raise NotImplementedError(\"This method must be implemented by a subclass.\")\n\n    # ... (other parts of the class remain unchanged)\n\n# Example subclass that overrides validate\nclass CheckConstraint(BaseConstraint):\n    # ... (other parts of the class remain unchanged)\n\n    def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n        # ... (existing validation logic)\n        if not Q(self.check).check(against, using=using):\n            raise ValidationError(\n                self.get_violation_error_message(),\n                code=self.violation_error_code  # Use the custom error code\n            )\n        # ... (rest of the method)\n```\n\nMake sure to update the documentation and add tests to cover the new functionality. Once the changes are made, you can submit a pull request to the Django project for review.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant suggestions that can directly lead to the successful implementation or improvement of the requested feature.",
            "supporting_evidence": "The RESPONSE provides a clear and detailed explanation of the steps needed to implement the requested feature, including modifying the BaseConstraint class, updating the constructor, and ensuring compatibility with subclasses. It also includes a code snippet demonstrating the proposed changes, which is directly applicable to the feature request. The RESPONSE further advises updating documentation and adding tests, which are essential steps in the development process. The only minor detail missing for a perfect score is the explicit mention of adding the new parameter to the constructor in the code snippet, which is implied but not shown.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711706140.990491,
        "result": "To implement the feature requested in the ticket, you need to modify the `BaseConstraint` class in the `django/db/models/constraints.py` file to allow passing a custom `violation_error_code` when raising a `ValidationError`. Here's how you can do it:\n\n- Modify the `BaseConstraint.validate` method to use `self.violation_error_code` when raising a `ValidationError`.\n- Ensure that `violation_error_code` can be passed as an argument to the `BaseConstraint` constructor and stored as an instance variable.\n- Update any subclasses of `BaseConstraint` that override the `validate` method to ensure they use the new `violation_error_code` attribute.\n\nHere's a code snippet that demonstrates the changes:\n\n```python\n# django/db/models/constraints.py\n\nclass BaseConstraint:\n    # ... (other parts of the class remain unchanged)\n\n    def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n        # The actual validation logic will depend on the subclass implementation.\n        # If a ValidationError is raised, it should now include the custom code.\n        raise NotImplementedError(\"This method must be implemented by a subclass.\")\n\n    # ... (other parts of the class remain unchanged)\n\n# Example subclass that overrides validate\nclass CheckConstraint(BaseConstraint):\n    # ... (other parts of the class remain unchanged)\n\n    def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n        # ... (existing validation logic)\n        if not Q(self.check).check(against, using=using):\n            raise ValidationError(\n                self.get_violation_error_message(),\n                code=self.violation_error_code  # Use the custom error code\n            )\n        # ... (rest of the method)\n```\n\nMake sure to update the documentation and add tests to cover the new functionality. Once the changes are made, you can submit a pull request to the Django project for review.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__5.0/tree//django) \u2192 [db](https://github.com/testbed/django__django__5.0/tree//django/db) \u2192 [models](https://github.com/testbed/django__django__5.0/tree//django/db/models)- [Lines 19 - 465](https://github.com/testbed/django__django__5.0/blob//django/db/models/constraints.py#L19-L465)\n\n This snippet defines the BaseConstraint class and its __init__ method, which is directly related to the issue of adding a new violation_error_code parameter. \n\n\n   - [Lines 93 - 465](https://github.com/testbed/django__django__5.0/blob//django/db/models/constraints.py#L93-L465)\n\n This snippet shows the CheckConstraint class, which inherits from BaseConstraint. It demonstrates how the violation_error_code and violation_error_message parameters are used, which is relevant to the issue.",
        "context_relevance": 0.66,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE is relevant to the entire PROMPT and answers the PROMPT completely.\nSupporting Evidence: The RESPONSE provides a detailed explanation of how to implement the feature requested in the PROMPT, including modifying the `BaseConstraint` class and its `validate` method, as well as updating subclasses and documentation. It also includes a code snippet demonstrating the proposed changes, which directly addresses the issue described in the PROMPT. The RESPONSE concludes with instructions on submitting a pull request, which is the final step in contributing the requested feature. The RESPONSE is fully relevant to the PROMPT and provides a complete answer to the request for adding a new `violation_error_code` parameter to the `BaseConstraint` class in Django."
        },
        "qa_relevance": 1.0
    }
}