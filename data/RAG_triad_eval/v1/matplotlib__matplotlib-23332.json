{
    "id": "matplotlib__matplotlib-23332",
    "repo_name": "testbed/matplotlib__matplotlib__3.5",
    "task_id": 3396654254044157808,
    "title": "Certain non-hashable parameters to text() give cryptic error messages",
    "body": "<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\n**Bug summary**\r\n\r\nPer the title.  See https://discourse.matplotlib.org/t/cryptic-exception-when-axes-parameters-are-not-as-expected/ as well.\r\n\r\n**Code for reproduction**\r\n\r\n<!--A minimum code snippet required to reproduce the bug.\r\nPlease make sure to minimize the number of dependencies required, and provide\r\nany necessary plotted data.\r\nAvoid using threads, as Matplotlib is (explicitly) not thread-safe.-->\r\n\r\n```python\r\nfigtext(.5, .5, \"foo\", rotation=[90])\r\n# or\r\nfigtext(.5, .5, \"foo\", transform_rotates_text=[0])\r\n# or\r\nfigtext(.5, .5, \"foo\", linespacing=[0])\r\n```\r\nall fail with\r\n```\r\nTypeError: unhashable type: 'list'\r\n```\r\n\r\n**Actual outcome**\r\n\r\nsee above\r\n\r\n**Expected outcome**\r\n\r\nError out in the setter instead.\r\n\r\n**Matplotlib version**\r\n<!--Please specify your platform and versions of the relevant libraries you are using:-->\r\n  * Operating system: linux\r\n  * Matplotlib version: (`import matplotlib; print(matplotlib.__version__)`): master\r\n  * Matplotlib backend (`print(matplotlib.get_backend())`): any\r\n  * Python version: 38\r\n  * Jupyter version (if applicable):\r\n  * Other libraries: \r\n\r\n<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->\r\n<!--If you installed from conda, please specify which channel you used if not the default-->\r\n\r\n\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/matplotlib__matplotlib__3.5.git",
    "requested_commit": "",
    "mayil_response": "- Verify that the `figtext` function is not designed to accept lists for the `rotation`, `transform_rotates_text`, and `linespacing` parameters.\n- Ensure that the parameters `rotation`, `transform_rotates_text`, and `linespacing` are expected to be single values (e.g., an integer or a float for `rotation` and `linespacing`, and a boolean for `transform_rotates_text`).\n- Add type checks at the beginning of the `figtext` function to ensure that the parameters `rotation`, `transform_rotates_text`, and `linespacing` are not lists. If a list is passed, raise a `TypeError` with a clear message indicating which parameter is incorrect and what type is expected.\n- Example type check for `rotation`:\n  ```python\n  if isinstance(rotation, list):\n      raise TypeError(\"rotation parameter must be a single value, not a list.\")\n  ```\n- Repeat similar type checks for `transform_rotates_text` and `linespacing`.\n- If the `figtext` function is part of a class that uses setters for these properties, ensure that the setters also perform type checks and raise appropriate errors.\n\n### Code snippets to check\n\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries) \u2192 [users_explain](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries/users_explain) \u2192 [text](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries/users_explain/text)- [Lines 1 - 365](https://github.com/testbed/matplotlib__matplotlib__3.5/blob//galleries/users_explain/text/text_intro.py#L1-L365)\n\n This snippet from 'text_intro.py' provides an overview of text in Matplotlib plots, including the `figtext` function which is directly related to the issue reported.\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//lib/matplotlib)- [Lines 3882 - 4312](https://github.com/testbed/matplotlib__matplotlib__3.5/blob//lib/matplotlib/pyplot.py#L3882-L4312)\n\n This snippet from 'pyplot.py' contains the definition of the `text` function, which is likely where the issue originates and where a fix would be implemented.\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries) \u2192 [users_explain](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries/users_explain) \u2192 [text](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries/users_explain/text)- [Lines 1 - 65](https://github.com/testbed/matplotlib__matplotlib__3.5/blob//galleries/users_explain/text/text_props.py#L1-L65)\n\n The snippet from 'text_props.py' details the text properties and layout, including 'linespacing' which is mentioned in the issue as causing an error.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0008215,
        "snippet_processor": 0.06284000000000001,
        "issue_star_creation": 0.0276,
        "issue_star_solver": 0.07291,
        "bouncer": 0.024620000000000003
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711697908.6037061,
        "relevant_snippets": [
            {
                "code": "name: Bug Report\ndescription: Report a bug or issue with Matplotlib.\ntitle: \"[Bug]: \"\nbody:\n  - type: textarea\n    id: summary\n    attributes:\n      label: Bug summary\n      description:  Describe the bug in 1-2 short sentences\n      placeholder:\n      value:\n    validations:\n      required: true\n  - type: textarea\n    id: reproduction\n    attributes:\n      label: Code for reproduction\n      description: |\n        If possible, please provide a minimum self-contained example.\n      placeholder: Paste your code here. This field is automatically formatted as Python code.\n      render: python\n    validations:\n      required: true\n  - type: textarea\n    id: actual\n    attributes:\n      label: Actual outcome\n      description: |\n        Paste the output produced by the code provided above, e.g.\n        console output, images/videos produced by the code, any relevant screenshots/screencasts, etc.\n    validations:\n      required: true\n  - type: textarea\n    id: expected\n    attributes:\n      label: Expected outcome\n      description: Describe (or provide a visual example of) the expected outcome from the code snippet.\n    validations:\n      required: true\n  - type: textarea\n    id: details\n    attributes:\n      label: Additional information\n      description: |\n        - What are the conditions under which this bug happens? input parameters, edge cases, etc?\n        - Has this worked in earlier versions?\n        - Do you know why this bug is happening?\n        - Do you maybe even know a fix?\n  - type: input\n    id: operating-system\n    attributes:\n      label: Operating system\n      description: Windows, OS/X, Arch, Debian, Ubuntu, etc.\n  - type: input\n    id: matplotlib-version\n    attributes:\n      label: Matplotlib Version\n      description: \"From Python prompt: `import matplotlib; print(matplotlib.__version__)`\"\n    validations:\n      required: true\n  - type: input\n    id: matplotlib-backend\n    attributes:\n      label: Matplotlib Backend\n      description: \"From Python prompt: `import matplotlib; print(matplotlib.get_backend())`\"\n  - type: input\n    id: python-version\n    attributes:\n      label: Python version\n      description: \"In console: `python --version`\"\n  - type: input\n    id: jupyter-version\n    attributes:\n      label: Jupyter version\n      description: \"In console: `jupyter notebook --version` or `jupyter lab --version`\"\n  - type: dropdown\n    id: install\n    attributes:\n      label: Installation\n      description: How did you install matplotlib?\n      options:\n        - pip\n        - conda\n        - Linux package manager\n        - from source (.tar.gz)\n        - git checkout",
                "filename": ".github/ISSUE_TEMPLATE/bug_report.yml",
                "start_index": 0,
                "end_index": 2631,
                "start_line": 1,
                "end_line": 86,
                "max_line": 86,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"\n=====================\nFixing too many ticks\n=====================\n\nOne common cause for unexpected tick behavior is passing a list of strings\ninstead of numbers or datetime objects. This can easily happen without notice\nwhen reading in a comma-delimited text file. Matplotlib treats lists of strings\nas *categorical* variables\n(:doc:`/gallery/lines_bars_and_markers/categorical_variables`), and by default\nputs one tick per category, and plots them in the order in which they are\nsupplied.  If this is not desired, the solution is to convert the strings to\na numeric type as in the following examples.\n\n\"\"\"\n\n# %%\n# Example 1: Strings can lead to an unexpected order of number ticks\n# ------------------------------------------------------------------\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(1, 2, layout='constrained', figsize=(6, 2.5))\nx = ['1', '5', '2', '3']\ny = [1, 4, 2, 3]\nax[0].plot(x, y, 'd')\nax[0].tick_params(axis='x', color='r', labelcolor='r')\nax[0].set_xlabel('Categories')\nax[0].set_title('Ticks seem out of order / misplaced')\n\n# convert to numbers:\nx = np.asarray(x, dtype='float')\nax[1].plot(x, y, 'd')\nax[1].set_xlabel('Floats')\nax[1].set_title('Ticks as expected')\n\n# %%\n# Example 2: Strings can lead to very many ticks\n# ----------------------------------------------\n# If *x* has 100 elements, all strings, then we would have 100 (unreadable)\n# ticks, and again the solution is to convert the strings to floats:\n\nfig, ax = plt.subplots(1, 2, figsize=(6, 2.5))\nx = [f'{xx}' for xx in np.arange(100)]\ny = np.arange(100)\nax[0].plot(x, y)\nax[0].tick_params(axis='x', color='r', labelcolor='r')\nax[0].set_title('Too many ticks')\nax[0].set_xlabel('Categories')\n\nax[1].plot(np.asarray(x, float), y)\nax[1].set_title('x converted to numbers')\nax[1].set_xlabel('Floats')\n\n# %%\n# Example 3: Strings can lead to an unexpected order of datetime ticks\n# --------------------------------------------------------------------\n# A common case is when dates are read from a CSV file, they need to be\n# converted from strings to datetime objects to get the proper date locators\n# and formatters.\n\nfig, ax = plt.subplots(1, 2, layout='constrained', figsize=(6, 2.75))\nx = ['2021-10-01', '2021-11-02', '2021-12-03', '2021-09-01']\ny = [0, 2, 3, 1]\nax[0].plot(x, y, 'd')\nax[0].tick_params(axis='x', labelrotation=90, color='r', labelcolor='r')\nax[0].set_title('Dates out of order')\n\n# convert to datetime64\nx = np.asarray(x, dtype='datetime64[s]')\nax[1].plot(x, y, 'd')\nax[1].tick_params(axis='x', labelrotation=90)\nax[1].set_title('x converted to datetimes')\n\nplt.show()",
                "filename": "galleries/examples/ticks/ticks_too_many.py",
                "start_index": 0,
                "end_index": 2608,
                "start_line": 1,
                "end_line": 76,
                "max_line": 76,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"\n==================\nStyling text boxes\n==================\n\nThis example shows how to style text boxes using *bbox* parameters.\n\"\"\"\nimport matplotlib.pyplot as plt\n\nplt.text(0.6, 0.7, \"eggs\", size=50, rotation=30.,\n         ha=\"center\", va=\"center\",\n         bbox=dict(boxstyle=\"round\",\n                   ec=(1., 0.5, 0.5),\n                   fc=(1., 0.8, 0.8),\n                   )\n         )\n\nplt.text(0.55, 0.6, \"spam\", size=50, rotation=-25.,\n         ha=\"right\", va=\"top\",\n         bbox=dict(boxstyle=\"square\",\n                   ec=(1., 0.5, 0.5),\n                   fc=(1., 0.8, 0.8),\n                   )\n         )\n\nplt.show()",
                "filename": "galleries/examples/text_labels_and_annotations/fancytextbox_demo.py",
                "start_index": 0,
                "end_index": 638,
                "start_line": 1,
                "end_line": 26,
                "max_line": 26,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "r\"\"\"\n.. redirect-from:: /tutorials/text/usetex\n\n.. _usetex:\n\n*************************\nText rendering with LaTeX\n*************************\n\nMatplotlib can use LaTeX to render text.  This is activated by setting\n``text.usetex : True`` in your rcParams, or by setting the ``usetex`` property\nto True on individual `.Text` objects.  Text handling through LaTeX is slower\nthan Matplotlib's very capable :ref:`mathtext <mathtext>`, but\nis more flexible, since different LaTeX packages (font packages, math packages,\netc.) can be used. The results can be striking, especially when you take care\nto use the same fonts in your figures as in the main document.\n\nMatplotlib's LaTeX support requires a working LaTeX_ installation.  For\nthe \\*Agg backends, dvipng_ is additionally required; for the PS backend,\nPSfrag_, dvips_ and Ghostscript_ are additionally required.  For the PDF\nand SVG backends, if LuaTeX is present, it will be used to speed up some\npost-processing steps, but note that it is not used to parse the TeX string\nitself (only LaTeX is supported).  The executables for these external\ndependencies must all be located on your :envvar:`PATH`.\n\nOnly a small number of font families (defined by the PSNFSS_ scheme) are\nsupported.  They are listed here, with the corresponding LaTeX font selection\ncommands and LaTeX packages, which are automatically used.\n\n=========================== =================================================\ngeneric family              fonts\n=========================== =================================================\nserif (``\\rmfamily``)       Computer Modern Roman, Palatino (``mathpazo``),\n                            Times (``mathptmx``),  Bookman (``bookman``),\n                            New Century Schoolbook (``newcent``),\n                            Charter (``charter``)\n\nsans-serif (``\\sffamily``)  Computer Modern Serif, Helvetica (``helvet``),\n                            Avant Garde (``avant``)\n\ncursive (``\\rmfamily``)     Zapf Chancery (``chancery``)\n\nmonospace (``\\ttfamily``)   Computer Modern Typewriter, Courier (``courier``)\n=========================== =================================================\n\nThe default font family (which does not require loading any LaTeX package) is\nComputer Modern.  All other families are Adobe fonts.  Times and Palatino each\nhave their own accompanying math fonts, while the other Adobe serif fonts make\nuse of the Computer Modern math fonts.\n\nTo enable LaTeX and select a font, use e.g.::\n\n    plt.rcParams.update({\n        \"text.usetex\": True,\n        \"font.family\": \"Helvetica\"\n    })\n\nor equivalently, set your :ref:`matplotlibrc <customizing>` to::\n\n    text.usetex : true\n    font.family : Helvetica\n\nIt is also possible to instead set ``font.family`` to one of the generic family\nnames and then configure the corresponding generic family; e.g.::\n\n    plt.rcParams.update({\n        \"text.usetex\": True,\n        \"font.family\": \"sans-serif\",\n        \"font.sans-serif\": \"Helvetica\",\n    })\n\n(this was the required approach until Matplotlib 3.5).\n\nHere is the standard example,\n:doc:`/gallery/text_labels_and_annotations/tex_demo`:\n\n.. figure:: /gallery/text_labels_and_annotations/images/sphx_glr_tex_demo_001.png\n   :target: /gallery/text_labels_and_annotations/tex_demo.html\n   :align: center\n\nNote that display math mode (``$$ e=mc^2 $$``) is not supported, but adding the\ncommand ``\\displaystyle``, as in the above demo, will produce the same results.\n\nNon-ASCII characters (e.g. the degree sign in the y-label above) are supported\nto the extent that they are supported by inputenc_.\n\n.. note::\n   For consistency with the non-usetex case, Matplotlib special-cases newlines,\n   so that single-newlines yield linebreaks (rather than being interpreted as\n   whitespace in standard LaTeX).\n\n   Matplotlib uses the underscore_ package so that underscores (``_``) are\n   printed \"as-is\" in text mode (rather than causing an error as in standard\n   LaTeX).  Underscores still introduce subscripts in math mode.\n\n.. note::\n   Certain characters require special escaping in TeX, such as::\n\n     # $ % & ~ ^ \\ { } \\( \\) \\[ \\]\n\n   Therefore, these characters will behave differently depending on\n   :rc:`text.usetex`.  As noted above, underscores (``_``) do not require\n   escaping outside of math mode.\n\nPostScript options\n==================\n\nIn order to produce encapsulated PostScript (EPS) files that can be embedded\nin a new LaTeX document, the default behavior of Matplotlib is to distill the\noutput, which removes some PostScript operators used by LaTeX that are illegal\nin an EPS file. This step produces results which may be unacceptable to some\nusers, because the text is coarsely rasterized and converted to bitmaps, which\nare not scalable like standard PostScript, and the text is not searchable. One\nworkaround is to set :rc:`ps.distiller.res` to a higher value (perhaps 6000)\nin your rc settings, which will produce larger files but may look better and\nscale reasonably. A better workaround, which requires Poppler_ or Xpdf_, can\nbe activated by changing :rc:`ps.usedistiller` to ``xpdf``. This alternative\nproduces PostScript without rasterizing text, so it scales properly, can be\nedited in Adobe Illustrator, and searched text in pdf documents.\n\n.. _usetex-hangups:\n\nPossible hangups\n================\n\n* On Windows, the :envvar:`PATH` environment variable may need to be modified\n  to include the directories containing the latex, dvipng and ghostscript\n  executables. See :ref:`environment-variables` and\n  :ref:`setting-windows-environment-variables` for details.\n\n* Using MiKTeX with Computer Modern fonts, if you get odd \\*Agg and PNG\n  results, go to MiKTeX/Options and update your format files\n\n* On Ubuntu and Gentoo, the base texlive install does not ship with\n  the type1cm package. You may need to install some of the extra\n  packages to get all the goodies that come bundled with other LaTeX\n  distributions.\n\n* Some progress has been made so Matplotlib uses the dvi files\n  directly for text layout. This allows LaTeX to be used for text\n  layout with the pdf and svg backends, as well as the \\*Agg and PS\n  backends. In the future, a LaTeX installation may be the only\n  external dependency.\n\n.. _usetex-troubleshooting:\n\nTroubleshooting\n===============\n\n* Try deleting your :file:`.matplotlib/tex.cache` directory. If you don't know\n  where to find :file:`.matplotlib`, see :ref:`locating-matplotlib-config-dir`.\n\n* Make sure LaTeX, dvipng and ghostscript are each working and on your\n  :envvar:`PATH`.\n\n* Make sure what you are trying to do is possible in a LaTeX document,\n  that your LaTeX syntax is valid and that you are using raw strings\n  if necessary to avoid unintended escape sequences.\n\n* :rc:`text.latex.preamble` is not officially supported. This\n  option provides lots of flexibility, and lots of ways to cause\n  problems. Please disable this option before reporting problems to\n  the mailing list.\n\n* If you still need help, please see :ref:`reporting-problems`.\n\n.. _dvipng: http://www.nongnu.org/dvipng/\n.. _dvips: https://tug.org/texinfohtml/dvips.html\n.. _Ghostscript: https://ghostscript.com/\n.. _inputenc: https://ctan.org/pkg/inputenc\n.. _LaTeX: http://www.tug.org\n.. _Poppler: https://poppler.freedesktop.org/\n.. _PSNFSS: http://www.ctan.org/tex-archive/macros/latex/required/psnfss/psnfss2e.pdf\n.. _PSfrag: https://ctan.org/pkg/psfrag\n.. _underscore: https://ctan.org/pkg/underscore\n.. _Xpdf: http://www.xpdfreader.com/\n\"\"\"",
                "filename": "galleries/users_explain/text/usetex.py",
                "start_index": 0,
                "end_index": 7467,
                "start_line": 1,
                "end_line": 177,
                "max_line": 177,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.1
            },
            {
                "code": "\"\"\"\n\n.. redirect-from:: /tutorials/text/text_intro\n\n.. _text_intro:\n\n========================\nText in Matplotlib Plots\n========================\n\nIntroduction to plotting and working with text in Matplotlib.\n\nMatplotlib has extensive text support, including support for\nmathematical expressions, truetype support for raster and\nvector outputs, newline separated text with arbitrary\nrotations, and Unicode support.\n\nBecause it embeds fonts directly in output documents, e.g., for postscript\nor PDF, what you see on the screen is what you get in the hardcopy.\n`FreeType <https://www.freetype.org/>`_ support\nproduces very nice, antialiased fonts, that look good even at small\nraster sizes.  Matplotlib includes its own\n:mod:`matplotlib.font_manager` (thanks to Paul Barrett), which\nimplements a cross platform, `W3C <https://www.w3.org/>`_\ncompliant font finding algorithm.\n\nThe user has a great deal of control over text properties (font size, font\nweight, text location and color, etc.) with sensible defaults set in\nthe :ref:`rc file <customizing>`.\nAnd significantly, for those interested in mathematical\nor scientific figures, Matplotlib implements a large number of TeX\nmath symbols and commands, supporting :ref:`mathematical expressions\n<mathtext>` anywhere in your figure.\n\n\nBasic text commands\n===================\n\nThe following commands are used to create text in the implicit and explicit\ninterfaces (see :ref:`api_interfaces` for an explanation of the tradeoffs):\n\n=================== =================== ======================================\nimplicit API        explicit API        description\n=================== =================== ======================================\n`~.pyplot.text`     `~.Axes.text`       Add text at an arbitrary location of\n                                        the `~matplotlib.axes.Axes`.\n\n`~.pyplot.annotate` `~.Axes.annotate`   Add an annotation, with an optional\n                                        arrow, at an arbitrary location of the\n                                        `~matplotlib.axes.Axes`.\n\n`~.pyplot.xlabel`   `~.Axes.set_xlabel` Add a label to the\n                                        `~matplotlib.axes.Axes`\\\\'s x-axis.\n\n`~.pyplot.ylabel`   `~.Axes.set_ylabel` Add a label to the\n                                        `~matplotlib.axes.Axes`\\\\'s y-axis.\n\n`~.pyplot.title`    `~.Axes.set_title`  Add a title to the\n                                        `~matplotlib.axes.Axes`.\n\n`~.pyplot.figtext`  `~.Figure.text`     Add text at an arbitrary location of\n                                        the `.Figure`.\n\n`~.pyplot.suptitle` `~.Figure.suptitle` Add a title to the `.Figure`.\n=================== =================== ======================================\n\nAll of these functions create and return a `.Text` instance, which can be\nconfigured with a variety of font and other properties.  The example below\nshows all of these commands in action, and more detail is provided in the\nsections that follow.\n\n\"\"\"",
                "filename": "galleries/users_explain/text/text_intro.py",
                "start_index": 0,
                "end_index": 2982,
                "start_line": 1,
                "end_line": 365,
                "max_line": 429,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "# \\*\\*kwargs           any key for :class:`matplotlib.patches.Polygon`,\n#                      e.g., ``facecolor``\n# ==================== =====================================================\n#\n# In the example below, the *xy* point is in the data coordinate system\n# since *xycoords* defaults to 'data'. For a polar axes, this is in\n# (theta, radius) space. The text in this example is placed in the\n# fractional figure coordinate system. :class:`matplotlib.text.Text`\n# keyword arguments like *horizontalalignment*, *verticalalignment* and\n# *fontsize* are passed from `~matplotlib.axes.Axes.annotate` to the\n# ``Text`` instance.\n\nfig = plt.figure()\nax = fig.add_subplot(projection='polar')\nr = np.arange(0, 1, 0.001)\ntheta = 2 * 2*np.pi * r\nline, = ax.plot(theta, r, color='#ee8d18', lw=3)\n\nind = 800\nthisr, thistheta = r[ind], theta[ind]\nax.plot([thistheta], [thisr], 'o')\nax.annotate('a polar annotation',\n            xy=(thistheta, thisr),  # theta, radius\n            xytext=(0.05, 0.05),    # fraction, fraction\n            textcoords='figure fraction',\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            horizontalalignment='left',\n            verticalalignment='bottom')\n\n# %%\n# For more on plotting with arrows, see :ref:`annotation_with_custom_arrow`\n#\n# .. _annotations-offset-text:\n#\n# Placing text annotations relative to data\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n#\n# Annotations can be positioned at a relative offset to the *xy* input to\n# annotation by setting the *textcoords* keyword argument to ``'offset points'``\n# or ``'offset pixels'``.\n\nfig, ax = plt.subplots(figsize=(3, 3))\nx = [1, 3, 5, 7, 9]\ny = [2, 4, 6, 8, 10]\nannotations = [\"A\", \"B\", \"C\", \"D\", \"E\"]\nax.scatter(x, y, s=20)\n\nfor xi, yi, text in zip(x, y, annotations):\n    ax.annotate(text,\n                xy=(xi, yi), xycoords='data',\n                xytext=(1.5, 1.5), textcoords='offset points')\n\n# %%\n# The annotations are offset 1.5 points (1.5*1/72 inches) from the *xy* values.\n#\n# .. _plotting-guide-annotation:\n#\n# Advanced annotation\n# -------------------\n#\n# We recommend reading :ref:`annotations-tutorial`, :func:`~matplotlib.pyplot.text`\n# and :func:`~matplotlib.pyplot.annotate` before reading this section.\n#\n# Annotating with boxed text\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^\n#\n# `~.Axes.text` takes a *bbox* keyword argument, which draws a box around the\n# text:\n\nfig, ax = plt.subplots(figsize=(5, 5))\nt = ax.text(0.5, 0.5, \"Direction\",\n            ha=\"center\", va=\"center\", rotation=45, size=15,\n            bbox=dict(boxstyle=\"rarrow,pad=0.3\",\n                      fc=\"lightblue\", ec=\"steelblue\", lw=2))\n\n# %%\n# The arguments are the name of the box style with its attributes as\n# keyword arguments. Currently, following box styles are implemented:\n#\n# ==========   ==============   ==========================\n# Class        Name             Attrs\n# ==========   ==============   ==========================\n# Circle       ``circle``       pad=0.3",
                "filename": "galleries/users_explain/text/annotations.py",
                "start_index": 5971,
                "end_index": 8941,
                "start_line": 151,
                "end_line": 233,
                "max_line": 748,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"\n\n.. redirect-from:: /tutorials/text/text_props\n\n.. _text_props:\n\n============================\n Text properties and layout\n============================\n\nControlling properties of text and its layout with Matplotlib.\n\n`matplotlib.text.Text` instances have a variety of properties which can be\nconfigured via keyword arguments to `~.Axes.set_title`, `~.Axes.set_xlabel`,\n`~.Axes.text`, etc.\n\n==========================  ======================================================================================================================\nProperty                    Value Type\n==========================  ======================================================================================================================\nalpha                       `float`\nbackgroundcolor             any matplotlib :ref:`color <colors_def>`\nbbox                        `~matplotlib.patches.Rectangle` prop dict plus key ``'pad'`` which is a pad in points\nclip_box                    a matplotlib.transform.Bbox instance\nclip_on                     bool\nclip_path                   a `~matplotlib.path.Path` instance and a `~matplotlib.transforms.Transform` instance, a `~matplotlib.patches.Patch`\ncolor                       any matplotlib :ref:`color <colors_def>`\nfamily                      [ ``'serif'`` | ``'sans-serif'`` | ``'cursive'`` | ``'fantasy'`` | ``'monospace'`` ]\nfontproperties              `~matplotlib.font_manager.FontProperties`\nhorizontalalignment or ha   [ ``'center'`` | ``'right'`` | ``'left'`` ]\nlabel                       any string\nlinespacing                 `float`\nmultialignment              [``'left'`` | ``'right'`` | ``'center'`` ]\nname or fontname            string e.g., [``'Sans'`` | ``'Courier'`` | ``'Helvetica'`` ...]\npicker                      [None|float|bool|callable]\nposition                    (x, y)\nrotation                    [ angle in degrees | ``'vertical'`` | ``'horizontal'`` ]\nsize or fontsize            [ size in points | relative size, e.g., ``'smaller'``, ``'x-large'`` ]\nstyle or fontstyle          [ ``'normal'`` | ``'italic'`` | ``'oblique'`` ]\ntext                        string or anything printable with '%s' conversion\ntransform                   `~matplotlib.transforms.Transform` subclass\nvariant                     [ ``'normal'`` | ``'small-caps'`` ]\nverticalalignment or va     [ ``'center'`` | ``'top'`` | ``'bottom'`` | ``'baseline'`` ]\nvisible                     bool\nweight or fontweight        [ ``'normal'`` | ``'bold'`` | ``'heavy'`` | ``'light'`` | ``'ultrabold'`` | ``'ultralight'``]\nx                           `float`\ny                           `float`\nzorder                      any number\n==========================  ======================================================================================================================\n\n\nYou can lay out text with the alignment arguments\n``horizontalalignment``, ``verticalalignment``, and\n``multialignment``.  ``horizontalalignment`` controls whether the x\npositional argument for the text indicates the left, center or right\nside of the text bounding box. ``verticalalignment`` controls whether\nthe y positional argument for the text indicates the bottom, center or\ntop side of the text bounding box.  ``multialignment``, for newline\nseparated strings only, controls whether the different lines are left,\ncenter or right justified.  Here is an example which uses the\n:func:`~matplotlib.pyplot.text` command to show the various alignment\npossibilities.  The use of ``transform=ax.transAxes`` throughout the\ncode indicates that the coordinates are given relative to the axes\nbounding box, with (0, 0) being the lower left of the axes and (1, 1) the\nupper right.\n\"\"\"",
                "filename": "galleries/users_explain/text/text_props.py",
                "start_index": 0,
                "end_index": 3694,
                "start_line": 1,
                "end_line": 65,
                "max_line": 272,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "@_copy_docstring_and_deprecators(Axes.text)\ndef text(\n    x: float, y: float, s: str, fontdict: dict[str, Any] | None = None, **kwargs\n) -> Text:\n    return gca().text(x, y, s, fontdict=fontdict, **kwargs)\n\n\n# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n@_copy_docstring_and_deprecators(Axes.tick_params)\ndef tick_params(axis: Literal[\"both\", \"x\", \"y\"] = \"both\", **kwargs) -> None:\n    gca().tick_params(axis=axis, **kwargs)\n\n\n# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n@_copy_docstring_and_deprecators(Axes.ticklabel_format)\ndef ticklabel_format(\n    *,\n    axis: Literal[\"both\", \"x\", \"y\"] = \"both\",\n    style: Literal[\"\", \"sci\", \"scientific\", \"plain\"] = \"\",\n    scilimits: tuple[int, int] | None = None,\n    useOffset: bool | float | None = None,\n    useLocale: bool | None = None,\n    useMathText: bool | None = None,\n) -> None:\n    gca().ticklabel_format(\n        axis=axis,\n        style=style,\n        scilimits=scilimits,\n        useOffset=useOffset,\n        useLocale=useLocale,\n        useMathText=useMathText,\n    )\n\n\n# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n@_copy_docstring_and_deprecators(Axes.tricontour)\ndef tricontour(*args, **kwargs):\n    __ret = gca().tricontour(*args, **kwargs)\n    if __ret._A is not None:  # type: ignore[attr-defined]\n        sci(__ret)\n    return __ret\n\n\n# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n@_copy_docstring_and_deprecators(Axes.tricontourf)\ndef tricontourf(*args, **kwargs):\n    __ret = gca().tricontourf(*args, **kwargs)\n    if __ret._A is not None:  # type: ignore[attr-defined]\n        sci(__ret)\n    return __ret\n\n\n# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n@_copy_docstring_and_deprecators(Axes.tripcolor)\ndef tripcolor(\n    *args,\n    alpha=1.0,\n    norm=None,\n    cmap=None,\n    vmin=None,\n    vmax=None,\n    shading=\"flat\",\n    facecolors=None,\n    **kwargs,\n):\n    __ret = gca().tripcolor(\n        *args,\n        alpha=alpha,\n        norm=norm,\n        cmap=cmap,\n        vmin=vmin,\n        vmax=vmax,\n        shading=shading,\n        facecolors=facecolors,\n        **kwargs,\n    )\n    sci(__ret)\n    return __ret\n\n\n# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n@_copy_docstring_and_deprecators(Axes.triplot)\ndef triplot(*args, **kwargs):\n    return gca().triplot(*args, **kwargs)\n\n\n# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.",
                "filename": "lib/matplotlib/pyplot.py",
                "start_index": 124288,
                "end_index": 126776,
                "start_line": 3882,
                "end_line": 4312,
                "max_line": 4320,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.7
            },
            {
                "code": "r\"\"\"\n\n.. redirect-from:: /tutorials/text/mathtext\n\n.. _mathtext:\n\nWriting mathematical expressions\n================================\n\nYou can use a subset of TeX markup in any Matplotlib text string by placing it\ninside a pair of dollar signs ($).\n\nNote that you do not need to have TeX installed, since Matplotlib ships\nits own TeX expression parser, layout engine, and fonts.  The layout engine\nis a fairly direct adaptation of the layout algorithms in Donald Knuth's\nTeX, so the quality is quite good (Matplotlib also provides a ``usetex``\noption for those who do want to call out to TeX to generate their text; see\n:ref:`usetex`).\n\nAny text element can use math text.  You should use raw strings (precede the\nquotes with an ``'r'``), and surround the math text with dollar signs ($), as\nin TeX. Regular text and mathtext can be interleaved within the same string.\nMathtext can use DejaVu Sans (default), DejaVu Serif, the Computer Modern fonts\n(from (La)TeX), `STIX <http://www.stixfonts.org/>`_ fonts (which are designed\nto blend well with Times), or a Unicode font that you provide.  The mathtext\nfont can be selected via :rc:`mathtext.fontset` (see\n:ref:`customizing`)\n\nHere is a simple example::\n\n    # plain text\n    plt.title('alpha > beta')\n\nproduces \"alpha > beta\".\n\nWhereas this::\n\n    # math text\n    plt.title(r'$\\alpha > \\beta$')\n\nproduces \":mathmpl:`\\alpha > \\beta`\".\n\n.. note::\n   Mathtext should be placed between a pair of dollar signs ($). To make it\n   easy to display monetary values, e.g., \"$100.00\", if a single dollar sign\n   is present in the entire string, it will be displayed verbatim as a dollar\n   sign.  This is a small change from regular TeX, where the dollar sign in\n   non-math text would have to be escaped ('\\\\\\$').\n\n.. note::\n   While the syntax inside the pair of dollar signs ($) aims to be TeX-like,\n   the text outside does not.  In particular, characters such as::\n\n     # $ % & ~ _ ^ \\ { } \\( \\) \\[ \\]\n\n   have special meaning outside of math mode in TeX.  Therefore, these\n   characters will behave differently depending on :rc:`text.usetex`.  See the\n   :ref:`usetex tutorial <usetex>` for more information.\n\n.. note::\n   To generate html output in documentation that will exactly match the output\n   generated by ``mathtext``, use the `matplotlib.sphinxext.mathmpl` Sphinx\n   extension.\n\nSubscripts and superscripts\n---------------------------\nTo make subscripts and superscripts, use the ``'_'`` and ``'^'`` symbols::\n\n    r'$\\alpha_i > \\beta_i$'\n\n.. math::\n\n    \\alpha_i > \\beta_i\n\nTo display multi-letter subscripts or superscripts correctly,\nyou should put them in curly braces ``{...}``::\n\n    r'$\\alpha^{ic} > \\beta_{ic}$'\n\n.. math::\n\n    \\alpha^{ic} > \\beta_{ic}\n\nSome symbols automatically put their sub/superscripts under and over the\noperator.  For example, to write the sum of :mathmpl:`x_i` from :mathmpl:`0` to\n:mathmpl:`\\infty`, you could do::\n\n    r'$\\sum_{i=0}^\\infty x_i$'\n\n.. math::\n\n    \\sum_{i=0}^\\infty x_i\n\nFractions, binomials, and stacked numbers\n-----------------------------------------\nFractions, binomials, and stacked numbers can be created with the\n``\\frac{}{}``, ``\\binom{}{}`` and ``\\genfrac{}{}{}{}{}{}`` commands,\nrespectively::\n\n    r'$\\frac{3}{4} \\binom{3}{4} \\genfrac{}{}{0}{}{3}{4}$'\n\nproduces\n\n.. math::\n\n    \\frac{3}{4} \\binom{3}{4} \\genfrac{}{}{0pt}{}{3}{4}\n\nFractions can be arbitrarily nested::\n\n    r'$\\frac{5 - \\frac{1}{x}}{4}$'\n\nproduces\n\n.. math::\n\n    \\frac{5 - \\frac{1}{x}}{4}\n\nNote that special care needs to be taken to place parentheses and brackets\naround fractions.  Doing things the obvious way produces brackets that are too\nsmall::\n\n    r'$(\\frac{5 - \\frac{1}{x}}{4})$'\n\n.. math::\n\n    (\\frac{5 - \\frac{1}{x}}{4})\n\nThe solution is to precede the bracket with ``\\left`` and ``\\right`` to inform\nthe parser that those brackets encompass the entire object.::\n\n    r'$\\left(\\frac{5 - \\frac{1}{x}}{4}\\right)$'\n\n.. math::\n\n    \\left(\\frac{5 - \\frac{1}{x}}{4}\\right)\n\nRadicals\n--------\nRadicals can be produced with the ``\\sqrt[]{}`` command.  For example::\n\n    r'$\\sqrt{2}$'\n\n.. math::\n\n    \\sqrt{2}\n\nAny base can (optionally) be provided inside square brackets.  Note that the\nbase must be a simple expression, and cannot contain layout commands such as\nfractions or sub/superscripts::\n\n    r'$\\sqrt[3]{x}$'\n\n.. math::\n\n    \\sqrt[3]{x}\n\n.. _mathtext-fonts:\n\nFonts\n-----\nThe default font is *italics* for mathematical symbols.\n\n.. note::\n\n   This default can be changed using :rc:`mathtext.default`.  This is\n   useful, for example, to use the same font as regular non-math text for math\n   text, by setting it to ``regular``.\n\nTo change fonts, e.g., to write \"sin\" in a Roman font, enclose the text in a\nfont command::\n\n    r'$s(t) = \\mathcal{A}\\mathrm{sin}(2 \\omega t)$'\n\n.. math::\n\n    s(t) = \\mathcal{A}\\mathrm{sin}(2 \\omega t)\n\nMore conveniently, many commonly used function names that are typeset in\na Roman font have shortcuts.  So the expression above could be written as\nfollows::\n\n    r'$s(t) = \\mathcal{A}\\sin(2 \\omega t)$'\n\n.. math::\n\n    s(t) = \\mathcal{A}\\sin(2 \\omega t)\n\nHere \"s\" and \"t\" are variable in italics font (default), \"sin\" is in Roman\nfont, and the amplitude \"A\" is in calligraphy font.  Note in the example above\nthe calligraphy ``A`` is squished into the ``sin``.  You can use a spacing\ncommand to add a little whitespace between them::\n\n    r's(t) = \\mathcal{A}\\/\\sin(2 \\omega t)'\n\n.. Here we cheat a bit: for HTML math rendering, Sphinx relies on MathJax which\n   doesn't actually support the italic correction (\\/); instead, use a thin\n   space (\\,) which is supported.\n\n.. math::\n\n    s(t) = \\mathcal{A}\\,\\sin(2 \\omega t)\n\nThe choices available with all fonts are:\n\n========================= ================================\nCommand                   Result\n========================= ================================\n``\\mathrm{Roman}``        :mathmpl:`\\mathrm{Roman}`\n``\\mathit{Italic}``       :mathmpl:`\\mathit{Italic}`\n``\\mathtt{Typewriter}``   :mathmpl:`\\mathtt{Typewriter}`\n``\\mathcal{CALLIGRAPHY}`` :mathmpl:`\\mathcal{CALLIGRAPHY}`\n========================= ================================\n\n.. role:: math-stix(mathmpl)\n   :fontset: stix\n\nWhen using the `STIX <http://www.stixfonts.org/>`_ fonts, you also have the\nchoice of:\n\n================================ =========================================\nCommand                          Result\n================================ =========================================\n``\\mathbb{blackboard}``          :math-stix:`\\mathbb{blackboard}`\n``\\mathrm{\\mathbb{blackboard}}`` :math-stix:`\\mathrm{\\mathbb{blackboard}}`\n``\\mathfrak{Fraktur}``           :math-stix:`\\mathfrak{Fraktur}`\n``\\mathsf{sansserif}``           :math-stix:`\\mathsf{sansserif}`\n``\\mathrm{\\mathsf{sansserif}}``  :math-stix:`\\mathrm{\\mathsf{sansserif}}`\n``\\mathbfit{bolditalic}``        :math-stix:`\\mathbfit{bolditalic}`\n================================ =========================================\n\nThere are also five global \"font sets\" to choose from, which are\nselected using the ``mathtext.fontset`` parameter in :ref:`matplotlibrc\n<matplotlibrc-sample>`.\n\n``dejavusans``: DejaVu Sans\n    .. mathmpl::\n       :fontset: dejavusans\n\n       \\mathcal{R} \\prod_{i=\\alpha}^{\\infty} a_i \\sin\\left(2\\pi fx_i\\right)\n\n``dejavuserif``: DejaVu Serif\n    .. mathmpl::\n       :fontset: dejavuserif\n\n       \\mathcal{R} \\prod_{i=\\alpha}^{\\infty} a_i \\sin\\left(2\\pi fx_i\\right)\n\n``cm``: Computer Modern (TeX)\n    .. mathmpl::\n       :fontset: cm\n\n       \\mathcal{R} \\prod_{i=\\alpha}^{\\infty} a_i \\sin\\left(2\\pi fx_i\\right)\n\n``stix``: STIX (designed to blend well with Times)\n    .. mathmpl::\n       :fontset: stix\n\n       \\mathcal{R} \\prod_{i=\\alpha}^{\\infty} a_i \\sin\\left(2\\pi fx_i\\right)\n\n``stixsans``: STIX sans-serif\n    .. mathmpl::\n       :fontset: stixsans\n\n       \\mathcal{R} \\prod_{i=\\alpha}^{\\infty} a_i \\sin\\left(2\\pi fx_i\\right)\n\nAdditionally, you can use ``\\mathdefault{...}`` or its alias\n``\\mathregular{...}`` to use the font used for regular text outside of\nmathtext.  There are a number of limitations to this approach, most notably\nthat far fewer symbols will be available, but it can be useful to make math\nexpressions blend well with other text in the plot.\n\nFor compatibility with popular packages, ``\\text{...}`` is available and uses the\n``\\mathrm{...}`` font, but otherwise retains spaces and renders - as a dash\n(not minus).\n\nCustom fonts\n~~~~~~~~~~~~\nmathtext also provides a way to use custom fonts for math.  This method is\nfairly tricky to use, and should be considered an experimental feature for\npatient users only.  By setting :rc:`mathtext.fontset` to ``custom``,\nyou can then set the following parameters, which control which font file to use\nfor a particular set of math characters.\n\n============================== =================================\nParameter                      Corresponds to\n============================== =================================\n``mathtext.it``                ``\\mathit{}`` or default italic\n``mathtext.rm``                ``\\mathrm{}`` Roman (upright)\n``mathtext.tt``                ``\\mathtt{}`` Typewriter (monospace)\n``mathtext.bf``                ``\\mathbf{}`` bold\n``mathtext.bfit``              ``\\mathbfit{}`` bold italic\n``mathtext.cal``               ``\\mathcal{}`` calligraphic\n``mathtext.sf``                ``\\mathsf{}`` sans-serif\n============================== =================================\n\nEach parameter should be set to a fontconfig font descriptor (as defined in the\nyet-to-be-written font chapter).\n\n.. TODO: Link to font chapter\n\nThe fonts used should have a Unicode mapping in order to find any\nnon-Latin characters, such as Greek.  If you want to use a math symbol\nthat is not contained in your custom fonts, you can set\n:rc:`mathtext.fallback` to either ``'cm'``, ``'stix'`` or ``'stixsans'``\nwhich will cause the mathtext system to use\ncharacters from an alternative font whenever a particular\ncharacter cannot be found in the custom font.\n\nNote that the math glyphs specified in Unicode have evolved over time, and many\nfonts may not have glyphs in the correct place for mathtext.\n\nAccents\n-------\nAn accent command may precede any symbol to add an accent above it.  There are\nlong and short forms for some of them.\n\n============================== =================================\nCommand                        Result\n============================== =================================\n``\\acute a`` or ``\\'a``        :mathmpl:`\\acute a`\n``\\bar a``                     :mathmpl:`\\bar a`\n``\\breve a``                   :mathmpl:`\\breve a`\n``\\dot a`` or ``\\.a``          :mathmpl:`\\dot a`\n``\\ddot a`` or ``\\''a``        :mathmpl:`\\ddot a`\n``\\dddot a``                   :mathmpl:`\\dddot a`\n``\\ddddot a``                  :mathmpl:`\\ddddot a`\n``\\grave a`` or ``\\`a``        :mathmpl:`\\grave a`\n``\\hat a`` or ``\\^a``          :mathmpl:`\\hat a`\n``\\tilde a`` or ``\\~a``        :mathmpl:`\\tilde a`\n``\\vec a``                     :mathmpl:`\\vec a`\n``\\overline{abc}``             :mathmpl:`\\overline{abc}`\n============================== =================================\n\nIn addition, there are two special accents that automatically adjust to the\nwidth of the symbols below:\n\n============================== =================================\nCommand                        Result\n============================== =================================\n``\\widehat{xyz}``              :mathmpl:`\\widehat{xyz}`\n``\\widetilde{xyz}``            :mathmpl:`\\widetilde{xyz}`\n============================== =================================\n\nCare should be taken when putting accents on lower-case i's and j's.  Note that\nin the following ``\\imath`` is used to avoid the extra dot over the i::\n\n    r\"$\\hat i\\ \\ \\hat \\imath$\"\n\n.. math::\n\n    \\hat i\\ \\ \\hat \\imath\n\nSymbols\n-------\nYou can also use a large number of the TeX symbols, as in ``\\infty``,\n``\\leftarrow``, ``\\sum``, ``\\int``.\n\n.. math_symbol_table::\n\nIf a particular symbol does not have a name (as is true of many of the more\nobscure symbols in the STIX fonts), Unicode characters can also be used::\n\n   r'$\\u23ce$'\n\nExample\n-------\nHere is an example illustrating many of these features in context.\n\n.. figure:: /gallery/text_labels_and_annotations/images/sphx_glr_mathtext_demo_001.png\n   :target: /gallery/text_labels_and_annotations/mathtext_demo.html\n   :align: center\n\"\"\"",
                "filename": "galleries/users_explain/text/mathtext.py",
                "start_index": 0,
                "end_index": 12343,
                "start_line": 1,
                "end_line": 371,
                "max_line": 371,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "name: Feature Request\ndescription: Suggest something to add to Matplotlib!\ntitle: \"[ENH]: \"\nlabels: [New feature]\nbody:\n  - type: markdown\n    attributes:\n      value: |\n         Please search the [issues](https://github.com/matplotlib/matplotlib/issues) for relevant feature requests before creating a new feature request.\n  - type: textarea\n    id: problem\n    attributes:\n      label: Problem\n      description: Briefly describe the problem this feature will solve. (2-4 sentences)\n      placeholder: |\n        * I'm always frustrated when [...] because [...]\n        * I would like it if [...] happened when I [...] because [...]\n        * Here is a sample image of what I am asking for [...]\n    validations:\n      required: true\n  - type: textarea\n    id: solution\n    attributes:\n      label: Proposed solution\n      description: Describe a way to accomplish the goals of this feature request.",
                "filename": ".github/ISSUE_TEMPLATE/feature_request.yml",
                "start_index": 0,
                "end_index": 900,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.1
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "galleries/users_explain/text/text_intro.py": [
                {
                    "chunk": {
                        "code": "\"\"\"\n\n.. redirect-from:: /tutorials/text/text_intro\n\n.. _text_intro:\n\n========================\nText in Matplotlib Plots\n========================\n\nIntroduction to plotting and working with text in Matplotlib.\n\nMatplotlib has extensive text support, including support for\nmathematical expressions, truetype support for raster and\nvector outputs, newline separated text with arbitrary\nrotations, and Unicode support.\n\nBecause it embeds fonts directly in output documents, e.g., for postscript\nor PDF, what you see on the screen is what you get in the hardcopy.\n`FreeType <https://www.freetype.org/>`_ support\nproduces very nice, antialiased fonts, that look good even at small\nraster sizes.  Matplotlib includes its own\n:mod:`matplotlib.font_manager` (thanks to Paul Barrett), which\nimplements a cross platform, `W3C <https://www.w3.org/>`_\ncompliant font finding algorithm.\n\nThe user has a great deal of control over text properties (font size, font\nweight, text location and color, etc.) with sensible defaults set in\nthe :ref:`rc file <customizing>`.\nAnd significantly, for those interested in mathematical\nor scientific figures, Matplotlib implements a large number of TeX\nmath symbols and commands, supporting :ref:`mathematical expressions\n<mathtext>` anywhere in your figure.\n\n\nBasic text commands\n===================\n\nThe following commands are used to create text in the implicit and explicit\ninterfaces (see :ref:`api_interfaces` for an explanation of the tradeoffs):\n\n=================== =================== ======================================\nimplicit API        explicit API        description\n=================== =================== ======================================\n`~.pyplot.text`     `~.Axes.text`       Add text at an arbitrary location of\n                                        the `~matplotlib.axes.Axes`.\n\n`~.pyplot.annotate` `~.Axes.annotate`   Add an annotation, with an optional\n                                        arrow, at an arbitrary location of the\n                                        `~matplotlib.axes.Axes`.\n\n`~.pyplot.xlabel`   `~.Axes.set_xlabel` Add a label to the\n                                        `~matplotlib.axes.Axes`\\\\'s x-axis.\n\n`~.pyplot.ylabel`   `~.Axes.set_ylabel` Add a label to the\n                                        `~matplotlib.axes.Axes`\\\\'s y-axis.\n\n`~.pyplot.title`    `~.Axes.set_title`  Add a title to the\n                                        `~matplotlib.axes.Axes`.\n\n`~.pyplot.figtext`  `~.Figure.text`     Add text at an arbitrary location of\n                                        the `.Figure`.\n\n`~.pyplot.suptitle` `~.Figure.suptitle` Add a title to the `.Figure`.\n=================== =================== ======================================\n\nAll of these functions create and return a `.Text` instance, which can be\nconfigured with a variety of font and other properties.  The example below\nshows all of these commands in action, and more detail is provided in the\nsections that follow.\n\n\"\"\"",
                        "filename": "galleries/users_explain/text/text_intro.py",
                        "start_index": 0,
                        "end_index": 2982,
                        "start_line": 1,
                        "end_line": 365,
                        "max_line": 429,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.5",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet from 'text_intro.py' provides an overview of text in Matplotlib plots, including the `figtext` function which is directly related to the issue reported."
                }
            ],
            "lib/matplotlib/pyplot.py": [
                {
                    "chunk": {
                        "code": "@_copy_docstring_and_deprecators(Axes.text)\ndef text(\n    x: float, y: float, s: str, fontdict: dict[str, Any] | None = None, **kwargs\n) -> Text:\n    return gca().text(x, y, s, fontdict=fontdict, **kwargs)\n\n\n# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n@_copy_docstring_and_deprecators(Axes.tick_params)\ndef tick_params(axis: Literal[\"both\", \"x\", \"y\"] = \"both\", **kwargs) -> None:\n    gca().tick_params(axis=axis, **kwargs)\n\n\n# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n@_copy_docstring_and_deprecators(Axes.ticklabel_format)\ndef ticklabel_format(\n    *,\n    axis: Literal[\"both\", \"x\", \"y\"] = \"both\",\n    style: Literal[\"\", \"sci\", \"scientific\", \"plain\"] = \"\",\n    scilimits: tuple[int, int] | None = None,\n    useOffset: bool | float | None = None,\n    useLocale: bool | None = None,\n    useMathText: bool | None = None,\n) -> None:\n    gca().ticklabel_format(\n        axis=axis,\n        style=style,\n        scilimits=scilimits,\n        useOffset=useOffset,\n        useLocale=useLocale,\n        useMathText=useMathText,\n    )\n\n\n# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n@_copy_docstring_and_deprecators(Axes.tricontour)\ndef tricontour(*args, **kwargs):\n    __ret = gca().tricontour(*args, **kwargs)\n    if __ret._A is not None:  # type: ignore[attr-defined]\n        sci(__ret)\n    return __ret\n\n\n# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n@_copy_docstring_and_deprecators(Axes.tricontourf)\ndef tricontourf(*args, **kwargs):\n    __ret = gca().tricontourf(*args, **kwargs)\n    if __ret._A is not None:  # type: ignore[attr-defined]\n        sci(__ret)\n    return __ret\n\n\n# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n@_copy_docstring_and_deprecators(Axes.tripcolor)\ndef tripcolor(\n    *args,\n    alpha=1.0,\n    norm=None,\n    cmap=None,\n    vmin=None,\n    vmax=None,\n    shading=\"flat\",\n    facecolors=None,\n    **kwargs,\n):\n    __ret = gca().tripcolor(\n        *args,\n        alpha=alpha,\n        norm=norm,\n        cmap=cmap,\n        vmin=vmin,\n        vmax=vmax,\n        shading=shading,\n        facecolors=facecolors,\n        **kwargs,\n    )\n    sci(__ret)\n    return __ret\n\n\n# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n@_copy_docstring_and_deprecators(Axes.triplot)\ndef triplot(*args, **kwargs):\n    return gca().triplot(*args, **kwargs)\n\n\n# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.",
                        "filename": "lib/matplotlib/pyplot.py",
                        "start_index": 124288,
                        "end_index": 126776,
                        "start_line": 3882,
                        "end_line": 4312,
                        "max_line": 4320,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.5",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet from 'pyplot.py' contains the definition of the `text` function, which is likely where the issue originates and where a fix would be implemented."
                }
            ],
            "galleries/users_explain/text/text_props.py": [
                {
                    "chunk": {
                        "code": "\"\"\"\n\n.. redirect-from:: /tutorials/text/text_props\n\n.. _text_props:\n\n============================\n Text properties and layout\n============================\n\nControlling properties of text and its layout with Matplotlib.\n\n`matplotlib.text.Text` instances have a variety of properties which can be\nconfigured via keyword arguments to `~.Axes.set_title`, `~.Axes.set_xlabel`,\n`~.Axes.text`, etc.\n\n==========================  ======================================================================================================================\nProperty                    Value Type\n==========================  ======================================================================================================================\nalpha                       `float`\nbackgroundcolor             any matplotlib :ref:`color <colors_def>`\nbbox                        `~matplotlib.patches.Rectangle` prop dict plus key ``'pad'`` which is a pad in points\nclip_box                    a matplotlib.transform.Bbox instance\nclip_on                     bool\nclip_path                   a `~matplotlib.path.Path` instance and a `~matplotlib.transforms.Transform` instance, a `~matplotlib.patches.Patch`\ncolor                       any matplotlib :ref:`color <colors_def>`\nfamily                      [ ``'serif'`` | ``'sans-serif'`` | ``'cursive'`` | ``'fantasy'`` | ``'monospace'`` ]\nfontproperties              `~matplotlib.font_manager.FontProperties`\nhorizontalalignment or ha   [ ``'center'`` | ``'right'`` | ``'left'`` ]\nlabel                       any string\nlinespacing                 `float`\nmultialignment              [``'left'`` | ``'right'`` | ``'center'`` ]\nname or fontname            string e.g., [``'Sans'`` | ``'Courier'`` | ``'Helvetica'`` ...]\npicker                      [None|float|bool|callable]\nposition                    (x, y)\nrotation                    [ angle in degrees | ``'vertical'`` | ``'horizontal'`` ]\nsize or fontsize            [ size in points | relative size, e.g., ``'smaller'``, ``'x-large'`` ]\nstyle or fontstyle          [ ``'normal'`` | ``'italic'`` | ``'oblique'`` ]\ntext                        string or anything printable with '%s' conversion\ntransform                   `~matplotlib.transforms.Transform` subclass\nvariant                     [ ``'normal'`` | ``'small-caps'`` ]\nverticalalignment or va     [ ``'center'`` | ``'top'`` | ``'bottom'`` | ``'baseline'`` ]\nvisible                     bool\nweight or fontweight        [ ``'normal'`` | ``'bold'`` | ``'heavy'`` | ``'light'`` | ``'ultrabold'`` | ``'ultralight'``]\nx                           `float`\ny                           `float`\nzorder                      any number\n==========================  ======================================================================================================================\n\n\nYou can lay out text with the alignment arguments\n``horizontalalignment``, ``verticalalignment``, and\n``multialignment``.  ``horizontalalignment`` controls whether the x\npositional argument for the text indicates the left, center or right\nside of the text bounding box. ``verticalalignment`` controls whether\nthe y positional argument for the text indicates the bottom, center or\ntop side of the text bounding box.  ``multialignment``, for newline\nseparated strings only, controls whether the different lines are left,\ncenter or right justified.  Here is an example which uses the\n:func:`~matplotlib.pyplot.text` command to show the various alignment\npossibilities.  The use of ``transform=ax.transAxes`` throughout the\ncode indicates that the coordinates are given relative to the axes\nbounding box, with (0, 0) being the lower left of the axes and (1, 1) the\nupper right.\n\"\"\"",
                        "filename": "galleries/users_explain/text/text_props.py",
                        "start_index": 0,
                        "end_index": 3694,
                        "start_line": 1,
                        "end_line": 65,
                        "max_line": 272,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.5",
                        "sha": ""
                    },
                    "reason_for_relevance": "The snippet from 'text_props.py' details the text properties and layout, including 'linespacing' which is mentioned in the issue as causing an error."
                }
            ]
        },
        "solution_task": "- Verify that the `figtext` function is not designed to accept lists for the `rotation`, `transform_rotates_text`, and `linespacing` parameters.\n- Ensure that the parameters `rotation`, `transform_rotates_text`, and `linespacing` are expected to be single values (e.g., an integer or a float for `rotation` and `linespacing`, and a boolean for `transform_rotates_text`).\n- Add type checks at the beginning of the `figtext` function to ensure that the parameters `rotation`, `transform_rotates_text`, and `linespacing` are not lists. If a list is passed, raise a `TypeError` with a clear message indicating which parameter is incorrect and what type is expected.\n- Example type check for `rotation`:\n  ```python\n  if isinstance(rotation, list):\n      raise TypeError(\"rotation parameter must be a single value, not a list.\")\n  ```\n- Repeat similar type checks for `transform_rotates_text` and `linespacing`.\n- If the `figtext` function is part of a class that uses setters for these properties, ensure that the setters also perform type checks and raise appropriate errors.",
        "bouncer_response": {
            "score": 8,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable solution to the problem described in the PROMPT by suggesting the implementation of type checks for the parameters causing the issue. It correctly identifies that the parameters 'rotation', 'transform_rotates_text', and 'linespacing' should not be lists and proposes raising a TypeError with a clear message if a list is passed. The RESPONSE also includes an example of how to implement the type check for the 'rotation' parameter, which is directly applicable to the bug. Additionally, the RESPONSE suggests checking the relevant code snippets in the Matplotlib repository, which is useful for locating where the changes need to be made. The RESPONSE does not address all aspects of the bug, such as providing the exact code changes for all parameters or considering the possibility of other non-hashable types being passed, which is why it does not score a 10.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711698027.415794,
        "result": "- Verify that the `figtext` function is not designed to accept lists for the `rotation`, `transform_rotates_text`, and `linespacing` parameters.\n- Ensure that the parameters `rotation`, `transform_rotates_text`, and `linespacing` are expected to be single values (e.g., an integer or a float for `rotation` and `linespacing`, and a boolean for `transform_rotates_text`).\n- Add type checks at the beginning of the `figtext` function to ensure that the parameters `rotation`, `transform_rotates_text`, and `linespacing` are not lists. If a list is passed, raise a `TypeError` with a clear message indicating which parameter is incorrect and what type is expected.\n- Example type check for `rotation`:\n  ```python\n  if isinstance(rotation, list):\n      raise TypeError(\"rotation parameter must be a single value, not a list.\")\n  ```\n- Repeat similar type checks for `transform_rotates_text` and `linespacing`.\n- If the `figtext` function is part of a class that uses setters for these properties, ensure that the setters also perform type checks and raise appropriate errors.\n\n### Code snippets to check\n\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries) \u2192 [users_explain](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries/users_explain) \u2192 [text](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries/users_explain/text)- [Lines 1 - 365](https://github.com/testbed/matplotlib__matplotlib__3.5/blob//galleries/users_explain/text/text_intro.py#L1-L365)\n\n This snippet from 'text_intro.py' provides an overview of text in Matplotlib plots, including the `figtext` function which is directly related to the issue reported.\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//lib/matplotlib)- [Lines 3882 - 4312](https://github.com/testbed/matplotlib__matplotlib__3.5/blob//lib/matplotlib/pyplot.py#L3882-L4312)\n\n This snippet from 'pyplot.py' contains the definition of the `text` function, which is likely where the issue originates and where a fix would be implemented.\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries) \u2192 [users_explain](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries/users_explain) \u2192 [text](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries/users_explain/text)- [Lines 1 - 65](https://github.com/testbed/matplotlib__matplotlib__3.5/blob//galleries/users_explain/text/text_props.py#L1-L65)\n\n The snippet from 'text_props.py' details the text properties and layout, including 'linespacing' which is mentioned in the issue as causing an error.",
        "context_relevance": 0.23000000000000004,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE is relevant to the entire PROMPT and answers the PROMPT completely.\nSupporting Evidence: The RESPONSE provides a detailed explanation of how to address the bug report described in the PROMPT, including verifying the expected parameter types for the `figtext` function and adding type checks with clear error messages. It also suggests checking the relevant code snippets for the implementation of the fix. The RESPONSE is directly related to the bug summary, code for reproduction, actual outcome, expected outcome, and Matplotlib version information provided in the PROMPT."
        },
        "qa_relevance": 1.0
    }
}