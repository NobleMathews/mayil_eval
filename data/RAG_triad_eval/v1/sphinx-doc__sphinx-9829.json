{
    "id": "sphinx-doc__sphinx-9829",
    "repo_name": "testbed/sphinx-doc__sphinx__4.3",
    "task_id": 2404861468606482881,
    "title": "Add a way to defer loading of MathJax",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nIt is quite tricky to configure MathJax to work with Sphinx currently.\r\n\r\nSphinx loads MathJax asynchronously since https://github.com/sphinx-doc/sphinx/issues/3606 and https://github.com/sphinx-doc/sphinx/pull/5005.  While this was fine for MathJax 2, because of the special kind of ``<script>`` blocks mentioned in https://github.com/sphinx-doc/sphinx/issues/5616 , it doesn't work well with MathJax 3.\r\n\r\nIndeed, in MathJax 3, MathJax expect a config `<script>` block to be present *before* MathJax is loaded. Sphinx 4 added `mathjax3_config` parameter:\r\n\r\n```\r\n        if app.config.mathjax3_config:\r\n            body = 'window.MathJax = %s' % json.dumps(app.config.mathjax3_config)\r\n            app.add_js_file(None, body=body)\r\n```\r\n\r\nThis assumes that the `config` is a simple dictionary, which isn't sufficient: that configuration should be able to contain functions, for example.\r\n\r\nThe only possibility at the moment is to add a separate script file containing a MathJax configuration and to load it with ``app.add_js_file``.\r\n\r\n**Describe the solution you'd like**\r\n\r\nThere are three possibilities:\r\n\r\n- Allow arbitrary strings for mathjax3_config, and in that case don't JSON-serialize them.\r\n- Change `async` to `defer` when loading MathJax.\r\n- Make it possible for users to change `async` to `defer` themselves.  At the moment this isn't possible because the `async` flags is unconditionally added:\r\n\r\n  ```\r\n      if app.registry.html_assets_policy == 'always' or domain.has_equations(pagename):\r\n        # Enable mathjax only if equations exists\r\n        options = {'async': 'async'}\r\n        if app.config.mathjax_options:\r\n            options.update(app.config.mathjax_options)\r\n  ```\r\n\r\nThe latter two are preferable because they would allow individual pages to use different MathJax config by using a `.. raw::` block to override the default MathJax configuration on a given page (the script in that ``raw`` block will run before MathJax loads thanks to the `defer` option).\r\n\r\nCC @jfbu , the author of #5616.\r\n\r\nThanks!\r\n\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/sphinx-doc__sphinx__4.3.git",
    "requested_commit": "",
    "mayil_response": "To implement the feature request to defer loading of MathJax, you can modify the `install_mathjax` function in the `sphinx/ext/mathjax.py` file. Here's a high-level overview and specific changes:\n\n- Modify the `install_mathjax` function to allow users to specify whether to use `async` or `defer` when loading MathJax.\n- Add a new configuration option to allow users to specify their preference for loading MathJax.\n- Update the logic that adds the MathJax script tag to respect the new configuration option.\n\nHere's a step-by-step implementation:\n\n1. Add a new configuration option in the `setup` function:\n```python\napp.add_config_value('mathjax_loading', 'async', 'html')\n```\n\n2. Modify the `install_mathjax` function to use the new configuration option:\n```python\ndef install_mathjax(app: Sphinx, pagename: str, templatename: str, context: dict[str, Any],\n                    event_arg: Any) -> None:\n    # ... existing code ...\n\n    options = {}\n    if app.config.mathjax_options:\n        options.update(app.config.mathjax_options)\n\n    # Use the new configuration option to determine loading method\n    loading_method = app.config.mathjax_loading\n    if loading_method not in ('async', 'defer'):\n        raise ExtensionError('mathjax_loading config value must be \"async\" or \"defer\"')\n\n    options[loading_method] = loading_method\n\n    app.add_js_file(app.config.mathjax_path, **options)\n```\n\n3. Update the documentation to describe the new configuration option `mathjax_loading`, which can be set to either `'async'` or `'defer'`.\n\n4. Ensure that the new configuration option is documented and that users are aware they can now control the loading method of MathJax.\n\nThis implementation allows users to choose between `async` and `defer` loading of MathJax by setting the `mathjax_loading` configuration option in their Sphinx project's `conf.py` file.\n\n### Code snippets to check\n\n-  \u2192 [sphinx](https://github.com/testbed/sphinx-doc__sphinx__4.3/tree//sphinx) \u2192 [ext](https://github.com/testbed/sphinx-doc__sphinx__4.3/tree//sphinx/ext)- [Lines 70 - 122](https://github.com/testbed/sphinx-doc__sphinx__4.3/blob//sphinx/ext/mathjax.py#L70-L122)\n\n This snippet contains the logic for adding the MathJax script to the page, including the configuration options and the decision to use 'async' or 'defer'. It is directly related to the issue of configuring MathJax and the request to change 'async' to 'defer'. \n\n\n   - [Lines 1 - 67](https://github.com/testbed/sphinx-doc__sphinx__4.3/blob//sphinx/ext/mathjax.py#L1-L67)\n\n This snippet includes the MathJax URL and functions for handling math content in HTML. It is relevant because changes to how MathJax is loaded may require updates to these functions.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0005825,
        "snippet_processor": 0.07376,
        "issue_star_creation": 0.01963,
        "issue_star_solver": 0.07101,
        "bouncer": 0.02425
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711702045.3471308,
        "relevant_snippets": [
            {
                "code": "\"\"\"Allow `MathJax`_ to be used to display math in Sphinx's HTML writer.\n\nThis requires the MathJax JavaScript library on your webserver/computer.\n\n.. _MathJax: https://www.mathjax.org/\n\"\"\"\n\nfrom __future__ import annotations\n\nimport json\nfrom typing import Any, cast\n\nfrom docutils import nodes\n\nimport sphinx\nfrom sphinx.application import Sphinx\nfrom sphinx.domains.math import MathDomain\nfrom sphinx.errors import ExtensionError\nfrom sphinx.locale import _\nfrom sphinx.util.math import get_node_equation_number\nfrom sphinx.writers.html import HTML5Translator\n\n# more information for mathjax secure url is here:\n# https://docs.mathjax.org/en/latest/start.html#secure-access-to-the-cdn\nMATHJAX_URL = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js'\n\nlogger = sphinx.util.logging.getLogger(__name__)\n\n\ndef html_visit_math(self: HTML5Translator, node: nodes.math) -> None:\n    self.body.append(self.starttag(node, 'span', '', CLASS='math notranslate nohighlight'))\n    self.body.append(self.builder.config.mathjax_inline[0] +\n                     self.encode(node.astext()) +\n                     self.builder.config.mathjax_inline[1] + '</span>')\n    raise nodes.SkipNode\n\n\ndef html_visit_displaymath(self: HTML5Translator, node: nodes.math_block) -> None:\n    self.body.append(self.starttag(node, 'div', CLASS='math notranslate nohighlight'))\n    if node['nowrap']:\n        self.body.append(self.encode(node.astext()))\n        self.body.append('</div>')\n        raise nodes.SkipNode\n\n    # necessary to e.g. set the id property correctly\n    if node['number']:\n        number = get_node_equation_number(self, node)\n        self.body.append('<span class=\"eqno\">(%s)' % number)\n        self.add_permalink_ref(node, _('Permalink to this equation'))\n        self.body.append('</span>')\n    self.body.append(self.builder.config.mathjax_display[0])\n    parts = [prt for prt in node.astext().split('\\n\\n') if prt.strip()]\n    if len(parts) > 1:  # Add alignment if there are more than 1 equation\n        self.body.append(r' \\begin{align}\\begin{aligned}')\n    for i, part in enumerate(parts):\n        part = self.encode(part)\n        if r'\\\\' in part:\n            self.body.append(r'\\begin{split}' + part + r'\\end{split}')\n        else:\n            self.body.append(part)\n        if i < len(parts) - 1:  # append new line if not the last equation\n            self.body.append(r'\\\\')\n    if len(parts) > 1:  # Add alignment if there are more than 1 equation\n        self.body.append(r'\\end{aligned}\\end{align} ')\n    self.body.append(self.builder.config.mathjax_display[1])\n    self.body.append('</div>\\n')\n    raise nodes.SkipNode",
                "filename": "sphinx/ext/mathjax.py",
                "start_index": 0,
                "end_index": 2636,
                "start_line": 1,
                "end_line": 67,
                "max_line": 122,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.3",
                "sha": "",
                "context_relevance": 0.7
            },
            {
                "code": "def install_mathjax(app: Sphinx, pagename: str, templatename: str, context: dict[str, Any],\n                    event_arg: Any) -> None:\n    if (\n        app.builder.format != 'html' or\n        app.builder.math_renderer_name != 'mathjax'  # type: ignore[attr-defined]\n    ):\n        return\n    if not app.config.mathjax_path:\n        raise ExtensionError('mathjax_path config value must be set for the '\n                             'mathjax extension to work')\n\n    domain = cast(MathDomain, app.env.get_domain('math'))\n    if app.registry.html_assets_policy == 'always' or domain.has_equations(pagename):\n        # Enable mathjax only if equations exists\n        if app.config.mathjax2_config:\n            if app.config.mathjax_path == MATHJAX_URL:\n                logger.warning(\n                    'mathjax_config/mathjax2_config does not work '\n                    'for the current MathJax version, use mathjax3_config instead')\n            body = 'MathJax.Hub.Config(%s)' % json.dumps(app.config.mathjax2_config)\n            app.add_js_file(None, type='text/x-mathjax-config', body=body)\n        if app.config.mathjax3_config:\n            body = 'window.MathJax = %s' % json.dumps(app.config.mathjax3_config)\n            app.add_js_file(None, body=body)\n\n        options = {}\n        if app.config.mathjax_options:\n            options.update(app.config.mathjax_options)\n        if 'async' not in options and 'defer' not in options:\n            if app.config.mathjax3_config:\n                # Load MathJax v3 via \"defer\" method\n                options['defer'] = 'defer'\n            else:\n                # Load other MathJax via \"async\" method\n                options['async'] = 'async'\n        app.add_js_file(app.config.mathjax_path, **options)\n\n\ndef setup(app: Sphinx) -> dict[str, Any]:\n    app.add_html_math_renderer('mathjax',\n                               (html_visit_math, None),\n                               (html_visit_displaymath, None))\n\n    app.add_config_value('mathjax_path', MATHJAX_URL, 'html')\n    app.add_config_value('mathjax_options', {}, 'html')\n    app.add_config_value('mathjax_inline', [r'\\(', r'\\)'], 'html')\n    app.add_config_value('mathjax_display', [r'\\[', r'\\]'], 'html')\n    app.add_config_value('mathjax_config', None, 'html')\n    app.add_config_value('mathjax2_config', lambda c: c.mathjax_config, 'html')\n    app.add_config_value('mathjax3_config', None, 'html')\n    app.connect('html-page-context', install_mathjax)\n\n    return {'version': sphinx.__display_version__, 'parallel_read_safe': True}",
                "filename": "sphinx/ext/mathjax.py",
                "start_index": 2639,
                "end_index": 5181,
                "start_line": 70,
                "end_line": 122,
                "max_line": 122,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.3",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "def html_visit_displaymath(self: HTML5Translator, node: nodes.math_block) -> None:\n    if node['nowrap']:\n        latex = node.astext()\n    else:\n        latex = wrap_displaymath(node.astext(), None, False)\n    try:\n        rendered_path, depth = render_math(self, latex)\n    except MathExtError as exc:\n        msg = str(exc)\n        sm = nodes.system_message(msg, type='WARNING', level=2,\n                                  backrefs=[], source=node.astext())\n        sm.walkabout(self)\n        logger.warning(__('inline latex %r: %s'), node.astext(), msg)\n        raise nodes.SkipNode from exc\n    self.body.append(self.starttag(node, 'div', CLASS='math'))\n    self.body.append('<p>')\n    if node['number']:\n        number = get_node_equation_number(self, node)\n        self.body.append('<span class=\"eqno\">(%s)' % number)\n        self.add_permalink_ref(node, _('Permalink to this equation'))\n        self.body.append('</span>')\n\n    if rendered_path is None:\n        # something failed -- use text-only as a bad substitute\n        self.body.append('<span class=\"math\">%s</span></p>\\n</div>' %\n                         self.encode(node.astext()).strip())\n    else:\n        if self.builder.config.imgmath_embed:\n            image_format = self.builder.config.imgmath_image_format.lower()\n            img_src = render_maths_to_base64(image_format, rendered_path)\n        else:\n            bname = path.basename(rendered_path)\n            relative_path = path.join(self.builder.imgpath, 'math', bname)\n            img_src = relative_path.replace(path.sep, '/')\n        self.body.append(f'<img src=\"{img_src}\"' + get_tooltip(self, node) +\n                         '/></p>\\n</div>')\n    raise nodes.SkipNode\n\n\ndef setup(app: Sphinx) -> dict[str, Any]:\n    app.add_html_math_renderer('imgmath',\n                               (html_visit_math, None),\n                               (html_visit_displaymath, None))\n\n    app.add_config_value('imgmath_image_format', 'png', 'html')\n    app.add_config_value('imgmath_dvipng', 'dvipng', 'html')\n    app.add_config_value('imgmath_dvisvgm', 'dvisvgm', 'html')\n    app.add_config_value('imgmath_latex', 'latex', 'html')\n    app.add_config_value('imgmath_use_preview', False, 'html')\n    app.add_config_value('imgmath_dvipng_args',\n                         ['-gamma', '1.5', '-D', '110', '-bg', 'Transparent'],\n                         'html')\n    app.add_config_value('imgmath_dvisvgm_args', ['--no-fonts'], 'html')\n    app.add_config_value('imgmath_latex_args', [], 'html')\n    app.add_config_value('imgmath_latex_preamble', '', 'html')\n    app.add_config_value('imgmath_add_tooltips', True, 'html')\n    app.add_config_value('imgmath_font_size', 12, 'html')\n    app.add_config_value('imgmath_embed', False, 'html', [bool])\n    app.connect('build-finished', clean_up_files)\n    return {'version': sphinx.__display_version__, 'parallel_read_safe': True}",
                "filename": "sphinx/ext/imgmath.py",
                "start_index": 12227,
                "end_index": 15116,
                "start_line": 342,
                "end_line": 401,
                "max_line": 401,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.3",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def setup(app: Sphinx) -> dict[str, Any]:\n    app.add_domain(MathDomain)\n    app.add_role('eq', MathReferenceRole(warn_dangling=True))\n\n    return {\n        'version': 'builtin',\n        'env_version': 2,\n        'parallel_read_safe': True,\n        'parallel_write_safe': True,\n    }",
                "filename": "sphinx/domains/math.py",
                "start_index": 5175,
                "end_index": 5458,
                "start_line": 141,
                "end_line": 150,
                "max_line": 150,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.3",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "class MathDirective(SphinxDirective):\n    has_content = True\n    required_arguments = 0\n    optional_arguments = 1\n    final_argument_whitespace = True\n    option_spec: OptionSpec = {\n        'label': directives.unchanged,\n        'name': directives.unchanged,\n        'class': directives.class_option,\n        'nowrap': directives.flag,\n    }\n\n    def run(self) -> list[Node]:\n        latex = '\\n'.join(self.content)\n        if self.arguments and self.arguments[0]:\n            latex = self.arguments[0] + '\\n\\n' + latex\n        label = self.options.get('label', self.options.get('name'))\n        node = nodes.math_block(latex, latex,\n                                classes=self.options.get('class', []),\n                                docname=self.env.docname,\n                                number=None,\n                                label=label,\n                                nowrap='nowrap' in self.options)\n        self.add_name(node)\n        self.set_source_info(node)\n\n        ret: list[Node] = [node]\n        self.add_target(ret)\n        return ret\n\n    def add_target(self, ret: list[Node]) -> None:\n        node = cast(nodes.math_block, ret[0])\n\n        # assign label automatically if math_number_all enabled\n        if node['label'] == '' or (self.config.math_number_all and not node['label']):\n            seq = self.env.new_serialno('sphinx.ext.math#equations')\n            node['label'] = \"%s:%d\" % (self.env.docname, seq)\n\n        # no targets and numbers are needed\n        if not node['label']:\n            return\n\n        # register label to domain\n        domain = cast(MathDomain, self.env.get_domain('math'))\n        domain.note_equation(self.env.docname, node['label'], location=node)\n        node['number'] = domain.get_equation_number_for(node['label'])\n\n        # add target node\n        node_id = make_id('equation-%s' % node['label'])\n        target = nodes.target('', '', ids=[node_id])\n        self.state.document.note_explicit_target(target)\n        ret.insert(0, target)\n\n\ndef setup(app: Sphinx) -> dict[str, Any]:\n    directives.register_directive('figure', Figure)\n    directives.register_directive('meta', Meta)\n    directives.register_directive('csv-table', CSVTable)\n    directives.register_directive('code', Code)\n    directives.register_directive('math', MathDirective)\n\n    return {\n        'version': 'builtin',\n        'parallel_read_safe': True,\n        'parallel_write_safe': True,\n    }",
                "filename": "sphinx/directives/patches.py",
                "start_index": 4341,
                "end_index": 6780,
                "start_line": 124,
                "end_line": 189,
                "max_line": 189,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.3",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"Render math in HTML via dvipng or dvisvgm.\"\"\"\n\nfrom __future__ import annotations\n\nimport base64\nimport re\nimport shutil\nimport subprocess\nimport tempfile\nfrom os import path\nfrom subprocess import CalledProcessError\nfrom typing import Any\n\nfrom docutils import nodes\nfrom docutils.nodes import Element\n\nimport sphinx\nfrom sphinx import package_dir\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.errors import SphinxError\nfrom sphinx.locale import _, __\nfrom sphinx.util import logging, sha1\nfrom sphinx.util.math import get_node_equation_number, wrap_displaymath\nfrom sphinx.util.osutil import ensuredir\nfrom sphinx.util.png import read_png_depth, write_png_depth\nfrom sphinx.util.template import LaTeXRenderer\nfrom sphinx.writers.html import HTML5Translator\n\nlogger = logging.getLogger(__name__)\n\ntemplates_path = path.join(package_dir, 'templates', 'imgmath')\n\n__all__ = ()\n\n\nclass MathExtError(SphinxError):\n    category = 'Math extension error'\n\n    def __init__(\n        self, msg: str, stderr: str | None = None, stdout: str | None = None,\n    ) -> None:\n        if stderr:\n            msg += '\\n[stderr]\\n' + stderr\n        if stdout:\n            msg += '\\n[stdout]\\n' + stdout\n        super().__init__(msg)\n\n\nclass InvokeError(SphinxError):\n    \"\"\"errors on invoking converters.\"\"\"\n\n\nSUPPORT_FORMAT = ('png', 'svg')\n\ndepth_re = re.compile(r'\\[\\d+ depth=(-?\\d+)\\]')\ndepthsvg_re = re.compile(r'.*, depth=(.*)pt')\ndepthsvgcomment_re = re.compile(r'<!-- DEPTH=(-?\\d+) -->')\n\n\ndef read_svg_depth(filename: str) -> int | None:\n    \"\"\"Read the depth from comment at last line of SVG file\n    \"\"\"\n    with open(filename, encoding=\"utf-8\") as f:\n        for line in f:  # noqa: B007\n            pass\n        # Only last line is checked\n        matched = depthsvgcomment_re.match(line)\n        if matched:\n            return int(matched.group(1))\n        return None\n\n\ndef write_svg_depth(filename: str, depth: int) -> None:\n    \"\"\"Write the depth to SVG file as a comment at end of file\n    \"\"\"\n    with open(filename, 'a', encoding=\"utf-8\") as f:\n        f.write('\\n<!-- DEPTH=%s -->' % depth)",
                "filename": "sphinx/ext/imgmath.py",
                "start_index": 0,
                "end_index": 2169,
                "start_line": 1,
                "end_line": 79,
                "max_line": 401,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.3",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def clean_up_files(app: Sphinx, exc: Exception) -> None:\n    if exc:\n        return\n\n    if hasattr(app.builder, '_imgmath_tempdir'):\n        try:\n            shutil.rmtree(app.builder._imgmath_tempdir)\n        except Exception:\n            pass\n\n    if app.builder.config.imgmath_embed:\n        # in embed mode, the images are still generated in the math output dir\n        # to be shared across workers, but are not useful to the final document\n        try:\n            shutil.rmtree(path.join(app.builder.outdir, app.builder.imagedir, 'math'))\n        except Exception:\n            pass\n\n\ndef get_tooltip(self: HTML5Translator, node: Element) -> str:\n    if self.builder.config.imgmath_add_tooltips:\n        return ' alt=\"%s\"' % self.encode(node.astext()).strip()\n    return ''\n\n\ndef html_visit_math(self: HTML5Translator, node: nodes.math) -> None:\n    try:\n        rendered_path, depth = render_math(self, '$' + node.astext() + '$')\n    except MathExtError as exc:\n        msg = str(exc)\n        sm = nodes.system_message(msg, type='WARNING', level=2,\n                                  backrefs=[], source=node.astext())\n        sm.walkabout(self)\n        logger.warning(__('display latex %r: %s'), node.astext(), msg)\n        raise nodes.SkipNode from exc\n\n    if rendered_path is None:\n        # something failed -- use text-only as a bad substitute\n        self.body.append('<span class=\"math\">%s</span>' %\n                         self.encode(node.astext()).strip())\n    else:\n        if self.builder.config.imgmath_embed:\n            image_format = self.builder.config.imgmath_image_format.lower()\n            img_src = render_maths_to_base64(image_format, rendered_path)\n        else:\n            bname = path.basename(rendered_path)\n            relative_path = path.join(self.builder.imgpath, 'math', bname)\n            img_src = relative_path.replace(path.sep, '/')\n        c = f'<img class=\"math\" src=\"{img_src}\"' + get_tooltip(self, node)\n        if depth is not None:\n            c += f' style=\"vertical-align: {-depth:d}px\"'\n        self.body.append(c + '/>')\n    raise nodes.SkipNode",
                "filename": "sphinx/ext/imgmath.py",
                "start_index": 10123,
                "end_index": 12224,
                "start_line": 287,
                "end_line": 378,
                "max_line": 401,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.3",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "\"\"\"The math domain.\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import TYPE_CHECKING, Any, Iterable\n\nfrom docutils import nodes\nfrom docutils.nodes import Element, Node, make_id, system_message\n\nfrom sphinx.addnodes import pending_xref\nfrom sphinx.domains import Domain\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.locale import __\nfrom sphinx.roles import XRefRole\nfrom sphinx.util import logging\nfrom sphinx.util.nodes import make_refnode\n\nif TYPE_CHECKING:\n    from sphinx.application import Sphinx\n    from sphinx.builders import Builder\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass MathReferenceRole(XRefRole):\n    def result_nodes(self, document: nodes.document, env: BuildEnvironment, node: Element,\n                     is_ref: bool) -> tuple[list[Node], list[system_message]]:\n        node['refdomain'] = 'math'\n        return [node], []",
                "filename": "sphinx/domains/math.py",
                "start_index": 0,
                "end_index": 871,
                "start_line": 1,
                "end_line": 30,
                "max_line": 150,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.3",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def setup(app: Sphinx) -> dict[str, Any]:\n    app.add_domain(JavaScriptDomain)\n\n    return {\n        'version': 'builtin',\n        'env_version': 2,\n        'parallel_read_safe': True,\n        'parallel_write_safe': True,\n    }",
                "filename": "sphinx/domains/javascript.py",
                "start_index": 18066,
                "end_index": 18293,
                "start_line": 474,
                "end_line": 482,
                "max_line": 482,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.3",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def setup_js_tag_helper(app: Sphinx, pagename: str, templatename: str,\n                        context: dict, doctree: Node) -> None:\n    \"\"\"Set up js_tag() template helper.\n\n    .. note:: This set up function is added to keep compatibility with webhelper.\n    \"\"\"\n    pathto = context.get('pathto')\n\n    def js_tag(js: JavaScript) -> str:\n        attrs = []\n        body = ''\n        if isinstance(js, JavaScript):\n            for key in sorted(js.attributes):\n                value = js.attributes[key]\n                if value is not None:\n                    if key == 'body':\n                        body = value\n                    elif key == 'data_url_root':\n                        attrs.append('data-url_root=\"%s\"' % pathto('', resource=True))\n                    else:\n                        attrs.append(f'{key}=\"{html.escape(value, True)}\"')\n            if js.filename:\n                attrs.append('src=\"%s\"' % pathto(js.filename, resource=True))\n        else:\n            # str value (old styled)\n            attrs.append('src=\"%s\"' % pathto(js, resource=True))\n\n        if attrs:\n            return f'<script {\" \".join(attrs)}>{body}</script>'\n        else:\n            return f'<script>{body}</script>'\n\n    context['js_tag'] = js_tag\n\n\ndef setup_resource_paths(app: Sphinx, pagename: str, templatename: str,\n                         context: dict, doctree: Node) -> None:\n    \"\"\"Set up relative resource paths.\"\"\"\n    pathto = context.get('pathto')\n\n    # favicon_url\n    favicon_url = context.get('favicon_url')\n    if favicon_url and not isurl(favicon_url):\n        context['favicon_url'] = pathto('_static/' + favicon_url, resource=True)\n\n    # logo_url\n    logo_url = context.get('logo_url')\n    if logo_url and not isurl(logo_url):\n        context['logo_url'] = pathto('_static/' + logo_url, resource=True)\n\n\ndef validate_math_renderer(app: Sphinx) -> None:\n    if app.builder.format != 'html':\n        return\n\n    name = app.builder.math_renderer_name  # type: ignore\n    if name is None:\n        raise ConfigError(__('Many math_renderers are registered. '\n                             'But no math_renderer is selected.'))\n    if name not in app.registry.html_inline_math_renderers:\n        raise ConfigError(__('Unknown math_renderer %r is given.') % name)\n\n\ndef validate_html_extra_path(app: Sphinx, config: Config) -> None:\n    \"\"\"Check html_extra_paths setting.\"\"\"\n    for entry in config.html_extra_path[:]:\n        extra_path = path.normpath(path.join(app.confdir, entry))\n        if not path.exists(extra_path):\n            logger.warning(__('html_extra_path entry %r does not exist'), entry)\n            config.html_extra_path.remove(entry)\n        elif (path.splitdrive(app.outdir)[0] == path.splitdrive(extra_path)[0] and\n              path.commonpath([app.outdir, extra_path]) == app.outdir):\n            logger.warning(__('html_extra_path entry %r is placed inside outdir'), entry)\n            config.html_extra_path.remove(entry)",
                "filename": "sphinx/builders/html/__init__.py",
                "start_index": 49575,
                "end_index": 52543,
                "start_line": 1202,
                "end_line": 1275,
                "max_line": 1395,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.3",
                "sha": "",
                "context_relevance": 0.2
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "sphinx/ext/mathjax.py": [
                {
                    "chunk": {
                        "code": "def install_mathjax(app: Sphinx, pagename: str, templatename: str, context: dict[str, Any],\n                    event_arg: Any) -> None:\n    if (\n        app.builder.format != 'html' or\n        app.builder.math_renderer_name != 'mathjax'  # type: ignore[attr-defined]\n    ):\n        return\n    if not app.config.mathjax_path:\n        raise ExtensionError('mathjax_path config value must be set for the '\n                             'mathjax extension to work')\n\n    domain = cast(MathDomain, app.env.get_domain('math'))\n    if app.registry.html_assets_policy == 'always' or domain.has_equations(pagename):\n        # Enable mathjax only if equations exists\n        if app.config.mathjax2_config:\n            if app.config.mathjax_path == MATHJAX_URL:\n                logger.warning(\n                    'mathjax_config/mathjax2_config does not work '\n                    'for the current MathJax version, use mathjax3_config instead')\n            body = 'MathJax.Hub.Config(%s)' % json.dumps(app.config.mathjax2_config)\n            app.add_js_file(None, type='text/x-mathjax-config', body=body)\n        if app.config.mathjax3_config:\n            body = 'window.MathJax = %s' % json.dumps(app.config.mathjax3_config)\n            app.add_js_file(None, body=body)\n\n        options = {}\n        if app.config.mathjax_options:\n            options.update(app.config.mathjax_options)\n        if 'async' not in options and 'defer' not in options:\n            if app.config.mathjax3_config:\n                # Load MathJax v3 via \"defer\" method\n                options['defer'] = 'defer'\n            else:\n                # Load other MathJax via \"async\" method\n                options['async'] = 'async'\n        app.add_js_file(app.config.mathjax_path, **options)\n\n\ndef setup(app: Sphinx) -> dict[str, Any]:\n    app.add_html_math_renderer('mathjax',\n                               (html_visit_math, None),\n                               (html_visit_displaymath, None))\n\n    app.add_config_value('mathjax_path', MATHJAX_URL, 'html')\n    app.add_config_value('mathjax_options', {}, 'html')\n    app.add_config_value('mathjax_inline', [r'\\(', r'\\)'], 'html')\n    app.add_config_value('mathjax_display', [r'\\[', r'\\]'], 'html')\n    app.add_config_value('mathjax_config', None, 'html')\n    app.add_config_value('mathjax2_config', lambda c: c.mathjax_config, 'html')\n    app.add_config_value('mathjax3_config', None, 'html')\n    app.connect('html-page-context', install_mathjax)\n\n    return {'version': sphinx.__display_version__, 'parallel_read_safe': True}",
                        "filename": "sphinx/ext/mathjax.py",
                        "start_index": 2639,
                        "end_index": 5181,
                        "start_line": 70,
                        "end_line": 122,
                        "max_line": 122,
                        "git_instance": "github",
                        "repo_name": "testbed/sphinx-doc__sphinx__4.3",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the logic for adding the MathJax script to the page, including the configuration options and the decision to use 'async' or 'defer'. It is directly related to the issue of configuring MathJax and the request to change 'async' to 'defer'."
                },
                {
                    "chunk": {
                        "code": "\"\"\"Allow `MathJax`_ to be used to display math in Sphinx's HTML writer.\n\nThis requires the MathJax JavaScript library on your webserver/computer.\n\n.. _MathJax: https://www.mathjax.org/\n\"\"\"\n\nfrom __future__ import annotations\n\nimport json\nfrom typing import Any, cast\n\nfrom docutils import nodes\n\nimport sphinx\nfrom sphinx.application import Sphinx\nfrom sphinx.domains.math import MathDomain\nfrom sphinx.errors import ExtensionError\nfrom sphinx.locale import _\nfrom sphinx.util.math import get_node_equation_number\nfrom sphinx.writers.html import HTML5Translator\n\n# more information for mathjax secure url is here:\n# https://docs.mathjax.org/en/latest/start.html#secure-access-to-the-cdn\nMATHJAX_URL = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js'\n\nlogger = sphinx.util.logging.getLogger(__name__)\n\n\ndef html_visit_math(self: HTML5Translator, node: nodes.math) -> None:\n    self.body.append(self.starttag(node, 'span', '', CLASS='math notranslate nohighlight'))\n    self.body.append(self.builder.config.mathjax_inline[0] +\n                     self.encode(node.astext()) +\n                     self.builder.config.mathjax_inline[1] + '</span>')\n    raise nodes.SkipNode\n\n\ndef html_visit_displaymath(self: HTML5Translator, node: nodes.math_block) -> None:\n    self.body.append(self.starttag(node, 'div', CLASS='math notranslate nohighlight'))\n    if node['nowrap']:\n        self.body.append(self.encode(node.astext()))\n        self.body.append('</div>')\n        raise nodes.SkipNode\n\n    # necessary to e.g. set the id property correctly\n    if node['number']:\n        number = get_node_equation_number(self, node)\n        self.body.append('<span class=\"eqno\">(%s)' % number)\n        self.add_permalink_ref(node, _('Permalink to this equation'))\n        self.body.append('</span>')\n    self.body.append(self.builder.config.mathjax_display[0])\n    parts = [prt for prt in node.astext().split('\\n\\n') if prt.strip()]\n    if len(parts) > 1:  # Add alignment if there are more than 1 equation\n        self.body.append(r' \\begin{align}\\begin{aligned}')\n    for i, part in enumerate(parts):\n        part = self.encode(part)\n        if r'\\\\' in part:\n            self.body.append(r'\\begin{split}' + part + r'\\end{split}')\n        else:\n            self.body.append(part)\n        if i < len(parts) - 1:  # append new line if not the last equation\n            self.body.append(r'\\\\')\n    if len(parts) > 1:  # Add alignment if there are more than 1 equation\n        self.body.append(r'\\end{aligned}\\end{align} ')\n    self.body.append(self.builder.config.mathjax_display[1])\n    self.body.append('</div>\\n')\n    raise nodes.SkipNode",
                        "filename": "sphinx/ext/mathjax.py",
                        "start_index": 0,
                        "end_index": 2636,
                        "start_line": 1,
                        "end_line": 67,
                        "max_line": 122,
                        "git_instance": "github",
                        "repo_name": "testbed/sphinx-doc__sphinx__4.3",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet includes the MathJax URL and functions for handling math content in HTML. It is relevant because changes to how MathJax is loaded may require updates to these functions."
                }
            ]
        },
        "solution_task": "To implement the feature request to defer loading of MathJax, you can modify the `install_mathjax` function in the `sphinx/ext/mathjax.py` file. Here's a high-level overview and specific changes:\n\n- Modify the `install_mathjax` function to allow users to specify whether to use `async` or `defer` when loading MathJax.\n- Add a new configuration option to allow users to specify their preference for loading MathJax.\n- Update the logic that adds the MathJax script tag to respect the new configuration option.\n\nHere's a step-by-step implementation:\n\n1. Add a new configuration option in the `setup` function:\n```python\napp.add_config_value('mathjax_loading', 'async', 'html')\n```\n\n2. Modify the `install_mathjax` function to use the new configuration option:\n```python\ndef install_mathjax(app: Sphinx, pagename: str, templatename: str, context: dict[str, Any],\n                    event_arg: Any) -> None:\n    # ... existing code ...\n\n    options = {}\n    if app.config.mathjax_options:\n        options.update(app.config.mathjax_options)\n\n    # Use the new configuration option to determine loading method\n    loading_method = app.config.mathjax_loading\n    if loading_method not in ('async', 'defer'):\n        raise ExtensionError('mathjax_loading config value must be \"async\" or \"defer\"')\n\n    options[loading_method] = loading_method\n\n    app.add_js_file(app.config.mathjax_path, **options)\n```\n\n3. Update the documentation to describe the new configuration option `mathjax_loading`, which can be set to either `'async'` or `'defer'`.\n\n4. Ensure that the new configuration option is documented and that users are aware they can now control the loading method of MathJax.\n\nThis implementation allows users to choose between `async` and `defer` loading of MathJax by setting the `mathjax_loading` configuration option in their Sphinx project's `conf.py` file.",
        "bouncer_response": {
            "score": 8,
            "criteria": "The VALUE score should reflect how well the RESPONSE addresses the specific needs and context presented in the PROMPT, regardless of the completeness of the PROMPT itself.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable plan to address the feature request of deferring the loading of MathJax. It suggests modifying the 'install_mathjax' function to allow users to specify the loading method ('async' or 'defer') and adding a new configuration option. The RESPONSE also includes a step-by-step implementation guide, which is highly relevant to the feature request. The RESPONSE does not address the issue of allowing arbitrary strings for mathjax3_config and not JSON-serializing them, which was one of the three possibilities mentioned in the PROMPT. However, it does address the other two possibilities effectively. The inclusion of code snippets and references to the relevant sections of the Sphinx repository adds value to the RESPONSE by providing specific locations for the proposed changes.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711702093.2386718,
        "result": "To implement the feature request to defer loading of MathJax, you can modify the `install_mathjax` function in the `sphinx/ext/mathjax.py` file. Here's a high-level overview and specific changes:\n\n- Modify the `install_mathjax` function to allow users to specify whether to use `async` or `defer` when loading MathJax.\n- Add a new configuration option to allow users to specify their preference for loading MathJax.\n- Update the logic that adds the MathJax script tag to respect the new configuration option.\n\nHere's a step-by-step implementation:\n\n1. Add a new configuration option in the `setup` function:\n```python\napp.add_config_value('mathjax_loading', 'async', 'html')\n```\n\n2. Modify the `install_mathjax` function to use the new configuration option:\n```python\ndef install_mathjax(app: Sphinx, pagename: str, templatename: str, context: dict[str, Any],\n                    event_arg: Any) -> None:\n    # ... existing code ...\n\n    options = {}\n    if app.config.mathjax_options:\n        options.update(app.config.mathjax_options)\n\n    # Use the new configuration option to determine loading method\n    loading_method = app.config.mathjax_loading\n    if loading_method not in ('async', 'defer'):\n        raise ExtensionError('mathjax_loading config value must be \"async\" or \"defer\"')\n\n    options[loading_method] = loading_method\n\n    app.add_js_file(app.config.mathjax_path, **options)\n```\n\n3. Update the documentation to describe the new configuration option `mathjax_loading`, which can be set to either `'async'` or `'defer'`.\n\n4. Ensure that the new configuration option is documented and that users are aware they can now control the loading method of MathJax.\n\nThis implementation allows users to choose between `async` and `defer` loading of MathJax by setting the `mathjax_loading` configuration option in their Sphinx project's `conf.py` file.\n\n### Code snippets to check\n\n-  \u2192 [sphinx](https://github.com/testbed/sphinx-doc__sphinx__4.3/tree//sphinx) \u2192 [ext](https://github.com/testbed/sphinx-doc__sphinx__4.3/tree//sphinx/ext)- [Lines 70 - 122](https://github.com/testbed/sphinx-doc__sphinx__4.3/blob//sphinx/ext/mathjax.py#L70-L122)\n\n This snippet contains the logic for adding the MathJax script to the page, including the configuration options and the decision to use 'async' or 'defer'. It is directly related to the issue of configuring MathJax and the request to change 'async' to 'defer'. \n\n\n   - [Lines 1 - 67](https://github.com/testbed/sphinx-doc__sphinx__4.3/blob//sphinx/ext/mathjax.py#L1-L67)\n\n This snippet includes the MathJax URL and functions for handling math content in HTML. It is relevant because changes to how MathJax is loaded may require updates to these functions.",
        "context_relevance": 0.31000000000000005,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE provides a relevant and detailed solution to the PROMPT, addressing the specific feature request and offering a step-by-step implementation guide.\nSupporting Evidence: The RESPONSE directly addresses the feature request to defer loading of MathJax by suggesting modifications to the `install_mathjax` function and the addition of a new configuration option. It provides a clear, actionable solution that is highly relevant to the entire PROMPT. The RESPONSE loses one point because it does not address the possibility of allowing arbitrary strings for `mathjax3_config` and not JSON-serializing them, which is one of the three possibilities mentioned in the PROMPT. However, it does cover the other two possibilities in detail, which makes it highly relevant to most of the PROMPT."
        },
        "qa_relevance": 0.9
    }
}