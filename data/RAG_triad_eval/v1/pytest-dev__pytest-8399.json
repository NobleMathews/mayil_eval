{
    "id": "pytest-dev__pytest-8399",
    "repo_name": "testbed/pytest-dev__pytest__6.3",
    "task_id": 7452849006011772910,
    "title": "Starting v6.2.0, unittest setUpClass fixtures are no longer \"private\"",
    "body": "<!--\r\nThanks for submitting an issue!\r\n\r\nQuick check-list while reporting bugs:\r\n-->\r\nMinimal example:\r\n```\r\nimport unittest\r\n\r\nclass Tests(unittest.TestCase):\r\n    @classmethod\r\n    def setUpClass(cls):\r\n        pass\r\n\r\n    def test_1(self):\r\n        pass\r\n```\r\n```\r\n~$  pytest --fixtures\r\n...\r\nunittest_setUpClass_fixture_Tests [class scope] -- ../Platform/.venv/lib/python3.6/site-packages/_pytest/unittest.py:145\r\n    /home/ubuntu/src/Platform/.venv/lib/python3.6/site-packages/_pytest/unittest.py:145: no docstring available\r\n```\r\nThe expected (and previously implemented behavior) is that this fixture's name would start with an underscore, and would therefore only get printed if the additional `-v` flag was used. As it stands, I don't see a way to hide such generated fixtures which will not have a docstring.\r\n\r\nThis breaks a code-quality CI script that makes sure we don't have undocumented pytest fixtures (and the code-base has many legacy tests that use unittest, and that will not get upgraded).\r\n\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pytest-dev__pytest__6.3.git",
    "requested_commit": "",
    "mayil_response": "Doesn't seem like we have fully grasped all the specifics of this ticket \ud83d\ude10.                   But we've outlined some ideas that might help you get started:\n\n- To resolve the issue with the `setUpClass` method being exposed as a fixture without an underscore prefix, you should ensure that any `setUpClass` methods in your `unittest.TestCase` subclasses are not mistakenly being registered as pytest fixtures.\n- Since the issue is related to pytest's handling of `unittest` class setup methods, you should check if there have been any changes in pytest's handling of `unittest` compatibility that might affect this behavior.\n- If the CI script is failing due to undocumented pytest fixtures, ensure that all fixtures, especially those that are not meant to be public, start with an underscore (`_`) to prevent them from being listed by the `pytest --fixtures` command.\n- Add the necessary docstrings to all fixtures to document them properly, as the CI script might be checking for undocumented fixtures.\n- If the issue persists and is a result of a change in pytest's behavior after version 6.2.0, consider opening an issue with the pytest developers or searching for related issues in the pytest repository to see if there is a known workaround or fix.\n- None of the provided code snippets seem directly relevant to the issue described. The solution will likely involve modifying the test classes that inherit from `unittest.TestCase` and ensuring proper fixture documentation and naming conventions.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.000784,
        "snippet_processor": 0.050530000000000005,
        "issue_star_creation": 0.03726,
        "issue_star_solver": 0.03486,
        "bouncer": 0.04079
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711734564.8641212,
        "relevant_snippets": [
            {
                "code": "import pytest\n\n\n@pytest.fixture(scope=\"module\", params=range(966))\ndef foo(request):\n    return request.param\n\n\ndef test_it(foo):\n    pass\n\n\ndef test_it2(foo):\n    pass",
                "filename": "bench/manyparam.py",
                "start_index": 0,
                "end_index": 168,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.3",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "rtd:\n  project: pytest",
                "filename": ".github/config.yml",
                "start_index": 0,
                "end_index": 22,
                "start_line": 1,
                "end_line": 2,
                "max_line": 2,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.3",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "blank_issues_enabled: false\ncontact_links:\n  - name: \u2753 Support Question\n    url: https://github.com/pytest-dev/pytest/discussions\n    about: Use GitHub's new Discussions feature for questions",
                "filename": ".github/ISSUE_TEMPLATE/config.yml",
                "start_index": 0,
                "end_index": 191,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.3",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "for i in range(5000):\n    exec(\n        f\"\"\"\nclass Test{i}:\n    @classmethod\n    def setup_class(cls): pass\n    def test_1(self): pass\n    def test_2(self): pass\n    def test_3(self): pass\n\"\"\"\n    )",
                "filename": "bench/xunit.py",
                "start_index": 0,
                "end_index": 198,
                "start_line": 1,
                "end_line": 11,
                "max_line": 11,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.3",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "# shim for pylib going away\n# if pylib is installed this file will get skipped\n# (`py/__init__.py` has higher precedence)\nimport sys\n\nimport _pytest._py.error as error\nimport _pytest._py.path as path\n\nsys.modules[\"py.error\"] = error\nsys.modules[\"py.path\"] = path",
                "filename": "src/py.py",
                "start_index": 0,
                "end_index": 262,
                "start_line": 1,
                "end_line": 10,
                "max_line": 10,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.3",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "import pytest\n\nSKIP = True\n\n\n@pytest.mark.parametrize(\"x\", range(5000))\ndef test_foo(x):\n    if SKIP:\n        pytest.skip(\"heh\")",
                "filename": "bench/skip.py",
                "start_index": 0,
                "end_index": 128,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.3",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "import sys\n\nif __name__ == \"__main__\":\n    import cProfile\n    import pytest  # NOQA\n    import pstats\n\n    script = sys.argv[1:] if len(sys.argv) > 1 else [\"empty.py\"]\n    cProfile.run(\"pytest.cmdline.main(%r)\" % script, \"prof\")\n    p = pstats.Stats(\"prof\")\n    p.strip_dirs()\n    p.sort_stats(\"cumulative\")\n    print(p.print_stats(500))",
                "filename": "bench/bench.py",
                "start_index": 0,
                "end_index": 338,
                "start_line": 1,
                "end_line": 13,
                "max_line": 13,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.3",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "import datetime\nimport pathlib\nimport re\nfrom textwrap import dedent\nfrom textwrap import indent\n\nimport packaging.version\nimport platformdirs\nimport tabulate\nimport wcwidth\nfrom requests_cache import CachedResponse\nfrom requests_cache import CachedSession\nfrom requests_cache import OriginalResponse\nfrom requests_cache import SQLiteCache\nfrom tqdm import tqdm\n\n\nFILE_HEAD = r\"\"\"\n.. Note this file is autogenerated by scripts/update-plugin-list.py - usually weekly via github action\n\n.. _plugin-list:\n\nPlugin List\n===========\n\nPyPI projects that match \"pytest-\\*\" are considered plugins and are listed\nautomatically together with a manually-maintained list in `the source\ncode <https://github.com/pytest-dev/pytest/blob/main/scripts/update-plugin-list.py>`_.\nPackages classified as inactive are excluded.\n\n.. The following conditional uses a different format for this list when\n   creating a PDF, because otherwise the table gets far too wide for the\n   page.\n\n\"\"\"\nDEVELOPMENT_STATUS_CLASSIFIERS = (\n    \"Development Status :: 1 - Planning\",\n    \"Development Status :: 2 - Pre-Alpha\",\n    \"Development Status :: 3 - Alpha\",\n    \"Development Status :: 4 - Beta\",\n    \"Development Status :: 5 - Production/Stable\",\n    \"Development Status :: 6 - Mature\",\n    \"Development Status :: 7 - Inactive\",\n)\nADDITIONAL_PROJECTS = {  # set of additional projects to consider as plugins\n    \"logassert\",\n    \"nuts\",\n}\n\n\ndef escape_rst(text: str) -> str:\n    \"\"\"Rudimentary attempt to escape special RST characters to appear as\n    plain text.\"\"\"\n    text = (\n        text.replace(\"*\", \"\\\\*\")\n        .replace(\"<\", \"\\\\<\")\n        .replace(\">\", \"\\\\>\")\n        .replace(\"`\", \"\\\\`\")\n    )\n    text = re.sub(r\"_\\b\", \"\", text)\n    return text\n\n\ndef project_response_with_refresh(\n    session: CachedSession, name: str, last_serial: int\n) -> OriginalResponse | CachedResponse:\n    \"\"\"Get a http cached pypi project\n\n    force refresh in case of last serial mismatch\n    \"\"\"\n\n    response = session.get(f\"https://pypi.org/pypi/{name}/json\")\n    if int(response.headers.get(\"X-PyPI-Last-Serial\", -1)) != last_serial:\n        response = session.get(f\"https://pypi.org/pypi/{name}/json\", refresh=True)\n    return response\n\n\ndef get_session() -> CachedSession:\n    \"\"\"Configures the requests-cache session\"\"\"\n    cache_path = platformdirs.user_cache_path(\"pytest-plugin-list\")\n    cache_path.mkdir(exist_ok=True, parents=True)\n    cache_file = cache_path.joinpath(\"http_cache.sqlite3\")\n    return CachedSession(backend=SQLiteCache(cache_file))\n\n\ndef pytest_plugin_projects_from_pypi(session: CachedSession) -> dict[str, int]:\n    response = session.get(\n        \"https://pypi.org/simple\",\n        headers={\"Accept\": \"application/vnd.pypi.simple.v1+json\"},\n        refresh=True,\n    )\n    return {\n        name: p[\"_last-serial\"]\n        for p in response.json()[\"projects\"]\n        if (name := p[\"name\"]).startswith(\"pytest-\") or name in ADDITIONAL_PROJECTS\n    }",
                "filename": "scripts/update-plugin-list.py",
                "start_index": 0,
                "end_index": 2939,
                "start_line": 1,
                "end_line": 155,
                "max_line": 195,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.3",
                "sha": "",
                "context_relevance": 0.1
            },
            {
                "code": "# reference: https://docs.codecov.io/docs/codecovyml-reference\ncoverage:\n  status:\n    patch: true\n    project: false\ncomment: false",
                "filename": "codecov.yml",
                "start_index": 0,
                "end_index": 132,
                "start_line": 1,
                "end_line": 6,
                "max_line": 6,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.3",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "from setuptools import setup\n\nif __name__ == \"__main__\":\n    setup()",
                "filename": "setup.py",
                "start_index": 0,
                "end_index": 68,
                "start_line": 1,
                "end_line": 4,
                "max_line": 4,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.3",
                "sha": "",
                "context_relevance": 0.0
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {},
        "solution_task": "- To resolve the issue with the `setUpClass` method being exposed as a fixture without an underscore prefix, you should ensure that any `setUpClass` methods in your `unittest.TestCase` subclasses are not mistakenly being registered as pytest fixtures.\n- Since the issue is related to pytest's handling of `unittest` class setup methods, you should check if there have been any changes in pytest's handling of `unittest` compatibility that might affect this behavior.\n- If the CI script is failing due to undocumented pytest fixtures, ensure that all fixtures, especially those that are not meant to be public, start with an underscore (`_`) to prevent them from being listed by the `pytest --fixtures` command.\n- Add the necessary docstrings to all fixtures to document them properly, as the CI script might be checking for undocumented fixtures.\n- If the issue persists and is a result of a change in pytest's behavior after version 6.2.0, consider opening an issue with the pytest developers or searching for related issues in the pytest repository to see if there is a known workaround or fix.\n- None of the provided code snippets seem directly relevant to the issue described. The solution will likely involve modifying the test classes that inherit from `unittest.TestCase` and ensuring proper fixture documentation and naming conventions.",
        "bouncer_response": {
            "score": 4,
            "criteria": "RESPONSES that offer some actionable advice but are incomplete or partially relevant should score between 4 and 6.",
            "supporting_evidence": "The RESPONSE provides several pieces of actionable advice, such as checking for changes in pytest's handling of unittest compatibility, ensuring fixtures start with an underscore, and adding necessary docstrings. However, the RESPONSE does not directly address the core issue of the setUpClass method being exposed without an underscore prefix due to a change in pytest's behavior starting from version 6.2.0. The RESPONSE suggests opening an issue with pytest developers or searching for related issues, which is a valid step but does not provide a direct solution to the problem. Additionally, the RESPONSE does not address the specific context of the CI script failing due to undocumented pytest fixtures, nor does it provide a workaround for hiding the generated fixtures.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711734654.897676,
        "result": "Doesn't seem like we have fully grasped all the specifics of this ticket \ud83d\ude10.                   But we've outlined some ideas that might help you get started:\n\n- To resolve the issue with the `setUpClass` method being exposed as a fixture without an underscore prefix, you should ensure that any `setUpClass` methods in your `unittest.TestCase` subclasses are not mistakenly being registered as pytest fixtures.\n- Since the issue is related to pytest's handling of `unittest` class setup methods, you should check if there have been any changes in pytest's handling of `unittest` compatibility that might affect this behavior.\n- If the CI script is failing due to undocumented pytest fixtures, ensure that all fixtures, especially those that are not meant to be public, start with an underscore (`_`) to prevent them from being listed by the `pytest --fixtures` command.\n- Add the necessary docstrings to all fixtures to document them properly, as the CI script might be checking for undocumented fixtures.\n- If the issue persists and is a result of a change in pytest's behavior after version 6.2.0, consider opening an issue with the pytest developers or searching for related issues in the pytest repository to see if there is a known workaround or fix.\n- None of the provided code snippets seem directly relevant to the issue described. The solution will likely involve modifying the test classes that inherit from `unittest.TestCase` and ensuring proper fixture documentation and naming conventions.",
        "context_relevance": 0.11000000000000001,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: RESPONSE must be relevant to the entire PROMPT to get a score of 10. RESPONSE that is RELEVANT to some of the PROMPT should get a score of 2, 3, or 4. Higher score indicates more RELEVANCE.\nSupporting Evidence: The RESPONSE acknowledges the issue with the `setUpClass` method being exposed as a fixture without an underscore prefix and suggests checking pytest's handling of `unittest` compatibility, which is relevant to the problem described in the PROMPT. However, the RESPONSE does not address the specific concern about the change in behavior starting from pytest version 6.2.0, nor does it provide a direct solution to the problem of the CI script failing due to undocumented pytest fixtures. The RESPONSE is somewhat generic and does not engage with the details of the PROMPT, such as the pytest version or the specific behavior change regarding the underscore prefix. Therefore, it is only partially relevant to the PROMPT."
        },
        "qa_relevance": 0.2
    }
}