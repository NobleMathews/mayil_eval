{
    "id": "pylint-dev__pylint-8281",
    "repo_name": "testbed/pylint-dev__pylint__2.17",
    "task_id": 3432762304224443035,
    "title": "Support globbing patterns for source-roots",
    "body": "### Current problem\n\nIt's quite inconvenient having to specify every source root for complex multi-package projects like `--source-roots src/package1,src/package2,...,src/packageN`\n\n### Desired solution\n\nFor complex multi-package projects it would be nice to be able to specify source roots as `--source-roots src/*` instead of listing every one of them. IMHO, it's better to go with globbing patterns rather than with regexp patterns since those give better support for path-specific matching.\n\n### Additional context\n\n_No response_\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pylint-dev__pylint__2.17.git",
    "requested_commit": "",
    "mayil_response": "To implement globbing patterns for source roots, you will need to modify the way source roots are processed to expand glob patterns into actual directory paths. Here's a high-level overview of the steps you should take:\n\n- Modify the command-line argument parsing to accept glob patterns for `--source-roots`.\n- Use a globbing library or function to expand the glob patterns into a list of directories.\n- Ensure that the expanded directories are used throughout the codebase wherever source roots are required.\n\nHere's a more detailed implementation using Python's built-in `glob` module:\n\n1. Modify the `expand_modules` function in `pylint/lint/expand_modules.py` to expand glob patterns in `source_roots`.\n\n```python\nimport glob\n\ndef expand_source_roots(source_roots: Sequence[str]) -> list[str]:\n    expanded_roots = []\n    for root in source_roots:\n        # Expand the glob pattern to actual directories\n        expanded_roots.extend(glob.glob(root))\n    return expanded_roots\n\ndef expand_modules(\n    # ... existing parameters ...\n):\n    # Expand source roots with glob patterns\n    expanded_source_roots = expand_source_roots(source_roots)\n    \n    # Use expanded_source_roots instead of source_roots in the rest of the function\n    # ...\n```\n\n2. Update the `discover_package_path` function to use the expanded source roots.\n\n```python\ndef discover_package_path(modulepath: str, source_roots: Sequence[str]) -> str:\n    # Use the expanded source roots\n    expanded_source_roots = expand_source_roots(source_roots)\n    # ... rest of the function ...\n```\n\n3. Ensure that all other places in the code that use `source_roots` are updated to handle the expanded list of directories.\n\n4. Update the help text for the `--source-roots` option in `pylint/lint/base_options.py` to indicate that glob patterns are supported.\n\n```python\n(\n    \"source-roots\",\n    {\n        \"type\": \"glob_paths_csv\",\n        \"metavar\": \"<path>[,<path>...]\",\n        \"default\": (),\n        \"help\": \"Add paths to the list of the source roots. Supports globbing patterns. \"\n        \"The source root is an absolute path or a path relative to the current working \"\n        \"directory used to determine a package namespace for modules located under the \"\n        \"source root.\",\n    },\n),\n```\n\n5. Test the changes thoroughly to ensure that glob patterns are correctly expanded and that all source roots are properly identified.\n\nRemember to add unit tests for the new functionality to ensure that glob patterns are expanded as expected and that the rest of the system behaves correctly with the new source root paths.\n\n### Code snippets to check\n\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint) \u2192 [pyreverse](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint/pyreverse)- [Lines 3 - 313](https://github.com/testbed/pylint-dev__pylint__2.17/blob//pylint/pyreverse/main.py#L3-L313)\n\n This snippet defines the 'source-roots' option with support for globbing patterns, which is directly related to the issue of supporting glob patterns for source roots.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint/lint)- [Lines 70 - 76](https://github.com/testbed/pylint-dev__pylint__2.17/blob//pylint/lint/expand_modules.py#L70-L76)\n\n This snippet shows the function signature for 'expand_modules' which takes 'source_roots' as a parameter. Changes may be needed here to handle the glob patterns correctly. \n\n\n   - [Lines 85 - 158](https://github.com/testbed/pylint-dev__pylint__2.17/blob//pylint/lint/expand_modules.py#L85-L158)\n\n This snippet includes the usage of 'source_roots' in the 'discover_package_path' function, which may need to be modified to support glob patterns.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint/lint)- [Lines 3 - 595](https://github.com/testbed/pylint-dev__pylint__2.17/blob//pylint/lint/base_options.py#L3-L595)\n\n This snippet also defines the 'source-roots' option and is part of the base options for pylint. It may need to be reviewed to ensure consistency with the changes made for glob pattern support.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.00040649999999999996,
        "snippet_processor": 0.041080000000000005,
        "issue_star_creation": 0.029019999999999997,
        "issue_star_solver": 0.045970000000000004,
        "bouncer": 0.0244
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711699651.436599,
        "relevant_snippets": [
            {
                "code": "(\n        \"source-roots\",\n        {\n            \"type\": \"glob_paths_csv\",\n            \"metavar\": \"<path>[,<path>...]\",\n            \"default\": (),\n            \"help\": \"Add paths to the list of the source roots. Supports globbing patterns. The \"\n            \"source root is an absolute path or a path relative to the current working directory \"\n            \"used to determine a package namespace for modules located under the source root.\",\n        },\n    ),\n)",
                "filename": "pylint/pyreverse/main.py",
                "start_index": 7026,
                "end_index": 7484,
                "start_line": 3,
                "end_line": 313,
                "max_line": 313,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nimport os\nimport sys\nfrom collections.abc import Sequence\nfrom re import Pattern\n\nfrom astroid import modutils\n\nfrom pylint.typing import ErrorDescriptionDict, ModuleDescriptionDict\n\n\ndef _modpath_from_file(filename: str, is_namespace: bool, path: list[str]) -> list[str]:\n    def _is_package_cb(inner_path: str, parts: list[str]) -> bool:\n        return modutils.check_modpath_has_init(inner_path, parts) or is_namespace\n\n    return modutils.modpath_from_file_with_callback(  # type: ignore[no-any-return]\n        filename, path=path, is_package_cb=_is_package_cb\n    )\n\n\ndef discover_package_path(modulepath: str, source_roots: Sequence[str]) -> str:\n    \"\"\"Discover package path from one its modules and source roots.\"\"\"\n    dirname = os.path.realpath(os.path.expanduser(modulepath))\n    if not os.path.isdir(dirname):\n        dirname = os.path.dirname(dirname)\n\n    # Look for a source root that contains the module directory\n    for source_root in source_roots:\n        source_root = os.path.realpath(os.path.expanduser(source_root))\n        if os.path.commonpath([source_root, dirname]) == source_root:\n            return source_root\n\n    # Fall back to legacy discovery by looking for __init__.py upwards as\n    # it's the only way given that source root was not found or was not provided\n    while True:\n        if not os.path.exists(os.path.join(dirname, \"__init__.py\")):\n            return dirname\n        old_dirname = dirname\n        dirname = os.path.dirname(dirname)\n        if old_dirname == dirname:\n            return os.getcwd()\n\n\ndef _is_in_ignore_list_re(element: str, ignore_list_re: list[Pattern[str]]) -> bool:\n    \"\"\"Determines if the element is matched in a regex ignore-list.\"\"\"\n    return any(file_pattern.match(element) for file_pattern in ignore_list_re)\n\n\ndef _is_ignored_file(\n    element: str,\n    ignore_list: list[str],\n    ignore_list_re: list[Pattern[str]],\n    ignore_list_paths_re: list[Pattern[str]],\n) -> bool:\n    element = os.path.normpath(element)\n    basename = os.path.basename(element)\n    return (\n        basename in ignore_list\n        or _is_in_ignore_list_re(basename, ignore_list_re)\n        or _is_in_ignore_list_re(element, ignore_list_paths_re)\n    )\n\n\n# pylint: disable = too-many-locals, too-many-statements",
                "filename": "pylint/lint/expand_modules.py",
                "start_index": 0,
                "end_index": 2532,
                "start_line": 1,
                "end_line": 69,
                "max_line": 169,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "name: \u2728 Feature request\ndescription: Suggest an idea for pylint\nlabels: [\"Needs triage :inbox_tray:\"]\nbody:\n  - type: markdown\n    attributes:\n      value: |\n        **Thank you for wanting to make a suggestion for pylint!**\n\n        \u26a0 Please make sure that [this feature wasn't already requested][issue search] or already implemented in the main branch.\n\n\n        [issue search]: https://github.com/pylint-dev/pylint/issues?q=is%3Aissue+is%3Aopen+\n\n  - type: textarea\n    id: current-problem\n    attributes:\n      label: Current problem\n      description:\n        What are you trying to do, that you are unable to achieve with pylint as it\n        currently stands?\n      placeholder: >-\n        I'm trying to do X and I'm missing feature Y for this to be easily achievable.\n    validations:\n      required: true\n  - type: textarea\n    id: proposed-solution\n    attributes:\n      label: Desired solution\n      description: A clear and concise description of what you want to happen.\n      placeholder: >-\n        When I do X, I want to achieve Y in a situation when Z.\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: Additional context\n      description: >\n        Add any other context, links, etc. about the feature here. Describe how the\n        feature would be used, why it is needed and what it would solve.\n\n        **HINT:** You can paste https://gist.github.com links for larger files.\n      placeholder: >-\n        I asked on https://stackoverflow.com/... and the community advised me to do X, Y\n        and Z.",
                "filename": ".github/ISSUE_TEMPLATE/FEATURE-REQUEST.yml",
                "start_index": 0,
                "end_index": 1559,
                "start_line": 1,
                "end_line": 45,
                "max_line": 45,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "(\n            \"allow-wildcard-with-all\",\n            {\n                \"default\": False,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Allow wildcard imports from modules that define __all__.\",\n            },\n        ),\n        (\n            \"allow-reexport-from-package\",\n            {\n                \"default\": False,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Allow explicit reexports by alias from a package __init__.\",\n            },\n        ),\n    )",
                "filename": "pylint/checkers/imports.py",
                "start_index": 14088,
                "end_index": 14643,
                "start_line": 3,
                "end_line": 1098,
                "max_line": 1102,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def expand_modules(\n    files_or_modules: Sequence[str],\n    source_roots: Sequence[str],\n    ignore_list: list[str],\n    ignore_list_re: list[Pattern[str]],\n    ignore_list_paths_re: list[Pattern[str]],\n) -> tuple[dict[str, ModuleDescriptionDict], list[ErrorDescriptionDict]]:",
                "filename": "pylint/lint/expand_modules.py",
                "start_index": 2533,
                "end_index": 2810,
                "start_line": 70,
                "end_line": 76,
                "max_line": 169,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "(\n            \"exclude-too-few-public-methods\",\n            {\n                \"default\": [],\n                \"type\": \"regexp_csv\",\n                \"metavar\": \"<pattern>[,<pattern>...]\",\n                \"help\": \"List of regular expressions of class ancestor names \"\n                \"to ignore when counting public methods (see R0903)\",\n            },\n        ),\n    )",
                "filename": "pylint/checkers/design_analysis.py",
                "start_index": 12411,
                "end_index": 12777,
                "start_line": 3,
                "end_line": 641,
                "max_line": 658,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "name: \ud83e\udd14 Support question\ndescription: Questions about pylint that are not covered in the documentation\nlabels: [\"Needs triage :inbox_tray:\", \"Question\", \"Documentation :green_book:\"]\nbody:\n  - type: markdown\n    attributes:\n      value: >\n        **Thank you for wanting to report a problem with pylint documentation!**\n\n\n        Please fill out your suggestions below. If the problem seems straightforward,\n        feel free to go ahead and submit a pull request instead!\n\n\n        \u26a0 Verify first that your issue is not [already reported on GitHub][issue\n        search].\n\n        \ud83d\udcac If you are seeking community support, please consider [starting a discussion\n        on Discord][Discussions].\n\n\n        [issue search]:\n        https://github.com/pylint-dev/pylint/issues?q=is%3Aissue+is%3Aopen+\n\n        [Discussions]: https://discord.com/invite/Egy6P8AMB5\n\n  - type: textarea\n    id: question\n    attributes:\n      label: Question\n    validations:\n      required: true\n  - type: textarea\n    id: documentation\n    attributes:\n      label: Documentation for future user\n      description:\n        Where did you expect this information to be? What do we need to add or what do\n        we need to reorganize?\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: Additional context\n      description: >\n        Add any other context, links, etc. about the question here.\n      placeholder: >-\n        I asked on https://stackoverflow.com/... and the community advised me to do X, Y\n        and Z.",
                "filename": ".github/ISSUE_TEMPLATE/QUESTION.yml",
                "start_index": 0,
                "end_index": 1528,
                "start_line": 1,
                "end_line": 49,
                "max_line": 49,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "(\n            \"from-stdin\",\n            {\n                \"action\": \"store_true\",\n                \"default\": False,\n                \"metavar\": \"<flag>\",\n                \"help\": (\n                    \"Interpret the stdin as a python script, whose filename \"\n                    \"needs to be passed as the module_or_package argument.\"\n                ),\n            },\n        ),\n        (\n            \"source-roots\",\n            {\n                \"type\": \"glob_paths_csv\",\n                \"metavar\": \"<path>[,<path>...]\",\n                \"default\": (),\n                \"help\": \"Add paths to the list of the source roots. Supports globbing patterns. \"\n                \"The source root is an absolute path or a path relative to the current working \"\n                \"directory used to determine a package namespace for modules located under the \"\n                \"source root.\",\n            },\n        ),\n        (\n            \"recursive\",\n            {\n                \"type\": \"yn\",\n                \"metavar\": \"<yn>\",\n                \"default\": False,\n                \"help\": \"Discover python modules and packages in the file system subtree.\",\n            },\n        ),\n        (\n            \"py-version\",\n            {\n                \"default\": sys.version_info[:2],\n                \"type\": \"py_version\",\n                \"metavar\": \"<py_version>\",\n                \"help\": (\n                    \"Minimum Python version to use for version dependent checks. \"\n                    \"Will default to the version used to run pylint.\"\n                ),\n            },\n        ),\n        (\n            \"ignored-modules\",\n            {\n                \"default\": (),\n                \"type\": \"csv\",\n                \"metavar\": \"<module names>\",\n                \"help\": \"List of module names for which member attributes \"\n                \"should not be checked (useful for modules/projects \"\n                \"where namespaces are manipulated during runtime and \"\n                \"thus existing member attributes cannot be \"\n                \"deduced by static analysis). It supports qualified \"\n                \"module names, as well as Unix pattern matching.\",\n            },\n        ),\n        (\n            \"analyse-fallback-blocks\",\n            {\n                \"default\": False,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Analyse import fallback blocks. This can be used to \"\n                \"support both Python 2 and 3 compatible code, which \"\n                \"means that the block might have code that exists \"\n                \"only in one or another interpreter, leading to false \"\n                \"positives when analysed.\",\n            },\n        ),",
                "filename": "pylint/lint/base_options.py",
                "start_index": 12453,
                "end_index": 15152,
                "start_line": 3,
                "end_line": 595,
                "max_line": 596,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "basename = os.path.basename(something)\n        if _is_ignored_file(\n            something, ignore_list, ignore_list_re, ignore_list_paths_re\n        ):\n            continue\n        module_package_path = discover_package_path(something, source_roots)\n        additional_search_path = [\".\", module_package_path, *path]\n        if os.path.exists(something):\n            # this is a file or a directory\n            try:\n                modname = \".\".join(\n                    modutils.modpath_from_file(something, path=additional_search_path)\n                )\n            except ImportError:\n                modname = os.path.splitext(basename)[0]\n            if os.path.isdir(something):\n                filepath = os.path.join(something, \"__init__.py\")\n            else:\n                filepath = something\n        else:\n            # suppose it's a module or package\n            modname = something\n            try:\n                filepath = modutils.file_from_modpath(\n                    modname.split(\".\"), path=additional_search_path\n                )\n                if filepath is None:\n                    continue\n            except ImportError as ex:\n                errors.append({\"key\": \"fatal\", \"mod\": modname, \"ex\": ex})\n                continue\n        filepath = os.path.normpath(filepath)\n        modparts = (modname or something).split(\".\")\n        try:\n            spec = modutils.file_info_from_modpath(\n                modparts, path=additional_search_path\n            )\n        except ImportError:\n            # Might not be acceptable, don't crash.\n            is_namespace = False\n            is_directory = os.path.isdir(something)\n        else:\n            is_namespace = modutils.is_namespace(spec)\n            is_directory = modutils.is_directory(spec)\n        if not is_namespace:\n            if filepath in result:\n                # Always set arg flag if module explicitly given.\n                result[filepath][\"isarg\"] = True\n            else:\n                result[filepath] = {\n                    \"path\": filepath,\n                    \"name\": modname,\n                    \"isarg\": True,\n                    \"basepath\": filepath,\n                    \"basename\": modname,\n                }\n        has_init = (\n            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n            and os.path.basename(filepath) == \"__init__.py\"\n        )",
                "filename": "pylint/lint/expand_modules.py",
                "start_index": 3121,
                "end_index": 5511,
                "start_line": 85,
                "end_line": 158,
                "max_line": 169,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "version: 2\nupdates:\n  - package-ecosystem: \"pip\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    labels:\n      - \"dependency\"\n      - \"Skip news :mute:\"\n    open-pull-requests-limit: 10\n    rebase-strategy: \"disabled\"\n\n  - package-ecosystem: \"github-actions\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    labels:\n      - \"dependency\"\n      - \"Skip news :mute:\"\n    open-pull-requests-limit: 10\n    rebase-strategy: \"disabled\"",
                "filename": ".github/dependabot.yml",
                "start_index": 0,
                "end_index": 455,
                "start_line": 1,
                "end_line": 21,
                "max_line": 21,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 0.1
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "pylint/pyreverse/main.py": [
                {
                    "chunk": {
                        "code": "(\n        \"source-roots\",\n        {\n            \"type\": \"glob_paths_csv\",\n            \"metavar\": \"<path>[,<path>...]\",\n            \"default\": (),\n            \"help\": \"Add paths to the list of the source roots. Supports globbing patterns. The \"\n            \"source root is an absolute path or a path relative to the current working directory \"\n            \"used to determine a package namespace for modules located under the source root.\",\n        },\n    ),\n)",
                        "filename": "pylint/pyreverse/main.py",
                        "start_index": 7026,
                        "end_index": 7484,
                        "start_line": 3,
                        "end_line": 313,
                        "max_line": 313,
                        "git_instance": "github",
                        "repo_name": "testbed/pylint-dev__pylint__2.17",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet defines the 'source-roots' option with support for globbing patterns, which is directly related to the issue of supporting glob patterns for source roots."
                }
            ],
            "pylint/lint/expand_modules.py": [
                {
                    "chunk": {
                        "code": "def expand_modules(\n    files_or_modules: Sequence[str],\n    source_roots: Sequence[str],\n    ignore_list: list[str],\n    ignore_list_re: list[Pattern[str]],\n    ignore_list_paths_re: list[Pattern[str]],\n) -> tuple[dict[str, ModuleDescriptionDict], list[ErrorDescriptionDict]]:",
                        "filename": "pylint/lint/expand_modules.py",
                        "start_index": 2533,
                        "end_index": 2810,
                        "start_line": 70,
                        "end_line": 76,
                        "max_line": 169,
                        "git_instance": "github",
                        "repo_name": "testbed/pylint-dev__pylint__2.17",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet shows the function signature for 'expand_modules' which takes 'source_roots' as a parameter. Changes may be needed here to handle the glob patterns correctly."
                },
                {
                    "chunk": {
                        "code": "basename = os.path.basename(something)\n        if _is_ignored_file(\n            something, ignore_list, ignore_list_re, ignore_list_paths_re\n        ):\n            continue\n        module_package_path = discover_package_path(something, source_roots)\n        additional_search_path = [\".\", module_package_path, *path]\n        if os.path.exists(something):\n            # this is a file or a directory\n            try:\n                modname = \".\".join(\n                    modutils.modpath_from_file(something, path=additional_search_path)\n                )\n            except ImportError:\n                modname = os.path.splitext(basename)[0]\n            if os.path.isdir(something):\n                filepath = os.path.join(something, \"__init__.py\")\n            else:\n                filepath = something\n        else:\n            # suppose it's a module or package\n            modname = something\n            try:\n                filepath = modutils.file_from_modpath(\n                    modname.split(\".\"), path=additional_search_path\n                )\n                if filepath is None:\n                    continue\n            except ImportError as ex:\n                errors.append({\"key\": \"fatal\", \"mod\": modname, \"ex\": ex})\n                continue\n        filepath = os.path.normpath(filepath)\n        modparts = (modname or something).split(\".\")\n        try:\n            spec = modutils.file_info_from_modpath(\n                modparts, path=additional_search_path\n            )\n        except ImportError:\n            # Might not be acceptable, don't crash.\n            is_namespace = False\n            is_directory = os.path.isdir(something)\n        else:\n            is_namespace = modutils.is_namespace(spec)\n            is_directory = modutils.is_directory(spec)\n        if not is_namespace:\n            if filepath in result:\n                # Always set arg flag if module explicitly given.\n                result[filepath][\"isarg\"] = True\n            else:\n                result[filepath] = {\n                    \"path\": filepath,\n                    \"name\": modname,\n                    \"isarg\": True,\n                    \"basepath\": filepath,\n                    \"basename\": modname,\n                }\n        has_init = (\n            not (modname.endswith(\".__init__\") or modname == \"__init__\")\n            and os.path.basename(filepath) == \"__init__.py\"\n        )",
                        "filename": "pylint/lint/expand_modules.py",
                        "start_index": 3121,
                        "end_index": 5511,
                        "start_line": 85,
                        "end_line": 158,
                        "max_line": 169,
                        "git_instance": "github",
                        "repo_name": "testbed/pylint-dev__pylint__2.17",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet includes the usage of 'source_roots' in the 'discover_package_path' function, which may need to be modified to support glob patterns."
                }
            ],
            "pylint/lint/base_options.py": [
                {
                    "chunk": {
                        "code": "(\n            \"from-stdin\",\n            {\n                \"action\": \"store_true\",\n                \"default\": False,\n                \"metavar\": \"<flag>\",\n                \"help\": (\n                    \"Interpret the stdin as a python script, whose filename \"\n                    \"needs to be passed as the module_or_package argument.\"\n                ),\n            },\n        ),\n        (\n            \"source-roots\",\n            {\n                \"type\": \"glob_paths_csv\",\n                \"metavar\": \"<path>[,<path>...]\",\n                \"default\": (),\n                \"help\": \"Add paths to the list of the source roots. Supports globbing patterns. \"\n                \"The source root is an absolute path or a path relative to the current working \"\n                \"directory used to determine a package namespace for modules located under the \"\n                \"source root.\",\n            },\n        ),\n        (\n            \"recursive\",\n            {\n                \"type\": \"yn\",\n                \"metavar\": \"<yn>\",\n                \"default\": False,\n                \"help\": \"Discover python modules and packages in the file system subtree.\",\n            },\n        ),\n        (\n            \"py-version\",\n            {\n                \"default\": sys.version_info[:2],\n                \"type\": \"py_version\",\n                \"metavar\": \"<py_version>\",\n                \"help\": (\n                    \"Minimum Python version to use for version dependent checks. \"\n                    \"Will default to the version used to run pylint.\"\n                ),\n            },\n        ),\n        (\n            \"ignored-modules\",\n            {\n                \"default\": (),\n                \"type\": \"csv\",\n                \"metavar\": \"<module names>\",\n                \"help\": \"List of module names for which member attributes \"\n                \"should not be checked (useful for modules/projects \"\n                \"where namespaces are manipulated during runtime and \"\n                \"thus existing member attributes cannot be \"\n                \"deduced by static analysis). It supports qualified \"\n                \"module names, as well as Unix pattern matching.\",\n            },\n        ),\n        (\n            \"analyse-fallback-blocks\",\n            {\n                \"default\": False,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Analyse import fallback blocks. This can be used to \"\n                \"support both Python 2 and 3 compatible code, which \"\n                \"means that the block might have code that exists \"\n                \"only in one or another interpreter, leading to false \"\n                \"positives when analysed.\",\n            },\n        ),",
                        "filename": "pylint/lint/base_options.py",
                        "start_index": 12453,
                        "end_index": 15152,
                        "start_line": 3,
                        "end_line": 595,
                        "max_line": 596,
                        "git_instance": "github",
                        "repo_name": "testbed/pylint-dev__pylint__2.17",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet also defines the 'source-roots' option and is part of the base options for pylint. It may need to be reviewed to ensure consistency with the changes made for glob pattern support."
                }
            ]
        },
        "solution_task": "To implement globbing patterns for source roots, you will need to modify the way source roots are processed to expand glob patterns into actual directory paths. Here's a high-level overview of the steps you should take:\n\n- Modify the command-line argument parsing to accept glob patterns for `--source-roots`.\n- Use a globbing library or function to expand the glob patterns into a list of directories.\n- Ensure that the expanded directories are used throughout the codebase wherever source roots are required.\n\nHere's a more detailed implementation using Python's built-in `glob` module:\n\n1. Modify the `expand_modules` function in `pylint/lint/expand_modules.py` to expand glob patterns in `source_roots`.\n\n```python\nimport glob\n\ndef expand_source_roots(source_roots: Sequence[str]) -> list[str]:\n    expanded_roots = []\n    for root in source_roots:\n        # Expand the glob pattern to actual directories\n        expanded_roots.extend(glob.glob(root))\n    return expanded_roots\n\ndef expand_modules(\n    # ... existing parameters ...\n):\n    # Expand source roots with glob patterns\n    expanded_source_roots = expand_source_roots(source_roots)\n    \n    # Use expanded_source_roots instead of source_roots in the rest of the function\n    # ...\n```\n\n2. Update the `discover_package_path` function to use the expanded source roots.\n\n```python\ndef discover_package_path(modulepath: str, source_roots: Sequence[str]) -> str:\n    # Use the expanded source roots\n    expanded_source_roots = expand_source_roots(source_roots)\n    # ... rest of the function ...\n```\n\n3. Ensure that all other places in the code that use `source_roots` are updated to handle the expanded list of directories.\n\n4. Update the help text for the `--source-roots` option in `pylint/lint/base_options.py` to indicate that glob patterns are supported.\n\n```python\n(\n    \"source-roots\",\n    {\n        \"type\": \"glob_paths_csv\",\n        \"metavar\": \"<path>[,<path>...]\",\n        \"default\": (),\n        \"help\": \"Add paths to the list of the source roots. Supports globbing patterns. \"\n        \"The source root is an absolute path or a path relative to the current working \"\n        \"directory used to determine a package namespace for modules located under the \"\n        \"source root.\",\n    },\n),\n```\n\n5. Test the changes thoroughly to ensure that glob patterns are correctly expanded and that all source roots are properly identified.\n\nRemember to add unit tests for the new functionality to ensure that glob patterns are expanded as expected and that the rest of the system behaves correctly with the new source root paths.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant suggestions that can directly lead to the successful implementation or improvement of the requested feature.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable plan for implementing globbing patterns for source roots, which directly addresses the feature request in the PROMPT. It outlines specific steps to modify the command-line argument parsing, use a globbing library, and ensure that the expanded directories are used throughout the codebase. The RESPONSE also includes code snippets and references to the relevant parts of the codebase that need to be updated, such as the `expand_modules` function and the `discover_package_path` function. Additionally, it suggests updating the help text and adding unit tests for the new functionality. The RESPONSE is comprehensive and covers all aspects of the feature request, including the preference for globbing patterns over regex patterns as mentioned in the PROMPT.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711699725.877491,
        "result": "To implement globbing patterns for source roots, you will need to modify the way source roots are processed to expand glob patterns into actual directory paths. Here's a high-level overview of the steps you should take:\n\n- Modify the command-line argument parsing to accept glob patterns for `--source-roots`.\n- Use a globbing library or function to expand the glob patterns into a list of directories.\n- Ensure that the expanded directories are used throughout the codebase wherever source roots are required.\n\nHere's a more detailed implementation using Python's built-in `glob` module:\n\n1. Modify the `expand_modules` function in `pylint/lint/expand_modules.py` to expand glob patterns in `source_roots`.\n\n```python\nimport glob\n\ndef expand_source_roots(source_roots: Sequence[str]) -> list[str]:\n    expanded_roots = []\n    for root in source_roots:\n        # Expand the glob pattern to actual directories\n        expanded_roots.extend(glob.glob(root))\n    return expanded_roots\n\ndef expand_modules(\n    # ... existing parameters ...\n):\n    # Expand source roots with glob patterns\n    expanded_source_roots = expand_source_roots(source_roots)\n    \n    # Use expanded_source_roots instead of source_roots in the rest of the function\n    # ...\n```\n\n2. Update the `discover_package_path` function to use the expanded source roots.\n\n```python\ndef discover_package_path(modulepath: str, source_roots: Sequence[str]) -> str:\n    # Use the expanded source roots\n    expanded_source_roots = expand_source_roots(source_roots)\n    # ... rest of the function ...\n```\n\n3. Ensure that all other places in the code that use `source_roots` are updated to handle the expanded list of directories.\n\n4. Update the help text for the `--source-roots` option in `pylint/lint/base_options.py` to indicate that glob patterns are supported.\n\n```python\n(\n    \"source-roots\",\n    {\n        \"type\": \"glob_paths_csv\",\n        \"metavar\": \"<path>[,<path>...]\",\n        \"default\": (),\n        \"help\": \"Add paths to the list of the source roots. Supports globbing patterns. \"\n        \"The source root is an absolute path or a path relative to the current working \"\n        \"directory used to determine a package namespace for modules located under the \"\n        \"source root.\",\n    },\n),\n```\n\n5. Test the changes thoroughly to ensure that glob patterns are correctly expanded and that all source roots are properly identified.\n\nRemember to add unit tests for the new functionality to ensure that glob patterns are expanded as expected and that the rest of the system behaves correctly with the new source root paths.\n\n### Code snippets to check\n\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint) \u2192 [pyreverse](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint/pyreverse)- [Lines 3 - 313](https://github.com/testbed/pylint-dev__pylint__2.17/blob//pylint/pyreverse/main.py#L3-L313)\n\n This snippet defines the 'source-roots' option with support for globbing patterns, which is directly related to the issue of supporting glob patterns for source roots.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint/lint)- [Lines 70 - 76](https://github.com/testbed/pylint-dev__pylint__2.17/blob//pylint/lint/expand_modules.py#L70-L76)\n\n This snippet shows the function signature for 'expand_modules' which takes 'source_roots' as a parameter. Changes may be needed here to handle the glob patterns correctly. \n\n\n   - [Lines 85 - 158](https://github.com/testbed/pylint-dev__pylint__2.17/blob//pylint/lint/expand_modules.py#L85-L158)\n\n This snippet includes the usage of 'source_roots' in the 'discover_package_path' function, which may need to be modified to support glob patterns.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint/lint)- [Lines 3 - 595](https://github.com/testbed/pylint-dev__pylint__2.17/blob//pylint/lint/base_options.py#L3-L595)\n\n This snippet also defines the 'source-roots' option and is part of the base options for pylint. It may need to be reviewed to ensure consistency with the changes made for glob pattern support.",
        "context_relevance": 0.43,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE is relevant to the entire PROMPT and answers the PROMPT completely.\nSupporting Evidence: The RESPONSE provides a detailed solution to the problem described in the PROMPT, including code examples and steps to implement globbing patterns for source roots. It addresses the current problem, the desired solution, and even provides additional context by referencing specific code snippets and suggesting updates to the documentation. The RESPONSE is directly related to the PROMPT and provides a comprehensive answer, fulfilling all the requirements for a score of 10."
        },
        "qa_relevance": 1.0
    }
}