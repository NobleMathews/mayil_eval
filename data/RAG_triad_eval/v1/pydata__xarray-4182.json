{
    "id": "pydata__xarray-4182",
    "repo_name": "testbed/pydata__xarray__0.12",
    "task_id": 8281653670988500599,
    "title": "Pre-expand data and attributes in DataArray/Variable HTML repr?",
    "body": "## Proposal\r\n\r\nGiven that a major purpose for plotting an array is to look at data or attributes, I wonder if we should expand these sections by default?\r\n- I worry that clicking on icons to expand sections may not be easy to discover\r\n- This would also be consistent with the text repr, which shows these sections by default (the Dataset repr is already consistent by default between text and HTML already)\r\n\r\n## Context\r\n\r\nCurrently the HTML repr for DataArray/Variable looks like this:\r\n![image](https://user-images.githubusercontent.com/1217238/85610183-9e014400-b60b-11ea-8be1-5f9196126acd.png)\r\n\r\nTo see array data, you have to click on the ![image](https://user-images.githubusercontent.com/1217238/85610286-b7a28b80-b60b-11ea-9496-a4f9d9b048ac.png) icon:\r\n![image](https://user-images.githubusercontent.com/1217238/85610262-b1acaa80-b60b-11ea-9621-17f0bcffb885.png)\r\n\r\n(thanks to @max-sixty for making this a little bit more manageably sized in https://github.com/pydata/xarray/pull/3905!)\r\n\r\nThere's also a really nice repr for nested dask arrays:\r\n![image](https://user-images.githubusercontent.com/1217238/85610598-fcc6bd80-b60b-11ea-8b1a-5cf950449dcb.png)\r\n\r\n\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pydata__xarray__0.12.git",
    "requested_commit": "",
    "mayil_response": "To implement the feature of pre-expanding data and attributes in the DataArray/Variable HTML representation, you will need to modify the HTML generation code to ensure that the sections for data and attributes are expanded by default. Here's how you can do it:\n\n- Modify the `_obj_repr` function in `xarray/core/formatting_html.py` to set the checkboxes for data and attributes as checked by default.\n- Update the JavaScript/CSS logic if necessary to ensure that the sections appear expanded when the checkboxes are checked.\n\nHere's a high-level overview of the changes:\n\n- In `xarray/core/formatting_html.py`, locate the `array_repr` and `dataset_repr` functions.\n- Within these functions, find where the `input` elements for the data and attributes sections are created.\n- Set the `checked` attribute on these `input` elements to ensure they are checked by default.\n\nHere's a pseudo code snippet to illustrate the changes:\n\n```python\ndef array_repr(arr):\n    # ... existing code ...\n\n    # Find the section where the data checkbox is created\n    data_id = \"data-\" + str(uuid.uuid4())\n    # Add the 'checked' attribute to the input element\n    data_repr = f\"<input id='{data_id}' class='xr-var-data-in' type='checkbox' checked>\"\n\n    # ... existing code ...\n\n    return _obj_repr(arr, header_components, sections)\n\n# Similar changes would be made to the dataset_repr function\n```\n\nAdditionally, ensure that the CSS rules in `xarray/static/css/style.css` are set up to display the content when the checkboxes are checked. The existing rules should already handle this, but it's worth verifying.\n\nFinally, test the changes to ensure that the data and attributes sections are expanded by default in the HTML representation of DataArray and Variable objects.\n\n### Code snippets to check\n\n-  \u2192 [xarray](https://github.com/testbed/pydata__xarray__0.12/tree//xarray) \u2192 [core](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/core)- [Lines 254 - 342](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting_html.py#L254-L342)\n\n This snippet contains the HTML representation logic for DataArray and Variable, which is relevant to the issue of pre-expanding data and attributes in the HTML repr. \n\n\n   - [Lines 75 - 296](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting_html.py#L75-L296)\n\n This snippet is relevant as it contains the HTML summary generation for variables, which may need to be modified to pre-expand sections in the HTML repr.\n-  \u2192 [xarray](https://github.com/testbed/pydata__xarray__0.12/tree//xarray) \u2192 [core](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/core)- [Lines 626 - 877](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting.py#L626-L877)\n\n This snippet includes the logic for the text representation of DataArray and Variable, which is mentioned in the issue for consistency with the HTML repr.\n-  \u2192 [xarray](https://github.com/testbed/pydata__xarray__0.12/tree//xarray) \u2192 [static](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/static) \u2192 [css](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/static/css)- [Lines 1 - 340](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/static/css/style.css#L1-L340)\n\n The CSS styles defined in this snippet may need to be updated to reflect changes in how data and attributes are displayed by default in the HTML repr.",
    "ai_cost": {
        "search_embedding": 2.6e-07,
        "issue_classifier": 0.0007295,
        "snippet_processor": 0.07126,
        "issue_star_creation": 0.05117,
        "issue_star_solver": 0.07,
        "bouncer": 0.04018000000000001
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711759604.797781,
        "relevant_snippets": [
            {
                "code": "cursive_repr(\"<recursive array>\")\ndef array_repr(arr):\n    from xarray.core.variable import Variable\n\n    max_rows = OPTIONS[\"display_max_rows\"]\n\n    # used for DataArray, Variable and IndexVariable\n    if hasattr(arr, \"name\") and arr.name is not None:\n        name_str = f\"{arr.name!r} \"\n    else:\n        name_str = \"\"\n\n    if (\n        isinstance(arr, Variable)\n        or _get_boolean_with_default(\"display_expand_data\", default=True)\n        or isinstance(arr.variable._data, MemoryCachedArray)\n    ):\n        data_repr = short_data_repr(arr)\n    else:\n        data_repr = inline_variable_array_repr(arr.variable, OPTIONS[\"display_width\"])\n\n    start = f\"<xarray.{type(arr).__name__} {name_str}\"\n    dims = dim_summary_limited(arr, col_width=len(start) + 1, max_rows=max_rows)\n    summary = [\n        f\"{start}({dims})>\",\n        data_repr,\n    ]\n\n    if hasattr(arr, \"coords\"):\n        if arr.coords:\n            col_width = _calculate_col_width(arr.coords)\n            summary.append(\n                coords_repr(arr.coords, col_width=col_width, max_rows=max_rows)\n            )\n\n        unindexed_dims_str = unindexed_dims_repr(\n            arr.dims, arr.coords, max_rows=max_rows\n        )\n        if unindexed_dims_str:\n            summary.append(unindexed_dims_str)\n\n        display_default_indexes = _get_boolean_with_default(\n            \"display_default_indexes\", False\n        )\n\n        xindexes = filter_nondefault_indexes(\n            _get_indexes_dict(arr.xindexes), not display_default_indexes\n        )\n\n        if xindexes:\n            summary.append(indexes_repr(xindexes, max_rows=max_rows))\n\n    if arr.attrs:\n        summary.append(attrs_repr(arr.attrs, max_rows=max_rows))\n\n    return \"\\n\".join(summary)\n\n\n@recursive_repr(\"<recursive Dataset>\")\ndef dataset_repr(ds):\n    summary = [f\"<xarray.{type(ds).__name__}>\"]\n\n    col_width = _calculate_col_width(ds.variables)\n    max_rows = OPTIONS[\"display_max_rows\"]\n\n    dims_start = pretty_print(\"Dimensions:\", col_width)\n    dims_values = dim_summary_limited(ds, col_width=col_width + 1, max_rows=max_rows)\n    summary.append(f\"{dims_start}({dims_values})\")\n\n    if ds.coords:\n        summary.append(coords_repr(ds.coords, col_width=col_width, max_rows=max_rows))\n\n    unindexed_dims_str = unindexed_dims_repr(ds.dims, ds.coords, max_rows=max_rows)\n    if unindexed_dims_str:\n        summary.append(unindexed_dims_str)\n\n    summary.append(data_vars_repr(ds.data_vars, col_width=col_width, max_rows=max_rows))\n\n    display_default_indexes = _get_boolean_with_default(\n        \"display_default_indexes\", False\n    )\n    xindexes = filter_nondefault_indexes(\n        _get_indexes_dict(ds.xindexes), not display_default_indexes\n    )\n    if xindexes:\n        summary.append(indexes_repr(xindexes, max_rows=max_rows))\n\n    if ds.attrs:\n        summary.append(attrs_repr(ds.attrs, max_rows=max_rows))\n\n    return \"\\n\".join(summary)\n\n\ndef",
                "filename": "xarray/core/formatting.py",
                "start_index": 20303,
                "end_index": 23207,
                "start_line": 626,
                "end_line": 877,
                "max_line": 893,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 0.7
            },
            {
                "code": "import numpy as np\nimport pandas as pd\n\nimport xarray as xr\n\n\nclass Repr:\n    def setup(self):\n        a = np.arange(0, 100)\n        data_vars = dict()\n        for i in a:\n            data_vars[f\"long_variable_name_{i}\"] = xr.DataArray(\n                name=f\"long_variable_name_{i}\",\n                data=np.arange(0, 20),\n                dims=[f\"long_coord_name_{i}_x\"],\n                coords={f\"long_coord_name_{i}_x\": np.arange(0, 20) * 2},\n            )\n        self.ds = xr.Dataset(data_vars)\n        self.ds.attrs = {f\"attr_{k}\": 2 for k in a}\n\n    def time_repr(self):\n        repr(self.ds)\n\n    def time_repr_html(self):\n        self.ds._repr_html_()\n\n\nclass ReprMultiIndex:\n    def setup(self):\n        index = pd.MultiIndex.from_product(\n            [range(1000), range(1000)], names=(\"level_0\", \"level_1\")\n        )\n        series = pd.Series(range(1000 * 1000), index=index)\n        self.da = xr.DataArray(series)\n\n    def time_repr(self):\n        repr(self.da)\n\n    def time_repr_html(self):\n        self.da._repr_html_()",
                "filename": "asv_bench/benchmarks/repr.py",
                "start_index": 0,
                "end_index": 1036,
                "start_line": 1,
                "end_line": 40,
                "max_line": 40,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "index_section = partial(\n    _mapping_section,\n    name=\"Indexes\",\n    details_func=summarize_indexes,\n    max_items_collapse=0,\n    expand_option_name=\"display_expand_indexes\",\n)\n\nattr_section = partial(\n    _mapping_section,\n    name=\"Attributes\",\n    details_func=summarize_attrs,\n    max_items_collapse=10,\n    expand_option_name=\"display_expand_attrs\",\n)\n\n\ndef _get_indexes_dict(indexes):\n    return {\n        tuple(index_vars.keys()): idx for idx, index_vars in indexes.group_by_index()\n    }\n\n\ndef _obj_repr(obj, header_components, sections):\n    \"\"\"Return HTML repr of an xarray object.\n\n    If CSS is not injected (untrusted notebook), fallback to the plain text repr.\n\n    \"\"\"\n    header = f\"<div class='xr-header'>{''.join(h for h in header_components)}</div>\"\n    sections = \"\".join(f\"<li class='xr-section-item'>{s}</li>\" for s in sections)\n\n    icons_svg, css_style = _load_static_files()\n    return (\n        \"<div>\"\n        f\"{icons_svg}<style>{css_style}</style>\"\n        f\"<pre class='xr-text-repr-fallback'>{escape(repr(obj))}</pre>\"\n        \"<div class='xr-wrap' style='display:none'>\"\n        f\"{header}\"\n        f\"<ul class='xr-sections'>{sections}</ul>\"\n        \"</div>\"\n        \"</div>\"\n    )\n\n\ndef array_repr(arr):\n    dims = OrderedDict((k, v) for k, v in zip(arr.dims, arr.shape))\n    if hasattr(arr, \"xindexes\"):\n        indexed_dims = arr.xindexes.dims\n    else:\n        indexed_dims = {}\n\n    obj_type = f\"xarray.{type(arr).__name__}\"\n    arr_name = f\"'{arr.name}'\" if getattr(arr, \"name\", None) else \"\"\n\n    header_components = [\n        f\"<div class='xr-obj-type'>{obj_type}</div>\",\n        f\"<div class='xr-array-name'>{arr_name}</div>\",\n        format_dims(dims, indexed_dims),\n    ]\n\n    sections = [array_section(arr)]\n\n    if hasattr(arr, \"coords\"):\n        sections.append(coord_section(arr.coords))\n\n    if hasattr(arr, \"xindexes\"):\n        indexes = _get_indexes_dict(arr.xindexes)\n        sections.append(index_section(indexes))\n\n    sections.append(attr_section(arr.attrs))\n\n    return _obj_repr(arr, header_components, sections)\n\n\ndef dataset_repr(ds):\n    obj_type = f\"xarray.{type(ds).__name__}\"\n\n    header_components = [f\"<div class='xr-obj-type'>{escape(obj_type)}</div>\"]\n\n    sections = [\n        dim_section(ds),\n        coord_section(ds.coords),\n        datavar_section(ds.data_vars),\n        index_section(_get_indexes_dict(ds.xindexes)),\n        attr_section(ds.attrs),\n    ]\n\n    return _obj_repr(ds, header_components, sections)",
                "filename": "xarray/core/formatting_html.py",
                "start_index": 7729,
                "end_index": 10213,
                "start_line": 254,
                "end_line": 342,
                "max_line": 342,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "name: \ud83d\udca1 Feature Request\ndescription: Suggest an idea for xarray\nlabels: [enhancement]\nbody:\n  - type: textarea\n    id: description\n    attributes:\n      label: Is your feature request related to a problem?\n      description: |\n        Please do a quick search of existing issues to make sure that this has not been asked before.\n        Please provide a clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\n    validations:\n      required: true\n  - type: textarea\n    id: solution\n    attributes:\n      label: Describe the solution you'd like\n      description: |\n        A clear and concise description of what you want to happen.\n  - type: textarea\n    id: alternatives\n    attributes:\n      label: Describe alternatives you've considered\n      description: |\n        A clear and concise description of any alternative solutions or features you've considered.\n    validations:\n      required: false\n  - type: textarea\n    id: additional-context\n    attributes:\n      label: Additional context\n      description: |\n        Add any other context about the feature request here.\n    validations:\n      required: false",
                "filename": ".github/ISSUE_TEMPLATE/newfeature.yml",
                "start_index": 0,
                "end_index": 1154,
                "start_line": 1,
                "end_line": 35,
                "max_line": 35,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def inline_dask_repr(array):\n    \"\"\"Similar to dask.array.DataArray.__repr__, but without\n    redundant information that's already printed by the repr\n    function of the xarray wrapper.\n    \"\"\"\n    assert isinstance(array, array_type(\"dask\")), array\n\n    chunksize = tuple(c[0] for c in array.chunks)\n\n    if hasattr(array, \"_meta\"):\n        meta = array._meta\n        identifier = (type(meta).__module__, type(meta).__name__)\n        meta_repr = _KNOWN_TYPE_REPRS.get(identifier, \".\".join(identifier))\n        meta_string = f\", meta={meta_repr}\"\n    else:\n        meta_string = \"\"\n\n    return f\"dask.array<chunksize={chunksize}{meta_string}>\"\n\n\ndef inline_sparse_repr(array):\n    \"\"\"Similar to sparse.COO.__repr__, but without the redundant shape/dtype.\"\"\"\n    sparse_array_type = array_type(\"sparse\")\n    assert isinstance(array, sparse_array_type), array\n    return \"<{}: nnz={:d}, fill_value={!s}>\".format(\n        type(array).__name__, array.nnz, array.fill_value\n    )\n\n\ndef inline_variable_array_repr(var, max_width):\n    \"\"\"Build a one-line summary of a variable's data.\"\"\"\n    if hasattr(var._data, \"_repr_inline_\"):\n        return var._data._repr_inline_(max_width)\n    if var._in_memory:\n        return format_array_flat(var, max_width)\n    dask_array_type = array_type(\"dask\")\n    if isinstance(var._data, dask_array_type):\n        return inline_dask_repr(var.data)\n    sparse_array_type = array_type(\"sparse\")\n    if isinstance(var._data, sparse_array_type):\n        return inline_sparse_repr(var.data)\n    if hasattr(var._data, \"__array_function__\"):\n        return maybe_truncate(repr(var._data).replace(\"\\n\", \" \"), max_width)\n    # internal xarray array type\n    return \"...\"\n\n\ndef summarize_variable(\n    name: Hashable,\n    var,\n    col_width: int,\n    max_width: int | None = None,\n    is_index: bool = False,\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    variable = getattr(var, \"variable\", var)\n\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n\n    marker = \"*\" if is_index else \" \"\n    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n\n    if variable.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, variable.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{variable.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(variable, values_width)\n\n    return front_str + values_str",
                "filename": "xarray/core/formatting.py",
                "start_index": 8342,
                "end_index": 11003,
                "start_line": 240,
                "end_line": 316,
                "max_line": 893,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def summarize_variable(name, var, is_index=False, dtype=None):\n    variable = var.variable if hasattr(var, \"variable\") else var\n\n    cssclass_idx = \" class='xr-has-index'\" if is_index else \"\"\n    dims_str = f\"({', '.join(escape(dim) for dim in var.dims)})\"\n    name = escape(str(name))\n    dtype = dtype or escape(str(var.dtype))\n\n    # \"unique\" ids required to expand/collapse subsections\n    attrs_id = \"attrs-\" + str(uuid.uuid4())\n    data_id = \"data-\" + str(uuid.uuid4())\n    disabled = \"\" if len(var.attrs) else \"disabled\"\n\n    preview = escape(inline_variable_array_repr(variable, 35))\n    attrs_ul = summarize_attrs(var.attrs)\n    data_repr = short_data_repr_html(variable)\n\n    attrs_icon = _icon(\"icon-file-text2\")\n    data_icon = _icon(\"icon-database\")\n\n    return (\n        f\"<div class='xr-var-name'><span{cssclass_idx}>{name}</span></div>\"\n        f\"<div class='xr-var-dims'>{dims_str}</div>\"\n        f\"<div class='xr-var-dtype'>{dtype}</div>\"\n        f\"<div class='xr-var-preview xr-preview'>{preview}</div>\"\n        f\"<input id='{attrs_id}' class='xr-var-attrs-in' \"\n        f\"type='checkbox' {disabled}>\"\n        f\"<label for='{attrs_id}' title='Show/Hide attributes'>\"\n        f\"{attrs_icon}</label>\"\n        f\"<input id='{data_id}' class='xr-var-data-in' type='checkbox'>\"\n        f\"<label for='{data_id}' title='Show/Hide data repr'>\"\n        f\"{data_icon}</label>\"\n        f\"<div class='xr-var-attrs'>{attrs_ul}</div>\"\n        f\"<div class='xr-var-data'>{data_repr}</div>\"\n    )\n\n\ndef summarize_coords(variables):\n    li_items = []\n    for k, v in variables.items():\n        li_content = summarize_variable(k, v, is_index=k in variables.xindexes)\n        li_items.append(f\"<li class='xr-var-item'>{li_content}</li>\")\n\n    vars_li = \"\".join(li_items)\n\n    return f\"<ul class='xr-var-list'>{vars_li}</ul>\"\n\n\ndef summarize_vars(variables):\n    vars_li = \"\".join(\n        f\"<li class='xr-var-item'>{summarize_variable(k, v)}</li>\"\n        for k, v in variables.items()\n    )\n\n    return f\"<ul class='xr-var-list'>{vars_li}</ul>\"\n\n\ndef short_index_repr_html(index):\n    if hasattr(index, \"_repr_html_\"):\n        return index._repr_html_()\n\n    return f\"<pre>{escape(repr(index))}</pre>\"\n\n\ndef summarize_index(coord_names, index):\n    name = \"<br>\".join([escape(str(n)) for n in coord_names])\n\n    index_id = f\"index-{uuid.uuid4()}\"\n    preview = escape(inline_index_repr(index))\n    details = short_index_repr_html(index)\n\n    data_icon = _icon(\"icon-database\")\n\n    return (\n        f\"<div class='xr-index-name'><div>{name}</div></div>\"\n        f\"<div class='xr-index-preview'>{preview}</div>\"\n        f\"<div></div>\"\n        f\"<input id='{index_id}' class='xr-index-data-in' type='checkbox'/>\"\n        f\"<label for='{index_id}' title='Show/Hide index repr'>{data_icon}</label>\"\n        f\"<div class='xr-index-data'>{details}</div>\"\n    )",
                "filename": "xarray/core/formatting_html.py",
                "start_index": 1914,
                "end_index": 4767,
                "start_line": 75,
                "end_line": 296,
                "max_line": 342,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\nhtml[theme=dark],\nbody[data-theme=dark],\nbody.vscode-dark {\n  --xr-font-color0: rgba(255, 255, 255, 1);\n  --xr-font-color2: rgba(255, 255, 255, 0.54);\n  --xr-font-color3: rgba(255, 255, 255, 0.38);\n  --xr-border-color: #1F1F1F;\n  --xr-disabled-color: #515151;\n  --xr-background-color: #111111;\n  --xr-background-color-row-even: #111111;\n  --xr-background-color-row-odd: #313131;\n}\n\n.xr-wrap {\n  display: block !important;\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-text-repr-fallback {\n  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n  display: none;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.x",
                "filename": "xarray/static/css/style.css",
                "start_index": 0,
                "end_index": 2932,
                "start_line": 1,
                "end_line": 340,
                "max_line": 348,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "from __future__ import annotations\n\nimport uuid\nfrom collections import OrderedDict\nfrom functools import lru_cache, partial\nfrom html import escape\nfrom importlib.resources import files\n\nfrom xarray.core.formatting import (\n    inline_index_repr,\n    inline_variable_array_repr,\n    short_data_repr,\n)\nfrom xarray.core.options import _get_boolean_with_default\n\nSTATIC_FILES = (\n    (\"xarray.static.html\", \"icons-svg-inline.html\"),\n    (\"xarray.static.css\", \"style.css\"),\n)\n\n\n@lru_cache(None)\ndef _load_static_files():\n    \"\"\"Lazily load the resource files into memory the first time they are needed\"\"\"\n    return [\n        files(package).joinpath(resource).read_text(encoding=\"utf-8\")\n        for package, resource in STATIC_FILES\n    ]\n\n\ndef short_data_repr_html(array):\n    \"\"\"Format \"data\" for DataArray and Variable.\"\"\"\n    internal_data = getattr(array, \"variable\", array)._data\n    if hasattr(internal_data, \"_repr_html_\"):\n        return internal_data._repr_html_()\n    text = escape(short_data_repr(array))\n    return f\"<pre>{text}</pre>\"\n\n\ndef format_dims(dims, dims_with_index):\n    if not dims:\n        return \"\"\n\n    dim_css_map = {\n        dim: \" class='xr-has-index'\" if dim in dims_with_index else \"\" for dim in dims\n    }\n\n    dims_li = \"\".join(\n        f\"<li><span{dim_css_map[dim]}>\" f\"{escape(str(dim))}</span>: {size}</li>\"\n        for dim, size in dims.items()\n    )\n\n    return f\"<ul class='xr-dim-list'>{dims_li}</ul>\"\n\n\ndef summarize_attrs(attrs):\n    attrs_dl = \"\".join(\n        f\"<dt><span>{escape(str(k))} :</span></dt>\" f\"<dd>{escape(str(v))}</dd>\"\n        for k, v in attrs.items()\n    )\n\n    return f\"<dl class='xr-attrs'>{attrs_dl}</dl>\"\n\n\ndef _icon(icon_name):\n    # icon_name should be defined in xarray/static/html/icon-svg-inline.html\n    return (\n        \"<svg class='icon xr-{0}'>\"\n        \"<use xlink:href='#{0}'>\"\n        \"</use>\"\n        \"</svg>\".format(icon_name)\n    )",
                "filename": "xarray/core/formatting_html.py",
                "start_index": 0,
                "end_index": 1911,
                "start_line": 1,
                "end_line": 296,
                "max_line": 342,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "def summarize_attr(key, value, col_width=None):\n    \"\"\"Summary for __repr__ - use ``X.attrs[key]`` for full value.\"\"\"\n    # Indent key and add ':', then right-pad if col_width is not None\n    k_str = f\"    {key}:\"\n    if col_width is not None:\n        k_str = pretty_print(k_str, col_width)\n    # Replace tabs and newlines, so we print on one line in known width\n    v_str = str(value).replace(\"\\t\", \"\\\\t\").replace(\"\\n\", \"\\\\n\")\n    # Finally, truncate to the desired display width\n    return maybe_truncate(f\"{k_str} {v_str}\", OPTIONS[\"display_width\"])\n\n\nEMPTY_REPR = \"    *empty*\"\n\n\ndef _calculate_col_width(col_items):\n    max_name_length = max(len(str(s)) for s in col_items) if col_items else 0\n    col_width = max(max_name_length, 7) + 6\n    return col_width\n\n\ndef _mapping_repr(\n    mapping,\n    title,\n    summarizer,\n    expand_option_name,\n    col_width=None,\n    max_rows=None,\n    indexes=None,\n):\n    if col_width is None:\n        col_width = _calculate_col_width(mapping)\n\n    summarizer_kwargs = defaultdict(dict)\n    if indexes is not None:\n        summarizer_kwargs = {k: {\"is_index\": k in indexes} for k in mapping}\n\n    summary = [f\"{title}:\"]\n    if mapping:\n        len_mapping = len(mapping)\n        if not _get_boolean_with_default(expand_option_name, default=True):\n            summary = [f\"{summary[0]} ({len_mapping})\"]\n        elif max_rows is not None and len_mapping > max_rows:\n            summary = [f\"{summary[0]} ({max_rows}/{len_mapping})\"]\n            first_rows = calc_max_rows_first(max_rows)\n            keys = list(mapping.keys())\n            summary += [\n                summarizer(k, mapping[k], col_width, **summarizer_kwargs[k])\n                for k in keys[:first_rows]\n            ]\n            if max_rows > 1:\n                last_rows = calc_max_rows_last(max_rows)\n                summary += [pretty_print(\"    ...\", col_width) + \" ...\"]\n                summary += [\n                    summarizer(k, mapping[k], col_width, **summarizer_kwargs[k])\n                    for k in keys[-last_rows:]\n                ]\n        else:\n            summary += [\n                summarizer(k, v, col_width, **summarizer_kwargs[k])\n                for k, v in mapping.items()\n            ]\n    else:\n        summary += [EMPTY_REPR]\n    return \"\\n\".join(summary)\n\n\ndata_vars_repr = functools.partial(\n    _mapping_repr,\n    title=\"Data variables\",\n    summarizer=summarize_variable,\n    expand_option_name=\"display_expand_data_vars\",\n)\n\nattrs_repr = functools.partial(\n    _mapping_repr,\n    title=\"Attributes\",\n    summarizer=summarize_attr,\n    expand_option_name=\"display_expand_attrs\",\n)",
                "filename": "xarray/core/formatting.py",
                "start_index": 11006,
                "end_index": 13633,
                "start_line": 319,
                "end_line": 893,
                "max_line": 893,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 0.7
            },
            {
                "code": "diff_coords_repr(a, b, compat, col_width=None):\n    return _diff_mapping_repr(\n        a,\n        b,\n        compat,\n        \"Coordinates\",\n        summarize_variable,\n        col_width=col_width,\n        a_indexes=a.indexes,\n        b_indexes=b.indexes,\n    )\n\n\ndiff_data_vars_repr = functools.partial(\n    _diff_mapping_repr, title=\"Data variables\", summarizer=summarize_variable\n)\n\n\ndiff_attrs_repr = functools.partial(\n    _diff_mapping_repr, title=\"Attributes\", summarizer=summarize_attr\n)\n\n\ndef _compat_to_str(compat):\n    if callable(compat):\n        compat = compat.__name__\n\n    if compat == \"equals\":\n        return \"equal\"\n    elif compat == \"allclose\":\n        return \"close\"\n    else:\n        return compat\n\n\ndef diff_array_repr(a, b, compat):\n    # used for DataArray, Variable and IndexVariable\n    summary = [\n        f\"Left and right {type(a).__name__} objects are not {_compat_to_str(compat)}\"\n    ]\n\n    summary.append(diff_dim_summary(a, b))\n    if callable(compat):\n        equiv = compat\n    else:\n        equiv = array_equiv\n\n    if not equiv(a.data, b.data):\n        temp = [wrap_indent(short_array_repr(obj), start=\"    \") for obj in (a, b)]\n        diff_data_repr = [\n            ab_side + \"\\n\" + ab_data_repr\n            for ab_side, ab_data_repr in zip((\"L\", \"R\"), temp)\n        ]\n        summary += [\"Differing values:\"] + diff_data_repr\n\n    if hasattr(a, \"coords\"):\n        col_width = _calculate_col_width(set(a.coords) | set(b.coords))\n        summary.append(\n            diff_coords_repr(a.coords, b.coords, compat, col_width=col_width)\n        )\n\n    if compat == \"identical\":\n        summary.append(diff_attrs_repr(a.attrs, b.attrs, compat))\n\n    return \"\\n\".join(summary)\n\n\ndef diff_dataset_repr(a, b, compat):\n    summary = [\n        f\"Left and right {type(a).__name__} objects are not {_compat_to_str(compat)}\"\n    ]\n\n    col_width = _calculate_col_width(set(list(a.variables) + list(b.variables)))\n\n    summary.append(diff_dim_summary(a, b))\n    summary.append(diff_coords_repr(a.coords, b.coords, compat, col_width=col_width))\n    summary.append(\n        diff_data_vars_repr(a.data_vars, b.data_vars, compat, col_width=col_width)\n    )\n\n    if compat == \"identical\":\n        summary.append(diff_attrs_repr(a.attrs, b.attrs, compat))\n\n    return \"\\n\".join(summary)",
                "filename": "xarray/core/formatting.py",
                "start_index": 26044,
                "end_index": 28348,
                "start_line": 810,
                "end_line": 893,
                "max_line": 893,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 0.2
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "xarray/core/formatting_html.py": [
                {
                    "chunk": {
                        "code": "index_section = partial(\n    _mapping_section,\n    name=\"Indexes\",\n    details_func=summarize_indexes,\n    max_items_collapse=0,\n    expand_option_name=\"display_expand_indexes\",\n)\n\nattr_section = partial(\n    _mapping_section,\n    name=\"Attributes\",\n    details_func=summarize_attrs,\n    max_items_collapse=10,\n    expand_option_name=\"display_expand_attrs\",\n)\n\n\ndef _get_indexes_dict(indexes):\n    return {\n        tuple(index_vars.keys()): idx for idx, index_vars in indexes.group_by_index()\n    }\n\n\ndef _obj_repr(obj, header_components, sections):\n    \"\"\"Return HTML repr of an xarray object.\n\n    If CSS is not injected (untrusted notebook), fallback to the plain text repr.\n\n    \"\"\"\n    header = f\"<div class='xr-header'>{''.join(h for h in header_components)}</div>\"\n    sections = \"\".join(f\"<li class='xr-section-item'>{s}</li>\" for s in sections)\n\n    icons_svg, css_style = _load_static_files()\n    return (\n        \"<div>\"\n        f\"{icons_svg}<style>{css_style}</style>\"\n        f\"<pre class='xr-text-repr-fallback'>{escape(repr(obj))}</pre>\"\n        \"<div class='xr-wrap' style='display:none'>\"\n        f\"{header}\"\n        f\"<ul class='xr-sections'>{sections}</ul>\"\n        \"</div>\"\n        \"</div>\"\n    )\n\n\ndef array_repr(arr):\n    dims = OrderedDict((k, v) for k, v in zip(arr.dims, arr.shape))\n    if hasattr(arr, \"xindexes\"):\n        indexed_dims = arr.xindexes.dims\n    else:\n        indexed_dims = {}\n\n    obj_type = f\"xarray.{type(arr).__name__}\"\n    arr_name = f\"'{arr.name}'\" if getattr(arr, \"name\", None) else \"\"\n\n    header_components = [\n        f\"<div class='xr-obj-type'>{obj_type}</div>\",\n        f\"<div class='xr-array-name'>{arr_name}</div>\",\n        format_dims(dims, indexed_dims),\n    ]\n\n    sections = [array_section(arr)]\n\n    if hasattr(arr, \"coords\"):\n        sections.append(coord_section(arr.coords))\n\n    if hasattr(arr, \"xindexes\"):\n        indexes = _get_indexes_dict(arr.xindexes)\n        sections.append(index_section(indexes))\n\n    sections.append(attr_section(arr.attrs))\n\n    return _obj_repr(arr, header_components, sections)\n\n\ndef dataset_repr(ds):\n    obj_type = f\"xarray.{type(ds).__name__}\"\n\n    header_components = [f\"<div class='xr-obj-type'>{escape(obj_type)}</div>\"]\n\n    sections = [\n        dim_section(ds),\n        coord_section(ds.coords),\n        datavar_section(ds.data_vars),\n        index_section(_get_indexes_dict(ds.xindexes)),\n        attr_section(ds.attrs),\n    ]\n\n    return _obj_repr(ds, header_components, sections)",
                        "filename": "xarray/core/formatting_html.py",
                        "start_index": 7729,
                        "end_index": 10213,
                        "start_line": 254,
                        "end_line": 342,
                        "max_line": 342,
                        "git_instance": "github",
                        "repo_name": "testbed/pydata__xarray__0.12",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the HTML representation logic for DataArray and Variable, which is relevant to the issue of pre-expanding data and attributes in the HTML repr."
                },
                {
                    "chunk": {
                        "code": "def summarize_variable(name, var, is_index=False, dtype=None):\n    variable = var.variable if hasattr(var, \"variable\") else var\n\n    cssclass_idx = \" class='xr-has-index'\" if is_index else \"\"\n    dims_str = f\"({', '.join(escape(dim) for dim in var.dims)})\"\n    name = escape(str(name))\n    dtype = dtype or escape(str(var.dtype))\n\n    # \"unique\" ids required to expand/collapse subsections\n    attrs_id = \"attrs-\" + str(uuid.uuid4())\n    data_id = \"data-\" + str(uuid.uuid4())\n    disabled = \"\" if len(var.attrs) else \"disabled\"\n\n    preview = escape(inline_variable_array_repr(variable, 35))\n    attrs_ul = summarize_attrs(var.attrs)\n    data_repr = short_data_repr_html(variable)\n\n    attrs_icon = _icon(\"icon-file-text2\")\n    data_icon = _icon(\"icon-database\")\n\n    return (\n        f\"<div class='xr-var-name'><span{cssclass_idx}>{name}</span></div>\"\n        f\"<div class='xr-var-dims'>{dims_str}</div>\"\n        f\"<div class='xr-var-dtype'>{dtype}</div>\"\n        f\"<div class='xr-var-preview xr-preview'>{preview}</div>\"\n        f\"<input id='{attrs_id}' class='xr-var-attrs-in' \"\n        f\"type='checkbox' {disabled}>\"\n        f\"<label for='{attrs_id}' title='Show/Hide attributes'>\"\n        f\"{attrs_icon}</label>\"\n        f\"<input id='{data_id}' class='xr-var-data-in' type='checkbox'>\"\n        f\"<label for='{data_id}' title='Show/Hide data repr'>\"\n        f\"{data_icon}</label>\"\n        f\"<div class='xr-var-attrs'>{attrs_ul}</div>\"\n        f\"<div class='xr-var-data'>{data_repr}</div>\"\n    )\n\n\ndef summarize_coords(variables):\n    li_items = []\n    for k, v in variables.items():\n        li_content = summarize_variable(k, v, is_index=k in variables.xindexes)\n        li_items.append(f\"<li class='xr-var-item'>{li_content}</li>\")\n\n    vars_li = \"\".join(li_items)\n\n    return f\"<ul class='xr-var-list'>{vars_li}</ul>\"\n\n\ndef summarize_vars(variables):\n    vars_li = \"\".join(\n        f\"<li class='xr-var-item'>{summarize_variable(k, v)}</li>\"\n        for k, v in variables.items()\n    )\n\n    return f\"<ul class='xr-var-list'>{vars_li}</ul>\"\n\n\ndef short_index_repr_html(index):\n    if hasattr(index, \"_repr_html_\"):\n        return index._repr_html_()\n\n    return f\"<pre>{escape(repr(index))}</pre>\"\n\n\ndef summarize_index(coord_names, index):\n    name = \"<br>\".join([escape(str(n)) for n in coord_names])\n\n    index_id = f\"index-{uuid.uuid4()}\"\n    preview = escape(inline_index_repr(index))\n    details = short_index_repr_html(index)\n\n    data_icon = _icon(\"icon-database\")\n\n    return (\n        f\"<div class='xr-index-name'><div>{name}</div></div>\"\n        f\"<div class='xr-index-preview'>{preview}</div>\"\n        f\"<div></div>\"\n        f\"<input id='{index_id}' class='xr-index-data-in' type='checkbox'/>\"\n        f\"<label for='{index_id}' title='Show/Hide index repr'>{data_icon}</label>\"\n        f\"<div class='xr-index-data'>{details}</div>\"\n    )",
                        "filename": "xarray/core/formatting_html.py",
                        "start_index": 1914,
                        "end_index": 4767,
                        "start_line": 75,
                        "end_line": 296,
                        "max_line": 342,
                        "git_instance": "github",
                        "repo_name": "testbed/pydata__xarray__0.12",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is relevant as it contains the HTML summary generation for variables, which may need to be modified to pre-expand sections in the HTML repr."
                }
            ],
            "xarray/core/formatting.py": [
                {
                    "chunk": {
                        "code": "cursive_repr(\"<recursive array>\")\ndef array_repr(arr):\n    from xarray.core.variable import Variable\n\n    max_rows = OPTIONS[\"display_max_rows\"]\n\n    # used for DataArray, Variable and IndexVariable\n    if hasattr(arr, \"name\") and arr.name is not None:\n        name_str = f\"{arr.name!r} \"\n    else:\n        name_str = \"\"\n\n    if (\n        isinstance(arr, Variable)\n        or _get_boolean_with_default(\"display_expand_data\", default=True)\n        or isinstance(arr.variable._data, MemoryCachedArray)\n    ):\n        data_repr = short_data_repr(arr)\n    else:\n        data_repr = inline_variable_array_repr(arr.variable, OPTIONS[\"display_width\"])\n\n    start = f\"<xarray.{type(arr).__name__} {name_str}\"\n    dims = dim_summary_limited(arr, col_width=len(start) + 1, max_rows=max_rows)\n    summary = [\n        f\"{start}({dims})>\",\n        data_repr,\n    ]\n\n    if hasattr(arr, \"coords\"):\n        if arr.coords:\n            col_width = _calculate_col_width(arr.coords)\n            summary.append(\n                coords_repr(arr.coords, col_width=col_width, max_rows=max_rows)\n            )\n\n        unindexed_dims_str = unindexed_dims_repr(\n            arr.dims, arr.coords, max_rows=max_rows\n        )\n        if unindexed_dims_str:\n            summary.append(unindexed_dims_str)\n\n        display_default_indexes = _get_boolean_with_default(\n            \"display_default_indexes\", False\n        )\n\n        xindexes = filter_nondefault_indexes(\n            _get_indexes_dict(arr.xindexes), not display_default_indexes\n        )\n\n        if xindexes:\n            summary.append(indexes_repr(xindexes, max_rows=max_rows))\n\n    if arr.attrs:\n        summary.append(attrs_repr(arr.attrs, max_rows=max_rows))\n\n    return \"\\n\".join(summary)\n\n\n@recursive_repr(\"<recursive Dataset>\")\ndef dataset_repr(ds):\n    summary = [f\"<xarray.{type(ds).__name__}>\"]\n\n    col_width = _calculate_col_width(ds.variables)\n    max_rows = OPTIONS[\"display_max_rows\"]\n\n    dims_start = pretty_print(\"Dimensions:\", col_width)\n    dims_values = dim_summary_limited(ds, col_width=col_width + 1, max_rows=max_rows)\n    summary.append(f\"{dims_start}({dims_values})\")\n\n    if ds.coords:\n        summary.append(coords_repr(ds.coords, col_width=col_width, max_rows=max_rows))\n\n    unindexed_dims_str = unindexed_dims_repr(ds.dims, ds.coords, max_rows=max_rows)\n    if unindexed_dims_str:\n        summary.append(unindexed_dims_str)\n\n    summary.append(data_vars_repr(ds.data_vars, col_width=col_width, max_rows=max_rows))\n\n    display_default_indexes = _get_boolean_with_default(\n        \"display_default_indexes\", False\n    )\n    xindexes = filter_nondefault_indexes(\n        _get_indexes_dict(ds.xindexes), not display_default_indexes\n    )\n    if xindexes:\n        summary.append(indexes_repr(xindexes, max_rows=max_rows))\n\n    if ds.attrs:\n        summary.append(attrs_repr(ds.attrs, max_rows=max_rows))\n\n    return \"\\n\".join(summary)\n\n\ndef",
                        "filename": "xarray/core/formatting.py",
                        "start_index": 20303,
                        "end_index": 23207,
                        "start_line": 626,
                        "end_line": 877,
                        "max_line": 893,
                        "git_instance": "github",
                        "repo_name": "testbed/pydata__xarray__0.12",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet includes the logic for the text representation of DataArray and Variable, which is mentioned in the issue for consistency with the HTML repr."
                }
            ],
            "xarray/static/css/style.css": [
                {
                    "chunk": {
                        "code": "/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\nhtml[theme=dark],\nbody[data-theme=dark],\nbody.vscode-dark {\n  --xr-font-color0: rgba(255, 255, 255, 1);\n  --xr-font-color2: rgba(255, 255, 255, 0.54);\n  --xr-font-color3: rgba(255, 255, 255, 0.38);\n  --xr-border-color: #1F1F1F;\n  --xr-disabled-color: #515151;\n  --xr-background-color: #111111;\n  --xr-background-color-row-even: #111111;\n  --xr-background-color-row-odd: #313131;\n}\n\n.xr-wrap {\n  display: block !important;\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-text-repr-fallback {\n  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n  display: none;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.x",
                        "filename": "xarray/static/css/style.css",
                        "start_index": 0,
                        "end_index": 2932,
                        "start_line": 1,
                        "end_line": 340,
                        "max_line": 348,
                        "git_instance": "github",
                        "repo_name": "testbed/pydata__xarray__0.12",
                        "sha": ""
                    },
                    "reason_for_relevance": "The CSS styles defined in this snippet may need to be updated to reflect changes in how data and attributes are displayed by default in the HTML repr."
                }
            ]
        },
        "solution_task": "To implement the feature of pre-expanding data and attributes in the DataArray/Variable HTML representation, you will need to modify the HTML generation code to ensure that the sections for data and attributes are expanded by default. Here's how you can do it:\n\n- Modify the `_obj_repr` function in `xarray/core/formatting_html.py` to set the checkboxes for data and attributes as checked by default.\n- Update the JavaScript/CSS logic if necessary to ensure that the sections appear expanded when the checkboxes are checked.\n\nHere's a high-level overview of the changes:\n\n- In `xarray/core/formatting_html.py`, locate the `array_repr` and `dataset_repr` functions.\n- Within these functions, find where the `input` elements for the data and attributes sections are created.\n- Set the `checked` attribute on these `input` elements to ensure they are checked by default.\n\nHere's a pseudo code snippet to illustrate the changes:\n\n```python\ndef array_repr(arr):\n    # ... existing code ...\n\n    # Find the section where the data checkbox is created\n    data_id = \"data-\" + str(uuid.uuid4())\n    # Add the 'checked' attribute to the input element\n    data_repr = f\"<input id='{data_id}' class='xr-var-data-in' type='checkbox' checked>\"\n\n    # ... existing code ...\n\n    return _obj_repr(arr, header_components, sections)\n\n# Similar changes would be made to the dataset_repr function\n```\n\nAdditionally, ensure that the CSS rules in `xarray/static/css/style.css` are set up to display the content when the checkboxes are checked. The existing rules should already handle this, but it's worth verifying.\n\nFinally, test the changes to ensure that the data and attributes sections are expanded by default in the HTML representation of DataArray and Variable objects.",
        "bouncer_response": {
            "score": 8,
            "criteria": "The VALUE score should reflect how well the RESPONSE addresses the specific needs and context presented in the PROMPT, regardless of the completeness of the PROMPT itself. RESPONSES that are highly relevant, offering clear and comprehensive suggestions or solutions for the described feature request, should score between 7 and 9.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable plan for implementing the feature request of pre-expanding data and attributes in the DataArray/Variable HTML representation. It gives specific instructions on which functions to modify in the codebase, what changes to make, and even includes a pseudo code snippet to illustrate the necessary changes. The RESPONSE also suggests verifying the CSS rules and testing the changes, which are important steps in the implementation process. The inclusion of links to the relevant code snippets in the repository adds to the utility of the RESPONSE. However, it does not score a perfect 10 because it does not address potential edge cases or the need for user feedback on this change, which could be important for the feature's success.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711759800.959589,
        "result": "To implement the feature of pre-expanding data and attributes in the DataArray/Variable HTML representation, you will need to modify the HTML generation code to ensure that the sections for data and attributes are expanded by default. Here's how you can do it:\n\n- Modify the `_obj_repr` function in `xarray/core/formatting_html.py` to set the checkboxes for data and attributes as checked by default.\n- Update the JavaScript/CSS logic if necessary to ensure that the sections appear expanded when the checkboxes are checked.\n\nHere's a high-level overview of the changes:\n\n- In `xarray/core/formatting_html.py`, locate the `array_repr` and `dataset_repr` functions.\n- Within these functions, find where the `input` elements for the data and attributes sections are created.\n- Set the `checked` attribute on these `input` elements to ensure they are checked by default.\n\nHere's a pseudo code snippet to illustrate the changes:\n\n```python\ndef array_repr(arr):\n    # ... existing code ...\n\n    # Find the section where the data checkbox is created\n    data_id = \"data-\" + str(uuid.uuid4())\n    # Add the 'checked' attribute to the input element\n    data_repr = f\"<input id='{data_id}' class='xr-var-data-in' type='checkbox' checked>\"\n\n    # ... existing code ...\n\n    return _obj_repr(arr, header_components, sections)\n\n# Similar changes would be made to the dataset_repr function\n```\n\nAdditionally, ensure that the CSS rules in `xarray/static/css/style.css` are set up to display the content when the checkboxes are checked. The existing rules should already handle this, but it's worth verifying.\n\nFinally, test the changes to ensure that the data and attributes sections are expanded by default in the HTML representation of DataArray and Variable objects.\n\n### Code snippets to check\n\n-  \u2192 [xarray](https://github.com/testbed/pydata__xarray__0.12/tree//xarray) \u2192 [core](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/core)- [Lines 254 - 342](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting_html.py#L254-L342)\n\n This snippet contains the HTML representation logic for DataArray and Variable, which is relevant to the issue of pre-expanding data and attributes in the HTML repr. \n\n\n   - [Lines 75 - 296](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting_html.py#L75-L296)\n\n This snippet is relevant as it contains the HTML summary generation for variables, which may need to be modified to pre-expand sections in the HTML repr.\n-  \u2192 [xarray](https://github.com/testbed/pydata__xarray__0.12/tree//xarray) \u2192 [core](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/core)- [Lines 626 - 877](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting.py#L626-L877)\n\n This snippet includes the logic for the text representation of DataArray and Variable, which is mentioned in the issue for consistency with the HTML repr.\n-  \u2192 [xarray](https://github.com/testbed/pydata__xarray__0.12/tree//xarray) \u2192 [static](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/static) \u2192 [css](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/static/css)- [Lines 1 - 340](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/static/css/style.css#L1-L340)\n\n The CSS styles defined in this snippet may need to be updated to reflect changes in how data and attributes are displayed by default in the HTML repr.",
        "context_relevance": 0.54,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE must be relevant to the entire PROMPT and answer it completely to get a score of 10.\nSupporting Evidence: The RESPONSE provides a detailed explanation of how to implement the feature of pre-expanding data and attributes in the DataArray/Variable HTML representation, which is the main focus of the PROMPT. It addresses the concern about the discoverability of the expandable sections and the consistency with the text representation. The RESPONSE also includes specific steps and a pseudo code snippet, which directly relates to the technical aspect of the proposal. Additionally, it references the relevant sections of the codebase where changes should be made, which is a direct response to the context provided in the PROMPT. The RESPONSE is comprehensive and directly answers the entire PROMPT."
        },
        "qa_relevance": 1.0
    }
}