{
    "id": "pytest-dev__pytest-8033",
    "repo_name": "testbed/pytest-dev__pytest__6.2",
    "task_id": 3470477828228697827,
    "title": "Class cleanups in Python 3.8+ are not called",
    "body": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.addClassCleanup\r\n\r\nDid not see `doClassCleanups` mentioned anywhere in this repo, which is the method that should be called. See https://github.com/python/cpython/blob/0f221d09cad46bee38d1b7a7822772df66c53028/Lib/unittest/suite.py#L175\r\n\r\nRepo:\r\n```\r\nimport unittest\r\n\r\ndef cleanup():\r\n    assert False\r\n\r\nclass MyTest(unittest.TestCase):\r\n    @classmethod\r\n    def setUpClass(cls):\r\n        cls.addClassCleanup(cleanup)\r\n    \r\n    def test_one(self):\r\n        pass\r\n```\r\n\r\nWith unittest:\r\n```\r\n.E\r\n======================================================================\r\nERROR: tearDownClass (test_demo.MyTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/petter/source/pytesttest/test_demo.py\", line 4, in cleanup\r\n    assert False\r\nAssertionError\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.000s\r\n```\r\n\r\nWith Pytest:\r\n```\r\ncollected 1 item\r\n\r\ntest_demo.py .                                                                                                                                                                       [100%]\r\n\r\n==================================================================================== 1 passed in 0.03s ====================================================================================\r\n```\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pytest-dev__pytest__6.2.git",
    "requested_commit": "",
    "mayil_response": "- Ensure that `unittest.TestCase.addClassCleanup` is being used correctly in the test class.\n- Verify that `unittest.TestCase.doClassCleanups` is being called after all tests in the class have run, which might not be the case when using `pytest`.\n- If `pytest` is being used, check if there is a custom pytest plugin or configuration that is interfering with the normal operation of `unittest.TestCase` class cleanups.\n- If the issue persists, consider using `tearDownClass` as a workaround to perform cleanup actions, ensuring compatibility with both `unittest` and `pytest`.\n- If the cleanup must be done using `addClassCleanup`, consider reporting the issue to the `pytest` development team if it is determined to be a compatibility issue with `pytest`.\n\n### Code snippets to check\n\n-  \u2192 [.github](https://github.com/testbed/pytest-dev__pytest__6.2/tree//.github)- [Lines 1 - 2](https://github.com/testbed/pytest-dev__pytest__6.2/blob//.github/config.yml#L1-L2)\n\n This snippet is not relevant to the issue as it pertains to the ReadTheDocs configuration for the pytest project, which is unrelated to the class cleanup issue in Python 3.8+.\n-  \u2192 [.github](https://github.com/testbed/pytest-dev__pytest__6.2/tree//.github) \u2192 [ISSUE_TEMPLATE](https://github.com/testbed/pytest-dev__pytest__6.2/tree//.github/ISSUE_TEMPLATE)- [Lines 1 - 5](https://github.com/testbed/pytest-dev__pytest__6.2/blob//.github/ISSUE_TEMPLATE/config.yml#L1-L5)\n\n This snippet is not relevant to the issue as it is related to the issue template configuration for GitHub, which has no bearing on the Python class cleanup behavior.\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__6.2/tree//bench)- [Lines 1 - 11](https://github.com/testbed/pytest-dev__pytest__6.2/blob//bench/xunit.py#L1-L11)\n\n This snippet is not relevant to the issue as it is a benchmarking script that does not involve class cleanup methods or the use of `doClassCleanups`.\n-  \u2192 [src](https://github.com/testbed/pytest-dev__pytest__6.2/tree//src)- [Lines 1 - 10](https://github.com/testbed/pytest-dev__pytest__6.2/blob//src/py.py#L1-L10)\n\n This snippet is not relevant to the issue as it is a shim for pylib compatibility and does not relate to the class cleanup methods in Python's unittest framework.\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__6.2/tree//bench)- [Lines 1 - 14](https://github.com/testbed/pytest-dev__pytest__6.2/blob//bench/manyparam.py#L1-L14)\n\n This snippet is not relevant to the issue as it is a benchmarking script for testing parameterized fixtures in pytest, which is unrelated to the class cleanup issue.\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__6.2/tree//bench)- [Lines 1 - 13](https://github.com/testbed/pytest-dev__pytest__6.2/blob//bench/bench.py#L1-L13)\n\n This snippet is not relevant to the issue as it is a benchmarking script for profiling pytest runs, which is unrelated to the class cleanup issue.\n- - [Lines 2 - 72](https://github.com/testbed/pytest-dev__pytest__6.2/blob//.pre-commit-config.yaml#L2-L72)\n\n This snippet is not relevant to the issue as it is a configuration file for pre-commit hooks, which is unrelated to the class cleanup methods in Python's unittest framework. \n\n\n   - [Lines 73 - 108](https://github.com/testbed/pytest-dev__pytest__6.2/blob//.pre-commit-config.yaml#L73-L108)\n\n This snippet is not relevant to the issue as it is a configuration file for pre-commit hooks, specifically for linting reStructuredText files, which is unrelated to the class cleanup methods in Python's unittest framework.\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__6.2/tree//bench)- [Lines 1 - 9](https://github.com/testbed/pytest-dev__pytest__6.2/blob//bench/skip.py#L1-L9)\n\n This snippet is not relevant to the issue as it is a benchmarking script that tests skipping tests in pytest, which is unrelated to the class cleanup issue.\n-  \u2192 [scripts](https://github.com/testbed/pytest-dev__pytest__6.2/tree//scripts)- [Lines 1 - 155](https://github.com/testbed/pytest-dev__pytest__6.2/blob//scripts/update-plugin-list.py#L1-L155)\n\n This snippet is not relevant to the issue as it is a script for updating the plugin list for pytest, which is unrelated to the class cleanup methods in Python's unittest framework.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.00021549999999999998,
        "snippet_processor": 0.03931,
        "issue_star_creation": 0.02319,
        "issue_star_solver": 0.03424,
        "bouncer": 0.02556
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711734680.970619,
        "relevant_snippets": [
            {
                "code": "rtd:\n  project: pytest",
                "filename": ".github/config.yml",
                "start_index": 0,
                "end_index": 22,
                "start_line": 1,
                "end_line": 2,
                "max_line": 2,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "blank_issues_enabled: false\ncontact_links:\n  - name: \u2753 Support Question\n    url: https://github.com/pytest-dev/pytest/discussions\n    about: Use GitHub's new Discussions feature for questions",
                "filename": ".github/ISSUE_TEMPLATE/config.yml",
                "start_index": 0,
                "end_index": 191,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "for i in range(5000):\n    exec(\n        f\"\"\"\nclass Test{i}:\n    @classmethod\n    def setup_class(cls): pass\n    def test_1(self): pass\n    def test_2(self): pass\n    def test_3(self): pass\n\"\"\"\n    )",
                "filename": "bench/xunit.py",
                "start_index": 0,
                "end_index": 198,
                "start_line": 1,
                "end_line": 11,
                "max_line": 11,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "# shim for pylib going away\n# if pylib is installed this file will get skipped\n# (`py/__init__.py` has higher precedence)\nimport sys\n\nimport _pytest._py.error as error\nimport _pytest._py.path as path\n\nsys.modules[\"py.error\"] = error\nsys.modules[\"py.path\"] = path",
                "filename": "src/py.py",
                "start_index": 0,
                "end_index": 262,
                "start_line": 1,
                "end_line": 10,
                "max_line": 10,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "import pytest\n\n\n@pytest.fixture(scope=\"module\", params=range(966))\ndef foo(request):\n    return request.param\n\n\ndef test_it(foo):\n    pass\n\n\ndef test_it2(foo):\n    pass",
                "filename": "bench/manyparam.py",
                "start_index": 0,
                "end_index": 168,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "import sys\n\nif __name__ == \"__main__\":\n    import cProfile\n    import pytest  # NOQA\n    import pstats\n\n    script = sys.argv[1:] if len(sys.argv) > 1 else [\"empty.py\"]\n    cProfile.run(\"pytest.cmdline.main(%r)\" % script, \"prof\")\n    p = pstats.Stats(\"prof\")\n    p.strip_dirs()\n    p.sort_stats(\"cumulative\")\n    print(p.print_stats(500))",
                "filename": "bench/bench.py",
                "start_index": 0,
                "end_index": 338,
                "start_line": 1,
                "end_line": 13,
                "max_line": 13,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "-   repo: https://github.com/psf/black\n    rev: 23.7.0\n    hooks:\n    -   id: black\n        args: [--safe, --quiet]\n-   repo: https://github.com/asottile/blacken-docs\n    rev: 1.16.0\n    hooks:\n    -   id: blacken-docs\n        additional_dependencies: [black==23.7.0]\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: fix-encoding-pragma\n        args: [--remove]\n    -   id: check-yaml\n    -   id: debug-statements\n        exclude: _pytest/(debugging|hookspec).py\n        language_version: python3\n-   repo: https://github.com/PyCQA/autoflake\n    rev: v2.2.0\n    hooks:\n    -   id: autoflake\n        name: autoflake\n        args: [\"--in-place\", \"--remove-unused-variables\", \"--remove-all-unused-imports\"]\n        language: python\n        files: \\.py$\n-   repo: https://github.com/PyCQA/flake8\n    rev: 6.1.0\n    hooks:\n    -   id: flake8\n        language_version: python3\n        additional_dependencies:\n          - flake8-typing-imports==1.12.0\n          - flake8-docstrings==1.5.0\n-   repo: https://github.com/asottile/reorder-python-imports\n    rev: v3.10.0\n    hooks:\n    -   id: reorder-python-imports\n        args: ['--application-directories=.:src', --py38-plus]\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v3.10.1\n    hooks:\n    -   id: pyupgrade\n        args: [--py38-plus]\n-   repo: https://github.com/asottile/setup-cfg-fmt\n    rev: v2.4.0\n    hooks:\n    -   id: setup-cfg-fmt\n        args: [\"--max-py-version=3.12\", \"--include-version-classifiers\"]\n-   repo: https://github.com/pre-commit/pygrep-hooks\n    rev: v1.10.0\n    hooks:\n    -   id: python-use-type-annotations\n-   repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.5.1\n    hooks:\n    -   id: mypy\n        files: ^(src/|testing/)\n        args: []\n        additional_dependencies:\n          - iniconfig>=1.1.0\n          - attrs>=19.2.0\n          - packaging\n          - tomli\n          - types-pkg_resources\n            # for mypy running on python>=3.11 since exceptiongroup is only a dependency\n            # on <3.11\n          - exceptiongroup>=1.0.0rc8",
                "filename": ".pre-commit-config.yaml",
                "start_index": 7,
                "end_index": 2165,
                "start_line": 2,
                "end_line": 72,
                "max_line": 108,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "import pytest\n\nSKIP = True\n\n\n@pytest.mark.parametrize(\"x\", range(5000))\ndef test_foo(x):\n    if SKIP:\n        pytest.skip(\"heh\")",
                "filename": "bench/skip.py",
                "start_index": 0,
                "end_index": 128,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "import datetime\nimport pathlib\nimport re\nfrom textwrap import dedent\nfrom textwrap import indent\n\nimport packaging.version\nimport platformdirs\nimport tabulate\nimport wcwidth\nfrom requests_cache import CachedResponse\nfrom requests_cache import CachedSession\nfrom requests_cache import OriginalResponse\nfrom requests_cache import SQLiteCache\nfrom tqdm import tqdm\n\n\nFILE_HEAD = r\"\"\"\n.. Note this file is autogenerated by scripts/update-plugin-list.py - usually weekly via github action\n\n.. _plugin-list:\n\nPlugin List\n===========\n\nPyPI projects that match \"pytest-\\*\" are considered plugins and are listed\nautomatically together with a manually-maintained list in `the source\ncode <https://github.com/pytest-dev/pytest/blob/main/scripts/update-plugin-list.py>`_.\nPackages classified as inactive are excluded.\n\n.. The following conditional uses a different format for this list when\n   creating a PDF, because otherwise the table gets far too wide for the\n   page.\n\n\"\"\"\nDEVELOPMENT_STATUS_CLASSIFIERS = (\n    \"Development Status :: 1 - Planning\",\n    \"Development Status :: 2 - Pre-Alpha\",\n    \"Development Status :: 3 - Alpha\",\n    \"Development Status :: 4 - Beta\",\n    \"Development Status :: 5 - Production/Stable\",\n    \"Development Status :: 6 - Mature\",\n    \"Development Status :: 7 - Inactive\",\n)\nADDITIONAL_PROJECTS = {  # set of additional projects to consider as plugins\n    \"logassert\",\n    \"nuts\",\n}\n\n\ndef escape_rst(text: str) -> str:\n    \"\"\"Rudimentary attempt to escape special RST characters to appear as\n    plain text.\"\"\"\n    text = (\n        text.replace(\"*\", \"\\\\*\")\n        .replace(\"<\", \"\\\\<\")\n        .replace(\">\", \"\\\\>\")\n        .replace(\"`\", \"\\\\`\")\n    )\n    text = re.sub(r\"_\\b\", \"\", text)\n    return text\n\n\ndef project_response_with_refresh(\n    session: CachedSession, name: str, last_serial: int\n) -> OriginalResponse | CachedResponse:\n    \"\"\"Get a http cached pypi project\n\n    force refresh in case of last serial mismatch\n    \"\"\"\n\n    response = session.get(f\"https://pypi.org/pypi/{name}/json\")\n    if int(response.headers.get(\"X-PyPI-Last-Serial\", -1)) != last_serial:\n        response = session.get(f\"https://pypi.org/pypi/{name}/json\", refresh=True)\n    return response\n\n\ndef get_session() -> CachedSession:\n    \"\"\"Configures the requests-cache session\"\"\"\n    cache_path = platformdirs.user_cache_path(\"pytest-plugin-list\")\n    cache_path.mkdir(exist_ok=True, parents=True)\n    cache_file = cache_path.joinpath(\"http_cache.sqlite3\")\n    return CachedSession(backend=SQLiteCache(cache_file))\n\n\ndef pytest_plugin_projects_from_pypi(session: CachedSession) -> dict[str, int]:\n    response = session.get(\n        \"https://pypi.org/simple\",\n        headers={\"Accept\": \"application/vnd.pypi.simple.v1+json\"},\n        refresh=True,\n    )\n    return {\n        name: p[\"_last-serial\"]\n        for p in response.json()[\"projects\"]\n        if (name := p[\"name\"]).startswith(\"pytest-\") or name in ADDITIONAL_PROJECTS\n    }",
                "filename": "scripts/update-plugin-list.py",
                "start_index": 0,
                "end_index": 2939,
                "start_line": 1,
                "end_line": 155,
                "max_line": 195,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "-   repo: local\n    hooks:\n    -   id: rst\n        name: rst\n        entry: rst-lint --encoding utf-8\n        files: ^(RELEASING.rst|README.rst|TIDELIFT.rst)$\n        language: python\n        additional_dependencies: [pygments, restructuredtext_lint]\n    -   id: changelogs-rst\n        name: changelog filenames\n        language: fail\n        entry: 'changelog files must be named ####.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst'\n        exclude: changelog/(\\d+\\.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst|README.rst|_template.rst)\n        files: ^changelog/\n    -   id: py-deprecated\n        name: py library is deprecated\n        language: pygrep\n        entry: >\n            (?x)\\bpy\\.(\n                _code\\.|\n                builtin\\.|\n                code\\.|\n                io\\.|\n                path\\.local\\.sysfind|\n                process\\.|\n                std\\.|\n                error\\.|\n                xml\\.\n            )\n        types: [python]\n    -   id: py-path-deprecated\n        name: py.path usage is deprecated\n        exclude: docs|src/_pytest/deprecated.py|testing/deprecated_test.py|src/_pytest/legacypath.py\n        language: pygrep\n        entry: \\bpy\\.path\\.local\n        types: [python]",
                "filename": ".pre-commit-config.yaml",
                "start_index": 2166,
                "end_index": 3442,
                "start_line": 73,
                "end_line": 108,
                "max_line": 108,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.0
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            ".github/config.yml": [
                {
                    "chunk": {
                        "code": "rtd:\n  project: pytest",
                        "filename": ".github/config.yml",
                        "start_index": 0,
                        "end_index": 22,
                        "start_line": 1,
                        "end_line": 2,
                        "max_line": 2,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__6.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is not relevant to the issue as it pertains to the ReadTheDocs configuration for the pytest project, which is unrelated to the class cleanup issue in Python 3.8+."
                }
            ],
            ".github/ISSUE_TEMPLATE/config.yml": [
                {
                    "chunk": {
                        "code": "blank_issues_enabled: false\ncontact_links:\n  - name: \u2753 Support Question\n    url: https://github.com/pytest-dev/pytest/discussions\n    about: Use GitHub's new Discussions feature for questions",
                        "filename": ".github/ISSUE_TEMPLATE/config.yml",
                        "start_index": 0,
                        "end_index": 191,
                        "start_line": 1,
                        "end_line": 5,
                        "max_line": 5,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__6.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is not relevant to the issue as it is related to the issue template configuration for GitHub, which has no bearing on the Python class cleanup behavior."
                }
            ],
            "bench/xunit.py": [
                {
                    "chunk": {
                        "code": "for i in range(5000):\n    exec(\n        f\"\"\"\nclass Test{i}:\n    @classmethod\n    def setup_class(cls): pass\n    def test_1(self): pass\n    def test_2(self): pass\n    def test_3(self): pass\n\"\"\"\n    )",
                        "filename": "bench/xunit.py",
                        "start_index": 0,
                        "end_index": 198,
                        "start_line": 1,
                        "end_line": 11,
                        "max_line": 11,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__6.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is not relevant to the issue as it is a benchmarking script that does not involve class cleanup methods or the use of `doClassCleanups`."
                }
            ],
            "src/py.py": [
                {
                    "chunk": {
                        "code": "# shim for pylib going away\n# if pylib is installed this file will get skipped\n# (`py/__init__.py` has higher precedence)\nimport sys\n\nimport _pytest._py.error as error\nimport _pytest._py.path as path\n\nsys.modules[\"py.error\"] = error\nsys.modules[\"py.path\"] = path",
                        "filename": "src/py.py",
                        "start_index": 0,
                        "end_index": 262,
                        "start_line": 1,
                        "end_line": 10,
                        "max_line": 10,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__6.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is not relevant to the issue as it is a shim for pylib compatibility and does not relate to the class cleanup methods in Python's unittest framework."
                }
            ],
            "bench/manyparam.py": [
                {
                    "chunk": {
                        "code": "import pytest\n\n\n@pytest.fixture(scope=\"module\", params=range(966))\ndef foo(request):\n    return request.param\n\n\ndef test_it(foo):\n    pass\n\n\ndef test_it2(foo):\n    pass",
                        "filename": "bench/manyparam.py",
                        "start_index": 0,
                        "end_index": 168,
                        "start_line": 1,
                        "end_line": 14,
                        "max_line": 14,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__6.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is not relevant to the issue as it is a benchmarking script for testing parameterized fixtures in pytest, which is unrelated to the class cleanup issue."
                }
            ],
            "bench/bench.py": [
                {
                    "chunk": {
                        "code": "import sys\n\nif __name__ == \"__main__\":\n    import cProfile\n    import pytest  # NOQA\n    import pstats\n\n    script = sys.argv[1:] if len(sys.argv) > 1 else [\"empty.py\"]\n    cProfile.run(\"pytest.cmdline.main(%r)\" % script, \"prof\")\n    p = pstats.Stats(\"prof\")\n    p.strip_dirs()\n    p.sort_stats(\"cumulative\")\n    print(p.print_stats(500))",
                        "filename": "bench/bench.py",
                        "start_index": 0,
                        "end_index": 338,
                        "start_line": 1,
                        "end_line": 13,
                        "max_line": 13,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__6.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is not relevant to the issue as it is a benchmarking script for profiling pytest runs, which is unrelated to the class cleanup issue."
                }
            ],
            ".pre-commit-config.yaml": [
                {
                    "chunk": {
                        "code": "-   repo: https://github.com/psf/black\n    rev: 23.7.0\n    hooks:\n    -   id: black\n        args: [--safe, --quiet]\n-   repo: https://github.com/asottile/blacken-docs\n    rev: 1.16.0\n    hooks:\n    -   id: blacken-docs\n        additional_dependencies: [black==23.7.0]\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: fix-encoding-pragma\n        args: [--remove]\n    -   id: check-yaml\n    -   id: debug-statements\n        exclude: _pytest/(debugging|hookspec).py\n        language_version: python3\n-   repo: https://github.com/PyCQA/autoflake\n    rev: v2.2.0\n    hooks:\n    -   id: autoflake\n        name: autoflake\n        args: [\"--in-place\", \"--remove-unused-variables\", \"--remove-all-unused-imports\"]\n        language: python\n        files: \\.py$\n-   repo: https://github.com/PyCQA/flake8\n    rev: 6.1.0\n    hooks:\n    -   id: flake8\n        language_version: python3\n        additional_dependencies:\n          - flake8-typing-imports==1.12.0\n          - flake8-docstrings==1.5.0\n-   repo: https://github.com/asottile/reorder-python-imports\n    rev: v3.10.0\n    hooks:\n    -   id: reorder-python-imports\n        args: ['--application-directories=.:src', --py38-plus]\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v3.10.1\n    hooks:\n    -   id: pyupgrade\n        args: [--py38-plus]\n-   repo: https://github.com/asottile/setup-cfg-fmt\n    rev: v2.4.0\n    hooks:\n    -   id: setup-cfg-fmt\n        args: [\"--max-py-version=3.12\", \"--include-version-classifiers\"]\n-   repo: https://github.com/pre-commit/pygrep-hooks\n    rev: v1.10.0\n    hooks:\n    -   id: python-use-type-annotations\n-   repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.5.1\n    hooks:\n    -   id: mypy\n        files: ^(src/|testing/)\n        args: []\n        additional_dependencies:\n          - iniconfig>=1.1.0\n          - attrs>=19.2.0\n          - packaging\n          - tomli\n          - types-pkg_resources\n            # for mypy running on python>=3.11 since exceptiongroup is only a dependency\n            # on <3.11\n          - exceptiongroup>=1.0.0rc8",
                        "filename": ".pre-commit-config.yaml",
                        "start_index": 7,
                        "end_index": 2165,
                        "start_line": 2,
                        "end_line": 72,
                        "max_line": 108,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__6.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is not relevant to the issue as it is a configuration file for pre-commit hooks, which is unrelated to the class cleanup methods in Python's unittest framework."
                },
                {
                    "chunk": {
                        "code": "-   repo: local\n    hooks:\n    -   id: rst\n        name: rst\n        entry: rst-lint --encoding utf-8\n        files: ^(RELEASING.rst|README.rst|TIDELIFT.rst)$\n        language: python\n        additional_dependencies: [pygments, restructuredtext_lint]\n    -   id: changelogs-rst\n        name: changelog filenames\n        language: fail\n        entry: 'changelog files must be named ####.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst'\n        exclude: changelog/(\\d+\\.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst|README.rst|_template.rst)\n        files: ^changelog/\n    -   id: py-deprecated\n        name: py library is deprecated\n        language: pygrep\n        entry: >\n            (?x)\\bpy\\.(\n                _code\\.|\n                builtin\\.|\n                code\\.|\n                io\\.|\n                path\\.local\\.sysfind|\n                process\\.|\n                std\\.|\n                error\\.|\n                xml\\.\n            )\n        types: [python]\n    -   id: py-path-deprecated\n        name: py.path usage is deprecated\n        exclude: docs|src/_pytest/deprecated.py|testing/deprecated_test.py|src/_pytest/legacypath.py\n        language: pygrep\n        entry: \\bpy\\.path\\.local\n        types: [python]",
                        "filename": ".pre-commit-config.yaml",
                        "start_index": 2166,
                        "end_index": 3442,
                        "start_line": 73,
                        "end_line": 108,
                        "max_line": 108,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__6.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is not relevant to the issue as it is a configuration file for pre-commit hooks, specifically for linting reStructuredText files, which is unrelated to the class cleanup methods in Python's unittest framework."
                }
            ],
            "bench/skip.py": [
                {
                    "chunk": {
                        "code": "import pytest\n\nSKIP = True\n\n\n@pytest.mark.parametrize(\"x\", range(5000))\ndef test_foo(x):\n    if SKIP:\n        pytest.skip(\"heh\")",
                        "filename": "bench/skip.py",
                        "start_index": 0,
                        "end_index": 128,
                        "start_line": 1,
                        "end_line": 9,
                        "max_line": 9,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__6.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is not relevant to the issue as it is a benchmarking script that tests skipping tests in pytest, which is unrelated to the class cleanup issue."
                }
            ],
            "scripts/update-plugin-list.py": [
                {
                    "chunk": {
                        "code": "import datetime\nimport pathlib\nimport re\nfrom textwrap import dedent\nfrom textwrap import indent\n\nimport packaging.version\nimport platformdirs\nimport tabulate\nimport wcwidth\nfrom requests_cache import CachedResponse\nfrom requests_cache import CachedSession\nfrom requests_cache import OriginalResponse\nfrom requests_cache import SQLiteCache\nfrom tqdm import tqdm\n\n\nFILE_HEAD = r\"\"\"\n.. Note this file is autogenerated by scripts/update-plugin-list.py - usually weekly via github action\n\n.. _plugin-list:\n\nPlugin List\n===========\n\nPyPI projects that match \"pytest-\\*\" are considered plugins and are listed\nautomatically together with a manually-maintained list in `the source\ncode <https://github.com/pytest-dev/pytest/blob/main/scripts/update-plugin-list.py>`_.\nPackages classified as inactive are excluded.\n\n.. The following conditional uses a different format for this list when\n   creating a PDF, because otherwise the table gets far too wide for the\n   page.\n\n\"\"\"\nDEVELOPMENT_STATUS_CLASSIFIERS = (\n    \"Development Status :: 1 - Planning\",\n    \"Development Status :: 2 - Pre-Alpha\",\n    \"Development Status :: 3 - Alpha\",\n    \"Development Status :: 4 - Beta\",\n    \"Development Status :: 5 - Production/Stable\",\n    \"Development Status :: 6 - Mature\",\n    \"Development Status :: 7 - Inactive\",\n)\nADDITIONAL_PROJECTS = {  # set of additional projects to consider as plugins\n    \"logassert\",\n    \"nuts\",\n}\n\n\ndef escape_rst(text: str) -> str:\n    \"\"\"Rudimentary attempt to escape special RST characters to appear as\n    plain text.\"\"\"\n    text = (\n        text.replace(\"*\", \"\\\\*\")\n        .replace(\"<\", \"\\\\<\")\n        .replace(\">\", \"\\\\>\")\n        .replace(\"`\", \"\\\\`\")\n    )\n    text = re.sub(r\"_\\b\", \"\", text)\n    return text\n\n\ndef project_response_with_refresh(\n    session: CachedSession, name: str, last_serial: int\n) -> OriginalResponse | CachedResponse:\n    \"\"\"Get a http cached pypi project\n\n    force refresh in case of last serial mismatch\n    \"\"\"\n\n    response = session.get(f\"https://pypi.org/pypi/{name}/json\")\n    if int(response.headers.get(\"X-PyPI-Last-Serial\", -1)) != last_serial:\n        response = session.get(f\"https://pypi.org/pypi/{name}/json\", refresh=True)\n    return response\n\n\ndef get_session() -> CachedSession:\n    \"\"\"Configures the requests-cache session\"\"\"\n    cache_path = platformdirs.user_cache_path(\"pytest-plugin-list\")\n    cache_path.mkdir(exist_ok=True, parents=True)\n    cache_file = cache_path.joinpath(\"http_cache.sqlite3\")\n    return CachedSession(backend=SQLiteCache(cache_file))\n\n\ndef pytest_plugin_projects_from_pypi(session: CachedSession) -> dict[str, int]:\n    response = session.get(\n        \"https://pypi.org/simple\",\n        headers={\"Accept\": \"application/vnd.pypi.simple.v1+json\"},\n        refresh=True,\n    )\n    return {\n        name: p[\"_last-serial\"]\n        for p in response.json()[\"projects\"]\n        if (name := p[\"name\"]).startswith(\"pytest-\") or name in ADDITIONAL_PROJECTS\n    }",
                        "filename": "scripts/update-plugin-list.py",
                        "start_index": 0,
                        "end_index": 2939,
                        "start_line": 1,
                        "end_line": 155,
                        "max_line": 195,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__6.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is not relevant to the issue as it is a script for updating the plugin list for pytest, which is unrelated to the class cleanup methods in Python's unittest framework."
                }
            ]
        },
        "solution_task": "- Ensure that `unittest.TestCase.addClassCleanup` is being used correctly in the test class.\n- Verify that `unittest.TestCase.doClassCleanups` is being called after all tests in the class have run, which might not be the case when using `pytest`.\n- If `pytest` is being used, check if there is a custom pytest plugin or configuration that is interfering with the normal operation of `unittest.TestCase` class cleanups.\n- If the issue persists, consider using `tearDownClass` as a workaround to perform cleanup actions, ensuring compatibility with both `unittest` and `pytest`.\n- If the cleanup must be done using `addClassCleanup`, consider reporting the issue to the `pytest` development team if it is determined to be a compatibility issue with `pytest`.",
        "bouncer_response": {
            "score": 6,
            "criteria": "RESPONSE must provide actionable, relevant guidance to more parts of the PROMPT's described issue to score higher.",
            "supporting_evidence": "The RESPONSE provides several actionable suggestions, such as ensuring correct usage of `addClassCleanup`, verifying the call to `doClassCleanups`, checking for pytest plugins or configurations that might interfere, using `tearDownClass` as a workaround, and reporting the issue to the pytest development team if necessary. These are relevant and could potentially help in resolving the issue. However, the RESPONSE also includes a lengthy and irrelevant section listing code snippets from a GitHub repository that do not pertain to the problem at hand. This section does not add value to the RESPONSE and distracts from the otherwise useful advice given.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711734733.713859,
        "result": "- Ensure that `unittest.TestCase.addClassCleanup` is being used correctly in the test class.\n- Verify that `unittest.TestCase.doClassCleanups` is being called after all tests in the class have run, which might not be the case when using `pytest`.\n- If `pytest` is being used, check if there is a custom pytest plugin or configuration that is interfering with the normal operation of `unittest.TestCase` class cleanups.\n- If the issue persists, consider using `tearDownClass` as a workaround to perform cleanup actions, ensuring compatibility with both `unittest` and `pytest`.\n- If the cleanup must be done using `addClassCleanup`, consider reporting the issue to the `pytest` development team if it is determined to be a compatibility issue with `pytest`.\n\n### Code snippets to check\n\n-  \u2192 [.github](https://github.com/testbed/pytest-dev__pytest__6.2/tree//.github)- [Lines 1 - 2](https://github.com/testbed/pytest-dev__pytest__6.2/blob//.github/config.yml#L1-L2)\n\n This snippet is not relevant to the issue as it pertains to the ReadTheDocs configuration for the pytest project, which is unrelated to the class cleanup issue in Python 3.8+.\n-  \u2192 [.github](https://github.com/testbed/pytest-dev__pytest__6.2/tree//.github) \u2192 [ISSUE_TEMPLATE](https://github.com/testbed/pytest-dev__pytest__6.2/tree//.github/ISSUE_TEMPLATE)- [Lines 1 - 5](https://github.com/testbed/pytest-dev__pytest__6.2/blob//.github/ISSUE_TEMPLATE/config.yml#L1-L5)\n\n This snippet is not relevant to the issue as it is related to the issue template configuration for GitHub, which has no bearing on the Python class cleanup behavior.\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__6.2/tree//bench)- [Lines 1 - 11](https://github.com/testbed/pytest-dev__pytest__6.2/blob//bench/xunit.py#L1-L11)\n\n This snippet is not relevant to the issue as it is a benchmarking script that does not involve class cleanup methods or the use of `doClassCleanups`.\n-  \u2192 [src](https://github.com/testbed/pytest-dev__pytest__6.2/tree//src)- [Lines 1 - 10](https://github.com/testbed/pytest-dev__pytest__6.2/blob//src/py.py#L1-L10)\n\n This snippet is not relevant to the issue as it is a shim for pylib compatibility and does not relate to the class cleanup methods in Python's unittest framework.\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__6.2/tree//bench)- [Lines 1 - 14](https://github.com/testbed/pytest-dev__pytest__6.2/blob//bench/manyparam.py#L1-L14)\n\n This snippet is not relevant to the issue as it is a benchmarking script for testing parameterized fixtures in pytest, which is unrelated to the class cleanup issue.\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__6.2/tree//bench)- [Lines 1 - 13](https://github.com/testbed/pytest-dev__pytest__6.2/blob//bench/bench.py#L1-L13)\n\n This snippet is not relevant to the issue as it is a benchmarking script for profiling pytest runs, which is unrelated to the class cleanup issue.\n- - [Lines 2 - 72](https://github.com/testbed/pytest-dev__pytest__6.2/blob//.pre-commit-config.yaml#L2-L72)\n\n This snippet is not relevant to the issue as it is a configuration file for pre-commit hooks, which is unrelated to the class cleanup methods in Python's unittest framework. \n\n\n   - [Lines 73 - 108](https://github.com/testbed/pytest-dev__pytest__6.2/blob//.pre-commit-config.yaml#L73-L108)\n\n This snippet is not relevant to the issue as it is a configuration file for pre-commit hooks, specifically for linting reStructuredText files, which is unrelated to the class cleanup methods in Python's unittest framework.\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__6.2/tree//bench)- [Lines 1 - 9](https://github.com/testbed/pytest-dev__pytest__6.2/blob//bench/skip.py#L1-L9)\n\n This snippet is not relevant to the issue as it is a benchmarking script that tests skipping tests in pytest, which is unrelated to the class cleanup issue.\n-  \u2192 [scripts](https://github.com/testbed/pytest-dev__pytest__6.2/tree//scripts)- [Lines 1 - 155](https://github.com/testbed/pytest-dev__pytest__6.2/blob//scripts/update-plugin-list.py#L1-L155)\n\n This snippet is not relevant to the issue as it is a script for updating the plugin list for pytest, which is unrelated to the class cleanup methods in Python's unittest framework.",
        "context_relevance": 0.08,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE is relevant and answers the entire PROMPT completely.\nSupporting Evidence: The RESPONSE provides a comprehensive analysis of the issue described in the PROMPT, addressing the correct use of `addClassCleanup` and `doClassCleanups` in the context of Python's `unittest` framework and compatibility with `pytest`. It suggests verifying the correct call of cleanup methods, considering interference from custom plugins or configurations, and proposes a workaround with `tearDownClass`. It also recommends reporting the issue to the `pytest` development team if necessary. The RESPONSE then evaluates the relevance of various code snippets from a repository, correctly identifying that none of them are related to the class cleanup issue, which aligns with the PROMPT's focus on the absence of `doClassCleanups` in the repository. The RESPONSE fulfills the PROMPT by addressing the technical issue, suggesting troubleshooting steps, and evaluating the provided code snippets."
        },
        "qa_relevance": 1.0
    }
}