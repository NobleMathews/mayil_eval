{
    "id": "matplotlib__matplotlib-25515",
    "repo_name": "testbed/matplotlib__matplotlib__3.7",
    "task_id": 5550122650995508678,
    "title": "[ENH]: hi-res plot directive...",
    "body": "### Problem\n\nOur plot directive makes 100-dpi figures for the webpage.  These look pretty fuzzy on hiDPI screens, and we should do what we did for sphinx gallery and allow hi-res figures..\n\n### Proposed solution\n\nNot quite sure how to fix this.  We currently make a `.. figure::` from the plot directive, which is exactly the same as a `.. image::` except it allows a caption.  Internally, we use the caption functionality exactly once.  If we could drop the caption we could just use `.. sg-image::` from sphinx gallery, which allows srcset multiple resolution images.  \r\n\r\nJust increasing the dpi doesn't really work because it makes the images twice as big, but still low resolution, unless we have specified the `:width:` manually.  \n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/matplotlib__matplotlib__3.7.git",
    "requested_commit": "",
    "mayil_response": "To implement the feature request for high-resolution plot directives in the Matplotlib documentation, you can follow these steps:\n\n- Modify the `FigureMpl` class in `figmpl_directive.py` to handle the `srcset` attribute properly.\n- Update the `plot_directive.py` to generate multiple resolution images based on the `plot_srcset` configuration.\n- Ensure that the `plot_directive.py` uses the `FigureMpl` directive instead of the standard figure directive when `plot_srcset` is configured.\n- Update the documentation and examples to demonstrate how to use the new high-resolution image feature.\n\nHere's a high-level overview of the changes needed in the code:\n\n1. Update the `FigureMpl` class to handle `srcset` correctly:\n   - Modify the `run` method to process the `srcset` option and store it in the `image_node`.\n   - Update the `visit_figmpl_html` method to generate the correct HTML with `srcset` attributes.\n\n2. Modify `plot_directive.py` to generate multiple resolution images:\n   - In the `run_code` function, after the plot is generated, create additional high-resolution images based on the `plot_srcset` configuration.\n   - Update the `TEMPLATE` variable to include the `srcset` attribute in the generated RST.\n\n3. Update the documentation:\n   - Provide examples in the documentation on how to use the `srcset` attribute with the `.. figure-mpl::` directive.\n   - Explain the new feature in the user guide and the configuration options in `conf.py`.\n\nHere's a simplified example of how the `run` method in `FigureMpl` might be updated:\n\n```python\nclass FigureMpl(Figure):\n    # ... existing code ...\n\n    def run(self):\n        # ... existing code ...\n\n        # Handle srcset option\n        srcset_option = self.options.get('srcset', None)\n        if srcset_option:\n            image_node['srcset'] = _parse_srcsetNodes(srcset_option)\n\n        # ... existing code ...\n\n        return [image_node]\n```\n\nAnd an example of how to generate multiple resolution images in `plot_directive.py`:\n\n```python\ndef run_code(...):\n    # ... existing code ...\n\n    # Generate additional high-resolution images if plot_srcset is configured\n    if plot_srcset:\n        for factor in plot_srcset:\n            dpi_factor = float(factor.rstrip('x'))\n            # Generate the high-resolution image with the adjusted DPI\n            # Save the image with a name indicating the resolution factor\n\n    # ... existing code ...\n```\n\nRemember to test the changes thoroughly to ensure that the high-resolution images are generated correctly and that the `srcset` attribute is properly included in the HTML output.\n\n### Code snippets to check\n\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib) \u2192 [sphinxext](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib/sphinxext)- [Lines 34 - 112](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//lib/matplotlib/sphinxext/figmpl_directive.py#L34-L112)\n\n This snippet defines the FigureMpl class which implements the directive for optional hiDPI images, relevant to the issue of enabling hi-res figures. \n\n\n   - [Lines 1 - 270](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//lib/matplotlib/sphinxext/figmpl_directive.py#L1-L270)\n\n This snippet provides context for the FigureMpl directive and its purpose, which is to allow responsive resolution images, relevant to the issue. \n\n\n   - [Lines 172 - 254](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//lib/matplotlib/sphinxext/figmpl_directive.py#L172-L254)\n\n This snippet contains the visit_figmpl_html function which handles the HTML generation for the FigureMpl directive, including srcset handling, which is relevant to the issue. \n\n\n   - [Lines 115 - 169](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//lib/matplotlib/sphinxext/figmpl_directive.py#L115-L169)\n\n This snippet includes the _parse_srcsetNodes and _copy_images_figmpl functions which are involved in parsing and handling the srcset attribute for images, relevant to the issue.\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib) \u2192 [sphinxext](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib/sphinxext)- [Lines 1 - 612](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//lib/matplotlib/sphinxext/plot_directive.py#L1-L612)\n\n This snippet from plot_directive.py contains the documentation and configuration options for the plot directive, including the plot_srcset option which is relevant to the issue.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.00035999999999999997,
        "snippet_processor": 0.05671,
        "issue_star_creation": 0.03961,
        "issue_star_solver": 0.07892,
        "bouncer": 0.0273
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711696759.425003,
        "relevant_snippets": [
            {
                "code": "class FigureMpl(Figure):\n    \"\"\"\n    Implements a directive to allow an optional hidpi image.\n\n    Meant to be used with the *plot_srcset* configuration option in conf.py,\n    and gets set in the TEMPLATE of plot_directive.py\n\n    e.g.::\n\n        .. figure-mpl:: plot_directive/some_plots-1.png\n            :alt: bar\n            :srcset: plot_directive/some_plots-1.png,\n                     plot_directive/some_plots-1.2x.png 2.00x\n            :class: plot-directive\n\n    The resulting html (at ``some_plots.html``) is::\n\n        <img src=\"sphx_glr_bar_001_hidpi.png\"\n            srcset=\"_images/some_plot-1.png,\n                    _images/some_plots-1.2x.png 2.00x\",\n            alt=\"bar\"\n            class=\"plot_directive\" />\n\n    Note that the handling of subdirectories is different than that used by the sphinx\n    figure directive::\n\n        .. figure-mpl:: plot_directive/nestedpage/index-1.png\n            :alt: bar\n            :srcset: plot_directive/nestedpage/index-1.png\n                     plot_directive/nestedpage/index-1.2x.png 2.00x\n            :class: plot_directive\n\n    The resulting html (at ``nestedpage/index.html``)::\n\n        <img src=\"../_images/nestedpage-index-1.png\"\n            srcset=\"../_images/nestedpage-index-1.png,\n                    ../_images/_images/nestedpage-index-1.2x.png 2.00x\",\n            alt=\"bar\"\n            class=\"sphx-glr-single-img\" />\n\n    where the subdirectory is included in the image name for uniqueness.\n    \"\"\"\n\n    has_content = False\n    required_arguments = 1\n    optional_arguments = 2\n    final_argument_whitespace = False\n    option_spec = {\n        'alt': directives.unchanged,\n        'height': directives.length_or_unitless,\n        'width': directives.length_or_percentage_or_unitless,\n        'scale': directives.nonnegative_int,\n        'align': Image.align,\n        'class': directives.class_option,\n        'caption': directives.unchanged,\n        'srcset': directives.unchanged,\n    }\n\n    def run(self):\n\n        image_node = figmplnode()\n\n        imagenm = self.arguments[0]\n        image_node['alt'] = self.options.get('alt', '')\n        image_node['align'] = self.options.get('align', None)\n        image_node['class'] = self.options.get('class', None)\n        image_node['width'] = self.options.get('width', None)\n        image_node['height'] = self.options.get('height', None)\n        image_node['scale'] = self.options.get('scale', None)\n        image_node['caption'] = self.options.get('caption', None)\n\n        # we would like uri to be the highest dpi version so that\n        # latex etc will use that.  But for now, lets just make\n        # imagenm... maybe pdf one day?\n\n        image_node['uri'] = imagenm\n        image_node['srcset'] = self.options.get('srcset', None)\n\n        return [image_node]",
                "filename": "lib/matplotlib/sphinxext/figmpl_directive.py",
                "start_index": 866,
                "end_index": 3655,
                "start_line": 34,
                "end_line": 112,
                "max_line": 288,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 0.9
            },
            {
                "code": "/*\n * plot_directive.css\n * ~~~~~~~~~~~~\n *\n * Stylesheet controlling images created using the `plot` directive within\n * Sphinx.\n *\n * :copyright: Copyright 2020-* by the Matplotlib development team.\n * :license: Matplotlib, see LICENSE for details.\n *\n */\n\nimg.plot-directive {\n    border: 0;\n    max-width: 100%;\n}",
                "filename": "lib/matplotlib/mpl-data/plot_directive/plot_directive.css",
                "start_index": 0,
                "end_index": 317,
                "start_line": 1,
                "end_line": 16,
                "max_line": 16,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"\nA directive for including a Matplotlib plot in a Sphinx document\n================================================================\n\nThis is a Sphinx extension providing a reStructuredText directive\n``.. plot::`` for including a plot in a Sphinx document.\n\nIn HTML output, ``.. plot::`` will include a .png file with a link\nto a high-res .png and .pdf.  In LaTeX output, it will include a .pdf.\n\nThe plot content may be defined in one of three ways:\n\n1. **A path to a source file** as the argument to the directive::\n\n     .. plot:: path/to/plot.py\n\n   When a path to a source file is given, the content of the\n   directive may optionally contain a caption for the plot::\n\n     .. plot:: path/to/plot.py\n\n        The plot caption.\n\n   Additionally, one may specify the name of a function to call (with\n   no arguments) immediately after importing the module::\n\n     .. plot:: path/to/plot.py plot_function1\n\n2. Included as **inline content** to the directive::\n\n     .. plot::\n\n        import matplotlib.pyplot as plt\n        plt.plot([1, 2, 3], [4, 5, 6])\n        plt.title(\"A plotting exammple\")\n\n3. Using **doctest** syntax::\n\n     .. plot::\n\n        A plotting example:\n        >>> import matplotlib.pyplot as plt\n        >>> plt.plot([1, 2, 3], [4, 5, 6])\n\nOptions\n-------\n\nThe ``.. plot::`` directive supports the following options:\n\n``:format:`` : {'python', 'doctest'}\n    The format of the input.  If unset, the format is auto-detected.\n\n``:include-source:`` : bool\n    Whether to display the source code. The default can be changed using\n    the ``plot_include_source`` variable in :file:`conf.py` (which itself\n    defaults to False).\n\n``:show-source-link:`` : bool\n    Whether to show a link to the source in HTML. The default can be\n    changed using the ``plot_html_show_source_link`` variable in\n    :file:`conf.py` (which itself defaults to True).\n\n``:context:`` : bool or str\n    If provided, the code will be run in the context of all previous plot\n    directives for which the ``:context:`` option was specified.  This only\n    applies to inline code plot directives, not those run from files. If\n    the ``:context: reset`` option is specified, the context is reset\n    for this and future plots, and previous figures are closed prior to\n    running the code. ``:context: close-figs`` keeps the context but closes\n    previous figures before running the code.\n\n``:nofigs:`` : bool\n    If specified, the code block will be run, but no figures will be\n    inserted.  This is usually useful with the ``:context:`` option.\n\n``:caption:`` : str\n    If specified, the option's argument will be used as a caption for the\n    figure. This overwrites the caption given in the content, when the plot\n    is generated from a file.\n\nAdditionally, this directive supports all the options of the `image directive\n<https://docutils.sourceforge.io/docs/ref/rst/directives.html#image>`_,\nexcept for ``:target:`` (since plot will add its own target).  These include\n``:alt:``, ``:height:``, ``:width:``, ``:scale:``, ``:align:`` and ``:class:``.\n\nConfiguration options\n---------------------\n\nThe plot directive has the following configuration options:\n\nplot_include_source\n    Default value for the include-source option (default: False).\n\nplot_html_show_source_link\n    Whether to show a link to the source in HTML (default: True).\n\nplot_pre_code\n    Code that should be executed before each plot. If None (the default),\n    it will default to a string containing::\n\n        import numpy as np\n        from matplotlib import pyplot as plt\n\nplot_basedir\n    Base directory, to which ``plot::`` file names are relative to.\n    If None or empty (the default), file names are relative to the\n    directory where the file containing the directive is.\n\nplot_formats\n    File formats to generate (default: ['png', 'hires.png', 'pdf']).\n    List of tuples or strings::\n\n        [(suffix, dpi), suffix, ...]\n\n    that determine the file format and the DPI. For entries whose\n    DPI was omitted, sensible defaults are chosen. When passing from\n    the command line through sphinx_build the list should be passed as\n    suffix:dpi,suffix:dpi, ...\n\nplot_html_show_formats\n    Whether to show links to the files in HTML (default: True).\n\nplot_rcparams\n    A dictionary containing any non-standard rcParams that should\n    be applied before each plot (default: {}).\n\nplot_apply_rcparams\n    By default, rcParams are applied when ``:context:`` option is not used\n    in a plot directive.  If set, this configuration option overrides this\n    behavior and applies rcParams before each plot.\n\nplot_working_directory\n    By default, the working directory will be changed to the directory of\n    the example, so the code can get at its data files, if any.  Also its\n    path will be added to `sys.path` so it can import any helper modules\n    sitting beside it.  This configuration option can be used to specify\n    a central directory (also added to `sys.path`) where data files and\n    helper modules for all code are located.\n\nplot_template\n    Provide a customized template for preparing restructured text.\n\nplot_srcset\n    Allow the srcset image option for responsive image resolutions. List of\n    strings with the multiplicative factors followed by an \"x\".\n    e.g. [\"2.0x\", \"1.5x\"].  \"2.0x\" will create a png with the default \"png\"\n    resolution from plot_formats, multiplied by 2. If plot_srcset is\n    specified, the plot directive uses the\n    :doc:`/api/sphinxext_figmpl_directive_api` (instead of the usual figure\n    directive) in the intermediary rst file that is generated.\n    The plot_srcset option is incompatible with *singlehtml* builds, and an\n    error will be raised.\n\nNotes on how it works\n---------------------\n\nThe plot directive runs the code it is given, either in the source file or the\ncode under the directive. The figure created (if any) is saved in the sphinx\nbuild directory under a subdirectory named ``plot_directive``.  It then creates\nan intermediate rst file that calls a ``.. figure:`` directive (or\n``.. figmpl::`` directive if ``plot_srcset`` is being used) and has links to\nthe ``*.png`` files in the ``plot_directive`` directory.  These translations can\nbe customized by changing the *plot_template*.  See the source of\n:doc:`/api/sphinxext_plot_directive_api` for the templates defined in *TEMPLATE*\nand *TEMPLATE_SRCSET*.\n\"\"\"",
                "filename": "lib/matplotlib/sphinxext/plot_directive.py",
                "start_index": 0,
                "end_index": 6360,
                "start_line": 1,
                "end_line": 612,
                "max_line": 933,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 0.7
            },
            {
                "code": "name: Feature Request\ndescription: Suggest something to add to Matplotlib!\ntitle: \"[ENH]: \"\nlabels: [New feature]\nbody:\n  - type: markdown\n    attributes:\n      value: |\n         Please search the [issues](https://github.com/matplotlib/matplotlib/issues) for relevant feature requests before creating a new feature request.\n  - type: textarea\n    id: problem\n    attributes:\n      label: Problem\n      description: Briefly describe the problem this feature will solve. (2-4 sentences)\n      placeholder: |\n        * I'm always frustrated when [...] because [...]\n        * I would like it if [...] happened when I [...] because [...]\n        * Here is a sample image of what I am asking for [...]\n    validations:\n      required: true\n  - type: textarea\n    id: solution\n    attributes:\n      label: Proposed solution\n      description: Describe a way to accomplish the goals of this feature request.",
                "filename": ".github/ISSUE_TEMPLATE/feature_request.yml",
                "start_index": 0,
                "end_index": 900,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 0.9
            },
            {
                "code": "\"\"\"\nAdd a ``figure-mpl`` directive that is a responsive version of ``figure``.\n\nThis implementation is very similar to ``.. figure::``, except it also allows a\n``srcset=`` argument to be passed to the image tag, hence allowing responsive\nresolution images.\n\nThere is no particular reason this could not be used standalone, but is meant\nto be used with :doc:`/api/sphinxext_plot_directive_api`.\n\nNote that the directory organization is a bit different than ``.. figure::``.\nSee the *FigureMpl* documentation below.\n\n\"\"\"\nfrom docutils import nodes\n\nfrom docutils.parsers.rst import directives\nfrom docutils.parsers.rst.directives.images import Figure, Image\n\nimport os\nfrom os.path import relpath\nfrom pathlib import PurePath, Path\nimport shutil\n\nfrom sphinx.errors import ExtensionError\n\nimport matplotlib\n\n\nclass figmplnode(nodes.General, nodes.Element):\n    pass",
                "filename": "lib/matplotlib/sphinxext/figmpl_directive.py",
                "start_index": 0,
                "end_index": 863,
                "start_line": 1,
                "end_line": 270,
                "max_line": 288,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 0.9
            },
            {
                "code": "TEMPLATE = _SOURCECODE + \"\"\"\n\n   {% for img in images %}\n   .. figure:: {{ build_dir }}/{{ img.basename }}.{{ default_fmt }}\n      {% for option in options -%}\n      {{ option }}\n      {% endfor %}\n\n      {% if html_show_formats and multi_image -%}\n        (\n        {%- for fmt in img.formats -%}\n        {%- if not loop.first -%}, {% endif -%}\n        :download:`{{ fmt }} <{{ build_dir }}/{{ img.basename }}.{{ fmt }}>`\n        {%- endfor -%}\n        )\n      {%- endif -%}\n\n      {{ caption }}  {# appropriate leading whitespace added beforehand #}\n   {% endfor %}\n\n.. only:: not html\n\n   {% for img in images %}\n   .. figure:: {{ build_dir }}/{{ img.basename }}.*\n      {% for option in options -%}\n      {{ option }}\n      {% endfor -%}\n\n      {{ caption }}  {# appropriate leading whitespace added beforehand #}\n   {% endfor %}\n\n\"\"\"\n\nexception_template = \"\"\"\n.. only:: html\n\n   [`source code <%(linkdir)s/%(basename)s.py>`__]\n\nException occurred rendering plot.\n\n\"\"\"\n\n# the context of the plot for all directives specified with the\n# :context: option\nplot_context = dict()\n\n\nclass ImageFile:\n    def __init__(self, basename, dirname):\n        self.basename = basename\n        self.dirname = dirname\n        self.formats = []\n\n    def filename(self, format):\n        return os.path.join(self.dirname, f\"{self.basename}.{format}\")\n\n    def filenames(self):\n        return [self.filename(fmt) for fmt in self.formats]\n\n\ndef out_of_date(original, derived, includes=None):\n    \"\"\"\n    Return whether *derived* is out-of-date relative to *original* or any of\n    the RST files included in it using the RST include directive (*includes*).\n    *derived* and *original* are full paths, and *includes* is optionally a\n    list of full paths which may have been included in the *original*.\n    \"\"\"\n    if not os.path.exists(derived):\n        return True\n\n    if includes is None:\n        includes = []\n    files_to_check = [original, *includes]\n\n    def out_of_date_one(original, derived_mtime):\n        return (os.path.exists(original) and\n                derived_mtime < os.stat(original).st_mtime)\n\n    derived_mtime = os.stat(derived).st_mtime\n    return any(out_of_date_one(f, derived_mtime) for f in files_to_check)\n\n\nclass PlotError(RuntimeError):\n    pass",
                "filename": "lib/matplotlib/sphinxext/plot_directive.py",
                "start_index": 14277,
                "end_index": 16535,
                "start_line": 424,
                "end_line": 845,
                "max_line": 933,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "# TODO:\n# * Documentation -- this will need a new section of the User's Guide.\n#      Both for Animations and just timers.\n#   - Also need to update\n#     https://scipy-cookbook.readthedocs.io/items/Matplotlib_Animations.html\n# * Blit\n#   * Currently broken with Qt4 for widgets that don't start on screen\n#   * Still a few edge cases that aren't working correctly\n#   * Can this integrate better with existing matplotlib animation artist flag?\n#     - If animated removes from default draw(), perhaps we could use this to\n#       simplify initial draw.\n# * Example\n#   * Frameless animation - pure procedural with no loop\n#   * Need example that uses something like inotify or subprocess\n#   * Complex syncing examples\n# * Movies\n#   * Can blit be enabled for movies?\n# * Need to consider event sources to allow clicking through multiple figures\n\n\nimport abc\nimport base64\nimport contextlib\nfrom io import BytesIO, TextIOWrapper\nimport itertools\nimport logging\nfrom pathlib import Path\nimport shutil\nimport subprocess\nimport sys\nfrom tempfile import TemporaryDirectory\nimport uuid\nimport warnings\n\nimport numpy as np\nfrom PIL import Image\n\nimport matplotlib as mpl\nfrom matplotlib._animation_data import (\n    DISPLAY_TEMPLATE, INCLUDED_FRAMES, JS_INCLUDE, STYLE_INCLUDE)\nfrom matplotlib import _api, cbook\nimport matplotlib.colors as mcolors\n\n_log = logging.getLogger(__name__)\n\n# Process creation flag for subprocess to prevent it raising a terminal\n# window. See for example https://stackoverflow.com/q/24130623/\nsubprocess_creation_flags = (\n    subprocess.CREATE_NO_WINDOW if sys.platform == 'win32' else 0)\n\n# Other potential writing methods:\n# * http://pymedia.org/\n# * libming (produces swf) python wrappers: https://github.com/libming/libming\n# * Wrap x264 API:\n\n# (https://stackoverflow.com/q/2940671/)\n\n\ndef adjusted_figsize(w, h, dpi, n):\n    \"\"\"\n    Compute figure size so that pixels are a multiple of n.\n\n    Parameters\n    ----------\n    w, h : float\n        Size in inches.\n\n    dpi : float\n        The dpi.\n\n    n : int\n        The target multiple.\n\n    Returns\n    -------\n    wnew, hnew : float\n        The new figure size in inches.\n    \"\"\"\n\n    # this maybe simplified if / when we adopt consistent rounding for\n    # pixel size across the whole library\n    def correct_roundoff(x, dpi, n):\n        if int(x*dpi) % n != 0:\n            if int(np.nextafter(x, np.inf)*dpi) % n == 0:\n                x = np.nextafter(x, np.inf)\n            elif int(np.nextafter(x, -np.inf)*dpi) % n == 0:\n                x = np.nextafter(x, -np.inf)\n        return x\n\n    wnew = int(w * dpi / n) * n / dpi\n    hnew = int(h * dpi / n) * n / dpi\n    return correct_roundoff(wnew, dpi, n), correct_roundoff(hnew, dpi, n)",
                "filename": "lib/matplotlib/animation.py",
                "start_index": 0,
                "end_index": 2721,
                "start_line": 1,
                "end_line": 92,
                "max_line": 1804,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def visit_figmpl_html(self, node):\n\n    imagedir, srcset, rel = _copy_images_figmpl(self, node)\n\n    # /doc/examples/subd/plot_1.rst\n    docsource = PurePath(self.document['source'])\n    # /doc/\n    # make sure to add the trailing slash:\n    srctop = PurePath(self.builder.srcdir, '')\n    # examples/subd/plot_1.rst\n    relsource = relpath(docsource, srctop)\n    # /doc/build/html\n    desttop = PurePath(self.builder.outdir, '')\n    # /doc/build/html/examples/subd\n    dest = desttop / relsource\n\n    # ../../_images/ for dirhtml and ../_images/ for html\n    imagerel = PurePath(relpath(imagedir, dest.parent)).as_posix()\n    if self.builder.name == \"dirhtml\":\n        imagerel = f'..{imagerel}'\n\n    # make uri also be relative...\n    nm = PurePath(node['uri'][1:]).name\n    uri = f'{imagerel}/{rel}{nm}'\n\n    # make srcset str.  Need to change all the prefixes!\n    maxsrc = uri\n    srcsetst = ''\n    if srcset:\n        maxmult = -1\n        for mult, src in srcset.items():\n            nm = PurePath(src[1:]).name\n            # ../../_images/plot_1_2_0x.png\n            path = f'{imagerel}/{rel}{nm}'\n            srcsetst += path\n            if mult == 0:\n                srcsetst += ', '\n            else:\n                srcsetst += f' {mult:1.2f}x, '\n\n            if mult > maxmult:\n                maxmult = mult\n                maxsrc = path\n\n        # trim trailing comma and space...\n        srcsetst = srcsetst[:-2]\n\n    alt = node['alt']\n    if node['class'] is not None:\n        classst = ' '.join(node['class'])\n        classst = f'class=\"{classst}\"'\n\n    else:\n        classst = ''\n\n    stylers = ['width', 'height', 'scale']\n    stylest = ''\n    for style in stylers:\n        if node[style]:\n            stylest += f'{style}: {node[style]};'\n\n    figalign = node['align'] if node['align'] else 'center'\n\n# <figure class=\"align-default\" id=\"id1\">\n# <a class=\"reference internal image-reference\" href=\"_images/index-1.2x.png\">\n# <img alt=\"_images/index-1.2x.png\" src=\"_images/index-1.2x.png\" style=\"width: 53%;\" />\n# </a>\n# <figcaption>\n# <p><span class=\"caption-text\">Figure caption is here....</span>\n# <a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">#</a></p>\n# </figcaption>\n# </figure>\n    img_block = (f'<img src=\"{uri}\" style=\"{stylest}\" srcset=\"{srcsetst}\" '\n                 f'alt=\"{alt}\" {classst}/>')\n    html_block = f'<figure class=\"align-{figalign}\">\\n'\n    html_block += f'  <a class=\"reference internal image-reference\" href=\"{maxsrc}\">\\n'\n    html_block += f'    {img_block}\\n  </a>\\n'\n    if node['caption']:\n        html_block += '  <figcaption>\\n'\n        html_block += f'   <p><span class=\"caption-text\">{node[\"caption\"]}</span></p>\\n'\n        html_block += '  </figcaption>\\n'\n    html_block += '</figure>\\n'\n    self.body.append(html_block)",
                "filename": "lib/matplotlib/sphinxext/figmpl_directive.py",
                "start_index": 5454,
                "end_index": 8248,
                "start_line": 172,
                "end_line": 254,
                "max_line": 288,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 0.9
            },
            {
                "code": "# images of the colormaps\n# <../colors/colormaps.html>`_.\n#\n# .. _`Color Bars`:\n#\n# Color scale reference\n# ------------------------\n#\n# It's helpful to have an idea of what value a color represents.  We can\n# do that by adding a color bar to your figure:\n\nimgplot = plt.imshow(lum_img)\nplt.colorbar()\n\n# %%\n# .. _`Data ranges`:\n#\n# Examining a specific data range\n# ---------------------------------\n#\n# Sometimes you want to enhance the contrast in your image, or expand\n# the contrast in a particular region while sacrificing the detail in\n# colors that don't vary much, or don't matter.  A good tool to find\n# interesting regions is the histogram.  To create a histogram of our\n# image data, we use the :func:`~matplotlib.pyplot.hist` function.\n\nplt.hist(lum_img.ravel(), bins=range(256), fc='k', ec='k')\n\n# %%\n# Most often, the \"interesting\" part of the image is around the peak,\n# and you can get extra contrast by clipping the regions above and/or\n# below the peak.  In our histogram, it looks like there's not much\n# useful information in the high end (not many white things in the\n# image).  Let's adjust the upper limit, so that we effectively \"zoom in\n# on\" part of the histogram.  We do this by setting *clim*, the colormap\n# limits.\n#\n# This can be done by passing a *clim* keyword argument in the call to\n# ``imshow``.\n\nplt.imshow(lum_img, clim=(0, 175))\n\n# %%\n# This can also be done by calling the\n# :meth:`~matplotlib.cm.ScalarMappable.set_clim` method of the returned image\n# plot object, but make sure that you do so in the same cell as your plot\n# command when working with the Jupyter Notebook - it will not change\n# plots from earlier cells.\n\nimgplot = plt.imshow(lum_img)\nimgplot.set_clim(0, 175)\n\n# %%\n# .. _Interpolation:\n#\n# Array Interpolation schemes\n# ---------------------------\n#\n# Interpolation calculates what the color or value of a pixel \"should\"\n# be, according to different mathematical schemes.  One common place\n# that this happens is when you resize an image.  The number of pixels\n# change, but you want the same information.  Since pixels are discrete,\n# there's missing space.  Interpolation is how you fill that space.\n# This is why your images sometimes come out looking pixelated when you\n# blow them up.  The effect is more pronounced when the difference\n# between the original image and the expanded image is greater.  Let's\n# take our image and shrink it.  We're effectively discarding pixels,\n# only keeping a select few.  Now when we plot it, that data gets blown\n# up to the size on your screen.  The old pixels aren't there anymore,\n# and the computer has to draw in pixels to fill that space.\n#\n# We'll use the Pillow library that we used to load the image also to resize\n# the image.\n\nimg = Image.open('../../doc/_static/stinkbug.png')\nimg.thumbnail((64, 64))  # resizes image in-place\nimgplot = plt.imshow(img)\n\n# %%\n# Here we use the default interpolation (\"nearest\"), since we did not",
                "filename": "galleries/tutorials/images.py",
                "start_index": 5940,
                "end_index": 8882,
                "start_line": 160,
                "end_line": 239,
                "max_line": 253,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def _parse_srcsetNodes(st):\n    \"\"\"\n    parse srcset...\n    \"\"\"\n    entries = st.split(',')\n    srcset = {}\n    for entry in entries:\n        spl = entry.strip().split(' ')\n        if len(spl) == 1:\n            srcset[0] = spl[0]\n        elif len(spl) == 2:\n            mult = spl[1][:-1]\n            srcset[float(mult)] = spl[0]\n        else:\n            raise ExtensionError(f'srcset argument \"{entry}\" is invalid.')\n    return srcset\n\n\ndef _copy_images_figmpl(self, node):\n\n    # these will be the temporary place the plot-directive put the images eg:\n    # ../../../build/html/plot_directive/users/explain/artists/index-1.png\n    if node['srcset']:\n        srcset = _parse_srcsetNodes(node['srcset'])\n    else:\n        srcset = None\n\n    # the rst file's location:  eg /Users/username/matplotlib/doc/users/explain/artists\n    docsource = PurePath(self.document['source']).parent\n\n    # get the relpath relative to root:\n    srctop = self.builder.srcdir\n    rel = relpath(docsource, srctop).replace('.', '').replace(os.sep, '-')\n    if len(rel):\n        rel += '-'\n    # eg: users/explain/artists\n\n    imagedir = PurePath(self.builder.outdir, self.builder.imagedir)\n    # eg: /Users/username/matplotlib/doc/build/html/_images/users/explain/artists\n\n    Path(imagedir).mkdir(parents=True, exist_ok=True)\n\n    # copy all the sources to the imagedir:\n    if srcset:\n        for src in srcset.values():\n            # the entries in srcset are relative to docsource's directory\n            abspath = PurePath(docsource, src)\n            name = rel + abspath.name\n            shutil.copyfile(abspath, imagedir / name)\n    else:\n        abspath = PurePath(docsource, node['uri'])\n        name = rel + abspath.name\n        shutil.copyfile(abspath, imagedir / name)\n\n    return imagedir, srcset, rel",
                "filename": "lib/matplotlib/sphinxext/figmpl_directive.py",
                "start_index": 3658,
                "end_index": 5451,
                "start_line": 115,
                "end_line": 169,
                "max_line": 288,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 0.9
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "lib/matplotlib/sphinxext/figmpl_directive.py": [
                {
                    "chunk": {
                        "code": "class FigureMpl(Figure):\n    \"\"\"\n    Implements a directive to allow an optional hidpi image.\n\n    Meant to be used with the *plot_srcset* configuration option in conf.py,\n    and gets set in the TEMPLATE of plot_directive.py\n\n    e.g.::\n\n        .. figure-mpl:: plot_directive/some_plots-1.png\n            :alt: bar\n            :srcset: plot_directive/some_plots-1.png,\n                     plot_directive/some_plots-1.2x.png 2.00x\n            :class: plot-directive\n\n    The resulting html (at ``some_plots.html``) is::\n\n        <img src=\"sphx_glr_bar_001_hidpi.png\"\n            srcset=\"_images/some_plot-1.png,\n                    _images/some_plots-1.2x.png 2.00x\",\n            alt=\"bar\"\n            class=\"plot_directive\" />\n\n    Note that the handling of subdirectories is different than that used by the sphinx\n    figure directive::\n\n        .. figure-mpl:: plot_directive/nestedpage/index-1.png\n            :alt: bar\n            :srcset: plot_directive/nestedpage/index-1.png\n                     plot_directive/nestedpage/index-1.2x.png 2.00x\n            :class: plot_directive\n\n    The resulting html (at ``nestedpage/index.html``)::\n\n        <img src=\"../_images/nestedpage-index-1.png\"\n            srcset=\"../_images/nestedpage-index-1.png,\n                    ../_images/_images/nestedpage-index-1.2x.png 2.00x\",\n            alt=\"bar\"\n            class=\"sphx-glr-single-img\" />\n\n    where the subdirectory is included in the image name for uniqueness.\n    \"\"\"\n\n    has_content = False\n    required_arguments = 1\n    optional_arguments = 2\n    final_argument_whitespace = False\n    option_spec = {\n        'alt': directives.unchanged,\n        'height': directives.length_or_unitless,\n        'width': directives.length_or_percentage_or_unitless,\n        'scale': directives.nonnegative_int,\n        'align': Image.align,\n        'class': directives.class_option,\n        'caption': directives.unchanged,\n        'srcset': directives.unchanged,\n    }\n\n    def run(self):\n\n        image_node = figmplnode()\n\n        imagenm = self.arguments[0]\n        image_node['alt'] = self.options.get('alt', '')\n        image_node['align'] = self.options.get('align', None)\n        image_node['class'] = self.options.get('class', None)\n        image_node['width'] = self.options.get('width', None)\n        image_node['height'] = self.options.get('height', None)\n        image_node['scale'] = self.options.get('scale', None)\n        image_node['caption'] = self.options.get('caption', None)\n\n        # we would like uri to be the highest dpi version so that\n        # latex etc will use that.  But for now, lets just make\n        # imagenm... maybe pdf one day?\n\n        image_node['uri'] = imagenm\n        image_node['srcset'] = self.options.get('srcset', None)\n\n        return [image_node]",
                        "filename": "lib/matplotlib/sphinxext/figmpl_directive.py",
                        "start_index": 866,
                        "end_index": 3655,
                        "start_line": 34,
                        "end_line": 112,
                        "max_line": 288,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.7",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet defines the FigureMpl class which implements the directive for optional hiDPI images, relevant to the issue of enabling hi-res figures."
                },
                {
                    "chunk": {
                        "code": "\"\"\"\nAdd a ``figure-mpl`` directive that is a responsive version of ``figure``.\n\nThis implementation is very similar to ``.. figure::``, except it also allows a\n``srcset=`` argument to be passed to the image tag, hence allowing responsive\nresolution images.\n\nThere is no particular reason this could not be used standalone, but is meant\nto be used with :doc:`/api/sphinxext_plot_directive_api`.\n\nNote that the directory organization is a bit different than ``.. figure::``.\nSee the *FigureMpl* documentation below.\n\n\"\"\"\nfrom docutils import nodes\n\nfrom docutils.parsers.rst import directives\nfrom docutils.parsers.rst.directives.images import Figure, Image\n\nimport os\nfrom os.path import relpath\nfrom pathlib import PurePath, Path\nimport shutil\n\nfrom sphinx.errors import ExtensionError\n\nimport matplotlib\n\n\nclass figmplnode(nodes.General, nodes.Element):\n    pass",
                        "filename": "lib/matplotlib/sphinxext/figmpl_directive.py",
                        "start_index": 0,
                        "end_index": 863,
                        "start_line": 1,
                        "end_line": 270,
                        "max_line": 288,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.7",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet provides context for the FigureMpl directive and its purpose, which is to allow responsive resolution images, relevant to the issue."
                },
                {
                    "chunk": {
                        "code": "def visit_figmpl_html(self, node):\n\n    imagedir, srcset, rel = _copy_images_figmpl(self, node)\n\n    # /doc/examples/subd/plot_1.rst\n    docsource = PurePath(self.document['source'])\n    # /doc/\n    # make sure to add the trailing slash:\n    srctop = PurePath(self.builder.srcdir, '')\n    # examples/subd/plot_1.rst\n    relsource = relpath(docsource, srctop)\n    # /doc/build/html\n    desttop = PurePath(self.builder.outdir, '')\n    # /doc/build/html/examples/subd\n    dest = desttop / relsource\n\n    # ../../_images/ for dirhtml and ../_images/ for html\n    imagerel = PurePath(relpath(imagedir, dest.parent)).as_posix()\n    if self.builder.name == \"dirhtml\":\n        imagerel = f'..{imagerel}'\n\n    # make uri also be relative...\n    nm = PurePath(node['uri'][1:]).name\n    uri = f'{imagerel}/{rel}{nm}'\n\n    # make srcset str.  Need to change all the prefixes!\n    maxsrc = uri\n    srcsetst = ''\n    if srcset:\n        maxmult = -1\n        for mult, src in srcset.items():\n            nm = PurePath(src[1:]).name\n            # ../../_images/plot_1_2_0x.png\n            path = f'{imagerel}/{rel}{nm}'\n            srcsetst += path\n            if mult == 0:\n                srcsetst += ', '\n            else:\n                srcsetst += f' {mult:1.2f}x, '\n\n            if mult > maxmult:\n                maxmult = mult\n                maxsrc = path\n\n        # trim trailing comma and space...\n        srcsetst = srcsetst[:-2]\n\n    alt = node['alt']\n    if node['class'] is not None:\n        classst = ' '.join(node['class'])\n        classst = f'class=\"{classst}\"'\n\n    else:\n        classst = ''\n\n    stylers = ['width', 'height', 'scale']\n    stylest = ''\n    for style in stylers:\n        if node[style]:\n            stylest += f'{style}: {node[style]};'\n\n    figalign = node['align'] if node['align'] else 'center'\n\n# <figure class=\"align-default\" id=\"id1\">\n# <a class=\"reference internal image-reference\" href=\"_images/index-1.2x.png\">\n# <img alt=\"_images/index-1.2x.png\" src=\"_images/index-1.2x.png\" style=\"width: 53%;\" />\n# </a>\n# <figcaption>\n# <p><span class=\"caption-text\">Figure caption is here....</span>\n# <a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">#</a></p>\n# </figcaption>\n# </figure>\n    img_block = (f'<img src=\"{uri}\" style=\"{stylest}\" srcset=\"{srcsetst}\" '\n                 f'alt=\"{alt}\" {classst}/>')\n    html_block = f'<figure class=\"align-{figalign}\">\\n'\n    html_block += f'  <a class=\"reference internal image-reference\" href=\"{maxsrc}\">\\n'\n    html_block += f'    {img_block}\\n  </a>\\n'\n    if node['caption']:\n        html_block += '  <figcaption>\\n'\n        html_block += f'   <p><span class=\"caption-text\">{node[\"caption\"]}</span></p>\\n'\n        html_block += '  </figcaption>\\n'\n    html_block += '</figure>\\n'\n    self.body.append(html_block)",
                        "filename": "lib/matplotlib/sphinxext/figmpl_directive.py",
                        "start_index": 5454,
                        "end_index": 8248,
                        "start_line": 172,
                        "end_line": 254,
                        "max_line": 288,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.7",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the visit_figmpl_html function which handles the HTML generation for the FigureMpl directive, including srcset handling, which is relevant to the issue."
                },
                {
                    "chunk": {
                        "code": "def _parse_srcsetNodes(st):\n    \"\"\"\n    parse srcset...\n    \"\"\"\n    entries = st.split(',')\n    srcset = {}\n    for entry in entries:\n        spl = entry.strip().split(' ')\n        if len(spl) == 1:\n            srcset[0] = spl[0]\n        elif len(spl) == 2:\n            mult = spl[1][:-1]\n            srcset[float(mult)] = spl[0]\n        else:\n            raise ExtensionError(f'srcset argument \"{entry}\" is invalid.')\n    return srcset\n\n\ndef _copy_images_figmpl(self, node):\n\n    # these will be the temporary place the plot-directive put the images eg:\n    # ../../../build/html/plot_directive/users/explain/artists/index-1.png\n    if node['srcset']:\n        srcset = _parse_srcsetNodes(node['srcset'])\n    else:\n        srcset = None\n\n    # the rst file's location:  eg /Users/username/matplotlib/doc/users/explain/artists\n    docsource = PurePath(self.document['source']).parent\n\n    # get the relpath relative to root:\n    srctop = self.builder.srcdir\n    rel = relpath(docsource, srctop).replace('.', '').replace(os.sep, '-')\n    if len(rel):\n        rel += '-'\n    # eg: users/explain/artists\n\n    imagedir = PurePath(self.builder.outdir, self.builder.imagedir)\n    # eg: /Users/username/matplotlib/doc/build/html/_images/users/explain/artists\n\n    Path(imagedir).mkdir(parents=True, exist_ok=True)\n\n    # copy all the sources to the imagedir:\n    if srcset:\n        for src in srcset.values():\n            # the entries in srcset are relative to docsource's directory\n            abspath = PurePath(docsource, src)\n            name = rel + abspath.name\n            shutil.copyfile(abspath, imagedir / name)\n    else:\n        abspath = PurePath(docsource, node['uri'])\n        name = rel + abspath.name\n        shutil.copyfile(abspath, imagedir / name)\n\n    return imagedir, srcset, rel",
                        "filename": "lib/matplotlib/sphinxext/figmpl_directive.py",
                        "start_index": 3658,
                        "end_index": 5451,
                        "start_line": 115,
                        "end_line": 169,
                        "max_line": 288,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.7",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet includes the _parse_srcsetNodes and _copy_images_figmpl functions which are involved in parsing and handling the srcset attribute for images, relevant to the issue."
                }
            ],
            "lib/matplotlib/sphinxext/plot_directive.py": [
                {
                    "chunk": {
                        "code": "\"\"\"\nA directive for including a Matplotlib plot in a Sphinx document\n================================================================\n\nThis is a Sphinx extension providing a reStructuredText directive\n``.. plot::`` for including a plot in a Sphinx document.\n\nIn HTML output, ``.. plot::`` will include a .png file with a link\nto a high-res .png and .pdf.  In LaTeX output, it will include a .pdf.\n\nThe plot content may be defined in one of three ways:\n\n1. **A path to a source file** as the argument to the directive::\n\n     .. plot:: path/to/plot.py\n\n   When a path to a source file is given, the content of the\n   directive may optionally contain a caption for the plot::\n\n     .. plot:: path/to/plot.py\n\n        The plot caption.\n\n   Additionally, one may specify the name of a function to call (with\n   no arguments) immediately after importing the module::\n\n     .. plot:: path/to/plot.py plot_function1\n\n2. Included as **inline content** to the directive::\n\n     .. plot::\n\n        import matplotlib.pyplot as plt\n        plt.plot([1, 2, 3], [4, 5, 6])\n        plt.title(\"A plotting exammple\")\n\n3. Using **doctest** syntax::\n\n     .. plot::\n\n        A plotting example:\n        >>> import matplotlib.pyplot as plt\n        >>> plt.plot([1, 2, 3], [4, 5, 6])\n\nOptions\n-------\n\nThe ``.. plot::`` directive supports the following options:\n\n``:format:`` : {'python', 'doctest'}\n    The format of the input.  If unset, the format is auto-detected.\n\n``:include-source:`` : bool\n    Whether to display the source code. The default can be changed using\n    the ``plot_include_source`` variable in :file:`conf.py` (which itself\n    defaults to False).\n\n``:show-source-link:`` : bool\n    Whether to show a link to the source in HTML. The default can be\n    changed using the ``plot_html_show_source_link`` variable in\n    :file:`conf.py` (which itself defaults to True).\n\n``:context:`` : bool or str\n    If provided, the code will be run in the context of all previous plot\n    directives for which the ``:context:`` option was specified.  This only\n    applies to inline code plot directives, not those run from files. If\n    the ``:context: reset`` option is specified, the context is reset\n    for this and future plots, and previous figures are closed prior to\n    running the code. ``:context: close-figs`` keeps the context but closes\n    previous figures before running the code.\n\n``:nofigs:`` : bool\n    If specified, the code block will be run, but no figures will be\n    inserted.  This is usually useful with the ``:context:`` option.\n\n``:caption:`` : str\n    If specified, the option's argument will be used as a caption for the\n    figure. This overwrites the caption given in the content, when the plot\n    is generated from a file.\n\nAdditionally, this directive supports all the options of the `image directive\n<https://docutils.sourceforge.io/docs/ref/rst/directives.html#image>`_,\nexcept for ``:target:`` (since plot will add its own target).  These include\n``:alt:``, ``:height:``, ``:width:``, ``:scale:``, ``:align:`` and ``:class:``.\n\nConfiguration options\n---------------------\n\nThe plot directive has the following configuration options:\n\nplot_include_source\n    Default value for the include-source option (default: False).\n\nplot_html_show_source_link\n    Whether to show a link to the source in HTML (default: True).\n\nplot_pre_code\n    Code that should be executed before each plot. If None (the default),\n    it will default to a string containing::\n\n        import numpy as np\n        from matplotlib import pyplot as plt\n\nplot_basedir\n    Base directory, to which ``plot::`` file names are relative to.\n    If None or empty (the default), file names are relative to the\n    directory where the file containing the directive is.\n\nplot_formats\n    File formats to generate (default: ['png', 'hires.png', 'pdf']).\n    List of tuples or strings::\n\n        [(suffix, dpi), suffix, ...]\n\n    that determine the file format and the DPI. For entries whose\n    DPI was omitted, sensible defaults are chosen. When passing from\n    the command line through sphinx_build the list should be passed as\n    suffix:dpi,suffix:dpi, ...\n\nplot_html_show_formats\n    Whether to show links to the files in HTML (default: True).\n\nplot_rcparams\n    A dictionary containing any non-standard rcParams that should\n    be applied before each plot (default: {}).\n\nplot_apply_rcparams\n    By default, rcParams are applied when ``:context:`` option is not used\n    in a plot directive.  If set, this configuration option overrides this\n    behavior and applies rcParams before each plot.\n\nplot_working_directory\n    By default, the working directory will be changed to the directory of\n    the example, so the code can get at its data files, if any.  Also its\n    path will be added to `sys.path` so it can import any helper modules\n    sitting beside it.  This configuration option can be used to specify\n    a central directory (also added to `sys.path`) where data files and\n    helper modules for all code are located.\n\nplot_template\n    Provide a customized template for preparing restructured text.\n\nplot_srcset\n    Allow the srcset image option for responsive image resolutions. List of\n    strings with the multiplicative factors followed by an \"x\".\n    e.g. [\"2.0x\", \"1.5x\"].  \"2.0x\" will create a png with the default \"png\"\n    resolution from plot_formats, multiplied by 2. If plot_srcset is\n    specified, the plot directive uses the\n    :doc:`/api/sphinxext_figmpl_directive_api` (instead of the usual figure\n    directive) in the intermediary rst file that is generated.\n    The plot_srcset option is incompatible with *singlehtml* builds, and an\n    error will be raised.\n\nNotes on how it works\n---------------------\n\nThe plot directive runs the code it is given, either in the source file or the\ncode under the directive. The figure created (if any) is saved in the sphinx\nbuild directory under a subdirectory named ``plot_directive``.  It then creates\nan intermediate rst file that calls a ``.. figure:`` directive (or\n``.. figmpl::`` directive if ``plot_srcset`` is being used) and has links to\nthe ``*.png`` files in the ``plot_directive`` directory.  These translations can\nbe customized by changing the *plot_template*.  See the source of\n:doc:`/api/sphinxext_plot_directive_api` for the templates defined in *TEMPLATE*\nand *TEMPLATE_SRCSET*.\n\"\"\"",
                        "filename": "lib/matplotlib/sphinxext/plot_directive.py",
                        "start_index": 0,
                        "end_index": 6360,
                        "start_line": 1,
                        "end_line": 612,
                        "max_line": 933,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.7",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet from plot_directive.py contains the documentation and configuration options for the plot directive, including the plot_srcset option which is relevant to the issue."
                }
            ]
        },
        "solution_task": "To implement the feature request for high-resolution plot directives in the Matplotlib documentation, you can follow these steps:\n\n- Modify the `FigureMpl` class in `figmpl_directive.py` to handle the `srcset` attribute properly.\n- Update the `plot_directive.py` to generate multiple resolution images based on the `plot_srcset` configuration.\n- Ensure that the `plot_directive.py` uses the `FigureMpl` directive instead of the standard figure directive when `plot_srcset` is configured.\n- Update the documentation and examples to demonstrate how to use the new high-resolution image feature.\n\nHere's a high-level overview of the changes needed in the code:\n\n1. Update the `FigureMpl` class to handle `srcset` correctly:\n   - Modify the `run` method to process the `srcset` option and store it in the `image_node`.\n   - Update the `visit_figmpl_html` method to generate the correct HTML with `srcset` attributes.\n\n2. Modify `plot_directive.py` to generate multiple resolution images:\n   - In the `run_code` function, after the plot is generated, create additional high-resolution images based on the `plot_srcset` configuration.\n   - Update the `TEMPLATE` variable to include the `srcset` attribute in the generated RST.\n\n3. Update the documentation:\n   - Provide examples in the documentation on how to use the `srcset` attribute with the `.. figure-mpl::` directive.\n   - Explain the new feature in the user guide and the configuration options in `conf.py`.\n\nHere's a simplified example of how the `run` method in `FigureMpl` might be updated:\n\n```python\nclass FigureMpl(Figure):\n    # ... existing code ...\n\n    def run(self):\n        # ... existing code ...\n\n        # Handle srcset option\n        srcset_option = self.options.get('srcset', None)\n        if srcset_option:\n            image_node['srcset'] = _parse_srcsetNodes(srcset_option)\n\n        # ... existing code ...\n\n        return [image_node]\n```\n\nAnd an example of how to generate multiple resolution images in `plot_directive.py`:\n\n```python\ndef run_code(...):\n    # ... existing code ...\n\n    # Generate additional high-resolution images if plot_srcset is configured\n    if plot_srcset:\n        for factor in plot_srcset:\n            dpi_factor = float(factor.rstrip('x'))\n            # Generate the high-resolution image with the adjusted DPI\n            # Save the image with a name indicating the resolution factor\n\n    # ... existing code ...\n```\n\nRemember to test the changes thoroughly to ensure that the high-resolution images are generated correctly and that the `srcset` attribute is properly included in the HTML output.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE must provide precise, actionable guidance and directly address all aspects of the described feature request to facilitate its successful implementation or improvement.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable plan for implementing high-resolution plot directives in the Matplotlib documentation. It addresses the technical aspects of the feature request by suggesting modifications to the `FigureMpl` class and `plot_directive.py`, including handling the `srcset` attribute and generating multiple resolution images. The RESPONSE also includes a high-level overview of the code changes, specific examples of how to update methods, and references to relevant code snippets in the Matplotlib repository. Additionally, it advises updating the documentation to guide users on the new feature. The RESPONSE is comprehensive and covers nearly all aspects of the feature request, providing a clear path for implementation.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711696827.676519,
        "result": "To implement the feature request for high-resolution plot directives in the Matplotlib documentation, you can follow these steps:\n\n- Modify the `FigureMpl` class in `figmpl_directive.py` to handle the `srcset` attribute properly.\n- Update the `plot_directive.py` to generate multiple resolution images based on the `plot_srcset` configuration.\n- Ensure that the `plot_directive.py` uses the `FigureMpl` directive instead of the standard figure directive when `plot_srcset` is configured.\n- Update the documentation and examples to demonstrate how to use the new high-resolution image feature.\n\nHere's a high-level overview of the changes needed in the code:\n\n1. Update the `FigureMpl` class to handle `srcset` correctly:\n   - Modify the `run` method to process the `srcset` option and store it in the `image_node`.\n   - Update the `visit_figmpl_html` method to generate the correct HTML with `srcset` attributes.\n\n2. Modify `plot_directive.py` to generate multiple resolution images:\n   - In the `run_code` function, after the plot is generated, create additional high-resolution images based on the `plot_srcset` configuration.\n   - Update the `TEMPLATE` variable to include the `srcset` attribute in the generated RST.\n\n3. Update the documentation:\n   - Provide examples in the documentation on how to use the `srcset` attribute with the `.. figure-mpl::` directive.\n   - Explain the new feature in the user guide and the configuration options in `conf.py`.\n\nHere's a simplified example of how the `run` method in `FigureMpl` might be updated:\n\n```python\nclass FigureMpl(Figure):\n    # ... existing code ...\n\n    def run(self):\n        # ... existing code ...\n\n        # Handle srcset option\n        srcset_option = self.options.get('srcset', None)\n        if srcset_option:\n            image_node['srcset'] = _parse_srcsetNodes(srcset_option)\n\n        # ... existing code ...\n\n        return [image_node]\n```\n\nAnd an example of how to generate multiple resolution images in `plot_directive.py`:\n\n```python\ndef run_code(...):\n    # ... existing code ...\n\n    # Generate additional high-resolution images if plot_srcset is configured\n    if plot_srcset:\n        for factor in plot_srcset:\n            dpi_factor = float(factor.rstrip('x'))\n            # Generate the high-resolution image with the adjusted DPI\n            # Save the image with a name indicating the resolution factor\n\n    # ... existing code ...\n```\n\nRemember to test the changes thoroughly to ensure that the high-resolution images are generated correctly and that the `srcset` attribute is properly included in the HTML output.\n\n### Code snippets to check\n\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib) \u2192 [sphinxext](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib/sphinxext)- [Lines 34 - 112](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//lib/matplotlib/sphinxext/figmpl_directive.py#L34-L112)\n\n This snippet defines the FigureMpl class which implements the directive for optional hiDPI images, relevant to the issue of enabling hi-res figures. \n\n\n   - [Lines 1 - 270](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//lib/matplotlib/sphinxext/figmpl_directive.py#L1-L270)\n\n This snippet provides context for the FigureMpl directive and its purpose, which is to allow responsive resolution images, relevant to the issue. \n\n\n   - [Lines 172 - 254](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//lib/matplotlib/sphinxext/figmpl_directive.py#L172-L254)\n\n This snippet contains the visit_figmpl_html function which handles the HTML generation for the FigureMpl directive, including srcset handling, which is relevant to the issue. \n\n\n   - [Lines 115 - 169](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//lib/matplotlib/sphinxext/figmpl_directive.py#L115-L169)\n\n This snippet includes the _parse_srcsetNodes and _copy_images_figmpl functions which are involved in parsing and handling the srcset attribute for images, relevant to the issue.\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib) \u2192 [sphinxext](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib/sphinxext)- [Lines 1 - 612](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//lib/matplotlib/sphinxext/plot_directive.py#L1-L612)\n\n This snippet from plot_directive.py contains the documentation and configuration options for the plot directive, including the plot_srcset option which is relevant to the issue.",
        "context_relevance": 0.6000000000000001,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE is relevant to the entire PROMPT and answers the PROMPT completely.\nSupporting Evidence: The RESPONSE provides a detailed solution to the problem described in the PROMPT, which is to enable high-resolution figures for hiDPI screens in the plot directive. It addresses the proposed solution by suggesting modifications to the `FigureMpl` class and `plot_directive.py`, as well as updating the documentation. The RESPONSE also includes code snippets and references to specific lines in the GitHub repository that are relevant to the issue at hand. The RESPONSE is comprehensive and directly addresses the technical problem and proposed solution, making it highly relevant to the entire PROMPT."
        },
        "qa_relevance": 1.0
    }
}