{
    "id": "mwaskom__seaborn-3180",
    "repo_name": "testbed/mwaskom__seaborn__0.12",
    "task_id": 3527222344356800403,
    "title": "Overlapping labels in relplot with seaborn 0.12",
    "body": "```\r\nimport seaborn as sns\r\n\r\nsns.set_context(\"paper\")\r\nsns.set_style(\"white\")\r\n\r\ndata = (sns.load_dataset('iris').set_index('species')*1e7).reset_index()\r\ng = sns.relplot(data=data, x='sepal_length', y='sepal_width', col='species', \r\n                col_wrap=2, height=2.5)\r\ng.set_titles(row_template=\"{row_name}\", col_template=\"SOMEWHATLONG-{col_name}\")\r\nfor axes in g.axes.flat:\r\n    axes.ticklabel_format(axis='both', style='scientific', scilimits=(0, 0))\r\n```\r\n\r\n\r\n```\r\nimport seaborn as sns\r\n\r\nsns.set_context(\"paper\")\r\nsns.set_style(\"white\")\r\n\r\ndata = (sns.load_dataset('iris').set_index('species')*1e7).reset_index()\r\ng = sns.relplot(data=data, x='sepal_length', y='sepal_width', col='species', \r\n                col_wrap=2, height=2.5, facet_kws=dict(sharex=False, sharey=False))\r\ng.set_titles(row_template=\"{row_name}\", col_template=\"SOMEWHATLONG-{col_name}\")\r\nfor axes in g.axes.flat:\r\n    axes.ticklabel_format(axis='both', style='scientific', scilimits=(0, 0))\r\n```\r\n\r\n\r\n\r\n## seaborn 11.2:\r\n\r\n![image](https://user-images.githubusercontent.com/3391614/206537961-35d4cb07-f052-43cf-90cf-c882d824330c.png)\r\n![image](https://user-images.githubusercontent.com/3391614/206537975-52349cfb-89dc-4b1e-b9d5-fa539a29ce8b.png)\r\n\r\n\r\n## seaborn 12.1:\r\n \r\n![image](https://user-images.githubusercontent.com/3391614/206538146-e10032d3-7aa7-4c57-a79e-971b883f90bc.png)\r\n![image](https://user-images.githubusercontent.com/3391614/206538221-37ef81ac-728a-40a0-8797-4d9737010f81.png)y\r\n\r\n\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/mwaskom__seaborn__0.12.git",
    "requested_commit": "",
    "mayil_response": "Based on the provided issue summary and code snippets, the solution to the overlapping labels issue in `relplot` when using seaborn version 0.12 is as follows:\n\n- Ensure that `facet_kws` is passed to `sns.relplot` with `sharex=False` and `sharey=False` to prevent axis sharing which can cause label overlap.\n- Adjust the `col_template` in `g.set_titles` to a shorter string if necessary to prevent long titles from overlapping.\n- If scientific notation is causing overlap, modify the `ticklabel_format` with appropriate `scilimits` to control when scientific notation is used.\n\nHere is a code snippet that applies these solutions:\n\n```python\nimport seaborn as sns\n\n# Set the context and style\nsns.set_context(\"paper\")\nsns.set_style(\"white\")\n\n# Load the dataset and set the index\ndata = sns.load_dataset('iris').set_index('species').reset_index()\n\n# Create the relplot with specified parameters\ng = sns.relplot(\n    data=data,\n    x='sepal_length',\n    y='sepal_width',\n    col='species',\n    col_wrap=2,\n    height=2.5,\n    facet_kws=dict(sharex=False, sharey=False)  # Prevent axis sharing\n)\n\n# Set the titles with a shorter template if necessary\ng.set_titles(row_template=\"{row_name}\", col_template=\"Short-{col_name}\")\n\n# Adjust tick labels to prevent overlap\nfor ax in g.axes.flat:\n    ax.ticklabel_format(axis='both', style='scientific', scilimits=(0, 0))\n```\n\nThis code addresses the issue by preventing axis sharing and adjusting the title and tick label formatting to reduce the chance of overlap.\n\n### Code snippets to check\n\n-  \u2192 [seaborn](https://github.com/testbed/mwaskom__seaborn__0.12/tree//seaborn)- [Lines 798 - 953](https://github.com/testbed/mwaskom__seaborn__0.12/blob//seaborn/relational.py#L798-L953)\n\n This snippet contains the definition of the 'relplot' function in seaborn, which is directly related to the issue as the problem occurs when using this function with the 'col_wrap' parameter.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0005124999999999999,
        "snippet_processor": 0.050390000000000004,
        "issue_star_creation": 0.03585,
        "issue_star_solver": 0.055110000000000006,
        "bouncer": 0.03034
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711735764.1298041,
        "relevant_snippets": [
            {
                "code": "\"\"\"\nOverlapping densities ('ridge plot')\n====================================\n\n\n\"\"\"\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_theme(style=\"white\", rc={\"axes.facecolor\": (0, 0, 0, 0)})\n\n# Create the data\nrs = np.random.RandomState(1979)\nx = rs.randn(500)\ng = np.tile(list(\"ABCDEFGHIJ\"), 50)\ndf = pd.DataFrame(dict(x=x, g=g))\nm = df.g.map(ord)\ndf[\"x\"] += m\n\n# Initialize the FacetGrid object\npal = sns.cubehelix_palette(10, rot=-.25, light=.7)\ng = sns.FacetGrid(df, row=\"g\", hue=\"g\", aspect=15, height=.5, palette=pal)\n\n# Draw the densities in a few steps\ng.map(sns.kdeplot, \"x\",\n      bw_adjust=.5, clip_on=False,\n      fill=True, alpha=1, linewidth=1.5)\ng.map(sns.kdeplot, \"x\", clip_on=False, color=\"w\", lw=2, bw_adjust=.5)\n\n# passing color=None to refline() uses the hue mapping\ng.refline(y=0, linewidth=2, linestyle=\"-\", color=None, clip_on=False)\n\n\n# Define and use a simple function to label the plot in axes coordinates\ndef label(x, color, label):\n    ax = plt.gca()\n    ax.text(0, .2, label, fontweight=\"bold\", color=color,\n            ha=\"left\", va=\"center\", transform=ax.transAxes)\n\n\ng.map(label, \"x\")\n\n# Set the subplots to overlap\ng.figure.subplots_adjust(hspace=-.25)\n\n# Remove axes details that don't play well with overlap\ng.set_titles(\"\")\ng.set(yticks=[], ylabel=\"\")\ng.despine(bottom=True, left=True)",
                "filename": "examples/kde_ridgeplot.py",
                "start_index": 0,
                "end_index": 1373,
                "start_line": 1,
                "end_line": 50,
                "max_line": 50,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.12",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "\"\"\"\nLine plots on multiple facets\n=============================\n\n_thumb: .48, .42\n\n\"\"\"\nimport seaborn as sns\nsns.set_theme(style=\"ticks\")\n\ndots = sns.load_dataset(\"dots\")\n\n# Define the palette as a list to specify exact values\npalette = sns.color_palette(\"rocket_r\")\n\n# Plot the lines on two facets\nsns.relplot(\n    data=dots,\n    x=\"time\", y=\"firing_rate\",\n    hue=\"coherence\", size=\"choice\", col=\"align\",\n    kind=\"line\", size_order=[\"T1\", \"T2\"], palette=palette,\n    height=5, aspect=.75, facet_kws=dict(sharex=False),\n)",
                "filename": "examples/faceted_lineplot.py",
                "start_index": 0,
                "end_index": 523,
                "start_line": 1,
                "end_line": 23,
                "max_line": 23,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.12",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"\nPlotting on a large number of facets\n====================================\n\n_thumb: .4, .3\n\n\"\"\"\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_theme(style=\"ticks\")\n\n# Create a dataset with many short random walks\nrs = np.random.RandomState(4)\npos = rs.randint(-1, 2, (20, 5)).cumsum(axis=1)\npos -= pos[:, 0, np.newaxis]\nstep = np.tile(range(5), 20)\nwalk = np.repeat(range(20), 5)\ndf = pd.DataFrame(np.c_[pos.flat, step, walk],\n                  columns=[\"position\", \"step\", \"walk\"])\n\n# Initialize a grid of plots with an Axes for each walk\ngrid = sns.FacetGrid(df, col=\"walk\", hue=\"walk\", palette=\"tab20c\",\n                     col_wrap=4, height=1.5)\n\n# Draw a horizontal line to show the starting point\ngrid.refline(y=0, linestyle=\":\")\n\n# Draw a line plot to show the trajectory of each random walk\ngrid.map(plt.plot, \"step\", \"position\", marker=\"o\")\n\n# Adjust the tick positions and labels\ngrid.set(xticks=np.arange(5), yticks=[-3, 3],\n         xlim=(-.5, 4.5), ylim=(-3.5, 3.5))\n\n# Adjust the arrangement of the plots\ngrid.fig.tight_layout(w_pad=1)",
                "filename": "examples/many_facets.py",
                "start_index": 0,
                "end_index": 1109,
                "start_line": 1,
                "end_line": 39,
                "max_line": 39,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.12",
                "sha": "",
                "context_relevance": 0.1
            },
            {
                "code": "\"\"\"\nAnscombe's quartet\n==================\n\n_thumb: .4, .4\n\"\"\"\nimport seaborn as sns\nsns.set_theme(style=\"ticks\")\n\n# Load the example dataset for Anscombe's quartet\ndf = sns.load_dataset(\"anscombe\")\n\n# Show the results of a linear regression within each dataset\nsns.lmplot(\n    data=df, x=\"x\", y=\"y\", col=\"dataset\", hue=\"dataset\",\n    col_wrap=2, palette=\"muted\", ci=None,\n    height=4, scatter_kws={\"s\": 50, \"alpha\": 1}\n)",
                "filename": "examples/anscombes_quartet.py",
                "start_index": 0,
                "end_index": 421,
                "start_line": 1,
                "end_line": 18,
                "max_line": 18,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.12",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"\nScatterplot with continuous hues and sizes\n==========================================\n\n_thumb: .51, .44\n\n\"\"\"\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n\n# Load the example planets dataset\nplanets = sns.load_dataset(\"planets\")\n\ncmap = sns.cubehelix_palette(rot=-.2, as_cmap=True)\ng = sns.relplot(\n    data=planets,\n    x=\"distance\", y=\"orbital_period\",\n    hue=\"year\", size=\"mass\",\n    palette=cmap, sizes=(10, 200),\n)\ng.set(xscale=\"log\", yscale=\"log\")\ng.ax.xaxis.grid(True, \"minor\", linewidth=.25)\ng.ax.yaxis.grid(True, \"minor\", linewidth=.25)\ng.despine(left=True, bottom=True)",
                "filename": "examples/scatterplot_sizes.py",
                "start_index": 0,
                "end_index": 593,
                "start_line": 1,
                "end_line": 24,
                "max_line": 24,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.12",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"\nSmall multiple time series\n--------------------------\n\n_thumb: .42, .58\n\n\"\"\"\nimport seaborn as sns\n\nsns.set_theme(style=\"dark\")\nflights = sns.load_dataset(\"flights\")\n\n# Plot each year's time series in its own facet\ng = sns.relplot(\n    data=flights,\n    x=\"month\", y=\"passengers\", col=\"year\", hue=\"year\",\n    kind=\"line\", palette=\"crest\", linewidth=4, zorder=5,\n    col_wrap=3, height=2, aspect=1.5, legend=False,\n)\n\n# Iterate over each subplot to customize further\nfor year, ax in g.axes_dict.items():\n\n    # Add the title as an annotation within the plot\n    ax.text(.8, .85, year, transform=ax.transAxes, fontweight=\"bold\")\n\n    # Plot every year's time series in the background\n    sns.lineplot(\n        data=flights, x=\"month\", y=\"passengers\", units=\"year\",\n        estimator=None, color=\".7\", linewidth=1, ax=ax,\n    )\n\n# Reduce the frequency of the x axis ticks\nax.set_xticks(ax.get_xticks()[::2])\n\n# Tweak the supporting aspects of the plot\ng.set_titles(\"\")\ng.set_axis_labels(\"\", \"Passengers\")\ng.tight_layout()",
                "filename": "examples/timeseries_facets.py",
                "start_index": 0,
                "end_index": 1022,
                "start_line": 1,
                "end_line": 39,
                "max_line": 39,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.12",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"\nScatterplot with varying point sizes and hues\n==============================================\n\n_thumb: .45, .5\n\n\"\"\"\nimport seaborn as sns\nsns.set_theme(style=\"white\")\n\n# Load the example mpg dataset\nmpg = sns.load_dataset(\"mpg\")\n\n# Plot miles per gallon against horsepower with other semantics\nsns.relplot(x=\"horsepower\", y=\"mpg\", hue=\"origin\", size=\"weight\",\n            sizes=(40, 400), alpha=.5, palette=\"muted\",\n            height=6, data=mpg)",
                "filename": "examples/scatter_bubbles.py",
                "start_index": 0,
                "end_index": 450,
                "start_line": 1,
                "end_line": 17,
                "max_line": 17,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.12",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"\nScatterplot with multiple semantics\n===================================\n\n_thumb: .45, .5\n\n\"\"\"\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_theme(style=\"whitegrid\")\n\n# Load the example diamonds dataset\ndiamonds = sns.load_dataset(\"diamonds\")\n\n# Draw a scatter plot while assigning point colors and sizes to different\n# variables in the dataset\nf, ax = plt.subplots(figsize=(6.5, 6.5))\nsns.despine(f, left=True, bottom=True)\nclarity_ranking = [\"I1\", \"SI2\", \"SI1\", \"VS2\", \"VS1\", \"VVS2\", \"VVS1\", \"IF\"]\nsns.scatterplot(x=\"carat\", y=\"price\",\n                hue=\"clarity\", size=\"depth\",\n                palette=\"ch:r=-.2,d=.3_r\",\n                hue_order=clarity_ranking,\n                sizes=(1, 8), linewidth=0,\n                data=diamonds, ax=ax)",
                "filename": "examples/different_scatter_variables.py",
                "start_index": 0,
                "end_index": 768,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.12",
                "sha": "",
                "context_relevance": 0.1
            },
            {
                "code": "\"\"\"\nConditional means with observations\n===================================\n\n\"\"\"\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_theme(style=\"whitegrid\")\niris = sns.load_dataset(\"iris\")\n\n# \"Melt\" the dataset to \"long-form\" or \"tidy\" representation\niris = pd.melt(iris, \"species\", var_name=\"measurement\")\n\n# Initialize the figure\nf, ax = plt.subplots()\nsns.despine(bottom=True, left=True)\n\n# Show each observation with a scatterplot\nsns.stripplot(\n    data=iris, x=\"value\", y=\"measurement\", hue=\"species\",\n    dodge=True, alpha=.25, zorder=1, legend=False\n)\n\n# Show the conditional means, aligning each pointplot in the\n# center of the strips by adjusting the width allotted to each\n# category (.8 by default) by the number of hue levels\nsns.pointplot(\n    data=iris, x=\"value\", y=\"measurement\", hue=\"species\",\n    join=False, dodge=.8 - .8 / 3, palette=\"dark\",\n    markers=\"d\", scale=.75, errorbar=None\n)\n\n# Improve the legend\nsns.move_legend(\n    ax, loc=\"lower right\", ncol=3, frameon=True, columnspacing=1, handletextpad=0\n)",
                "filename": "examples/jitter_stripplot.py",
                "start_index": 0,
                "end_index": 1062,
                "start_line": 1,
                "end_line": 38,
                "max_line": 38,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.12",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def relplot(\n    data=None, *,\n    x=None, y=None, hue=None, size=None, style=None, units=None,\n    row=None, col=None, col_wrap=None, row_order=None, col_order=None,\n    palette=None, hue_order=None, hue_norm=None,\n    sizes=None, size_order=None, size_norm=None,\n    markers=None, dashes=None, style_order=None,\n    legend=\"auto\", kind=\"scatter\", height=5, aspect=1, facet_kws=None,\n    **kwargs\n):",
                "filename": "seaborn/relational.py",
                "start_index": 28108,
                "end_index": 28508,
                "start_line": 798,
                "end_line": 953,
                "max_line": 1044,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.12",
                "sha": "",
                "context_relevance": 0.2
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "seaborn/relational.py": [
                {
                    "chunk": {
                        "code": "def relplot(\n    data=None, *,\n    x=None, y=None, hue=None, size=None, style=None, units=None,\n    row=None, col=None, col_wrap=None, row_order=None, col_order=None,\n    palette=None, hue_order=None, hue_norm=None,\n    sizes=None, size_order=None, size_norm=None,\n    markers=None, dashes=None, style_order=None,\n    legend=\"auto\", kind=\"scatter\", height=5, aspect=1, facet_kws=None,\n    **kwargs\n):",
                        "filename": "seaborn/relational.py",
                        "start_index": 28108,
                        "end_index": 28508,
                        "start_line": 798,
                        "end_line": 953,
                        "max_line": 1044,
                        "git_instance": "github",
                        "repo_name": "testbed/mwaskom__seaborn__0.12",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the definition of the 'relplot' function in seaborn, which is directly related to the issue as the problem occurs when using this function with the 'col_wrap' parameter."
                }
            ]
        },
        "solution_task": "Based on the provided issue summary and code snippets, the solution to the overlapping labels issue in `relplot` when using seaborn version 0.12 is as follows:\n\n- Ensure that `facet_kws` is passed to `sns.relplot` with `sharex=False` and `sharey=False` to prevent axis sharing which can cause label overlap.\n- Adjust the `col_template` in `g.set_titles` to a shorter string if necessary to prevent long titles from overlapping.\n- If scientific notation is causing overlap, modify the `ticklabel_format` with appropriate `scilimits` to control when scientific notation is used.\n\nHere is a code snippet that applies these solutions:\n\n```python\nimport seaborn as sns\n\n# Set the context and style\nsns.set_context(\"paper\")\nsns.set_style(\"white\")\n\n# Load the dataset and set the index\ndata = sns.load_dataset('iris').set_index('species').reset_index()\n\n# Create the relplot with specified parameters\ng = sns.relplot(\n    data=data,\n    x='sepal_length',\n    y='sepal_width',\n    col='species',\n    col_wrap=2,\n    height=2.5,\n    facet_kws=dict(sharex=False, sharey=False)  # Prevent axis sharing\n)\n\n# Set the titles with a shorter template if necessary\ng.set_titles(row_template=\"{row_name}\", col_template=\"Short-{col_name}\")\n\n# Adjust tick labels to prevent overlap\nfor ax in g.axes.flat:\n    ax.ticklabel_format(axis='both', style='scientific', scilimits=(0, 0))\n```\n\nThis code addresses the issue by preventing axis sharing and adjusting the title and tick label formatting to reduce the chance of overlap.",
        "bouncer_response": {
            "score": 7,
            "criteria": "The RESPONSE must provide actionable, relevant guidance to more parts of the PROMPT's described issue to score higher.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable solution to the issue of overlapping labels in seaborn's relplot by suggesting the use of 'facet_kws' with 'sharex=False' and 'sharey=False', adjusting the 'col_template' to a shorter string, and modifying the 'ticklabel_format'. These suggestions are directly related to the problem of overlapping labels and are likely to resolve the issue. The RESPONSE also includes a code snippet that incorporates these solutions, which is helpful for implementation. However, the RESPONSE does not address the fact that the issue appeared after an update from seaborn 11.2 to 12.1, which could imply a change in the library's behavior that might require a different approach or additional steps to resolve. Therefore, the RESPONSE is not fully comprehensive in addressing all aspects of the bug.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711735933.044283,
        "result": "Based on the provided issue summary and code snippets, the solution to the overlapping labels issue in `relplot` when using seaborn version 0.12 is as follows:\n\n- Ensure that `facet_kws` is passed to `sns.relplot` with `sharex=False` and `sharey=False` to prevent axis sharing which can cause label overlap.\n- Adjust the `col_template` in `g.set_titles` to a shorter string if necessary to prevent long titles from overlapping.\n- If scientific notation is causing overlap, modify the `ticklabel_format` with appropriate `scilimits` to control when scientific notation is used.\n\nHere is a code snippet that applies these solutions:\n\n```python\nimport seaborn as sns\n\n# Set the context and style\nsns.set_context(\"paper\")\nsns.set_style(\"white\")\n\n# Load the dataset and set the index\ndata = sns.load_dataset('iris').set_index('species').reset_index()\n\n# Create the relplot with specified parameters\ng = sns.relplot(\n    data=data,\n    x='sepal_length',\n    y='sepal_width',\n    col='species',\n    col_wrap=2,\n    height=2.5,\n    facet_kws=dict(sharex=False, sharey=False)  # Prevent axis sharing\n)\n\n# Set the titles with a shorter template if necessary\ng.set_titles(row_template=\"{row_name}\", col_template=\"Short-{col_name}\")\n\n# Adjust tick labels to prevent overlap\nfor ax in g.axes.flat:\n    ax.ticklabel_format(axis='both', style='scientific', scilimits=(0, 0))\n```\n\nThis code addresses the issue by preventing axis sharing and adjusting the title and tick label formatting to reduce the chance of overlap.\n\n### Code snippets to check\n\n-  \u2192 [seaborn](https://github.com/testbed/mwaskom__seaborn__0.12/tree//seaborn)- [Lines 798 - 953](https://github.com/testbed/mwaskom__seaborn__0.12/blob//seaborn/relational.py#L798-L953)\n\n This snippet contains the definition of the 'relplot' function in seaborn, which is directly related to the issue as the problem occurs when using this function with the 'col_wrap' parameter.",
        "context_relevance": 0.16,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE is relevant and answers the entire PROMPT completely.\nSupporting Evidence: The RESPONSE provides a detailed solution to the issue of overlapping labels in seaborn's relplot function as described in the PROMPT. It addresses the problem by suggesting the use of `facet_kws` with `sharex=False` and `sharey=False`, adjusting the `col_template` to prevent long titles from overlapping, and modifying the `ticklabel_format`. The RESPONSE also includes a corrected code snippet that applies these solutions, which is directly relevant to the code snippets provided in the PROMPT. Additionally, the RESPONSE provides a link to the relevant section of the seaborn codebase, which is a useful resource for understanding the underlying issue. The RESPONSE is comprehensive and directly addresses the entire PROMPT, thus earning a score of 10."
        },
        "qa_relevance": 1.0
    }
}