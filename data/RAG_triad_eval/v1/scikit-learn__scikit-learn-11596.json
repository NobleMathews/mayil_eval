{
    "id": "scikit-learn__scikit-learn-11596",
    "repo_name": "testbed/scikit-learn__scikit-learn__0.20",
    "task_id": 1515581628600887005,
    "title": "Add sklearn.show_versions() similar to pandas.show_versions (with numpy blas binding info)",
    "body": "Some numeric issues are related to the specific blas that numpy is using. I'm wondering if it makes sense to add the relevant ``system_info`` invocations to the template to make it easier for people to report.\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/scikit-learn__scikit-learn__0.20.git",
    "requested_commit": "",
    "mayil_response": "To implement a feature similar to `pandas.show_versions()` in scikit-learn, which includes information about the BLAS library used by NumPy, you can follow these steps:\n\n- Import the necessary functions to retrieve BLAS information.\n- Extend the `_get_sys_info()` function to include BLAS information.\n- Add the BLAS information to the output of the `show_versions()` function.\n\nHere's how you can modify the `sklearn/utils/_show_versions.py` file:\n\n```python\n# At the top of the file, add the necessary imports\nfrom numpy.distutils.system_info import get_info\n\n# Modify the _get_sys_info function to include BLAS information\ndef _get_sys_info():\n    \"\"\"System information\n\n    Returns\n    -------\n    sys_info : dict\n        system and Python version information\n\n    \"\"\"\n    python = sys.version.replace(\"\\n\", \" \")\n\n    blob = [\n        (\"python\", python),\n        (\"executable\", sys.executable),\n        (\"machine\", platform.platform()),\n        # Add BLAS information\n        (\"blas\", get_info('blas_opt')),\n        (\"lapack\", get_info('lapack_opt')),\n    ]\n\n    return dict(blob)\n\n# In the show_versions function, add a section to print BLAS information\ndef show_versions():\n    \"\"\"Print useful debugging information\"\n\n    .. versionadded:: 0.20\n    \"\"\"\n\n    sys_info = _get_sys_info()\n    deps_info = _get_deps_info()\n\n    print(\"\\nSystem:\")\n    for k, stat in sys_info.items():\n        print(\"{k:>10}: {stat}\".format(k=k, stat=stat))\n\n    # Add a section to print BLAS info\n    print(\"\\nBLAS:\")\n    if 'blas' in sys_info and sys_info['blas']:\n        for k, v in sys_info['blas'].items():\n            print(f\"{k:>10}: {v}\")\n    else:\n        print(\"BLAS info not available\")\n\n    print(\"\\nPython dependencies:\")\n    for k, stat in deps_info.items():\n        print(\"{k:>13}: {stat}\".format(k=k, stat=stat))\n\n    print(\n        \"\\n{k}: {stat}\".format(\n            k=\"Built with OpenMP\", stat=_openmp_parallelism_enabled()\n        )\n    )\n\n    # show threadpoolctl results\n    threadpool_results = threadpool_info()\n    if threadpool_results:\n        print()\n        print(\"threadpoolctl info:\")\n\n        for i, result in enumerate(threadpool_results):\n            for key, val in result.items():\n                print(f\"{key:>15}: {val}\")\n            if i != len(threadpool_results) - 1:\n                print()\n```\n\nThis code snippet adds BLAS and LAPACK information to the system information dictionary and prints it out in the `show_versions()` function. The `get_info('blas_opt')` and `get_info('lapack_opt')` functions from `numpy.distutils.system_info` are used to retrieve the BLAS and LAPACK information.\n\nPlease note that the actual output format and the keys in the BLAS/LAPACK dictionaries may vary depending on the system and the installed libraries. You may need to adjust the printing logic to match the expected output format.\n\n### Code snippets to check\n\n-  \u2192 [sklearn](https://github.com/testbed/scikit-learn__scikit-learn__0.20/tree//sklearn) \u2192 [utils](https://github.com/testbed/scikit-learn__scikit-learn__0.20/tree//sklearn/utils)- [Lines 1 - 107](https://github.com/testbed/scikit-learn__scikit-learn__0.20/blob//sklearn/utils/_show_versions.py#L1-L107)\n\n This snippet contains the implementation of `show_versions` which is directly related to the issue. It needs to be modified to include the BLAS information from numpy's `system_info`.\n-  \u2192 [sklearn](https://github.com/testbed/scikit-learn__scikit-learn__0.20/tree//sklearn) \u2192 [utils](https://github.com/testbed/scikit-learn__scikit-learn__0.20/tree//sklearn/utils)- [Lines 1 - 96](https://github.com/testbed/scikit-learn__scikit-learn__0.20/blob//sklearn/utils/fixes.py#L1-L96)\n\n This snippet contains the `threadpool_info` function which is used in `show_versions` to display threadpool information. It may need to be reviewed to ensure that the BLAS information is correctly retrieved and displayed.",
    "ai_cost": {
        "search_embedding": 2.6e-07,
        "issue_classifier": 0.005174,
        "snippet_processor": 0.06475,
        "issue_star_creation": 0.04989,
        "issue_star_solver": 0.08403000000000001,
        "bouncer": 0.12060000000000001
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711741499.8642719,
        "relevant_snippets": [
            {
                "code": "\"\"\"\nUtility methods to print system info for debugging\n\nadapted from :func:`pandas.show_versions`\n\"\"\"\n# License: BSD 3 clause\n\nimport platform\nimport sys\n\nfrom .. import __version__\nfrom ..utils.fixes import threadpool_info\nfrom ._openmp_helpers import _openmp_parallelism_enabled\n\n\ndef _get_sys_info():\n    \"\"\"System information\n\n    Returns\n    -------\n    sys_info : dict\n        system and Python version information\n\n    \"\"\"\n    python = sys.version.replace(\"\\n\", \" \")\n\n    blob = [\n        (\"python\", python),\n        (\"executable\", sys.executable),\n        (\"machine\", platform.platform()),\n    ]\n\n    return dict(blob)\n\n\ndef _get_deps_info():\n    \"\"\"Overview of the installed version of main dependencies\n\n    This function does not import the modules to collect the version numbers\n    but instead relies on standard Python package metadata.\n\n    Returns\n    -------\n    deps_info: dict\n        version information on relevant Python libraries\n\n    \"\"\"\n    deps = [\n        \"pip\",\n        \"setuptools\",\n        \"numpy\",\n        \"scipy\",\n        \"Cython\",\n        \"pandas\",\n        \"matplotlib\",\n        \"joblib\",\n        \"threadpoolctl\",\n    ]\n\n    deps_info = {\n        \"sklearn\": __version__,\n    }\n\n    from importlib.metadata import PackageNotFoundError, version\n\n    for modname in deps:\n        try:\n            deps_info[modname] = version(modname)\n        except PackageNotFoundError:\n            deps_info[modname] = None\n    return deps_info\n\n\ndef show_versions():\n    \"\"\"Print useful debugging information\"\n\n    .. versionadded:: 0.20\n    \"\"\"\n\n    sys_info = _get_sys_info()\n    deps_info = _get_deps_info()\n\n    print(\"\\nSystem:\")\n    for k, stat in sys_info.items():\n        print(\"{k:>10}: {stat}\".format(k=k, stat=stat))\n\n    print(\"\\nPython dependencies:\")\n    for k, stat in deps_info.items():\n        print(\"{k:>13}: {stat}\".format(k=k, stat=stat))\n\n    print(\n        \"\\n{k}: {stat}\".format(\n            k=\"Built with OpenMP\", stat=_openmp_parallelism_enabled()\n        )\n    )\n\n    # show threadpoolctl results\n    threadpool_results = threadpool_info()\n    if threadpool_results:\n        print()\n        print(\"threadpoolctl info:\")\n\n        for i, result in enumerate(threadpool_results):\n            for key, val in result.items():\n                print(f\"{key:>15}: {val}\")\n            if i != len(threadpool_results) - 1:\n                print()",
                "filename": "sklearn/utils/_show_versions.py",
                "start_index": 0,
                "end_index": 2379,
                "start_line": 1,
                "end_line": 107,
                "max_line": 107,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.20",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "\"\"\"Compatibility fixes for older version of python, numpy and scipy\n\nIf you add content to this file, please give the version of the package\nat which the fix is no longer needed.\n\"\"\"\n# Authors: Emmanuelle Gouillart <emmanuelle.gouillart@normalesup.org>\n#          Gael Varoquaux <gael.varoquaux@normalesup.org>\n#          Fabian Pedregosa <fpedregosa@acm.org>\n#          Lars Buitinck\n#\n# License: BSD 3 clause\n\nimport sys\nfrom importlib import resources\n\nimport numpy as np\nimport scipy\nimport scipy.stats\nimport threadpoolctl\n\nimport sklearn\n\nfrom ..externals._packaging.version import parse as parse_version\nfrom .deprecation import deprecated\n\nnp_version = parse_version(np.__version__)\nsp_version = parse_version(scipy.__version__)\nsp_base_version = parse_version(sp_version.base_version)\n\n\ntry:\n    from scipy.optimize._linesearch import line_search_wolfe1, line_search_wolfe2\nexcept ImportError:  # SciPy < 1.8\n    from scipy.optimize.linesearch import line_search_wolfe2, line_search_wolfe1  # type: ignore  # noqa\n\n\ndef _object_dtype_isnan(X):\n    return X != X\n\n\n# Rename the `method` kwarg to `interpolation` for NumPy < 1.22, because\n# `interpolation` kwarg was deprecated in favor of `method` in NumPy >= 1.22.\ndef _percentile(a, q, *, method=\"linear\", **kwargs):\n    return np.percentile(a, q, interpolation=method, **kwargs)\n\n\nif np_version < parse_version(\"1.22\"):\n    percentile = _percentile\nelse:  # >= 1.22\n    from numpy import percentile  # type: ignore  # noqa\n\n\n# compatibility fix for threadpoolctl >= 3.0.0\n# since version 3 it's possible to setup a global threadpool controller to avoid\n# looping through all loaded shared libraries each time.\n# the global controller is created during the first call to threadpoolctl.\ndef _get_threadpool_controller():\n    if not hasattr(threadpoolctl, \"ThreadpoolController\"):\n        return None\n\n    if not hasattr(sklearn, \"_sklearn_threadpool_controller\"):\n        sklearn._sklearn_threadpool_controller = threadpoolctl.ThreadpoolController()\n\n    return sklearn._sklearn_threadpool_controller\n\n\ndef threadpool_limits(limits=None, user_api=None):\n    controller = _get_threadpool_controller()\n    if controller is not None:\n        return controller.limit(limits=limits, user_api=user_api)\n    else:\n        return threadpoolctl.threadpool_limits(limits=limits, user_api=user_api)\n\n\nthreadpool_limits.__doc__ = threadpoolctl.threadpool_limits.__doc__\n\n\ndef threadpool_info():\n    controller = _get_threadpool_controller()\n    if controller is not None:\n        return controller.info()\n    else:\n        return threadpoolctl.threadpool_info()\n\n\nthreadpool_info.__doc__ = threadpoolctl.threadpool_info.__doc__\n\n\n@deprecated(\n    \"The function `delayed` has been moved from `sklearn.utils.fixes` to \"\n    \"`sklearn.utils.parallel`. This import path will be removed in 1.5.\"\n)\ndef delayed(function):\n    from sklearn.utils.parallel import delayed\n\n    return delayed(function)",
                "filename": "sklearn/utils/fixes.py",
                "start_index": 0,
                "end_index": 2939,
                "start_line": 1,
                "end_line": 96,
                "max_line": 160,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.20",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "if args.plot or args.plot_filename:\n    import matplotlib\n    import matplotlib.pyplot as plt\n\n    fig, axs = plt.subplots(2, figsize=(12, 12))\n\n    label = f\"sklearn {sklearn.__version__}\"\n    axs[0].plot(n_threads_list, sklearn_fit_durations, label=label)\n    axs[1].plot(n_threads_list, sklearn_score_durations, label=label)\n\n    if args.lightgbm:\n        import lightgbm\n\n        label = f\"LightGBM {lightgbm.__version__}\"\n        axs[0].plot(n_threads_list, lightgbm_fit_durations, label=label)\n        axs[1].plot(n_threads_list, lightgbm_score_durations, label=label)\n\n    if args.xgboost:\n        import xgboost\n\n        label = f\"XGBoost {xgboost.__version__}\"\n        axs[0].plot(n_threads_list, xgb_fit_durations, label=label)\n        axs[1].plot(n_threads_list, xgb_score_durations, label=label)\n\n    if args.catboost:\n        import catboost\n\n        label = f\"CatBoost {catboost.__version__}\"\n        axs[0].plot(n_threads_list, cat_fit_durations, label=label)\n        axs[1].plot(n_threads_list, cat_score_durations, label=label)\n\n    for ax in axs:\n        ax.set_xscale(\"log\")\n        ax.set_xlabel(\"n_threads\")\n        ax.set_ylabel(\"duration (s)\")\n        ax.set_ylim(0, None)\n        ax.set_xticks(n_threads_list)\n        ax.get_xaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())\n        ax.legend(loc=\"best\")\n\n    axs[0].set_title(\"fit duration (s)\")\n    axs[1].set_title(\"score duration (s)\")\n\n    title = args.problem\n    if args.problem == \"classification\":\n        title += \" n_classes = {}\".format(args.n_classes)\n    fig.suptitle(title)\n\n    plt.tight_layout()\n\n    if args.plot_filename:\n        plt.savefig(args.plot_filename)\n\n    if args.plot:\n        plt.show()",
                "filename": "benchmarks/bench_hist_gradient_boosting_threading.py",
                "start_index": 9323,
                "end_index": 11030,
                "start_line": 293,
                "end_line": 347,
                "max_line": 347,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.20",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"\nMachine learning module for Python\n==================================\n\nsklearn is a Python module integrating classical machine\nlearning algorithms in the tightly-knit world of scientific Python\npackages (numpy, scipy, matplotlib).\n\nIt aims to provide simple and efficient solutions to learning problems\nthat are accessible to everybody and reusable in various contexts:\nmachine-learning as a versatile tool for science and engineering.\n\nSee http://scikit-learn.org for complete documentation.\n\"\"\"\nimport logging\nimport os\nimport random\nimport sys\n\nfrom ._config import config_context, get_config, set_config\n\nlogger = logging.getLogger(__name__)\n\n\n# PEP0440 compatible formatted version, see:\n# https://www.python.org/dev/peps/pep-0440/\n#\n# Generic release markers:\n#   X.Y.0   # For first release after an increment in Y\n#   X.Y.Z   # For bugfix releases\n#\n# Admissible pre-release markers:\n#   X.Y.ZaN   # Alpha release\n#   X.Y.ZbN   # Beta release\n#   X.Y.ZrcN  # Release Candidate\n#   X.Y.Z     # Final release\n#\n# Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.\n# 'X.Y.dev0' is the canonical version of 'X.Y.dev'\n#\n__version__ = \"1.4.dev0\"\n\n\n# On OSX, we can get a runtime error due to multiple OpenMP libraries loaded\n# simultaneously. This can happen for instance when calling BLAS inside a\n# prange. Setting the following environment variable allows multiple OpenMP\n# libraries to be loaded. It should not degrade performances since we manually\n# take care of potential over-subcription performance issues, in sections of\n# the code where nested OpenMP loops can happen, by dynamically reconfiguring\n# the inner OpenMP runtime to temporarily disable it while under the scope of\n# the outer OpenMP parallel section.\nos.environ.setdefault(\"KMP_DUPLICATE_LIB_OK\", \"True\")\n\n# Workaround issue discovered in intel-openmp 2019.5:\n# https://github.com/ContinuumIO/anaconda-issues/issues/11294\nos.environ.setdefault(\"KMP_INIT_AT_FORK\", \"FALSE\")\n\ntry:\n    # This variable is injected in the __builtins__ by the build\n    # process. It is used to enable importing subpackages of sklearn when\n    # the binaries are not built\n    # mypy error: Cannot determine type of '__SKLEARN_SETUP__'\n    __SKLEARN_SETUP__  # type: ignore\nexcept NameError:\n    __SKLEARN_SETUP__ = False",
                "filename": "sklearn/__init__.py",
                "start_index": 0,
                "end_index": 2297,
                "start_line": 1,
                "end_line": 65,
                "max_line": 145,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.20",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "get_dep() {\n    package=\"$1\"\n    version=\"$2\"\n    if [[ \"$version\" == \"none\" ]]; then\n        # do not install with none\n        echo\n    elif [[ \"${version%%[^0-9.]*}\" ]]; then\n        # version number is explicitly passed\n        echo \"$package==$version\"\n    elif [[ \"$version\" == \"latest\" ]]; then\n        # use latest\n        echo \"$package\"\n    elif [[ \"$version\" == \"min\" ]]; then\n        echo \"$package==$(python sklearn/_min_dependencies.py $package)\"\n    fi\n}\n\nshow_installed_libraries(){\n    # use conda list when inside a conda environment. conda list shows more\n    # info than pip list, e.g. whether OpenBLAS or MKL is installed as well as\n    # the version of OpenBLAS or MKL\n    if [[ -n \"$CONDA_PREFIX\" ]]; then\n        conda list\n    else\n        python -m pip list\n    fi\n}\n\nactivate_environment() {\n    if [[ \"$DISTRIB\" =~ ^conda.* ]]; then\n        source activate $VIRTUALENV\n    elif [[ \"$DISTRIB\" == \"ubuntu\" || \"$DISTRIB\" == \"debian-32\" || \"$DISTRIB\" == \"pip-nogil\" ]]; then\n        source $VIRTUALENV/bin/activate\n    fi\n}",
                "filename": "build_tools/shared.sh",
                "start_index": 0,
                "end_index": 1047,
                "start_line": 1,
                "end_line": 35,
                "max_line": 35,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.20",
                "sha": "",
                "context_relevance": 0.4
            },
            {
                "code": "#!/usr/bin/env python3\n\n# List all available versions of the documentation\nimport json\nimport re\nimport sys\nfrom urllib.request import urlopen\n\nfrom sklearn.utils.fixes import parse_version\n\n\ndef json_urlread(url):\n    try:\n        return json.loads(urlopen(url).read().decode(\"utf8\"))\n    except Exception:\n        print(\"Error reading\", url, file=sys.stderr)\n        raise\n\n\ndef human_readable_data_quantity(quantity, multiple=1024):\n    # https://stackoverflow.com/questions/1094841/reusable-library-to-get-human-readable-version-of-file-size\n    if quantity == 0:\n        quantity = +0\n    SUFFIXES = [\"B\"] + [i + {1000: \"B\", 1024: \"iB\"}[multiple] for i in \"KMGTPEZY\"]\n    for suffix in SUFFIXES:\n        if quantity < multiple or suffix == SUFFIXES[-1]:\n            if suffix == SUFFIXES[0]:\n                return \"%d %s\" % (quantity, suffix)\n            else:\n                return \"%.1f %s\" % (quantity, suffix)\n        else:\n            quantity /= multiple\n\n\ndef get_file_extension(version):\n    if \"dev\" in version:\n        # The 'dev' branch should be explicitly handled\n        return \"zip\"\n\n    current_version = parse_version(version)\n    min_zip_version = parse_version(\"0.24\")\n\n    return \"zip\" if current_version >= min_zip_version else \"pdf\"\n\n\ndef get_file_size(version):\n    api_url = ROOT_URL + \"%s/_downloads\" % version\n    for path_details in json_urlread(api_url):\n        file_extension = get_file_extension(version)\n        file_path = f\"scikit-learn-docs.{file_extension}\"\n        if path_details[\"name\"] == file_path:\n            return human_readable_data_quantity(path_details[\"size\"], 1000)\n\n\nprint(\":orphan:\")\nprint()\nheading = \"Available documentation for Scikit-learn\"\nprint(heading)\nprint(\"=\" * len(heading))\nprint()\nprint(\"Web-based documentation is available for versions listed below:\")\nprint()\n\nROOT_URL = (\n    \"https://api.github.com/repos/scikit-learn/scikit-learn.github.io/contents/\"  # noqa\n)\nRAW_FMT = \"https://raw.githubusercontent.com/scikit-learn/scikit-learn.github.io/master/%s/index.html\"  # noqa\nVERSION_RE = re.compile(r\"scikit-learn ([\\w\\.\\-]+) documentation</title>\")\nNAMED_DIRS = [\"dev\", \"stable\"]\n\n# Gather data for each version directory, including symlinks\ndirs = {}\nsymlinks = {}\nroot_listing = json_urlread(ROOT_URL)\nfor path_details in root_listing:\n    name = path_details[\"name\"]\n    if not (name[:1].isdigit() or name in NAMED_DIRS):\n        continue\n    if path_details[\"type\"] == \"dir\":\n        html = urlopen(RAW_FMT % name).read().decode(\"utf8\")\n        version_num = VERSION_RE.search(html).group(1)\n        file_size = get_file_size(name)\n        dirs[name] = (version_num, file_size)\n\n    if path_details[\"type\"] == \"symlink\":\n        symlinks[name] = json_urlread(path_details[\"_links\"][\"self\"])[\"target\"]\n\n\n# Symlinks should have same data as target\nfor src, dst in symlinks.items():\n    if dst in dirs:\n        dirs[src] = dirs[dst]\n\n# Output in order: dev, stable, decreasing other version\nseen = set()",
                "filename": "build_tools/circle/list_versions.py",
                "start_index": 0,
                "end_index": 2980,
                "start_line": 1,
                "end_line": 95,
                "max_line": 118,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.20",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "if \"sdist\" in sys.argv or \"--help\" in sys.argv:\n        return []\n\n    import numpy\n\n    from sklearn._build_utils import cythonize_extensions, gen_from_templates\n\n    is_pypy = platform.python_implementation() == \"PyPy\"\n    np_include = numpy.get_include()\n    default_optimization_level = \"O2\"\n\n    if os.name == \"posix\":\n        default_libraries = [\"m\"]\n    else:\n        default_libraries = []\n\n    default_extra_compile_args = []\n    build_with_debug_symbols = (\n        os.environ.get(\"SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS\", \"0\") != \"0\"\n    )\n    if os.name == \"posix\":\n        if build_with_debug_symbols:\n            default_extra_compile_args.append(\"-g\")\n        else:\n            # Setting -g0 will strip symbols, reducing the binary size of extensions\n            default_extra_compile_args.append(\"-g0\")\n\n    cython_exts = []",
                "filename": "setup.py",
                "start_index": 16093,
                "end_index": 16930,
                "start_line": 453,
                "end_line": 480,
                "max_line": 626,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.20",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "if __name__ == \"__main__\":\n    from mpl_toolkits.mplot3d import axes3d  # noqa register the 3d projection\n    import matplotlib.pyplot as plt\n\n    samples_range = np.linspace(50, 150, 5).astype(int)\n    features_range = np.linspace(150, 50000, 5).astype(int)\n    chunks = np.linspace(500, 10000, 15).astype(int)\n\n    results = compute_bench(samples_range, features_range)\n    results_2 = compute_bench_2(chunks)\n\n    max_time = max(\n        [max(i) for i in [t for (label, t) in results.items() if \"speed\" in label]]\n    )\n    max_inertia = max(\n        [max(i) for i in [t for (label, t) in results.items() if \"speed\" not in label]]\n    )\n\n    fig = plt.figure(\"scikit-learn K-Means benchmark results\")\n    for c, (label, timings) in zip(\"brcy\", sorted(results.items())):\n        if \"speed\" in label:\n            ax = fig.add_subplot(2, 2, 1, projection=\"3d\")\n            ax.set_zlim3d(0.0, max_time * 1.1)\n        else:\n            ax = fig.add_subplot(2, 2, 2, projection=\"3d\")\n            ax.set_zlim3d(0.0, max_inertia * 1.1)\n\n        X, Y = np.meshgrid(samples_range, features_range)\n        Z = np.asarray(timings).reshape(samples_range.shape[0], features_range.shape[0])\n        ax.plot_surface(X, Y, Z.T, cstride=1, rstride=1, color=c, alpha=0.5)\n        ax.set_xlabel(\"n_samples\")\n        ax.set_ylabel(\"n_features\")\n\n    i = 0\n    for c, (label, timings) in zip(\"br\", sorted(results_2.items())):\n        i += 1\n        ax = fig.add_subplot(2, 2, i + 2)\n        y = np.asarray(timings)\n        ax.plot(chunks, y, color=c, alpha=0.8)\n        ax.set_xlabel(\"Chunks\")\n        ax.set_ylabel(label)\n\n    plt.show()",
                "filename": "benchmarks/bench_plot_fastkmeans.py",
                "start_index": 2799,
                "end_index": 4418,
                "start_line": 99,
                "end_line": 141,
                "max_line": 141,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.20",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "\"\"\"Utility for testing presence and usability of .pxd files in the installation\n\nUsage:\n------\npython check_pxd_in_installation.py path/to/install_dir/of/scikit-learn\n\"\"\"\n\nimport os\nimport pathlib\nimport subprocess\nimport sys\nimport tempfile\nimport textwrap\n\nsklearn_dir = pathlib.Path(sys.argv[1])\npxd_files = list(sklearn_dir.glob(\"**/*.pxd\"))\n\nprint(\"> Found pxd files:\")\nfor pxd_file in pxd_files:\n    print(\" -\", pxd_file)\n\nprint(\"\\n> Trying to compile a cython extension cimporting all corresponding modules\\n\")\nwith tempfile.TemporaryDirectory() as tmpdir:\n    tmpdir = pathlib.Path(tmpdir)\n    # A cython test file which cimports all modules corresponding to found\n    # pxd files.\n    # e.g. sklearn/tree/_utils.pxd becomes `cimport sklearn.tree._utils`\n    with open(tmpdir / \"tst.pyx\", \"w\") as f:\n        for pxd_file in pxd_files:\n            to_import = str(pxd_file.relative_to(sklearn_dir))\n            to_import = to_import.replace(os.path.sep, \".\")\n            to_import = to_import.replace(\".pxd\", \"\")\n            f.write(\"cimport sklearn.\" + to_import + \"\\n\")\n\n    # A basic setup file to build the test file.\n    # We set the language to c++ and we use numpy.get_include() because\n    # some modules require it.\n    with open(tmpdir / \"setup_tst.py\", \"w\") as f:\n        f.write(textwrap.dedent(\"\"\"\n            from setuptools import setup, Extension\n            from Cython.Build import cythonize\n            import numpy\n\n            extensions = [Extension(\"tst\",\n                                    sources=[\"tst.pyx\"],\n                                    language=\"c++\",\n                                    include_dirs=[numpy.get_include()])]\n\n            setup(ext_modules=cythonize(extensions))\n            \"\"\"))\n\n    subprocess.run(\n        [\"python\", \"setup_tst.py\", \"build_ext\", \"-i\"], check=True, cwd=tmpdir\n    )\n\n    print(\"\\n> Compilation succeeded !\")",
                "filename": "maint_tools/check_pxd_in_installation.py",
                "start_index": 0,
                "end_index": 1886,
                "start_line": 1,
                "end_line": 56,
                "max_line": 56,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.20",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "# flake8: noqa\n\"\"\"\n========================================\nRelease Highlights for scikit-learn 0.23\n========================================\n\n.. currentmodule:: sklearn\n\nWe are pleased to announce the release of scikit-learn 0.23! Many bug fixes\nand improvements were added, as well as some new key features. We detail\nbelow a few of the major features of this release. **For an exhaustive list of\nall the changes**, please refer to the :ref:`release notes <changes_0_23>`.\n\nTo install the latest version (with pip)::\n\n    pip install --upgrade scikit-learn\n\nor with conda::\n\n    conda install -c conda-forge scikit-learn\n\n\"\"\"\n\n##############################################################################\n# Generalized Linear Models, and Poisson loss for gradient boosting\n# -----------------------------------------------------------------\n# Long-awaited Generalized Linear Models with non-normal loss functions are now\n# available. In particular, three new regressors were implemented:\n# :class:`~sklearn.linear_model.PoissonRegressor`,\n# :class:`~sklearn.linear_model.GammaRegressor`, and\n# :class:`~sklearn.linear_model.TweedieRegressor`. The Poisson regressor can be\n# used to model positive integer counts, or relative frequencies. Read more in\n# the :ref:`User Guide <Generalized_linear_regression>`. Additionally,\n# :class:`~sklearn.ensemble.HistGradientBoostingRegressor` supports a new\n# 'poisson' loss as well.\n\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import PoissonRegressor\nfrom sklearn.ensemble import HistGradientBoostingRegressor\n\nn_samples, n_features = 1000, 20\nrng = np.random.RandomState(0)\nX = rng.randn(n_samples, n_features)\n# positive integer target correlated with X[:, 5] with many zeros:\ny = rng.poisson(lam=np.exp(X[:, 5]) / 2)\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=rng)\nglm = PoissonRegressor()\ngbdt = HistGradientBoostingRegressor(loss=\"poisson\", learning_rate=0.01)\nglm.fit(X_train, y_train)\ngbdt.fit(X_train, y_train)\nprint(glm.score(X_test, y_test))\nprint(gbdt.score(X_test, y_test))\n\n##############################################################################\n# Rich visual representation of estimators\n# -----------------------------------------\n# Estimators can now be visualized in notebooks by enabling the\n# `display='diagram'` option. This is particularly useful to summarise the\n# structure of pipelines and other composite estimators, with interactivity to\n# provide detail.  Click on the example image below to expand Pipeline\n# elements.  See :ref:`visualizing_composite_estimators` for how you can use\n# this feature.\n\nfrom sklearn import set_config\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.linear_model import LogisticRegression\n\nset_config(display=\"diagram\")",
                "filename": "examples/release_highlights/plot_release_highlights_0_23_0.py",
                "start_index": 0,
                "end_index": 2974,
                "start_line": 1,
                "end_line": 72,
                "max_line": 189,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.20",
                "sha": "",
                "context_relevance": 0.2
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "sklearn/utils/_show_versions.py": [
                {
                    "chunk": {
                        "code": "\"\"\"\nUtility methods to print system info for debugging\n\nadapted from :func:`pandas.show_versions`\n\"\"\"\n# License: BSD 3 clause\n\nimport platform\nimport sys\n\nfrom .. import __version__\nfrom ..utils.fixes import threadpool_info\nfrom ._openmp_helpers import _openmp_parallelism_enabled\n\n\ndef _get_sys_info():\n    \"\"\"System information\n\n    Returns\n    -------\n    sys_info : dict\n        system and Python version information\n\n    \"\"\"\n    python = sys.version.replace(\"\\n\", \" \")\n\n    blob = [\n        (\"python\", python),\n        (\"executable\", sys.executable),\n        (\"machine\", platform.platform()),\n    ]\n\n    return dict(blob)\n\n\ndef _get_deps_info():\n    \"\"\"Overview of the installed version of main dependencies\n\n    This function does not import the modules to collect the version numbers\n    but instead relies on standard Python package metadata.\n\n    Returns\n    -------\n    deps_info: dict\n        version information on relevant Python libraries\n\n    \"\"\"\n    deps = [\n        \"pip\",\n        \"setuptools\",\n        \"numpy\",\n        \"scipy\",\n        \"Cython\",\n        \"pandas\",\n        \"matplotlib\",\n        \"joblib\",\n        \"threadpoolctl\",\n    ]\n\n    deps_info = {\n        \"sklearn\": __version__,\n    }\n\n    from importlib.metadata import PackageNotFoundError, version\n\n    for modname in deps:\n        try:\n            deps_info[modname] = version(modname)\n        except PackageNotFoundError:\n            deps_info[modname] = None\n    return deps_info\n\n\ndef show_versions():\n    \"\"\"Print useful debugging information\"\n\n    .. versionadded:: 0.20\n    \"\"\"\n\n    sys_info = _get_sys_info()\n    deps_info = _get_deps_info()\n\n    print(\"\\nSystem:\")\n    for k, stat in sys_info.items():\n        print(\"{k:>10}: {stat}\".format(k=k, stat=stat))\n\n    print(\"\\nPython dependencies:\")\n    for k, stat in deps_info.items():\n        print(\"{k:>13}: {stat}\".format(k=k, stat=stat))\n\n    print(\n        \"\\n{k}: {stat}\".format(\n            k=\"Built with OpenMP\", stat=_openmp_parallelism_enabled()\n        )\n    )\n\n    # show threadpoolctl results\n    threadpool_results = threadpool_info()\n    if threadpool_results:\n        print()\n        print(\"threadpoolctl info:\")\n\n        for i, result in enumerate(threadpool_results):\n            for key, val in result.items():\n                print(f\"{key:>15}: {val}\")\n            if i != len(threadpool_results) - 1:\n                print()",
                        "filename": "sklearn/utils/_show_versions.py",
                        "start_index": 0,
                        "end_index": 2379,
                        "start_line": 1,
                        "end_line": 107,
                        "max_line": 107,
                        "git_instance": "github",
                        "repo_name": "testbed/scikit-learn__scikit-learn__0.20",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the implementation of `show_versions` which is directly related to the issue. It needs to be modified to include the BLAS information from numpy's `system_info`."
                }
            ],
            "sklearn/utils/fixes.py": [
                {
                    "chunk": {
                        "code": "\"\"\"Compatibility fixes for older version of python, numpy and scipy\n\nIf you add content to this file, please give the version of the package\nat which the fix is no longer needed.\n\"\"\"\n# Authors: Emmanuelle Gouillart <emmanuelle.gouillart@normalesup.org>\n#          Gael Varoquaux <gael.varoquaux@normalesup.org>\n#          Fabian Pedregosa <fpedregosa@acm.org>\n#          Lars Buitinck\n#\n# License: BSD 3 clause\n\nimport sys\nfrom importlib import resources\n\nimport numpy as np\nimport scipy\nimport scipy.stats\nimport threadpoolctl\n\nimport sklearn\n\nfrom ..externals._packaging.version import parse as parse_version\nfrom .deprecation import deprecated\n\nnp_version = parse_version(np.__version__)\nsp_version = parse_version(scipy.__version__)\nsp_base_version = parse_version(sp_version.base_version)\n\n\ntry:\n    from scipy.optimize._linesearch import line_search_wolfe1, line_search_wolfe2\nexcept ImportError:  # SciPy < 1.8\n    from scipy.optimize.linesearch import line_search_wolfe2, line_search_wolfe1  # type: ignore  # noqa\n\n\ndef _object_dtype_isnan(X):\n    return X != X\n\n\n# Rename the `method` kwarg to `interpolation` for NumPy < 1.22, because\n# `interpolation` kwarg was deprecated in favor of `method` in NumPy >= 1.22.\ndef _percentile(a, q, *, method=\"linear\", **kwargs):\n    return np.percentile(a, q, interpolation=method, **kwargs)\n\n\nif np_version < parse_version(\"1.22\"):\n    percentile = _percentile\nelse:  # >= 1.22\n    from numpy import percentile  # type: ignore  # noqa\n\n\n# compatibility fix for threadpoolctl >= 3.0.0\n# since version 3 it's possible to setup a global threadpool controller to avoid\n# looping through all loaded shared libraries each time.\n# the global controller is created during the first call to threadpoolctl.\ndef _get_threadpool_controller():\n    if not hasattr(threadpoolctl, \"ThreadpoolController\"):\n        return None\n\n    if not hasattr(sklearn, \"_sklearn_threadpool_controller\"):\n        sklearn._sklearn_threadpool_controller = threadpoolctl.ThreadpoolController()\n\n    return sklearn._sklearn_threadpool_controller\n\n\ndef threadpool_limits(limits=None, user_api=None):\n    controller = _get_threadpool_controller()\n    if controller is not None:\n        return controller.limit(limits=limits, user_api=user_api)\n    else:\n        return threadpoolctl.threadpool_limits(limits=limits, user_api=user_api)\n\n\nthreadpool_limits.__doc__ = threadpoolctl.threadpool_limits.__doc__\n\n\ndef threadpool_info():\n    controller = _get_threadpool_controller()\n    if controller is not None:\n        return controller.info()\n    else:\n        return threadpoolctl.threadpool_info()\n\n\nthreadpool_info.__doc__ = threadpoolctl.threadpool_info.__doc__\n\n\n@deprecated(\n    \"The function `delayed` has been moved from `sklearn.utils.fixes` to \"\n    \"`sklearn.utils.parallel`. This import path will be removed in 1.5.\"\n)\ndef delayed(function):\n    from sklearn.utils.parallel import delayed\n\n    return delayed(function)",
                        "filename": "sklearn/utils/fixes.py",
                        "start_index": 0,
                        "end_index": 2939,
                        "start_line": 1,
                        "end_line": 96,
                        "max_line": 160,
                        "git_instance": "github",
                        "repo_name": "testbed/scikit-learn__scikit-learn__0.20",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the `threadpool_info` function which is used in `show_versions` to display threadpool information. It may need to be reviewed to ensure that the BLAS information is correctly retrieved and displayed."
                }
            ]
        },
        "solution_task": "To implement a feature similar to `pandas.show_versions()` in scikit-learn, which includes information about the BLAS library used by NumPy, you can follow these steps:\n\n- Import the necessary functions to retrieve BLAS information.\n- Extend the `_get_sys_info()` function to include BLAS information.\n- Add the BLAS information to the output of the `show_versions()` function.\n\nHere's how you can modify the `sklearn/utils/_show_versions.py` file:\n\n```python\n# At the top of the file, add the necessary imports\nfrom numpy.distutils.system_info import get_info\n\n# Modify the _get_sys_info function to include BLAS information\ndef _get_sys_info():\n    \"\"\"System information\n\n    Returns\n    -------\n    sys_info : dict\n        system and Python version information\n\n    \"\"\"\n    python = sys.version.replace(\"\\n\", \" \")\n\n    blob = [\n        (\"python\", python),\n        (\"executable\", sys.executable),\n        (\"machine\", platform.platform()),\n        # Add BLAS information\n        (\"blas\", get_info('blas_opt')),\n        (\"lapack\", get_info('lapack_opt')),\n    ]\n\n    return dict(blob)\n\n# In the show_versions function, add a section to print BLAS information\ndef show_versions():\n    \"\"\"Print useful debugging information\"\n\n    .. versionadded:: 0.20\n    \"\"\"\n\n    sys_info = _get_sys_info()\n    deps_info = _get_deps_info()\n\n    print(\"\\nSystem:\")\n    for k, stat in sys_info.items():\n        print(\"{k:>10}: {stat}\".format(k=k, stat=stat))\n\n    # Add a section to print BLAS info\n    print(\"\\nBLAS:\")\n    if 'blas' in sys_info and sys_info['blas']:\n        for k, v in sys_info['blas'].items():\n            print(f\"{k:>10}: {v}\")\n    else:\n        print(\"BLAS info not available\")\n\n    print(\"\\nPython dependencies:\")\n    for k, stat in deps_info.items():\n        print(\"{k:>13}: {stat}\".format(k=k, stat=stat))\n\n    print(\n        \"\\n{k}: {stat}\".format(\n            k=\"Built with OpenMP\", stat=_openmp_parallelism_enabled()\n        )\n    )\n\n    # show threadpoolctl results\n    threadpool_results = threadpool_info()\n    if threadpool_results:\n        print()\n        print(\"threadpoolctl info:\")\n\n        for i, result in enumerate(threadpool_results):\n            for key, val in result.items():\n                print(f\"{key:>15}: {val}\")\n            if i != len(threadpool_results) - 1:\n                print()\n```\n\nThis code snippet adds BLAS and LAPACK information to the system information dictionary and prints it out in the `show_versions()` function. The `get_info('blas_opt')` and `get_info('lapack_opt')` functions from `numpy.distutils.system_info` are used to retrieve the BLAS and LAPACK information.\n\nPlease note that the actual output format and the keys in the BLAS/LAPACK dictionaries may vary depending on the system and the installed libraries. You may need to adjust the printing logic to match the expected output format.",
        "bouncer_response": {
            "score": 9,
            "criteria": "RESPONSES that are highly relevant, offering clear and comprehensive suggestions or solutions for the described described feature request, should score between 7 and 9.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable guide on how to implement a feature similar to `pandas.show_versions()` in scikit-learn, specifically including information about the BLAS library used by NumPy. It outlines the steps needed to import the necessary functions, extend the `_get_sys_info()` function, and add the BLAS information to the output of the `show_versions()` function. The code snippet is relevant and provides a clear example of how to modify the `sklearn/utils/_show_versions.py` file to include BLAS and LAPACK information. The RESPONSE also acknowledges that the output format and keys may vary depending on the system and installed libraries, indicating a need for potential adjustments in the printing logic. This shows a deep understanding of the feature request and provides nearly all the necessary information for successful implementation.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711741659.703733,
        "result": "To implement a feature similar to `pandas.show_versions()` in scikit-learn, which includes information about the BLAS library used by NumPy, you can follow these steps:\n\n- Import the necessary functions to retrieve BLAS information.\n- Extend the `_get_sys_info()` function to include BLAS information.\n- Add the BLAS information to the output of the `show_versions()` function.\n\nHere's how you can modify the `sklearn/utils/_show_versions.py` file:\n\n```python\n# At the top of the file, add the necessary imports\nfrom numpy.distutils.system_info import get_info\n\n# Modify the _get_sys_info function to include BLAS information\ndef _get_sys_info():\n    \"\"\"System information\n\n    Returns\n    -------\n    sys_info : dict\n        system and Python version information\n\n    \"\"\"\n    python = sys.version.replace(\"\\n\", \" \")\n\n    blob = [\n        (\"python\", python),\n        (\"executable\", sys.executable),\n        (\"machine\", platform.platform()),\n        # Add BLAS information\n        (\"blas\", get_info('blas_opt')),\n        (\"lapack\", get_info('lapack_opt')),\n    ]\n\n    return dict(blob)\n\n# In the show_versions function, add a section to print BLAS information\ndef show_versions():\n    \"\"\"Print useful debugging information\"\n\n    .. versionadded:: 0.20\n    \"\"\"\n\n    sys_info = _get_sys_info()\n    deps_info = _get_deps_info()\n\n    print(\"\\nSystem:\")\n    for k, stat in sys_info.items():\n        print(\"{k:>10}: {stat}\".format(k=k, stat=stat))\n\n    # Add a section to print BLAS info\n    print(\"\\nBLAS:\")\n    if 'blas' in sys_info and sys_info['blas']:\n        for k, v in sys_info['blas'].items():\n            print(f\"{k:>10}: {v}\")\n    else:\n        print(\"BLAS info not available\")\n\n    print(\"\\nPython dependencies:\")\n    for k, stat in deps_info.items():\n        print(\"{k:>13}: {stat}\".format(k=k, stat=stat))\n\n    print(\n        \"\\n{k}: {stat}\".format(\n            k=\"Built with OpenMP\", stat=_openmp_parallelism_enabled()\n        )\n    )\n\n    # show threadpoolctl results\n    threadpool_results = threadpool_info()\n    if threadpool_results:\n        print()\n        print(\"threadpoolctl info:\")\n\n        for i, result in enumerate(threadpool_results):\n            for key, val in result.items():\n                print(f\"{key:>15}: {val}\")\n            if i != len(threadpool_results) - 1:\n                print()\n```\n\nThis code snippet adds BLAS and LAPACK information to the system information dictionary and prints it out in the `show_versions()` function. The `get_info('blas_opt')` and `get_info('lapack_opt')` functions from `numpy.distutils.system_info` are used to retrieve the BLAS and LAPACK information.\n\nPlease note that the actual output format and the keys in the BLAS/LAPACK dictionaries may vary depending on the system and the installed libraries. You may need to adjust the printing logic to match the expected output format.\n\n### Code snippets to check\n\n-  \u2192 [sklearn](https://github.com/testbed/scikit-learn__scikit-learn__0.20/tree//sklearn) \u2192 [utils](https://github.com/testbed/scikit-learn__scikit-learn__0.20/tree//sklearn/utils)- [Lines 1 - 107](https://github.com/testbed/scikit-learn__scikit-learn__0.20/blob//sklearn/utils/_show_versions.py#L1-L107)\n\n This snippet contains the implementation of `show_versions` which is directly related to the issue. It needs to be modified to include the BLAS information from numpy's `system_info`.\n-  \u2192 [sklearn](https://github.com/testbed/scikit-learn__scikit-learn__0.20/tree//sklearn) \u2192 [utils](https://github.com/testbed/scikit-learn__scikit-learn__0.20/tree//sklearn/utils)- [Lines 1 - 96](https://github.com/testbed/scikit-learn__scikit-learn__0.20/blob//sklearn/utils/fixes.py#L1-L96)\n\n This snippet contains the `threadpool_info` function which is used in `show_versions` to display threadpool information. It may need to be reviewed to ensure that the BLAS information is correctly retrieved and displayed.",
        "context_relevance": 0.26000000000000006,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE is relevant and answers the entire PROMPT completely.\nSupporting Evidence: The RESPONSE provides a detailed explanation and code example of how to implement a feature similar to `pandas.show_versions()` in scikit-learn, including the retrieval of BLAS information from NumPy. It addresses the specific request of the PROMPT by outlining the steps to extend the `_get_sys_info()` function and modify the `show_versions()` function to include BLAS information. The RESPONSE also includes code snippets and references to the relevant parts of the scikit-learn codebase, which are directly related to the issue described in the PROMPT. The RESPONSE is comprehensive and provides all the necessary information to understand and implement the requested feature, thus fulfilling the entire PROMPT."
        },
        "qa_relevance": 1.0
    }
}