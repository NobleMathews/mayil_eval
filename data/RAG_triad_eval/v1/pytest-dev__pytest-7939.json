{
    "id": "pytest-dev__pytest-7939",
    "repo_name": "testbed/pytest-dev__pytest__6.2",
    "task_id": 5802752223691939021,
    "title": "[Feature] Allow a --sw-skip shorthand cli arg like --sw itself permits",
    "body": "The stepwise plugin exposes a shorthand option for the stepwise itself, however it requires a longer arg only for skip, I think these should be consistent and should offer shorthand versions for both.\r\n\r\n```python\r\ndef pytest_addoption(parser: Parser) -> None:\r\n    group = parser.getgroup(\"general\")\r\n    group.addoption(\r\n        \"--sw\",\r\n        \"--stepwise\",\r\n        action=\"store_true\",\r\n        dest=\"stepwise\",\r\n        help=\"exit on test failure and continue from last failing test next time\",\r\n    )\r\n    group.addoption(\r\n        \"--stepwise-skip\",\r\n        action=\"store_true\",\r\n        dest=\"stepwise_skip\",\r\n        help=\"ignore the first failing test but stop on the next failing test\",\r\n    )\r\n```\r\n\r\nExpected:\r\n`pytest --sw-skip`\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pytest-dev__pytest__6.2.git",
    "requested_commit": "",
    "mayil_response": "To implement the shorthand CLI argument `--sw-skip` for the stepwise skip feature in pytest, you can modify the `pytest_addoption` function in the relevant Python file where CLI options are defined. Here's how you can do it:\n\n- Add a shorthand option `--sw-skip` alongside the existing `--stepwise-skip` option.\n- Ensure that both options set the same destination, so they are treated as aliases.\n\nHere's the modified `pytest_addoption` function:\n\n```python\ndef pytest_addoption(parser: Parser) -> None:\n    group = parser.getgroup(\"general\")\n    group.addoption(\n        \"--sw\",\n        \"--stepwise\",\n        action=\"store_true\",\n        dest=\"stepwise\",\n        help=\"exit on test failure and continue from last failing test next time\",\n    )\n    group.addoption(\n        \"--sw-skip\",\n        \"--stepwise-skip\",\n        action=\"store_true\",\n        dest=\"stepwise_skip\",\n        help=\"ignore the first failing test but stop on the next failing test\",\n    )\n```\n\nWith this change, users will be able to use `pytest --sw-skip` as a shorthand for skipping the first failing test but stopping on the next failing test, consistent with the `--sw` shorthand for stepwise testing.\n\n### Code snippets to check\n\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__6.2/tree//bench)- [Lines 1 - 9](https://github.com/testbed/pytest-dev__pytest__6.2/blob//bench/skip.py#L1-L9)\n\n This snippet is not relevant to the issue because it is a test file that uses pytest.skip and does not relate to the CLI argument parsing or plugin options.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.00021549999999999998,
        "snippet_processor": 0.03931,
        "issue_star_creation": 0.02319,
        "issue_star_solver": 0.03424,
        "bouncer": 0.02556
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711734681.0117,
        "relevant_snippets": [
            {
                "code": "import pytest\n\nSKIP = True\n\n\n@pytest.mark.parametrize(\"x\", range(5000))\ndef test_foo(x):\n    if SKIP:\n        pytest.skip(\"heh\")",
                "filename": "bench/skip.py",
                "start_index": 0,
                "end_index": 128,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "# shim for pylib going away\n# if pylib is installed this file will get skipped\n# (`py/__init__.py` has higher precedence)\nimport sys\n\nimport _pytest._py.error as error\nimport _pytest._py.path as path\n\nsys.modules[\"py.error\"] = error\nsys.modules[\"py.path\"] = path",
                "filename": "src/py.py",
                "start_index": 0,
                "end_index": 262,
                "start_line": 1,
                "end_line": 10,
                "max_line": 10,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "rtd:\n  project: pytest",
                "filename": ".github/config.yml",
                "start_index": 0,
                "end_index": 22,
                "start_line": 1,
                "end_line": 2,
                "max_line": 2,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.1
            },
            {
                "code": "blank_issues_enabled: false\ncontact_links:\n  - name: \u2753 Support Question\n    url: https://github.com/pytest-dev/pytest/discussions\n    about: Use GitHub's new Discussions feature for questions",
                "filename": ".github/ISSUE_TEMPLATE/config.yml",
                "start_index": 0,
                "end_index": 191,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "import pytest\n\n\n@pytest.fixture(scope=\"module\", params=range(966))\ndef foo(request):\n    return request.param\n\n\ndef test_it(foo):\n    pass\n\n\ndef test_it2(foo):\n    pass",
                "filename": "bench/manyparam.py",
                "start_index": 0,
                "end_index": 168,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "-   repo: local\n    hooks:\n    -   id: rst\n        name: rst\n        entry: rst-lint --encoding utf-8\n        files: ^(RELEASING.rst|README.rst|TIDELIFT.rst)$\n        language: python\n        additional_dependencies: [pygments, restructuredtext_lint]\n    -   id: changelogs-rst\n        name: changelog filenames\n        language: fail\n        entry: 'changelog files must be named ####.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst'\n        exclude: changelog/(\\d+\\.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst|README.rst|_template.rst)\n        files: ^changelog/\n    -   id: py-deprecated\n        name: py library is deprecated\n        language: pygrep\n        entry: >\n            (?x)\\bpy\\.(\n                _code\\.|\n                builtin\\.|\n                code\\.|\n                io\\.|\n                path\\.local\\.sysfind|\n                process\\.|\n                std\\.|\n                error\\.|\n                xml\\.\n            )\n        types: [python]\n    -   id: py-path-deprecated\n        name: py.path usage is deprecated\n        exclude: docs|src/_pytest/deprecated.py|testing/deprecated_test.py|src/_pytest/legacypath.py\n        language: pygrep\n        entry: \\bpy\\.path\\.local\n        types: [python]",
                "filename": ".pre-commit-config.yaml",
                "start_index": 2166,
                "end_index": 3442,
                "start_line": 73,
                "end_line": 108,
                "max_line": 108,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "def iter_plugins():\n    session = get_session()\n    name_2_serial = pytest_plugin_projects_from_pypi(session)\n\n    for name, last_serial in tqdm(name_2_serial.items(), smoothing=0):\n        response = project_response_with_refresh(session, name, last_serial)\n        if response.status_code == 404:\n            # Some packages, like pytest-azurepipelines42, are included in https://pypi.org/simple\n            # but return 404 on the JSON API. Skip.\n            continue\n        response.raise_for_status()\n        info = response.json()[\"info\"]\n        if \"Development Status :: 7 - Inactive\" in info[\"classifiers\"]:\n            continue\n        for classifier in DEVELOPMENT_STATUS_CLASSIFIERS:\n            if classifier in info[\"classifiers\"]:\n                status = classifier[22:]\n                break\n        else:\n            status = \"N/A\"\n        requires = \"N/A\"\n        if info[\"requires_dist\"]:\n            for requirement in info[\"requires_dist\"]:\n                if re.match(r\"pytest(?![-.\\w])\", requirement):\n                    requires = requirement\n                    break\n\n        def version_sort_key(version_string):\n            \"\"\"\n            Return the sort key for the given version string\n            returned by the API.\n            \"\"\"\n            try:\n                return packaging.version.parse(version_string)\n            except packaging.version.InvalidVersion:\n                # Use a hard-coded pre-release version.\n                return packaging.version.Version(\"0.0.0alpha\")\n\n        releases = response.json()[\"releases\"]\n        for release in sorted(releases, key=version_sort_key, reverse=True):\n            if releases[release]:\n                release_date = datetime.date.fromisoformat(\n                    releases[release][-1][\"upload_time_iso_8601\"].split(\"T\")[0]\n                )\n                last_release = release_date.strftime(\"%b %d, %Y\")\n                break\n        name = f':pypi:`{info[\"name\"]}`'\n        summary = \"\"\n        if info[\"summary\"]:\n            summary = escape_rst(info[\"summary\"].replace(\"\\n\", \"\"))\n        yield {\n            \"name\": name,\n            \"summary\": summary.strip(),\n            \"last release\": last_release,\n            \"status\": status,\n            \"requires\": requires,\n        }\n\n\ndef plugin_definitions(plugins):\n    \"\"\"Return RST for the plugin list that fits better on a vertical page.\"\"\"\n\n    for plugin in plugins:\n        yield dedent(\n            f\"\"\"\n            {plugin['name']}\n               *last release*: {plugin[\"last release\"]},\n               *status*: {plugin[\"status\"]},\n               *requires*: {plugin[\"requires\"]}\n\n               {plugin[\"summary\"]}\n            \"\"\"\n        )",
                "filename": "scripts/update-plugin-list.py",
                "start_index": 2942,
                "end_index": 5644,
                "start_line": 99,
                "end_line": 171,
                "max_line": 195,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "\"\"\"\nThis script is part of the pytest release process which is triggered manually in the Actions\ntab of the repository.\n\nThe user will need to enter the base branch to start the release from (for example\n``6.1.x`` or ``main``) and if it should be a major release.\n\nThe appropriate version will be obtained based on the given branch automatically.\n\nAfter that, it will create a release using the `release` tox environment, and push a new PR.\n\n**Token**: currently the token from the GitHub Actions is used, pushed with\n`pytest bot <pytestbot@gmail.com>` commit author.\n\"\"\"\nimport argparse\nimport re\nfrom pathlib import Path\nfrom subprocess import check_call\nfrom subprocess import check_output\nfrom subprocess import run\n\nfrom colorama import Fore\nfrom colorama import init\nfrom github3.repos import Repository\n\n\nclass InvalidFeatureRelease(Exception):\n    pass\n\n\nSLUG = \"pytest-dev/pytest\"\n\nPR_BODY = \"\"\"\\\nCreated automatically from manual trigger.\n\nOnce all builds pass and it has been **approved** by one or more maintainers, the build\ncan be released by pushing a tag `{version}` to this repository.\n\"\"\"\n\n\ndef login(token: str) -> Repository:\n    import github3\n\n    github = github3.login(token=token)\n    owner, repo = SLUG.split(\"/\")\n    return github.repository(owner, repo)",
                "filename": "scripts/prepare-release-pr.py",
                "start_index": 0,
                "end_index": 1281,
                "start_line": 1,
                "end_line": 46,
                "max_line": 174,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "# info:\n# * https://help.github.com/en/articles/displaying-a-sponsor-button-in-your-repository\n# * https://tidelift.com/subscription/how-to-connect-tidelift-with-github\ntidelift: pypi/pytest\nopen_collective: pytest",
                "filename": ".github/FUNDING.yml",
                "start_index": 0,
                "end_index": 214,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "-   repo: https://github.com/psf/black\n    rev: 23.7.0\n    hooks:\n    -   id: black\n        args: [--safe, --quiet]\n-   repo: https://github.com/asottile/blacken-docs\n    rev: 1.16.0\n    hooks:\n    -   id: blacken-docs\n        additional_dependencies: [black==23.7.0]\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: fix-encoding-pragma\n        args: [--remove]\n    -   id: check-yaml\n    -   id: debug-statements\n        exclude: _pytest/(debugging|hookspec).py\n        language_version: python3\n-   repo: https://github.com/PyCQA/autoflake\n    rev: v2.2.0\n    hooks:\n    -   id: autoflake\n        name: autoflake\n        args: [\"--in-place\", \"--remove-unused-variables\", \"--remove-all-unused-imports\"]\n        language: python\n        files: \\.py$\n-   repo: https://github.com/PyCQA/flake8\n    rev: 6.1.0\n    hooks:\n    -   id: flake8\n        language_version: python3\n        additional_dependencies:\n          - flake8-typing-imports==1.12.0\n          - flake8-docstrings==1.5.0\n-   repo: https://github.com/asottile/reorder-python-imports\n    rev: v3.10.0\n    hooks:\n    -   id: reorder-python-imports\n        args: ['--application-directories=.:src', --py38-plus]\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v3.10.1\n    hooks:\n    -   id: pyupgrade\n        args: [--py38-plus]\n-   repo: https://github.com/asottile/setup-cfg-fmt\n    rev: v2.4.0\n    hooks:\n    -   id: setup-cfg-fmt\n        args: [\"--max-py-version=3.12\", \"--include-version-classifiers\"]\n-   repo: https://github.com/pre-commit/pygrep-hooks\n    rev: v1.10.0\n    hooks:\n    -   id: python-use-type-annotations\n-   repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.5.1\n    hooks:\n    -   id: mypy\n        files: ^(src/|testing/)\n        args: []\n        additional_dependencies:\n          - iniconfig>=1.1.0\n          - attrs>=19.2.0\n          - packaging\n          - tomli\n          - types-pkg_resources\n            # for mypy running on python>=3.11 since exceptiongroup is only a dependency\n            # on <3.11\n          - exceptiongroup>=1.0.0rc8",
                "filename": ".pre-commit-config.yaml",
                "start_index": 7,
                "end_index": 2165,
                "start_line": 2,
                "end_line": 72,
                "max_line": 108,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.0
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "bench/skip.py": [
                {
                    "chunk": {
                        "code": "import pytest\n\nSKIP = True\n\n\n@pytest.mark.parametrize(\"x\", range(5000))\ndef test_foo(x):\n    if SKIP:\n        pytest.skip(\"heh\")",
                        "filename": "bench/skip.py",
                        "start_index": 0,
                        "end_index": 128,
                        "start_line": 1,
                        "end_line": 9,
                        "max_line": 9,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__6.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is not relevant to the issue because it is a test file that uses pytest.skip and does not relate to the CLI argument parsing or plugin options."
                }
            ]
        },
        "solution_task": "To implement the shorthand CLI argument `--sw-skip` for the stepwise skip feature in pytest, you can modify the `pytest_addoption` function in the relevant Python file where CLI options are defined. Here's how you can do it:\n\n- Add a shorthand option `--sw-skip` alongside the existing `--stepwise-skip` option.\n- Ensure that both options set the same destination, so they are treated as aliases.\n\nHere's the modified `pytest_addoption` function:\n\n```python\ndef pytest_addoption(parser: Parser) -> None:\n    group = parser.getgroup(\"general\")\n    group.addoption(\n        \"--sw\",\n        \"--stepwise\",\n        action=\"store_true\",\n        dest=\"stepwise\",\n        help=\"exit on test failure and continue from last failing test next time\",\n    )\n    group.addoption(\n        \"--sw-skip\",\n        \"--stepwise-skip\",\n        action=\"store_true\",\n        dest=\"stepwise_skip\",\n        help=\"ignore the first failing test but stop on the next failing test\",\n    )\n```\n\nWith this change, users will be able to use `pytest --sw-skip` as a shorthand for skipping the first failing test but stopping on the next failing test, consistent with the `--sw` shorthand for stepwise testing.",
        "bouncer_response": {
            "score": 10,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant suggestions that can directly lead to the successful implementation or improvement of the requested feature.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable solution to the feature request by showing exactly how to modify the `pytest_addoption` function to include the shorthand `--sw-skip` option. It correctly advises to set the same destination for both the shorthand and the long-form options, ensuring they are treated as aliases. The RESPONSE also includes the modified code snippet, which is directly applicable to the feature request. The additional commentary on the code snippets to check is not necessary for the implementation of the feature but does not detract from the value of the RESPONSE.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711734718.09109,
        "result": "To implement the shorthand CLI argument `--sw-skip` for the stepwise skip feature in pytest, you can modify the `pytest_addoption` function in the relevant Python file where CLI options are defined. Here's how you can do it:\n\n- Add a shorthand option `--sw-skip` alongside the existing `--stepwise-skip` option.\n- Ensure that both options set the same destination, so they are treated as aliases.\n\nHere's the modified `pytest_addoption` function:\n\n```python\ndef pytest_addoption(parser: Parser) -> None:\n    group = parser.getgroup(\"general\")\n    group.addoption(\n        \"--sw\",\n        \"--stepwise\",\n        action=\"store_true\",\n        dest=\"stepwise\",\n        help=\"exit on test failure and continue from last failing test next time\",\n    )\n    group.addoption(\n        \"--sw-skip\",\n        \"--stepwise-skip\",\n        action=\"store_true\",\n        dest=\"stepwise_skip\",\n        help=\"ignore the first failing test but stop on the next failing test\",\n    )\n```\n\nWith this change, users will be able to use `pytest --sw-skip` as a shorthand for skipping the first failing test but stopping on the next failing test, consistent with the `--sw` shorthand for stepwise testing.\n\n### Code snippets to check\n\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__6.2/tree//bench)- [Lines 1 - 9](https://github.com/testbed/pytest-dev__pytest__6.2/blob//bench/skip.py#L1-L9)\n\n This snippet is not relevant to the issue because it is a test file that uses pytest.skip and does not relate to the CLI argument parsing or plugin options.",
        "context_relevance": 0.01,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE is relevant to the entire PROMPT and answers the PROMPT completely.\nSupporting Evidence: The RESPONSE provides a clear explanation of how to implement the shorthand CLI argument `--sw-skip` for the stepwise skip feature in pytest, which is exactly what the PROMPT is requesting. It includes a modified code example that directly addresses the user's need for consistency in shorthand options. The RESPONSE also correctly identifies the provided code snippet as irrelevant to the issue, which is an additional aspect of the PROMPT. The RESPONSE is fully aligned with the PROMPT's request and context."
        },
        "qa_relevance": 1.0
    }
}