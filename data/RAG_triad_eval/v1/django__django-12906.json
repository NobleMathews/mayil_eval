{
    "id": "django__django-12906",
    "repo_name": "testbed/django__django__3.2",
    "task_id": 4980029884104179421,
    "title": "Document admin's requirement on django.template.context_processors.request context processor.",
    "body": "Description\n\t\nSince commit d24ba1be7a53a113d19e2860c03aff9922efec24, the admin templates use the implied request variable normally added by django.template.context_processors.request.\nAs Django templates silence errors, this went unnoticed during testing, and won't immediately break the templates, but certain expected rendering features won't work.\nDjango should document this change:\nIn the release notes (provide a deprecation period where it is a warning only)\nIn the admin docs\nIn the system check framework as a warning (but eventually an error)\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/django__django__3.2.git",
    "requested_commit": "",
    "mayil_response": "- Add a system check to ensure `django.template.context_processors.request` is enabled in the `TEMPLATES` setting for the admin to function correctly.\n- Update the `django/contrib/admin/checks.py` file to include the new check for the `request` context processor.\n- The check should issue a `Warning` if the context processor is not enabled, and later this will be escalated to an `Error` as part of the deprecation path.\n\n```python\n# django/contrib/admin/checks.py\n\nfrom django.core.checks import Warning, register\n\n@register()\ndef check_request_context_processor(app_configs, **kwargs):\n    errors = []\n    if \"django.template.context_processors.request\" not in django_templates_instance.context_processors:\n        errors.append(\n            Warning(\n                \"'django.template.context_processors.request' must be enabled \"\n                \"in DjangoTemplates (TEMPLATES) in order to use the admin application.\",\n                id=\"admin.W412\",\n            )\n        )\n    return errors\n```\n\n- Ensure this check is called during the system checks by adding it to the appropriate list of checks within the `checks.py` file.\n- Update the release notes and admin documentation to reflect the requirement of the `request` context processor for admin templates.\n- Release notes entry:\n\n```markdown\n### Changed\n- Admin templates now require `django.template.context_processors.request` to be enabled. This change is due to commit `d24ba1be7a53a113d19e2860c03aff9922efec24`. A deprecation period is provided where only warnings will be issued.\n```\n\n- Admin documentation update:\n\n```markdown\nEnsure `django.template.context_processors.request` is enabled in your `TEMPLATES` setting to use the `request` variable in admin templates.\n```\n\n- Identify and document the exact rendering features in admin templates that are affected by the absence of the `request` context processor. Include this information in the release notes and admin documentation.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__3.2/tree//django) \u2192 [contrib](https://github.com/testbed/django__django__3.2/tree//django/contrib) \u2192 [admin](https://github.com/testbed/django__django__3.2/tree//django/contrib/admin)- [Lines 85 - 1366](https://github.com/testbed/django__django__3.2/blob//django/contrib/admin/checks.py#L85-L1366)\n\n This snippet contains the system checks for the admin application, including a check for the 'django.template.context_processors.request' which is directly related to the issue.\n-  \u2192 [django](https://github.com/testbed/django__django__3.2/tree//django) \u2192 [template](https://github.com/testbed/django__django__3.2/tree//django/template)- [Lines 1 - 89](https://github.com/testbed/django__django__3.2/blob//django/template/context_processors.py#L1-L89)\n\n This snippet defines the 'request' context processor that adds the 'request' variable to the context, which is the subject of the issue.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.000326,
        "snippet_processor": 0.04952,
        "issue_star_creation": 0.027679999999999996,
        "issue_star_solver": 0.05689,
        "bouncer": 0.02876
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711728011.4323,
        "relevant_snippets": [
            {
                "code": "if not django_templates_instance:\n        errors.append(\n            checks.Error(\n                \"A 'django.template.backends.django.DjangoTemplates' instance \"\n                \"must be configured in TEMPLATES in order to use the admin \"\n                \"application.\",\n                id=\"admin.E403\",\n            )\n        )\n    else:\n        if (\n            \"django.contrib.auth.context_processors.auth\"\n            not in django_templates_instance.context_processors\n            and _contains_subclass(\n                \"django.contrib.auth.backends.ModelBackend\",\n                settings.AUTHENTICATION_BACKENDS,\n            )\n        ):\n            errors.append(\n                checks.Error(\n                    \"'django.contrib.auth.context_processors.auth' must be \"\n                    \"enabled in DjangoTemplates (TEMPLATES) if using the default \"\n                    \"auth backend in order to use the admin application.\",\n                    id=\"admin.E402\",\n                )\n            )\n        if (\n            \"django.contrib.messages.context_processors.messages\"\n            not in django_templates_instance.context_processors\n        ):\n            errors.append(\n                checks.Error(\n                    \"'django.contrib.messages.context_processors.messages' must \"\n                    \"be enabled in DjangoTemplates (TEMPLATES) in order to use \"\n                    \"the admin application.\",\n                    id=\"admin.E404\",\n                )\n            )\n        sidebar_enabled = any(site.enable_nav_sidebar for site in all_sites)\n        if (\n            sidebar_enabled\n            and \"django.template.context_processors.request\"\n            not in django_templates_instance.context_processors\n        ):\n            errors.append(\n                checks.Warning(\n                    \"'django.template.context_processors.request' must be enabled \"\n                    \"in DjangoTemplates (TEMPLATES) in order to use the admin \"\n                    \"navigation sidebar.\",\n                    id=\"admin.W411\",\n                )\n            )\n\n    if not _contains_subclass(\n        \"django.contrib.auth.middleware.AuthenticationMiddleware\", settings.MIDDLEWARE\n    ):\n        errors.append(\n            checks.Error(\n                \"'django.contrib.auth.middleware.AuthenticationMiddleware' must \"\n                \"be in MIDDLEWARE in order to use the admin application.\",\n                id=\"admin.E408\",\n            )\n        )\n    if not _contains_subclass(\n        \"django.contrib.messages.middleware.MessageMiddleware\", settings.MIDDLEWARE\n    ):\n        errors.append(\n            checks.Error(\n                \"'django.contrib.messages.middleware.MessageMiddleware' must \"\n                \"be in MIDDLEWARE in order to use the admin application.\",\n                id=\"admin.E409\",\n            )\n        )",
                "filename": "django/contrib/admin/checks.py",
                "start_index": 2624,
                "end_index": 5479,
                "start_line": 85,
                "end_line": 1366,
                "max_line": 1367,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.2",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "\"\"\"\nA set of request processors that return dictionaries to be merged into a\ntemplate context. Each function takes the request object as its only parameter\nand returns a dictionary to add to the context.\n\nThese are referenced from the 'context_processors' option of the configuration\nof a DjangoTemplates backend and used by RequestContext.\n\"\"\"\n\nimport itertools\n\nfrom django.conf import settings\nfrom django.middleware.csrf import get_token\nfrom django.utils.functional import SimpleLazyObject, lazy\n\n\ndef csrf(request):\n    \"\"\"\n    Context processor that provides a CSRF token, or the string 'NOTPROVIDED' if\n    it has not been provided by either a view decorator or the middleware\n    \"\"\"\n\n    def _get_val():\n        token = get_token(request)\n        if token is None:\n            # In order to be able to provide debugging info in the\n            # case of misconfiguration, we use a sentinel value\n            # instead of returning an empty dict.\n            return \"NOTPROVIDED\"\n        else:\n            return token\n\n    return {\"csrf_token\": SimpleLazyObject(_get_val)}\n\n\ndef debug(request):\n    \"\"\"\n    Return context variables helpful for debugging.\n    \"\"\"\n    context_extras = {}\n    if settings.DEBUG and request.META.get(\"REMOTE_ADDR\") in settings.INTERNAL_IPS:\n        context_extras[\"debug\"] = True\n        from django.db import connections\n\n        # Return a lazy reference that computes connection.queries on access,\n        # to ensure it contains queries triggered after this function runs.\n        context_extras[\"sql_queries\"] = lazy(\n            lambda: list(\n                itertools.chain.from_iterable(\n                    connections[x].queries for x in connections\n                )\n            ),\n            list,\n        )\n    return context_extras\n\n\ndef i18n(request):\n    from django.utils import translation\n\n    return {\n        \"LANGUAGES\": settings.LANGUAGES,\n        \"LANGUAGE_CODE\": translation.get_language(),\n        \"LANGUAGE_BIDI\": translation.get_language_bidi(),\n    }\n\n\ndef tz(request):\n    from django.utils import timezone\n\n    return {\"TIME_ZONE\": timezone.get_current_timezone_name()}\n\n\ndef static(request):\n    \"\"\"\n    Add static-related context variables to the context.\n    \"\"\"\n    return {\"STATIC_URL\": settings.STATIC_URL}\n\n\ndef media(request):\n    \"\"\"\n    Add media-related context variables to the context.\n    \"\"\"\n    return {\"MEDIA_URL\": settings.MEDIA_URL}\n\n\ndef request(request):\n    return {\"request\": request}",
                "filename": "django/template/context_processors.py",
                "start_index": 0,
                "end_index": 2479,
                "start_line": 1,
                "end_line": 89,
                "max_line": 89,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.2",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "# PermWrapper and PermLookupDict proxy the permissions system into objects that\n# the template system can understand.\n\n\nclass PermLookupDict:\n    def __init__(self, user, app_label):\n        self.user, self.app_label = user, app_label\n\n    def __repr__(self):\n        return str(self.user.get_all_permissions())\n\n    def __getitem__(self, perm_name):\n        return self.user.has_perm(\"%s.%s\" % (self.app_label, perm_name))\n\n    def __iter__(self):\n        # To fix 'item in perms.someapp' and __getitem__ interaction we need to\n        # define __iter__. See #18979 for details.\n        raise TypeError(\"PermLookupDict is not iterable.\")\n\n    def __bool__(self):\n        return self.user.has_module_perms(self.app_label)\n\n\nclass PermWrapper:\n    def __init__(self, user):\n        self.user = user\n\n    def __repr__(self):\n        return f\"{self.__class__.__qualname__}({self.user!r})\"\n\n    def __getitem__(self, app_label):\n        return PermLookupDict(self.user, app_label)\n\n    def __iter__(self):\n        # I am large, I contain multitudes.\n        raise TypeError(\"PermWrapper is not iterable.\")\n\n    def __contains__(self, perm_name):\n        \"\"\"\n        Lookup by \"someapp\" or \"someapp.someperm\" in perms.\n        \"\"\"\n        if \".\" not in perm_name:\n            # The name refers to module.\n            return bool(self[perm_name])\n        app_label, perm_name = perm_name.split(\".\", 1)\n        return self[app_label][perm_name]\n\n\ndef auth(request):\n    \"\"\"\n    Return context variables required by apps that use Django's authentication\n    system.\n\n    If there is no 'user' attribute in the request, use AnonymousUser (from\n    django.contrib.auth).\n    \"\"\"\n    if hasattr(request, \"user\"):\n        user = request.user\n    else:\n        from django.contrib.auth.models import AnonymousUser\n\n        user = AnonymousUser()\n\n    return {\n        \"user\": user,\n        \"perms\": PermWrapper(user),\n    }",
                "filename": "django/contrib/auth/context_processors.py",
                "start_index": 0,
                "end_index": 1910,
                "start_line": 1,
                "end_line": 67,
                "max_line": 67,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.2",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "import warnings\nfrom datetime import datetime, timedelta\n\nfrom django import forms\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.contrib.admin import FieldListFilter\nfrom django.contrib.admin.exceptions import (\n    DisallowedModelAdminLookup,\n    DisallowedModelAdminToField,\n)\nfrom django.contrib.admin.options import (\n    IS_FACETS_VAR,\n    IS_POPUP_VAR,\n    TO_FIELD_VAR,\n    IncorrectLookupParameters,\n    ShowFacets,\n)\nfrom django.contrib.admin.utils import (\n    build_q_object_from_lookup_parameters,\n    get_fields_from_path,\n    lookup_spawns_duplicates,\n    prepare_lookup_value,\n    quote,\n)\nfrom django.core.exceptions import (\n    FieldDoesNotExist,\n    ImproperlyConfigured,\n    SuspiciousOperation,\n)\nfrom django.core.paginator import InvalidPage\nfrom django.db.models import F, Field, ManyToOneRel, OrderBy\nfrom django.db.models.expressions import Combinable\nfrom django.urls import reverse\nfrom django.utils.deprecation import RemovedInDjango60Warning\nfrom django.utils.http import urlencode\nfrom django.utils.inspect import func_supports_parameter\nfrom django.utils.timezone import make_aware\nfrom django.utils.translation import gettext\n\n# Changelist settings\nALL_VAR = \"all\"\nORDER_VAR = \"o\"\nPAGE_VAR = \"p\"\nSEARCH_VAR = \"q\"\nERROR_FLAG = \"e\"\n\nIGNORED_PARAMS = (\n    ALL_VAR,\n    ORDER_VAR,\n    SEARCH_VAR,\n    IS_FACETS_VAR,\n    IS_POPUP_VAR,\n    TO_FIELD_VAR,\n)\n\n\nclass ChangeListSearchForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # Populate \"fields\" dynamically because SEARCH_VAR is a variable:\n        self.fields = {\n            SEARCH_VAR: forms.CharField(required=False, strip=False),\n        }",
                "filename": "django/contrib/admin/views/main.py",
                "start_index": 0,
                "end_index": 1720,
                "start_line": 1,
                "end_line": 439,
                "max_line": 625,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.2",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "if not _contains_subclass(\n        \"django.contrib.sessions.middleware.SessionMiddleware\", settings.MIDDLEWARE\n    ):\n        errors.append(\n            checks.Error(\n                \"'django.contrib.sessions.middleware.SessionMiddleware' must \"\n                \"be in MIDDLEWARE in order to use the admin application.\",\n                hint=(\n                    \"Insert \"\n                    \"'django.contrib.sessions.middleware.SessionMiddleware' \"\n                    \"before \"\n                    \"'django.contrib.auth.middleware.AuthenticationMiddleware'.\"\n                ),\n                id=\"admin.E410\",\n            )\n        )\n    return errors",
                "filename": "django/contrib/admin/checks.py",
                "start_index": 5484,
                "end_index": 6140,
                "start_line": 138,
                "end_line": 1245,
                "max_line": 1367,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.2",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "import logging\n\nfrom asgiref.sync import iscoroutinefunction, markcoroutinefunction\n\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.http import (\n    HttpResponse,\n    HttpResponseGone,\n    HttpResponseNotAllowed,\n    HttpResponsePermanentRedirect,\n    HttpResponseRedirect,\n)\nfrom django.template.response import TemplateResponse\nfrom django.urls import reverse\nfrom django.utils.decorators import classonlymethod\nfrom django.utils.functional import classproperty\n\nlogger = logging.getLogger(\"django.request\")\n\n\nclass ContextMixin:\n    \"\"\"\n    A default context mixin that passes the keyword arguments received by\n    get_context_data() as the template context.\n    \"\"\"\n\n    extra_context = None\n\n    def get_context_data(self, **kwargs):\n        kwargs.setdefault(\"view\", self)\n        if self.extra_context is not None:\n            kwargs.update(self.extra_context)\n        return kwargs",
                "filename": "django/views/generic/base.py",
                "start_index": 0,
                "end_index": 911,
                "start_line": 1,
                "end_line": 33,
                "max_line": 285,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.2",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "import json\n\nfrom django import template\nfrom django.template.context import Context\n\nfrom .base import InclusionAdminNode\n\nregister = template.Library()\n\n\ndef prepopulated_fields_js(context):\n    \"\"\"\n    Create a list of prepopulated_fields that should render JavaScript for\n    the prepopulated fields for both the admin form and inlines.\n    \"\"\"\n    prepopulated_fields = []\n    if \"adminform\" in context:\n        prepopulated_fields.extend(context[\"adminform\"].prepopulated_fields)\n    if \"inline_admin_formsets\" in context:\n        for inline_admin_formset in context[\"inline_admin_formsets\"]:\n            for inline_admin_form in inline_admin_formset:\n                if inline_admin_form.original is None:\n                    prepopulated_fields.extend(inline_admin_form.prepopulated_fields)\n\n    prepopulated_fields_json = []\n    for field in prepopulated_fields:\n        prepopulated_fields_json.append(\n            {\n                \"id\": \"#%s\" % field[\"field\"].auto_id,\n                \"name\": field[\"field\"].name,\n                \"dependency_ids\": [\n                    \"#%s\" % dependency.auto_id for dependency in field[\"dependencies\"]\n                ],\n                \"dependency_list\": [\n                    dependency.name for dependency in field[\"dependencies\"]\n                ],\n                \"maxLength\": field[\"field\"].field.max_length or 50,\n                \"allowUnicode\": getattr(field[\"field\"].field, \"allow_unicode\", False),\n            }\n        )\n\n    context.update(\n        {\n            \"prepopulated_fields\": prepopulated_fields,\n            \"prepopulated_fields_json\": json.dumps(prepopulated_fields_json),\n        }\n    )\n    return context\n\n\n@register.tag(name=\"prepopulated_fields_js\")\ndef prepopulated_fields_js_tag(parser, token):\n    return InclusionAdminNode(\n        parser,\n        token,\n        func=prepopulated_fields_js,\n        template_name=\"prepopulated_fields_js.html\",\n    )",
                "filename": "django/contrib/admin/templatetags/admin_modify.py",
                "start_index": 0,
                "end_index": 1930,
                "start_line": 1,
                "end_line": 130,
                "max_line": 150,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.2",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "from django.conf import settings\n\nfrom .. import Tags, Warning, register\n\n\ndef add_session_cookie_message(message):\n    return message + (\n        \" Using a secure-only session cookie makes it more difficult for \"\n        \"network traffic sniffers to hijack user sessions.\"\n    )\n\n\nW010 = Warning(\n    add_session_cookie_message(\n        \"You have 'django.contrib.sessions' in your INSTALLED_APPS, \"\n        \"but you have not set SESSION_COOKIE_SECURE to True.\"\n    ),\n    id=\"security.W010\",\n)\n\nW011 = Warning(\n    add_session_cookie_message(\n        \"You have 'django.contrib.sessions.middleware.SessionMiddleware' \"\n        \"in your MIDDLEWARE, but you have not set \"\n        \"SESSION_COOKIE_SECURE to True.\"\n    ),\n    id=\"security.W011\",\n)\n\nW012 = Warning(\n    add_session_cookie_message(\"SESSION_COOKIE_SECURE is not set to True.\"),\n    id=\"security.W012\",\n)\n\n\ndef add_httponly_message(message):\n    return message + (\n        \" Using an HttpOnly session cookie makes it more difficult for \"\n        \"cross-site scripting attacks to hijack user sessions.\"\n    )\n\n\nW013 = Warning(\n    add_httponly_message(\n        \"You have 'django.contrib.sessions' in your INSTALLED_APPS, \"\n        \"but you have not set SESSION_COOKIE_HTTPONLY to True.\",\n    ),\n    id=\"security.W013\",\n)\n\nW014 = Warning(\n    add_httponly_message(\n        \"You have 'django.contrib.sessions.middleware.SessionMiddleware' \"\n        \"in your MIDDLEWARE, but you have not set \"\n        \"SESSION_COOKIE_HTTPONLY to True.\"\n    ),\n    id=\"security.W014\",\n)\n\nW015 = Warning(\n    add_httponly_message(\"SESSION_COOKIE_HTTPONLY is not set to True.\"),\n    id=\"security.W015\",\n)\n\n\n@register(Tags.security, deploy=True)\ndef check_session_cookie_secure(app_configs, **kwargs):\n    if settings.SESSION_COOKIE_SECURE is True:\n        return []\n    errors = []\n    if _session_app():\n        errors.append(W010)\n    if _session_middleware():\n        errors.append(W011)\n    if len(errors) > 1:\n        errors = [W012]\n    return errors\n\n\n@register(Tags.security, deploy=True)\ndef check_session_cookie_httponly(app_configs, **kwargs):\n    if settings.SESSION_COOKIE_HTTPONLY is True:\n        return []\n    errors = []\n    if _session_app():\n        errors.append(W013)\n    if _session_middleware():\n        errors.append(W014)\n    if len(errors) > 1:\n        errors = [W015]\n    return errors\n\n\ndef _session_middleware():\n    return \"django.contrib.sessions.middleware.SessionMiddleware\" in settings.MIDDLEWARE\n\n\ndef _session_app():\n    return \"django.contrib.sessions\" in settings.INSTALLED_APPS",
                "filename": "django/core/checks/security/sessions.py",
                "start_index": 0,
                "end_index": 2553,
                "start_line": 1,
                "end_line": 99,
                "max_line": 99,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.2",
                "sha": "",
                "context_relevance": 0.1
            },
            {
                "code": "/*\n    DJANGO Admin styles\n*/\n\n/* VARIABLE DEFINITIONS */\nhtml[data-theme=\"light\"],\n:root {\n    --primary: #79aec8;\n    --secondary: #417690;\n    --accent: #f5dd5d;\n    --primary-fg: #fff;\n\n    --body-fg: #333;\n    --body-bg: #fff;\n    --body-quiet-color: #666;\n    --body-loud-color: #000;\n\n    --header-color: #ffc;\n    --header-branding-color: var(--accent);\n    --header-bg: var(--secondary);\n    --header-link-color: var(--primary-fg);\n\n    --breadcrumbs-fg: #c4dce8;\n    --breadcrumbs-link-fg: var(--body-bg);\n    --breadcrumbs-bg: #264b5d;\n\n    --link-fg: #417893;\n    --link-hover-color: #036;\n    --link-selected-fg: var(--secondary);\n\n    --hairline-color: #e8e8e8;\n    --border-color: #ccc;\n\n    --error-fg: #ba2121;\n\n    --message-success-bg: #dfd;\n    --message-warning-bg: #ffc;\n    --message-error-bg: #ffefef;\n\n    --darkened-bg: #f8f8f8; /* A bit darker than --body-bg */\n    --selected-bg: #e4e4e4; /* E.g. selected table cells */\n    --selected-row: #ffc;\n\n    --button-fg: #fff;\n    --button-bg: var(--secondary);\n    --button-hover-bg: #205067;\n    --default-button-bg: #205067;\n    --default-button-hover-bg: var(--secondary);\n    --close-button-bg: #747474;\n    --close-button-hover-bg: #333;\n    --delete-button-bg: #ba2121;\n    --delete-button-hover-bg: #a41515;\n\n    --object-tools-fg: var(--button-fg);\n    --object-tools-bg: var(--close-button-bg);\n    --object-tools-hover-bg: var(--close-button-hover-bg);\n\n    --font-family-primary:\n        \"Segoe UI\",\n        system-ui,\n        Roboto,\n        \"Helvetica Neue\",\n        Arial,\n        sans-serif,\n        \"Apple Color Emoji\",\n        \"Segoe UI Emoji\",\n        \"Segoe UI Symbol\",\n        \"Noto Color Emoji\";\n    --font-family-monospace:\n        ui-monospace,\n        Menlo,\n        Monaco,\n        \"Cascadia Mono\",\n        \"Segoe UI Mono\",\n        \"Roboto Mono\",\n        \"Oxygen Mono\",\n        \"Ubuntu Monospace\",\n        \"Source Code Pro\",\n        \"Fira Mono\",\n        \"Droid Sans Mono\",\n        \"Courier New\",\n        monospace,\n        \"Apple Color Emoji\",\n        \"Segoe UI Emoji\",\n        \"Segoe UI Symbol\",\n        \"Noto Color Emoji\";\n}\n\nhtml, body {\n    height: 100%;\n}\n\nbody {\n    margin: 0;\n    padding: 0;\n    font-size: 0.875rem;\n    font-family: var(--font-family-primary);\n    color: var(--body-fg);\n    background: var(--body-bg);\n}\n\n/* LINKS */\n\na:link, a:visited {\n    color: var(--body-fg);\n    text-decoration: none;\n    transition: color 0.15s, background 0.15s;\n}\n\na:focus, a:hover {\n    color: var(--link-hover-color);\n}\n\na:focus {\n    text-decoration: underline;\n}\n\na img {\n    border: none;\n}\n\na.section:link, a.section:visited {\n    color: var(--header-link-color);\n    text-decoration: none;\n}\n\na.section:focus, a.section:hover {\n    text-decoration: underline;\n}\n\n/* GLOBAL DEFAULTS */\n\np, ol, ul, dl {\n    margin: .2em 0 .8em 0;\n}\n\np {\n    padding: 0;\n    line-height: 140%;\n}\n\nh1,h2,h3,h4,h5 {\n    font-weight: bold;\n}",
                "filename": "django/contrib/admin/static/admin/css/base.css",
                "start_index": 0,
                "end_index": 2928,
                "start_line": 1,
                "end_line": 1154,
                "max_line": 1154,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.2",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "from urllib.parse import parse_qsl, unquote, urlparse, urlunparse\n\nfrom django import template\nfrom django.contrib.admin.utils import quote\nfrom django.urls import Resolver404, get_script_prefix, resolve\nfrom django.utils.http import urlencode\n\nregister = template.Library()\n\n\n@register.filter\ndef admin_urlname(value, arg):\n    return \"admin:%s_%s_%s\" % (value.app_label, value.model_name, arg)\n\n\n@register.filter\ndef admin_urlquote(value):\n    return quote(value)\n\n\n@register.simple_tag(takes_context=True)\ndef add_preserved_filters(context, url, popup=False, to_field=None):\n    opts = context.get(\"opts\")\n    preserved_filters = context.get(\"preserved_filters\")\n\n    parsed_url = list(urlparse(url))\n    parsed_qs = dict(parse_qsl(parsed_url[4]))\n    merged_qs = {}\n\n    if opts and preserved_filters:\n        preserved_filters = dict(parse_qsl(preserved_filters))\n\n        match_url = \"/%s\" % unquote(url).partition(get_script_prefix())[2]\n        try:\n            match = resolve(match_url)\n        except Resolver404:\n            pass\n        else:\n            current_url = \"%s:%s\" % (match.app_name, match.url_name)\n            changelist_url = \"admin:%s_%s_changelist\" % (\n                opts.app_label,\n                opts.model_name,\n            )\n            if (\n                changelist_url == current_url\n                and \"_changelist_filters\" in preserved_filters\n            ):\n                preserved_filters = dict(\n                    parse_qsl(preserved_filters[\"_changelist_filters\"])\n                )\n\n        merged_qs.update(preserved_filters)\n\n    if popup:\n        from django.contrib.admin.options import IS_POPUP_VAR\n\n        merged_qs[IS_POPUP_VAR] = 1\n    if to_field:\n        from django.contrib.admin.options import TO_FIELD_VAR\n\n        merged_qs[TO_FIELD_VAR] = to_field\n\n    merged_qs.update(parsed_qs)\n\n    parsed_url[4] = urlencode(merged_qs)\n    return urlunparse(parsed_url)",
                "filename": "django/contrib/admin/templatetags/admin_urls.py",
                "start_index": 0,
                "end_index": 1925,
                "start_line": 1,
                "end_line": 66,
                "max_line": 66,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.2",
                "sha": "",
                "context_relevance": 0.2
            }
        ],
        "classification": "other",
        "snippet_processor_task": {
            "django/contrib/admin/checks.py": [
                {
                    "chunk": {
                        "code": "if not django_templates_instance:\n        errors.append(\n            checks.Error(\n                \"A 'django.template.backends.django.DjangoTemplates' instance \"\n                \"must be configured in TEMPLATES in order to use the admin \"\n                \"application.\",\n                id=\"admin.E403\",\n            )\n        )\n    else:\n        if (\n            \"django.contrib.auth.context_processors.auth\"\n            not in django_templates_instance.context_processors\n            and _contains_subclass(\n                \"django.contrib.auth.backends.ModelBackend\",\n                settings.AUTHENTICATION_BACKENDS,\n            )\n        ):\n            errors.append(\n                checks.Error(\n                    \"'django.contrib.auth.context_processors.auth' must be \"\n                    \"enabled in DjangoTemplates (TEMPLATES) if using the default \"\n                    \"auth backend in order to use the admin application.\",\n                    id=\"admin.E402\",\n                )\n            )\n        if (\n            \"django.contrib.messages.context_processors.messages\"\n            not in django_templates_instance.context_processors\n        ):\n            errors.append(\n                checks.Error(\n                    \"'django.contrib.messages.context_processors.messages' must \"\n                    \"be enabled in DjangoTemplates (TEMPLATES) in order to use \"\n                    \"the admin application.\",\n                    id=\"admin.E404\",\n                )\n            )\n        sidebar_enabled = any(site.enable_nav_sidebar for site in all_sites)\n        if (\n            sidebar_enabled\n            and \"django.template.context_processors.request\"\n            not in django_templates_instance.context_processors\n        ):\n            errors.append(\n                checks.Warning(\n                    \"'django.template.context_processors.request' must be enabled \"\n                    \"in DjangoTemplates (TEMPLATES) in order to use the admin \"\n                    \"navigation sidebar.\",\n                    id=\"admin.W411\",\n                )\n            )\n\n    if not _contains_subclass(\n        \"django.contrib.auth.middleware.AuthenticationMiddleware\", settings.MIDDLEWARE\n    ):\n        errors.append(\n            checks.Error(\n                \"'django.contrib.auth.middleware.AuthenticationMiddleware' must \"\n                \"be in MIDDLEWARE in order to use the admin application.\",\n                id=\"admin.E408\",\n            )\n        )\n    if not _contains_subclass(\n        \"django.contrib.messages.middleware.MessageMiddleware\", settings.MIDDLEWARE\n    ):\n        errors.append(\n            checks.Error(\n                \"'django.contrib.messages.middleware.MessageMiddleware' must \"\n                \"be in MIDDLEWARE in order to use the admin application.\",\n                id=\"admin.E409\",\n            )\n        )",
                        "filename": "django/contrib/admin/checks.py",
                        "start_index": 2624,
                        "end_index": 5479,
                        "start_line": 85,
                        "end_line": 1366,
                        "max_line": 1367,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the system checks for the admin application, including a check for the 'django.template.context_processors.request' which is directly related to the issue."
                }
            ],
            "django/template/context_processors.py": [
                {
                    "chunk": {
                        "code": "\"\"\"\nA set of request processors that return dictionaries to be merged into a\ntemplate context. Each function takes the request object as its only parameter\nand returns a dictionary to add to the context.\n\nThese are referenced from the 'context_processors' option of the configuration\nof a DjangoTemplates backend and used by RequestContext.\n\"\"\"\n\nimport itertools\n\nfrom django.conf import settings\nfrom django.middleware.csrf import get_token\nfrom django.utils.functional import SimpleLazyObject, lazy\n\n\ndef csrf(request):\n    \"\"\"\n    Context processor that provides a CSRF token, or the string 'NOTPROVIDED' if\n    it has not been provided by either a view decorator or the middleware\n    \"\"\"\n\n    def _get_val():\n        token = get_token(request)\n        if token is None:\n            # In order to be able to provide debugging info in the\n            # case of misconfiguration, we use a sentinel value\n            # instead of returning an empty dict.\n            return \"NOTPROVIDED\"\n        else:\n            return token\n\n    return {\"csrf_token\": SimpleLazyObject(_get_val)}\n\n\ndef debug(request):\n    \"\"\"\n    Return context variables helpful for debugging.\n    \"\"\"\n    context_extras = {}\n    if settings.DEBUG and request.META.get(\"REMOTE_ADDR\") in settings.INTERNAL_IPS:\n        context_extras[\"debug\"] = True\n        from django.db import connections\n\n        # Return a lazy reference that computes connection.queries on access,\n        # to ensure it contains queries triggered after this function runs.\n        context_extras[\"sql_queries\"] = lazy(\n            lambda: list(\n                itertools.chain.from_iterable(\n                    connections[x].queries for x in connections\n                )\n            ),\n            list,\n        )\n    return context_extras\n\n\ndef i18n(request):\n    from django.utils import translation\n\n    return {\n        \"LANGUAGES\": settings.LANGUAGES,\n        \"LANGUAGE_CODE\": translation.get_language(),\n        \"LANGUAGE_BIDI\": translation.get_language_bidi(),\n    }\n\n\ndef tz(request):\n    from django.utils import timezone\n\n    return {\"TIME_ZONE\": timezone.get_current_timezone_name()}\n\n\ndef static(request):\n    \"\"\"\n    Add static-related context variables to the context.\n    \"\"\"\n    return {\"STATIC_URL\": settings.STATIC_URL}\n\n\ndef media(request):\n    \"\"\"\n    Add media-related context variables to the context.\n    \"\"\"\n    return {\"MEDIA_URL\": settings.MEDIA_URL}\n\n\ndef request(request):\n    return {\"request\": request}",
                        "filename": "django/template/context_processors.py",
                        "start_index": 0,
                        "end_index": 2479,
                        "start_line": 1,
                        "end_line": 89,
                        "max_line": 89,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet defines the 'request' context processor that adds the 'request' variable to the context, which is the subject of the issue."
                }
            ]
        },
        "solution_task": "- Add a system check to ensure `django.template.context_processors.request` is enabled in the `TEMPLATES` setting for the admin to function correctly.\n- Update the `django/contrib/admin/checks.py` file to include the new check for the `request` context processor.\n- The check should issue a `Warning` if the context processor is not enabled, and later this will be escalated to an `Error` as part of the deprecation path.\n\n```python\n# django/contrib/admin/checks.py\n\nfrom django.core.checks import Warning, register\n\n@register()\ndef check_request_context_processor(app_configs, **kwargs):\n    errors = []\n    if \"django.template.context_processors.request\" not in django_templates_instance.context_processors:\n        errors.append(\n            Warning(\n                \"'django.template.context_processors.request' must be enabled \"\n                \"in DjangoTemplates (TEMPLATES) in order to use the admin application.\",\n                id=\"admin.W412\",\n            )\n        )\n    return errors\n```\n\n- Ensure this check is called during the system checks by adding it to the appropriate list of checks within the `checks.py` file.\n- Update the release notes and admin documentation to reflect the requirement of the `request` context processor for admin templates.\n- Release notes entry:\n\n```markdown\n### Changed\n- Admin templates now require `django.template.context_processors.request` to be enabled. This change is due to commit `d24ba1be7a53a113d19e2860c03aff9922efec24`. A deprecation period is provided where only warnings will be issued.\n```\n\n- Admin documentation update:\n\n```markdown\nEnsure `django.template.context_processors.request` is enabled in your `TEMPLATES` setting to use the `request` variable in admin templates.\n```\n\n- Identify and document the exact rendering features in admin templates that are affected by the absence of the `request` context processor. Include this information in the release notes and admin documentation.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a comprehensive solution to the issue described in the PROMPT. It suggests adding a system check to ensure the 'django.template.context_processors.request' is enabled, which is directly related to the problem. The RESPONSE includes a code snippet for the system check, which is actionable and relevant. It also advises updating the release notes and admin documentation, which is necessary for informing users of the change. Furthermore, the RESPONSE suggests documenting the exact rendering features affected by the absence of the 'request' context processor, which adds value by providing clarity on the impact of the change. The inclusion of links to the relevant code snippets in the Django repository is a helpful addition for developers to reference the exact locations of the code that needs to be reviewed or modified.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711728208.8238342,
        "result": "- Add a system check to ensure `django.template.context_processors.request` is enabled in the `TEMPLATES` setting for the admin to function correctly.\n- Update the `django/contrib/admin/checks.py` file to include the new check for the `request` context processor.\n- The check should issue a `Warning` if the context processor is not enabled, and later this will be escalated to an `Error` as part of the deprecation path.\n\n```python\n# django/contrib/admin/checks.py\n\nfrom django.core.checks import Warning, register\n\n@register()\ndef check_request_context_processor(app_configs, **kwargs):\n    errors = []\n    if \"django.template.context_processors.request\" not in django_templates_instance.context_processors:\n        errors.append(\n            Warning(\n                \"'django.template.context_processors.request' must be enabled \"\n                \"in DjangoTemplates (TEMPLATES) in order to use the admin application.\",\n                id=\"admin.W412\",\n            )\n        )\n    return errors\n```\n\n- Ensure this check is called during the system checks by adding it to the appropriate list of checks within the `checks.py` file.\n- Update the release notes and admin documentation to reflect the requirement of the `request` context processor for admin templates.\n- Release notes entry:\n\n```markdown\n### Changed\n- Admin templates now require `django.template.context_processors.request` to be enabled. This change is due to commit `d24ba1be7a53a113d19e2860c03aff9922efec24`. A deprecation period is provided where only warnings will be issued.\n```\n\n- Admin documentation update:\n\n```markdown\nEnsure `django.template.context_processors.request` is enabled in your `TEMPLATES` setting to use the `request` variable in admin templates.\n```\n\n- Identify and document the exact rendering features in admin templates that are affected by the absence of the `request` context processor. Include this information in the release notes and admin documentation.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__3.2/tree//django) \u2192 [contrib](https://github.com/testbed/django__django__3.2/tree//django/contrib) \u2192 [admin](https://github.com/testbed/django__django__3.2/tree//django/contrib/admin)- [Lines 85 - 1366](https://github.com/testbed/django__django__3.2/blob//django/contrib/admin/checks.py#L85-L1366)\n\n This snippet contains the system checks for the admin application, including a check for the 'django.template.context_processors.request' which is directly related to the issue.\n-  \u2192 [django](https://github.com/testbed/django__django__3.2/tree//django) \u2192 [template](https://github.com/testbed/django__django__3.2/tree//django/template)- [Lines 1 - 89](https://github.com/testbed/django__django__3.2/blob//django/template/context_processors.py#L1-L89)\n\n This snippet defines the 'request' context processor that adds the 'request' variable to the context, which is the subject of the issue.",
        "context_relevance": 0.33,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE must be relevant to the entire PROMPT to get a score of 9 or 10.\nSupporting Evidence: The RESPONSE provides a detailed plan for documenting the requirement of the `django.template.context_processors.request` context processor in the Django admin templates, which is exactly what the PROMPT requests. It includes instructions for adding a system check, updating the admin checks file, and updating both the release notes and admin documentation. Additionally, it provides a code snippet and links to the relevant sections of the Django project where these changes should be made. The RESPONSE is comprehensive and addresses all aspects of the PROMPT, thus earning a score of 10."
        },
        "qa_relevance": 1.0
    }
}