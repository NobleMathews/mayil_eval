{
    "id": "pytest-dev__pytest-8124",
    "repo_name": "testbed/pytest-dev__pytest__6.2",
    "task_id": 4203974009467493551,
    "title": "Allow contibuting additional global variables for skipif/xfail",
    "body": "- [ ] Include documentation when adding new features.\r\n- [x] Include new tests or update existing tests when applicable.\r\n- [X] Allow maintainers to push and squash when merging my commits. Please uncheck this if you prefer to squash the commits yourself.\r\n- [x] Create a new changelog file in the `changelog` folder, with a name like `<ISSUE NUMBER>.<TYPE>.rst`. See [changelog/README.rst](https://github.com/pytest-dev/pytest/blob/master/changelog/README.rst) for details.\r\n\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pytest-dev__pytest__6.2.git",
    "requested_commit": "",
    "mayil_response": "To implement the feature of allowing contributing additional global variables for `skipif`/`xfail` in pytest, you can follow these steps:\n\n- Modify the `pytest` hooks or configuration to accept additional global variables.\n- Update the `pytest.mark.skipif` and `pytest.mark.xfail` decorators to utilize the additional global variables.\n- Ensure that the new global variables are documented, and the documentation is updated accordingly.\n- Write new tests or update existing tests to cover the new functionality.\n- Create a new changelog file in the `changelog` folder following the naming convention `<ISSUE NUMBER>.<TYPE>.rst`.\n\nHere is a high-level overview of the implementation:\n\n1. Extend the pytest configuration to accept additional global variables:\n   ```python\n   # In conftest.py or a similar configuration file\n   def pytest_configure(config):\n       config.addinivalue_line(\"markers\", \"global_variable(name, value): Set a global variable for skipif/xfail conditions\")\n   ```\n\n2. Implement a hook to process the `global_variable` marker and set the variables:\n   ```python\n   # In conftest.py or a similar configuration file\n   def pytest_collection_modifyitems(config, items):\n       for item in items:\n           for marker in item.iter_markers(name=\"global_variable\"):\n               name, value = marker.args\n               globals()[name] = value\n   ```\n\n3. Update the `skipif`/`xfail` logic to use the new global variables:\n   ```python\n   # In the test files\n   @pytest.mark.global_variable('SKIP_CONDITION', True)\n   @pytest.mark.skipif('SKIP_CONDITION', reason=\"Conditionally skipped based on global variable\")\n   def test_example():\n       # test code here\n   ```\n\n4. Update the documentation to explain how to use the new `global_variable` marker.\n\n5. Write or update tests to ensure the new feature works as expected.\n\n6. Create a changelog file in the `changelog` folder with the appropriate issue number and type.\n\nPlease note that the actual implementation may vary depending on the existing codebase and pytest's internal mechanisms. The provided code snippets are for illustration purposes and may require adaptation to fit into the actual codebase.\n\n### Code snippets to check\n\n- - [Lines 73 - 108](https://github.com/testbed/pytest-dev__pytest__6.2/blob//.pre-commit-config.yaml#L73-L108)\n\n This snippet includes the pre-commit hook configuration for changelog filenames, which is relevant to the issue as it involves creating a new changelog file.\n-  \u2192 [scripts](https://github.com/testbed/pytest-dev__pytest__6.2/tree//scripts)- [Lines 87 - 131](https://github.com/testbed/pytest-dev__pytest__6.2/blob//scripts/release.py#L87-L131)\n\n This snippet contains the release script which might need to be updated to handle the creation of a new changelog file as per the issue requirements.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.00021549999999999998,
        "snippet_processor": 0.03931,
        "issue_star_creation": 0.02319,
        "issue_star_solver": 0.03424,
        "bouncer": 0.02556
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711734680.939744,
        "relevant_snippets": [
            {
                "code": "blank_issues_enabled: false\ncontact_links:\n  - name: \u2753 Support Question\n    url: https://github.com/pytest-dev/pytest/discussions\n    about: Use GitHub's new Discussions feature for questions",
                "filename": ".github/ISSUE_TEMPLATE/config.yml",
                "start_index": 0,
                "end_index": 191,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "import pytest\n\nSKIP = True\n\n\n@pytest.mark.parametrize(\"x\", range(5000))\ndef test_foo(x):\n    if SKIP:\n        pytest.skip(\"heh\")",
                "filename": "bench/skip.py",
                "start_index": 0,
                "end_index": 128,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "rtd:\n  project: pytest",
                "filename": ".github/config.yml",
                "start_index": 0,
                "end_index": 22,
                "start_line": 1,
                "end_line": 2,
                "max_line": 2,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "-   repo: local\n    hooks:\n    -   id: rst\n        name: rst\n        entry: rst-lint --encoding utf-8\n        files: ^(RELEASING.rst|README.rst|TIDELIFT.rst)$\n        language: python\n        additional_dependencies: [pygments, restructuredtext_lint]\n    -   id: changelogs-rst\n        name: changelog filenames\n        language: fail\n        entry: 'changelog files must be named ####.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst'\n        exclude: changelog/(\\d+\\.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst|README.rst|_template.rst)\n        files: ^changelog/\n    -   id: py-deprecated\n        name: py library is deprecated\n        language: pygrep\n        entry: >\n            (?x)\\bpy\\.(\n                _code\\.|\n                builtin\\.|\n                code\\.|\n                io\\.|\n                path\\.local\\.sysfind|\n                process\\.|\n                std\\.|\n                error\\.|\n                xml\\.\n            )\n        types: [python]\n    -   id: py-path-deprecated\n        name: py.path usage is deprecated\n        exclude: docs|src/_pytest/deprecated.py|testing/deprecated_test.py|src/_pytest/legacypath.py\n        language: pygrep\n        entry: \\bpy\\.path\\.local\n        types: [python]",
                "filename": ".pre-commit-config.yaml",
                "start_index": 2166,
                "end_index": 3442,
                "start_line": 73,
                "end_line": 108,
                "max_line": 108,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "# shim for pylib going away\n# if pylib is installed this file will get skipped\n# (`py/__init__.py` has higher precedence)\nimport sys\n\nimport _pytest._py.error as error\nimport _pytest._py.path as path\n\nsys.modules[\"py.error\"] = error\nsys.modules[\"py.path\"] = path",
                "filename": "src/py.py",
                "start_index": 0,
                "end_index": 262,
                "start_line": 1,
                "end_line": 10,
                "max_line": 10,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.1
            },
            {
                "code": "# info:\n# * https://help.github.com/en/articles/displaying-a-sponsor-button-in-your-repository\n# * https://tidelift.com/subscription/how-to-connect-tidelift-with-github\ntidelift: pypi/pytest\nopen_collective: pytest",
                "filename": ".github/FUNDING.yml",
                "start_index": 0,
                "end_index": 214,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "-   repo: https://github.com/psf/black\n    rev: 23.7.0\n    hooks:\n    -   id: black\n        args: [--safe, --quiet]\n-   repo: https://github.com/asottile/blacken-docs\n    rev: 1.16.0\n    hooks:\n    -   id: blacken-docs\n        additional_dependencies: [black==23.7.0]\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: fix-encoding-pragma\n        args: [--remove]\n    -   id: check-yaml\n    -   id: debug-statements\n        exclude: _pytest/(debugging|hookspec).py\n        language_version: python3\n-   repo: https://github.com/PyCQA/autoflake\n    rev: v2.2.0\n    hooks:\n    -   id: autoflake\n        name: autoflake\n        args: [\"--in-place\", \"--remove-unused-variables\", \"--remove-all-unused-imports\"]\n        language: python\n        files: \\.py$\n-   repo: https://github.com/PyCQA/flake8\n    rev: 6.1.0\n    hooks:\n    -   id: flake8\n        language_version: python3\n        additional_dependencies:\n          - flake8-typing-imports==1.12.0\n          - flake8-docstrings==1.5.0\n-   repo: https://github.com/asottile/reorder-python-imports\n    rev: v3.10.0\n    hooks:\n    -   id: reorder-python-imports\n        args: ['--application-directories=.:src', --py38-plus]\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v3.10.1\n    hooks:\n    -   id: pyupgrade\n        args: [--py38-plus]\n-   repo: https://github.com/asottile/setup-cfg-fmt\n    rev: v2.4.0\n    hooks:\n    -   id: setup-cfg-fmt\n        args: [\"--max-py-version=3.12\", \"--include-version-classifiers\"]\n-   repo: https://github.com/pre-commit/pygrep-hooks\n    rev: v1.10.0\n    hooks:\n    -   id: python-use-type-annotations\n-   repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.5.1\n    hooks:\n    -   id: mypy\n        files: ^(src/|testing/)\n        args: []\n        additional_dependencies:\n          - iniconfig>=1.1.0\n          - attrs>=19.2.0\n          - packaging\n          - tomli\n          - types-pkg_resources\n            # for mypy running on python>=3.11 since exceptiongroup is only a dependency\n            # on <3.11\n          - exceptiongroup>=1.0.0rc8",
                "filename": ".pre-commit-config.yaml",
                "start_index": 7,
                "end_index": 2165,
                "start_line": 2,
                "end_line": 72,
                "max_line": 108,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def pre_release(version, template_name, doc_version, *, skip_check_links):\n    \"\"\"Generates new docs, release announcements and creates a local tag.\"\"\"\n    announce(version, template_name, doc_version)\n    regen(version)\n    changelog(version, write_out=True)\n    fix_formatting()\n    if not skip_check_links:\n        check_links()\n\n    msg = f\"Prepare release version {version}\"\n    check_call([\"git\", \"commit\", \"-a\", \"-m\", msg])\n\n    print()\n    print(f\"{Fore.CYAN}[generate.pre_release] {Fore.GREEN}All done!\")\n    print()\n    print(\"Please push your branch and open a PR.\")\n\n\ndef changelog(version, write_out=False):\n    addopts = [] if write_out else [\"--draft\"]\n    check_call([\"towncrier\", \"--yes\", \"--version\", version] + addopts)\n\n\ndef main():\n    init(autoreset=True)\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"version\", help=\"Release version\")\n    parser.add_argument(\n        \"template_name\", help=\"Name of template file to use for release announcement\"\n    )\n    parser.add_argument(\n        \"doc_version\", help=\"For prereleases, the version to link to in the docs\"\n    )\n    parser.add_argument(\"--skip-check-links\", action=\"store_true\", default=False)\n    options = parser.parse_args()\n    pre_release(\n        options.version,\n        options.template_name,\n        options.doc_version,\n        skip_check_links=options.skip_check_links,\n    )\n\n\nif __name__ == \"__main__\":\n    main()",
                "filename": "scripts/release.py",
                "start_index": 2952,
                "end_index": 4372,
                "start_line": 87,
                "end_line": 131,
                "max_line": 131,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "version: 2\nupdates:\n- package-ecosystem: pip\n  directory: \"/testing/plugins_integration\"\n  schedule:\n    interval: weekly\n    time: \"03:00\"\n  open-pull-requests-limit: 10\n  allow:\n  - dependency-type: direct\n  - dependency-type: indirect\n- package-ecosystem: github-actions\n  directory: /\n  schedule:\n    interval: weekly\n    time: \"03:00\"\n  open-pull-requests-limit: 10",
                "filename": ".github/dependabot.yml",
                "start_index": 0,
                "end_index": 370,
                "start_line": 1,
                "end_line": 17,
                "max_line": 17,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "import pytest\n\n\n@pytest.fixture(scope=\"module\", params=range(966))\ndef foo(request):\n    return request.param\n\n\ndef test_it(foo):\n    pass\n\n\ndef test_it2(foo):\n    pass",
                "filename": "bench/manyparam.py",
                "start_index": 0,
                "end_index": 168,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": "",
                "context_relevance": 0.2
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            ".pre-commit-config.yaml": [
                {
                    "chunk": {
                        "code": "-   repo: local\n    hooks:\n    -   id: rst\n        name: rst\n        entry: rst-lint --encoding utf-8\n        files: ^(RELEASING.rst|README.rst|TIDELIFT.rst)$\n        language: python\n        additional_dependencies: [pygments, restructuredtext_lint]\n    -   id: changelogs-rst\n        name: changelog filenames\n        language: fail\n        entry: 'changelog files must be named ####.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst'\n        exclude: changelog/(\\d+\\.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst|README.rst|_template.rst)\n        files: ^changelog/\n    -   id: py-deprecated\n        name: py library is deprecated\n        language: pygrep\n        entry: >\n            (?x)\\bpy\\.(\n                _code\\.|\n                builtin\\.|\n                code\\.|\n                io\\.|\n                path\\.local\\.sysfind|\n                process\\.|\n                std\\.|\n                error\\.|\n                xml\\.\n            )\n        types: [python]\n    -   id: py-path-deprecated\n        name: py.path usage is deprecated\n        exclude: docs|src/_pytest/deprecated.py|testing/deprecated_test.py|src/_pytest/legacypath.py\n        language: pygrep\n        entry: \\bpy\\.path\\.local\n        types: [python]",
                        "filename": ".pre-commit-config.yaml",
                        "start_index": 2166,
                        "end_index": 3442,
                        "start_line": 73,
                        "end_line": 108,
                        "max_line": 108,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__6.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet includes the pre-commit hook configuration for changelog filenames, which is relevant to the issue as it involves creating a new changelog file."
                }
            ],
            "scripts/release.py": [
                {
                    "chunk": {
                        "code": "def pre_release(version, template_name, doc_version, *, skip_check_links):\n    \"\"\"Generates new docs, release announcements and creates a local tag.\"\"\"\n    announce(version, template_name, doc_version)\n    regen(version)\n    changelog(version, write_out=True)\n    fix_formatting()\n    if not skip_check_links:\n        check_links()\n\n    msg = f\"Prepare release version {version}\"\n    check_call([\"git\", \"commit\", \"-a\", \"-m\", msg])\n\n    print()\n    print(f\"{Fore.CYAN}[generate.pre_release] {Fore.GREEN}All done!\")\n    print()\n    print(\"Please push your branch and open a PR.\")\n\n\ndef changelog(version, write_out=False):\n    addopts = [] if write_out else [\"--draft\"]\n    check_call([\"towncrier\", \"--yes\", \"--version\", version] + addopts)\n\n\ndef main():\n    init(autoreset=True)\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"version\", help=\"Release version\")\n    parser.add_argument(\n        \"template_name\", help=\"Name of template file to use for release announcement\"\n    )\n    parser.add_argument(\n        \"doc_version\", help=\"For prereleases, the version to link to in the docs\"\n    )\n    parser.add_argument(\"--skip-check-links\", action=\"store_true\", default=False)\n    options = parser.parse_args()\n    pre_release(\n        options.version,\n        options.template_name,\n        options.doc_version,\n        skip_check_links=options.skip_check_links,\n    )\n\n\nif __name__ == \"__main__\":\n    main()",
                        "filename": "scripts/release.py",
                        "start_index": 2952,
                        "end_index": 4372,
                        "start_line": 87,
                        "end_line": 131,
                        "max_line": 131,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__6.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the release script which might need to be updated to handle the creation of a new changelog file as per the issue requirements."
                }
            ]
        },
        "solution_task": "To implement the feature of allowing contributing additional global variables for `skipif`/`xfail` in pytest, you can follow these steps:\n\n- Modify the `pytest` hooks or configuration to accept additional global variables.\n- Update the `pytest.mark.skipif` and `pytest.mark.xfail` decorators to utilize the additional global variables.\n- Ensure that the new global variables are documented, and the documentation is updated accordingly.\n- Write new tests or update existing tests to cover the new functionality.\n- Create a new changelog file in the `changelog` folder following the naming convention `<ISSUE NUMBER>.<TYPE>.rst`.\n\nHere is a high-level overview of the implementation:\n\n1. Extend the pytest configuration to accept additional global variables:\n   ```python\n   # In conftest.py or a similar configuration file\n   def pytest_configure(config):\n       config.addinivalue_line(\"markers\", \"global_variable(name, value): Set a global variable for skipif/xfail conditions\")\n   ```\n\n2. Implement a hook to process the `global_variable` marker and set the variables:\n   ```python\n   # In conftest.py or a similar configuration file\n   def pytest_collection_modifyitems(config, items):\n       for item in items:\n           for marker in item.iter_markers(name=\"global_variable\"):\n               name, value = marker.args\n               globals()[name] = value\n   ```\n\n3. Update the `skipif`/`xfail` logic to use the new global variables:\n   ```python\n   # In the test files\n   @pytest.mark.global_variable('SKIP_CONDITION', True)\n   @pytest.mark.skipif('SKIP_CONDITION', reason=\"Conditionally skipped based on global variable\")\n   def test_example():\n       # test code here\n   ```\n\n4. Update the documentation to explain how to use the new `global_variable` marker.\n\n5. Write or update tests to ensure the new feature works as expected.\n\n6. Create a changelog file in the `changelog` folder with the appropriate issue number and type.\n\nPlease note that the actual implementation may vary depending on the existing codebase and pytest's internal mechanisms. The provided code snippets are for illustration purposes and may require adaptation to fit into the actual codebase.",
        "bouncer_response": {
            "score": 9,
            "criteria": "RESPONSE must provide precise, actionable guidance and directly address all aspects of the described feature request to facilitate its successful implementation or improvement.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable step-by-step guide to implement the feature of contributing additional global variables for `skipif`/`xfail` in pytest. It addresses the need to modify hooks and configuration, update decorators, document the changes, write new tests, and create a changelog file. The RESPONSE also includes code snippets for a clearer understanding of the implementation, which is highly relevant to the feature request. The inclusion of links to specific code snippets in the pytest repository is an added value, as it directs the developer to potentially relevant areas of the codebase that may need attention in relation to the feature. The RESPONSE does not explicitly mention the checkbox item about allowing maintainers to push and squash when merging commits, but this is a procedural step rather than a technical implementation detail, which is why the RESPONSE scores a 9 instead of a 10.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711734747.152423,
        "result": "To implement the feature of allowing contributing additional global variables for `skipif`/`xfail` in pytest, you can follow these steps:\n\n- Modify the `pytest` hooks or configuration to accept additional global variables.\n- Update the `pytest.mark.skipif` and `pytest.mark.xfail` decorators to utilize the additional global variables.\n- Ensure that the new global variables are documented, and the documentation is updated accordingly.\n- Write new tests or update existing tests to cover the new functionality.\n- Create a new changelog file in the `changelog` folder following the naming convention `<ISSUE NUMBER>.<TYPE>.rst`.\n\nHere is a high-level overview of the implementation:\n\n1. Extend the pytest configuration to accept additional global variables:\n   ```python\n   # In conftest.py or a similar configuration file\n   def pytest_configure(config):\n       config.addinivalue_line(\"markers\", \"global_variable(name, value): Set a global variable for skipif/xfail conditions\")\n   ```\n\n2. Implement a hook to process the `global_variable` marker and set the variables:\n   ```python\n   # In conftest.py or a similar configuration file\n   def pytest_collection_modifyitems(config, items):\n       for item in items:\n           for marker in item.iter_markers(name=\"global_variable\"):\n               name, value = marker.args\n               globals()[name] = value\n   ```\n\n3. Update the `skipif`/`xfail` logic to use the new global variables:\n   ```python\n   # In the test files\n   @pytest.mark.global_variable('SKIP_CONDITION', True)\n   @pytest.mark.skipif('SKIP_CONDITION', reason=\"Conditionally skipped based on global variable\")\n   def test_example():\n       # test code here\n   ```\n\n4. Update the documentation to explain how to use the new `global_variable` marker.\n\n5. Write or update tests to ensure the new feature works as expected.\n\n6. Create a changelog file in the `changelog` folder with the appropriate issue number and type.\n\nPlease note that the actual implementation may vary depending on the existing codebase and pytest's internal mechanisms. The provided code snippets are for illustration purposes and may require adaptation to fit into the actual codebase.\n\n### Code snippets to check\n\n- - [Lines 73 - 108](https://github.com/testbed/pytest-dev__pytest__6.2/blob//.pre-commit-config.yaml#L73-L108)\n\n This snippet includes the pre-commit hook configuration for changelog filenames, which is relevant to the issue as it involves creating a new changelog file.\n-  \u2192 [scripts](https://github.com/testbed/pytest-dev__pytest__6.2/tree//scripts)- [Lines 87 - 131](https://github.com/testbed/pytest-dev__pytest__6.2/blob//scripts/release.py#L87-L131)\n\n This snippet contains the release script which might need to be updated to handle the creation of a new changelog file as per the issue requirements.",
        "context_relevance": 0.13,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE is relevant to the entire PROMPT and answers the PROMPT completely.\nSupporting Evidence: The RESPONSE provides a detailed step-by-step guide on how to implement the feature of contributing additional global variables for `skipif`/`xfail` in pytest, which is the main focus of the PROMPT. It addresses the checklist items by mentioning the need to update documentation, include new tests or update existing ones, and create a new changelog file. Additionally, it provides relevant code snippets and even includes a section on checking the code snippets, which directly relates to the checklist items marked in the PROMPT. The RESPONSE is comprehensive and covers all aspects of the PROMPT, thus earning a score of 10."
        },
        "qa_relevance": 1.0
    }
}