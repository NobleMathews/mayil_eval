{
    "id": "pylint-dev__pylint-8312",
    "repo_name": "testbed/pylint-dev__pylint__2.17",
    "task_id": 6341405146602015522,
    "title": "Support globbing pattern for input specification",
    "body": "### Current problem\r\n\r\nAs mentioned in https://github.com/PyCQA/pylint/pull/8281#issuecomment-1434375681 and https://github.com/PyCQA/pylint/issues/8290#issuecomment-1429340178, lets consider supporting `pylint --recursive=y packages/*/src`\r\n\r\ncc @Pierre-Sassoulas @DudeNr33 @DanielNoord \r\n\r\n### Desired solution\r\n\r\nAdd globbing support right in this line\r\nhttps://github.com/PyCQA/pylint/blob/dca394035268a234b29d0c103a4fcc201c84061f/pylint/config/config_initialization.py#L123\r\n\r\n### Additional context\r\n\r\n_No response_\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pylint-dev__pylint__2.17.git",
    "requested_commit": "",
    "mayil_response": "To implement globbing pattern support for input specification in Pylint, you can follow these steps:\n\n- Modify the `config_initialization.py` file where the command-line arguments are processed.\n- Locate the line mentioned in the feature request (around line 123 or the relevant section where input files are handled).\n- Use the `glob` module from Python's standard library to expand the glob patterns provided by the user.\n- Replace the current handling of the input paths with a version that supports globbing.\n\nHere's a high-level overview of the changes needed:\n\n```python\n# config_initialization.py\n\n# Import the glob module\nimport glob\n\n# ... other imports ...\n\ndef preprocess_options(args):\n    # ... existing code ...\n\n    # Find the index or the argument name where input files are specified\n    # This is a placeholder, you need to find the actual argument\n    input_files_arg_index = args.index('--recursive')\n\n    # Use glob to expand the patterns\n    expanded_paths = []\n    for path in args[input_files_arg_index + 1].split(','):\n        expanded_paths.extend(glob.glob(path))\n\n    # Replace the original argument with expanded paths\n    args[input_files_arg_index + 1] = ','.join(expanded_paths)\n\n    # ... continue with the existing processing of options ...\n```\n\n- Ensure that the expanded paths are correctly passed to the rest of the application where the files are actually loaded and analyzed.\n- Add tests to verify that the globbing functionality works as expected, including edge cases and different operating systems if applicable.\n- Update the documentation to inform users about the new feature and how to use it.\n\nRemember to handle cases where the glob pattern does not match any files and decide whether to issue a warning or an error in such scenarios. Also, consider the security implications of allowing glob patterns, especially if the tool is used in a context where the input could be provided by untrusted sources.\n\n### Code snippets to check\n\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint) \u2192 [config](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint/config)- [Lines 1 - 23](https://github.com/testbed/pylint-dev__pylint__2.17/blob//pylint/config/config_initialization.py#L1-L23)\n\n This file contains the initialization of the pylint configuration, which is likely where the globbing support needs to be added or modified.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint/lint)- [Lines 1 - 69](https://github.com/testbed/pylint-dev__pylint__2.17/blob//pylint/lint/expand_modules.py#L1-L69)\n\n This file deals with module expansion and might be relevant if the globbing pattern affects how modules are discovered and processed.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint/lint)- [Lines 3 - 595](https://github.com/testbed/pylint-dev__pylint__2.17/blob//pylint/lint/base_options.py#L3-L595)\n\n This file defines command-line options for pylint, including 'source-roots' which supports globbing patterns. It may need to be reviewed to ensure consistency with the new globbing feature.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.00040649999999999996,
        "snippet_processor": 0.041080000000000005,
        "issue_star_creation": 0.029019999999999997,
        "issue_star_solver": 0.045970000000000004,
        "bouncer": 0.0244
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711699651.419146,
        "relevant_snippets": [
            {
                "code": "name: \u2728 Feature request\ndescription: Suggest an idea for pylint\nlabels: [\"Needs triage :inbox_tray:\"]\nbody:\n  - type: markdown\n    attributes:\n      value: |\n        **Thank you for wanting to make a suggestion for pylint!**\n\n        \u26a0 Please make sure that [this feature wasn't already requested][issue search] or already implemented in the main branch.\n\n\n        [issue search]: https://github.com/pylint-dev/pylint/issues?q=is%3Aissue+is%3Aopen+\n\n  - type: textarea\n    id: current-problem\n    attributes:\n      label: Current problem\n      description:\n        What are you trying to do, that you are unable to achieve with pylint as it\n        currently stands?\n      placeholder: >-\n        I'm trying to do X and I'm missing feature Y for this to be easily achievable.\n    validations:\n      required: true\n  - type: textarea\n    id: proposed-solution\n    attributes:\n      label: Desired solution\n      description: A clear and concise description of what you want to happen.\n      placeholder: >-\n        When I do X, I want to achieve Y in a situation when Z.\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: Additional context\n      description: >\n        Add any other context, links, etc. about the feature here. Describe how the\n        feature would be used, why it is needed and what it would solve.\n\n        **HINT:** You can paste https://gist.github.com links for larger files.\n      placeholder: >-\n        I asked on https://stackoverflow.com/... and the community advised me to do X, Y\n        and Z.",
                "filename": ".github/ISSUE_TEMPLATE/FEATURE-REQUEST.yml",
                "start_index": 0,
                "end_index": 1559,
                "start_line": 1,
                "end_line": 45,
                "max_line": 45,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "name: \ud83e\udd14 Support question\ndescription: Questions about pylint that are not covered in the documentation\nlabels: [\"Needs triage :inbox_tray:\", \"Question\", \"Documentation :green_book:\"]\nbody:\n  - type: markdown\n    attributes:\n      value: >\n        **Thank you for wanting to report a problem with pylint documentation!**\n\n\n        Please fill out your suggestions below. If the problem seems straightforward,\n        feel free to go ahead and submit a pull request instead!\n\n\n        \u26a0 Verify first that your issue is not [already reported on GitHub][issue\n        search].\n\n        \ud83d\udcac If you are seeking community support, please consider [starting a discussion\n        on Discord][Discussions].\n\n\n        [issue search]:\n        https://github.com/pylint-dev/pylint/issues?q=is%3Aissue+is%3Aopen+\n\n        [Discussions]: https://discord.com/invite/Egy6P8AMB5\n\n  - type: textarea\n    id: question\n    attributes:\n      label: Question\n    validations:\n      required: true\n  - type: textarea\n    id: documentation\n    attributes:\n      label: Documentation for future user\n      description:\n        Where did you expect this information to be? What do we need to add or what do\n        we need to reorganize?\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: Additional context\n      description: >\n        Add any other context, links, etc. about the question here.\n      placeholder: >-\n        I asked on https://stackoverflow.com/... and the community advised me to do X, Y\n        and Z.",
                "filename": ".github/ISSUE_TEMPLATE/QUESTION.yml",
                "start_index": 0,
                "end_index": 1528,
                "start_line": 1,
                "end_line": 49,
                "max_line": 49,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "(\n        \"source-roots\",\n        {\n            \"type\": \"glob_paths_csv\",\n            \"metavar\": \"<path>[,<path>...]\",\n            \"default\": (),\n            \"help\": \"Add paths to the list of the source roots. Supports globbing patterns. The \"\n            \"source root is an absolute path or a path relative to the current working directory \"\n            \"used to determine a package namespace for modules located under the source root.\",\n        },\n    ),\n)",
                "filename": "pylint/pyreverse/main.py",
                "start_index": 7026,
                "end_index": 7484,
                "start_line": 3,
                "end_line": 313,
                "max_line": 313,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 0.8
            },
            {
                "code": "\"https://github.com/pylint-dev/pylint/pull/4942\":",
                "filename": "pylint/message/_deleted_message_ids.py",
                "start_index": 576,
                "end_index": 625,
                "start_line": 21,
                "end_line": 21,
                "max_line": 179,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 0.1
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nimport os\nimport sys\nfrom collections.abc import Sequence\nfrom re import Pattern\n\nfrom astroid import modutils\n\nfrom pylint.typing import ErrorDescriptionDict, ModuleDescriptionDict\n\n\ndef _modpath_from_file(filename: str, is_namespace: bool, path: list[str]) -> list[str]:\n    def _is_package_cb(inner_path: str, parts: list[str]) -> bool:\n        return modutils.check_modpath_has_init(inner_path, parts) or is_namespace\n\n    return modutils.modpath_from_file_with_callback(  # type: ignore[no-any-return]\n        filename, path=path, is_package_cb=_is_package_cb\n    )\n\n\ndef discover_package_path(modulepath: str, source_roots: Sequence[str]) -> str:\n    \"\"\"Discover package path from one its modules and source roots.\"\"\"\n    dirname = os.path.realpath(os.path.expanduser(modulepath))\n    if not os.path.isdir(dirname):\n        dirname = os.path.dirname(dirname)\n\n    # Look for a source root that contains the module directory\n    for source_root in source_roots:\n        source_root = os.path.realpath(os.path.expanduser(source_root))\n        if os.path.commonpath([source_root, dirname]) == source_root:\n            return source_root\n\n    # Fall back to legacy discovery by looking for __init__.py upwards as\n    # it's the only way given that source root was not found or was not provided\n    while True:\n        if not os.path.exists(os.path.join(dirname, \"__init__.py\")):\n            return dirname\n        old_dirname = dirname\n        dirname = os.path.dirname(dirname)\n        if old_dirname == dirname:\n            return os.getcwd()\n\n\ndef _is_in_ignore_list_re(element: str, ignore_list_re: list[Pattern[str]]) -> bool:\n    \"\"\"Determines if the element is matched in a regex ignore-list.\"\"\"\n    return any(file_pattern.match(element) for file_pattern in ignore_list_re)\n\n\ndef _is_ignored_file(\n    element: str,\n    ignore_list: list[str],\n    ignore_list_re: list[Pattern[str]],\n    ignore_list_paths_re: list[Pattern[str]],\n) -> bool:\n    element = os.path.normpath(element)\n    basename = os.path.basename(element)\n    return (\n        basename in ignore_list\n        or _is_in_ignore_list_re(basename, ignore_list_re)\n        or _is_in_ignore_list_re(element, ignore_list_paths_re)\n    )\n\n\n# pylint: disable = too-many-locals, too-many-statements",
                "filename": "pylint/lint/expand_modules.py",
                "start_index": 0,
                "end_index": 2532,
                "start_line": 1,
                "end_line": 69,
                "max_line": 169,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nimport sys\nimport warnings\nfrom glob import glob\nfrom itertools import chain\nfrom pathlib import Path\nfrom typing import TYPE_CHECKING\n\nfrom pylint import reporters\nfrom pylint.config.config_file_parser import _ConfigurationFileParser\nfrom pylint.config.exceptions import (\n    ArgumentPreprocessingError,\n    _UnrecognizedOptionError,\n)\nfrom pylint.utils import utils\n\nif TYPE_CHECKING:\n    from pylint.lint import PyLinter",
                "filename": "pylint/config/config_initialization.py",
                "start_index": 0,
                "end_index": 692,
                "start_line": 1,
                "end_line": 23,
                "max_line": 201,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nimport configparser\nimport os\nimport sys\nfrom collections.abc import Iterator\nfrom pathlib import Path\n\nif sys.version_info >= (3, 11):\n    import tomllib\nelse:\n    import tomli as tomllib\n\nRC_NAMES = (Path(\"pylintrc\"), Path(\".pylintrc\"))\nPYPROJECT_NAME = Path(\"pyproject.toml\")\nCONFIG_NAMES = (*RC_NAMES, PYPROJECT_NAME, Path(\"setup.cfg\"))\n\n\ndef _find_pyproject() -> Path:\n    \"\"\"Search for file pyproject.toml in the parent directories recursively.\n\n    It resolves symlinks, so if there is any symlink up in the tree, it does not respect them\n    \"\"\"\n    current_dir = Path.cwd().resolve()\n    is_root = False\n    while not is_root:\n        if (current_dir / PYPROJECT_NAME).is_file():\n            return current_dir / PYPROJECT_NAME\n        is_root = (\n            current_dir == current_dir.parent\n            or (current_dir / \".git\").is_dir()\n            or (current_dir / \".hg\").is_dir()\n        )\n        current_dir = current_dir.parent\n\n    return current_dir\n\n\ndef _toml_has_config(path: Path | str) -> bool:\n    with open(path, mode=\"rb\") as toml_handle:\n        try:\n            content = tomllib.load(toml_handle)\n        except tomllib.TOMLDecodeError as error:\n            print(f\"Failed to load '{path}': {error}\")\n            return False\n    return \"pylint\" in content.get(\"tool\", [])\n\n\ndef _cfg_has_config(path: Path | str) -> bool:\n    parser = configparser.ConfigParser()\n    try:\n        parser.read(path, encoding=\"utf-8\")\n    except configparser.Error:\n        return False\n    return any(section.startswith(\"pylint.\") for section in parser.sections())\n\n\ndef _yield_default_files() -> Iterator[Path]:\n    \"\"\"Iterate over the default config file names and see if they exist.\"\"\"\n    for config_name in CONFIG_NAMES:\n        try:\n            if config_name.is_file():\n                if config_name.suffix == \".toml\" and not _toml_has_config(config_name):\n                    continue\n                if config_name.suffix == \".cfg\" and not _cfg_has_config(config_name):\n                    continue\n\n                yield config_name.resolve()\n        except OSError:\n            pass\n\n\ndef _find_project_config() -> Iterator[Path]:\n    \"\"\"Traverse up the directory tree to find a config file.\n\n    Stop if no '__init__' is found and thus we are no longer in a package.\n    \"\"\"\n    if Path(\"__init__.py\").is_file():\n        curdir = Path(os.getcwd()).resolve()\n        while (curdir / \"__init__.py\").is_file():\n            curdir = curdir.parent\n            for rc_name in RC_NAMES:\n                rc_path = curdir / rc_name\n                if rc_path.is_file():\n                    yield rc_path.resolve()",
                "filename": "pylint/config/find_default_config_files.py",
                "start_index": 0,
                "end_index": 2899,
                "start_line": 1,
                "end_line": 89,
                "max_line": 139,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "(\n            \"from-stdin\",\n            {\n                \"action\": \"store_true\",\n                \"default\": False,\n                \"metavar\": \"<flag>\",\n                \"help\": (\n                    \"Interpret the stdin as a python script, whose filename \"\n                    \"needs to be passed as the module_or_package argument.\"\n                ),\n            },\n        ),\n        (\n            \"source-roots\",\n            {\n                \"type\": \"glob_paths_csv\",\n                \"metavar\": \"<path>[,<path>...]\",\n                \"default\": (),\n                \"help\": \"Add paths to the list of the source roots. Supports globbing patterns. \"\n                \"The source root is an absolute path or a path relative to the current working \"\n                \"directory used to determine a package namespace for modules located under the \"\n                \"source root.\",\n            },\n        ),\n        (\n            \"recursive\",\n            {\n                \"type\": \"yn\",\n                \"metavar\": \"<yn>\",\n                \"default\": False,\n                \"help\": \"Discover python modules and packages in the file system subtree.\",\n            },\n        ),\n        (\n            \"py-version\",\n            {\n                \"default\": sys.version_info[:2],\n                \"type\": \"py_version\",\n                \"metavar\": \"<py_version>\",\n                \"help\": (\n                    \"Minimum Python version to use for version dependent checks. \"\n                    \"Will default to the version used to run pylint.\"\n                ),\n            },\n        ),\n        (\n            \"ignored-modules\",\n            {\n                \"default\": (),\n                \"type\": \"csv\",\n                \"metavar\": \"<module names>\",\n                \"help\": \"List of module names for which member attributes \"\n                \"should not be checked (useful for modules/projects \"\n                \"where namespaces are manipulated during runtime and \"\n                \"thus existing member attributes cannot be \"\n                \"deduced by static analysis). It supports qualified \"\n                \"module names, as well as Unix pattern matching.\",\n            },\n        ),\n        (\n            \"analyse-fallback-blocks\",\n            {\n                \"default\": False,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Analyse import fallback blocks. This can be used to \"\n                \"support both Python 2 and 3 compatible code, which \"\n                \"means that the block might have code that exists \"\n                \"only in one or another interpreter, leading to false \"\n                \"positives when analysed.\",\n            },\n        ),",
                "filename": "pylint/lint/base_options.py",
                "start_index": 12453,
                "end_index": 15152,
                "start_line": 3,
                "end_line": 595,
                "max_line": 596,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 0.8
            },
            {
                "code": "(\n            \"allow-wildcard-with-all\",\n            {\n                \"default\": False,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Allow wildcard imports from modules that define __all__.\",\n            },\n        ),\n        (\n            \"allow-reexport-from-package\",\n            {\n                \"default\": False,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Allow explicit reexports by alias from a package __init__.\",\n            },\n        ),\n    )",
                "filename": "pylint/checkers/imports.py",
                "start_index": 14088,
                "end_index": 14643,
                "start_line": 3,
                "end_line": 1098,
                "max_line": 1102,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt",
                "filename": "script/__init__.py",
                "start_index": 0,
                "end_index": 230,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.17",
                "sha": "",
                "context_relevance": 0.2
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "pylint/config/config_initialization.py": [
                {
                    "chunk": {
                        "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nimport sys\nimport warnings\nfrom glob import glob\nfrom itertools import chain\nfrom pathlib import Path\nfrom typing import TYPE_CHECKING\n\nfrom pylint import reporters\nfrom pylint.config.config_file_parser import _ConfigurationFileParser\nfrom pylint.config.exceptions import (\n    ArgumentPreprocessingError,\n    _UnrecognizedOptionError,\n)\nfrom pylint.utils import utils\n\nif TYPE_CHECKING:\n    from pylint.lint import PyLinter",
                        "filename": "pylint/config/config_initialization.py",
                        "start_index": 0,
                        "end_index": 692,
                        "start_line": 1,
                        "end_line": 23,
                        "max_line": 201,
                        "git_instance": "github",
                        "repo_name": "testbed/pylint-dev__pylint__2.17",
                        "sha": ""
                    },
                    "reason_for_relevance": "This file contains the initialization of the pylint configuration, which is likely where the globbing support needs to be added or modified."
                }
            ],
            "pylint/lint/expand_modules.py": [
                {
                    "chunk": {
                        "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nimport os\nimport sys\nfrom collections.abc import Sequence\nfrom re import Pattern\n\nfrom astroid import modutils\n\nfrom pylint.typing import ErrorDescriptionDict, ModuleDescriptionDict\n\n\ndef _modpath_from_file(filename: str, is_namespace: bool, path: list[str]) -> list[str]:\n    def _is_package_cb(inner_path: str, parts: list[str]) -> bool:\n        return modutils.check_modpath_has_init(inner_path, parts) or is_namespace\n\n    return modutils.modpath_from_file_with_callback(  # type: ignore[no-any-return]\n        filename, path=path, is_package_cb=_is_package_cb\n    )\n\n\ndef discover_package_path(modulepath: str, source_roots: Sequence[str]) -> str:\n    \"\"\"Discover package path from one its modules and source roots.\"\"\"\n    dirname = os.path.realpath(os.path.expanduser(modulepath))\n    if not os.path.isdir(dirname):\n        dirname = os.path.dirname(dirname)\n\n    # Look for a source root that contains the module directory\n    for source_root in source_roots:\n        source_root = os.path.realpath(os.path.expanduser(source_root))\n        if os.path.commonpath([source_root, dirname]) == source_root:\n            return source_root\n\n    # Fall back to legacy discovery by looking for __init__.py upwards as\n    # it's the only way given that source root was not found or was not provided\n    while True:\n        if not os.path.exists(os.path.join(dirname, \"__init__.py\")):\n            return dirname\n        old_dirname = dirname\n        dirname = os.path.dirname(dirname)\n        if old_dirname == dirname:\n            return os.getcwd()\n\n\ndef _is_in_ignore_list_re(element: str, ignore_list_re: list[Pattern[str]]) -> bool:\n    \"\"\"Determines if the element is matched in a regex ignore-list.\"\"\"\n    return any(file_pattern.match(element) for file_pattern in ignore_list_re)\n\n\ndef _is_ignored_file(\n    element: str,\n    ignore_list: list[str],\n    ignore_list_re: list[Pattern[str]],\n    ignore_list_paths_re: list[Pattern[str]],\n) -> bool:\n    element = os.path.normpath(element)\n    basename = os.path.basename(element)\n    return (\n        basename in ignore_list\n        or _is_in_ignore_list_re(basename, ignore_list_re)\n        or _is_in_ignore_list_re(element, ignore_list_paths_re)\n    )\n\n\n# pylint: disable = too-many-locals, too-many-statements",
                        "filename": "pylint/lint/expand_modules.py",
                        "start_index": 0,
                        "end_index": 2532,
                        "start_line": 1,
                        "end_line": 69,
                        "max_line": 169,
                        "git_instance": "github",
                        "repo_name": "testbed/pylint-dev__pylint__2.17",
                        "sha": ""
                    },
                    "reason_for_relevance": "This file deals with module expansion and might be relevant if the globbing pattern affects how modules are discovered and processed."
                }
            ],
            "pylint/lint/base_options.py": [
                {
                    "chunk": {
                        "code": "(\n            \"from-stdin\",\n            {\n                \"action\": \"store_true\",\n                \"default\": False,\n                \"metavar\": \"<flag>\",\n                \"help\": (\n                    \"Interpret the stdin as a python script, whose filename \"\n                    \"needs to be passed as the module_or_package argument.\"\n                ),\n            },\n        ),\n        (\n            \"source-roots\",\n            {\n                \"type\": \"glob_paths_csv\",\n                \"metavar\": \"<path>[,<path>...]\",\n                \"default\": (),\n                \"help\": \"Add paths to the list of the source roots. Supports globbing patterns. \"\n                \"The source root is an absolute path or a path relative to the current working \"\n                \"directory used to determine a package namespace for modules located under the \"\n                \"source root.\",\n            },\n        ),\n        (\n            \"recursive\",\n            {\n                \"type\": \"yn\",\n                \"metavar\": \"<yn>\",\n                \"default\": False,\n                \"help\": \"Discover python modules and packages in the file system subtree.\",\n            },\n        ),\n        (\n            \"py-version\",\n            {\n                \"default\": sys.version_info[:2],\n                \"type\": \"py_version\",\n                \"metavar\": \"<py_version>\",\n                \"help\": (\n                    \"Minimum Python version to use for version dependent checks. \"\n                    \"Will default to the version used to run pylint.\"\n                ),\n            },\n        ),\n        (\n            \"ignored-modules\",\n            {\n                \"default\": (),\n                \"type\": \"csv\",\n                \"metavar\": \"<module names>\",\n                \"help\": \"List of module names for which member attributes \"\n                \"should not be checked (useful for modules/projects \"\n                \"where namespaces are manipulated during runtime and \"\n                \"thus existing member attributes cannot be \"\n                \"deduced by static analysis). It supports qualified \"\n                \"module names, as well as Unix pattern matching.\",\n            },\n        ),\n        (\n            \"analyse-fallback-blocks\",\n            {\n                \"default\": False,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Analyse import fallback blocks. This can be used to \"\n                \"support both Python 2 and 3 compatible code, which \"\n                \"means that the block might have code that exists \"\n                \"only in one or another interpreter, leading to false \"\n                \"positives when analysed.\",\n            },\n        ),",
                        "filename": "pylint/lint/base_options.py",
                        "start_index": 12453,
                        "end_index": 15152,
                        "start_line": 3,
                        "end_line": 595,
                        "max_line": 596,
                        "git_instance": "github",
                        "repo_name": "testbed/pylint-dev__pylint__2.17",
                        "sha": ""
                    },
                    "reason_for_relevance": "This file defines command-line options for pylint, including 'source-roots' which supports globbing patterns. It may need to be reviewed to ensure consistency with the new globbing feature."
                }
            ]
        },
        "solution_task": "To implement globbing pattern support for input specification in Pylint, you can follow these steps:\n\n- Modify the `config_initialization.py` file where the command-line arguments are processed.\n- Locate the line mentioned in the feature request (around line 123 or the relevant section where input files are handled).\n- Use the `glob` module from Python's standard library to expand the glob patterns provided by the user.\n- Replace the current handling of the input paths with a version that supports globbing.\n\nHere's a high-level overview of the changes needed:\n\n```python\n# config_initialization.py\n\n# Import the glob module\nimport glob\n\n# ... other imports ...\n\ndef preprocess_options(args):\n    # ... existing code ...\n\n    # Find the index or the argument name where input files are specified\n    # This is a placeholder, you need to find the actual argument\n    input_files_arg_index = args.index('--recursive')\n\n    # Use glob to expand the patterns\n    expanded_paths = []\n    for path in args[input_files_arg_index + 1].split(','):\n        expanded_paths.extend(glob.glob(path))\n\n    # Replace the original argument with expanded paths\n    args[input_files_arg_index + 1] = ','.join(expanded_paths)\n\n    # ... continue with the existing processing of options ...\n```\n\n- Ensure that the expanded paths are correctly passed to the rest of the application where the files are actually loaded and analyzed.\n- Add tests to verify that the globbing functionality works as expected, including edge cases and different operating systems if applicable.\n- Update the documentation to inform users about the new feature and how to use it.\n\nRemember to handle cases where the glob pattern does not match any files and decide whether to issue a warning or an error in such scenarios. Also, consider the security implications of allowing glob patterns, especially if the tool is used in a context where the input could be provided by untrusted sources.",
        "bouncer_response": {
            "score": 7,
            "criteria": "The RESPONSE must provide actionable, relevant guidance to more parts of the PROMPT's described issue to score higher.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable step-by-step guide on how to implement globbing pattern support for input specification in Pylint. It suggests modifying the `config_initialization.py` file, using the `glob` module, and provides a high-level overview of the changes needed, including a code snippet. The RESPONSE also advises on handling edge cases, security implications, and updating documentation. However, it does not address the specific line of code mentioned in the PROMPT, which could be crucial for the exact implementation. Additionally, the RESPONSE assumes the use of the `--recursive` argument, which is not mentioned in the PROMPT, and it does not provide guidance on integrating the new functionality with the existing codebase beyond the preprocessing of options.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711699722.207687,
        "result": "To implement globbing pattern support for input specification in Pylint, you can follow these steps:\n\n- Modify the `config_initialization.py` file where the command-line arguments are processed.\n- Locate the line mentioned in the feature request (around line 123 or the relevant section where input files are handled).\n- Use the `glob` module from Python's standard library to expand the glob patterns provided by the user.\n- Replace the current handling of the input paths with a version that supports globbing.\n\nHere's a high-level overview of the changes needed:\n\n```python\n# config_initialization.py\n\n# Import the glob module\nimport glob\n\n# ... other imports ...\n\ndef preprocess_options(args):\n    # ... existing code ...\n\n    # Find the index or the argument name where input files are specified\n    # This is a placeholder, you need to find the actual argument\n    input_files_arg_index = args.index('--recursive')\n\n    # Use glob to expand the patterns\n    expanded_paths = []\n    for path in args[input_files_arg_index + 1].split(','):\n        expanded_paths.extend(glob.glob(path))\n\n    # Replace the original argument with expanded paths\n    args[input_files_arg_index + 1] = ','.join(expanded_paths)\n\n    # ... continue with the existing processing of options ...\n```\n\n- Ensure that the expanded paths are correctly passed to the rest of the application where the files are actually loaded and analyzed.\n- Add tests to verify that the globbing functionality works as expected, including edge cases and different operating systems if applicable.\n- Update the documentation to inform users about the new feature and how to use it.\n\nRemember to handle cases where the glob pattern does not match any files and decide whether to issue a warning or an error in such scenarios. Also, consider the security implications of allowing glob patterns, especially if the tool is used in a context where the input could be provided by untrusted sources.\n\n### Code snippets to check\n\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint) \u2192 [config](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint/config)- [Lines 1 - 23](https://github.com/testbed/pylint-dev__pylint__2.17/blob//pylint/config/config_initialization.py#L1-L23)\n\n This file contains the initialization of the pylint configuration, which is likely where the globbing support needs to be added or modified.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint/lint)- [Lines 1 - 69](https://github.com/testbed/pylint-dev__pylint__2.17/blob//pylint/lint/expand_modules.py#L1-L69)\n\n This file deals with module expansion and might be relevant if the globbing pattern affects how modules are discovered and processed.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__2.17/tree//pylint/lint)- [Lines 3 - 595](https://github.com/testbed/pylint-dev__pylint__2.17/blob//pylint/lint/base_options.py#L3-L595)\n\n This file defines command-line options for pylint, including 'source-roots' which supports globbing patterns. It may need to be reviewed to ensure consistency with the new globbing feature.",
        "context_relevance": 0.4700000000000001,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE is relevant and answers the entire PROMPT completely.\nSupporting Evidence: The RESPONSE provides a detailed explanation of how to implement globbing pattern support for input specification in Pylint, directly addressing the \"Current problem\" and \"Desired solution\" sections of the PROMPT. It also includes a code snippet that is relevant to the line mentioned in the PROMPT, demonstrating a clear understanding of the task at hand. Additionally, the RESPONSE provides guidance on further steps such as testing, documentation, and security considerations, which are pertinent to the \"Additional context\" section. The RESPONSE is comprehensive and fully relevant to the entire PROMPT."
        },
        "qa_relevance": 1.0
    }
}