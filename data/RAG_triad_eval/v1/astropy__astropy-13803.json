{
    "id": "astropy__astropy-13803",
    "repo_name": "testbed/astropy__astropy__5.0",
    "task_id": 861962744823218654,
    "title": "float32 representation of pi/2 is rejected by `Latitude`",
    "body": "<!-- This comments are hidden when you submit the issue,\r\nso you do not need to remove them! -->\r\n\r\n<!-- Please be sure to check out our contributing guidelines,\r\nhttps://github.com/astropy/astropy/blob/main/CONTRIBUTING.md .\r\nPlease be sure to check out our code of conduct,\r\nhttps://github.com/astropy/astropy/blob/main/CODE_OF_CONDUCT.md . -->\r\n\r\n<!-- Please have a search on our GitHub repository to see if a similar\r\nissue has already been posted.\r\nIf a similar issue is closed, have a quick look to see if you are satisfied\r\nby the resolution.\r\nIf not please go ahead and open an issue! -->\r\n\r\n<!-- Please check that the development version still produces the same bug.\r\nYou can install development version with\r\npip install git+https://github.com/astropy/astropy\r\ncommand. -->\r\n\r\n### Description\r\n\r\nThe closest float32 value to pi/2 is by accident slightly larger than pi/2:\r\n\r\n```\r\nIn [5]: np.pi/2\r\nOut[5]: 1.5707963267948966\r\n\r\nIn [6]: np.float32(np.pi/2)\r\nOut[6]: 1.5707964\r\n```\r\n\r\nAstropy checks using float64 precision, rejecting \"valid\" alt values (e.g. float32 values read from files):\r\n\r\n```\r\n\r\nIn [1]: from astropy.coordinates import Latitude\r\n\r\nIn [2]: import numpy as np\r\n\r\nIn [3]: lat = np.float32(np.pi/2)\r\n\r\nIn [4]: Latitude(lat, 'rad')\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\nCell In [4], line 1\r\n----> 1 Latitude(lat, 'rad')\r\n\r\nFile ~/.local/lib/python3.10/site-packages/astropy/coordinates/angles.py:564, in Latitude.__new__(cls, angle, unit, **kwargs)\r\n    562     raise TypeError(\"A Latitude angle cannot be created from a Longitude angle\")\r\n    563 self = super().__new__(cls, angle, unit=unit, **kwargs)\r\n--> 564 self._validate_angles()\r\n    565 return self\r\n\r\nFile ~/.local/lib/python3.10/site-packages/astropy/coordinates/angles.py:585, in Latitude._validate_angles(self, angles)\r\n    582     invalid_angles = (np.any(angles.value < lower) or\r\n    583                       np.any(angles.value > upper))\r\n    584 if invalid_angles:\r\n--> 585     raise ValueError('Latitude angle(s) must be within -90 deg <= angle <= 90 deg, '\r\n    586                      'got {}'.format(angles.to(u.degree)))\r\n\r\nValueError: Latitude angle(s) must be within -90 deg <= angle <= 90 deg, got 90.00000250447816 deg\r\n```\r\n\r\n### Expected behavior\r\n\r\nBe lenient? E.g. only make the comparison up to float 32 precision?\r\n\r\n### Actual behavior\r\nSee error above\r\n\r\n### Steps to Reproduce\r\n\r\nSee snippet above.\r\n\r\n### System Details\r\n<!-- Even if you do not think this is necessary, it is useful information for the maintainers.\r\nPlease run the following snippet and paste the output below:\r\nimport platform; print(platform.platform())\r\nimport sys; print(\"Python\", sys.version)\r\nimport numpy; print(\"Numpy\", numpy.__version__)\r\nimport erfa; print(\"pyerfa\", erfa.__version__)\r\nimport astropy; print(\"astropy\", astropy.__version__)\r\nimport scipy; print(\"Scipy\", scipy.__version__)\r\nimport matplotlib; print(\"Matplotlib\", matplotlib.__version__)\r\n-->\r\n```\r\nLinux-5.15.65-1-MANJARO-x86_64-with-glibc2.36\r\nPython 3.10.7 (main, Sep  6 2022, 21:22:27) [GCC 12.2.0]\r\nNumpy 1.23.3\r\npyerfa 2.0.0.1\r\nastropy 5.0.1\r\nScipy 1.9.1\r\nMatplotlib 3.5.2\r\n```\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/astropy__astropy__5.0.git",
    "requested_commit": "",
    "mayil_response": "Based on the provided information, the issue seems to be related to the validation of latitude angles when using `float32` representation of `pi/2`. The error message indicates that the angle is out of the valid range for latitude, which is between -90 and 90 degrees. The relevant code snippet is from `astropy/coordinates/angles.py` where the `_validate_angles` method is defined.\n\nTo address the issue:\n\n- Implement a tolerance level for floating-point comparisons in the `_validate_angles` method to account for precision differences in `float32`.\n- Use `np.isclose` with a suitable tolerance instead of direct comparison when checking angle limits.\n\nHere is the proposed solution:\n\n```python\nclass Latitude(Angle):\n    # ... existing code ...\n\n    def _validate_angles(self):\n        # ... existing code ...\n\n        # Define a tolerance for floating-point comparison\n        tolerance = 1e-7  # Adjust the tolerance as needed\n\n        if angles.unit is u.deg:\n            limit = 90\n        elif angles.unit is u.rad:\n            limit = 0.5 * np.pi\n        else:\n            limit = u.degree.to(angles.unit, 90.0)\n\n        angles_view = angles.view(np.ndarray)[np.newaxis]\n\n        # Use np.isclose with a tolerance for comparison\n        invalid_angles = np.any(np.less(angles_view, -limit, where=~np.isclose(angles_view, -limit, atol=tolerance))) or \\\n                         np.any(np.greater(angles_view, limit, where=~np.isclose(angles_view, limit, atol=tolerance)))\n\n        if invalid_angles:\n            raise ValueError(\n                \"Latitude angle(s) must be within -90 deg <= angle <= 90 deg, \"\n                f\"got {angles.to(u.degree)}\"\n            )\n```\n\nThis solution introduces a tolerance level for the comparison of angles to the limits, which should help to avoid false positives when validating angles that are very close to the limits due to floating-point precision issues. Adjust the `tolerance` value as needed based on the precision requirements of the application.\n\n### Code snippets to check\n\n-  \u2192 [astropy](https://github.com/testbed/astropy__astropy__5.0/tree//astropy) \u2192 [coordinates](https://github.com/testbed/astropy__astropy__5.0/tree//astropy/coordinates)- [Lines 542 - 591](https://github.com/testbed/astropy__astropy__5.0/blob//astropy/coordinates/angles.py#L542-L591)\n\n This snippet contains the _validate_angles method which raises the ValueError when the latitude angle is outside the valid range. The issue describes a problem with float32 precision in this validation, so this code is directly related to the issue.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0020169999999999997,
        "snippet_processor": 0.10021000000000001,
        "issue_star_creation": 0.02848,
        "issue_star_solver": 0.06717000000000001,
        "bouncer": 0.03083
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711736378.792786,
        "relevant_snippets": [
            {
                "code": "_angles(self, angles=None):\n        \"\"\"Check that angles are between -90 and 90 degrees.\n        If not given, the check is done on the object itself.\n        \"\"\"\n        # Convert the lower and upper bounds to the \"native\" unit of\n        # this angle.  This limits multiplication to two values,\n        # rather than the N values in `self.value`.  Also, the\n        # comparison is performed on raw arrays, rather than Quantity\n        # objects, for speed.\n        if angles is None:\n            angles = self\n\n        # For speed, compare using \"is\", which is not strictly guaranteed to hold,\n        # but if it doesn't we'll just convert correctly in the 'else' clause.\n        if angles.unit is u.deg:\n            limit = 90\n        elif angles.unit is u.rad:\n            limit = 0.5 * np.pi\n        else:\n            limit = u.degree.to(angles.unit, 90.0)\n\n        # Ensure ndim>=1 so that comparison is done using the angle dtype.\n        # Otherwise, e.g., np.array(np.pi/2, 'f4') > np.pi/2 will yield True.\n        # (This feels like a bug -- see https://github.com/numpy/numpy/issues/23247)\n        # Note that we should avoid using `angles.dtype` directly since for\n        # structured arrays like Distribution this will be `void`.\n        angles_view = angles.view(np.ndarray)[np.newaxis]\n        invalid_angles = np.any(angles_view < -limit) or np.any(angles_view > limit)\n        if invalid_angles:\n            raise ValueError(\n                \"Latitude angle(s) must be within -90 deg <= angle <= 90 deg, \"\n                f\"got {angles.to(u.degree)}\"\n            )\n\n    def __setitem__(self, item, value):\n        # Forbid assigning a Long to a Lat.\n        if isinstance(value, Longitude):\n            raise TypeError(\"A Longitude angle cannot be assigned to a Latitude angle\")\n        # first check bounds\n        if value is not np.ma.masked:\n            self._validate_angles(value)\n        super().__setitem__(item, value)\n\n    # Any calculation should drop to Angle\n    def __array_ufunc__(self, *args, **kwargs):\n        results = super().__array_ufunc__(*args, **kwargs)\n        return _no_angle_subclass(results)\n\n\nclass LongitudeI",
                "filename": "astropy/coordinates/angles.py",
                "start_index": 20434,
                "end_index": 22594,
                "start_line": 542,
                "end_line": 591,
                "max_line": 688,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.0",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\n\nimport numpy as np\nfrom matplotlib.lines import Path\n\nfrom astropy.coordinates.angle_utilities import angular_separation\n\n# Tolerance for WCS round-tripping, relative to the scale size\nROUND_TRIP_RTOL = 1.0\n\n# Tolerance for discontinuities relative to the median\nDISCONT_FACTOR = 10.0",
                "filename": "astropy/visualization/wcsaxes/grid_paths.py",
                "start_index": 0,
                "end_index": 350,
                "start_line": 1,
                "end_line": 13,
                "max_line": 124,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "de-like angle(s) which must be in the range -90 to +90 deg.\n\n    A Latitude object is distinguished from a pure\n    :class:`~astropy.coordinates.Angle` by virtue of being constrained\n    so that::\n\n      -90.0 * u.deg <= angle(s) <= +90.0 * u.deg\n\n    Any attempt to set a value outside that range will result in a\n    `ValueError`.\n\n    The input angle(s) can be specified either as an array, list,\n    scalar, tuple (see below), string,\n    :class:`~astropy.units.Quantity` or another\n    :class:`~astropy.coordinates.Angle`.\n\n    The input parser is flexible and supports all of the input formats\n    supported by :class:`~astropy.coordinates.Angle`.\n\n    Parameters\n    ----------\n    angle : array, list, scalar, `~astropy.units.Quantity`, `~astropy.coordinates.Angle`\n        The angle value(s). If a tuple, will be interpreted as ``(h, m, s)``\n        or ``(d, m, s)`` depending on ``unit``. If a string, it will be\n        interpreted following the rules described for\n        :class:`~astropy.coordinates.Angle`.\n\n        If ``angle`` is a sequence or array of strings, the resulting\n        values will be in the given ``unit``, or if `None` is provided,\n        the unit will be taken from the first given value.\n\n    unit : unit-like, optional\n        The unit of the value specified for the angle.  This may be\n        any string that `~astropy.units.Unit` understands, but it is\n        better to give an actual unit object.  Must be an angular\n        unit.\n\n    Raises\n    ------\n    `~astropy.units.UnitsError`\n        If a unit is not provided or it is not an angular unit.\n    `TypeError`\n        If the angle parameter is an instance of :class:`~astropy.coordinates.Longitude`.\n    \"\"\"\n\n    def __new__(cls, angle, unit=None, **kwargs):\n        # Forbid creating a Lat from a Long.\n        if isinstance(angle, Longitude):\n            raise TypeError(\"A Latitude angle cannot be created from a Longitude angle\")\n        self = super().__new__(cls, angle, unit=unit, **kwargs)\n        self._validate_angles()\n        return self\n\n    def _validate",
                "filename": "astropy/coordinates/angles.py",
                "start_index": 18368,
                "end_index": 20434,
                "start_line": 489,
                "end_line": 542,
                "max_line": 688,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.0",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\n\nimport warnings\n\nimport numpy as np\n\nfrom astropy import units as u\nfrom astropy.utils.exceptions import AstropyDeprecationWarning\n\n# Algorithm inspired by PGSBOX from WCSLIB by M. Calabretta\n\nLONLAT = {\"longitude\", \"latitude\"}\n\n\ndef wrap_180(values):\n    values_new = values % 360.0\n    with np.errstate(invalid=\"ignore\"):\n        values_new[values_new > 180.0] -= 360\n    return values_new",
                "filename": "astropy/visualization/wcsaxes/coordinate_range.py",
                "start_index": 0,
                "end_index": 457,
                "start_line": 1,
                "end_line": 20,
                "max_line": 147,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "hrs):\n    \"\"\"\n    Checks that the given value is in the range (-24, 24).\n    \"\"\"\n    if np.any(np.abs(hrs) == 24.0):\n        warn(IllegalHourWarning(hrs, \"Treating as 24 hr\"))\n    elif np.any(hrs < -24.0) or np.any(hrs > 24.0):\n        raise IllegalHourError(hrs)\n\n\ndef _check_minute_range(m):\n    \"\"\"\n    Checks that the given value is in the range [0,60].  If the value\n    is equal to 60, then a warning is raised.\n    \"\"\"\n    if np.any(m == 60.0):\n        warn(IllegalMinuteWarning(m, \"Treating as 0 min, +1 hr/deg\"))\n    elif np.any(m < -60.0) or np.any(m > 60.0):\n        # \"Error: minutes not in range [-60,60) ({0}).\".format(min))\n        raise IllegalMinuteError(m)\n\n\ndef _check_second_range(sec):\n    \"\"\"\n    Checks that the given value is in the range [0,60].  If the value\n    is equal to 60, then a warning is raised.\n    \"\"\"\n    if np.any(sec == 60.0):\n        warn(IllegalSecondWarning(sec, \"Treating as 0 sec, +1 min\"))\n    elif sec is None:\n        pass\n    elif np.any(sec < -60.0) or np.any(sec > 60.0):\n        # \"Error: seconds not in range [-60,60) ({0}).\".format(sec))\n        raise IllegalSecondError(sec)\n\n\ndef check_hms_ranges(h, m, s):\n    \"\"\"\n    Checks that the given hour, minute and second are all within\n    reasonable range.\n    \"\"\"\n    _check_hour_range(h)\n    _check_minute_range(m)\n    _check_second_range(s)\n\n\ndef parse_angle(angle, unit=None, debug=False):\n    \"\"\"\n    Parses an input string value into an angle value.\n\n    Parameters\n    ----------\n    angle : str\n        A string representing the angle.  May be in one of the following forms:\n\n            * 01:02:30.43 degrees\n            * 1 2 0 hours\n            * 1\u00b02\u20323\u2033\n            * 1d2m3s\n            * -1h2m3s\n\n    unit : `~astropy.units.UnitBase` instance, optional\n        The unit used to interpret the string.  If ``unit`` is not\n        provided, the unit must be explicitly represented in the\n        string, either at the end or as number separators.\n\n    debug : bool, optional\n        If `True`, print debugging information from the parser.\n\n    Returns\n    -------\n    value, unit : tuple\n        ``value`` is the value as a floating point number or three-part\n        tuple, and ``unit`` is a `Unit` instance which is either the\n        unit passed in or the one explicitly mentioned in the input\n        string.\n    \"\"\"\n    return _AngleParser().parse(angle, unit, debug=debug)\n\n\ndef degrees_to_dms(d):\n    \"\"\"\n    Convert a floating-point degree value into a ``(degree, arcminute,\n    arcsecond)`` tuple.\n    \"\"\"\n    sign = np.copysign(1.0, d)\n\n    (df, d) = np.modf(np.abs(d))  # (degree fraction, degree)\n    (mf, m) = np.modf(df * 60.0)  # (minute fraction, minute)\n    s = mf * 60.0\n\n    return np.floor(sign * d), sign * np.floor(m), sign * s\n\n\ndef hours_to_decimal(h):\n    \"\"\"\n    Convert any parseable hour value into a float value.\n    \"\"\"\n    from . import angles\n\n    return angles.Angle(h, unit=u.hourangle).hour\n\n\ndef hours_to_radians(h):",
                "filename": "astropy/coordinates/angle_formats.py",
                "start_index": 9334,
                "end_index": 12296,
                "start_line": 321,
                "end_line": 424,
                "max_line": 590,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "class E11(VOWarning, ValueError):\n    \"\"\"\n    The precision attribute is meant to express the number of significant\n    digits, either as a number of decimal places (e.g. ``precision=\"F2\"`` or\n    equivalently ``precision=\"2\"`` to express 2 significant figures\n    after the decimal point), or as a number of significant figures\n    (e.g. ``precision=\"E5\"`` indicates a relative precision of 10-5).\n\n    It is validated using the following regular expression::\n\n        [EF]?[1-9][0-9]*\n\n    **References**: `1.1\n    <http://www.ivoa.net/documents/VOTable/20040811/REC-VOTable-1.1-20040811.html#sec:form>`__,\n    `1.2\n    <http://www.ivoa.net/documents/VOTable/20091130/REC-VOTable-1.2.html#sec:form>`__\n    \"\"\"\n\n    message_template = \"precision '{}' is invalid\"\n    default_args = (\"x\",)\n\n\nclass E12(VOWarning, ValueError):\n    \"\"\"\n    The width attribute is meant to indicate to the application the\n    number of characters to be used for input or output of the\n    quantity.\n\n    **References**: `1.1\n    <http://www.ivoa.net/documents/VOTable/20040811/REC-VOTable-1.1-20040811.html#sec:form>`__,\n    `1.2\n    <http://www.ivoa.net/documents/VOTable/20091130/REC-VOTable-1.2.html#sec:form>`__\n    \"\"\"\n\n    message_template = \"width must be a positive integer, got '{}'\"\n    default_args = (\"x\",)",
                "filename": "astropy/io/votable/exceptions.py",
                "start_index": 41421,
                "end_index": 42719,
                "start_line": 1305,
                "end_line": 1504,
                "max_line": 1569,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.0",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "name: Bug report\ndescription: Create a report describing unexpected or incorrect behavior in astropy.\nlabels: Bug\nbody:\n  - type: markdown\n    attributes:\n      value: >-\n        Thanks for taking the time to fill out this bug report!\n        Please have a search on our GitHub repository to see if a similar\n        issue has already been posted. If a similar issue is closed, have a\n        quick look to see if you are satisfied by the resolution.\n        If not please go ahead and open an issue!\n        Please check that the\n        [development version](https://docs.astropy.org/en/latest/development/workflow/get_devel_version.html)\n        still produces the same bug.\n  - type: textarea\n    attributes:\n      label: Description\n      description: >-\n        A clear and concise description of what the bug is.\n  - type: textarea\n    attributes:\n      label: Expected behavior\n      description: >-\n        A clear and concise description of what you expected to happen.\n  - type: textarea\n    attributes:\n      label: How to Reproduce\n      description: >-\n        A clear and concise description of what actually happened instead.\n        Was the output confusing or poorly described? Please provide steps to reproduce this bug.\n      value: |\n        1. Get package from '...'\n        2. Then run '...'\n        3. An error occurs.\n\n        ```python\n        # Put your Python code snippet here.\n        ```\n  - type: textarea\n    attributes:\n      label: Versions\n      description: Version of relevant packages.\n      value: |\n        import platform; print(platform.platform())\n        import sys; print(\"Python\", sys.version)\n        import astropy; print(\"astropy\", astropy.__version__)\n        import numpy; print(\"Numpy\", numpy.__version__)\n        import erfa; print(\"pyerfa\", erfa.__version__)\n        import scipy; print(\"Scipy\", scipy.__version__)\n        import matplotlib; print(\"Matplotlib\", matplotlib.__version__)",
                "filename": ".github/ISSUE_TEMPLATE/bug_report.yaml",
                "start_index": 0,
                "end_index": 1940,
                "start_line": 1,
                "end_line": 51,
                "max_line": 51,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.0",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "__(self, item, value):\n        # Forbid assigning a Lat to a Long.\n        if isinstance(value, Latitude):\n            raise TypeError(\"A Latitude angle cannot be assigned to a Longitude angle\")\n        super().__setitem__(item, value)\n        self._wrap_at(self.wrap_angle)\n\n    @property\n    def wrap_angle(self):\n        return self._wrap_angle\n\n    @wrap_angle.setter\n    def wrap_angle(self, value):\n        self._wrap_angle = Angle(value, copy=False)\n        self._wrap_at(self.wrap_angle)\n\n    def __array_finalize__(self, obj):\n        super().__array_finalize__(obj)\n        self._wrap_angle = getattr(obj, \"_wrap_angle\", self._default_wrap_angle)\n\n    # Any calculation should drop to Angle\n    def __array_ufunc__(self, *args, **kwargs):\n        results = super().__array_ufunc__(*args, **kwargs)\n        return _no_angle_subclass(results)",
                "filename": "astropy/coordinates/angles.py",
                "start_index": 25672,
                "end_index": 26522,
                "start_line": 576,
                "end_line": 688,
                "max_line": 688,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\n\"\"\"\nThis module contains the fundamental classes used for representing\ncoordinates in astropy.\n\"\"\"\n\nimport functools\nfrom collections import namedtuple\n\nimport numpy as np\n\nfrom astropy import units as u\nfrom astropy.utils import isiterable\n\nfrom . import angle_formats as form\n\n__all__ = [\"Angle\", \"Latitude\", \"Longitude\"]\n\n\n# these are used by the `hms` and `dms` attributes\nhms_tuple = namedtuple(\"hms_tuple\", (\"h\", \"m\", \"s\"))\ndms_tuple = namedtuple(\"dms_tuple\", (\"d\", \"m\", \"s\"))\nsigned_dms_tuple = namedtuple(\"signed_dms_tuple\", (\"sign\", \"d\", \"m\", \"s\"))",
                "filename": "astropy/coordinates/angles.py",
                "start_index": 0,
                "end_index": 622,
                "start_line": 1,
                "end_line": 24,
                "max_line": 688,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.0",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "class W30(VOTableSpecWarning):\n    \"\"\"\n    Some VOTable files write missing floating-point values in non-standard ways,\n    such as \"null\" and \"-\".  If ``verify`` is not ``'exception'``, any\n    non-standard floating-point literals are treated as missing values.\n\n    **References**: `1.1\n    <http://www.ivoa.net/documents/VOTable/20040811/REC-VOTable-1.1-20040811.html#sec:datatypes>`__,\n    `1.2\n    <http://www.ivoa.net/documents/VOTable/20091130/REC-VOTable-1.2.html#sec:datatypes>`__\n    \"\"\"\n\n    message_template = \"Invalid literal for float '{}'.  Treating as empty.\"\n    default_args = (\"x\",)\n\n\nclass W31(VOTableSpecWarning):\n    \"\"\"\n    Since NaN's can not be represented in integer fields directly, a null\n    value must be specified in the FIELD descriptor to support reading\n    NaN's from the tabledata.\n\n    **References**: `1.1\n    <http://www.ivoa.net/documents/VOTable/20040811/REC-VOTable-1.1-20040811.html#sec:datatypes>`__,\n    `1.2\n    <http://www.ivoa.net/documents/VOTable/20091130/REC-VOTable-1.2.html#sec:datatypes>`__\n    \"\"\"\n\n    message_template = \"NaN given in an integral field without a specified null value\"\n\n\nclass W32(VOTableSpecWarning):\n    \"\"\"\n    Each field in a table must have a unique ID.  If two or more fields\n    have the same ID, some will be renamed to ensure that all IDs are\n    unique.\n\n    From the VOTable 1.2 spec:\n\n        The ``ID`` and ``ref`` attributes are defined as XML types\n        ``ID`` and ``IDREF`` respectively. This means that the\n        contents of ``ID`` is an identifier which must be unique\n        throughout a VOTable document, and that the contents of the\n        ``ref`` attribute represents a reference to an identifier\n        which must exist in the VOTable document.\n\n    **References**: `1.1\n    <http://www.ivoa.net/documents/VOTable/20040811/REC-VOTable-1.1-20040811.html#sec:name>`__,\n    `1.2\n    <http://www.ivoa.net/documents/VOTable/20091130/REC-VOTable-1.2.html#sec:name>`__\n    \"\"\"\n\n    message_template = \"Duplicate ID '{}' renamed to '{}' to ensure uniqueness\"\n    default_args = (\"x\", \"x_2\")\n\n\nclass W33(VOTableChangeWarning):\n    \"\"\"\n    Each field in a table must have a unique name.  If two or more\n    fields have the same name, some will be renamed to ensure that all\n    names are unique.\n\n    **References**: `1.1\n    <http://www.ivoa.net/documents/VOTable/20040811/REC-VOTable-1.1-20040811.html#sec:name>`__,\n    `1.2\n    <http://www.ivoa.net/documents/VOTable/20091130/REC-VOTable-1.2.html#sec:name>`__\n    \"\"\"\n\n    message_template = \"Column name '{}' renamed to '{}' to ensure uniqueness\"\n    default_args = (\"x\", \"x_2\")\n\n\nclass W34(VOTableSpecWarning):\n    \"\"\"\n    The attribute requires the value to be a valid XML token, as\n    defined by `XML 1.0\n    <http://www.w3.org/TR/2000/WD-xml-2e-20000814#NT-Nmtoken>`__.\n    \"\"\"\n\n    message_template = \"'{}' is an invalid token for attribute '{}'\"\n    default_args = (\"x\", \"y\")",
                "filename": "astropy/io/votable/exceptions.py",
                "start_index": 25082,
                "end_index": 28011,
                "start_line": 770,
                "end_line": 1481,
                "max_line": 1569,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.0",
                "sha": "",
                "context_relevance": 0.0
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "astropy/coordinates/angles.py": [
                {
                    "chunk": {
                        "code": "_angles(self, angles=None):\n        \"\"\"Check that angles are between -90 and 90 degrees.\n        If not given, the check is done on the object itself.\n        \"\"\"\n        # Convert the lower and upper bounds to the \"native\" unit of\n        # this angle.  This limits multiplication to two values,\n        # rather than the N values in `self.value`.  Also, the\n        # comparison is performed on raw arrays, rather than Quantity\n        # objects, for speed.\n        if angles is None:\n            angles = self\n\n        # For speed, compare using \"is\", which is not strictly guaranteed to hold,\n        # but if it doesn't we'll just convert correctly in the 'else' clause.\n        if angles.unit is u.deg:\n            limit = 90\n        elif angles.unit is u.rad:\n            limit = 0.5 * np.pi\n        else:\n            limit = u.degree.to(angles.unit, 90.0)\n\n        # Ensure ndim>=1 so that comparison is done using the angle dtype.\n        # Otherwise, e.g., np.array(np.pi/2, 'f4') > np.pi/2 will yield True.\n        # (This feels like a bug -- see https://github.com/numpy/numpy/issues/23247)\n        # Note that we should avoid using `angles.dtype` directly since for\n        # structured arrays like Distribution this will be `void`.\n        angles_view = angles.view(np.ndarray)[np.newaxis]\n        invalid_angles = np.any(angles_view < -limit) or np.any(angles_view > limit)\n        if invalid_angles:\n            raise ValueError(\n                \"Latitude angle(s) must be within -90 deg <= angle <= 90 deg, \"\n                f\"got {angles.to(u.degree)}\"\n            )\n\n    def __setitem__(self, item, value):\n        # Forbid assigning a Long to a Lat.\n        if isinstance(value, Longitude):\n            raise TypeError(\"A Longitude angle cannot be assigned to a Latitude angle\")\n        # first check bounds\n        if value is not np.ma.masked:\n            self._validate_angles(value)\n        super().__setitem__(item, value)\n\n    # Any calculation should drop to Angle\n    def __array_ufunc__(self, *args, **kwargs):\n        results = super().__array_ufunc__(*args, **kwargs)\n        return _no_angle_subclass(results)\n\n\nclass LongitudeI",
                        "filename": "astropy/coordinates/angles.py",
                        "start_index": 20434,
                        "end_index": 22594,
                        "start_line": 542,
                        "end_line": 591,
                        "max_line": 688,
                        "git_instance": "github",
                        "repo_name": "testbed/astropy__astropy__5.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the _validate_angles method which raises the ValueError when the latitude angle is outside the valid range. The issue describes a problem with float32 precision in this validation, so this code is directly related to the issue."
                }
            ]
        },
        "solution_task": "Based on the provided information, the issue seems to be related to the validation of latitude angles when using `float32` representation of `pi/2`. The error message indicates that the angle is out of the valid range for latitude, which is between -90 and 90 degrees. The relevant code snippet is from `astropy/coordinates/angles.py` where the `_validate_angles` method is defined.\n\nTo address the issue:\n\n- Implement a tolerance level for floating-point comparisons in the `_validate_angles` method to account for precision differences in `float32`.\n- Use `np.isclose` with a suitable tolerance instead of direct comparison when checking angle limits.\n\nHere is the proposed solution:\n\n```python\nclass Latitude(Angle):\n    # ... existing code ...\n\n    def _validate_angles(self):\n        # ... existing code ...\n\n        # Define a tolerance for floating-point comparison\n        tolerance = 1e-7  # Adjust the tolerance as needed\n\n        if angles.unit is u.deg:\n            limit = 90\n        elif angles.unit is u.rad:\n            limit = 0.5 * np.pi\n        else:\n            limit = u.degree.to(angles.unit, 90.0)\n\n        angles_view = angles.view(np.ndarray)[np.newaxis]\n\n        # Use np.isclose with a tolerance for comparison\n        invalid_angles = np.any(np.less(angles_view, -limit, where=~np.isclose(angles_view, -limit, atol=tolerance))) or \\\n                         np.any(np.greater(angles_view, limit, where=~np.isclose(angles_view, limit, atol=tolerance)))\n\n        if invalid_angles:\n            raise ValueError(\n                \"Latitude angle(s) must be within -90 deg <= angle <= 90 deg, \"\n                f\"got {angles.to(u.degree)}\"\n            )\n```\n\nThis solution introduces a tolerance level for the comparison of angles to the limits, which should help to avoid false positives when validating angles that are very close to the limits due to floating-point precision issues. Adjust the `tolerance` value as needed based on the precision requirements of the application.",
        "bouncer_response": {
            "score": 8,
            "criteria": "The RESPONSE must provide actionable, relevant guidance to more parts of the PROMPT's described issue to score higher.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable solution to the problem described in the PROMPT. It suggests implementing a tolerance level for floating-point comparisons in the `_validate_angles` method and using `np.isclose` with a suitable tolerance instead of direct comparison. This directly addresses the issue of the `Latitude` class rejecting the `float32` representation of pi/2 due to precision differences. The RESPONSE also includes a code snippet that demonstrates how to apply the proposed solution, which is highly relevant and actionable. The RESPONSE does not address all aspects of the PROMPT, such as providing a specific tolerance value or discussing potential side effects of the change, which is why it does not score a 10.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711736523.566584,
        "result": "Based on the provided information, the issue seems to be related to the validation of latitude angles when using `float32` representation of `pi/2`. The error message indicates that the angle is out of the valid range for latitude, which is between -90 and 90 degrees. The relevant code snippet is from `astropy/coordinates/angles.py` where the `_validate_angles` method is defined.\n\nTo address the issue:\n\n- Implement a tolerance level for floating-point comparisons in the `_validate_angles` method to account for precision differences in `float32`.\n- Use `np.isclose` with a suitable tolerance instead of direct comparison when checking angle limits.\n\nHere is the proposed solution:\n\n```python\nclass Latitude(Angle):\n    # ... existing code ...\n\n    def _validate_angles(self):\n        # ... existing code ...\n\n        # Define a tolerance for floating-point comparison\n        tolerance = 1e-7  # Adjust the tolerance as needed\n\n        if angles.unit is u.deg:\n            limit = 90\n        elif angles.unit is u.rad:\n            limit = 0.5 * np.pi\n        else:\n            limit = u.degree.to(angles.unit, 90.0)\n\n        angles_view = angles.view(np.ndarray)[np.newaxis]\n\n        # Use np.isclose with a tolerance for comparison\n        invalid_angles = np.any(np.less(angles_view, -limit, where=~np.isclose(angles_view, -limit, atol=tolerance))) or \\\n                         np.any(np.greater(angles_view, limit, where=~np.isclose(angles_view, limit, atol=tolerance)))\n\n        if invalid_angles:\n            raise ValueError(\n                \"Latitude angle(s) must be within -90 deg <= angle <= 90 deg, \"\n                f\"got {angles.to(u.degree)}\"\n            )\n```\n\nThis solution introduces a tolerance level for the comparison of angles to the limits, which should help to avoid false positives when validating angles that are very close to the limits due to floating-point precision issues. Adjust the `tolerance` value as needed based on the precision requirements of the application.\n\n### Code snippets to check\n\n-  \u2192 [astropy](https://github.com/testbed/astropy__astropy__5.0/tree//astropy) \u2192 [coordinates](https://github.com/testbed/astropy__astropy__5.0/tree//astropy/coordinates)- [Lines 542 - 591](https://github.com/testbed/astropy__astropy__5.0/blob//astropy/coordinates/angles.py#L542-L591)\n\n This snippet contains the _validate_angles method which raises the ValueError when the latitude angle is outside the valid range. The issue describes a problem with float32 precision in this validation, so this code is directly related to the issue.",
        "context_relevance": 0.48,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE is relevant to the entire PROMPT and answers the PROMPT completely.\nSupporting Evidence: The RESPONSE provides a detailed explanation of the issue with the `Latitude` class in the `astropy` library when using `float32` representation of `pi/2`. It acknowledges the error message and suggests a solution by modifying the `_validate_angles` method to include a tolerance for floating-point comparisons. The RESPONSE also includes a code snippet that could potentially fix the issue, which is directly related to the PROMPT's description of the problem. The RESPONSE is technically accurate and addresses the entire PROMPT, including the expected behavior, actual behavior, and steps to reproduce the issue."
        },
        "qa_relevance": 1.0
    }
}