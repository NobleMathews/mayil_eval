{
    "id": "sphinx-doc__sphinx-8509",
    "repo_name": "testbed/sphinx-doc__sphinx__4.0",
    "task_id": 8443175886095143717,
    "title": "Use uplatex for default latex_engine for Japanese docs",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nUse uplatex for default latex_engine for Japanese docs.\r\n\r\n**Describe the solution you'd like**\r\nSince v2.3, Sphinx supports uplatex as an alternative of latex_engine for Japanese docs (refs: https://github.com/sphinx-doc/sphinx/issues/4186, https://github.com/sphinx-doc/sphinx/pull/6841). uplatex is able to build a document without conversion character encoding internally. It allows using unicode characters in documents. Additionally, uplatex is compatible with platex (current default latex_engine for Japanese docs).\r\n\r\n**Describe alternatives you've considered**\r\nNothing.\r\n\r\n**Additional context**\r\nNothing.\r\n\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/sphinx-doc__sphinx__4.0.git",
    "requested_commit": "",
    "mayil_response": "To implement the feature request to use `uplatex` as the default `latex_engine` for Japanese documents in Sphinx, follow these steps:\n\n- Update the `default_latex_engine` function in `sphinx/builders/latex/__init__.py` to return `'uplatex'` when the language is set to Japanese (`'ja'`).\n- Ensure that the `uplatex` key in the `sphinx/builders/latex/constants.py` file is correctly configured with the necessary LaTeX packages and settings for Japanese documents.\n- Add any necessary logic to handle the `uplatex` engine in other parts of the Sphinx LaTeX builder, if required.\n\nHere is the updated `default_latex_engine` function:\n\n```python\ndef default_latex_engine(config: Config) -> str:\n    \"\"\" Better default latex_engine settings for specific languages. \"\"\"\n    if config.language == 'ja':\n        return 'uplatex'  # Set uplatex as the default engine for Japanese\n    if config.language.startswith('zh'):\n        return 'xelatex'\n    if config.language == 'el':\n        return 'xelatex'\n    return 'pdflatex'\n```\n\nEnsure that the `uplatex` settings in `constants.py` are appropriate for Japanese documents. The existing configuration seems to be a copy of `platex`, so you might need to adjust it if there are any `uplatex`-specific settings or packages required.\n\nAdditionally, you may need to update the `install_packages_for_ja` function to include any `uplatex`-specific LaTeX packages that are necessary for Japanese document support.\n\n```python\ndef install_packages_for_ja(app: Sphinx) -> None:\n    \"\"\"Install packages for Japanese.\"\"\"\n    if app.config.language == 'ja' and app.config.latex_engine in ('platex', 'uplatex'):\n        app.add_latex_package('pxjahyper', after_hyperref=True)\n```\n\nFinally, review the rest of the LaTeX builder code to ensure that any other functions or methods that depend on the `latex_engine` setting are aware of the `uplatex` option and handle it correctly.\n\nRemember to test the changes with a Japanese document to ensure that `uplatex` is being used as the default engine and that the document builds correctly.\n\n### Code snippets to check\n\n-  \u2192 [sphinx](https://github.com/testbed/sphinx-doc__sphinx__4.0/tree//sphinx) \u2192 [builders](https://github.com/testbed/sphinx-doc__sphinx__4.0/tree//sphinx/builders) \u2192 [latex](https://github.com/testbed/sphinx-doc__sphinx__4.0/tree//sphinx/builders/latex)- [Lines 8 - 201](https://github.com/testbed/sphinx-doc__sphinx__4.0/blob//sphinx/builders/latex/constants.py#L8-L201)\n\n This snippet defines the settings for different latex_engines, including 'uplatex'. To set 'uplatex' as the default for Japanese documents, this configuration might need to be updated.\n-  \u2192 [sphinx](https://github.com/testbed/sphinx-doc__sphinx__4.0/tree//sphinx) \u2192 [builders](https://github.com/testbed/sphinx-doc__sphinx__4.0/tree//sphinx/builders) \u2192 [latex](https://github.com/testbed/sphinx-doc__sphinx__4.0/tree//sphinx/builders/latex)- [Lines 448 - 507](https://github.com/testbed/sphinx-doc__sphinx__4.0/blob//sphinx/builders/latex/__init__.py#L448-L507)\n\n This snippet contains the function 'default_latex_engine' which sets the default latex_engine based on the document language. It should be updated to reflect the new default for Japanese documents.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0005,
        "snippet_processor": 0.08709,
        "issue_star_creation": 0.028009999999999997,
        "issue_star_solver": 0.07825000000000001,
        "bouncer": 0.02886
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711702815.568011,
        "relevant_snippets": [
            {
                "code": "{\n    'pdflatex': {\n        'inputenc':     '\\\\usepackage[utf8]{inputenc}',\n        'utf8extra':   ('\\\\ifdefined\\\\DeclareUnicodeCharacter\\n'\n                        '% support both utf8 and utf8x syntaxes\\n'\n                        '  \\\\ifdefined\\\\DeclareUnicodeCharacterAsOptional\\n'\n                        '    \\\\def\\\\sphinxDUC#1{\\\\DeclareUnicodeCharacter{\"#1}}\\n'\n                        '  \\\\else\\n'\n                        '    \\\\let\\\\sphinxDUC\\\\DeclareUnicodeCharacter\\n'\n                        '  \\\\fi\\n'\n                        '  \\\\sphinxDUC{00A0}{\\\\nobreakspace}\\n'\n                        '  \\\\sphinxDUC{2500}{\\\\sphinxunichar{2500}}\\n'\n                        '  \\\\sphinxDUC{2502}{\\\\sphinxunichar{2502}}\\n'\n                        '  \\\\sphinxDUC{2514}{\\\\sphinxunichar{2514}}\\n'\n                        '  \\\\sphinxDUC{251C}{\\\\sphinxunichar{251C}}\\n'\n                        '  \\\\sphinxDUC{2572}{\\\\textbackslash}\\n'\n                        '\\\\fi'),\n    },\n    'xelatex': {\n        'latex_engine': 'xelatex',\n        'polyglossia':  '\\\\usepackage{polyglossia}',\n        'babel':        '',\n        'fontenc':     ('\\\\usepackage{fontspec}\\n'\n                        '\\\\defaultfontfeatures[\\\\rmfamily,\\\\sffamily,\\\\ttfamily]{}'),\n        'fontpkg':      XELATEX_DEFAULT_FONTPKG,\n        'fvset':        '\\\\fvset{fontsize=\\\\small}',\n        'fontsubstitution': '',\n        'textgreek':    '',\n        'utf8extra':   ('\\\\catcode`^^^^00a0\\\\active\\\\protected\\\\def^^^^00a0'\n                        '{\\\\leavevmode\\\\nobreak\\\\ }'),\n    },\n    'lualatex': {\n        'latex_engine': 'lualatex',\n        'polyglossia':  '\\\\usepackage{polyglossia}',\n        'babel':        '',\n        'fontenc':     ('\\\\usepackage{fontspec}\\n'\n                        '\\\\defaultfontfeatures[\\\\rmfamily,\\\\sffamily,\\\\ttfamily]{}'),\n        'fontpkg':      LUALATEX_DEFAULT_FONTPKG,\n        'fvset':        '\\\\fvset{fontsize=\\\\small}',\n        'fontsubstitution': '',\n        'textgreek':    '',\n        'utf8extra':   ('\\\\catcode`^^^^00a0\\\\active\\\\protected\\\\def^^^^00a0'\n                        '{\\\\leavevmode\\\\nobreak\\\\ }'),\n    },\n    'platex': {\n        'latex_engine': 'platex',\n        'babel':        '',\n        'classoptions': ',dvipdfmx',\n        'fontpkg':      PDFLATEX_DEFAULT_FONTPKG,\n        'fontsubstitution': '',\n        'textgreek':    '',\n        'fncychap':     '',\n        'geometry':     '\\\\usepackage[dvipdfm]{geometry}',\n    },\n    'uplatex': {\n        'latex_engine': 'uplatex',\n        'babel':        '',\n        'classoptions': ',dvipdfmx',\n        'fontpkg':      PDFLATEX_DEFAULT_FONTPKG,\n        'fontsubstitution': '',\n        'textgreek':    '',\n        'fncychap':     '',\n        'geometry':     '\\\\usepackage[dvipdfm]{geometry}',\n    },\n\n    # special settings for latex_engine + language_code\n    ('xelatex', 'fr'): {\n        # use babel instead of polyglossia by default\n        'polyglossia':  '',\n        'babel':        '\\\\usepackage{babel}',\n    },",
                "filename": "sphinx/builders/latex/constants.py",
                "start_index": 3791,
                "end_index": 6760,
                "start_line": 8,
                "end_line": 201,
                "max_line": 210,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 0.7
            },
            {
                "code": "def validate_config_values(app: Sphinx, config: Config) -> None:\n    for key in list(config.latex_elements):\n        if key not in DEFAULT_SETTINGS:\n            msg = __(\"Unknown configure key: latex_elements[%r], ignored.\")\n            logger.warning(msg % (key,))\n            config.latex_elements.pop(key)\n\n\ndef validate_latex_theme_options(app: Sphinx, config: Config) -> None:\n    for key in list(config.latex_theme_options):\n        if key not in Theme.UPDATABLE_KEYS:\n            msg = __(\"Unknown theme option: latex_theme_options[%r], ignored.\")\n            logger.warning(msg % (key,))\n            config.latex_theme_options.pop(key)\n\n\ndef install_packages_for_ja(app: Sphinx) -> None:\n    \"\"\"Install packages for Japanese.\"\"\"\n    if app.config.language == 'ja' and app.config.latex_engine in ('platex', 'uplatex'):\n        app.add_latex_package('pxjahyper', after_hyperref=True)\n\n\ndef default_latex_engine(config: Config) -> str:\n    \"\"\" Better default latex_engine settings for specific languages. \"\"\"\n    if config.language == 'ja':\n        return 'uplatex'\n    if config.language.startswith('zh'):\n        return 'xelatex'\n    if config.language == 'el':\n        return 'xelatex'\n    return 'pdflatex'\n\n\ndef default_latex_docclass(config: Config) -> dict[str, str]:\n    \"\"\" Better default latex_docclass settings for specific languages. \"\"\"\n    if config.language == 'ja':\n        if config.latex_engine == 'uplatex':\n            return {'manual': 'ujbook',\n                    'howto': 'ujreport'}\n        else:\n            return {'manual': 'jsbook',\n                    'howto': 'jreport'}\n    else:\n        return {}\n\n\ndef default_latex_use_xindy(config: Config) -> bool:\n    \"\"\" Better default latex_use_xindy settings for specific engines. \"\"\"\n    return config.latex_engine in {'xelatex', 'lualatex'}\n\n\ndef default_latex_documents(config: Config) -> list[tuple[str, str, str, str, str]]:\n    \"\"\" Better default latex_documents settings. \"\"\"\n    project = texescape.escape(config.project, config.latex_engine)\n    author = texescape.escape(config.author, config.latex_engine)\n    return [(config.root_doc,\n             make_filename_from_project(config.project) + '.tex',\n             texescape.escape_abbr(project),\n             texescape.escape_abbr(author),\n             config.latex_theme)]",
                "filename": "sphinx/builders/latex/__init__.py",
                "start_index": 20067,
                "end_index": 22381,
                "start_line": 448,
                "end_line": 507,
                "max_line": 543,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "('xelatex', 'zh'): {\n        'polyglossia':  '',\n        'babel':        '\\\\usepackage{babel}',\n        'fontenc':      '\\\\usepackage{xeCJK}',\n        # set formatcom=\\xeCJKVerbAddon to prevent xeCJK from adding extra spaces in\n        # fancyvrb Verbatim environment.\n        'fvset':        '\\\\fvset{fontsize=\\\\small,formatcom=\\\\xeCJKVerbAddon}',\n    },\n    ('xelatex', 'el'): {\n        'fontpkg':      XELATEX_GREEK_DEFAULT_FONTPKG,\n    },\n}",
                "filename": "sphinx/builders/latex/constants.py",
                "start_index": 6765,
                "end_index": 7209,
                "start_line": 191,
                "end_line": 208,
                "max_line": 210,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "class LaTeXTranslator(SphinxTranslator):",
                "filename": "sphinx/writers/latex.py",
                "start_index": 9517,
                "end_index": 9557,
                "start_line": 284,
                "end_line": 284,
                "max_line": 2127,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 0.1
            },
            {
                "code": "def init_multilingual(self) -> None:\n        if self.context['latex_engine'] == 'pdflatex':\n            if not self.babel.uses_cyrillic():\n                if 'X2' in self.context['fontenc']:\n                    self.context['substitutefont'] = '\\\\usepackage{substitutefont}'\n                    self.context['textcyrillic'] = ('\\\\usepackage[Xtwo]'\n                                                    '{sphinxpackagecyrillic}')\n                elif 'T2A' in self.context['fontenc']:\n                    self.context['substitutefont'] = '\\\\usepackage{substitutefont}'\n                    self.context['textcyrillic'] = ('\\\\usepackage[TtwoA]'\n                                                    '{sphinxpackagecyrillic}')\n            if 'LGR' in self.context['fontenc']:\n                self.context['substitutefont'] = '\\\\usepackage{substitutefont}'\n            else:\n                self.context['textgreek'] = ''\n            if self.context['substitutefont'] == '':\n                self.context['fontsubstitution'] = ''\n\n        # 'babel' key is public and user setting must be obeyed\n        if self.context['babel']:\n            self.context['classoptions'] += ',' + self.babel.get_language()\n            # this branch is not taken for xelatex/lualatex if default settings\n            self.context['multilingual'] = self.context['babel']\n            self.context['shorthandoff'] = SHORTHANDOFF\n\n            # Times fonts don't work with Cyrillic languages\n            if self.babel.uses_cyrillic() and 'fontpkg' not in self.config.latex_elements:\n                self.context['fontpkg'] = ''\n        elif self.context['polyglossia']:\n            self.context['classoptions'] += ',' + self.babel.get_language()\n            options = self.babel.get_mainlanguage_options()\n            if options:\n                language = fr'\\setmainlanguage[{options}]{{{self.babel.get_language()}}}'\n            else:\n                language = r'\\setmainlanguage{%s}' % self.babel.get_language()\n\n            self.context['multilingual'] = f'{self.context[\"polyglossia\"]}\\n{language}'\n\n    def write_stylesheet(self) -> None:\n        highlighter = highlighting.PygmentsBridge('latex', self.config.pygments_style)\n        stylesheet = path.join(self.outdir, 'sphinxhighlight.sty')\n        with open(stylesheet, 'w', encoding=\"utf-8\") as f:\n            f.write('\\\\NeedsTeXFormat{LaTeX2e}[1995/12/01]\\n')\n            f.write('\\\\ProvidesPackage{sphinxhighlight}'\n                    '[2022/06/30 stylesheet for highlighting with pygments]\\n')\n            f.write('% Its contents depend on pygments_style configuration variable.\\n\\n')\n            f.write(highlighter.get_stylesheet())",
                "filename": "sphinx/builders/latex/__init__.py",
                "start_index": 8473,
                "end_index": 11139,
                "start_line": 209,
                "end_line": 255,
                "max_line": 543,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"Utilities for LaTeX builder.\"\"\"\n\nfrom __future__ import annotations\n\nfrom docutils.writers.latex2e import Babel\n\n\nclass ExtBabel(Babel):\n    cyrillic_languages = ('bulgarian', 'kazakh', 'mongolian', 'russian', 'ukrainian')\n\n    def __init__(self, language_code: str, use_polyglossia: bool = False) -> None:\n        self.language_code = language_code\n        self.use_polyglossia = use_polyglossia\n        self.supported = True\n        super().__init__(language_code)\n\n    def uses_cyrillic(self) -> bool:\n        return self.language in self.cyrillic_languages\n\n    def is_supported_language(self) -> bool:\n        return self.supported\n\n    def language_name(self, language_code: str) -> str:\n        language = super().language_name(language_code)\n        if language == 'ngerman' and self.use_polyglossia:\n            # polyglossia calls new orthography (Neue Rechtschreibung) as\n            # german (with new spelling option).\n            return 'german'\n        elif language:\n            return language\n        elif language_code.startswith('zh'):\n            return 'english'  # fallback to english (behaves like supported)\n        else:\n            self.supported = False\n            return 'english'  # fallback to english\n\n    def get_mainlanguage_options(self) -> str | None:\n        \"\"\"Return options for polyglossia's ``\\\\setmainlanguage``.\"\"\"\n        if self.use_polyglossia is False:\n            return None\n        elif self.language == 'german':\n            language = super().language_name(self.language_code)\n            if language == 'ngerman':\n                return 'spelling=new'\n            else:\n                return 'spelling=old'\n        else:\n            return None",
                "filename": "sphinx/builders/latex/util.py",
                "start_index": 0,
                "end_index": 1702,
                "start_line": 1,
                "end_line": 48,
                "max_line": 48,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"constants for LaTeX builder.\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Any\n\nPDFLATEX_DEFAULT_FONTPKG = r'''\n\\usepackage{tgtermes}\n\\usepackage{tgheros}\n\\renewcommand{\\ttdefault}{txtt}\n'''\n\nPDFLATEX_DEFAULT_FONTSUBSTITUTION = r'''\n\\expandafter\\ifx\\csname T@LGR\\endcsname\\relax\n\\else\n% LGR was declared as font encoding\n  \\substitutefont{LGR}{\\rmdefault}{cmr}\n  \\substitutefont{LGR}{\\sfdefault}{cmss}\n  \\substitutefont{LGR}{\\ttdefault}{cmtt}\n\\fi\n\\expandafter\\ifx\\csname T@X2\\endcsname\\relax\n  \\expandafter\\ifx\\csname T@T2A\\endcsname\\relax\n  \\else\n  % T2A was declared as font encoding\n    \\substitutefont{T2A}{\\rmdefault}{cmr}\n    \\substitutefont{T2A}{\\sfdefault}{cmss}\n    \\substitutefont{T2A}{\\ttdefault}{cmtt}\n  \\fi\n\\else\n% X2 was declared as font encoding\n  \\substitutefont{X2}{\\rmdefault}{cmr}\n  \\substitutefont{X2}{\\sfdefault}{cmss}\n  \\substitutefont{X2}{\\ttdefault}{cmtt}\n\\fi\n'''\n\nXELATEX_DEFAULT_FONTPKG = r'''\n\\setmainfont{FreeSerif}[\n  Extension      = .otf,\n  UprightFont    = *,\n  ItalicFont     = *Italic,\n  BoldFont       = *Bold,\n  BoldItalicFont = *BoldItalic\n]\n\\setsansfont{FreeSans}[\n  Extension      = .otf,\n  UprightFont    = *,\n  ItalicFont     = *Oblique,\n  BoldFont       = *Bold,\n  BoldItalicFont = *BoldOblique,\n]\n\\setmonofont{FreeMono}[\n  Extension      = .otf,\n  UprightFont    = *,\n  ItalicFont     = *Oblique,\n  BoldFont       = *Bold,\n  BoldItalicFont = *BoldOblique,\n]\n'''\n\nXELATEX_GREEK_DEFAULT_FONTPKG = (XELATEX_DEFAULT_FONTPKG +\n                                 '\\n\\\\newfontfamily\\\\greekfont{FreeSerif}' +\n                                 '\\n\\\\newfontfamily\\\\greekfontsf{FreeSans}' +\n                                 '\\n\\\\newfontfamily\\\\greekfonttt{FreeMono}')\n\nLUALATEX_DEFAULT_FONTPKG = XELATEX_DEFAULT_FONTPKG",
                "filename": "sphinx/builders/latex/constants.py",
                "start_index": 0,
                "end_index": 1764,
                "start_line": 1,
                "end_line": 66,
                "max_line": 210,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "if (self.config.language not in {'en', 'ja'} and\n                'fncychap' not in self.config.latex_elements):\n            # use Sonny style if any language specified (except English)\n            self.elements['fncychap'] = (r'\\usepackage[Sonny]{fncychap}' + CR +\n                                         r'\\ChNameVar{\\Large\\normalfont\\sffamily}' + CR +\n                                         r'\\ChTitleVar{\\Large\\normalfont\\sffamily}')\n\n        self.babel = self.builder.babel\n        if not self.babel.is_supported_language():\n            # emit warning if specified language is invalid\n            # (only emitting, nothing changed to processing)\n            logger.warning(__('no Babel option known for language %r'),\n                           self.config.language)\n\n        minsecnumdepth = self.secnumdepth  # 2 from legacy sphinx manual/howto\n        if self.document.get('tocdepth'):\n            # reduce tocdepth if `part` or `chapter` is used for top_sectionlevel\n            #   tocdepth = -1: show only parts\n            #   tocdepth =  0: show parts and chapters\n            #   tocdepth =  1: show parts, chapters and sections\n            #   tocdepth =  2: show parts, chapters, sections and subsections\n            #   ...\n            tocdepth = self.document.get('tocdepth', 999) + self.top_sectionlevel - 2\n            if len(self.sectionnames) < len(LATEXSECTIONNAMES) and \\\n               self.top_sectionlevel > 0:\n                tocdepth += 1  # because top_sectionlevel is shifted by -1\n            if tocdepth > len(LATEXSECTIONNAMES) - 2:  # default is 5 <-> subparagraph\n                logger.warning(__('too large :maxdepth:, ignored.'))\n                tocdepth = len(LATEXSECTIONNAMES) - 2\n\n            self.elements['tocdepth'] = r'\\setcounter{tocdepth}{%d}' % tocdepth\n            minsecnumdepth = max(minsecnumdepth, tocdepth)\n\n        if self.config.numfig and (self.config.numfig_secnum_depth > 0):\n            minsecnumdepth = max(minsecnumdepth, self.numfig_secnum_depth - 1)\n\n        if minsecnumdepth > self.secnumdepth:\n            self.elements['secnumdepth'] = r'\\setcounter{secnumdepth}{%d}' %\\\n                                           minsecnumdepth\n\n        contentsname = document.get('contentsname')\n        if contentsname:\n            self.elements['contentsname'] = self.babel_renewcommand(r'\\contentsname',\n                                                                    contentsname)\n\n        if self.elements['maxlistdepth']:\n            sphinxpkgoptions.append('maxlistdepth=%s' % self.elements['maxlistdepth'])\n        if sphinxpkgoptions:\n            self.elements['sphinxpkgoptions'] = '[,%s]' % ','.join(sphinxpkgoptions)\n        if self.elements['sphinxsetup']:\n            self.elements['sphinxsetup'] = (r'\\sphinxsetup{%s}' % self.elements['sphinxsetup'])",
                "filename": "sphinx/writers/latex.py",
                "start_index": 12477,
                "end_index": 15304,
                "start_line": 355,
                "end_line": 405,
                "max_line": 2127,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"Allow `MathJax`_ to be used to display math in Sphinx's HTML writer.\n\nThis requires the MathJax JavaScript library on your webserver/computer.\n\n.. _MathJax: https://www.mathjax.org/\n\"\"\"\n\nfrom __future__ import annotations\n\nimport json\nfrom typing import Any, cast\n\nfrom docutils import nodes\n\nimport sphinx\nfrom sphinx.application import Sphinx\nfrom sphinx.domains.math import MathDomain\nfrom sphinx.errors import ExtensionError\nfrom sphinx.locale import _\nfrom sphinx.util.math import get_node_equation_number\nfrom sphinx.writers.html import HTML5Translator\n\n# more information for mathjax secure url is here:\n# https://docs.mathjax.org/en/latest/start.html#secure-access-to-the-cdn\nMATHJAX_URL = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js'\n\nlogger = sphinx.util.logging.getLogger(__name__)\n\n\ndef html_visit_math(self: HTML5Translator, node: nodes.math) -> None:\n    self.body.append(self.starttag(node, 'span', '', CLASS='math notranslate nohighlight'))\n    self.body.append(self.builder.config.mathjax_inline[0] +\n                     self.encode(node.astext()) +\n                     self.builder.config.mathjax_inline[1] + '</span>')\n    raise nodes.SkipNode\n\n\ndef html_visit_displaymath(self: HTML5Translator, node: nodes.math_block) -> None:\n    self.body.append(self.starttag(node, 'div', CLASS='math notranslate nohighlight'))\n    if node['nowrap']:\n        self.body.append(self.encode(node.astext()))\n        self.body.append('</div>')\n        raise nodes.SkipNode\n\n    # necessary to e.g. set the id property correctly\n    if node['number']:\n        number = get_node_equation_number(self, node)\n        self.body.append('<span class=\"eqno\">(%s)' % number)\n        self.add_permalink_ref(node, _('Permalink to this equation'))\n        self.body.append('</span>')\n    self.body.append(self.builder.config.mathjax_display[0])\n    parts = [prt for prt in node.astext().split('\\n\\n') if prt.strip()]\n    if len(parts) > 1:  # Add alignment if there are more than 1 equation\n        self.body.append(r' \\begin{align}\\begin{aligned}')\n    for i, part in enumerate(parts):\n        part = self.encode(part)\n        if r'\\\\' in part:\n            self.body.append(r'\\begin{split}' + part + r'\\end{split}')\n        else:\n            self.body.append(part)\n        if i < len(parts) - 1:  # append new line if not the last equation\n            self.body.append(r'\\\\')\n    if len(parts) > 1:  # Add alignment if there are more than 1 equation\n        self.body.append(r'\\end{aligned}\\end{align} ')\n    self.body.append(self.builder.config.mathjax_display[1])\n    self.body.append('</div>\\n')\n    raise nodes.SkipNode",
                "filename": "sphinx/ext/mathjax.py",
                "start_index": 0,
                "end_index": 2636,
                "start_line": 1,
                "end_line": 67,
                "max_line": 122,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "class LaTeXRenderer(SphinxRenderer):\n    def __init__(\n        self, template_path: str | None = None, latex_engine: str | None = None,\n    ) -> None:\n        if template_path is None:\n            template_path = os.path.join(package_dir, 'templates', 'latex')\n        super().__init__(template_path)\n\n        # use texescape as escape filter\n        escape = partial(texescape.escape, latex_engine=latex_engine)\n        self.env.filters['e'] = escape\n        self.env.filters['escape'] = escape\n        self.env.filters['eabbr'] = texescape.escape_abbr\n\n        # use JSP/eRuby like tagging instead because curly bracket; the default\n        # tagging of jinja2 is not good for LaTeX sources.\n        self.env.variable_start_string = '<%='\n        self.env.variable_end_string = '%>'\n        self.env.block_start_string = '<%'\n        self.env.block_end_string = '%>'\n        self.env.comment_start_string = '<#'\n        self.env.comment_end_string = '#>'\n\n\nclass ReSTRenderer(SphinxRenderer):\n    def __init__(\n        self, template_path: None | str | list[str] = None, language: str | None = None,\n    ) -> None:\n        super().__init__(template_path)\n\n        # add language to environment\n        self.env.extend(language=language)\n\n        # use texescape as escape filter\n        self.env.filters['e'] = rst.escape\n        self.env.filters['escape'] = rst.escape\n        self.env.filters['heading'] = rst.heading\n\n\nclass SphinxTemplateLoader(BaseLoader):\n    \"\"\"A loader supporting template inheritance\"\"\"\n\n    def __init__(self, confdir: str, templates_paths: list[str],\n                 system_templates_paths: list[str]) -> None:\n        self.loaders = []\n        self.sysloaders = []\n\n        for templates_path in templates_paths:\n            loader = SphinxFileSystemLoader(path.join(confdir, templates_path))\n            self.loaders.append(loader)\n\n        for templates_path in system_templates_paths:\n            loader = SphinxFileSystemLoader(templates_path)\n            self.loaders.append(loader)\n            self.sysloaders.append(loader)\n\n    def get_source(self, environment: Environment, template: str) -> tuple[str, str, Callable]:\n        if template.startswith('!'):\n            # search a template from ``system_templates_paths``\n            loaders = self.sysloaders\n            template = template[1:]\n        else:\n            loaders = self.loaders\n\n        for loader in loaders:\n            try:\n                return loader.get_source(environment, template)\n            except TemplateNotFound:\n                pass\n        raise TemplateNotFound(template)",
                "filename": "sphinx/util/template.py",
                "start_index": 2095,
                "end_index": 4690,
                "start_line": 63,
                "end_line": 132,
                "max_line": 132,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 0.2
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "sphinx/builders/latex/constants.py": [
                {
                    "chunk": {
                        "code": "{\n    'pdflatex': {\n        'inputenc':     '\\\\usepackage[utf8]{inputenc}',\n        'utf8extra':   ('\\\\ifdefined\\\\DeclareUnicodeCharacter\\n'\n                        '% support both utf8 and utf8x syntaxes\\n'\n                        '  \\\\ifdefined\\\\DeclareUnicodeCharacterAsOptional\\n'\n                        '    \\\\def\\\\sphinxDUC#1{\\\\DeclareUnicodeCharacter{\"#1}}\\n'\n                        '  \\\\else\\n'\n                        '    \\\\let\\\\sphinxDUC\\\\DeclareUnicodeCharacter\\n'\n                        '  \\\\fi\\n'\n                        '  \\\\sphinxDUC{00A0}{\\\\nobreakspace}\\n'\n                        '  \\\\sphinxDUC{2500}{\\\\sphinxunichar{2500}}\\n'\n                        '  \\\\sphinxDUC{2502}{\\\\sphinxunichar{2502}}\\n'\n                        '  \\\\sphinxDUC{2514}{\\\\sphinxunichar{2514}}\\n'\n                        '  \\\\sphinxDUC{251C}{\\\\sphinxunichar{251C}}\\n'\n                        '  \\\\sphinxDUC{2572}{\\\\textbackslash}\\n'\n                        '\\\\fi'),\n    },\n    'xelatex': {\n        'latex_engine': 'xelatex',\n        'polyglossia':  '\\\\usepackage{polyglossia}',\n        'babel':        '',\n        'fontenc':     ('\\\\usepackage{fontspec}\\n'\n                        '\\\\defaultfontfeatures[\\\\rmfamily,\\\\sffamily,\\\\ttfamily]{}'),\n        'fontpkg':      XELATEX_DEFAULT_FONTPKG,\n        'fvset':        '\\\\fvset{fontsize=\\\\small}',\n        'fontsubstitution': '',\n        'textgreek':    '',\n        'utf8extra':   ('\\\\catcode`^^^^00a0\\\\active\\\\protected\\\\def^^^^00a0'\n                        '{\\\\leavevmode\\\\nobreak\\\\ }'),\n    },\n    'lualatex': {\n        'latex_engine': 'lualatex',\n        'polyglossia':  '\\\\usepackage{polyglossia}',\n        'babel':        '',\n        'fontenc':     ('\\\\usepackage{fontspec}\\n'\n                        '\\\\defaultfontfeatures[\\\\rmfamily,\\\\sffamily,\\\\ttfamily]{}'),\n        'fontpkg':      LUALATEX_DEFAULT_FONTPKG,\n        'fvset':        '\\\\fvset{fontsize=\\\\small}',\n        'fontsubstitution': '',\n        'textgreek':    '',\n        'utf8extra':   ('\\\\catcode`^^^^00a0\\\\active\\\\protected\\\\def^^^^00a0'\n                        '{\\\\leavevmode\\\\nobreak\\\\ }'),\n    },\n    'platex': {\n        'latex_engine': 'platex',\n        'babel':        '',\n        'classoptions': ',dvipdfmx',\n        'fontpkg':      PDFLATEX_DEFAULT_FONTPKG,\n        'fontsubstitution': '',\n        'textgreek':    '',\n        'fncychap':     '',\n        'geometry':     '\\\\usepackage[dvipdfm]{geometry}',\n    },\n    'uplatex': {\n        'latex_engine': 'uplatex',\n        'babel':        '',\n        'classoptions': ',dvipdfmx',\n        'fontpkg':      PDFLATEX_DEFAULT_FONTPKG,\n        'fontsubstitution': '',\n        'textgreek':    '',\n        'fncychap':     '',\n        'geometry':     '\\\\usepackage[dvipdfm]{geometry}',\n    },\n\n    # special settings for latex_engine + language_code\n    ('xelatex', 'fr'): {\n        # use babel instead of polyglossia by default\n        'polyglossia':  '',\n        'babel':        '\\\\usepackage{babel}',\n    },",
                        "filename": "sphinx/builders/latex/constants.py",
                        "start_index": 3791,
                        "end_index": 6760,
                        "start_line": 8,
                        "end_line": 201,
                        "max_line": 210,
                        "git_instance": "github",
                        "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet defines the settings for different latex_engines, including 'uplatex'. To set 'uplatex' as the default for Japanese documents, this configuration might need to be updated."
                }
            ],
            "sphinx/builders/latex/__init__.py": [
                {
                    "chunk": {
                        "code": "def validate_config_values(app: Sphinx, config: Config) -> None:\n    for key in list(config.latex_elements):\n        if key not in DEFAULT_SETTINGS:\n            msg = __(\"Unknown configure key: latex_elements[%r], ignored.\")\n            logger.warning(msg % (key,))\n            config.latex_elements.pop(key)\n\n\ndef validate_latex_theme_options(app: Sphinx, config: Config) -> None:\n    for key in list(config.latex_theme_options):\n        if key not in Theme.UPDATABLE_KEYS:\n            msg = __(\"Unknown theme option: latex_theme_options[%r], ignored.\")\n            logger.warning(msg % (key,))\n            config.latex_theme_options.pop(key)\n\n\ndef install_packages_for_ja(app: Sphinx) -> None:\n    \"\"\"Install packages for Japanese.\"\"\"\n    if app.config.language == 'ja' and app.config.latex_engine in ('platex', 'uplatex'):\n        app.add_latex_package('pxjahyper', after_hyperref=True)\n\n\ndef default_latex_engine(config: Config) -> str:\n    \"\"\" Better default latex_engine settings for specific languages. \"\"\"\n    if config.language == 'ja':\n        return 'uplatex'\n    if config.language.startswith('zh'):\n        return 'xelatex'\n    if config.language == 'el':\n        return 'xelatex'\n    return 'pdflatex'\n\n\ndef default_latex_docclass(config: Config) -> dict[str, str]:\n    \"\"\" Better default latex_docclass settings for specific languages. \"\"\"\n    if config.language == 'ja':\n        if config.latex_engine == 'uplatex':\n            return {'manual': 'ujbook',\n                    'howto': 'ujreport'}\n        else:\n            return {'manual': 'jsbook',\n                    'howto': 'jreport'}\n    else:\n        return {}\n\n\ndef default_latex_use_xindy(config: Config) -> bool:\n    \"\"\" Better default latex_use_xindy settings for specific engines. \"\"\"\n    return config.latex_engine in {'xelatex', 'lualatex'}\n\n\ndef default_latex_documents(config: Config) -> list[tuple[str, str, str, str, str]]:\n    \"\"\" Better default latex_documents settings. \"\"\"\n    project = texescape.escape(config.project, config.latex_engine)\n    author = texescape.escape(config.author, config.latex_engine)\n    return [(config.root_doc,\n             make_filename_from_project(config.project) + '.tex',\n             texescape.escape_abbr(project),\n             texescape.escape_abbr(author),\n             config.latex_theme)]",
                        "filename": "sphinx/builders/latex/__init__.py",
                        "start_index": 20067,
                        "end_index": 22381,
                        "start_line": 448,
                        "end_line": 507,
                        "max_line": 543,
                        "git_instance": "github",
                        "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the function 'default_latex_engine' which sets the default latex_engine based on the document language. It should be updated to reflect the new default for Japanese documents."
                }
            ]
        },
        "solution_task": "To implement the feature request to use `uplatex` as the default `latex_engine` for Japanese documents in Sphinx, follow these steps:\n\n- Update the `default_latex_engine` function in `sphinx/builders/latex/__init__.py` to return `'uplatex'` when the language is set to Japanese (`'ja'`).\n- Ensure that the `uplatex` key in the `sphinx/builders/latex/constants.py` file is correctly configured with the necessary LaTeX packages and settings for Japanese documents.\n- Add any necessary logic to handle the `uplatex` engine in other parts of the Sphinx LaTeX builder, if required.\n\nHere is the updated `default_latex_engine` function:\n\n```python\ndef default_latex_engine(config: Config) -> str:\n    \"\"\" Better default latex_engine settings for specific languages. \"\"\"\n    if config.language == 'ja':\n        return 'uplatex'  # Set uplatex as the default engine for Japanese\n    if config.language.startswith('zh'):\n        return 'xelatex'\n    if config.language == 'el':\n        return 'xelatex'\n    return 'pdflatex'\n```\n\nEnsure that the `uplatex` settings in `constants.py` are appropriate for Japanese documents. The existing configuration seems to be a copy of `platex`, so you might need to adjust it if there are any `uplatex`-specific settings or packages required.\n\nAdditionally, you may need to update the `install_packages_for_ja` function to include any `uplatex`-specific LaTeX packages that are necessary for Japanese document support.\n\n```python\ndef install_packages_for_ja(app: Sphinx) -> None:\n    \"\"\"Install packages for Japanese.\"\"\"\n    if app.config.language == 'ja' and app.config.latex_engine in ('platex', 'uplatex'):\n        app.add_latex_package('pxjahyper', after_hyperref=True)\n```\n\nFinally, review the rest of the LaTeX builder code to ensure that any other functions or methods that depend on the `latex_engine` setting are aware of the `uplatex` option and handle it correctly.\n\nRemember to test the changes with a Japanese document to ensure that `uplatex` is being used as the default engine and that the document builds correctly.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE must provide precise, actionable guidance and directly address all aspects of the described feature request to facilitate its successful implementation or improvement.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable set of steps to implement the feature request of using `uplatex` as the default `latex_engine` for Japanese documents in Sphinx. It specifies the exact files and functions to be updated, such as `default_latex_engine` in `sphinx/builders/latex/__init__.py` and the `uplatex` key in `sphinx/builders/latex/constants.py`. The RESPONSE also includes code snippets and suggests reviewing the LaTeX builder code for compatibility with the `uplatex` option. Additionally, it advises testing the changes with a Japanese document, which is a crucial step in the implementation process. The RESPONSE is comprehensive and addresses the feature request thoroughly, but it does not score a perfect 10 because it does not mention the need to update documentation or consider the impact on existing users who may be using `platex`, which could be part of a complete implementation strategy.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711702939.1913989,
        "result": "To implement the feature request to use `uplatex` as the default `latex_engine` for Japanese documents in Sphinx, follow these steps:\n\n- Update the `default_latex_engine` function in `sphinx/builders/latex/__init__.py` to return `'uplatex'` when the language is set to Japanese (`'ja'`).\n- Ensure that the `uplatex` key in the `sphinx/builders/latex/constants.py` file is correctly configured with the necessary LaTeX packages and settings for Japanese documents.\n- Add any necessary logic to handle the `uplatex` engine in other parts of the Sphinx LaTeX builder, if required.\n\nHere is the updated `default_latex_engine` function:\n\n```python\ndef default_latex_engine(config: Config) -> str:\n    \"\"\" Better default latex_engine settings for specific languages. \"\"\"\n    if config.language == 'ja':\n        return 'uplatex'  # Set uplatex as the default engine for Japanese\n    if config.language.startswith('zh'):\n        return 'xelatex'\n    if config.language == 'el':\n        return 'xelatex'\n    return 'pdflatex'\n```\n\nEnsure that the `uplatex` settings in `constants.py` are appropriate for Japanese documents. The existing configuration seems to be a copy of `platex`, so you might need to adjust it if there are any `uplatex`-specific settings or packages required.\n\nAdditionally, you may need to update the `install_packages_for_ja` function to include any `uplatex`-specific LaTeX packages that are necessary for Japanese document support.\n\n```python\ndef install_packages_for_ja(app: Sphinx) -> None:\n    \"\"\"Install packages for Japanese.\"\"\"\n    if app.config.language == 'ja' and app.config.latex_engine in ('platex', 'uplatex'):\n        app.add_latex_package('pxjahyper', after_hyperref=True)\n```\n\nFinally, review the rest of the LaTeX builder code to ensure that any other functions or methods that depend on the `latex_engine` setting are aware of the `uplatex` option and handle it correctly.\n\nRemember to test the changes with a Japanese document to ensure that `uplatex` is being used as the default engine and that the document builds correctly.\n\n### Code snippets to check\n\n-  \u2192 [sphinx](https://github.com/testbed/sphinx-doc__sphinx__4.0/tree//sphinx) \u2192 [builders](https://github.com/testbed/sphinx-doc__sphinx__4.0/tree//sphinx/builders) \u2192 [latex](https://github.com/testbed/sphinx-doc__sphinx__4.0/tree//sphinx/builders/latex)- [Lines 8 - 201](https://github.com/testbed/sphinx-doc__sphinx__4.0/blob//sphinx/builders/latex/constants.py#L8-L201)\n\n This snippet defines the settings for different latex_engines, including 'uplatex'. To set 'uplatex' as the default for Japanese documents, this configuration might need to be updated.\n-  \u2192 [sphinx](https://github.com/testbed/sphinx-doc__sphinx__4.0/tree//sphinx) \u2192 [builders](https://github.com/testbed/sphinx-doc__sphinx__4.0/tree//sphinx/builders) \u2192 [latex](https://github.com/testbed/sphinx-doc__sphinx__4.0/tree//sphinx/builders/latex)- [Lines 448 - 507](https://github.com/testbed/sphinx-doc__sphinx__4.0/blob//sphinx/builders/latex/__init__.py#L448-L507)\n\n This snippet contains the function 'default_latex_engine' which sets the default latex_engine based on the document language. It should be updated to reflect the new default for Japanese documents.",
        "context_relevance": 0.3,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE is relevant to the entire PROMPT and answers the PROMPT completely.\nSupporting Evidence: The RESPONSE provides a detailed solution to the feature request of using `uplatex` as the default `latex_engine` for Japanese documents in Sphinx, which is exactly what the PROMPT is asking for. It includes specific steps to update the Sphinx configuration and code, references to the relevant GitHub issues and pull requests, and even code snippets to illustrate the changes needed. The RESPONSE is directly related to the feature request described in the PROMPT, addresses the solution desired, and does not consider any alternatives, as none were provided in the PROMPT. It also correctly ignores the \"Additional context\" section of the PROMPT, which stated \"Nothing,\" indicating that no further context was needed. The RESPONSE is comprehensive, technically detailed, and fully aligned with the feature request, thus earning the highest relevance score."
        },
        "qa_relevance": 1.0
    }
}