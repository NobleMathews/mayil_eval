{
    "id": "django__django-11848",
    "repo_name": "testbed/django__django__3.1",
    "task_id": 2883741839175614035,
    "title": "django.utils.http.parse_http_date two digit year check is incorrect",
    "body": "Description\n\t \n\t\t(last modified by Ad Timmering)\n\t \nRFC 850 does not mention this, but in RFC 7231 (and there's something similar in RFC 2822), there's the following quote:\nRecipients of a timestamp value in rfc850-date format, which uses a\ntwo-digit year, MUST interpret a timestamp that appears to be more\nthan 50 years in the future as representing the most recent year in\nthe past that had the same last two digits.\nCurrent logic is hard coded to consider 0-69 to be in 2000-2069, and 70-99 to be 1970-1999, instead of comparing versus the current year.\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/django__django__3.1.git",
    "requested_commit": "",
    "mayil_response": "- Update the `parse_http_date` function in `django/utils/http.py` to correctly handle two-digit years according to RFC 7231 and RFC 2822.\n- Replace the current logic that uses hardcoded ranges for determining the century of a two-digit year with a comparison against the current year.\n- The updated logic should interpret two-digit years within 50 years before and up to the current year as belonging to the current century, and those more than 50 years ahead as belonging to the previous century.\n\n```python\ndef parse_http_date(date):\n    \"\"\"\n    Parse a date format as specified by HTTP RFC 9110 Section 5.6.7.\n\n    The three formats allowed by the RFC are accepted, even if only the first\n    one is still in widespread use.\n\n    Return an integer expressed in seconds since the epoch, in UTC.\n    \"\"\"\n    # ... (existing code) ...\n\n    try:\n        tz = datetime.timezone.utc\n        year = int(m[\"year\"])\n        if year < 100:\n            current_year = datetime.datetime.now(tz=tz).year\n            current_century = current_year - (current_year % 100)\n            # Determine if the year is within the last 50 years\n            if 0 <= (current_year % 100) - year <= 50:\n                year += current_century\n            else:\n                # If not, it's from the previous century\n                year += current_century - 100\n        # ... (existing code) ...\n    except Exception as exc:\n        raise ValueError(\"%r is not a valid date\" % date) from exc\n```\n\n- Ensure that the updated logic is placed within the existing try-except block where the year is being parsed and interpreted.\n- Test the updated function to ensure it correctly interprets two-digit years as per the new logic.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__3.1/tree//django) \u2192 [utils](https://github.com/testbed/django__django__3.1/tree//django/utils)- [Lines 83 - 161](https://github.com/testbed/django__django__3.1/blob//django/utils/http.py#L83-L161)\n\n This snippet contains the parse_http_date function, which is directly related to the issue of handling two-digit years incorrectly according to RFC 7231.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.00033,
        "snippet_processor": 0.050890000000000005,
        "issue_star_creation": 0.023889999999999998,
        "issue_star_solver": 0.04168000000000001,
        "bouncer": 0.02727
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711732771.298212,
        "relevant_snippets": [
            {
                "code": "import datetime\n\nfrom django.conf import settings\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.db import models\nfrom django.http import Http404\nfrom django.utils import timezone\nfrom django.utils.functional import cached_property\nfrom django.utils.translation import gettext as _\nfrom django.views.generic.base import View\nfrom django.views.generic.detail import (\n    BaseDetailView,\n    SingleObjectTemplateResponseMixin,\n)\nfrom django.views.generic.list import (\n    MultipleObjectMixin,\n    MultipleObjectTemplateResponseMixin,\n)\n\n\nclass YearMixin:\n    \"\"\"Mixin for views manipulating year-based data.\"\"\"\n\n    year_format = \"%Y\"\n    year = None\n\n    def get_year_format(self):\n        \"\"\"\n        Get a year format string in strptime syntax to be used to parse the\n        year from url variables.\n        \"\"\"\n        return self.year_format\n\n    def get_year(self):\n        \"\"\"Return the year for which this view should display data.\"\"\"\n        year = self.year\n        if year is None:\n            try:\n                year = self.kwargs[\"year\"]\n            except KeyError:\n                try:\n                    year = self.request.GET[\"year\"]\n                except KeyError:\n                    raise Http404(_(\"No year specified\"))\n        return year\n\n    def get_next_year(self, date):\n        \"\"\"Get the next valid year.\"\"\"\n        return _get_next_prev(self, date, is_previous=False, period=\"year\")\n\n    def get_previous_year(self, date):\n        \"\"\"Get the previous valid year.\"\"\"\n        return _get_next_prev(self, date, is_previous=True, period=\"year\")\n\n    def _get_next_year(self, date):\n        \"\"\"\n        Return the start date of the next interval.\n\n        The interval is defined by start date <= item date < next start date.\n        \"\"\"\n        try:\n            return date.replace(year=date.year + 1, month=1, day=1)\n        except ValueError:\n            raise Http404(_(\"Date out of range\"))\n\n    def _get_current_year(self, date):\n        \"\"\"Return the start date of the current interval.\"\"\"\n        return date.replace(month=1, day=1)",
                "filename": "django/views/generic/dates.py",
                "start_index": 0,
                "end_index": 2091,
                "start_line": 1,
                "end_line": 68,
                "max_line": 795,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def http_date(epoch_seconds=None):\n    \"\"\"\n    Format the time to match the RFC 5322 date format as specified by RFC 9110\n    Section 5.6.7.\n\n    `epoch_seconds` is a floating point number expressed in seconds since the\n    epoch, in UTC - such as that outputted by time.time(). If set to None, it\n    defaults to the current time.\n\n    Output a string in the format 'Wdy, DD Mon YYYY HH:MM:SS GMT'.\n    \"\"\"\n    return formatdate(epoch_seconds, usegmt=True)\n\n\ndef parse_http_date(date):\n    \"\"\"\n    Parse a date format as specified by HTTP RFC 9110 Section 5.6.7.\n\n    The three formats allowed by the RFC are accepted, even if only the first\n    one is still in widespread use.\n\n    Return an integer expressed in seconds since the epoch, in UTC.\n    \"\"\"\n    # email.utils.parsedate() does the job for RFC 1123 dates; unfortunately\n    # RFC 9110 makes it mandatory to support RFC 850 dates too. So we roll\n    # our own RFC-compliant parsing.\n    for regex in RFC1123_DATE, RFC850_DATE, ASCTIME_DATE:\n        m = regex.match(date)\n        if m is not None:\n            break\n    else:\n        raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n    try:\n        tz = datetime.timezone.utc\n        year = int(m[\"year\"])\n        if year < 100:\n            current_year = datetime.datetime.now(tz=tz).year\n            current_century = current_year - (current_year % 100)\n            if year - (current_year % 100) > 50:\n                # year that appears to be more than 50 years in the future are\n                # interpreted as representing the past.\n                year += current_century - 100\n            else:\n                year += current_century\n        month = MONTHS.index(m[\"mon\"].lower()) + 1\n        day = int(m[\"day\"])\n        hour = int(m[\"hour\"])\n        min = int(m[\"min\"])\n        sec = int(m[\"sec\"])\n        result = datetime.datetime(year, month, day, hour, min, sec, tzinfo=tz)\n        return int(result.timestamp())\n    except Exception as exc:\n        raise ValueError(\"%r is not a valid date\" % date) from exc\n\n\ndef parse_http_date_safe(date):\n    \"\"\"\n    Same as parse_http_date, but return None if the input is invalid.\n    \"\"\"\n    try:\n        return parse_http_date(date)\n    except Exception:\n        pass\n\n\n# Base 36 functions: useful for generating compact URLs\n\n\ndef base36_to_int(s):\n    \"\"\"\n    Convert a base 36 string to an int. Raise ValueError if the input won't fit\n    into an int.\n    \"\"\"\n    # To prevent overconsumption of server resources, reject any\n    # base36 string that is longer than 13 base36 digits (13 digits\n    # is sufficient to base36-encode any 64-bit integer)\n    if len(s) > 13:\n        raise ValueError(\"Base36 input too large\")\n    return int(s, 36)",
                "filename": "django/utils/http.py",
                "start_index": 2862,
                "end_index": 5592,
                "start_line": 83,
                "end_line": 161,
                "max_line": 375,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "import datetime\n\nfrom django.utils.html import avoid_wrapping\nfrom django.utils.timezone import is_aware\nfrom django.utils.translation import gettext, ngettext_lazy\n\nTIME_STRINGS = {\n    \"year\": ngettext_lazy(\"%(num)d year\", \"%(num)d years\", \"num\"),\n    \"month\": ngettext_lazy(\"%(num)d month\", \"%(num)d months\", \"num\"),\n    \"week\": ngettext_lazy(\"%(num)d week\", \"%(num)d weeks\", \"num\"),\n    \"day\": ngettext_lazy(\"%(num)d day\", \"%(num)d days\", \"num\"),\n    \"hour\": ngettext_lazy(\"%(num)d hour\", \"%(num)d hours\", \"num\"),\n    \"minute\": ngettext_lazy(\"%(num)d minute\", \"%(num)d minutes\", \"num\"),\n}\n\nTIME_STRINGS_KEYS = list(TIME_STRINGS.keys())\n\nTIME_CHUNKS = [\n    60 * 60 * 24 * 7,  # week\n    60 * 60 * 24,  # day\n    60 * 60,  # hour\n    60,  # minute\n]\n\nMONTHS_DAYS = (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)",
                "filename": "django/utils/timesince.py",
                "start_index": 0,
                "end_index": 816,
                "start_line": 1,
                "end_line": 25,
                "max_line": 142,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "gs_allowed = False\n    default_error_messages = {\n        \"invalid\": _(\n            \"\u201c%(value)s\u201d value has an invalid format. It must be in \"\n            \"YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ] format.\"\n        ),\n        \"invalid_date\": _(\n            \"\u201c%(value)s\u201d value has the correct format \"\n            \"(YYYY-MM-DD) but it is an invalid date.\"\n        ),\n        \"invalid_datetime\": _(\n            \"\u201c%(value)s\u201d value has the correct format \"\n            \"(YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ]) \"\n            \"but it is an invalid date/time.\"\n        ),\n    }\n    description = _(\"Date (with time)\")\n\n    # __init__ is inherited from DateField\n\n    def _check_fix_default_value(self):\n        \"\"\"\n        Warn that using an actual date or datetime value is probably wrong;\n        it's only evaluated on server startup.\n        \"\"\"\n        if not self.has_default():\n            return []\n\n        value = self.default\n        if isinstance(value, (datetime.datetime, datetime.date)):\n            return self._check_if_value_fixed(value)\n        # No explicit date / datetime value -- no checks necessary.\n        return []\n\n    def get_internal_type(self):\n        return \"DateTimeField\"\n\n    def to_python(self, va",
                "filename": "django/db/models/fields/__init__.py",
                "start_index": 55475,
                "end_index": 56691,
                "start_line": 1149,
                "end_line": 2741,
                "max_line": 2869,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "class BaseDateDetailView(YearMixin, MonthMixin, DayMixin, DateMixin, BaseDetailView):\n    \"\"\"\n    Detail view of a single object on a single date; this differs from the\n    standard DetailView by accepting a year/month/day in the URL.\n    \"\"\"\n\n    def get_object(self, queryset=None):\n        \"\"\"Get the object this request displays.\"\"\"\n        year = self.get_year()\n        month = self.get_month()\n        day = self.get_day()\n        date = _date_from_string(\n            year,\n            self.get_year_format(),\n            month,\n            self.get_month_format(),\n            day,\n            self.get_day_format(),\n        )\n\n        # Use a custom queryset if provided\n        qs = self.get_queryset() if queryset is None else queryset\n\n        if not self.get_allow_future() and date > datetime.date.today():\n            raise Http404(\n                _(\n                    \"Future %(verbose_name_plural)s not available because \"\n                    \"%(class_name)s.allow_future is False.\"\n                )\n                % {\n                    \"verbose_name_plural\": qs.model._meta.verbose_name_plural,\n                    \"class_name\": self.__class__.__name__,\n                }\n            )\n\n        # Filter down a queryset from self.queryset using the date from the\n        # URL. This'll get passed as the queryset to DetailView.get_object,\n        # which'll handle the 404\n        lookup_kwargs = self._make_single_date_lookup(date)\n        qs = qs.filter(**lookup_kwargs)\n\n        return super().get_object(queryset=qs)\n\n\nclass DateDetailView(SingleObjectTemplateResponseMixin, BaseDateDetailView):\n    \"\"\"\n    Detail view of a single object on a single date; this differs from the\n    standard DetailView by accepting a year/month/day in the URL.\n    \"\"\"\n\n    template_name_suffix = \"_detail\"\n\n\ndef _date_from_string(\n    year, year_format, month=\"\", month_format=\"\", day=\"\", day_format=\"\", delim=\"__\"\n):\n    \"\"\"\n    Get a datetime.date object given a format string and a year, month, and day\n    (only year is mandatory). Raise a 404 for an invalid date.\n    \"\"\"\n    format = year_format + delim + month_format + delim + day_format\n    datestr = str(year) + delim + str(month) + delim + str(day)\n    try:\n        return datetime.datetime.strptime(datestr, format).date()\n    except ValueError:\n        raise Http404(\n            _(\"Invalid date string \u201c%(datestr)s\u201d given format \u201c%(format)s\u201d\")\n            % {\n                \"datestr\": datestr,\n                \"format\": format,\n            }\n        )\n\n\ndef _",
                "filename": "django/views/generic/dates.py",
                "start_index": 20071,
                "end_index": 22611,
                "start_line": 626,
                "end_line": 700,
                "max_line": 795,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": "",
                "context_relevance": 0.1
            },
            {
                "code": "import datetime\nimport io\nimport json\nimport mimetypes\nimport os\nimport re\nimport sys\nimport time\nimport warnings\nfrom email.header import Header\nfrom http.client import responses\nfrom urllib.parse import urlparse\n\nfrom asgiref.sync import async_to_sync, sync_to_async\n\nfrom django.conf import settings\nfrom django.core import signals, signing\nfrom django.core.exceptions import DisallowedRedirect\nfrom django.core.serializers.json import DjangoJSONEncoder\nfrom django.http.cookie import SimpleCookie\nfrom django.utils import timezone\nfrom django.utils.datastructures import CaseInsensitiveMapping\nfrom django.utils.encoding import iri_to_uri\nfrom django.utils.http import content_disposition_header, http_date\nfrom django.utils.regex_helper import _lazy_re_compile\n\n_charset_from_content_type_re = _lazy_re_compile(\n    r\";\\s*charset=(?P<charset>[^\\s;]+)\", re.I\n)",
                "filename": "django/http/response.py",
                "start_index": 0,
                "end_index": 864,
                "start_line": 1,
                "end_line": 734,
                "max_line": 734,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "import datetime\nimport functools\nimport os\nimport subprocess\nimport sys\n\nfrom django.utils.regex_helper import _lazy_re_compile\n\n# Private, stable API for detecting the Python version. PYXY means \"Python X.Y\n# or later\". So that third-party apps can use these values, each constant\n# should remain as long as the oldest supported Django version supports that\n# Python version.\nPY36 = sys.version_info >= (3, 6)\nPY37 = sys.version_info >= (3, 7)\nPY38 = sys.version_info >= (3, 8)\nPY39 = sys.version_info >= (3, 9)\nPY310 = sys.version_info >= (3, 10)\nPY311 = sys.version_info >= (3, 11)\nPY312 = sys.version_info >= (3, 12)\n\n\ndef get_version(version=None):\n    \"\"\"Return a PEP 440-compliant version number from VERSION.\"\"\"\n    version = get_complete_version(version)\n\n    # Now build the two parts of the version number:\n    # main = X.Y[.Z]\n    # sub = .devN - for pre-alpha releases\n    #     | {a|b|rc}N - for alpha, beta, and rc releases\n\n    main = get_main_version(version)\n\n    sub = \"\"\n    if version[3] == \"alpha\" and version[4] == 0:\n        git_changeset = get_git_changeset()\n        if git_changeset:\n            sub = \".dev%s\" % git_changeset\n\n    elif version[3] != \"final\":\n        mapping = {\"alpha\": \"a\", \"beta\": \"b\", \"rc\": \"rc\"}\n        sub = mapping[version[3]] + str(version[4])\n\n    return main + sub\n\n\ndef get_main_version(version=None):\n    \"\"\"Return main version (X.Y[.Z]) from VERSION.\"\"\"\n    version = get_complete_version(version)\n    parts = 2 if version[2] == 0 else 3\n    return \".\".join(str(x) for x in version[:parts])\n\n\ndef get_complete_version(version=None):\n    \"\"\"\n    Return a tuple of the django version. If version argument is non-empty,\n    check for correctness of the tuple provided.\n    \"\"\"\n    if version is None:\n        from django import VERSION as version\n    else:\n        assert len(version) == 5\n        assert version[3] in (\"alpha\", \"beta\", \"rc\", \"final\")\n\n    return version\n\n\ndef get_docs_version(version=None):\n    version = get_complete_version(version)\n    if version[3] != \"final\":\n        return \"dev\"\n    else:\n        return \"%d.%d\" % version[:2]",
                "filename": "django/utils/version.py",
                "start_index": 0,
                "end_index": 2106,
                "start_line": 1,
                "end_line": 72,
                "max_line": 121,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "@staticmethod\n    def _parse_date_fmt():\n        fmt = get_format(\"DATE_FORMAT\")\n        escaped = False\n        for char in fmt:\n            if escaped:\n                escaped = False\n            elif char == \"\\\\\":\n                escaped = True\n            elif char in \"Yy\":\n                yield \"year\"\n            elif char in \"bEFMmNn\":\n                yield \"month\"\n            elif char in \"dj\":\n                yield \"day\"\n\n    def id_for_label(self, id_):\n        for first_select in self._parse_date_fmt():\n            return \"%s_%s\" % (id_, first_select)\n        return \"%s_month\" % id_\n\n    def value_from_datadict(self, data, files, name):\n        y = data.get(self.year_field % name)\n        m = data.get(self.month_field % name)\n        d = data.get(self.day_field % name)\n        if y == m == d == \"\":\n            return None\n        if y is not None and m is not None and d is not None:\n            input_format = get_format(\"DATE_INPUT_FORMATS\")[0]\n            input_format = formats.sanitize_strftime_format(input_format)\n            try:\n                date_value = datetime.date(int(y), int(m), int(d))\n            except ValueError:\n                # Return pseudo-ISO dates with zeros for any unselected values,\n                # e.g. '2017-0-23'.\n                return \"%s-%s-%s\" % (y or 0, m or 0, d or 0)\n            except OverflowError:\n                return \"0-0-0\"\n            return date_value.strftime(input_format)\n        return data.get(name)\n\n    def value_omitted_from_data(self, data, files, name):\n        return not any(\n            (\"{}_{}\".format(name, interval) in data)\n            for interval in (\"year\", \"month\", \"day\")\n        )",
                "filename": "django/forms/widgets.py",
                "start_index": 37653,
                "end_index": 39334,
                "start_line": 143,
                "end_line": 1200,
                "max_line": 1200,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "import base64\nimport datetime\nimport re\nimport unicodedata\nfrom binascii import Error as BinasciiError\nfrom email.utils import formatdate\nfrom urllib.parse import quote, unquote\nfrom urllib.parse import urlencode as original_urlencode\nfrom urllib.parse import urlparse\n\nfrom django.utils.datastructures import MultiValueDict\nfrom django.utils.regex_helper import _lazy_re_compile\n\n# Based on RFC 9110 Appendix A.\nETAG_MATCH = _lazy_re_compile(\n    r\"\"\"\n    \\A(      # start of string and capture group\n    (?:W/)?  # optional weak indicator\n    \"        # opening quote\n    [^\"]*    # any sequence of non-quote characters\n    \"        # end quote\n    )\\Z      # end of string and capture group\n\"\"\",\n    re.X,\n)\n\nMONTHS = \"jan feb mar apr may jun jul aug sep oct nov dec\".split()\n__D = r\"(?P<day>[0-9]{2})\"\n__D2 = r\"(?P<day>[ 0-9][0-9])\"\n__M = r\"(?P<mon>\\w{3})\"\n__Y = r\"(?P<year>[0-9]{4})\"\n__Y2 = r\"(?P<year>[0-9]{2})\"\n__T = r\"(?P<hour>[0-9]{2}):(?P<min>[0-9]{2}):(?P<sec>[0-9]{2})\"\nRFC1123_DATE = _lazy_re_compile(r\"^\\w{3}, %s %s %s %s GMT$\" % (__D, __M, __Y, __T))\nRFC850_DATE = _lazy_re_compile(r\"^\\w{6,9}, %s-%s-%s %s GMT$\" % (__D, __M, __Y2, __T))\nASCTIME_DATE = _lazy_re_compile(r\"^\\w{3} %s %s %s %s$\" % (__M, __D2, __T, __Y))\n\nRFC3986_GENDELIMS = \":/?#[]@\"\nRFC3986_SUBDELIMS = \"!$&'()*+,;=\"\n\n\ndef urlencode(query, doseq=False):\n    \"\"\"\n    A version of Python's urllib.parse.urlencode() function that can operate on\n    MultiValueDict and non-string values.\n    \"\"\"\n    if isinstance(query, MultiValueDict):\n        query = query.lists()\n    elif hasattr(query, \"items\"):\n        query = query.items()\n    query_params = []\n    for key, value in query:\n        if value is None:\n            raise TypeError(\n                \"Cannot encode None for key '%s' in a query string. Did you \"\n                \"mean to pass an empty string or omit the value?\" % key\n            )\n        elif not doseq or isinstance(value, (str, bytes)):\n            query_val = value\n        else:\n            try:\n                itr = iter(value)\n            except TypeError:\n                query_val = value\n            else:\n                # Consume generators and iterators, when doseq=True, to\n                # work around https://bugs.python.org/issue31706.\n                query_val = []\n                for item in itr:\n                    if item is None:\n                        raise TypeError(\n                            \"Cannot encode None for key '%s' in a query \"\n                            \"string. Did you mean to pass an empty string or \"\n                            \"omit the value?\" % key\n                        )\n                    elif not isinstance(item, bytes):\n                        item = str(item)\n                    query_val.append(item)\n        query_params.append((key, query_val))\n    return original_urlencode(query_params, doseq)",
                "filename": "django/utils/http.py",
                "start_index": 0,
                "end_index": 2859,
                "start_line": 1,
                "end_line": 80,
                "max_line": 375,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "import datetime\nimport decimal\nimport functools\nimport logging\nimport time\nfrom contextlib import contextmanager\nfrom hashlib import md5\n\nfrom django.db import NotSupportedError\nfrom django.utils.dateparse import parse_time\n\nlogger = logging.getLogger(\"django.db.backends\")",
                "filename": "django/db/backends/utils.py",
                "start_index": 0,
                "end_index": 273,
                "start_line": 1,
                "end_line": 12,
                "max_line": 320,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": "",
                "context_relevance": 0.2
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "django/utils/http.py": [
                {
                    "chunk": {
                        "code": "def http_date(epoch_seconds=None):\n    \"\"\"\n    Format the time to match the RFC 5322 date format as specified by RFC 9110\n    Section 5.6.7.\n\n    `epoch_seconds` is a floating point number expressed in seconds since the\n    epoch, in UTC - such as that outputted by time.time(). If set to None, it\n    defaults to the current time.\n\n    Output a string in the format 'Wdy, DD Mon YYYY HH:MM:SS GMT'.\n    \"\"\"\n    return formatdate(epoch_seconds, usegmt=True)\n\n\ndef parse_http_date(date):\n    \"\"\"\n    Parse a date format as specified by HTTP RFC 9110 Section 5.6.7.\n\n    The three formats allowed by the RFC are accepted, even if only the first\n    one is still in widespread use.\n\n    Return an integer expressed in seconds since the epoch, in UTC.\n    \"\"\"\n    # email.utils.parsedate() does the job for RFC 1123 dates; unfortunately\n    # RFC 9110 makes it mandatory to support RFC 850 dates too. So we roll\n    # our own RFC-compliant parsing.\n    for regex in RFC1123_DATE, RFC850_DATE, ASCTIME_DATE:\n        m = regex.match(date)\n        if m is not None:\n            break\n    else:\n        raise ValueError(\"%r is not in a valid HTTP date format\" % date)\n    try:\n        tz = datetime.timezone.utc\n        year = int(m[\"year\"])\n        if year < 100:\n            current_year = datetime.datetime.now(tz=tz).year\n            current_century = current_year - (current_year % 100)\n            if year - (current_year % 100) > 50:\n                # year that appears to be more than 50 years in the future are\n                # interpreted as representing the past.\n                year += current_century - 100\n            else:\n                year += current_century\n        month = MONTHS.index(m[\"mon\"].lower()) + 1\n        day = int(m[\"day\"])\n        hour = int(m[\"hour\"])\n        min = int(m[\"min\"])\n        sec = int(m[\"sec\"])\n        result = datetime.datetime(year, month, day, hour, min, sec, tzinfo=tz)\n        return int(result.timestamp())\n    except Exception as exc:\n        raise ValueError(\"%r is not a valid date\" % date) from exc\n\n\ndef parse_http_date_safe(date):\n    \"\"\"\n    Same as parse_http_date, but return None if the input is invalid.\n    \"\"\"\n    try:\n        return parse_http_date(date)\n    except Exception:\n        pass\n\n\n# Base 36 functions: useful for generating compact URLs\n\n\ndef base36_to_int(s):\n    \"\"\"\n    Convert a base 36 string to an int. Raise ValueError if the input won't fit\n    into an int.\n    \"\"\"\n    # To prevent overconsumption of server resources, reject any\n    # base36 string that is longer than 13 base36 digits (13 digits\n    # is sufficient to base36-encode any 64-bit integer)\n    if len(s) > 13:\n        raise ValueError(\"Base36 input too large\")\n    return int(s, 36)",
                        "filename": "django/utils/http.py",
                        "start_index": 2862,
                        "end_index": 5592,
                        "start_line": 83,
                        "end_line": 161,
                        "max_line": 375,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the parse_http_date function, which is directly related to the issue of handling two-digit years incorrectly according to RFC 7231."
                }
            ]
        },
        "solution_task": "- Update the `parse_http_date` function in `django/utils/http.py` to correctly handle two-digit years according to RFC 7231 and RFC 2822.\n- Replace the current logic that uses hardcoded ranges for determining the century of a two-digit year with a comparison against the current year.\n- The updated logic should interpret two-digit years within 50 years before and up to the current year as belonging to the current century, and those more than 50 years ahead as belonging to the previous century.\n\n```python\ndef parse_http_date(date):\n    \"\"\"\n    Parse a date format as specified by HTTP RFC 9110 Section 5.6.7.\n\n    The three formats allowed by the RFC are accepted, even if only the first\n    one is still in widespread use.\n\n    Return an integer expressed in seconds since the epoch, in UTC.\n    \"\"\"\n    # ... (existing code) ...\n\n    try:\n        tz = datetime.timezone.utc\n        year = int(m[\"year\"])\n        if year < 100:\n            current_year = datetime.datetime.now(tz=tz).year\n            current_century = current_year - (current_year % 100)\n            # Determine if the year is within the last 50 years\n            if 0 <= (current_year % 100) - year <= 50:\n                year += current_century\n            else:\n                # If not, it's from the previous century\n                year += current_century - 100\n        # ... (existing code) ...\n    except Exception as exc:\n        raise ValueError(\"%r is not a valid date\" % date) from exc\n```\n\n- Ensure that the updated logic is placed within the existing try-except block where the year is being parsed and interpreted.\n- Test the updated function to ensure it correctly interprets two-digit years as per the new logic.",
        "bouncer_response": {
            "score": 9,
            "criteria": "RESPONSE must provide precise, actionable guidance and directly address all aspects of the described bug to facilitate its resolution.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable solution to the described bug in the parse_http_date function. It suggests updating the function to handle two-digit years according to RFC 7231 and RFC 2822, replacing the hardcoded logic with a dynamic comparison against the current year. The provided code snippet is relevant and directly addresses the issue by implementing a check to determine if the year is within the last 50 years or from the previous century. The RESPONSE also advises placing the updated logic within the existing try-except block and testing the function to ensure correct interpretation of two-digit years. The RESPONSE is comprehensive and nearly complete, but it does not explicitly mention the need to account for edge cases or provide a testing strategy, which could be considered for a perfect score.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711732970.580747,
        "result": "- Update the `parse_http_date` function in `django/utils/http.py` to correctly handle two-digit years according to RFC 7231 and RFC 2822.\n- Replace the current logic that uses hardcoded ranges for determining the century of a two-digit year with a comparison against the current year.\n- The updated logic should interpret two-digit years within 50 years before and up to the current year as belonging to the current century, and those more than 50 years ahead as belonging to the previous century.\n\n```python\ndef parse_http_date(date):\n    \"\"\"\n    Parse a date format as specified by HTTP RFC 9110 Section 5.6.7.\n\n    The three formats allowed by the RFC are accepted, even if only the first\n    one is still in widespread use.\n\n    Return an integer expressed in seconds since the epoch, in UTC.\n    \"\"\"\n    # ... (existing code) ...\n\n    try:\n        tz = datetime.timezone.utc\n        year = int(m[\"year\"])\n        if year < 100:\n            current_year = datetime.datetime.now(tz=tz).year\n            current_century = current_year - (current_year % 100)\n            # Determine if the year is within the last 50 years\n            if 0 <= (current_year % 100) - year <= 50:\n                year += current_century\n            else:\n                # If not, it's from the previous century\n                year += current_century - 100\n        # ... (existing code) ...\n    except Exception as exc:\n        raise ValueError(\"%r is not a valid date\" % date) from exc\n```\n\n- Ensure that the updated logic is placed within the existing try-except block where the year is being parsed and interpreted.\n- Test the updated function to ensure it correctly interprets two-digit years as per the new logic.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__3.1/tree//django) \u2192 [utils](https://github.com/testbed/django__django__3.1/tree//django/utils)- [Lines 83 - 161](https://github.com/testbed/django__django__3.1/blob//django/utils/http.py#L83-L161)\n\n This snippet contains the parse_http_date function, which is directly related to the issue of handling two-digit years incorrectly according to RFC 7231.",
        "context_relevance": 0.21000000000000002,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE must be relevant to the entire PROMPT and answer it completely to get a score of 10.\nSupporting Evidence: The RESPONSE provides a detailed solution to the issue described in the PROMPT, which is the incorrect handling of two-digit years in the `parse_http_date` function according to RFC 7231 and RFC 2822. It suggests updating the function to handle two-digit years correctly by comparing them against the current year, rather than using hardcoded ranges. The RESPONSE includes a code snippet that demonstrates how to implement the proposed changes within the existing structure of the function. Additionally, it advises testing the updated function to ensure it works as intended. The RESPONSE is directly related to the entire PROMPT, addressing the specific problem and providing a clear solution, which is why it receives the highest relevance score."
        },
        "qa_relevance": 1.0
    }
}