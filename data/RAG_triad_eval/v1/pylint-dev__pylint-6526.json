{
    "id": "pylint-dev__pylint-6526",
    "repo_name": "testbed/pylint-dev__pylint__2.14",
    "task_id": 2115267216961307400,
    "title": "How does pylint decide where it should put stat files?",
    "body": "### Question\r\n\r\nI am from the VS Code python extension team, working on building an extension for VS Code using pylint. We have pre-release version out. An issue was reported on the extension that it creates pylint stat files in the project directory. We are not specifically passing anything to change the stat file location (see issue here https://github.com/microsoft/vscode-pylint/issues/30).\r\n\r\nGenerally, the stat files go into pre-set directory like %USERPROFILE%/AppData/Local/pylint on windows. What can cause these to be written to the current working directory.\r\n\r\nWe use pass the source code into pylint via stdin, and the only two arguments we use are `--reports=n`, `--output-format=json`. Any clue to debug this would be helpful.\r\n\r\n\r\n### Documentation for future user\r\n\r\nI could not find fall back location for the stat files and when would the fallback location be used.\r\n\r\n### Additional context\r\n\r\nWe use `runpy.run_module` to run pylint, and we send source to pylint via stdin. \r\nRelevant code here: https://github.com/microsoft/vscode-pylint/blob/725fc7ae415a9638e2a44e922cf5133efde62811/bundled/linter/utils.py#L146-L168\r\n\r\n\r\n\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pylint-dev__pylint__2.14.git",
    "requested_commit": "",
    "mayil_response": "Pylint uses the `PYLINT_HOME` environment variable to determine where to store its stat files. If `PYLINT_HOME` is not set, it defaults to a platform-specific user cache directory, which is determined using the `platformdirs` library. On Windows, this would typically be `%USERPROFILE%/AppData/Local/pylint`.\n\nThe relevant code snippet from `pylint/constants.py` is:\n\n```python\nDEFAULT_PYLINT_HOME = platformdirs.user_cache_dir(\"pylint\")\n\ndef _get_pylint_home() -> str:\n    \"\"\"Return the pylint home.\"\"\"\n    if \"PYLINTHOME\" in os.environ:\n        return os.environ[\"PYLINTHOME\"]\n    return DEFAULT_PYLINT_HOME\n\nPYLINT_HOME = _get_pylint_home()\n```\n\nIf the stat files are being written to the current working directory, it could be due to one of the following reasons:\n\n- The `PYLINTHOME` environment variable is set to the current working directory.\n- The `platformdirs.user_cache_dir(\"pylint\")` is somehow resolving to the current working directory.\n- The code that runs Pylint is changing the current working directory to the project directory before running Pylint.\n\nTo debug this issue, you can:\n\n- Check if the `PYLINTHOME` environment variable is set in the environment where VS Code is running the extension.\n- Inspect the value of `DEFAULT_PYLINT_HOME` at runtime to see what directory it resolves to.\n- Ensure that the current working directory is not being changed by the extension before Pylint is invoked.\n\nThe relevant code snippet from `pylint/lint/caching.py` for saving results is:\n\n```python\ndef save_results(\n    results: LinterStats, base: str | Path, pylint_home: str | Path = PYLINT_HOME\n) -> None:\n    base = Path(base)\n    pylint_home = Path(pylint_home)\n    try:\n        pylint_home.mkdir(parents=True, exist_ok=True)\n    except OSError:  # pragma: no cover\n        print(f\"Unable to create directory {pylint_home}\", file=sys.stderr)\n    data_file = _get_pdata_path(base, 1)\n    try:\n        with open(data_file, \"wb\") as stream:\n            pickle.dump(results, stream)\n    except OSError as ex:  # pragma: no cover\n        print(f\"Unable to create file {data_file}: {ex}\", file=sys.stderr)\n```\n\nThis function uses the `pylint_home` parameter to determine where to save the results. If this parameter is not provided, it defaults to `PYLINT_HOME`.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.000394,
        "snippet_processor": 0.05498,
        "issue_star_creation": 0.03671,
        "issue_star_solver": 0.04805,
        "bouncer": 0.02606
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711700046.3924348,
        "relevant_snippets": [
            {
                "code": "name: \ud83e\udd14 Support question\ndescription: Questions about pylint that are not covered in the documentation\nlabels: [\"Needs triage :inbox_tray:\", \"Question\", \"Documentation :green_book:\"]\nbody:\n  - type: markdown\n    attributes:\n      value: >\n        **Thank you for wanting to report a problem with pylint documentation!**\n\n\n        Please fill out your suggestions below. If the problem seems straightforward,\n        feel free to go ahead and submit a pull request instead!\n\n\n        \u26a0 Verify first that your issue is not [already reported on GitHub][issue\n        search].\n\n        \ud83d\udcac If you are seeking community support, please consider [starting a discussion\n        on Discord][Discussions].\n\n\n        [issue search]:\n        https://github.com/pylint-dev/pylint/issues?q=is%3Aissue+is%3Aopen+\n\n        [Discussions]: https://discord.com/invite/Egy6P8AMB5\n\n  - type: textarea\n    id: question\n    attributes:\n      label: Question\n    validations:\n      required: true\n  - type: textarea\n    id: documentation\n    attributes:\n      label: Documentation for future user\n      description:\n        Where did you expect this information to be? What do we need to add or what do\n        we need to reorganize?\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: Additional context\n      description: >\n        Add any other context, links, etc. about the question here.\n      placeholder: >-\n        I asked on https://stackoverflow.com/... and the community advised me to do X, Y\n        and Z.",
                "filename": ".github/ISSUE_TEMPLATE/QUESTION.yml",
                "start_index": 0,
                "end_index": 1528,
                "start_line": 1,
                "end_line": 49,
                "max_line": 49,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nimport os\nimport platform\nimport sys\n\nimport astroid\nimport platformdirs\n\nfrom pylint.__pkginfo__ import __version__\nfrom pylint.typing import MessageTypesFullName\n\nPY38_PLUS = sys.version_info[:2] >= (3, 8)\nPY39_PLUS = sys.version_info[:2] >= (3, 9)\nPY310_PLUS = sys.version_info[:2] >= (3, 10)\nPY312_PLUS = sys.version_info[:2] >= (3, 12)\n\nIS_PYPY = platform.python_implementation() == \"PyPy\"\n\nPY_EXTS = (\".py\", \".pyc\", \".pyo\", \".pyw\", \".so\", \".dll\")\n\nMSG_STATE_CONFIDENCE = 2\n_MSG_ORDER = \"EWRCIF\"\nMSG_STATE_SCOPE_CONFIG = 0\nMSG_STATE_SCOPE_MODULE = 1\n\n# The line/node distinction does not apply to fatal errors and reports.\n_SCOPE_EXEMPT = \"FR\"\n\nMSG_TYPES: dict[str, MessageTypesFullName] = {\n    \"I\": \"info\",\n    \"C\": \"convention\",\n    \"R\": \"refactor\",\n    \"W\": \"warning\",\n    \"E\": \"error\",\n    \"F\": \"fatal\",\n}\nMSG_TYPES_LONG: dict[str, str] = {v: k for k, v in MSG_TYPES.items()}\n\nMSG_TYPES_STATUS = {\"I\": 0, \"C\": 16, \"R\": 8, \"W\": 4, \"E\": 2, \"F\": 1}\n\n# You probably don't want to change the MAIN_CHECKER_NAME\n# This would affect rcfile generation and retro-compatibility\n# on all project using [MAIN] in their rcfile.\nMAIN_CHECKER_NAME = \"main\"\n\nDEFAULT_PYLINT_HOME = platformdirs.user_cache_dir(\"pylint\")\n\nDEFAULT_IGNORE_LIST = (\"CVS\",)\n\n\nclass WarningScope:\n    LINE = \"line-based-msg\"\n    NODE = \"node-based-msg\"\n\n\nfull_version = f\"\"\"pylint {__version__}\nastroid {astroid.__version__}\nPython {sys.version}\"\"\"\n\nHUMAN_READABLE_TYPES = {\n    \"file\": \"file\",\n    \"module\": \"module\",\n    \"const\": \"constant\",\n    \"class\": \"class\",\n    \"function\": \"function\",\n    \"method\": \"method\",\n    \"attr\": \"attribute\",\n    \"argument\": \"argument\",\n    \"variable\": \"variable\",\n    \"class_attribute\": \"class attribute\",\n    \"class_const\": \"class constant\",\n    \"inlinevar\": \"inline iteration\",\n    \"typevar\": \"type variable\",\n    \"typealias\": \"type alias\",\n}\n\n# ignore some messages when emitting useless-suppression:\n# - cyclic-import: can show false positives due to incomplete context\n# - deprecated-{module, argument, class, method, decorator}:\n#   can cause false positives for multi-interpreter projects\n#   when linting with an interpreter on a lower python version\nINCOMPATIBLE_WITH_USELESS_SUPPRESSION = frozenset(\n    [\n        \"R0401\",  # cyclic-import\n        \"W0402\",  # deprecated-module\n        \"W1505\",  # deprecated-method\n        \"W1511\",  # deprecated-argument\n        \"W1512\",  # deprecated-class\n        \"W1513\",  # deprecated-decorator\n        \"R0801\",  # duplicate-code\n    ]\n)\n\n\ndef _get_pylint_home() -> str:\n    \"\"\"Return the pylint home.\"\"\"\n    if \"PYLINTHOME\" in os.environ:\n        return os.environ[\"PYLINTHOME\"]\n    return DEFAULT_PYLINT_HOME\n\n\nPYLINT_HOME = _get_pylint_home()",
                "filename": "pylint/constants.py",
                "start_index": 0,
                "end_index": 2966,
                "start_line": 1,
                "end_line": 107,
                "max_line": 251,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 0.7
            },
            {
                "code": "name: \u2728 Feature request\ndescription: Suggest an idea for pylint\nlabels: [\"Needs triage :inbox_tray:\"]\nbody:\n  - type: markdown\n    attributes:\n      value: |\n        **Thank you for wanting to make a suggestion for pylint!**\n\n        \u26a0 Please make sure that [this feature wasn't already requested][issue search] or already implemented in the main branch.\n\n\n        [issue search]: https://github.com/pylint-dev/pylint/issues?q=is%3Aissue+is%3Aopen+\n\n  - type: textarea\n    id: current-problem\n    attributes:\n      label: Current problem\n      description:\n        What are you trying to do, that you are unable to achieve with pylint as it\n        currently stands?\n      placeholder: >-\n        I'm trying to do X and I'm missing feature Y for this to be easily achievable.\n    validations:\n      required: true\n  - type: textarea\n    id: proposed-solution\n    attributes:\n      label: Desired solution\n      description: A clear and concise description of what you want to happen.\n      placeholder: >-\n        When I do X, I want to achieve Y in a situation when Z.\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: Additional context\n      description: >\n        Add any other context, links, etc. about the feature here. Describe how the\n        feature would be used, why it is needed and what it would solve.\n\n        **HINT:** You can paste https://gist.github.com links for larger files.\n      placeholder: >-\n        I asked on https://stackoverflow.com/... and the community advised me to do X, Y\n        and Z.",
                "filename": ".github/ISSUE_TEMPLATE/FEATURE-REQUEST.yml",
                "start_index": 0,
                "end_index": 1559,
                "start_line": 1,
                "end_line": 45,
                "max_line": 45,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nimport pickle\nimport sys\nimport warnings\nfrom pathlib import Path\n\nfrom pylint.constants import PYLINT_HOME\nfrom pylint.utils import LinterStats\n\nPYLINT_HOME_AS_PATH = Path(PYLINT_HOME)\n\n\ndef _get_pdata_path(\n    base_name: Path, recurs: int, pylint_home: Path = PYLINT_HOME_AS_PATH\n) -> Path:\n    # We strip all characters that can't be used in a filename. Also strip '/' and\n    # '\\\\' because we want to create a single file, not sub-directories.\n    underscored_name = \"_\".join(\n        str(p.replace(\":\", \"_\").replace(\"/\", \"_\").replace(\"\\\\\", \"_\"))\n        for p in base_name.parts\n    )\n    return pylint_home / f\"{underscored_name}_{recurs}.stats\"\n\n\ndef load_results(\n    base: str | Path, pylint_home: str | Path = PYLINT_HOME\n) -> LinterStats | None:\n    base = Path(base)\n    pylint_home = Path(pylint_home)\n    data_file = _get_pdata_path(base, 1, pylint_home)\n\n    if not data_file.exists():\n        return None\n\n    try:\n        with open(data_file, \"rb\") as stream:\n            data = pickle.load(stream)\n            if not isinstance(data, LinterStats):\n                warnings.warn(\n                    \"You're using an old pylint cache with invalid data following \"\n                    f\"an upgrade, please delete '{data_file}'.\",\n                    UserWarning,\n                    stacklevel=2,\n                )\n                raise TypeError\n            return data\n    except Exception:  # pylint: disable=broad-except\n        # There's an issue with the cache but we just continue as if it isn't there\n        return None\n\n\ndef save_results(\n    results: LinterStats, base: str | Path, pylint_home: str | Path = PYLINT_HOME\n) -> None:\n    base = Path(base)\n    pylint_home = Path(pylint_home)\n    try:\n        pylint_home.mkdir(parents=True, exist_ok=True)\n    except OSError:  # pragma: no cover\n        print(f\"Unable to create directory {pylint_home}\", file=sys.stderr)\n    data_file = _get_pdata_path(base, 1)\n    try:\n        with open(data_file, \"wb\") as stream:\n            pickle.dump(results, stream)\n    except OSError as ex:  # pragma: no cover\n        print(f\"Unable to create file {data_file}: {ex}\", file=sys.stderr)",
                "filename": "pylint/lint/caching.py",
                "start_index": 0,
                "end_index": 2423,
                "start_line": 1,
                "end_line": 71,
                "max_line": 71,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 0.8
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nimport contextlib\nimport platform\nimport sys\nimport traceback\nfrom collections.abc import Iterator, Sequence\nfrom datetime import datetime\nfrom pathlib import Path\n\nfrom pylint.constants import PYLINT_HOME, full_version\n\n\ndef prepare_crash_report(ex: Exception, filepath: str, crash_file_path: str) -> Path:\n    issue_template_path = (\n        Path(PYLINT_HOME) / datetime.now().strftime(str(crash_file_path))\n    ).resolve()\n    with open(filepath, encoding=\"utf8\") as f:\n        file_content = f.read()\n    template = \"\"\n    if not issue_template_path.exists():\n        template = \"\"\"\\\nFirst, please verify that the bug is not already filled:\nhttps://github.com/pylint-dev/pylint/issues/\n\nThen create a new issue:\nhttps://github.com/pylint-dev/pylint/issues/new?labels=Crash \ud83d\udca5%2CNeeds triage \ud83d\udce5\n\n\n\"\"\"\n    template += f\"\"\"\nIssue title:\nCrash ``{ex}`` (if possible, be more specific about what made pylint crash)\n\n### Bug description\n\nWhen parsing the following ``a.py``:\n\n<!--\n If sharing the code is not an option, please state so,\n but providing only the stacktrace would still be helpful.\n -->\n\n```python\n{file_content}\n```\n\n### Command used\n\n```shell\npylint a.py\n```\n\n### Pylint output\n\n<details open>\n    <summary>\n        pylint crashed with a ``{ex.__class__.__name__}`` and with the following stacktrace:\n    </summary>\n\n```python\n\"\"\"\n    template += traceback.format_exc()\n    template += f\"\"\"\n```\n\n\n</details>\n\n### Expected behavior\n\nNo crash.\n\n### Pylint version\n\n```shell\n{full_version}\n```\n\n### OS / Environment\n\n{sys.platform} ({platform.system()})\n\n### Additional dependencies\n\n<!--\nPlease remove this part if you're not using any of\nyour dependencies in the example.\n -->\n\"\"\"\n    try:\n        with open(issue_template_path, \"a\", encoding=\"utf8\") as f:\n            f.write(template)\n    except Exception as exc:  # pylint: disable=broad-except\n        print(\n            f\"Can't write the issue template for the crash in {issue_template_path} \"\n            f\"because of: '{exc}'\\nHere's the content anyway:\\n{template}.\",\n            file=sys.stderr,\n        )\n    return issue_template_path\n\n\ndef get_fatal_error_message(filepath: str, issue_template_path: Path) -> str:\n    return (\n        f\"Fatal error while checking '{filepath}'. \"\n        f\"Please open an issue in our bug tracker so we address this. \"\n        f\"There is a pre-filled template that you can use in '{issue_template_path}'.\"\n    )\n\n\ndef",
                "filename": "pylint/lint/utils.py",
                "start_index": 0,
                "end_index": 2691,
                "start_line": 1,
                "end_line": 138,
                "max_line": 148,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nimport os\nfrom collections.abc import Callable\nfrom copy import copy\nfrom typing import TYPE_CHECKING, TextIO\n\nfrom pylint.message import Message\nfrom pylint.reporters.base_reporter import BaseReporter\nfrom pylint.utils import LinterStats\n\nif TYPE_CHECKING:\n    from pylint.lint import PyLinter\n    from pylint.reporters.ureports.nodes import Section",
                "filename": "pylint/reporters/multi_reporter.py",
                "start_index": 0,
                "end_index": 618,
                "start_line": 1,
                "end_line": 18,
                "max_line": 111,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "#!/usr/bin/env python\n\n# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nimport pylint\n\npylint.modify_sys_path()\npylint.run_pylint()",
                "filename": "pylint/__main__.py",
                "start_index": 0,
                "end_index": 314,
                "start_line": 1,
                "end_line": 10,
                "max_line": 10,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "- type: markdown\n    attributes:\n      value: |\n        **Thank you for wanting to report a bug in pylint!**\n\n        \u26a0 Please make sure that this [issue wasn't already requested][issue search], or already implemented in the main branch.\n\n\n        [issue search]: https://github.com/pylint-dev/pylint/issues?q=is%3Aissue+is%3Aopen+\n\n  - type: textarea\n    id: what-happened\n    attributes:\n      label: Bug description\n      description:\n        What is the bug about? Please provide the code that is causing the issue, and\n        configurations used if required\n      placeholder: |\n        # Please disable message unrelated to the bug\n        # pylint: disable=missing-docstring,\n        <a> = b + 1\n    validations:\n      required: true\n  - type: textarea\n    id: configuration\n    attributes:\n      label: Configuration\n      description:\n        Please provide the part of the configuration that is causing the bug if required\n        (Leave this part blank if the configuration is not relevant)\n      placeholder: |\n        # Leave this blank if the configuration is not relevant!\n\n        [MAIN]\n        load-plugins=\n            pylint.extensions.code_style\n\n        [MESSAGE CONTROL]\n        enable=\n            useless-suppression\n\n        # ...\n      render: ini\n  - type: textarea\n    id: cmd-used\n    attributes:\n      label: Command used\n      description: What was the command used to invoke pylint?\n      placeholder: |\n        pylint a.py\n      render: shell\n    validations:\n      required: true\n  - type: textarea\n    id: current-behavior\n    attributes:\n      label: Pylint output\n      description: What is the current pylint output?\n      placeholder: |\n        ************* Module a\n        a.py:3:1: E0001: invalid syntax (<unknown>, line 1) (syntax-error)\n      render: shell\n    validations:\n      required: true\n  - type: textarea\n    id: future-behavior\n    attributes:\n      label: Expected behavior\n      description:\n        What would you expect instead? For example expected output or behavior\n    validations:\n      required: true\n  - type: textarea\n    id: python-interpreter\n    attributes:\n      label: Pylint version\n      description: >-\n        Please copy and paste the result of `pylint --version` or specify the range of\n        version affected.\n      placeholder: |\n        pylint 2.9.6\n        astroid 2.6.5\n        Python 3.8.10 (default, Jun  2 2021, 10:49:15) [GCC 9.4.0]\n      render: shell\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: OS / Environment\n      description: >-\n        Provide all relevant information below, e.g. OS version, terminal etc.\n      placeholder: Fedora 33, Cygwin, etc.\n  -",
                "filename": ".github/ISSUE_TEMPLATE/BUG-REPORT.yml",
                "start_index": 101,
                "end_index": 2795,
                "start_line": 5,
                "end_line": 97,
                "max_line": 105,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "(\n            \"from-stdin\",\n            {\n                \"action\": \"store_true\",\n                \"default\": False,\n                \"metavar\": \"<flag>\",\n                \"help\": (\n                    \"Interpret the stdin as a python script, whose filename \"\n                    \"needs to be passed as the module_or_package argument.\"\n                ),\n            },\n        ),\n        (\n            \"source-roots\",\n            {\n                \"type\": \"glob_paths_csv\",\n                \"metavar\": \"<path>[,<path>...]\",\n                \"default\": (),\n                \"help\": \"Add paths to the list of the source roots. Supports globbing patterns. \"\n                \"The source root is an absolute path or a path relative to the current working \"\n                \"directory used to determine a package namespace for modules located under the \"\n                \"source root.\",\n            },\n        ),\n        (\n            \"recursive\",\n            {\n                \"type\": \"yn\",\n                \"metavar\": \"<yn>\",\n                \"default\": False,\n                \"help\": \"Discover python modules and packages in the file system subtree.\",\n            },\n        ),\n        (\n            \"py-version\",\n            {\n                \"default\": sys.version_info[:2],\n                \"type\": \"py_version\",\n                \"metavar\": \"<py_version>\",\n                \"help\": (\n                    \"Minimum Python version to use for version dependent checks. \"\n                    \"Will default to the version used to run pylint.\"\n                ),\n            },\n        ),\n        (\n            \"ignored-modules\",\n            {\n                \"default\": (),\n                \"type\": \"csv\",\n                \"metavar\": \"<module names>\",\n                \"help\": \"List of module names for which member attributes \"\n                \"should not be checked (useful for modules/projects \"\n                \"where namespaces are manipulated during runtime and \"\n                \"thus existing member attributes cannot be \"\n                \"deduced by static analysis). It supports qualified \"\n                \"module names, as well as Unix pattern matching.\",\n            },\n        ),\n        (\n            \"analyse-fallback-blocks\",\n            {\n                \"default\": False,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Analyse import fallback blocks. This can be used to \"\n                \"support both Python 2 and 3 compatible code, which \"\n                \"means that the block might have code that exists \"\n                \"only in one or another interpreter, leading to false \"\n                \"positives when analysed.\",\n            },\n        ),",
                "filename": "pylint/lint/base_options.py",
                "start_index": 12453,
                "end_index": 15152,
                "start_line": 3,
                "end_line": 595,
                "max_line": 596,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nimport sys\nimport warnings\nfrom glob import glob\nfrom itertools import chain\nfrom pathlib import Path\nfrom typing import TYPE_CHECKING\n\nfrom pylint import reporters\nfrom pylint.config.config_file_parser import _ConfigurationFileParser\nfrom pylint.config.exceptions import (\n    ArgumentPreprocessingError,\n    _UnrecognizedOptionError,\n)\nfrom pylint.utils import utils\n\nif TYPE_CHECKING:\n    from pylint.lint import PyLinter",
                "filename": "pylint/config/config_initialization.py",
                "start_index": 0,
                "end_index": 692,
                "start_line": 1,
                "end_line": 23,
                "max_line": 201,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 0.2
            }
        ],
        "classification": "question",
        "question_answerer_task": "Pylint uses the `PYLINT_HOME` environment variable to determine where to store its stat files. If `PYLINT_HOME` is not set, it defaults to a platform-specific user cache directory, which is determined using the `platformdirs` library. On Windows, this would typically be `%USERPROFILE%/AppData/Local/pylint`.\n\nThe relevant code snippet from `pylint/constants.py` is:\n\n```python\nDEFAULT_PYLINT_HOME = platformdirs.user_cache_dir(\"pylint\")\n\ndef _get_pylint_home() -> str:\n    \"\"\"Return the pylint home.\"\"\"\n    if \"PYLINTHOME\" in os.environ:\n        return os.environ[\"PYLINTHOME\"]\n    return DEFAULT_PYLINT_HOME\n\nPYLINT_HOME = _get_pylint_home()\n```\n\nIf the stat files are being written to the current working directory, it could be due to one of the following reasons:\n\n- The `PYLINTHOME` environment variable is set to the current working directory.\n- The `platformdirs.user_cache_dir(\"pylint\")` is somehow resolving to the current working directory.\n- The code that runs Pylint is changing the current working directory to the project directory before running Pylint.\n\nTo debug this issue, you can:\n\n- Check if the `PYLINTHOME` environment variable is set in the environment where VS Code is running the extension.\n- Inspect the value of `DEFAULT_PYLINT_HOME` at runtime to see what directory it resolves to.\n- Ensure that the current working directory is not being changed by the extension before Pylint is invoked.\n\nThe relevant code snippet from `pylint/lint/caching.py` for saving results is:\n\n```python\ndef save_results(\n    results: LinterStats, base: str | Path, pylint_home: str | Path = PYLINT_HOME\n) -> None:\n    base = Path(base)\n    pylint_home = Path(pylint_home)\n    try:\n        pylint_home.mkdir(parents=True, exist_ok=True)\n    except OSError:  # pragma: no cover\n        print(f\"Unable to create directory {pylint_home}\", file=sys.stderr)\n    data_file = _get_pdata_path(base, 1)\n    try:\n        with open(data_file, \"wb\") as stream:\n            pickle.dump(results, stream)\n    except OSError as ex:  # pragma: no cover\n        print(f\"Unable to create file {data_file}: {ex}\", file=sys.stderr)\n```\n\nThis function uses the `pylint_home` parameter to determine where to save the results. If this parameter is not provided, it defaults to `PYLINT_HOME`.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant information that can directly lead to a thorough understanding of the question posed.",
            "supporting_evidence": "The RESPONSE provides a detailed explanation of how Pylint determines the location for storing stat files, referencing the `PYLINT_HOME` environment variable and the `platformdirs` library. It also includes actual code snippets from Pylint's source code, which adds significant value to the explanation. Furthermore, the RESPONSE offers actionable steps for debugging the issue reported by the user, such as checking the `PYLINTHOME` environment variable, inspecting the value of `DEFAULT_PYLINT_HOME`, and ensuring that the current working directory is not changed before invoking Pylint. These steps are directly relevant to the user's query and provide a clear path for investigation.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711700130.8199759,
        "result": "Pylint uses the `PYLINT_HOME` environment variable to determine where to store its stat files. If `PYLINT_HOME` is not set, it defaults to a platform-specific user cache directory, which is determined using the `platformdirs` library. On Windows, this would typically be `%USERPROFILE%/AppData/Local/pylint`.\n\nThe relevant code snippet from `pylint/constants.py` is:\n\n```python\nDEFAULT_PYLINT_HOME = platformdirs.user_cache_dir(\"pylint\")\n\ndef _get_pylint_home() -> str:\n    \"\"\"Return the pylint home.\"\"\"\n    if \"PYLINTHOME\" in os.environ:\n        return os.environ[\"PYLINTHOME\"]\n    return DEFAULT_PYLINT_HOME\n\nPYLINT_HOME = _get_pylint_home()\n```\n\nIf the stat files are being written to the current working directory, it could be due to one of the following reasons:\n\n- The `PYLINTHOME` environment variable is set to the current working directory.\n- The `platformdirs.user_cache_dir(\"pylint\")` is somehow resolving to the current working directory.\n- The code that runs Pylint is changing the current working directory to the project directory before running Pylint.\n\nTo debug this issue, you can:\n\n- Check if the `PYLINTHOME` environment variable is set in the environment where VS Code is running the extension.\n- Inspect the value of `DEFAULT_PYLINT_HOME` at runtime to see what directory it resolves to.\n- Ensure that the current working directory is not being changed by the extension before Pylint is invoked.\n\nThe relevant code snippet from `pylint/lint/caching.py` for saving results is:\n\n```python\ndef save_results(\n    results: LinterStats, base: str | Path, pylint_home: str | Path = PYLINT_HOME\n) -> None:\n    base = Path(base)\n    pylint_home = Path(pylint_home)\n    try:\n        pylint_home.mkdir(parents=True, exist_ok=True)\n    except OSError:  # pragma: no cover\n        print(f\"Unable to create directory {pylint_home}\", file=sys.stderr)\n    data_file = _get_pdata_path(base, 1)\n    try:\n        with open(data_file, \"wb\") as stream:\n            pickle.dump(results, stream)\n    except OSError as ex:  # pragma: no cover\n        print(f\"Unable to create file {data_file}: {ex}\", file=sys.stderr)\n```\n\nThis function uses the `pylint_home` parameter to determine where to save the results. If this parameter is not provided, it defaults to `PYLINT_HOME`.",
        "context_relevance": 0.31000000000000005,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE is relevant and answers the entire PROMPT completely.\nSupporting Evidence: The RESPONSE provides a detailed explanation of how pylint decides where to put stat files, referencing the `PYLINT_HOME` environment variable and the `platformdirs` library. It addresses the specific issue raised in the PROMPT about stat files being created in the project directory and offers potential reasons and debugging steps. The RESPONSE also includes relevant code snippets from pylint's source code, which directly relates to the user's question and the additional context provided. The RESPONSE uses the entire template as requested, making it fully relevant to the entire PROMPT."
        },
        "qa_relevance": 1.0
    }
}