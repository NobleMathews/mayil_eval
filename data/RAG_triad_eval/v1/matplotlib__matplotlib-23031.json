{
    "id": "matplotlib__matplotlib-23031",
    "repo_name": "testbed/matplotlib__matplotlib__3.5",
    "task_id": 8483200657324783811,
    "title": "[MNT]: Require that matplotlibrc/style files use utf-8 (or have an encoding cookie)",
    "body": "### Summary\n\nCurrently, matplotlibrc and style files are read with the locale encoding, since #3575.  There's even a test for it in test_rcparams.py, which reads\r\n```python\r\ndef test_Issue_1713(tmpdir):\r\n    rcpath = Path(tmpdir) / 'test_rcparams.rc'\r\n    rcpath.write_text('timezone: UTC', encoding='UTF-32-BE')\r\n    with mock.patch('locale.getpreferredencoding', return_value='UTF-32-BE'):\r\n        rc = mpl.rc_params_from_file(rcpath, True, False)\r\n    assert rc.get('timezone') == 'UTC'\r\n```\r\n\r\nBut actually, we probably never really supported non-ascii encodings (such as utf-32-be), because if you try to import matplotlib in such a context, we will fail much earlier, when trying to read the default matplotlibrc file:\r\n```python\r\nfrom unittest import mock\r\nwith mock.patch(\"locale.getpreferredencoding\", return_value=\"utf-32-be\"):\r\n    import matplotlib\r\n```\r\ngives\r\n```\r\nTraceback (most recent call last):\r\n  File \"/tmp/test.py\", line 3, in <module>\r\n    import matplotlib\r\n  File \".../matplotlib/__init__.py\", line 883, in <module>\r\n    rcParamsDefault = _rc_params_in_file(\r\n  File \".../matplotlib/__init__.py\", line 785, in _rc_params_in_file\r\n    for line_no, line in enumerate(fd, 1):\r\n  File \"/usr/lib/python3.10/codecs.py\", line 322, in decode\r\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\r\nUnicodeDecodeError: 'utf-32-be' codec can't decode bytes in position 0-3: code point not in range(0x110000)\r\n```\r\n(the test doesn't see that because the default matplotlibrc file has already been imported at this point...).  This behavior also means that style files are actually not shareable between systems that use incompatible encodings.\r\n\r\nGiven that #3575 was implemented in response to #1713, which is about the Py2/Py3 unicode transition and not any user actually requesting support for non-standard encodings, I think we should just drop any intent of reading matplotlibrc/style files using the user locale, and instead spec them as being utf-8 (or, if we want to be super-flexible, support encoding cookies as in https://docs.python.org/3/library/tokenize.html#tokenize.detect_encoding / https://peps.python.org/pep-0263/ -- but I'd say it's probably not worth it?).\n\n### Proposed fix\n\n_No response_\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/matplotlib__matplotlib__3.5.git",
    "requested_commit": "",
    "mayil_response": "- Ensure that the `rc_params_from_file` function in `lib/matplotlib/__init__.py` uses `utf-8` encoding by default when opening the `matplotlibrc` file.\n- Add support for encoding cookies as per PEP 0263 by using the `tokenize.detect_encoding` function to detect the encoding of the file.\n- Modify the `_rc_params_in_file` helper function to handle the detected encoding.\n- If the encoding is not specified or detected, fall back to `utf-8`.\n- Catch `UnicodeDecodeError` and provide a meaningful error message suggesting to check the file encoding.\n- Example modification for `rc_params_from_file`:\n\n```python\nimport tokenize\n\ndef rc_params_from_file(fname, fail_on_error=False, use_default_template=True):\n    config = {}\n    with open(fname, 'rb') as fd:\n        try:\n            encoding, _ = tokenize.detect_encoding(fd.readline)\n            fd.seek(0)\n            for line in fd:\n                line = line.decode(encoding)\n                # Process the line\n        except UnicodeDecodeError:\n            _log.error(\"The file %r cannot be read because of the encoding. \"\n                       \"Ensure the file is saved with 'utf-8' encoding.\", fname)\n            raise\n    # Rest of the function implementation...\n    return config\n```\n- Ensure that the `test_Issue_1713` function in the test suite mocks `locale.getpreferredencoding` to return `'utf-8'` and tests the behavior with a `matplotlibrc` file containing non-ASCII characters.\n\n### Code snippets to check\n\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries) \u2192 [users_explain](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries/users_explain)- [Lines 170 - 245](https://github.com/testbed/matplotlib__matplotlib__3.5/blob//galleries/users_explain/customizing.py#L170-L245)\n\n This snippet discusses the use of style sheets and the `matplotlibrc` file, which is directly related to the issue of specifying the encoding for these files. \n\n\n   - [Lines 246 - 269](https://github.com/testbed/matplotlib__matplotlib__3.5/blob//galleries/users_explain/customizing.py#L246-L269)\n\n This snippet provides information on how the `matplotlibrc` file is used and loaded, which is relevant to the issue of requiring a specific encoding for these files.\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//lib/matplotlib)- [Lines 894 - 957](https://github.com/testbed/matplotlib__matplotlib__3.5/blob//lib/matplotlib/__init__.py#L894-L957)\n\n This snippet includes code for reading and parsing the `matplotlibrc` file, which is where the encoding specification would need to be implemented or checked.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.000851,
        "snippet_processor": 0.07345,
        "issue_star_creation": 0.04091,
        "issue_star_solver": 0.07253,
        "bouncer": 0.03728
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711698175.543757,
        "relevant_snippets": [
            {
                "code": "# | ``{'sans', 'sans serif', 'sans-serif'}`` | ``'font.sans-serif'``          |\n# +------------------------------------------+--------------------------------+\n#\n#\n# If any of generic family names appear in ``'font.family'``, we replace that entry\n# by all the entries in the corresponding rcParam mapping.\n# For example: ::\n#\n#    matplotlib.rcParams['font.family'] = ['Family1', 'serif', 'Family2']\n#    matplotlib.rcParams['font.serif'] = ['SerifFamily1', 'SerifFamily2']\n#\n#    # This is effectively translated to:\n#    matplotlib.rcParams['font.family'] = ['Family1', 'SerifFamily1', 'SerifFamily2', 'Family2']\n#\n#\n# .. _font-nonlatin:\n#\n# Text with non-latin glyphs\n# ==========================\n#\n# As of v2.0 the :ref:`default font <default_changes_font>`, DejaVu, contains\n# glyphs for many western alphabets, but not other scripts, such as Chinese,\n# Korean, or Japanese.\n#\n# To set the default font to be one that supports the code points you\n# need, prepend the font name to ``'font.family'`` (recommended), or to the\n# desired alias lists. ::\n#\n#    # first method\n#    matplotlib.rcParams['font.family'] = ['Source Han Sans TW', 'sans-serif']\n#\n#    # second method\n#    matplotlib.rcParams['font.family'] = ['sans-serif']\n#    matplotlib.rcParams['sans-serif'] = ['Source Han Sans TW', ...]\n#\n# The generic family alias lists contain fonts that are either shipped\n# alongside Matplotlib (so they have 100% chance of being found), or fonts\n# which have a very high probability of being present in most systems.\n#\n# A good practice when setting custom font families is to append\n# a generic-family to the font-family list as a last resort.\n#\n# You can also set it in your :file:`.matplotlibrc` file::\n#\n#    font.family: Source Han Sans TW, Arial, sans-serif\n#\n# To control the font used on per-artist basis use the *name*, *fontname* or\n# *fontproperties* keyword arguments documented in :ref:`text_props`.\n#\n#\n# On linux, `fc-list <https://linux.die.net/man/1/fc-list>`__ can be a\n# useful tool to discover the font name; for example ::\n#\n#    $ fc-list :lang=zh family\n#    Noto to Sans Mono CJK TC,Noto Sans Mono CJK TC Bold\n#    Noto Sans CJK TC,Noto Sans CJK TC Medium\n#    Noto Sans CJK TC,Noto Sans CJK TC DemiLight\n#    Noto Sans CJK KR,Noto Sans CJK KR Black\n#    Noto Sans CJK TC,Noto Sans CJK TC Black\n#    Noto Sans Mono CJK TC,Noto Sans Mono CJK TC Regular\n#    Noto Sans CJK SC,Noto Sans CJK SC Light\n#\n# lists all of the fonts that support Chinese.\n#",
                "filename": "galleries/users_explain/text/text_props.py",
                "start_index": 9613,
                "end_index": 12091,
                "start_line": 209,
                "end_line": 272,
                "max_line": 272,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "name: Feature Request\ndescription: Suggest something to add to Matplotlib!\ntitle: \"[ENH]: \"\nlabels: [New feature]\nbody:\n  - type: markdown\n    attributes:\n      value: |\n         Please search the [issues](https://github.com/matplotlib/matplotlib/issues) for relevant feature requests before creating a new feature request.\n  - type: textarea\n    id: problem\n    attributes:\n      label: Problem\n      description: Briefly describe the problem this feature will solve. (2-4 sentences)\n      placeholder: |\n        * I'm always frustrated when [...] because [...]\n        * I would like it if [...] happened when I [...] because [...]\n        * Here is a sample image of what I am asking for [...]\n    validations:\n      required: true\n  - type: textarea\n    id: solution\n    attributes:\n      label: Proposed solution\n      description: Describe a way to accomplish the goals of this feature request.",
                "filename": ".github/ISSUE_TEMPLATE/feature_request.yml",
                "start_index": 0,
                "end_index": 900,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "# Once your ``<style-name>.mplstyle`` file is in the appropriate\n# ``mpl_configdir`` you can specify your style with::\n#\n#    >>> import matplotlib.pyplot as plt\n#    >>> plt.style.use(<style-name>)\n#\n#\n# Composing styles\n# ----------------\n#\n# Style sheets are designed to be composed together. So you can have a style\n# sheet that customizes colors and a separate style sheet that alters element\n# sizes for presentations. These styles can easily be combined by passing\n# a list of styles::\n#\n#    >>> import matplotlib.pyplot as plt\n#    >>> plt.style.use(['dark_background', 'presentation'])\n#\n# Note that styles further to the right will overwrite values that are already\n# defined by styles on the left.\n#\n#\n# Temporary styling\n# -----------------\n#\n# If you only want to use a style for a specific block of code but don't want\n# to change the global styling, the style package provides a context manager\n# for limiting your changes to a specific scope. To isolate your styling\n# changes, you can write something like the following:\n\nwith plt.style.context('dark_background'):\n    plt.plot(np.sin(np.linspace(0, 2 * np.pi)), 'r-o')\nplt.show()\n\n# %%\n# .. _customizing-with-matplotlibrc-files:\n#\n# The :file:`matplotlibrc` file\n# =============================\n#\n# Matplotlib uses :file:`matplotlibrc` configuration files to customize all\n# kinds of properties, which we call 'rc settings' or 'rc parameters'. You can\n# control the defaults of almost every property in Matplotlib: figure size and\n# DPI, line width, color and style, axes, axis and grid properties, text and\n# font properties and so on. The :file:`matplotlibrc` is read at startup to\n# configure Matplotlib. Matplotlib looks for :file:`matplotlibrc` in four\n# locations, in the following order:\n#\n# 1. :file:`matplotlibrc` in the current working directory, usually used for\n#    specific customizations that you do not want to apply elsewhere.\n#\n# 2. :file:`$MATPLOTLIBRC` if it is a file, else\n#    :file:`$MATPLOTLIBRC/matplotlibrc`.\n#\n# 3. It next looks in a user-specific place, depending on your platform:\n#\n#    - On Linux and FreeBSD, it looks in\n#      :file:`.config/matplotlib/matplotlibrc` (or\n#      :file:`$XDG_CONFIG_HOME/matplotlib/matplotlibrc`) if you've customized\n#      your environment.\n#\n#    - On other platforms, it looks in :file:`.matplotlib/matplotlibrc`.\n#\n#    See :ref:`locating-matplotlib-config-dir`.\n#\n# 4. :file:`{INSTALL}/matplotlib/mpl-data/matplotlibrc`, where\n#    :file:`{INSTALL}` is something like\n#    :file:`/usr/lib/python3.9/site-packages` on Linux, and maybe\n#    :file:`C:\\\\Python39\\\\Lib\\\\site-packages` on Windows. Every time you\n#    install matplotlib, this file will be overwritten, so if you want\n#    your customizations to be saved, please move this file to your\n#    user-specific matplotlib directory.\n#\n# Once a :file:`matplotlibrc` file has been found, it will *not* search\n# any of the other paths. When a\n# :ref:`style sheet<customizing-with-style-sheets>` is given with",
                "filename": "galleries/users_explain/customizing.py",
                "start_index": 5900,
                "end_index": 8899,
                "start_line": 170,
                "end_line": 245,
                "max_line": 269,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "# ``style.use('<path>/<style-name>.mplstyle')``, settings specified in\n# the style sheet take precedence over settings in the\n# :file:`matplotlibrc` file.\n#\n# To display where the currently active :file:`matplotlibrc` file was\n# loaded from, one can do the following::\n#\n#   >>> import matplotlib\n#   >>> matplotlib.matplotlib_fname()\n#   '/home/foo/.config/matplotlib/matplotlibrc'\n#\n# See below for a sample :ref:`matplotlibrc file<matplotlibrc-sample>`\n# and see `matplotlib.rcParams` for a full list of configurable rcParams.\n#\n# .. _matplotlibrc-sample:\n#\n# The default :file:`matplotlibrc` file\n# -------------------------------------\n#\n# .. literalinclude:: ../../../lib/matplotlib/mpl-data/matplotlibrc\n#\n#\n# .. _ggplot: https://ggplot2.tidyverse.org/\n# .. _R: https://www.r-project.org/",
                "filename": "galleries/users_explain/customizing.py",
                "start_index": 8900,
                "end_index": 9695,
                "start_line": 246,
                "end_line": 269,
                "max_line": 269,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "import codecs\nimport datetime\nimport functools\nfrom io import BytesIO\nimport logging\nimport math\nimport os\nimport pathlib\nimport shutil\nimport subprocess\nfrom tempfile import TemporaryDirectory\nimport weakref\n\nfrom PIL import Image\n\nimport matplotlib as mpl\nfrom matplotlib import _api, cbook, font_manager as fm\nfrom matplotlib.backend_bases import (\n    _Backend, FigureCanvasBase, FigureManagerBase, RendererBase\n)\nfrom matplotlib.backends.backend_mixed import MixedModeRenderer\nfrom matplotlib.backends.backend_pdf import (\n    _create_pdf_info_dict, _datetime_to_pdf)\nfrom matplotlib.path import Path\nfrom matplotlib.figure import Figure\nfrom matplotlib._pylab_helpers import Gcf\n\n_log = logging.getLogger(__name__)\n\n\n# Note: When formatting floating point values, it is important to use the\n# %f/{:f} format rather than %s/{} to avoid triggering scientific notation,\n# which is not recognized by TeX.\n\ndef _get_preamble():\n    \"\"\"Prepare a LaTeX preamble based on the rcParams configuration.\"\"\"\n    preamble = [\n        # Remove Matplotlib's custom command \\mathdefault.  (Not using\n        # \\mathnormal instead since this looks odd with Computer Modern.)\n        r\"\\def\\mathdefault#1{#1}\",\n        # Use displaystyle for all math.\n        r\"\\everymath=\\expandafter{\\the\\everymath\\displaystyle}\",\n        # Allow pgf.preamble to override the above definitions.\n        mpl.rcParams[\"pgf.preamble\"],\n    ]\n    if mpl.rcParams[\"pgf.texsystem\"] != \"pdflatex\":\n        preamble.append(\"\\\\usepackage{fontspec}\")\n        if mpl.rcParams[\"pgf.rcfonts\"]:\n            families = [\"serif\", \"sans\\\\-serif\", \"monospace\"]\n            commands = [\"setmainfont\", \"setsansfont\", \"setmonofont\"]\n            for family, command in zip(families, commands):\n                # 1) Forward slashes also work on Windows, so don't mess with\n                # backslashes.  2) The dirname needs to include a separator.\n                path = pathlib.Path(fm.findfont(family))\n                preamble.append(r\"\\%s{%s}[Path=\\detokenize{%s/}]\" % (\n                    command, path.name, path.parent.as_posix()))\n    preamble.append(mpl.texmanager._usepackage_if_not_loaded(\n        \"underscore\", option=\"strings\"))  # Documented as \"must come last\".\n    return \"\\n\".join(preamble)\n\n\n# It's better to use only one unit for all coordinates, since the\n# arithmetic in latex seems to produce inaccurate conversions.\nlatex_pt_to_in = 1. / 72.27\nlatex_in_to_pt = 1. / latex_pt_to_in\nmpl_pt_to_in = 1. / 72.\nmpl_in_to_pt = 1. / mpl_pt_to_in\n\n\ndef _tex_escape(text):\n    r\"\"\"\n    Do some necessary and/or useful substitutions for texts to be included in\n    LaTeX documents.\n    \"\"\"\n    return text.replace(\"\\N{MINUS SIGN}\", r\"\\ensuremath{-}\")\n\n\ndef _writeln(fh, line):\n    # Ending lines with a % prevents TeX from inserting spurious spaces\n    # (https://tex.stackexchange.com/questions/7453).\n    fh.write(line)\n    fh.write(\"%\\n\")",
                "filename": "lib/matplotlib/backends/backend_pgf.py",
                "start_index": 0,
                "end_index": 2906,
                "start_line": 1,
                "end_line": 82,
                "max_line": 1010,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "r\"\"\"\n.. redirect-from:: /tutorials/text/usetex\n\n.. _usetex:\n\n*************************\nText rendering with LaTeX\n*************************\n\nMatplotlib can use LaTeX to render text.  This is activated by setting\n``text.usetex : True`` in your rcParams, or by setting the ``usetex`` property\nto True on individual `.Text` objects.  Text handling through LaTeX is slower\nthan Matplotlib's very capable :ref:`mathtext <mathtext>`, but\nis more flexible, since different LaTeX packages (font packages, math packages,\netc.) can be used. The results can be striking, especially when you take care\nto use the same fonts in your figures as in the main document.\n\nMatplotlib's LaTeX support requires a working LaTeX_ installation.  For\nthe \\*Agg backends, dvipng_ is additionally required; for the PS backend,\nPSfrag_, dvips_ and Ghostscript_ are additionally required.  For the PDF\nand SVG backends, if LuaTeX is present, it will be used to speed up some\npost-processing steps, but note that it is not used to parse the TeX string\nitself (only LaTeX is supported).  The executables for these external\ndependencies must all be located on your :envvar:`PATH`.\n\nOnly a small number of font families (defined by the PSNFSS_ scheme) are\nsupported.  They are listed here, with the corresponding LaTeX font selection\ncommands and LaTeX packages, which are automatically used.\n\n=========================== =================================================\ngeneric family              fonts\n=========================== =================================================\nserif (``\\rmfamily``)       Computer Modern Roman, Palatino (``mathpazo``),\n                            Times (``mathptmx``),  Bookman (``bookman``),\n                            New Century Schoolbook (``newcent``),\n                            Charter (``charter``)\n\nsans-serif (``\\sffamily``)  Computer Modern Serif, Helvetica (``helvet``),\n                            Avant Garde (``avant``)\n\ncursive (``\\rmfamily``)     Zapf Chancery (``chancery``)\n\nmonospace (``\\ttfamily``)   Computer Modern Typewriter, Courier (``courier``)\n=========================== =================================================\n\nThe default font family (which does not require loading any LaTeX package) is\nComputer Modern.  All other families are Adobe fonts.  Times and Palatino each\nhave their own accompanying math fonts, while the other Adobe serif fonts make\nuse of the Computer Modern math fonts.\n\nTo enable LaTeX and select a font, use e.g.::\n\n    plt.rcParams.update({\n        \"text.usetex\": True,\n        \"font.family\": \"Helvetica\"\n    })\n\nor equivalently, set your :ref:`matplotlibrc <customizing>` to::\n\n    text.usetex : true\n    font.family : Helvetica\n\nIt is also possible to instead set ``font.family`` to one of the generic family\nnames and then configure the corresponding generic family; e.g.::\n\n    plt.rcParams.update({\n        \"text.usetex\": True,\n        \"font.family\": \"sans-serif\",\n        \"font.sans-serif\": \"Helvetica\",\n    })\n\n(this was the required approach until Matplotlib 3.5).\n\nHere is the standard example,\n:doc:`/gallery/text_labels_and_annotations/tex_demo`:\n\n.. figure:: /gallery/text_labels_and_annotations/images/sphx_glr_tex_demo_001.png\n   :target: /gallery/text_labels_and_annotations/tex_demo.html\n   :align: center\n\nNote that display math mode (``$$ e=mc^2 $$``) is not supported, but adding the\ncommand ``\\displaystyle``, as in the above demo, will produce the same results.\n\nNon-ASCII characters (e.g. the degree sign in the y-label above) are supported\nto the extent that they are supported by inputenc_.\n\n.. note::\n   For consistency with the non-usetex case, Matplotlib special-cases newlines,\n   so that single-newlines yield linebreaks (rather than being interpreted as\n   whitespace in standard LaTeX).\n\n   Matplotlib uses the underscore_ package so that underscores (``_``) are\n   printed \"as-is\" in text mode (rather than causing an error as in standard\n   LaTeX).  Underscores still introduce subscripts in math mode.\n\n.. note::\n   Certain characters require special escaping in TeX, such as::\n\n     # $ % & ~ ^ \\ { } \\( \\) \\[ \\]\n\n   Therefore, these characters will behave differently depending on\n   :rc:`text.usetex`.  As noted above, underscores (``_``) do not require\n   escaping outside of math mode.\n\nPostScript options\n==================\n\nIn order to produce encapsulated PostScript (EPS) files that can be embedded\nin a new LaTeX document, the default behavior of Matplotlib is to distill the\noutput, which removes some PostScript operators used by LaTeX that are illegal\nin an EPS file. This step produces results which may be unacceptable to some\nusers, because the text is coarsely rasterized and converted to bitmaps, which\nare not scalable like standard PostScript, and the text is not searchable. One\nworkaround is to set :rc:`ps.distiller.res` to a higher value (perhaps 6000)\nin your rc settings, which will produce larger files but may look better and\nscale reasonably. A better workaround, which requires Poppler_ or Xpdf_, can\nbe activated by changing :rc:`ps.usedistiller` to ``xpdf``. This alternative\nproduces PostScript without rasterizing text, so it scales properly, can be\nedited in Adobe Illustrator, and searched text in pdf documents.\n\n.. _usetex-hangups:\n\nPossible hangups\n================\n\n* On Windows, the :envvar:`PATH` environment variable may need to be modified\n  to include the directories containing the latex, dvipng and ghostscript\n  executables. See :ref:`environment-variables` and\n  :ref:`setting-windows-environment-variables` for details.\n\n* Using MiKTeX with Computer Modern fonts, if you get odd \\*Agg and PNG\n  results, go to MiKTeX/Options and update your format files\n\n* On Ubuntu and Gentoo, the base texlive install does not ship with\n  the type1cm package. You may need to install some of the extra\n  packages to get all the goodies that come bundled with other LaTeX\n  distributions.\n\n* Some progress has been made so Matplotlib uses the dvi files\n  directly for text layout. This allows LaTeX to be used for text\n  layout with the pdf and svg backends, as well as the \\*Agg and PS\n  backends. In the future, a LaTeX installation may be the only\n  external dependency.\n\n.. _usetex-troubleshooting:\n\nTroubleshooting\n===============\n\n* Try deleting your :file:`.matplotlib/tex.cache` directory. If you don't know\n  where to find :file:`.matplotlib`, see :ref:`locating-matplotlib-config-dir`.\n\n* Make sure LaTeX, dvipng and ghostscript are each working and on your\n  :envvar:`PATH`.\n\n* Make sure what you are trying to do is possible in a LaTeX document,\n  that your LaTeX syntax is valid and that you are using raw strings\n  if necessary to avoid unintended escape sequences.\n\n* :rc:`text.latex.preamble` is not officially supported. This\n  option provides lots of flexibility, and lots of ways to cause\n  problems. Please disable this option before reporting problems to\n  the mailing list.\n\n* If you still need help, please see :ref:`reporting-problems`.\n\n.. _dvipng: http://www.nongnu.org/dvipng/\n.. _dvips: https://tug.org/texinfohtml/dvips.html\n.. _Ghostscript: https://ghostscript.com/\n.. _inputenc: https://ctan.org/pkg/inputenc\n.. _LaTeX: http://www.tug.org\n.. _Poppler: https://poppler.freedesktop.org/\n.. _PSNFSS: http://www.ctan.org/tex-archive/macros/latex/required/psnfss/psnfss2e.pdf\n.. _PSfrag: https://ctan.org/pkg/psfrag\n.. _underscore: https://ctan.org/pkg/underscore\n.. _Xpdf: http://www.xpdfreader.com/\n\"\"\"",
                "filename": "galleries/users_explain/text/usetex.py",
                "start_index": 0,
                "end_index": 7467,
                "start_line": 1,
                "end_line": 177,
                "max_line": 177,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def draw_mathtext(self, gc, x, y, s, prop, angle):\n        # TODO: fix positioning and encoding\n        width, height, descent, glyphs, rects = \\\n            self._text2path.mathtext_parser.parse(s, 72, prop)\n\n        if gc.get_url() is not None:\n            self.file._annotations[-1][1].append(_get_link_annotation(\n                gc, x, y, width, height, angle))\n\n        fonttype = mpl.rcParams['pdf.fonttype']\n\n        # Set up a global transformation matrix for the whole math expression\n        a = math.radians(angle)\n        self.file.output(Op.gsave)\n        self.file.output(math.cos(a), math.sin(a),\n                         -math.sin(a), math.cos(a),\n                         x, y, Op.concat_matrix)\n\n        self.check_gc(gc, gc._rgb)\n        prev_font = None, None\n        oldx, oldy = 0, 0\n        unsupported_chars = []\n\n        self.file.output(Op.begin_text)\n        for font, fontsize, num, ox, oy in glyphs:\n            self.file._character_tracker.track_glyph(font, num)\n            fontname = font.fname\n            if not _font_supports_glyph(fonttype, num):\n                # Unsupported chars (i.e. multibyte in Type 3 or beyond BMP in\n                # Type 42) must be emitted separately (below).\n                unsupported_chars.append((font, fontsize, ox, oy, num))\n            else:\n                self._setup_textpos(ox, oy, 0, oldx, oldy)\n                oldx, oldy = ox, oy\n                if (fontname, fontsize) != prev_font:\n                    self.file.output(self.file.fontName(fontname), fontsize,\n                                     Op.selectfont)\n                    prev_font = fontname, fontsize\n                self.file.output(self.encode_string(chr(num), fonttype),\n                                 Op.show)\n        self.file.output(Op.end_text)\n\n        for font, fontsize, ox, oy, num in unsupported_chars:\n            self._draw_xobject_glyph(\n                font, fontsize, font.get_char_index(num), ox, oy)\n\n        # Draw any horizontal lines in the math layout\n        for ox, oy, width, height in rects:\n            self.file.output(Op.gsave, ox, oy, width, height,\n                             Op.rectangle, Op.fill, Op.grestore)\n\n        # Pop off the global transformation\n        self.file.output(Op.grestore)",
                "filename": "lib/matplotlib/backends/backend_pdf.py",
                "start_index": 81399,
                "end_index": 83673,
                "start_line": 2189,
                "end_line": 2429,
                "max_line": 2827,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "name: Bug Report\ndescription: Report a bug or issue with Matplotlib.\ntitle: \"[Bug]: \"\nbody:\n  - type: textarea\n    id: summary\n    attributes:\n      label: Bug summary\n      description:  Describe the bug in 1-2 short sentences\n      placeholder:\n      value:\n    validations:\n      required: true\n  - type: textarea\n    id: reproduction\n    attributes:\n      label: Code for reproduction\n      description: |\n        If possible, please provide a minimum self-contained example.\n      placeholder: Paste your code here. This field is automatically formatted as Python code.\n      render: python\n    validations:\n      required: true\n  - type: textarea\n    id: actual\n    attributes:\n      label: Actual outcome\n      description: |\n        Paste the output produced by the code provided above, e.g.\n        console output, images/videos produced by the code, any relevant screenshots/screencasts, etc.\n    validations:\n      required: true\n  - type: textarea\n    id: expected\n    attributes:\n      label: Expected outcome\n      description: Describe (or provide a visual example of) the expected outcome from the code snippet.\n    validations:\n      required: true\n  - type: textarea\n    id: details\n    attributes:\n      label: Additional information\n      description: |\n        - What are the conditions under which this bug happens? input parameters, edge cases, etc?\n        - Has this worked in earlier versions?\n        - Do you know why this bug is happening?\n        - Do you maybe even know a fix?\n  - type: input\n    id: operating-system\n    attributes:\n      label: Operating system\n      description: Windows, OS/X, Arch, Debian, Ubuntu, etc.\n  - type: input\n    id: matplotlib-version\n    attributes:\n      label: Matplotlib Version\n      description: \"From Python prompt: `import matplotlib; print(matplotlib.__version__)`\"\n    validations:\n      required: true\n  - type: input\n    id: matplotlib-backend\n    attributes:\n      label: Matplotlib Backend\n      description: \"From Python prompt: `import matplotlib; print(matplotlib.get_backend())`\"\n  - type: input\n    id: python-version\n    attributes:\n      label: Python version\n      description: \"In console: `python --version`\"\n  - type: input\n    id: jupyter-version\n    attributes:\n      label: Jupyter version\n      description: \"In console: `jupyter notebook --version` or `jupyter lab --version`\"\n  - type: dropdown\n    id: install\n    attributes:\n      label: Installation\n      description: How did you install matplotlib?\n      options:\n        - pip\n        - conda\n        - Linux package manager\n        - from source (.tar.gz)\n        - git checkout",
                "filename": ".github/ISSUE_TEMPLATE/bug_report.yml",
                "start_index": 0,
                "end_index": 2631,
                "start_line": 1,
                "end_line": 86,
                "max_line": 86,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"\nThe Matplotlib build options can be modified with a mplsetup.cfg file. See\nmplsetup.cfg.template for more information.\n\"\"\"\n\n# NOTE: This file must remain Python 2 compatible for the foreseeable future,\n# to ensure that we error out properly for people with outdated setuptools\n# and/or pip.\nimport sys\n\npy_min_version = (3, 9)  # minimal supported python version\nsince_mpl_version = (3, 8)  # py_min_version is required since this mpl version\n\nif sys.version_info < py_min_version:\n    error = \"\"\"\nBeginning with Matplotlib {0}, Python {1} or above is required.\nYou are using Python {2}.\n\nThis may be due to an out of date pip.\n\nMake sure you have pip >= 9.0.1.\n\"\"\".format('.'.join(str(n) for n in since_mpl_version),\n           '.'.join(str(n) for n in py_min_version),\n           '.'.join(str(n) for n in sys.version_info[:3]))\n    sys.exit(error)\n\nimport os\nfrom pathlib import Path\nimport shutil\nimport subprocess\n\nfrom setuptools import setup, find_namespace_packages, Distribution, Extension\nimport setuptools.command.build_ext\nimport setuptools.command.build_py\nimport setuptools.command.sdist\n\n# sys.path modified to find setupext.py during pyproject.toml builds.\nsys.path.append(str(Path(__file__).resolve().parent))\n\nimport setupext\nfrom setupext import print_raw, print_status\n\n\n# These are the packages in the order we want to display them.\nmpl_packages = [\n    setupext.Matplotlib(),\n    setupext.Python(),\n    setupext.Platform(),\n    setupext.FreeType(),\n    setupext.Qhull(),\n    setupext.Tests(),\n    setupext.BackendMacOSX(),\n    ]\n\n\n# From https://bugs.python.org/issue26689\ndef has_flag(self, flagname):\n    \"\"\"Return whether a flag name is supported on the specified compiler.\"\"\"\n    import tempfile\n    with tempfile.NamedTemporaryFile('w', suffix='.cpp') as f:\n        f.write('int main (int argc, char **argv) { return 0; }')\n        try:\n            self.compile([f.name], extra_postargs=[flagname])\n        except Exception as exc:\n            # https://github.com/pypa/setuptools/issues/2698\n            if type(exc).__name__ != \"CompileError\":\n                raise\n            return False\n    return True",
                "filename": "setup.py",
                "start_index": 0,
                "end_index": 2138,
                "start_line": 1,
                "end_line": 69,
                "max_line": 364,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "for key, (val, line, line_no) in rc_temp.items():\n        if key in rcsetup._validators:\n            if fail_on_error:\n                config[key] = val  # try to convert to proper type or raise\n            else:\n                try:\n                    config[key] = val  # try to convert to proper type or skip\n                except Exception as msg:\n                    _log.warning('Bad value in file %r, line %d (%r): %s',\n                                 fname, line_no, line.rstrip('\\n'), msg)\n        elif key in _deprecated_ignore_map:\n            version, alt_key = _deprecated_ignore_map[key]\n            _api.warn_deprecated(\n                version, name=key, alternative=alt_key, obj_type='rcparam',\n                addendum=\"Please update your matplotlibrc.\")\n        else:\n            # __version__ must be looked up as an attribute to trigger the\n            # module-level __getattr__.\n            version = ('main' if '.post' in mpl.__version__\n                       else f'v{mpl.__version__}')\n            _log.warning(\"\"\"\nBad key %(key)s in file %(fname)s, line %(line_no)s (%(line)r)\nYou probably need to get an updated matplotlibrc file from\nhttps://github.com/matplotlib/matplotlib/blob/%(version)s/lib/matplotlib/mpl-data/matplotlibrc\nor from the matplotlib source distribution\"\"\",\n                         dict(key=key, fname=fname, line_no=line_no,\n                              line=line.rstrip('\\n'), version=version))\n    return config",
                "filename": "lib/matplotlib/__init__.py",
                "start_index": 31322,
                "end_index": 32789,
                "start_line": 894,
                "end_line": 957,
                "max_line": 1505,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": "",
                "context_relevance": 0.2
            }
        ],
        "classification": "other",
        "snippet_processor_task": {
            "galleries/users_explain/customizing.py": [
                {
                    "chunk": {
                        "code": "# Once your ``<style-name>.mplstyle`` file is in the appropriate\n# ``mpl_configdir`` you can specify your style with::\n#\n#    >>> import matplotlib.pyplot as plt\n#    >>> plt.style.use(<style-name>)\n#\n#\n# Composing styles\n# ----------------\n#\n# Style sheets are designed to be composed together. So you can have a style\n# sheet that customizes colors and a separate style sheet that alters element\n# sizes for presentations. These styles can easily be combined by passing\n# a list of styles::\n#\n#    >>> import matplotlib.pyplot as plt\n#    >>> plt.style.use(['dark_background', 'presentation'])\n#\n# Note that styles further to the right will overwrite values that are already\n# defined by styles on the left.\n#\n#\n# Temporary styling\n# -----------------\n#\n# If you only want to use a style for a specific block of code but don't want\n# to change the global styling, the style package provides a context manager\n# for limiting your changes to a specific scope. To isolate your styling\n# changes, you can write something like the following:\n\nwith plt.style.context('dark_background'):\n    plt.plot(np.sin(np.linspace(0, 2 * np.pi)), 'r-o')\nplt.show()\n\n# %%\n# .. _customizing-with-matplotlibrc-files:\n#\n# The :file:`matplotlibrc` file\n# =============================\n#\n# Matplotlib uses :file:`matplotlibrc` configuration files to customize all\n# kinds of properties, which we call 'rc settings' or 'rc parameters'. You can\n# control the defaults of almost every property in Matplotlib: figure size and\n# DPI, line width, color and style, axes, axis and grid properties, text and\n# font properties and so on. The :file:`matplotlibrc` is read at startup to\n# configure Matplotlib. Matplotlib looks for :file:`matplotlibrc` in four\n# locations, in the following order:\n#\n# 1. :file:`matplotlibrc` in the current working directory, usually used for\n#    specific customizations that you do not want to apply elsewhere.\n#\n# 2. :file:`$MATPLOTLIBRC` if it is a file, else\n#    :file:`$MATPLOTLIBRC/matplotlibrc`.\n#\n# 3. It next looks in a user-specific place, depending on your platform:\n#\n#    - On Linux and FreeBSD, it looks in\n#      :file:`.config/matplotlib/matplotlibrc` (or\n#      :file:`$XDG_CONFIG_HOME/matplotlib/matplotlibrc`) if you've customized\n#      your environment.\n#\n#    - On other platforms, it looks in :file:`.matplotlib/matplotlibrc`.\n#\n#    See :ref:`locating-matplotlib-config-dir`.\n#\n# 4. :file:`{INSTALL}/matplotlib/mpl-data/matplotlibrc`, where\n#    :file:`{INSTALL}` is something like\n#    :file:`/usr/lib/python3.9/site-packages` on Linux, and maybe\n#    :file:`C:\\\\Python39\\\\Lib\\\\site-packages` on Windows. Every time you\n#    install matplotlib, this file will be overwritten, so if you want\n#    your customizations to be saved, please move this file to your\n#    user-specific matplotlib directory.\n#\n# Once a :file:`matplotlibrc` file has been found, it will *not* search\n# any of the other paths. When a\n# :ref:`style sheet<customizing-with-style-sheets>` is given with",
                        "filename": "galleries/users_explain/customizing.py",
                        "start_index": 5900,
                        "end_index": 8899,
                        "start_line": 170,
                        "end_line": 245,
                        "max_line": 269,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.5",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet discusses the use of style sheets and the `matplotlibrc` file, which is directly related to the issue of specifying the encoding for these files."
                },
                {
                    "chunk": {
                        "code": "# ``style.use('<path>/<style-name>.mplstyle')``, settings specified in\n# the style sheet take precedence over settings in the\n# :file:`matplotlibrc` file.\n#\n# To display where the currently active :file:`matplotlibrc` file was\n# loaded from, one can do the following::\n#\n#   >>> import matplotlib\n#   >>> matplotlib.matplotlib_fname()\n#   '/home/foo/.config/matplotlib/matplotlibrc'\n#\n# See below for a sample :ref:`matplotlibrc file<matplotlibrc-sample>`\n# and see `matplotlib.rcParams` for a full list of configurable rcParams.\n#\n# .. _matplotlibrc-sample:\n#\n# The default :file:`matplotlibrc` file\n# -------------------------------------\n#\n# .. literalinclude:: ../../../lib/matplotlib/mpl-data/matplotlibrc\n#\n#\n# .. _ggplot: https://ggplot2.tidyverse.org/\n# .. _R: https://www.r-project.org/",
                        "filename": "galleries/users_explain/customizing.py",
                        "start_index": 8900,
                        "end_index": 9695,
                        "start_line": 246,
                        "end_line": 269,
                        "max_line": 269,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.5",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet provides information on how the `matplotlibrc` file is used and loaded, which is relevant to the issue of requiring a specific encoding for these files."
                }
            ],
            "lib/matplotlib/__init__.py": [
                {
                    "chunk": {
                        "code": "for key, (val, line, line_no) in rc_temp.items():\n        if key in rcsetup._validators:\n            if fail_on_error:\n                config[key] = val  # try to convert to proper type or raise\n            else:\n                try:\n                    config[key] = val  # try to convert to proper type or skip\n                except Exception as msg:\n                    _log.warning('Bad value in file %r, line %d (%r): %s',\n                                 fname, line_no, line.rstrip('\\n'), msg)\n        elif key in _deprecated_ignore_map:\n            version, alt_key = _deprecated_ignore_map[key]\n            _api.warn_deprecated(\n                version, name=key, alternative=alt_key, obj_type='rcparam',\n                addendum=\"Please update your matplotlibrc.\")\n        else:\n            # __version__ must be looked up as an attribute to trigger the\n            # module-level __getattr__.\n            version = ('main' if '.post' in mpl.__version__\n                       else f'v{mpl.__version__}')\n            _log.warning(\"\"\"\nBad key %(key)s in file %(fname)s, line %(line_no)s (%(line)r)\nYou probably need to get an updated matplotlibrc file from\nhttps://github.com/matplotlib/matplotlib/blob/%(version)s/lib/matplotlib/mpl-data/matplotlibrc\nor from the matplotlib source distribution\"\"\",\n                         dict(key=key, fname=fname, line_no=line_no,\n                              line=line.rstrip('\\n'), version=version))\n    return config",
                        "filename": "lib/matplotlib/__init__.py",
                        "start_index": 31322,
                        "end_index": 32789,
                        "start_line": 894,
                        "end_line": 957,
                        "max_line": 1505,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.5",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet includes code for reading and parsing the `matplotlibrc` file, which is where the encoding specification would need to be implemented or checked."
                }
            ]
        },
        "solution_task": "- Ensure that the `rc_params_from_file` function in `lib/matplotlib/__init__.py` uses `utf-8` encoding by default when opening the `matplotlibrc` file.\n- Add support for encoding cookies as per PEP 0263 by using the `tokenize.detect_encoding` function to detect the encoding of the file.\n- Modify the `_rc_params_in_file` helper function to handle the detected encoding.\n- If the encoding is not specified or detected, fall back to `utf-8`.\n- Catch `UnicodeDecodeError` and provide a meaningful error message suggesting to check the file encoding.\n- Example modification for `rc_params_from_file`:\n\n```python\nimport tokenize\n\ndef rc_params_from_file(fname, fail_on_error=False, use_default_template=True):\n    config = {}\n    with open(fname, 'rb') as fd:\n        try:\n            encoding, _ = tokenize.detect_encoding(fd.readline)\n            fd.seek(0)\n            for line in fd:\n                line = line.decode(encoding)\n                # Process the line\n        except UnicodeDecodeError:\n            _log.error(\"The file %r cannot be read because of the encoding. \"\n                       \"Ensure the file is saved with 'utf-8' encoding.\", fname)\n            raise\n    # Rest of the function implementation...\n    return config\n```\n- Ensure that the `test_Issue_1713` function in the test suite mocks `locale.getpreferredencoding` to return `'utf-8'` and tests the behavior with a `matplotlibrc` file containing non-ASCII characters.",
        "bouncer_response": {
            "score": 8,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable solution to the problem of encoding in matplotlibrc/style files. It suggests ensuring that the 'rc_params_from_file' function uses 'utf-8' encoding by default, adding support for encoding cookies, modifying the helper function to handle the detected encoding, and falling back to 'utf-8' if no encoding is specified. It also includes an example modification for the 'rc_params_from_file' function, which is directly relevant to the issue. Additionally, it advises catching 'UnicodeDecodeError' and providing a meaningful error message, which is a useful addition for error handling. The RESPONSE also suggests updating the test suite to reflect the changes, which is an important part of maintaining software quality. The inclusion of code snippets to check adds value by pointing to relevant sections of the codebase that may require attention in relation to the issue.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711698303.834767,
        "result": "- Ensure that the `rc_params_from_file` function in `lib/matplotlib/__init__.py` uses `utf-8` encoding by default when opening the `matplotlibrc` file.\n- Add support for encoding cookies as per PEP 0263 by using the `tokenize.detect_encoding` function to detect the encoding of the file.\n- Modify the `_rc_params_in_file` helper function to handle the detected encoding.\n- If the encoding is not specified or detected, fall back to `utf-8`.\n- Catch `UnicodeDecodeError` and provide a meaningful error message suggesting to check the file encoding.\n- Example modification for `rc_params_from_file`:\n\n```python\nimport tokenize\n\ndef rc_params_from_file(fname, fail_on_error=False, use_default_template=True):\n    config = {}\n    with open(fname, 'rb') as fd:\n        try:\n            encoding, _ = tokenize.detect_encoding(fd.readline)\n            fd.seek(0)\n            for line in fd:\n                line = line.decode(encoding)\n                # Process the line\n        except UnicodeDecodeError:\n            _log.error(\"The file %r cannot be read because of the encoding. \"\n                       \"Ensure the file is saved with 'utf-8' encoding.\", fname)\n            raise\n    # Rest of the function implementation...\n    return config\n```\n- Ensure that the `test_Issue_1713` function in the test suite mocks `locale.getpreferredencoding` to return `'utf-8'` and tests the behavior with a `matplotlibrc` file containing non-ASCII characters.\n\n### Code snippets to check\n\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries) \u2192 [users_explain](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries/users_explain)- [Lines 170 - 245](https://github.com/testbed/matplotlib__matplotlib__3.5/blob//galleries/users_explain/customizing.py#L170-L245)\n\n This snippet discusses the use of style sheets and the `matplotlibrc` file, which is directly related to the issue of specifying the encoding for these files. \n\n\n   - [Lines 246 - 269](https://github.com/testbed/matplotlib__matplotlib__3.5/blob//galleries/users_explain/customizing.py#L246-L269)\n\n This snippet provides information on how the `matplotlibrc` file is used and loaded, which is relevant to the issue of requiring a specific encoding for these files.\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//lib/matplotlib)- [Lines 894 - 957](https://github.com/testbed/matplotlib__matplotlib__3.5/blob//lib/matplotlib/__init__.py#L894-L957)\n\n This snippet includes code for reading and parsing the `matplotlibrc` file, which is where the encoding specification would need to be implemented or checked.",
        "context_relevance": 0.2,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE must be relevant to the entire PROMPT and answer the entire PROMPT completely to get a score of 10.\nSupporting Evidence: The RESPONSE provides a detailed solution to the issue described in the PROMPT, including code modifications and handling of potential errors. It addresses the need to ensure `matplotlibrc` and style files use `utf-8` encoding or have an encoding cookie, as well as the need to modify the test suite to reflect these changes. The RESPONSE is directly related to the summary and proposed fix sections of the PROMPT, providing a comprehensive answer to the issue at hand."
        },
        "qa_relevance": 1.0
    }
}