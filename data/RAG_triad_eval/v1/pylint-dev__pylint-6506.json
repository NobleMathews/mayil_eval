{
    "id": "pylint-dev__pylint-6506",
    "repo_name": "testbed/pylint-dev__pylint__2.14",
    "task_id": 6425267971679985244,
    "title": "Traceback printed for unrecognized option",
    "body": "### Bug description\n\nA traceback is printed when an unrecognized option is passed to pylint.\n\n### Configuration\n\n_No response_\n\n### Command used\n\n```shell\npylint -Q\n```\n\n\n### Pylint output\n\n```shell\n************* Module Command line\r\nCommand line:1:0: E0015: Unrecognized option found: Q (unrecognized-option)\r\nTraceback (most recent call last):\r\n  File \"/Users/markbyrne/venv310/bin/pylint\", line 33, in <module>\r\n    sys.exit(load_entry_point('pylint', 'console_scripts', 'pylint')())\r\n  File \"/Users/markbyrne/programming/pylint/pylint/__init__.py\", line 24, in run_pylint\r\n    PylintRun(argv or sys.argv[1:])\r\n  File \"/Users/markbyrne/programming/pylint/pylint/lint/run.py\", line 135, in __init__\r\n    args = _config_initialization(\r\n  File \"/Users/markbyrne/programming/pylint/pylint/config/config_initialization.py\", line 85, in _config_initialization\r\n    raise _UnrecognizedOptionError(options=unrecognized_options)\r\npylint.config.exceptions._UnrecognizedOptionError\n```\n\n\n### Expected behavior\n\nThe top part of the current output is handy:\r\n`Command line:1:0: E0015: Unrecognized option found: Q (unrecognized-option)`\r\n\r\nThe traceback I don't think is expected & not user-friendly.\r\nA usage tip, for example:\r\n```python\r\nmypy -Q\r\nusage: mypy [-h] [-v] [-V] [more options; see below]\r\n            [-m MODULE] [-p PACKAGE] [-c PROGRAM_TEXT] [files ...]\r\nmypy: error: unrecognized arguments: -Q\r\n```\n\n### Pylint version\n\n```shell\npylint 2.14.0-dev0\r\nastroid 2.11.3\r\nPython 3.10.0b2 (v3.10.0b2:317314165a, May 31 2021, 10:02:22) [Clang 12.0.5 (clang-1205.0.22.9)]\n```\n\n\n### OS / Environment\n\n_No response_\n\n### Additional dependencies\n\n_No response_\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pylint-dev__pylint__2.14.git",
    "requested_commit": "",
    "mayil_response": "- Update the `PylintRun` class's `__init__` method to catch the `_UnrecognizedOptionError` and call `self.handle_unrecognized_option_error(e)` without printing the traceback.\n- Modify the `handle_unrecognized_option_error` method to only print the error message and usage information without the traceback.\n- Ensure that the `_UnrecognizedOptionError` class in `exceptions.py` is properly formatted to store the unrecognized options and to be initialized with a message.\n- The `sys.exit(2)` call in `handle_unrecognized_option_error` is correct and should remain to indicate an error exit status to the shell.\n- The `E0015` error code in `pylinter.py` is correctly used for unrecognized options, so ensure that it is being raised correctly when an unrecognized option is encountered.\n- The `config_initialization.py` file should correctly raise `_UnrecognizedOptionError` when an unrecognized option is found, passing the list of unrecognized options to the exception.\n- No changes are required in the ISSUE_TEMPLATE files, `pragma_parser.py`, `base_options.py`, or `utils.py` as they are not directly related to the issue at hand.\n\n### Code snippets to check\n\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.14/tree//pylint) \u2192 [config](https://github.com/testbed/pylint-dev__pylint__2.14/tree//pylint/config)- [Lines 1 - 25](https://github.com/testbed/pylint-dev__pylint__2.14/blob//pylint/config/exceptions.py#L1-L25)\n\n This snippet defines the '_UnrecognizedOptionError' which is raised when an unrecognized option is passed to pylint. Modifying this exception to handle the error more gracefully without a traceback is likely part of the solution.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.14/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__2.14/tree//pylint/lint)- [Lines 190 - 1141](https://github.com/testbed/pylint-dev__pylint__2.14/blob//pylint/lint/pylinter.py#L190-L1141)\n\n This snippet contains the 'E0015' error code definition for 'unrecognized-option', which is the error being triggered. Adjustments here could be necessary to change the behavior when an unrecognized option is found.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.14/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__2.14/tree//pylint/lint)- [Lines 1 - 138](https://github.com/testbed/pylint-dev__pylint__2.14/blob//pylint/lint/utils.py#L1-L138)\n\n This snippet includes a function 'prepare_crash_report' that handles the creation of a crash report when pylint encounters an exception. Modifying this to exclude traceback for unrecognized options could be part of the solution.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.000394,
        "snippet_processor": 0.05498,
        "issue_star_creation": 0.03671,
        "issue_star_solver": 0.04805,
        "bouncer": 0.02606
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711700046.415787,
        "relevant_snippets": [
            {
                "code": "name: \ud83e\udd14 Support question\ndescription: Questions about pylint that are not covered in the documentation\nlabels: [\"Needs triage :inbox_tray:\", \"Question\", \"Documentation :green_book:\"]\nbody:\n  - type: markdown\n    attributes:\n      value: >\n        **Thank you for wanting to report a problem with pylint documentation!**\n\n\n        Please fill out your suggestions below. If the problem seems straightforward,\n        feel free to go ahead and submit a pull request instead!\n\n\n        \u26a0 Verify first that your issue is not [already reported on GitHub][issue\n        search].\n\n        \ud83d\udcac If you are seeking community support, please consider [starting a discussion\n        on Discord][Discussions].\n\n\n        [issue search]:\n        https://github.com/pylint-dev/pylint/issues?q=is%3Aissue+is%3Aopen+\n\n        [Discussions]: https://discord.com/invite/Egy6P8AMB5\n\n  - type: textarea\n    id: question\n    attributes:\n      label: Question\n    validations:\n      required: true\n  - type: textarea\n    id: documentation\n    attributes:\n      label: Documentation for future user\n      description:\n        Where did you expect this information to be? What do we need to add or what do\n        we need to reorganize?\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: Additional context\n      description: >\n        Add any other context, links, etc. about the question here.\n      placeholder: >-\n        I asked on https://stackoverflow.com/... and the community advised me to do X, Y\n        and Z.",
                "filename": ".github/ISSUE_TEMPLATE/QUESTION.yml",
                "start_index": 0,
                "end_index": 1528,
                "start_line": 1,
                "end_line": 49,
                "max_line": 49,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "- type: markdown\n    attributes:\n      value: |\n        **Thank you for wanting to report a bug in pylint!**\n\n        \u26a0 Please make sure that this [issue wasn't already requested][issue search], or already implemented in the main branch.\n\n\n        [issue search]: https://github.com/pylint-dev/pylint/issues?q=is%3Aissue+is%3Aopen+\n\n  - type: textarea\n    id: what-happened\n    attributes:\n      label: Bug description\n      description:\n        What is the bug about? Please provide the code that is causing the issue, and\n        configurations used if required\n      placeholder: |\n        # Please disable message unrelated to the bug\n        # pylint: disable=missing-docstring,\n        <a> = b + 1\n    validations:\n      required: true\n  - type: textarea\n    id: configuration\n    attributes:\n      label: Configuration\n      description:\n        Please provide the part of the configuration that is causing the bug if required\n        (Leave this part blank if the configuration is not relevant)\n      placeholder: |\n        # Leave this blank if the configuration is not relevant!\n\n        [MAIN]\n        load-plugins=\n            pylint.extensions.code_style\n\n        [MESSAGE CONTROL]\n        enable=\n            useless-suppression\n\n        # ...\n      render: ini\n  - type: textarea\n    id: cmd-used\n    attributes:\n      label: Command used\n      description: What was the command used to invoke pylint?\n      placeholder: |\n        pylint a.py\n      render: shell\n    validations:\n      required: true\n  - type: textarea\n    id: current-behavior\n    attributes:\n      label: Pylint output\n      description: What is the current pylint output?\n      placeholder: |\n        ************* Module a\n        a.py:3:1: E0001: invalid syntax (<unknown>, line 1) (syntax-error)\n      render: shell\n    validations:\n      required: true\n  - type: textarea\n    id: future-behavior\n    attributes:\n      label: Expected behavior\n      description:\n        What would you expect instead? For example expected output or behavior\n    validations:\n      required: true\n  - type: textarea\n    id: python-interpreter\n    attributes:\n      label: Pylint version\n      description: >-\n        Please copy and paste the result of `pylint --version` or specify the range of\n        version affected.\n      placeholder: |\n        pylint 2.9.6\n        astroid 2.6.5\n        Python 3.8.10 (default, Jun  2 2021, 10:49:15) [GCC 9.4.0]\n      render: shell\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: OS / Environment\n      description: >-\n        Provide all relevant information below, e.g. OS version, terminal etc.\n      placeholder: Fedora 33, Cygwin, etc.\n  -",
                "filename": ".github/ISSUE_TEMPLATE/BUG-REPORT.yml",
                "start_index": 101,
                "end_index": 2795,
                "start_line": 5,
                "end_line": 97,
                "max_line": 105,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "name: \u2728 Feature request\ndescription: Suggest an idea for pylint\nlabels: [\"Needs triage :inbox_tray:\"]\nbody:\n  - type: markdown\n    attributes:\n      value: |\n        **Thank you for wanting to make a suggestion for pylint!**\n\n        \u26a0 Please make sure that [this feature wasn't already requested][issue search] or already implemented in the main branch.\n\n\n        [issue search]: https://github.com/pylint-dev/pylint/issues?q=is%3Aissue+is%3Aopen+\n\n  - type: textarea\n    id: current-problem\n    attributes:\n      label: Current problem\n      description:\n        What are you trying to do, that you are unable to achieve with pylint as it\n        currently stands?\n      placeholder: >-\n        I'm trying to do X and I'm missing feature Y for this to be easily achievable.\n    validations:\n      required: true\n  - type: textarea\n    id: proposed-solution\n    attributes:\n      label: Desired solution\n      description: A clear and concise description of what you want to happen.\n      placeholder: >-\n        When I do X, I want to achieve Y in a situation when Z.\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: Additional context\n      description: >\n        Add any other context, links, etc. about the feature here. Describe how the\n        feature would be used, why it is needed and what it would solve.\n\n        **HINT:** You can paste https://gist.github.com links for larger files.\n      placeholder: >-\n        I asked on https://stackoverflow.com/... and the community advised me to do X, Y\n        and Z.",
                "filename": ".github/ISSUE_TEMPLATE/FEATURE-REQUEST.yml",
                "start_index": 0,
                "end_index": 1559,
                "start_line": 1,
                "end_line": 45,
                "max_line": 45,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 0.1
            },
            {
                "code": "name: \ud83d\udc1b Bug report\ndescription: Report a bug in pylint\nlabels: [\"Needs triage :inbox_tray:\"]\nbo",
                "filename": ".github/ISSUE_TEMPLATE/BUG-REPORT.yml",
                "start_index": 0,
                "end_index": 95,
                "start_line": 1,
                "end_line": 20,
                "max_line": 105,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\n\nclass UnrecognizedArgumentAction(Exception):\n    \"\"\"Raised if an ArgumentManager instance tries to add an argument for which the\n    action is not recognized.\n    \"\"\"\n\n\nclass _UnrecognizedOptionError(Exception):\n    \"\"\"Raised if an ArgumentManager instance tries to parse an option that is\n    unknown.\n    \"\"\"\n\n    def __init__(self, options: list[str], *args: object) -> None:\n        self.options = options\n        super().__init__(*args)\n\n\nclass ArgumentPreprocessingError(Exception):\n    \"\"\"Raised if an error occurs during argument pre-processing.\"\"\"",
                "filename": "pylint/config/exceptions.py",
                "start_index": 0,
                "end_index": 825,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "class UnRecognizedOptionError(PragmaParserError):\n    \"\"\"Thrown in case the of a valid but unrecognized option.\"\"\"\n\n\nclass InvalidPragmaError(PragmaParserError):\n    \"\"\"Thrown in case the pragma is invalid.\"\"\"\n\n\ndef parse_pragma(pylint_pragma: str) -> Generator[PragmaRepresenter, None, None]:\n    action: str | None = None\n    messages: list[str] = []\n    assignment_required = False\n    previous_token = \"\"\n\n    for mo in re.finditer(TOK_REGEX, pylint_pragma):\n        kind = mo.lastgroup\n        value = mo.group()\n\n        if kind == \"ASSIGN\":\n            if not assignment_required:\n                if action:\n                    # A keyword has been found previously but doesn't support assignment\n                    raise UnRecognizedOptionError(\n                        \"The keyword doesn't support assignment\", action\n                    )\n                if previous_token:\n                    # Something found previously but not a known keyword\n                    raise UnRecognizedOptionError(\n                        \"The keyword is unknown\", previous_token\n                    )\n                # Nothing at all detected before this assignment\n                raise InvalidPragmaError(\"Missing keyword before assignment\", \"\")\n            assignment_required = False\n        elif assignment_required:\n            raise InvalidPragmaError(\n                \"The = sign is missing after the keyword\", action or \"\"\n            )\n        elif kind == \"KEYWORD\":\n            if action:\n                yield emit_pragma_representer(action, messages)\n            action = value\n            messages = []\n            assignment_required = action in MESSAGE_KEYWORDS\n        elif kind in {\"MESSAGE_STRING\", \"MESSAGE_NUMBER\"}:\n            messages.append(value)\n            assignment_required = False\n        else:\n            raise RuntimeError(\"Token not recognized\")\n\n        previous_token = value\n\n    if action:\n        yield emit_pragma_representer(action, messages)\n    else:\n        raise UnRecognizedOptionError(\"The keyword is unknown\", previous_token)",
                "filename": "pylint/utils/pragma_parser.py",
                "start_index": 2993,
                "end_index": 5063,
                "start_line": 81,
                "end_line": 135,
                "max_line": 135,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"I0022\": (\n        'Pragma \"%s\" is deprecated, use \"%s\" instead',\n        \"deprecated-pragma\",\n        \"Some inline pylint options have been renamed or reworked, \"\n        \"only the most recent form should be used. \"\n        \"NOTE:skip-all is only available with pylint >= 0.26\",\n        {\n            \"old_names\": [(\"I0014\", \"deprecated-disable-all\")],\n            \"scope\": WarningScope.LINE,\n            \"default_enabled\": False,\n        },\n    ),\n    \"E0001\": (\n        \"%s\",\n        \"syntax-error\",\n        \"Used when a syntax error is raised for a module.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0011\": (\n        \"Unrecognized file option %r\",\n        \"unrecognized-inline-option\",\n        \"Used when an unknown inline option is encountered.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"W0012\": (\n        \"Unknown option value for '%s', expected a valid pylint message and got '%s'\",\n        \"unknown-option-value\",\n        \"Used when an unknown value is encountered for an option.\",\n        {\n            \"scope\": WarningScope.LINE,\n            \"old_names\": [(\"E0012\", \"bad-option-value\")],\n        },\n    ),\n    \"R0022\": (\n        \"Useless option value for '%s', %s\",\n        \"useless-option-value\",\n        \"Used when a value for an option that is now deleted from pylint\"\n        \" is encountered.\",\n        {\n            \"scope\": WarningScope.LINE,\n            \"old_names\": [(\"E0012\", \"bad-option-value\")],\n        },\n    ),\n    \"E0013\": (\n        \"Plugin '%s' is impossible to load, is it installed ? ('%s')\",\n        \"bad-plugin-value\",\n        \"Used when a bad value is used in 'load-plugins'.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0014\": (\n        \"Out-of-place setting encountered in top level configuration-section '%s' : '%s'\",\n        \"bad-configuration-section\",\n        \"Used when we detect a setting in the top level of a toml configuration that\"\n        \" shouldn't be there.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0015\": (\n        \"Unrecognized option found: %s\",\n        \"unrecognized-option\",\n        \"Used when we detect an option that we do not recognize.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n}",
                "filename": "pylint/lint/pylinter.py",
                "start_index": 6020,
                "end_index": 8200,
                "start_line": 190,
                "end_line": 1141,
                "max_line": 1310,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "(\n        (\n            \"rcfile\",\n            {\n                \"action\": _DoNothingAction,\n                \"kwargs\": {},\n                \"group\": \"Commands\",\n                \"help\": \"Specify a configuration file to load.\",\n                \"hide_from_config_file\": True,\n            },\n        ),\n        (\n            \"output\",\n            {\n                \"action\": _DoNothingAction,\n                \"kwargs\": {},\n                \"group\": \"Commands\",\n                \"help\": \"Specify an output file.\",\n                \"hide_from_config_file\": True,\n            },\n        ),\n        (\n            \"init-hook\",\n            {\n                \"action\": _DoNothingAction,\n                \"kwargs\": {},\n                \"help\": \"Python code to execute, usually for sys.path \"\n                \"manipulation such as pygtk.require().\",\n            },\n        ),\n        (\n            \"help-msg\",\n            {\n                \"action\": _MessageHelpAction,\n                \"kwargs\": {\"Run\": self},\n                \"group\": \"Commands\",\n                \"help\": \"Display a help message for the given message id and \"\n                \"exit. The value may be a comma separated list of message ids.\",\n                \"hide_from_config_file\": True,\n            },\n        ),\n        (\n            \"list-msgs\",\n            {\n                \"action\": _ListMessagesAction,\n                \"kwargs\": {\"Run\": self},\n                \"group\": \"Commands\",\n                \"help\": \"Display a list of all pylint's messages divided by whether \"\n                \"they are emittable with the given interpreter.\",\n                \"hide_from_config_file\": True,\n            },\n        ),\n        (\n            \"list-msgs-enabled\",\n            {\n                \"action\": _ListMessagesEnabledAction,\n                \"kwargs\": {\"Run\": self},\n                \"group\": \"Commands\",\n                \"help\": \"Display a list of what messages are enabled, \"\n                \"disabled and non-emittable with the given configuration.\",\n                \"hide_from_config_file\": True,\n            },\n        ),\n        (\n            \"list-groups\",\n            {\n                \"action\": _ListCheckGroupsAction,\n                \"kwargs\": {\"Run\": self},\n                \"group\": \"Commands\",\n                \"help\": \"List pylint's message groups.\",\n                \"hide_from_config_file\": True,\n            },\n        ),\n        (\n            \"list-conf-levels\",\n            {\n                \"action\": _ListConfidenceLevelsAction,\n                \"kwargs\": {\"Run\": self},\n                \"group\": \"Commands\",\n                \"help\": \"Generate pylint's confidence levels.\",\n                \"hide_from_config_file\": True,\n            },\n        ),",
                "filename": "pylint/lint/base_options.py",
                "start_index": 15601,
                "end_index": 18305,
                "start_line": 3,
                "end_line": 595,
                "max_line": 596,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nimport contextlib\nimport platform\nimport sys\nimport traceback\nfrom collections.abc import Iterator, Sequence\nfrom datetime import datetime\nfrom pathlib import Path\n\nfrom pylint.constants import PYLINT_HOME, full_version\n\n\ndef prepare_crash_report(ex: Exception, filepath: str, crash_file_path: str) -> Path:\n    issue_template_path = (\n        Path(PYLINT_HOME) / datetime.now().strftime(str(crash_file_path))\n    ).resolve()\n    with open(filepath, encoding=\"utf8\") as f:\n        file_content = f.read()\n    template = \"\"\n    if not issue_template_path.exists():\n        template = \"\"\"\\\nFirst, please verify that the bug is not already filled:\nhttps://github.com/pylint-dev/pylint/issues/\n\nThen create a new issue:\nhttps://github.com/pylint-dev/pylint/issues/new?labels=Crash \ud83d\udca5%2CNeeds triage \ud83d\udce5\n\n\n\"\"\"\n    template += f\"\"\"\nIssue title:\nCrash ``{ex}`` (if possible, be more specific about what made pylint crash)\n\n### Bug description\n\nWhen parsing the following ``a.py``:\n\n<!--\n If sharing the code is not an option, please state so,\n but providing only the stacktrace would still be helpful.\n -->\n\n```python\n{file_content}\n```\n\n### Command used\n\n```shell\npylint a.py\n```\n\n### Pylint output\n\n<details open>\n    <summary>\n        pylint crashed with a ``{ex.__class__.__name__}`` and with the following stacktrace:\n    </summary>\n\n```python\n\"\"\"\n    template += traceback.format_exc()\n    template += f\"\"\"\n```\n\n\n</details>\n\n### Expected behavior\n\nNo crash.\n\n### Pylint version\n\n```shell\n{full_version}\n```\n\n### OS / Environment\n\n{sys.platform} ({platform.system()})\n\n### Additional dependencies\n\n<!--\nPlease remove this part if you're not using any of\nyour dependencies in the example.\n -->\n\"\"\"\n    try:\n        with open(issue_template_path, \"a\", encoding=\"utf8\") as f:\n            f.write(template)\n    except Exception as exc:  # pylint: disable=broad-except\n        print(\n            f\"Can't write the issue template for the crash in {issue_template_path} \"\n            f\"because of: '{exc}'\\nHere's the content anyway:\\n{template}.\",\n            file=sys.stderr,\n        )\n    return issue_template_path\n\n\ndef get_fatal_error_message(filepath: str, issue_template_path: Path) -> str:\n    return (\n        f\"Fatal error while checking '{filepath}'. \"\n        f\"Please open an issue in our bug tracker so we address this. \"\n        f\"There is a pre-filled template that you can use in '{issue_template_path}'.\"\n    )\n\n\ndef",
                "filename": "pylint/lint/utils.py",
                "start_index": 0,
                "end_index": 2691,
                "start_line": 1,
                "end_line": 138,
                "max_line": 148,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "except UnRecognizedOptionError as err:\n                self.linter.add_message(\n                    \"unrecognized-inline-option\", args=err.token, line=start[0]\n                )\n                continue\n            except InvalidPragmaError as err:\n                self.linter.add_message(\n                    \"bad-inline-option\", args=err.token, line=start[0]\n                )\n                continue",
                "filename": "pylint/lint/message_state_handler.py",
                "start_index": 16893,
                "end_index": 17296,
                "start_line": 420,
                "end_line": 429,
                "max_line": 429,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.14",
                "sha": "",
                "context_relevance": 0.2
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "pylint/config/exceptions.py": [
                {
                    "chunk": {
                        "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\n\nclass UnrecognizedArgumentAction(Exception):\n    \"\"\"Raised if an ArgumentManager instance tries to add an argument for which the\n    action is not recognized.\n    \"\"\"\n\n\nclass _UnrecognizedOptionError(Exception):\n    \"\"\"Raised if an ArgumentManager instance tries to parse an option that is\n    unknown.\n    \"\"\"\n\n    def __init__(self, options: list[str], *args: object) -> None:\n        self.options = options\n        super().__init__(*args)\n\n\nclass ArgumentPreprocessingError(Exception):\n    \"\"\"Raised if an error occurs during argument pre-processing.\"\"\"",
                        "filename": "pylint/config/exceptions.py",
                        "start_index": 0,
                        "end_index": 825,
                        "start_line": 1,
                        "end_line": 25,
                        "max_line": 25,
                        "git_instance": "github",
                        "repo_name": "testbed/pylint-dev__pylint__2.14",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet defines the '_UnrecognizedOptionError' which is raised when an unrecognized option is passed to pylint. Modifying this exception to handle the error more gracefully without a traceback is likely part of the solution."
                }
            ],
            "pylint/lint/pylinter.py": [
                {
                    "chunk": {
                        "code": "\"I0022\": (\n        'Pragma \"%s\" is deprecated, use \"%s\" instead',\n        \"deprecated-pragma\",\n        \"Some inline pylint options have been renamed or reworked, \"\n        \"only the most recent form should be used. \"\n        \"NOTE:skip-all is only available with pylint >= 0.26\",\n        {\n            \"old_names\": [(\"I0014\", \"deprecated-disable-all\")],\n            \"scope\": WarningScope.LINE,\n            \"default_enabled\": False,\n        },\n    ),\n    \"E0001\": (\n        \"%s\",\n        \"syntax-error\",\n        \"Used when a syntax error is raised for a module.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0011\": (\n        \"Unrecognized file option %r\",\n        \"unrecognized-inline-option\",\n        \"Used when an unknown inline option is encountered.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"W0012\": (\n        \"Unknown option value for '%s', expected a valid pylint message and got '%s'\",\n        \"unknown-option-value\",\n        \"Used when an unknown value is encountered for an option.\",\n        {\n            \"scope\": WarningScope.LINE,\n            \"old_names\": [(\"E0012\", \"bad-option-value\")],\n        },\n    ),\n    \"R0022\": (\n        \"Useless option value for '%s', %s\",\n        \"useless-option-value\",\n        \"Used when a value for an option that is now deleted from pylint\"\n        \" is encountered.\",\n        {\n            \"scope\": WarningScope.LINE,\n            \"old_names\": [(\"E0012\", \"bad-option-value\")],\n        },\n    ),\n    \"E0013\": (\n        \"Plugin '%s' is impossible to load, is it installed ? ('%s')\",\n        \"bad-plugin-value\",\n        \"Used when a bad value is used in 'load-plugins'.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0014\": (\n        \"Out-of-place setting encountered in top level configuration-section '%s' : '%s'\",\n        \"bad-configuration-section\",\n        \"Used when we detect a setting in the top level of a toml configuration that\"\n        \" shouldn't be there.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0015\": (\n        \"Unrecognized option found: %s\",\n        \"unrecognized-option\",\n        \"Used when we detect an option that we do not recognize.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n}",
                        "filename": "pylint/lint/pylinter.py",
                        "start_index": 6020,
                        "end_index": 8200,
                        "start_line": 190,
                        "end_line": 1141,
                        "max_line": 1310,
                        "git_instance": "github",
                        "repo_name": "testbed/pylint-dev__pylint__2.14",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the 'E0015' error code definition for 'unrecognized-option', which is the error being triggered. Adjustments here could be necessary to change the behavior when an unrecognized option is found."
                }
            ],
            "pylint/lint/utils.py": [
                {
                    "chunk": {
                        "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nimport contextlib\nimport platform\nimport sys\nimport traceback\nfrom collections.abc import Iterator, Sequence\nfrom datetime import datetime\nfrom pathlib import Path\n\nfrom pylint.constants import PYLINT_HOME, full_version\n\n\ndef prepare_crash_report(ex: Exception, filepath: str, crash_file_path: str) -> Path:\n    issue_template_path = (\n        Path(PYLINT_HOME) / datetime.now().strftime(str(crash_file_path))\n    ).resolve()\n    with open(filepath, encoding=\"utf8\") as f:\n        file_content = f.read()\n    template = \"\"\n    if not issue_template_path.exists():\n        template = \"\"\"\\\nFirst, please verify that the bug is not already filled:\nhttps://github.com/pylint-dev/pylint/issues/\n\nThen create a new issue:\nhttps://github.com/pylint-dev/pylint/issues/new?labels=Crash \ud83d\udca5%2CNeeds triage \ud83d\udce5\n\n\n\"\"\"\n    template += f\"\"\"\nIssue title:\nCrash ``{ex}`` (if possible, be more specific about what made pylint crash)\n\n### Bug description\n\nWhen parsing the following ``a.py``:\n\n<!--\n If sharing the code is not an option, please state so,\n but providing only the stacktrace would still be helpful.\n -->\n\n```python\n{file_content}\n```\n\n### Command used\n\n```shell\npylint a.py\n```\n\n### Pylint output\n\n<details open>\n    <summary>\n        pylint crashed with a ``{ex.__class__.__name__}`` and with the following stacktrace:\n    </summary>\n\n```python\n\"\"\"\n    template += traceback.format_exc()\n    template += f\"\"\"\n```\n\n\n</details>\n\n### Expected behavior\n\nNo crash.\n\n### Pylint version\n\n```shell\n{full_version}\n```\n\n### OS / Environment\n\n{sys.platform} ({platform.system()})\n\n### Additional dependencies\n\n<!--\nPlease remove this part if you're not using any of\nyour dependencies in the example.\n -->\n\"\"\"\n    try:\n        with open(issue_template_path, \"a\", encoding=\"utf8\") as f:\n            f.write(template)\n    except Exception as exc:  # pylint: disable=broad-except\n        print(\n            f\"Can't write the issue template for the crash in {issue_template_path} \"\n            f\"because of: '{exc}'\\nHere's the content anyway:\\n{template}.\",\n            file=sys.stderr,\n        )\n    return issue_template_path\n\n\ndef get_fatal_error_message(filepath: str, issue_template_path: Path) -> str:\n    return (\n        f\"Fatal error while checking '{filepath}'. \"\n        f\"Please open an issue in our bug tracker so we address this. \"\n        f\"There is a pre-filled template that you can use in '{issue_template_path}'.\"\n    )\n\n\ndef",
                        "filename": "pylint/lint/utils.py",
                        "start_index": 0,
                        "end_index": 2691,
                        "start_line": 1,
                        "end_line": 138,
                        "max_line": 148,
                        "git_instance": "github",
                        "repo_name": "testbed/pylint-dev__pylint__2.14",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet includes a function 'prepare_crash_report' that handles the creation of a crash report when pylint encounters an exception. Modifying this to exclude traceback for unrecognized options could be part of the solution."
                }
            ]
        },
        "solution_task": "- Update the `PylintRun` class's `__init__` method to catch the `_UnrecognizedOptionError` and call `self.handle_unrecognized_option_error(e)` without printing the traceback.\n- Modify the `handle_unrecognized_option_error` method to only print the error message and usage information without the traceback.\n- Ensure that the `_UnrecognizedOptionError` class in `exceptions.py` is properly formatted to store the unrecognized options and to be initialized with a message.\n- The `sys.exit(2)` call in `handle_unrecognized_option_error` is correct and should remain to indicate an error exit status to the shell.\n- The `E0015` error code in `pylinter.py` is correctly used for unrecognized options, so ensure that it is being raised correctly when an unrecognized option is encountered.\n- The `config_initialization.py` file should correctly raise `_UnrecognizedOptionError` when an unrecognized option is found, passing the list of unrecognized options to the exception.\n- No changes are required in the ISSUE_TEMPLATE files, `pragma_parser.py`, `base_options.py`, or `utils.py` as they are not directly related to the issue at hand.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE must provide precise, actionable guidance and directly address all aspects of the described bug to facilitate its resolution.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable plan to address the bug described in the PROMPT. It suggests updating the `PylintRun` class to handle the `_UnrecognizedOptionError` more gracefully, modifying the `handle_unrecognized_option_error` method to print only the error message and usage information, and ensuring that the `_UnrecognizedOptionError` class is properly formatted. The RESPONSE also correctly identifies that the `sys.exit(2)` call should remain to indicate an error exit status. Additionally, it provides guidance on which parts of the codebase do not require changes and offers specific code snippets to check, which is highly relevant for developers looking to fix the bug. The RESPONSE does not address the entire codebase, which is not necessary for the resolution of this specific issue, hence it does not receive a perfect score.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711700159.688792,
        "result": "- Update the `PylintRun` class's `__init__` method to catch the `_UnrecognizedOptionError` and call `self.handle_unrecognized_option_error(e)` without printing the traceback.\n- Modify the `handle_unrecognized_option_error` method to only print the error message and usage information without the traceback.\n- Ensure that the `_UnrecognizedOptionError` class in `exceptions.py` is properly formatted to store the unrecognized options and to be initialized with a message.\n- The `sys.exit(2)` call in `handle_unrecognized_option_error` is correct and should remain to indicate an error exit status to the shell.\n- The `E0015` error code in `pylinter.py` is correctly used for unrecognized options, so ensure that it is being raised correctly when an unrecognized option is encountered.\n- The `config_initialization.py` file should correctly raise `_UnrecognizedOptionError` when an unrecognized option is found, passing the list of unrecognized options to the exception.\n- No changes are required in the ISSUE_TEMPLATE files, `pragma_parser.py`, `base_options.py`, or `utils.py` as they are not directly related to the issue at hand.\n\n### Code snippets to check\n\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.14/tree//pylint) \u2192 [config](https://github.com/testbed/pylint-dev__pylint__2.14/tree//pylint/config)- [Lines 1 - 25](https://github.com/testbed/pylint-dev__pylint__2.14/blob//pylint/config/exceptions.py#L1-L25)\n\n This snippet defines the '_UnrecognizedOptionError' which is raised when an unrecognized option is passed to pylint. Modifying this exception to handle the error more gracefully without a traceback is likely part of the solution.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.14/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__2.14/tree//pylint/lint)- [Lines 190 - 1141](https://github.com/testbed/pylint-dev__pylint__2.14/blob//pylint/lint/pylinter.py#L190-L1141)\n\n This snippet contains the 'E0015' error code definition for 'unrecognized-option', which is the error being triggered. Adjustments here could be necessary to change the behavior when an unrecognized option is found.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.14/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__2.14/tree//pylint/lint)- [Lines 1 - 138](https://github.com/testbed/pylint-dev__pylint__2.14/blob//pylint/lint/utils.py#L1-L138)\n\n This snippet includes a function 'prepare_crash_report' that handles the creation of a crash report when pylint encounters an exception. Modifying this to exclude traceback for unrecognized options could be part of the solution.",
        "context_relevance": 0.33000000000000007,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE must be relevant and answer the entire PROMPT completely to get a score of 10.\nSupporting Evidence: The RESPONSE provides a detailed technical plan to address the bug described in the PROMPT, which involves an unrecognized option causing a traceback in pylint. It outlines specific changes to the codebase, including catching the error, modifying the error handling method, and ensuring the correct error code is used. The RESPONSE is directly related to the bug description, the expected behavior, and the relevant code snippets provided in the PROMPT. It also aligns with the Pylint version and output mentioned, making it fully relevant to the entire PROMPT."
        },
        "qa_relevance": 1.0
    }
}