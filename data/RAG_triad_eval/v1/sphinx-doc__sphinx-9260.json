{
    "id": "sphinx-doc__sphinx-9260",
    "repo_name": "testbed/sphinx-doc__sphinx__4.1",
    "task_id": 2566146811729286638,
    "title": "Linkchecker croaks on specific anchors of GitHub-rendered reStructuredText documents",
    "body": "Dear Sphinx developers,\r\n\r\nfirst things first: Thanks a stack for your paramount work on Sphinx. You already saved many souls of people writing technical documentation and probably also beyond this audience.\r\n\r\nWe just observed a minor woe with Sphinx' linkchecker we wanted to share with you. We really like that the linkchecker is able to check anchors within HTML documents as contributed by @intgr on behalf of #842.\r\n\r\nWith kind regards,\r\nAndreas.\r\n\r\n---\r\n\r\n**Describe the bug**\r\nWe had the link [1] in our documentation, and, maybe after upgrading to more recent versions of Sphinx, the linkchecker suddenly started croaking on that. After changing it to [2], it worked again. When inspecting the source code of the respective HTML page, you can clearly see that the anchor name `#user-content-make-changes` defined by\r\n```html\r\n<a name=\"user-content-make-changes\"></a>\r\n<a id=\"user-content-make-changes\" class=\"anchor\" aria-hidden=\"true\" href=\"#make-changes\">\r\n```\r\nis technically correct. However, it apparently has worked before by referencing `#make-changes`. So, we are wondering if something changed on GitHub's reStructuredText renderer or even Browsers interpreting the HTML link anchors differently. When invoking those links [1,2] in the Browser, actually both work, including navigation to the appropriate place within the page. Funny, hm?\r\n\r\n[1] https://github.com/crate/crate-docs-theme/blob/master/DEVELOP.rst#make-changes\r\n[2] https://github.com/crate/crate-docs-theme/blob/master/DEVELOP.rst#user-content-make-changes\r\n\r\n**Expected behavior**\r\nTechnically, from the perspective we know our way around HTML, the behavior is probably the right thing and correct. \r\n\r\nHowever, as we can see, something might have been changed on the HTML standard that Browsers are capable of interpreting different styles of defining link anchors. So, it might be worth to revisit this space and maybe improve the linkchecker implementation on those aspects.\r\n\r\n**Environment info**\r\n- OS: Linux\r\n- Python version: 3.9.2\r\n- Sphinx version: 3.5.2\r\n- Firefox: 86.0\r\n\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/sphinx-doc__sphinx__4.1.git",
    "requested_commit": "",
    "mayil_response": "- Update the `AnchorCheckParser` class in `sphinx/builders/linkcheck.py` to handle both `#user-content-make-changes` and `#make-changes` style anchors.\n- Modify the `handle_starttag` method to check for both the original anchor name and the anchor name prefixed with `user-content-`.\n- Ensure that the `check_anchor_in_html_document` function (or equivalent logic within the `AnchorCheckParser` class) checks for both variations of the anchor name.\n\n```python\nclass AnchorCheckParser(HTMLParser):\n    \"\"\"Specialized HTML parser that looks for a specific anchor.\"\"\"\n\n    def __init__(self, search_anchor: str) -> None:\n        super().__init__()\n        self.search_anchor = search_anchor\n        self.found = False\n\n    def handle_starttag(self, tag: Any, attrs: Any) -> None:\n        for key, value in attrs:\n            if key in ('id', 'name'):\n                if value == self.search_anchor or value == self.search_anchor.removeprefix('user-content-'):\n                    self.found = True\n                    break\n```\n\n- Uncomment the `app.connect('linkcheck-process-uri', rewrite_github_anchor)` line in the `setup` function in `sphinx/builders/linkcheck.py` to re-enable the URL rewrite handler for GitHub anchors.\n\n```python\ndef setup(app: Sphinx) -> dict[str, Any]:\n    # ... other setup code ...\n    app.connect('linkcheck-process-uri', rewrite_github_anchor)\n    # ... other setup code ...\n```\n\n- Ensure that the `rewrite_github_anchor` function in `sphinx/builders/linkcheck.py` can handle both `#user-content-make-changes` and `#make-changes` style anchors correctly.\n\n```python\ndef rewrite_github_anchor(app: Sphinx, uri: str) -> str | None:\n    \"\"\"Rewrite anchor name of the hyperlink to github.com\"\"\"\n    parsed = urlparse(uri)\n    if parsed.hostname == \"github.com\" and parsed.fragment:\n        prefixed = parsed.fragment.startswith('user-content-')\n        if not prefixed:\n            fragment = f'user-content-{parsed.fragment}'\n            return urlunparse(parsed._replace(fragment=fragment))\n        else:\n            return urlunparse(parsed)\n    return None\n```\n\n### Code snippets to check\n\n-  \u2192 [sphinx](https://github.com/testbed/sphinx-doc__sphinx__4.1/tree//sphinx) \u2192 [builders](https://github.com/testbed/sphinx-doc__sphinx__4.1/tree//sphinx/builders)- [Lines 493 - 559](https://github.com/testbed/sphinx-doc__sphinx__4.1/blob//sphinx/builders/linkcheck.py#L493-L559)\n\n This snippet contains the 'rewrite_github_anchor' function which is directly related to the issue of handling GitHub-rendered anchors in the linkchecker. \n\n\n   - [Lines 1 - 430](https://github.com/testbed/sphinx-doc__sphinx__4.1/blob//sphinx/builders/linkcheck.py#L1-L430)\n\n This snippet includes the 'AnchorCheckParser' class which is used to check for the existence of specific anchors in HTML documents, relevant to the issue at hand. \n\n\n   - [Lines 156 - 468](https://github.com/testbed/sphinx-doc__sphinx__4.1/blob//sphinx/builders/linkcheck.py#L156-L468)\n\n This snippet shows the logic for checking anchors and handling different HTTP response statuses, which is relevant to the issue of the linkchecker failing on certain anchors. \n\n\n   - [Lines 382 - 452](https://github.com/testbed/sphinx-doc__sphinx__4.1/blob//sphinx/builders/linkcheck.py#L382-L452)\n\n This snippet includes logic for checking URIs and handling redirects, which may be relevant when considering improvements to the linkchecker's handling of GitHub anchors. \n\n\n   - [Lines 562 - 592](https://github.com/testbed/sphinx-doc__sphinx__4.1/blob//sphinx/builders/linkcheck.py#L562-L592)\n\n This snippet shows the setup function where the 'rewrite_github_anchor' function is commented out, indicating a known issue with GitHub anchors that may be related to the reported bug. \n\n\n   - [Lines 122 - 176](https://github.com/testbed/sphinx-doc__sphinx__4.1/blob//sphinx/builders/linkcheck.py#L122-L176)\n\n This snippet includes the 'process_result' function which processes the results of link checks, including handling of broken links, which is relevant to the issue.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0003915,
        "snippet_processor": 0.0699,
        "issue_star_creation": 0.02797,
        "issue_star_solver": 0.06796,
        "bouncer": 0.02326
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711702428.769162,
        "relevant_snippets": [
            {
                "code": "name: Bug report\ndescription: Something is not working correctly.\nlabels: \"bug\"\n\nbody:\n  - type: textarea\n    attributes:\n      label: Describe the bug\n      description: >-\n        A clear and concise description of what the bug is, including the \n        expected behaviour and what has gone wrong.\n        \n        Please include screenshots, if applicable.\n    validations:\n      required: true\n\n  - type: textarea\n    attributes:\n      label: How to Reproduce\n      description: >-\n        Please provide steps to reproduce this bug, with the smallest possible\n        set of source files. For normal bugs this should ideally be one \n        ``index.rst`` file, and for ``sphinx.ext.autodoc`` bugs, this should\n        ideally be a single ``index.rst`` file, and a single example Python \n        module.\n      placeholder: |\n        Minimal method (you can also paste the contents of ``index.rst`` and\n        ``conf.py`` into this report):\n        ```bash\n        $ echo \"Content demonstrating the bug...\" > index.rst\n        $ echo \"\" > conf.py\n        $ sphinx-build -M html . _build\n        $ # open _build/html/index and see bla bla\n        ```\n        \n        ``git clone`` method (this is advised against, to help the Sphinx team):\n        ```bash\n        $ git clone https://github.com/.../some_project\n        $ cd some_project\n        $ pip install -r requirements.txt\n        $ cd docs\n        $ make html SPHINXOPTS=\"-D language=de\"\n        $ # open _build/html/index and see bla bla\n        ```\n    validations:\n      required: true\n\n  - type: markdown\n    attributes:\n      value: |\n        ## Environment info\n\n  - type: textarea\n    attributes:\n      label: Environment Information\n      render: text\n      description: >-\n        Install the latest Sphinx \n        ``pip install -U \"sphinx>=5.3\"``\n        then run ``sphinx-build --bug-report`` or ``python -m sphinx --bug-report``.\n        and paste the output here.\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: Sphinx extensions\n      render: python\n      description: >-\n        Attempt to reproduce your error with the smallest set of extensions possible.\n        This makes it easier to determine where the problem you are encountering is.\n        \n        e.g. ``[\"sphinx.ext.autodoc\", \"recommonmark\"]``\n    validations:\n      required: false\n  - type: textarea\n    attributes:\n      label: Additional context\n      description: >-\n        Add any other context about the problem here, for example:\n        \n        * Any other tools used (Browser, TeX, etc) with versions\n        * Reference to another issue or pull request\n        * URL to some external resource",
                "filename": ".github/ISSUE_TEMPLATE/bug-report.yml",
                "start_index": 0,
                "end_index": 2685,
                "start_line": 1,
                "end_line": 83,
                "max_line": 83,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.1",
                "sha": "",
                "context_relevance": 0.7
            },
            {
                "code": "class HyperlinkCollector(SphinxPostTransform):\n    builders = ('linkcheck',)\n    default_priority = 800\n\n    def run(self, **kwargs: Any) -> None:\n        builder = cast(CheckExternalLinksBuilder, self.app.builder)\n        hyperlinks = builder.hyperlinks\n\n        def add_uri(uri: str, node: nodes.Element) -> None:\n            newuri = self.app.emit_firstresult('linkcheck-process-uri', uri)\n            if newuri:\n                uri = newuri\n\n            try:\n                lineno = get_node_line(node)\n            except ValueError:\n                lineno = None\n            uri_info = Hyperlink(uri, self.env.docname, lineno)\n            if uri not in hyperlinks:\n                hyperlinks[uri] = uri_info\n\n        # reference nodes\n        for refnode in self.document.findall(nodes.reference):\n            if 'refuri' not in refnode:\n                continue\n            uri = refnode['refuri']\n            add_uri(uri, refnode)\n\n        # image nodes\n        for imgnode in self.document.findall(nodes.image):\n            uri = imgnode['candidates'].get('?')\n            if uri and '://' in uri:\n                add_uri(uri, imgnode)\n\n        # raw nodes\n        for rawnode in self.document.findall(nodes.raw):\n            uri = rawnode.get('source')\n            if uri and '://' in uri:\n                add_uri(uri, rawnode)\n\n\ndef rewrite_github_anchor(app: Sphinx, uri: str) -> str | None:\n    \"\"\"Rewrite anchor name of the hyperlink to github.com\n\n    The hyperlink anchors in github.com are dynamically generated.  This rewrites\n    them before checking and makes them comparable.\n    \"\"\"\n    parsed = urlparse(uri)\n    if parsed.hostname == \"github.com\" and parsed.fragment:\n        prefixed = parsed.fragment.startswith('user-content-')\n        if not prefixed:\n            fragment = f'user-content-{parsed.fragment}'\n            return urlunparse(parsed._replace(fragment=fragment))\n    return None\n\n\ndef compile_linkcheck_allowed_redirects(app: Sphinx, config: Config) -> None:\n    \"\"\"Compile patterns in linkcheck_allowed_redirects to the regexp objects.\"\"\"\n    for url, pattern in list(app.config.linkcheck_allowed_redirects.items()):\n        try:\n            app.config.linkcheck_allowed_redirects[re.compile(url)] = re.compile(pattern)\n        except re.error as exc:\n            logger.warning(__('Failed to compile regex in linkcheck_allowed_redirects: %r %s'),\n                           exc.pattern, exc.msg)\n        finally:\n            # Remove the original regexp-string\n            app.config.linkcheck_allowed_redirects.pop(url)",
                "filename": "sphinx/builders/linkcheck.py",
                "start_index": 19389,
                "end_index": 21951,
                "start_line": 493,
                "end_line": 559,
                "max_line": 592,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.1",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "\"\"\"The CheckExternalLinksBuilder class.\"\"\"\n\nfrom __future__ import annotations\n\nimport json\nimport re\nimport socket\nimport time\nfrom copy import deepcopy\nfrom datetime import datetime, timezone\nfrom email.utils import parsedate_to_datetime\nfrom html.parser import HTMLParser\nfrom os import path\nfrom queue import PriorityQueue, Queue\nfrom threading import Thread\nfrom typing import Any, Generator, NamedTuple, Tuple, Union, cast\nfrom urllib.parse import unquote, urlparse, urlunparse\n\nfrom docutils import nodes\nfrom requests import Response\nfrom requests.exceptions import ConnectionError, HTTPError, TooManyRedirects\n\nfrom sphinx.application import Sphinx\nfrom sphinx.builders.dummy import DummyBuilder\nfrom sphinx.config import Config\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.locale import __\nfrom sphinx.transforms.post_transforms import SphinxPostTransform\nfrom sphinx.util import encode_uri, logging, requests\nfrom sphinx.util.console import darkgray, darkgreen, purple, red, turquoise  # type: ignore\nfrom sphinx.util.nodes import get_node_line\n\nlogger = logging.getLogger(__name__)\n\nuri_re = re.compile('([a-z]+:)?//')  # matches to foo:// and // (a protocol relative URL)\n\n\nclass Hyperlink(NamedTuple):\n    uri: str\n    docname: str\n    lineno: int | None\n\n\nclass CheckRequest(NamedTuple):\n    next_check: float\n    hyperlink: Hyperlink | None\n\n\nclass CheckResult(NamedTuple):\n    uri: str\n    docname: str\n    lineno: int\n    status: str\n    message: str\n    code: int\n\n\nclass RateLimit(NamedTuple):\n    delay: float\n    next_check: float\n\n\n# Tuple is old styled CheckRequest\nCheckRequestType = Union[CheckRequest, Tuple[float, str, str, int]]\n\nDEFAULT_REQUEST_HEADERS = {\n    'Accept': 'text/html,application/xhtml+xml;q=0.9,*/*;q=0.8',\n}\nCHECK_IMMEDIATELY = 0\nQUEUE_POLL_SECS = 1\nDEFAULT_DELAY = 60.0\n\n\nclass AnchorCheckParser(HTMLParser):\n    \"\"\"Specialized HTML parser that looks for a specific anchor.\"\"\"\n\n    def __init__(self, search_anchor: str) -> None:\n        super().__init__()\n\n        self.search_anchor = search_anchor\n        self.found = False\n\n    def handle_starttag(self, tag: Any, attrs: Any) -> None:\n        for key, value in attrs:\n            if key in ('id', 'name') and value == self.search_anchor:\n                self.found = True\n                break",
                "filename": "sphinx/builders/linkcheck.py",
                "start_index": 0,
                "end_index": 2310,
                "start_line": 1,
                "end_line": 430,
                "max_line": 592,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.1",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "try:\n                if anchor and self.config.linkcheck_anchors:\n                    # Read the whole document and see if #anchor exists\n                    with requests.get(req_url, stream=True, config=self.config, auth=auth_info,\n                                      **kwargs) as response:\n                        response.raise_for_status()\n                        found = check_anchor(response, unquote(anchor))\n\n                    if not found:\n                        raise Exception(__(\"Anchor '%s' not found\") % anchor)\n                else:\n                    try:\n                        # try a HEAD request first, which should be easier on\n                        # the server and the network\n                        with requests.head(req_url, allow_redirects=True, config=self.config,\n                                           auth=auth_info, **kwargs) as response:\n                            response.raise_for_status()\n                    # Servers drop the connection on HEAD requests, causing\n                    # ConnectionError.\n                    except (ConnectionError, HTTPError, TooManyRedirects) as err:\n                        if isinstance(err, HTTPError) and err.response.status_code == 429:\n                            raise\n                        # retry with GET request if that fails, some servers\n                        # don't like HEAD requests.\n                        with requests.get(req_url, stream=True, config=self.config,\n                                          auth=auth_info, **kwargs) as response:\n                            response.raise_for_status()\n            except HTTPError as err:\n                if err.response.status_code == 401:\n                    # We'll take \"Unauthorized\" as working.\n                    return 'working', ' - unauthorized', 0\n                elif err.response.status_code == 429:\n                    next_check = self.limit_rate(err.response)\n                    if next_check is not None:\n                        self.wqueue.put(CheckRequest(next_check, hyperlink), False)\n                        return 'rate-limited', '', 0\n                    return 'broken', str(err), 0\n                elif err.response.status_code == 503:\n                    # We'll take \"Service Unavailable\" as ignored.\n                    return 'ignored', str(err), 0\n                else:\n                    return 'broken', str(err), 0\n            except Exception as err:\n                return 'broken', str(err), 0\n            else:\n                netloc = urlparse(req_url).netloc\n                try:\n                    del self.rate_limits[netloc]\n                except KeyError:\n                    pass",
                "filename": "sphinx/builders/linkcheck.py",
                "start_index": 11520,
                "end_index": 14211,
                "start_line": 156,
                "end_line": 468,
                "max_line": 592,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.1",
                "sha": "",
                "context_relevance": 0.7
            },
            {
                "code": "# Ref: https://help.github.com/en/github/building-a-strong-community/configuring-issue-templates-for-your-repository#configuring-the-template-chooser\nblank_issues_enabled: false  # default: true\ncontact_links:\n- name: Question\n  url: https://stackoverflow.com/questions/tagged/python-sphinx\n  about: For Q&A purpose, please use Stackoverflow with the tag python-sphinx\n- name: Discussion\n  url: https://groups.google.com/forum/#!forum/sphinx-users\n  about: For general discussion, please use sphinx-users mailing list.",
                "filename": ".github/ISSUE_TEMPLATE/config.yml",
                "start_index": 0,
                "end_index": 518,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.1",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def allowed_redirect(url: str, new_url: str) -> bool:\n            return any(\n                from_url.match(url) and to_url.match(new_url)\n                for from_url, to_url\n                in self.config.linkcheck_allowed_redirects.items()\n            )\n\n        def check(docname: str) -> tuple[str, str, int]:\n            # check for various conditions without bothering the network\n\n            for doc_matcher in self.documents_exclude:\n                if doc_matcher.match(docname):\n                    info = (\n                        f'{docname} matched {doc_matcher.pattern} from '\n                        'linkcheck_exclude_documents'\n                    )\n                    return 'ignored', info, 0\n\n            if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'tel:')):\n                return 'unchecked', '', 0\n            elif not uri.startswith(('http:', 'https:')):\n                if uri_re.match(uri):\n                    # non supported URI schemes (ex. ftp)\n                    return 'unchecked', '', 0\n                else:\n                    srcdir = path.dirname(self.env.doc2path(docname))\n                    if path.exists(path.join(srcdir, uri)):\n                        return 'working', '', 0\n                    else:\n                        return 'broken', '', 0\n\n            # need to actually check the URI\n            for _ in range(self.config.linkcheck_retries):\n                status, info, code = check_uri()\n                if status != \"broken\":\n                    break\n\n            return (status, info, code)\n\n        while True:\n            check_request = self.wqueue.get()\n            next_check, hyperlink = check_request\n            if hyperlink is None:\n                break\n\n            uri, docname, lineno = hyperlink\n\n            if uri is None:\n                break\n            netloc = urlparse(uri).netloc\n            try:\n                # Refresh rate limit.\n                # When there are many links in the queue, workers are all stuck waiting\n                # for responses, but the builder keeps queuing. Links in the queue may\n                # have been queued before rate limits were discovered.\n                next_check = self.rate_limits[netloc].next_check\n            except KeyError:\n                pass\n            if next_check > time.time():\n                # Sleep before putting message back in the queue to avoid\n                # waking up other threads.\n                time.sleep(QUEUE_POLL_SECS)\n                self.wqueue.put(CheckRequest(next_check, hyperlink), False)\n                self.wqueue.task_done()\n                continue\n            status, info, code = check(docname)\n            if status == 'rate-limited':\n                logger.info(darkgray('-rate limited-   ') + uri + darkgray(' | sleeping...'))\n            else:\n                self.rqueue.put(CheckResult(uri, docname, lineno, status, info, code))\n            self.wqueue.task_done()",
                "filename": "sphinx/builders/linkcheck.py",
                "start_index": 14844,
                "end_index": 17804,
                "start_line": 382,
                "end_line": 452,
                "max_line": 592,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.1",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"\n    Checks for broken external links.\n    \"\"\"\n    name = 'linkcheck'\n    epilog = __('Look for any errors in the above output or in '\n                '%(outdir)s/output.txt')\n\n    def init(self) -> None:\n        self.broken_hyperlinks = 0\n        self.hyperlinks: dict[str, Hyperlink] = {}\n        # set a timeout for non-responding servers\n        socket.setdefaulttimeout(5.0)",
                "filename": "sphinx/builders/linkcheck.py",
                "start_index": 3091,
                "end_index": 3473,
                "start_line": 1,
                "end_line": 120,
                "max_line": 592,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.1",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def setup(app: Sphinx) -> dict[str, Any]:\n    app.add_builder(CheckExternalLinksBuilder)\n    app.add_post_transform(HyperlinkCollector)\n\n    app.add_config_value('linkcheck_ignore', [], False)\n    app.add_config_value('linkcheck_exclude_documents', [], False)\n    app.add_config_value('linkcheck_allowed_redirects', {}, False)\n    app.add_config_value('linkcheck_auth', [], False)\n    app.add_config_value('linkcheck_request_headers', {}, False)\n    app.add_config_value('linkcheck_retries', 1, False)\n    app.add_config_value('linkcheck_timeout', None, False, [int, float])\n    app.add_config_value('linkcheck_workers', 5, False)\n    app.add_config_value('linkcheck_anchors', True, False)\n    # Anchors starting with ! are ignored since they are\n    # commonly used for dynamic pages\n    app.add_config_value('linkcheck_anchors_ignore', [\"^!\"], False)\n    app.add_config_value('linkcheck_rate_limit_timeout', 300.0, False)\n\n    app.add_event('linkcheck-process-uri')\n\n    app.connect('config-inited', compile_linkcheck_allowed_redirects, priority=800)\n\n    # FIXME: Disable URL rewrite handler for github.com temporarily.\n    # ref: https://github.com/sphinx-doc/sphinx/issues/9435\n    # app.connect('linkcheck-process-uri', rewrite_github_anchor)\n\n    return {\n        'version': 'builtin',\n        'parallel_read_safe': True,\n        'parallel_write_safe': True,\n    }",
                "filename": "sphinx/builders/linkcheck.py",
                "start_index": 21954,
                "end_index": 23325,
                "start_line": 562,
                "end_line": 592,
                "max_line": 592,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.1",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "\"\"\"Extension to save typing and prevent hard-coding of base URLs in reST files.\n\nThis adds a new config value called ``extlinks`` that is created like this::\n\n   extlinks = {'exmpl': ('https://example.invalid/%s.html', caption), ...}\n\nNow you can use e.g. :exmpl:`foo` in your documents.  This will create a\nlink to ``https://example.invalid/foo.html``.  The link caption depends on\nthe *caption* value given:\n\n- If it is ``None``, the caption will be the full URL.\n- If it is a string, it must contain ``%s`` exactly once.  In this case the\n  caption will be *caption* with the role content substituted for ``%s``.\n\nYou can also give an explicit caption, e.g. :exmpl:`Foo <foo>`.\n\nBoth, the url string and the caption string must escape ``%`` as ``%%``.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport re\nfrom typing import Any\n\nfrom docutils import nodes, utils\nfrom docutils.nodes import Node, system_message\nfrom docutils.parsers.rst.states import Inliner\n\nimport sphinx\nfrom sphinx.application import Sphinx\nfrom sphinx.locale import __\nfrom sphinx.transforms.post_transforms import SphinxPostTransform\nfrom sphinx.util import logging, rst\nfrom sphinx.util.nodes import split_explicit_title\nfrom sphinx.util.typing import RoleFunction\n\nlogger = logging.getLogger(__name__)\n\n\nclass ExternalLinksChecker(SphinxPostTransform):\n    \"\"\"\n    For each external link, check if it can be replaced by an extlink.\n\n    We treat each ``reference`` node without ``internal`` attribute as an external link.\n    \"\"\"\n\n    default_priority = 500\n\n    def run(self, **kwargs: Any) -> None:\n        if not self.config.extlinks_detect_hardcoded_links:\n            return\n\n        for refnode in self.document.findall(nodes.reference):\n            self.check_uri(refnode)\n\n    def check_uri(self, refnode: nodes.reference) -> None:\n        \"\"\"\n        If the URI in ``refnode`` has a replacement in ``extlinks``,\n        emit a warning with a replacement suggestion.\n        \"\"\"\n        if 'internal' in refnode or 'refuri' not in refnode:\n            return\n\n        uri = refnode['refuri']\n        title = refnode.astext()\n\n        for alias, (base_uri, _caption) in self.app.config.extlinks.items():\n            uri_pattern = re.compile(re.escape(base_uri).replace('%s', '(?P<value>.+)'))\n\n            match = uri_pattern.match(uri)\n            if (\n                match and\n                match.groupdict().get('value') and\n                '/' not in match.groupdict()['value']\n            ):\n                # build a replacement suggestion\n                msg = __('hardcoded link %r could be replaced by an extlink '\n                         '(try using %r instead)')\n                value = match.groupdict().get('value')\n                if uri != title:\n                    replacement = f\":{alias}:`{rst.escape(title)} <{value}>`\"\n                else:\n                    replacement = f\":{alias}:`{value}`\"\n                logger.warning(msg, uri, replacement, location=refnode)",
                "filename": "sphinx/ext/extlinks.py",
                "start_index": 0,
                "end_index": 2976,
                "start_line": 1,
                "end_line": 84,
                "max_line": 120,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.1",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def process_result(self, result: CheckResult) -> None:\n        filename = self.env.doc2path(result.docname, False)\n\n        linkstat = {\"filename\": filename, \"lineno\": result.lineno,\n                    \"status\": result.status, \"code\": result.code, \"uri\": result.uri,\n                    \"info\": result.message}\n        self.write_linkstat(linkstat)\n\n        if result.status == 'unchecked':\n            return\n        if result.status == 'working' and result.message == 'old':\n            return\n        if result.lineno:\n            logger.info('(%16s: line %4d) ', result.docname, result.lineno, nonl=True)\n        if result.status == 'ignored':\n            if result.message:\n                logger.info(darkgray('-ignored- ') + result.uri + ': ' + result.message)\n            else:\n                logger.info(darkgray('-ignored- ') + result.uri)\n        elif result.status == 'local':\n            logger.info(darkgray('-local-   ') + result.uri)\n            self.write_entry('local', result.docname, filename, result.lineno, result.uri)\n        elif result.status == 'working':\n            logger.info(darkgreen('ok        ') + result.uri + result.message)\n        elif result.status == 'broken':\n            if self.app.quiet or self.app.warningiserror:\n                logger.warning(__('broken link: %s (%s)'), result.uri, result.message,\n                               location=(result.docname, result.lineno))\n            else:\n                logger.info(red('broken    ') + result.uri + red(' - ' + result.message))\n            self.write_entry('broken', result.docname, filename, result.lineno,\n                             result.uri + ': ' + result.message)\n            self.broken_hyperlinks += 1\n        elif result.status == 'redirected':\n            try:\n                text, color = {\n                    301: ('permanently', purple),\n                    302: ('with Found', purple),\n                    303: ('with See Other', purple),\n                    307: ('temporarily', turquoise),\n                    308: ('permanently', purple),\n                }[result.code]\n            except KeyError:\n                text, color = ('with unknown code', purple)\n            linkstat['text'] = text\n            if self.config.linkcheck_allowed_redirects:\n                logger.warning('redirect  ' + result.uri + ' - ' + text + ' to ' +\n                               result.message, location=(result.docname, result.lineno))\n            else:\n                logger.info(color('redirect  ') + result.uri +\n                            color(' - ' + text + ' to ' + result.message))\n            self.write_entry('redirected ' + text, result.docname, filename,\n                             result.lineno, result.uri + ' to ' + result.message)\n        else:\n            raise ValueError(\"Unknown status %s.\" % result.status)",
                "filename": "sphinx/builders/linkcheck.py",
                "start_index": 3479,
                "end_index": 6320,
                "start_line": 122,
                "end_line": 176,
                "max_line": 592,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.1",
                "sha": "",
                "context_relevance": 0.2
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "sphinx/builders/linkcheck.py": [
                {
                    "chunk": {
                        "code": "class HyperlinkCollector(SphinxPostTransform):\n    builders = ('linkcheck',)\n    default_priority = 800\n\n    def run(self, **kwargs: Any) -> None:\n        builder = cast(CheckExternalLinksBuilder, self.app.builder)\n        hyperlinks = builder.hyperlinks\n\n        def add_uri(uri: str, node: nodes.Element) -> None:\n            newuri = self.app.emit_firstresult('linkcheck-process-uri', uri)\n            if newuri:\n                uri = newuri\n\n            try:\n                lineno = get_node_line(node)\n            except ValueError:\n                lineno = None\n            uri_info = Hyperlink(uri, self.env.docname, lineno)\n            if uri not in hyperlinks:\n                hyperlinks[uri] = uri_info\n\n        # reference nodes\n        for refnode in self.document.findall(nodes.reference):\n            if 'refuri' not in refnode:\n                continue\n            uri = refnode['refuri']\n            add_uri(uri, refnode)\n\n        # image nodes\n        for imgnode in self.document.findall(nodes.image):\n            uri = imgnode['candidates'].get('?')\n            if uri and '://' in uri:\n                add_uri(uri, imgnode)\n\n        # raw nodes\n        for rawnode in self.document.findall(nodes.raw):\n            uri = rawnode.get('source')\n            if uri and '://' in uri:\n                add_uri(uri, rawnode)\n\n\ndef rewrite_github_anchor(app: Sphinx, uri: str) -> str | None:\n    \"\"\"Rewrite anchor name of the hyperlink to github.com\n\n    The hyperlink anchors in github.com are dynamically generated.  This rewrites\n    them before checking and makes them comparable.\n    \"\"\"\n    parsed = urlparse(uri)\n    if parsed.hostname == \"github.com\" and parsed.fragment:\n        prefixed = parsed.fragment.startswith('user-content-')\n        if not prefixed:\n            fragment = f'user-content-{parsed.fragment}'\n            return urlunparse(parsed._replace(fragment=fragment))\n    return None\n\n\ndef compile_linkcheck_allowed_redirects(app: Sphinx, config: Config) -> None:\n    \"\"\"Compile patterns in linkcheck_allowed_redirects to the regexp objects.\"\"\"\n    for url, pattern in list(app.config.linkcheck_allowed_redirects.items()):\n        try:\n            app.config.linkcheck_allowed_redirects[re.compile(url)] = re.compile(pattern)\n        except re.error as exc:\n            logger.warning(__('Failed to compile regex in linkcheck_allowed_redirects: %r %s'),\n                           exc.pattern, exc.msg)\n        finally:\n            # Remove the original regexp-string\n            app.config.linkcheck_allowed_redirects.pop(url)",
                        "filename": "sphinx/builders/linkcheck.py",
                        "start_index": 19389,
                        "end_index": 21951,
                        "start_line": 493,
                        "end_line": 559,
                        "max_line": 592,
                        "git_instance": "github",
                        "repo_name": "testbed/sphinx-doc__sphinx__4.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the 'rewrite_github_anchor' function which is directly related to the issue of handling GitHub-rendered anchors in the linkchecker."
                },
                {
                    "chunk": {
                        "code": "\"\"\"The CheckExternalLinksBuilder class.\"\"\"\n\nfrom __future__ import annotations\n\nimport json\nimport re\nimport socket\nimport time\nfrom copy import deepcopy\nfrom datetime import datetime, timezone\nfrom email.utils import parsedate_to_datetime\nfrom html.parser import HTMLParser\nfrom os import path\nfrom queue import PriorityQueue, Queue\nfrom threading import Thread\nfrom typing import Any, Generator, NamedTuple, Tuple, Union, cast\nfrom urllib.parse import unquote, urlparse, urlunparse\n\nfrom docutils import nodes\nfrom requests import Response\nfrom requests.exceptions import ConnectionError, HTTPError, TooManyRedirects\n\nfrom sphinx.application import Sphinx\nfrom sphinx.builders.dummy import DummyBuilder\nfrom sphinx.config import Config\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.locale import __\nfrom sphinx.transforms.post_transforms import SphinxPostTransform\nfrom sphinx.util import encode_uri, logging, requests\nfrom sphinx.util.console import darkgray, darkgreen, purple, red, turquoise  # type: ignore\nfrom sphinx.util.nodes import get_node_line\n\nlogger = logging.getLogger(__name__)\n\nuri_re = re.compile('([a-z]+:)?//')  # matches to foo:// and // (a protocol relative URL)\n\n\nclass Hyperlink(NamedTuple):\n    uri: str\n    docname: str\n    lineno: int | None\n\n\nclass CheckRequest(NamedTuple):\n    next_check: float\n    hyperlink: Hyperlink | None\n\n\nclass CheckResult(NamedTuple):\n    uri: str\n    docname: str\n    lineno: int\n    status: str\n    message: str\n    code: int\n\n\nclass RateLimit(NamedTuple):\n    delay: float\n    next_check: float\n\n\n# Tuple is old styled CheckRequest\nCheckRequestType = Union[CheckRequest, Tuple[float, str, str, int]]\n\nDEFAULT_REQUEST_HEADERS = {\n    'Accept': 'text/html,application/xhtml+xml;q=0.9,*/*;q=0.8',\n}\nCHECK_IMMEDIATELY = 0\nQUEUE_POLL_SECS = 1\nDEFAULT_DELAY = 60.0\n\n\nclass AnchorCheckParser(HTMLParser):\n    \"\"\"Specialized HTML parser that looks for a specific anchor.\"\"\"\n\n    def __init__(self, search_anchor: str) -> None:\n        super().__init__()\n\n        self.search_anchor = search_anchor\n        self.found = False\n\n    def handle_starttag(self, tag: Any, attrs: Any) -> None:\n        for key, value in attrs:\n            if key in ('id', 'name') and value == self.search_anchor:\n                self.found = True\n                break",
                        "filename": "sphinx/builders/linkcheck.py",
                        "start_index": 0,
                        "end_index": 2310,
                        "start_line": 1,
                        "end_line": 430,
                        "max_line": 592,
                        "git_instance": "github",
                        "repo_name": "testbed/sphinx-doc__sphinx__4.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet includes the 'AnchorCheckParser' class which is used to check for the existence of specific anchors in HTML documents, relevant to the issue at hand."
                },
                {
                    "chunk": {
                        "code": "try:\n                if anchor and self.config.linkcheck_anchors:\n                    # Read the whole document and see if #anchor exists\n                    with requests.get(req_url, stream=True, config=self.config, auth=auth_info,\n                                      **kwargs) as response:\n                        response.raise_for_status()\n                        found = check_anchor(response, unquote(anchor))\n\n                    if not found:\n                        raise Exception(__(\"Anchor '%s' not found\") % anchor)\n                else:\n                    try:\n                        # try a HEAD request first, which should be easier on\n                        # the server and the network\n                        with requests.head(req_url, allow_redirects=True, config=self.config,\n                                           auth=auth_info, **kwargs) as response:\n                            response.raise_for_status()\n                    # Servers drop the connection on HEAD requests, causing\n                    # ConnectionError.\n                    except (ConnectionError, HTTPError, TooManyRedirects) as err:\n                        if isinstance(err, HTTPError) and err.response.status_code == 429:\n                            raise\n                        # retry with GET request if that fails, some servers\n                        # don't like HEAD requests.\n                        with requests.get(req_url, stream=True, config=self.config,\n                                          auth=auth_info, **kwargs) as response:\n                            response.raise_for_status()\n            except HTTPError as err:\n                if err.response.status_code == 401:\n                    # We'll take \"Unauthorized\" as working.\n                    return 'working', ' - unauthorized', 0\n                elif err.response.status_code == 429:\n                    next_check = self.limit_rate(err.response)\n                    if next_check is not None:\n                        self.wqueue.put(CheckRequest(next_check, hyperlink), False)\n                        return 'rate-limited', '', 0\n                    return 'broken', str(err), 0\n                elif err.response.status_code == 503:\n                    # We'll take \"Service Unavailable\" as ignored.\n                    return 'ignored', str(err), 0\n                else:\n                    return 'broken', str(err), 0\n            except Exception as err:\n                return 'broken', str(err), 0\n            else:\n                netloc = urlparse(req_url).netloc\n                try:\n                    del self.rate_limits[netloc]\n                except KeyError:\n                    pass",
                        "filename": "sphinx/builders/linkcheck.py",
                        "start_index": 11520,
                        "end_index": 14211,
                        "start_line": 156,
                        "end_line": 468,
                        "max_line": 592,
                        "git_instance": "github",
                        "repo_name": "testbed/sphinx-doc__sphinx__4.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet shows the logic for checking anchors and handling different HTTP response statuses, which is relevant to the issue of the linkchecker failing on certain anchors."
                },
                {
                    "chunk": {
                        "code": "def allowed_redirect(url: str, new_url: str) -> bool:\n            return any(\n                from_url.match(url) and to_url.match(new_url)\n                for from_url, to_url\n                in self.config.linkcheck_allowed_redirects.items()\n            )\n\n        def check(docname: str) -> tuple[str, str, int]:\n            # check for various conditions without bothering the network\n\n            for doc_matcher in self.documents_exclude:\n                if doc_matcher.match(docname):\n                    info = (\n                        f'{docname} matched {doc_matcher.pattern} from '\n                        'linkcheck_exclude_documents'\n                    )\n                    return 'ignored', info, 0\n\n            if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'tel:')):\n                return 'unchecked', '', 0\n            elif not uri.startswith(('http:', 'https:')):\n                if uri_re.match(uri):\n                    # non supported URI schemes (ex. ftp)\n                    return 'unchecked', '', 0\n                else:\n                    srcdir = path.dirname(self.env.doc2path(docname))\n                    if path.exists(path.join(srcdir, uri)):\n                        return 'working', '', 0\n                    else:\n                        return 'broken', '', 0\n\n            # need to actually check the URI\n            for _ in range(self.config.linkcheck_retries):\n                status, info, code = check_uri()\n                if status != \"broken\":\n                    break\n\n            return (status, info, code)\n\n        while True:\n            check_request = self.wqueue.get()\n            next_check, hyperlink = check_request\n            if hyperlink is None:\n                break\n\n            uri, docname, lineno = hyperlink\n\n            if uri is None:\n                break\n            netloc = urlparse(uri).netloc\n            try:\n                # Refresh rate limit.\n                # When there are many links in the queue, workers are all stuck waiting\n                # for responses, but the builder keeps queuing. Links in the queue may\n                # have been queued before rate limits were discovered.\n                next_check = self.rate_limits[netloc].next_check\n            except KeyError:\n                pass\n            if next_check > time.time():\n                # Sleep before putting message back in the queue to avoid\n                # waking up other threads.\n                time.sleep(QUEUE_POLL_SECS)\n                self.wqueue.put(CheckRequest(next_check, hyperlink), False)\n                self.wqueue.task_done()\n                continue\n            status, info, code = check(docname)\n            if status == 'rate-limited':\n                logger.info(darkgray('-rate limited-   ') + uri + darkgray(' | sleeping...'))\n            else:\n                self.rqueue.put(CheckResult(uri, docname, lineno, status, info, code))\n            self.wqueue.task_done()",
                        "filename": "sphinx/builders/linkcheck.py",
                        "start_index": 14844,
                        "end_index": 17804,
                        "start_line": 382,
                        "end_line": 452,
                        "max_line": 592,
                        "git_instance": "github",
                        "repo_name": "testbed/sphinx-doc__sphinx__4.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet includes logic for checking URIs and handling redirects, which may be relevant when considering improvements to the linkchecker's handling of GitHub anchors."
                },
                {
                    "chunk": {
                        "code": "def setup(app: Sphinx) -> dict[str, Any]:\n    app.add_builder(CheckExternalLinksBuilder)\n    app.add_post_transform(HyperlinkCollector)\n\n    app.add_config_value('linkcheck_ignore', [], False)\n    app.add_config_value('linkcheck_exclude_documents', [], False)\n    app.add_config_value('linkcheck_allowed_redirects', {}, False)\n    app.add_config_value('linkcheck_auth', [], False)\n    app.add_config_value('linkcheck_request_headers', {}, False)\n    app.add_config_value('linkcheck_retries', 1, False)\n    app.add_config_value('linkcheck_timeout', None, False, [int, float])\n    app.add_config_value('linkcheck_workers', 5, False)\n    app.add_config_value('linkcheck_anchors', True, False)\n    # Anchors starting with ! are ignored since they are\n    # commonly used for dynamic pages\n    app.add_config_value('linkcheck_anchors_ignore', [\"^!\"], False)\n    app.add_config_value('linkcheck_rate_limit_timeout', 300.0, False)\n\n    app.add_event('linkcheck-process-uri')\n\n    app.connect('config-inited', compile_linkcheck_allowed_redirects, priority=800)\n\n    # FIXME: Disable URL rewrite handler for github.com temporarily.\n    # ref: https://github.com/sphinx-doc/sphinx/issues/9435\n    # app.connect('linkcheck-process-uri', rewrite_github_anchor)\n\n    return {\n        'version': 'builtin',\n        'parallel_read_safe': True,\n        'parallel_write_safe': True,\n    }",
                        "filename": "sphinx/builders/linkcheck.py",
                        "start_index": 21954,
                        "end_index": 23325,
                        "start_line": 562,
                        "end_line": 592,
                        "max_line": 592,
                        "git_instance": "github",
                        "repo_name": "testbed/sphinx-doc__sphinx__4.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet shows the setup function where the 'rewrite_github_anchor' function is commented out, indicating a known issue with GitHub anchors that may be related to the reported bug."
                },
                {
                    "chunk": {
                        "code": "def process_result(self, result: CheckResult) -> None:\n        filename = self.env.doc2path(result.docname, False)\n\n        linkstat = {\"filename\": filename, \"lineno\": result.lineno,\n                    \"status\": result.status, \"code\": result.code, \"uri\": result.uri,\n                    \"info\": result.message}\n        self.write_linkstat(linkstat)\n\n        if result.status == 'unchecked':\n            return\n        if result.status == 'working' and result.message == 'old':\n            return\n        if result.lineno:\n            logger.info('(%16s: line %4d) ', result.docname, result.lineno, nonl=True)\n        if result.status == 'ignored':\n            if result.message:\n                logger.info(darkgray('-ignored- ') + result.uri + ': ' + result.message)\n            else:\n                logger.info(darkgray('-ignored- ') + result.uri)\n        elif result.status == 'local':\n            logger.info(darkgray('-local-   ') + result.uri)\n            self.write_entry('local', result.docname, filename, result.lineno, result.uri)\n        elif result.status == 'working':\n            logger.info(darkgreen('ok        ') + result.uri + result.message)\n        elif result.status == 'broken':\n            if self.app.quiet or self.app.warningiserror:\n                logger.warning(__('broken link: %s (%s)'), result.uri, result.message,\n                               location=(result.docname, result.lineno))\n            else:\n                logger.info(red('broken    ') + result.uri + red(' - ' + result.message))\n            self.write_entry('broken', result.docname, filename, result.lineno,\n                             result.uri + ': ' + result.message)\n            self.broken_hyperlinks += 1\n        elif result.status == 'redirected':\n            try:\n                text, color = {\n                    301: ('permanently', purple),\n                    302: ('with Found', purple),\n                    303: ('with See Other', purple),\n                    307: ('temporarily', turquoise),\n                    308: ('permanently', purple),\n                }[result.code]\n            except KeyError:\n                text, color = ('with unknown code', purple)\n            linkstat['text'] = text\n            if self.config.linkcheck_allowed_redirects:\n                logger.warning('redirect  ' + result.uri + ' - ' + text + ' to ' +\n                               result.message, location=(result.docname, result.lineno))\n            else:\n                logger.info(color('redirect  ') + result.uri +\n                            color(' - ' + text + ' to ' + result.message))\n            self.write_entry('redirected ' + text, result.docname, filename,\n                             result.lineno, result.uri + ' to ' + result.message)\n        else:\n            raise ValueError(\"Unknown status %s.\" % result.status)",
                        "filename": "sphinx/builders/linkcheck.py",
                        "start_index": 3479,
                        "end_index": 6320,
                        "start_line": 122,
                        "end_line": 176,
                        "max_line": 592,
                        "git_instance": "github",
                        "repo_name": "testbed/sphinx-doc__sphinx__4.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet includes the 'process_result' function which processes the results of link checks, including handling of broken links, which is relevant to the issue."
                }
            ]
        },
        "solution_task": "- Update the `AnchorCheckParser` class in `sphinx/builders/linkcheck.py` to handle both `#user-content-make-changes` and `#make-changes` style anchors.\n- Modify the `handle_starttag` method to check for both the original anchor name and the anchor name prefixed with `user-content-`.\n- Ensure that the `check_anchor_in_html_document` function (or equivalent logic within the `AnchorCheckParser` class) checks for both variations of the anchor name.\n\n```python\nclass AnchorCheckParser(HTMLParser):\n    \"\"\"Specialized HTML parser that looks for a specific anchor.\"\"\"\n\n    def __init__(self, search_anchor: str) -> None:\n        super().__init__()\n        self.search_anchor = search_anchor\n        self.found = False\n\n    def handle_starttag(self, tag: Any, attrs: Any) -> None:\n        for key, value in attrs:\n            if key in ('id', 'name'):\n                if value == self.search_anchor or value == self.search_anchor.removeprefix('user-content-'):\n                    self.found = True\n                    break\n```\n\n- Uncomment the `app.connect('linkcheck-process-uri', rewrite_github_anchor)` line in the `setup` function in `sphinx/builders/linkcheck.py` to re-enable the URL rewrite handler for GitHub anchors.\n\n```python\ndef setup(app: Sphinx) -> dict[str, Any]:\n    # ... other setup code ...\n    app.connect('linkcheck-process-uri', rewrite_github_anchor)\n    # ... other setup code ...\n```\n\n- Ensure that the `rewrite_github_anchor` function in `sphinx/builders/linkcheck.py` can handle both `#user-content-make-changes` and `#make-changes` style anchors correctly.\n\n```python\ndef rewrite_github_anchor(app: Sphinx, uri: str) -> str | None:\n    \"\"\"Rewrite anchor name of the hyperlink to github.com\"\"\"\n    parsed = urlparse(uri)\n    if parsed.hostname == \"github.com\" and parsed.fragment:\n        prefixed = parsed.fragment.startswith('user-content-')\n        if not prefixed:\n            fragment = f'user-content-{parsed.fragment}'\n            return urlunparse(parsed._replace(fragment=fragment))\n        else:\n            return urlunparse(parsed)\n    return None\n```",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE must provide precise, actionable guidance and directly address all aspects of the described bug to facilitate its resolution.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable solution to the described bug. It suggests updating the 'AnchorCheckParser' class to handle both styles of anchors, modifying the 'handle_starttag' method to check for both variations of the anchor name, and ensuring that the 'check_anchor_in_html_document' function checks for both variations. The RESPONSE also includes code snippets that are directly relevant to the issue and provides a clear direction for the developers to implement the fix. The RESPONSE addresses the issue of the linkchecker failing on GitHub-rendered anchors and provides a comprehensive solution that would likely resolve the bug. The only reason it does not score a 10 is that it does not explicitly mention testing the changes, which is an important step in resolving any software bug.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711702565.069323,
        "result": "- Update the `AnchorCheckParser` class in `sphinx/builders/linkcheck.py` to handle both `#user-content-make-changes` and `#make-changes` style anchors.\n- Modify the `handle_starttag` method to check for both the original anchor name and the anchor name prefixed with `user-content-`.\n- Ensure that the `check_anchor_in_html_document` function (or equivalent logic within the `AnchorCheckParser` class) checks for both variations of the anchor name.\n\n```python\nclass AnchorCheckParser(HTMLParser):\n    \"\"\"Specialized HTML parser that looks for a specific anchor.\"\"\"\n\n    def __init__(self, search_anchor: str) -> None:\n        super().__init__()\n        self.search_anchor = search_anchor\n        self.found = False\n\n    def handle_starttag(self, tag: Any, attrs: Any) -> None:\n        for key, value in attrs:\n            if key in ('id', 'name'):\n                if value == self.search_anchor or value == self.search_anchor.removeprefix('user-content-'):\n                    self.found = True\n                    break\n```\n\n- Uncomment the `app.connect('linkcheck-process-uri', rewrite_github_anchor)` line in the `setup` function in `sphinx/builders/linkcheck.py` to re-enable the URL rewrite handler for GitHub anchors.\n\n```python\ndef setup(app: Sphinx) -> dict[str, Any]:\n    # ... other setup code ...\n    app.connect('linkcheck-process-uri', rewrite_github_anchor)\n    # ... other setup code ...\n```\n\n- Ensure that the `rewrite_github_anchor` function in `sphinx/builders/linkcheck.py` can handle both `#user-content-make-changes` and `#make-changes` style anchors correctly.\n\n```python\ndef rewrite_github_anchor(app: Sphinx, uri: str) -> str | None:\n    \"\"\"Rewrite anchor name of the hyperlink to github.com\"\"\"\n    parsed = urlparse(uri)\n    if parsed.hostname == \"github.com\" and parsed.fragment:\n        prefixed = parsed.fragment.startswith('user-content-')\n        if not prefixed:\n            fragment = f'user-content-{parsed.fragment}'\n            return urlunparse(parsed._replace(fragment=fragment))\n        else:\n            return urlunparse(parsed)\n    return None\n```\n\n### Code snippets to check\n\n-  \u2192 [sphinx](https://github.com/testbed/sphinx-doc__sphinx__4.1/tree//sphinx) \u2192 [builders](https://github.com/testbed/sphinx-doc__sphinx__4.1/tree//sphinx/builders)- [Lines 493 - 559](https://github.com/testbed/sphinx-doc__sphinx__4.1/blob//sphinx/builders/linkcheck.py#L493-L559)\n\n This snippet contains the 'rewrite_github_anchor' function which is directly related to the issue of handling GitHub-rendered anchors in the linkchecker. \n\n\n   - [Lines 1 - 430](https://github.com/testbed/sphinx-doc__sphinx__4.1/blob//sphinx/builders/linkcheck.py#L1-L430)\n\n This snippet includes the 'AnchorCheckParser' class which is used to check for the existence of specific anchors in HTML documents, relevant to the issue at hand. \n\n\n   - [Lines 156 - 468](https://github.com/testbed/sphinx-doc__sphinx__4.1/blob//sphinx/builders/linkcheck.py#L156-L468)\n\n This snippet shows the logic for checking anchors and handling different HTTP response statuses, which is relevant to the issue of the linkchecker failing on certain anchors. \n\n\n   - [Lines 382 - 452](https://github.com/testbed/sphinx-doc__sphinx__4.1/blob//sphinx/builders/linkcheck.py#L382-L452)\n\n This snippet includes logic for checking URIs and handling redirects, which may be relevant when considering improvements to the linkchecker's handling of GitHub anchors. \n\n\n   - [Lines 562 - 592](https://github.com/testbed/sphinx-doc__sphinx__4.1/blob//sphinx/builders/linkcheck.py#L562-L592)\n\n This snippet shows the setup function where the 'rewrite_github_anchor' function is commented out, indicating a known issue with GitHub anchors that may be related to the reported bug. \n\n\n   - [Lines 122 - 176](https://github.com/testbed/sphinx-doc__sphinx__4.1/blob//sphinx/builders/linkcheck.py#L122-L176)\n\n This snippet includes the 'process_result' function which processes the results of link checks, including handling of broken links, which is relevant to the issue.",
        "context_relevance": 0.54,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE must be relevant to the entire PROMPT to get a score of 10.\nSupporting Evidence: The RESPONSE provides a detailed technical solution to the issue described in the PROMPT, addressing the specific problem of the Sphinx linkchecker croaking on certain anchors in GitHub-rendered reStructuredText documents. It suggests updates to the `AnchorCheckParser` class and the `handle_starttag` method, as well as modifications to the `rewrite_github_anchor` function, which are all directly related to the components of Sphinx mentioned in the PROMPT. The RESPONSE also includes code snippets and references to the relevant sections of the Sphinx codebase, which shows a complete understanding of the issue and offers a comprehensive solution. This RESPONSE is entirely relevant to the PROMPT and answers it completely."
        },
        "qa_relevance": 1.0
    }
}