{
    "id": "django__django-11446",
    "repo_name": "testbed/django__django__3.0",
    "task_id": 3345586832649202721,
    "title": "Default error webpages are not correctly-formed html pages.",
    "body": "Description\n\t\nThe default page served for the 404 error in \"DEBUG=False\" mode is (django 2.2.1):\n<h1>Not Found</h1><p>The requested resource was not found on this server.</p>\nI would expect that by default, a full webpage is sent to the user, thus:\n<html>\n<body>\n<h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\nIn \"DEBUG=True\" mode, the webpage served is correct html:\n<!DOCTYPE html>\n<html lang=\"en\">\n...\n</html>\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/django__django__3.0.git",
    "requested_commit": "",
    "mayil_response": "- Ensure that the `DEBUG` setting in your Django project's settings file (`settings.py`) is set to `False` for production.\n- Create or update your `404.html` template in your templates directory to include the full HTML structure you want to display when a 404 error occurs.\n- In your root URLconf (usually `urls.py`), make sure you have the following handler defined:\n\n  ```python\n  handler404 = 'django.views.defaults.page_not_found'\n  ```\n\n- If you have a custom 404 view, ensure it returns an `HttpResponseNotFound` object with the rendered template:\n\n  ```python\n  from django.http import HttpResponseNotFound\n  from django.shortcuts import render\n\n  def custom_404(request, exception):\n      response = render(request, '404.html', {})\n      response.status_code = 404\n      return response\n  ```\n\n  And in your `urls.py`, set:\n\n  ```python\n  handler404 = 'path.to.custom_404'\n  ```\n\n- If you are using a custom template loader or have a specific template directory, ensure that the `404.html` template is correctly located in a directory that Django's template loader can find.\n- If you have overridden the `page_not_found` view and are using a custom template name, ensure that the template exists or that you handle the `TemplateDoesNotExist` exception appropriately.\n- Test the 404 page by visiting a non-existent URL on your site with `DEBUG` set to `False`.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__3.0/tree//django) \u2192 [views](https://github.com/testbed/django__django__3.0/tree//django/views)- [Lines 1 - 79](https://github.com/testbed/django__django__3.0/blob//django/views/defaults.py#L1-L79)\n\n This snippet contains the default 404 handler which is responsible for rendering the error page when DEBUG is False. It is directly related to the issue as it defines the ERROR_PAGE_TEMPLATE and the page_not_found function that needs to be modified to ensure a full HTML page is served.\n-  \u2192 [django](https://github.com/testbed/django__django__3.0/tree//django) \u2192 [conf](https://github.com/testbed/django__django__3.0/tree//django/conf) \u2192 [urls](https://github.com/testbed/django__django__3.0/tree//django/conf/urls)- [Lines 1 - 9](https://github.com/testbed/django__django__3.0/blob//django/conf/urls/__init__.py#L1-L9)\n\n This snippet defines the handlers for different HTTP error codes including handler404 which is used to handle 404 errors. It is relevant because it points to the default.page_not_found function which is responsible for serving the 404 error page.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0004595,
        "snippet_processor": 0.04646,
        "issue_star_creation": 0.024209999999999995,
        "issue_star_solver": 0.05283,
        "bouncer": 0.03115
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711728609.4692538,
        "relevant_snippets": [
            {
                "code": "from urllib.parse import quote\n\nfrom django.http import (\n    HttpResponseBadRequest,\n    HttpResponseForbidden,\n    HttpResponseNotFound,\n    HttpResponseServerError,\n)\nfrom django.template import Context, Engine, TemplateDoesNotExist, loader\nfrom django.views.decorators.csrf import requires_csrf_token\n\nERROR_404_TEMPLATE_NAME = \"404.html\"\nERROR_403_TEMPLATE_NAME = \"403.html\"\nERROR_400_TEMPLATE_NAME = \"400.html\"\nERROR_500_TEMPLATE_NAME = \"500.html\"\nERROR_PAGE_TEMPLATE = \"\"\"\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>%(title)s</title>\n</head>\n<body>\n  <h1>%(title)s</h1><p>%(details)s</p>\n</body>\n</html>\n\"\"\"\n\n\n# These views can be called when CsrfViewMiddleware.process_view() not run,\n# therefore need @requires_csrf_token in case the template needs\n# {% csrf_token %}.\n\n\n@requires_csrf_token\ndef page_not_found(request, exception, template_name=ERROR_404_TEMPLATE_NAME):\n    \"\"\"\n    Default 404 handler.\n\n    Templates: :template:`404.html`\n    Context:\n        request_path\n            The path of the requested URL (e.g., '/app/pages/bad_page/'). It's\n            quoted to prevent a content injection attack.\n        exception\n            The message from the exception which triggered the 404 (if one was\n            supplied), or the exception class name\n    \"\"\"\n    exception_repr = exception.__class__.__name__\n    # Try to get an \"interesting\" exception message, if any (and not the ugly\n    # Resolver404 dictionary)\n    try:\n        message = exception.args[0]\n    except (AttributeError, IndexError):\n        pass\n    else:\n        if isinstance(message, str):\n            exception_repr = message\n    context = {\n        \"request_path\": quote(request.path),\n        \"exception\": exception_repr,\n    }\n    try:\n        template = loader.get_template(template_name)\n        body = template.render(context, request)\n    except TemplateDoesNotExist:\n        if template_name != ERROR_404_TEMPLATE_NAME:\n            # Reraise if it's a missing custom template.\n            raise\n        # Render template (even though there are no substitutions) to allow\n        # inspecting the context in tests.\n        template = Engine().from_string(\n            ERROR_PAGE_TEMPLATE\n            % {\n                \"title\": \"Not Found\",\n                \"details\": \"The requested resource was not found on this server.\",\n            },\n        )\n        body = template.render(Context(context))\n    return HttpResponseNotFound(body)",
                "filename": "django/views/defaults.py",
                "start_index": 0,
                "end_index": 2441,
                "start_line": 1,
                "end_line": 79,
                "max_line": 149,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "def get_traceback_html(self):\n        \"\"\"Return HTML version of debug 500 HTTP error page.\"\"\"\n        with self.html_template_path.open(encoding=\"utf-8\") as fh:\n            t = DEBUG_ENGINE.from_string(fh.read())\n        c = Context(self.get_traceback_data(), use_l10n=False)\n        return t.render(c)\n\n    def get_traceback_text(self):\n        \"\"\"Return plain text version of debug 500 HTTP error page.\"\"\"\n        with self.text_template_path.open(encoding=\"utf-8\") as fh:\n            t = DEBUG_ENGINE.from_string(fh.read())\n        c = Context(self.get_traceback_data(), autoescape=False, use_l10n=False)\n        return t.render(c)\n\n    def _get_source(self, filename, loader, module_name):\n        source = None\n        if hasattr(loader, \"get_source\"):\n            try:\n                source = loader.get_source(module_name)\n            except ImportError:\n                pass\n            if source is not None:\n                source = source.splitlines()\n        if source is None:\n            try:\n                with open(filename, \"rb\") as fp:\n                    source = fp.read().splitlines()\n            except OSError:\n                pass\n        return source\n\n    def _get_lines_from_file(\n        self, filename, lineno, context_lines, loader=None, module_name=None\n    ):\n        \"\"\"\n        Return context_lines before and after lineno from file.\n        Return (pre_context_lineno, pre_context, context_line, post_context).\n        \"\"\"\n        source = self._get_source(filename, loader, module_name)\n        if source is None:\n            return None, [], None, []\n\n        # If we just read the source from a file, or if the loader did not\n        # apply tokenize.detect_encoding to decode the source into a\n        # string, then we should do that ourselves.\n        if isinstance(source[0], bytes):\n            encoding = \"ascii\"\n            for line in source[:2]:\n                # File coding may be specified. Match pattern from PEP-263\n                # (https://www.python.org/dev/peps/pep-0263/)\n                match = re.search(rb\"coding[:=]\\s*([-\\w.]+)\", line)\n                if match:\n                    encoding = match[1].decode(\"ascii\")\n                    break\n            source = [str(sline, encoding, \"replace\") for sline in source]\n\n        lower_bound = max(0, lineno - context_lines)\n        upper_bound = lineno + context_lines\n\n        try:\n            pre_context = source[lower_bound:lineno]\n            context_line = source[lineno]\n            post_context = source[lineno + 1 : upper_bound]\n        except IndexError:\n            return None, [], None, []\n        return lower_bound, pre_context, context_line, post_context",
                "filename": "django/views/debug.py",
                "start_index": 16289,
                "end_index": 18973,
                "start_line": 424,
                "end_line": 489,
                "max_line": 665,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "from django.conf import settings\nfrom django.contrib.flatpages.views import flatpage\nfrom django.http import Http404\nfrom django.utils.deprecation import MiddlewareMixin\n\n\nclass FlatpageFallbackMiddleware(MiddlewareMixin):\n    def process_response(self, request, response):\n        if response.status_code != 404:\n            return response  # No need to check for a flatpage for non-404 responses.\n        try:\n            return flatpage(request, request.path_info)\n        # Return the original response if any errors happened. Because this\n        # is a middleware, we can't assume the errors will be caught elsewhere.\n        except Http404:\n            return response\n        except Exception:\n            if settings.DEBUG:\n                raise\n            return response",
                "filename": "django/contrib/flatpages/middleware.py",
                "start_index": 0,
                "end_index": 783,
                "start_line": 1,
                "end_line": 20,
                "max_line": 20,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "import functools\nimport inspect\nimport itertools\nimport re\nimport sys\nimport types\nimport warnings\nfrom pathlib import Path\n\nfrom django.conf import settings\nfrom django.http import Http404, HttpResponse, HttpResponseNotFound\nfrom django.template import Context, Engine, TemplateDoesNotExist\nfrom django.template.defaultfilters import pprint\nfrom django.urls import resolve\nfrom django.utils import timezone\nfrom django.utils.datastructures import MultiValueDict\nfrom django.utils.encoding import force_str\nfrom django.utils.module_loading import import_string\nfrom django.utils.regex_helper import _lazy_re_compile\nfrom django.utils.version import PY311, get_docs_version\nfrom django.views.decorators.debug import coroutine_functions_to_sensitive_variables\n\n# Minimal Django templates engine to render the error templates\n# regardless of the project's TEMPLATES setting. Templates are\n# read directly from the filesystem so that the error handler\n# works even if the template loader is broken.\nDEBUG_ENGINE = Engine(\n    debug=True,\n    libraries={\"i18n\": \"django.templatetags.i18n\"},\n)\n\n\ndef builtin_template_path(name):\n    \"\"\"\n    Return a path to a builtin template.\n\n    Avoid calling this function at the module level or in a class-definition\n    because __file__ may not exist, e.g. in frozen environments.\n    \"\"\"\n    return Path(__file__).parent / \"templates\" / name\n\n\nclass ExceptionCycleWarning(UserWarning):\n    pass\n\n\nclass CallableSettingWrapper:\n    \"\"\"\n    Object to wrap callable appearing in settings.\n    * Not to call in the debug page (#21345).\n    * Not to break the debug page if the callable forbidding to set attributes\n      (#23070).\n    \"\"\"\n\n    def __init__(self, callable_setting):\n        self._wrapped = callable_setting\n\n    def __repr__(self):\n        return repr(self._wrapped)\n\n\ndef technical_500_response(request, exc_type, exc_value, tb, status_code=500):\n    \"\"\"\n    Create a technical server error response. The last three arguments are\n    the values returned from sys.exc_info() and friends.\n    \"\"\"\n    reporter = get_exception_reporter_class(request)(request, exc_type, exc_value, tb)\n    if request.accepts(\"text/html\"):\n        html = reporter.get_traceback_html()\n        return HttpResponse(html, status=status_code)\n    else:\n        text = reporter.get_traceback_text()\n        return HttpResponse(\n            text, status=status_code, content_type=\"text/plain; charset=utf-8\"\n        )\n\n\n@functools.lru_cache\ndef get_default_exception_reporter_filter():\n    # Instantiate the default filter for the first time and cache it.\n    return import_string(settings.DEFAULT_EXCEPTION_REPORTER_FILTER)()\n\n\ndef get_exception_reporter_filter(request):\n    default_filter = get_default_exception_reporter_filter()\n    return getattr(request, \"exception_reporter_filter\", default_filter)",
                "filename": "django/views/debug.py",
                "start_index": 0,
                "end_index": 2827,
                "start_line": 1,
                "end_line": 86,
                "max_line": 665,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME):\n    \"\"\"\n    Default view used when request fails CSRF protection\n    \"\"\"\n    from django.middleware.csrf import REASON_NO_CSRF_COOKIE, REASON_NO_REFERER\n\n    c = {\n        \"title\": _(\"Forbidden\"),\n        \"main\": _(\"CSRF verification failed. Request aborted.\"),\n        \"reason\": reason,\n        \"no_referer\": reason == REASON_NO_REFERER,\n        \"no_referer1\": _(\n            \"You are seeing this message because this HTTPS site requires a \"\n            \"\u201cReferer header\u201d to be sent by your web browser, but none was \"\n            \"sent. This header is required for security reasons, to ensure \"\n            \"that your browser is not being hijacked by third parties.\"\n        ),\n        \"no_referer2\": _(\n            \"If you have configured your browser to disable \u201cReferer\u201d headers, \"\n            \"please re-enable them, at least for this site, or for HTTPS \"\n            \"connections, or for \u201csame-origin\u201d requests.\"\n        ),\n        \"no_referer3\": _(\n            'If you are using the <meta name=\"referrer\" '\n            'content=\"no-referrer\"> tag or including the \u201cReferrer-Policy: '\n            \"no-referrer\u201d header, please remove them. The CSRF protection \"\n            \"requires the \u201cReferer\u201d header to do strict referer checking. If \"\n            \"you\u2019re concerned about privacy, use alternatives like \"\n            '<a rel=\"noreferrer\" \u2026> for links to third-party sites.'\n        ),\n        \"no_cookie\": reason == REASON_NO_CSRF_COOKIE,\n        \"no_cookie1\": _(\n            \"You are seeing this message because this site requires a CSRF \"\n            \"cookie when submitting forms. This cookie is required for \"\n            \"security reasons, to ensure that your browser is not being \"\n            \"hijacked by third parties.\"\n        ),\n        \"no_cookie2\": _(\n            \"If you have configured your browser to disable cookies, please \"\n            \"re-enable them, at least for this site, or for \u201csame-origin\u201d \"\n            \"requests.\"\n        ),\n        \"DEBUG\": settings.DEBUG,\n        \"docs_version\": get_docs_version(),\n        \"more\": _(\"More information is available with DEBUG=True.\"),\n    }\n    try:\n        t = loader.get_template(template_name)\n    except TemplateDoesNotExist:\n        if template_name == CSRF_FAILURE_TEMPLATE_NAME:\n            # If the default template doesn't exist, use the fallback template.\n            with builtin_template_path(\"csrf_403.html\").open(encoding=\"utf-8\") as fh:\n                t = Engine().from_string(fh.read())\n            c = Context(c)\n        else:\n            # Raise if a developer-specified template doesn't exist.\n            raise\n    return HttpResponseForbidden(t.render(c))",
                "filename": "django/views/csrf.py",
                "start_index": 616,
                "end_index": 3349,
                "start_line": 22,
                "end_line": 79,
                "max_line": 79,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "from django import forms\nfrom django.conf import settings\nfrom django.contrib.flatpages.models import FlatPage\nfrom django.core.exceptions import ValidationError\nfrom django.utils.translation import gettext\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass FlatpageForm(forms.ModelForm):\n    url = forms.RegexField(\n        label=_(\"URL\"),\n        max_length=100,\n        regex=r\"^[-\\w/\\.~]+$\",\n        help_text=_(\n            \"Example: \u201c/about/contact/\u201d. Make sure to have leading and trailing \"\n            \"slashes.\"\n        ),\n        error_messages={\n            \"invalid\": _(\n                \"This value must contain only letters, numbers, dots, \"\n                \"underscores, dashes, slashes or tildes.\"\n            ),\n        },\n    )\n\n    class Meta:\n        model = FlatPage\n        fields = \"__all__\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        if not self._trailing_slash_required():\n            self.fields[\"url\"].help_text = _(\n                \"Example: \u201c/about/contact\u201d. Make sure to have a leading slash.\"\n            )\n\n    def _trailing_slash_required(self):\n        return (\n            settings.APPEND_SLASH\n            and \"django.middleware.common.CommonMiddleware\" in settings.MIDDLEWARE\n        )\n\n    def clean_url(self):\n        url = self.cleaned_data[\"url\"]\n        if not url.startswith(\"/\"):\n            raise ValidationError(\n                gettext(\"URL is missing a leading slash.\"),\n                code=\"missing_leading_slash\",\n            )\n        if self._trailing_slash_required() and not url.endswith(\"/\"):\n            raise ValidationError(\n                gettext(\"URL is missing a trailing slash.\"),\n                code=\"missing_trailing_slash\",\n            )\n        return url\n\n    def clean(self):\n        url = self.cleaned_data.get(\"url\")\n        sites = self.cleaned_data.get(\"sites\")\n\n        same_url = FlatPage.objects.filter(url=url)\n        if self.instance.pk:\n            same_url = same_url.exclude(pk=self.instance.pk)\n\n        if sites and same_url.filter(sites__in=sites).exists():\n            for site in sites:\n                if same_url.filter(sites=site).exists():\n                    raise ValidationError(\n                        _(\"Flatpage with url %(url)s already exists for site %(site)s\"),\n                        code=\"duplicate_url\",\n                        params={\"url\": url, \"site\": site},\n                    )\n\n        return super().clean()",
                "filename": "django/contrib/flatpages/forms.py",
                "start_index": 0,
                "end_index": 2484,
                "start_line": 1,
                "end_line": 74,
                "max_line": 74,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "if isinstance(exc, Http404):\n        if settings.DEBUG:\n            response = debug.technical_404_response(request, exc)\n        else:\n            response = get_exception_response(\n                request, get_resolver(get_urlconf()), 404, exc\n            )\n\n    elif isinstance(exc, PermissionDenied):\n        response = get_exception_response(\n            request, get_resolver(get_urlconf()), 403, exc\n        )\n        log_response(\n            \"Forbidden (Permission denied): %s\",\n            request.path,\n            response=response,\n            request=request,\n            exception=exc,\n        )\n\n    elif isinstance(exc, MultiPartParserError):\n        response = get_exception_response(\n            request, get_resolver(get_urlconf()), 400, exc\n        )\n        log_response(\n            \"Bad request (Unable to parse request body): %s\",\n            request.path,\n            response=response,\n            request=request,\n            exception=exc,\n        )\n\n    elif isinstance(exc, BadRequest):\n        if settings.DEBUG:\n            response = debug.technical_500_response(\n                request, *sys.exc_info(), status_code=400\n            )\n        else:\n            response = get_exception_response(\n                request, get_resolver(get_urlconf()), 400, exc\n            )\n        log_response(\n            \"%s: %s\",\n            str(exc),\n            request.path,\n            response=response,\n            request=request,\n            exception=exc,\n        )\n    elif isinstance(exc, SuspiciousOperation):\n        if isinstance(exc, (RequestDataTooBig, TooManyFieldsSent, TooManyFilesSent)):\n            # POST data can't be accessed again, otherwise the original\n            # exception would be raised.\n            request._mark_post_parse_error()\n\n        # The request logger receives events for any problematic request\n        # The security logger receives events for all SuspiciousOperations\n        security_logger = logging.getLogger(\n            \"django.security.%s\" % exc.__class__.__name__\n        )\n        security_logger.error(\n            str(exc),\n            exc_info=exc,\n            extra={\"status_code\": 400, \"request\": request},\n        )\n        if settings.DEBUG:\n            response = debug.technical_500_response(\n                request, *sys.exc_info(), status_code=400\n            )\n        else:\n            response = get_exception_response(\n                request, get_resolver(get_urlconf()), 400, exc\n            )\n\n    else:\n        signals.got_request_exception.send(sender=None, request=request)\n        response = handle_uncaught_exception(\n            request, get_resolver(get_urlconf()), sys.exc_info()\n        )\n        log_response(\n            \"%s: %s\",\n            response.reason_phrase,\n            request.path,\n            response=response,\n            request=request,\n            exception=exc,\n        )\n\n    # Force a TemplateResponse to be rendered.",
                "filename": "django/core/handlers/exception.py",
                "start_index": 1929,
                "end_index": 4873,
                "start_line": 64,
                "end_line": 152,
                "max_line": 185,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": "",
                "context_relevance": 0.4
            },
            {
                "code": "from django.urls import include\nfrom django.views import defaults\n\n__all__ = [\"handler400\", \"handler403\", \"handler404\", \"handler500\", \"include\"]\n\nhandler400 = defaults.bad_request\nhandler403 = defaults.permission_denied\nhandler404 = defaults.page_not_found\nhandler500 = defaults.server_error",
                "filename": "django/conf/urls/__init__.py",
                "start_index": 0,
                "end_index": 291,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": "",
                "context_relevance": 0.4
            },
            {
                "code": "from django.core.exceptions import ImproperlyConfigured\nfrom django.core.paginator import InvalidPage, Paginator\nfrom django.db.models import QuerySet\nfrom django.http import Http404\nfrom django.utils.translation import gettext as _\nfrom django.views.generic.base import ContextMixin, TemplateResponseMixin, View",
                "filename": "django/views/generic/list.py",
                "start_index": 0,
                "end_index": 312,
                "start_line": 1,
                "end_line": 6,
                "max_line": 220,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "from django.core.exceptions import ImproperlyConfigured\nfrom django.db import models\nfrom django.http import Http404\nfrom django.utils.translation import gettext as _\nfrom django.views.generic.base import ContextMixin, TemplateResponseMixin, View",
                "filename": "django/views/generic/detail.py",
                "start_index": 0,
                "end_index": 246,
                "start_line": 1,
                "end_line": 5,
                "max_line": 180,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": "",
                "context_relevance": 0.2
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "django/views/defaults.py": [
                {
                    "chunk": {
                        "code": "from urllib.parse import quote\n\nfrom django.http import (\n    HttpResponseBadRequest,\n    HttpResponseForbidden,\n    HttpResponseNotFound,\n    HttpResponseServerError,\n)\nfrom django.template import Context, Engine, TemplateDoesNotExist, loader\nfrom django.views.decorators.csrf import requires_csrf_token\n\nERROR_404_TEMPLATE_NAME = \"404.html\"\nERROR_403_TEMPLATE_NAME = \"403.html\"\nERROR_400_TEMPLATE_NAME = \"400.html\"\nERROR_500_TEMPLATE_NAME = \"500.html\"\nERROR_PAGE_TEMPLATE = \"\"\"\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>%(title)s</title>\n</head>\n<body>\n  <h1>%(title)s</h1><p>%(details)s</p>\n</body>\n</html>\n\"\"\"\n\n\n# These views can be called when CsrfViewMiddleware.process_view() not run,\n# therefore need @requires_csrf_token in case the template needs\n# {% csrf_token %}.\n\n\n@requires_csrf_token\ndef page_not_found(request, exception, template_name=ERROR_404_TEMPLATE_NAME):\n    \"\"\"\n    Default 404 handler.\n\n    Templates: :template:`404.html`\n    Context:\n        request_path\n            The path of the requested URL (e.g., '/app/pages/bad_page/'). It's\n            quoted to prevent a content injection attack.\n        exception\n            The message from the exception which triggered the 404 (if one was\n            supplied), or the exception class name\n    \"\"\"\n    exception_repr = exception.__class__.__name__\n    # Try to get an \"interesting\" exception message, if any (and not the ugly\n    # Resolver404 dictionary)\n    try:\n        message = exception.args[0]\n    except (AttributeError, IndexError):\n        pass\n    else:\n        if isinstance(message, str):\n            exception_repr = message\n    context = {\n        \"request_path\": quote(request.path),\n        \"exception\": exception_repr,\n    }\n    try:\n        template = loader.get_template(template_name)\n        body = template.render(context, request)\n    except TemplateDoesNotExist:\n        if template_name != ERROR_404_TEMPLATE_NAME:\n            # Reraise if it's a missing custom template.\n            raise\n        # Render template (even though there are no substitutions) to allow\n        # inspecting the context in tests.\n        template = Engine().from_string(\n            ERROR_PAGE_TEMPLATE\n            % {\n                \"title\": \"Not Found\",\n                \"details\": \"The requested resource was not found on this server.\",\n            },\n        )\n        body = template.render(Context(context))\n    return HttpResponseNotFound(body)",
                        "filename": "django/views/defaults.py",
                        "start_index": 0,
                        "end_index": 2441,
                        "start_line": 1,
                        "end_line": 79,
                        "max_line": 149,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the default 404 handler which is responsible for rendering the error page when DEBUG is False. It is directly related to the issue as it defines the ERROR_PAGE_TEMPLATE and the page_not_found function that needs to be modified to ensure a full HTML page is served."
                }
            ],
            "django/conf/urls/__init__.py": [
                {
                    "chunk": {
                        "code": "from django.urls import include\nfrom django.views import defaults\n\n__all__ = [\"handler400\", \"handler403\", \"handler404\", \"handler500\", \"include\"]\n\nhandler400 = defaults.bad_request\nhandler403 = defaults.permission_denied\nhandler404 = defaults.page_not_found\nhandler500 = defaults.server_error",
                        "filename": "django/conf/urls/__init__.py",
                        "start_index": 0,
                        "end_index": 291,
                        "start_line": 1,
                        "end_line": 9,
                        "max_line": 9,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet defines the handlers for different HTTP error codes including handler404 which is used to handle 404 errors. It is relevant because it points to the default.page_not_found function which is responsible for serving the 404 error page."
                }
            ]
        },
        "solution_task": "- Ensure that the `DEBUG` setting in your Django project's settings file (`settings.py`) is set to `False` for production.\n- Create or update your `404.html` template in your templates directory to include the full HTML structure you want to display when a 404 error occurs.\n- In your root URLconf (usually `urls.py`), make sure you have the following handler defined:\n\n  ```python\n  handler404 = 'django.views.defaults.page_not_found'\n  ```\n\n- If you have a custom 404 view, ensure it returns an `HttpResponseNotFound` object with the rendered template:\n\n  ```python\n  from django.http import HttpResponseNotFound\n  from django.shortcuts import render\n\n  def custom_404(request, exception):\n      response = render(request, '404.html', {})\n      response.status_code = 404\n      return response\n  ```\n\n  And in your `urls.py`, set:\n\n  ```python\n  handler404 = 'path.to.custom_404'\n  ```\n\n- If you are using a custom template loader or have a specific template directory, ensure that the `404.html` template is correctly located in a directory that Django's template loader can find.\n- If you have overridden the `page_not_found` view and are using a custom template name, ensure that the template exists or that you handle the `TemplateDoesNotExist` exception appropriately.\n- Test the 404 page by visiting a non-existent URL on your site with `DEBUG` set to `False`.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a comprehensive set of instructions to ensure that a full HTML page is served when a 404 error occurs in a Django application with 'DEBUG=False'. It correctly advises to set 'DEBUG' to 'False' in production, to create or update the '404.html' template, to define the handler404 in 'urls.py', and to use a custom 404 view if necessary. Additionally, it provides guidance on ensuring the template is located correctly and handling the 'TemplateDoesNotExist' exception. The RESPONSE also includes relevant code snippets from the Django repository that are directly related to the issue, which can help the user understand where the default behavior is defined and how to modify it. The only reason it does not score a 10 is that it does not explicitly mention checking the middleware order, which can affect the rendering of custom error pages, but this is a minor omission and does not significantly detract from the overall utility of the RESPONSE.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711728717.580001,
        "result": "- Ensure that the `DEBUG` setting in your Django project's settings file (`settings.py`) is set to `False` for production.\n- Create or update your `404.html` template in your templates directory to include the full HTML structure you want to display when a 404 error occurs.\n- In your root URLconf (usually `urls.py`), make sure you have the following handler defined:\n\n  ```python\n  handler404 = 'django.views.defaults.page_not_found'\n  ```\n\n- If you have a custom 404 view, ensure it returns an `HttpResponseNotFound` object with the rendered template:\n\n  ```python\n  from django.http import HttpResponseNotFound\n  from django.shortcuts import render\n\n  def custom_404(request, exception):\n      response = render(request, '404.html', {})\n      response.status_code = 404\n      return response\n  ```\n\n  And in your `urls.py`, set:\n\n  ```python\n  handler404 = 'path.to.custom_404'\n  ```\n\n- If you are using a custom template loader or have a specific template directory, ensure that the `404.html` template is correctly located in a directory that Django's template loader can find.\n- If you have overridden the `page_not_found` view and are using a custom template name, ensure that the template exists or that you handle the `TemplateDoesNotExist` exception appropriately.\n- Test the 404 page by visiting a non-existent URL on your site with `DEBUG` set to `False`.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__3.0/tree//django) \u2192 [views](https://github.com/testbed/django__django__3.0/tree//django/views)- [Lines 1 - 79](https://github.com/testbed/django__django__3.0/blob//django/views/defaults.py#L1-L79)\n\n This snippet contains the default 404 handler which is responsible for rendering the error page when DEBUG is False. It is directly related to the issue as it defines the ERROR_PAGE_TEMPLATE and the page_not_found function that needs to be modified to ensure a full HTML page is served.\n-  \u2192 [django](https://github.com/testbed/django__django__3.0/tree//django) \u2192 [conf](https://github.com/testbed/django__django__3.0/tree//django/conf) \u2192 [urls](https://github.com/testbed/django__django__3.0/tree//django/conf/urls)- [Lines 1 - 9](https://github.com/testbed/django__django__3.0/blob//django/conf/urls/__init__.py#L1-L9)\n\n This snippet defines the handlers for different HTTP error codes including handler404 which is used to handle 404 errors. It is relevant because it points to the default.page_not_found function which is responsible for serving the 404 error page.",
        "context_relevance": 0.32000000000000006,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE must be relevant to the entire PROMPT and answer it completely to get a score of 10.\nSupporting Evidence: The RESPONSE provides a comprehensive solution to the issue described in the PROMPT, which is the lack of a correctly-formed HTML page for the default 404 error page in Django when \"DEBUG=False\" mode is active. It gives detailed steps on how to ensure that a full HTML structure is displayed, including setting the `DEBUG` mode appropriately, creating or updating the `404.html` template, defining the handler in `urls.py`, and testing the 404 page. Additionally, it references relevant code snippets from the Django repository that are directly related to the issue, thus addressing the entire PROMPT completely."
        },
        "qa_relevance": 1.0
    }
}