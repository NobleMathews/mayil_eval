{
    "id": "matplotlib__matplotlib-25442",
    "repo_name": "testbed/matplotlib__matplotlib__3.7",
    "task_id": 1029002872849086013,
    "title": "[Bug]: Attribute Error combining matplotlib 3.7.1 and mplcursor on data selection",
    "body": "### Bug summary\r\n\r\nIf you combine mplcursor and matplotlib 3.7.1, you'll get an `AttributeError: 'NoneType' object has no attribute 'canvas'` after clicking a few data points. Henceforth, selecting a new data point will trigger the same traceback. Otherwise, it works fine. \r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport mplcursors as mpl\r\n\r\nx = np.arange(1, 11)    \r\ny1 = x\r\n\r\nplt.scatter(x,y1)\r\n\r\nmpl.cursor()\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\MrAni\\Python\\miniconda3\\lib\\site-packages\\matplotlib\\cbook\\__init__.py\", line 304, in process\r\n    func(*args, **kwargs)\r\n  File \"C:\\Users\\MrAni\\Python\\miniconda3\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 1550, in on_release\r\n    if self._check_still_parented() and self.got_artist:\r\n  File \"C:\\Users\\MrAni\\Python\\miniconda3\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 1560, in _check_still_parented\r\n    self.disconnect()\r\n  File \"C:\\Users\\MrAni\\Python\\miniconda3\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 1568, in disconnect\r\n    self.canvas.mpl_disconnect(cid)\r\n  File \"C:\\Users\\MrAni\\Python\\miniconda3\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 1517, in <lambda>\r\n    canvas = property(lambda self: self.ref_artist.figure.canvas)\r\nAttributeError: 'NoneType' object has no attribute 'canvas'\r\n```\r\n\r\n### Expected outcome\r\n\r\nNo terminal output\r\n\r\n### Additional information\r\n\r\nUsing matplotlib 3.7.0 or lower works fine. Using a conda install or pip install doesn't affect the output. \r\n\r\n### Operating system\r\n\r\nWindows 11 and Windwos 10 \r\n\r\n### Matplotlib Version\r\n\r\n3.7.1\r\n\r\n### Matplotlib Backend\r\n\r\nQtAgg\r\n\r\n### Python version\r\n\r\n3.9.16\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nconda\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/matplotlib__matplotlib__3.7.git",
    "requested_commit": "",
    "mayil_response": "Doesn't seem like we have fully grasped all the specifics of this ticket \ud83e\udd14.                   But we've outlined some ideas that might help you get started:\n\n- Downgrade matplotlib to version 3.7.0 or lower, as the issue is not present in those versions.\n- Alternatively, if downgrading is not an option, check for updates or patches for mplcursor that address the compatibility issue with matplotlib 3.7.1.\n- If a patch is not available, consider reporting the issue to the mplcursor maintainers, including the error message and the conditions under which the bug occurs.\n\n### Code snippets to check\n\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries) \u2192 [examples](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples) \u2192 [widgets](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples/widgets)- [Lines 1 - 46](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//galleries/examples/widgets/mouse_cursor.py#L1-L46)\n\n This snippet shows an example of setting a custom cursor on a figure canvas, which is relevant to the issue as it involves cursor interaction with matplotlib.\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries) \u2192 [examples](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples) \u2192 [widgets](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples/widgets)- [Lines 1 - 39](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//galleries/examples/widgets/multicursor.py#L1-L39)\n\n This snippet demonstrates the use of a cursor across multiple plots, which could be related to the issue since it involves cursor events and might share underlying mechanisms with mplcursor.\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib) \u2192 [backends](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib/backends)- [Lines 1 - 41](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//lib/matplotlib/backends/backend_gtk3.py#L1-L41)\n\n This snippet contains backend code for GTK3 in Matplotlib, which could be relevant for understanding how cursor events are handled in different backends, especially since the issue mentions a specific backend (QtAgg).\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries) \u2192 [examples](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples) \u2192 [event_handling](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples/event_handling)- [Lines 91 - 110](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//galleries/examples/event_handling/data_browser.py#L91-L110)\n\n This snippet includes code for connecting a pick event with a canvas, which is relevant because the issue involves an error that occurs after clicking on data points.\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries) \u2192 [examples](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples) \u2192 [widgets](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples/widgets)- [Lines 1 - 34](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//galleries/examples/widgets/cursor.py#L1-L34)\n\n This snippet shows the use of the Cursor widget in Matplotlib, which is directly related to the issue as it involves cursor interaction.\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries) \u2192 [examples](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples) \u2192 [event_handling](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples/event_handling)- [Lines 1 - 90](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//galleries/examples/event_handling/cursor_demo.py#L1-L90)\n\n This snippet demonstrates a custom cursor implementation, which could provide insight into how cursor events are handled and potentially lead to understanding the AttributeError in the issue.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.00035999999999999997,
        "snippet_processor": 0.05671,
        "issue_star_creation": 0.03961,
        "issue_star_solver": 0.07892,
        "bouncer": 0.0273
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711696759.4798489,
        "relevant_snippets": [
            {
                "code": "\"\"\"\n=====================\nAdding a cursor in WX\n=====================\n\nExample to draw a cursor and report the data coords in wx.\n\"\"\"\n\nimport wx\n\nimport numpy as np\n\nfrom matplotlib.backends.backend_wx import NavigationToolbar2Wx\nfrom matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas\nfrom matplotlib.figure import Figure\n\n\nclass CanvasFrame(wx.Frame):\n    def __init__(self, ):\n        super().__init__(None, -1, 'CanvasFrame', size=(550, 350))\n\n        self.figure = Figure()\n        self.axes = self.figure.add_subplot()\n        t = np.arange(0.0, 3.0, 0.01)\n        s = np.sin(2*np.pi*t)\n\n        self.axes.plot(t, s)\n        self.axes.set_xlabel('t')\n        self.axes.set_ylabel('sin(t)')\n        self.figure_canvas = FigureCanvas(self, -1, self.figure)\n\n        # Note that event is a MplEvent\n        self.figure_canvas.mpl_connect(\n            'motion_notify_event', self.UpdateStatusBar)\n        self.figure_canvas.Bind(wx.EVT_ENTER_WINDOW, self.ChangeCursor)\n\n        self.sizer = wx.BoxSizer(wx.VERTICAL)\n        self.sizer.Add(self.figure_canvas, 1, wx.LEFT | wx.TOP | wx.GROW)\n        self.SetSizer(self.sizer)\n        self.Fit()\n\n        self.statusBar = wx.StatusBar(self, -1)\n        self.SetStatusBar(self.statusBar)\n\n        self.toolbar = NavigationToolbar2Wx(self.figure_canvas)\n        self.sizer.Add(self.toolbar, 0, wx.LEFT | wx.EXPAND)\n        self.toolbar.Show()\n\n    def ChangeCursor(self, event):\n        self.figure_canvas.SetCursor(wx.Cursor(wx.CURSOR_BULLSEYE))\n\n    def UpdateStatusBar(self, event):\n        if event.inaxes:\n            self.statusBar.SetStatusText(f\"x={event.xdata}  y={event.ydata}\")\n\n\nclass App(wx.App):\n    def OnInit(self):\n        \"\"\"Create the main window and insert the custom frame.\"\"\"\n        frame = CanvasFrame()\n        self.SetTopWindow(frame)\n        frame.Show(True)\n        return True\n\n\nif __name__ == '__main__':\n    app = App()\n    app.MainLoop()",
                "filename": "galleries/examples/user_interfaces/wxcursor_demo_sgskip.py",
                "start_index": 0,
                "end_index": 1940,
                "start_line": 1,
                "end_line": 68,
                "max_line": 68,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"\n============\nMouse Cursor\n============\n\nThis example sets an alternative cursor on a figure canvas.\n\nNote, this is an interactive example, and must be run to see the effect.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\nfrom matplotlib.backend_tools import Cursors\n\nfig, axs = plt.subplots(len(Cursors), figsize=(6, len(Cursors) + 0.5),\n                        gridspec_kw={'hspace': 0})\nfig.suptitle('Hover over an Axes to see alternate Cursors')\n\nfor cursor, ax in zip(Cursors, axs):\n    ax.cursor_to_use = cursor\n    ax.text(0.5, 0.5, cursor.name,\n            horizontalalignment='center', verticalalignment='center')\n    ax.set(xticks=[], yticks=[])\n\n\ndef hover(event):\n    if fig.canvas.widgetlock.locked():\n        # Don't do anything if the zoom/pan tools have been enabled.\n        return\n\n    fig.canvas.set_cursor(\n        event.inaxes.cursor_to_use if event.inaxes else Cursors.POINTER)\n\n\nfig.canvas.mpl_connect('motion_notify_event', hover)\n\nplt.show()\n\n# %%\n#\n# .. admonition:: References\n#\n#    The use of the following functions, methods, classes and modules is shown\n#    in this example:\n#\n#    - `matplotlib.backend_bases.FigureCanvasBase.set_cursor`",
                "filename": "galleries/examples/widgets/mouse_cursor.py",
                "start_index": 0,
                "end_index": 1164,
                "start_line": 1,
                "end_line": 46,
                "max_line": 46,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"\n===========\nMulticursor\n===========\n\nShowing a cursor on multiple plots simultaneously.\n\nThis example generates three axes split over two different figures.  On\nhovering the cursor over data in one subplot, the values of that datapoint are\nshown in all axes.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.widgets import MultiCursor\n\nt = np.arange(0.0, 2.0, 0.01)\ns1 = np.sin(2*np.pi*t)\ns2 = np.sin(3*np.pi*t)\ns3 = np.sin(4*np.pi*t)\n\nfig, (ax1, ax2) = plt.subplots(2, sharex=True)\nax1.plot(t, s1)\nax2.plot(t, s2)\nfig, ax3 = plt.subplots()\nax3.plot(t, s3)\n\nmulti = MultiCursor(None, (ax1, ax2, ax3), color='r', lw=1)\nplt.show()\n\n# %%\n#\n# .. admonition:: References\n#\n#    The use of the following functions, methods, classes and modules is shown\n#    in this example:\n#\n#    - `matplotlib.widgets.MultiCursor`",
                "filename": "galleries/examples/widgets/multicursor.py",
                "start_index": 0,
                "end_index": 838,
                "start_line": 1,
                "end_line": 39,
                "max_line": 39,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "name: Bug Report\ndescription: Report a bug or issue with Matplotlib.\ntitle: \"[Bug]: \"\nbody:\n  - type: textarea\n    id: summary\n    attributes:\n      label: Bug summary\n      description:  Describe the bug in 1-2 short sentences\n      placeholder:\n      value:\n    validations:\n      required: true\n  - type: textarea\n    id: reproduction\n    attributes:\n      label: Code for reproduction\n      description: |\n        If possible, please provide a minimum self-contained example.\n      placeholder: Paste your code here. This field is automatically formatted as Python code.\n      render: python\n    validations:\n      required: true\n  - type: textarea\n    id: actual\n    attributes:\n      label: Actual outcome\n      description: |\n        Paste the output produced by the code provided above, e.g.\n        console output, images/videos produced by the code, any relevant screenshots/screencasts, etc.\n    validations:\n      required: true\n  - type: textarea\n    id: expected\n    attributes:\n      label: Expected outcome\n      description: Describe (or provide a visual example of) the expected outcome from the code snippet.\n    validations:\n      required: true\n  - type: textarea\n    id: details\n    attributes:\n      label: Additional information\n      description: |\n        - What are the conditions under which this bug happens? input parameters, edge cases, etc?\n        - Has this worked in earlier versions?\n        - Do you know why this bug is happening?\n        - Do you maybe even know a fix?\n  - type: input\n    id: operating-system\n    attributes:\n      label: Operating system\n      description: Windows, OS/X, Arch, Debian, Ubuntu, etc.\n  - type: input\n    id: matplotlib-version\n    attributes:\n      label: Matplotlib Version\n      description: \"From Python prompt: `import matplotlib; print(matplotlib.__version__)`\"\n    validations:\n      required: true\n  - type: input\n    id: matplotlib-backend\n    attributes:\n      label: Matplotlib Backend\n      description: \"From Python prompt: `import matplotlib; print(matplotlib.get_backend())`\"\n  - type: input\n    id: python-version\n    attributes:\n      label: Python version\n      description: \"In console: `python --version`\"\n  - type: input\n    id: jupyter-version\n    attributes:\n      label: Jupyter version\n      description: \"In console: `jupyter notebook --version` or `jupyter lab --version`\"\n  - type: dropdown\n    id: install\n    attributes:\n      label: Installation\n      description: How did you install matplotlib?\n      options:\n        - pip\n        - conda\n        - Linux package manager\n        - from source (.tar.gz)\n        - git checkout",
                "filename": ".github/ISSUE_TEMPLATE/bug_report.yml",
                "start_index": 0,
                "end_index": 2631,
                "start_line": 1,
                "end_line": 86,
                "max_line": 86,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "import functools\nimport logging\nimport os\nfrom pathlib import Path\n\nimport matplotlib as mpl\nfrom matplotlib import _api, backend_tools, cbook\nfrom matplotlib.backend_bases import (\n    ToolContainerBase, CloseEvent, KeyEvent, LocationEvent, MouseEvent,\n    ResizeEvent)\n\ntry:\n    import gi\nexcept ImportError as err:\n    raise ImportError(\"The GTK3 backends require PyGObject\") from err\n\ntry:\n    # :raises ValueError: If module/version is already loaded, already\n    # required, or unavailable.\n    gi.require_version(\"Gtk\", \"3.0\")\nexcept ValueError as e:\n    # in this case we want to re-raise as ImportError so the\n    # auto-backend selection logic correctly skips.\n    raise ImportError(e) from e\n\nfrom gi.repository import Gio, GLib, GObject, Gtk, Gdk\nfrom . import _backend_gtk\nfrom ._backend_gtk import (  # noqa: F401 # pylint: disable=W0611\n    _BackendGTK, _FigureCanvasGTK, _FigureManagerGTK, _NavigationToolbar2GTK,\n    TimerGTK as TimerGTK3,\n)\n\n\n_log = logging.getLogger(__name__)\n\n\n@functools.cache\ndef _mpl_to_gtk_cursor(mpl_cursor):\n    return Gdk.Cursor.new_from_name(\n        Gdk.Display.get_default(),\n        _backend_gtk.mpl_to_gtk_cursor_name(mpl_cursor))",
                "filename": "lib/matplotlib/backends/backend_gtk3.py",
                "start_index": 0,
                "end_index": 1179,
                "start_line": 1,
                "end_line": 41,
                "max_line": 587,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "if __name__ == '__main__':\n    import matplotlib.pyplot as plt\n\n    # Fixing random state for reproducibility\n    np.random.seed(19680801)\n\n    X = np.random.rand(100, 200)\n    xs = np.mean(X, axis=1)\n    ys = np.std(X, axis=1)\n\n    fig, (ax, ax2) = plt.subplots(2, 1)\n    ax.set_title('click on point to plot time series')\n    line, = ax.plot(xs, ys, 'o', picker=True, pickradius=5)\n\n    browser = PointBrowser()\n\n    fig.canvas.mpl_connect('pick_event', browser.on_pick)\n    fig.canvas.mpl_connect('key_press_event', browser.on_press)\n\n    plt.show()",
                "filename": "galleries/examples/event_handling/data_browser.py",
                "start_index": 2459,
                "end_index": 3011,
                "start_line": 91,
                "end_line": 110,
                "max_line": 110,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "fig, ax = plt.subplots(figsize=(8, 6))\nax.set_title(\"Cursor Tracking x Position\")\n\nx = np.linspace(-5, 5, 1000)\ny = x**2\n\nline, = ax.plot(x, y)\nax.set_xlim(-5, 5)\nax.set_ylim(0, 25)\n\n# A minimum call\n# Set useblit=True on most backends for enhanced performance\n# and pass the ax parameter to the Cursor base class.\n# cursor = AnnotatedCursor(line=lin[0], ax=ax, useblit=True)\n\n# A more advanced call. Properties for text and lines are passed.\n# Watch the passed color names and the color of cursor line and text, to\n# relate the passed options to graphical elements.\n# The dataaxis parameter is still the default.\ncursor = AnnotatedCursor(\n    line=line,\n    numberformat=\"{0:.2f}\\n{1:.2f}\",\n    dataaxis='x', offset=[10, 10],\n    textprops={'color': 'blue', 'fontweight': 'bold'},\n    ax=ax,\n    useblit=True,\n    color='red',\n    linewidth=2)\n\n# Simulate a mouse move to (-2, 10), needed for online docs\nt = ax.transData\nMouseEvent(\n    \"motion_notify_event\", ax.figure.canvas, *t.transform((-2, 10))\n)._process()\n\nplt.show()\n\n# %%\n# Trouble with non-biunique functions\n# -----------------------------------\n# A call demonstrating problems with the *dataaxis=y* parameter.\n# The text now looks up the matching x value for the current cursor y position\n# instead of vice versa. Hover your cursor to y=4. There are two x values\n# producing this y value: -2 and 2. The function is only unique,\n# but not biunique. Only one value is shown in the text.\n\nfig, ax = plt.subplots(figsize=(8, 6))\nax.set_title(\"Cursor Tracking y Position\")\n\nline, = ax.plot(x, y)\nax.set_xlim(-5, 5)\nax.set_ylim(0, 25)\n\ncursor = AnnotatedCursor(\n    line=line,\n    numberformat=\"{0:.2f}\\n{1:.2f}\",\n    dataaxis='y', offset=[10, 10],\n    textprops={'color': 'blue', 'fontweight': 'bold'},\n    ax=ax,\n    useblit=True,\n    color='red', linewidth=2)\n\n# Simulate a mouse move to (-2, 10), needed for online docs\nt = ax.transData\nMouseEvent(\n    \"motion_notify_event\", ax.figure.canvas, *t.transform((-2, 10))\n)._process()\n\nplt.show()",
                "filename": "galleries/examples/widgets/annotated_cursor.py",
                "start_index": 11326,
                "end_index": 13330,
                "start_line": 288,
                "end_line": 356,
                "max_line": 356,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"\n======\nCursor\n======\n\n\"\"\"\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.widgets import Cursor\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots(figsize=(8, 6))\n\nx, y = 4*(np.random.rand(2, 100) - .5)\nax.plot(x, y, 'o')\nax.set_xlim(-2, 2)\nax.set_ylim(-2, 2)\n\n# Set useblit=True on most backends for enhanced performance.\ncursor = Cursor(ax, useblit=True, color='red', linewidth=2)\n\nplt.show()\n\n# %%\n#\n# .. admonition:: References\n#\n#    The use of the following functions, methods, classes and modules is shown\n#    in this example:\n#\n#    - `matplotlib.widgets.Cursor`",
                "filename": "galleries/examples/widgets/cursor.py",
                "start_index": 0,
                "end_index": 636,
                "start_line": 1,
                "end_line": 34,
                "max_line": 34,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"\n================\nAnnotated cursor\n================\n\nDisplay a data cursor including a text box, which shows the plot point close\nto the mouse pointer.\n\nThe new cursor inherits from `~matplotlib.widgets.Cursor` and demonstrates the\ncreation of new widgets and their event callbacks.\n\nSee also the :doc:`cross hair cursor\n</gallery/event_handling/cursor_demo>`, which implements a cursor tracking the\nplotted data, but without using inheritance and without displaying the\ncurrently tracked coordinates.\n\n.. note::\n    The figure related to this example does not show the cursor, because that\n    figure is automatically created in a build queue, where the first mouse\n    movement, which triggers the cursor creation, is missing.\n\n\"\"\"\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.backend_bases import MouseEvent\nfrom matplotlib.widgets import Cursor",
                "filename": "galleries/examples/widgets/annotated_cursor.py",
                "start_index": 0,
                "end_index": 874,
                "start_line": 1,
                "end_line": 27,
                "max_line": 356,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"\n=================\nCross-hair cursor\n=================\n\nThis example adds a cross-hair as a data cursor.  The cross-hair is\nimplemented as regular line objects that are updated on mouse move.\n\nWe show three implementations:\n\n1) A simple cursor implementation that redraws the figure on every mouse move.\n   This is a bit slow, and you may notice some lag of the cross-hair movement.\n2) A cursor that uses blitting for speedup of the rendering.\n3) A cursor that snaps to data points.\n\nFaster cursoring is possible using native GUI drawing, as in\n:doc:`/gallery/user_interfaces/wxcursor_demo_sgskip`.\n\nThe mpldatacursor__ and mplcursors__ third-party packages can be used to\nachieve a similar effect.\n\n__ https://github.com/joferkington/mpldatacursor\n__ https://github.com/anntzer/mplcursors\n\n.. redirect-from:: /gallery/misc/cursor_demo\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.backend_bases import MouseEvent\n\n\nclass Cursor:\n    \"\"\"\n    A cross hair cursor.\n    \"\"\"\n    def __init__(self, ax):\n        self.ax = ax\n        self.horizontal_line = ax.axhline(color='k', lw=0.8, ls='--')\n        self.vertical_line = ax.axvline(color='k', lw=0.8, ls='--')\n        # text location in axes coordinates\n        self.text = ax.text(0.72, 0.9, '', transform=ax.transAxes)\n\n    def set_cross_hair_visible(self, visible):\n        need_redraw = self.horizontal_line.get_visible() != visible\n        self.horizontal_line.set_visible(visible)\n        self.vertical_line.set_visible(visible)\n        self.text.set_visible(visible)\n        return need_redraw\n\n    def on_mouse_move(self, event):\n        if not event.inaxes:\n            need_redraw = self.set_cross_hair_visible(False)\n            if need_redraw:\n                self.ax.figure.canvas.draw()\n        else:\n            self.set_cross_hair_visible(True)\n            x, y = event.xdata, event.ydata\n            # update the line positions\n            self.horizontal_line.set_ydata([y])\n            self.vertical_line.set_xdata([x])\n            self.text.set_text(f'x={x:1.2f}, y={y:1.2f}')\n            self.ax.figure.canvas.draw()\n\n\nx = np.arange(0, 1, 0.01)\ny = np.sin(2 * 2 * np.pi * x)\n\nfig, ax = plt.subplots()\nax.set_title('Simple cursor')\nax.plot(x, y, 'o')\ncursor = Cursor(ax)\nfig.canvas.mpl_connect('motion_notify_event', cursor.on_mouse_move)\n\n# Simulate a mouse move to (0.5, 0.5), needed for online docs\nt = ax.transData\nMouseEvent(\n    \"motion_notify_event\", ax.figure.canvas, *t.transform((0.5, 0.5))\n)._process()\n\n# %%\n# Faster redrawing using blitting\n# \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n# This technique stores the rendered plot as a background image. Only the\n# changed artists (cross-hair lines and text) are rendered anew. They are\n# combined with the background using blitting.\n#\n# This technique is significantly faster. It requires a bit more setup because\n# the background has to be stored without the cross-hair lines (see",
                "filename": "galleries/examples/event_handling/cursor_demo.py",
                "start_index": 0,
                "end_index": 2929,
                "start_line": 1,
                "end_line": 90,
                "max_line": 242,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": "",
                "context_relevance": 0.2
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "galleries/examples/widgets/mouse_cursor.py": [
                {
                    "chunk": {
                        "code": "\"\"\"\n============\nMouse Cursor\n============\n\nThis example sets an alternative cursor on a figure canvas.\n\nNote, this is an interactive example, and must be run to see the effect.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\nfrom matplotlib.backend_tools import Cursors\n\nfig, axs = plt.subplots(len(Cursors), figsize=(6, len(Cursors) + 0.5),\n                        gridspec_kw={'hspace': 0})\nfig.suptitle('Hover over an Axes to see alternate Cursors')\n\nfor cursor, ax in zip(Cursors, axs):\n    ax.cursor_to_use = cursor\n    ax.text(0.5, 0.5, cursor.name,\n            horizontalalignment='center', verticalalignment='center')\n    ax.set(xticks=[], yticks=[])\n\n\ndef hover(event):\n    if fig.canvas.widgetlock.locked():\n        # Don't do anything if the zoom/pan tools have been enabled.\n        return\n\n    fig.canvas.set_cursor(\n        event.inaxes.cursor_to_use if event.inaxes else Cursors.POINTER)\n\n\nfig.canvas.mpl_connect('motion_notify_event', hover)\n\nplt.show()\n\n# %%\n#\n# .. admonition:: References\n#\n#    The use of the following functions, methods, classes and modules is shown\n#    in this example:\n#\n#    - `matplotlib.backend_bases.FigureCanvasBase.set_cursor`",
                        "filename": "galleries/examples/widgets/mouse_cursor.py",
                        "start_index": 0,
                        "end_index": 1164,
                        "start_line": 1,
                        "end_line": 46,
                        "max_line": 46,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.7",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet shows an example of setting a custom cursor on a figure canvas, which is relevant to the issue as it involves cursor interaction with matplotlib."
                }
            ],
            "galleries/examples/widgets/multicursor.py": [
                {
                    "chunk": {
                        "code": "\"\"\"\n===========\nMulticursor\n===========\n\nShowing a cursor on multiple plots simultaneously.\n\nThis example generates three axes split over two different figures.  On\nhovering the cursor over data in one subplot, the values of that datapoint are\nshown in all axes.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.widgets import MultiCursor\n\nt = np.arange(0.0, 2.0, 0.01)\ns1 = np.sin(2*np.pi*t)\ns2 = np.sin(3*np.pi*t)\ns3 = np.sin(4*np.pi*t)\n\nfig, (ax1, ax2) = plt.subplots(2, sharex=True)\nax1.plot(t, s1)\nax2.plot(t, s2)\nfig, ax3 = plt.subplots()\nax3.plot(t, s3)\n\nmulti = MultiCursor(None, (ax1, ax2, ax3), color='r', lw=1)\nplt.show()\n\n# %%\n#\n# .. admonition:: References\n#\n#    The use of the following functions, methods, classes and modules is shown\n#    in this example:\n#\n#    - `matplotlib.widgets.MultiCursor`",
                        "filename": "galleries/examples/widgets/multicursor.py",
                        "start_index": 0,
                        "end_index": 838,
                        "start_line": 1,
                        "end_line": 39,
                        "max_line": 39,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.7",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet demonstrates the use of a cursor across multiple plots, which could be related to the issue since it involves cursor events and might share underlying mechanisms with mplcursor."
                }
            ],
            "lib/matplotlib/backends/backend_gtk3.py": [
                {
                    "chunk": {
                        "code": "import functools\nimport logging\nimport os\nfrom pathlib import Path\n\nimport matplotlib as mpl\nfrom matplotlib import _api, backend_tools, cbook\nfrom matplotlib.backend_bases import (\n    ToolContainerBase, CloseEvent, KeyEvent, LocationEvent, MouseEvent,\n    ResizeEvent)\n\ntry:\n    import gi\nexcept ImportError as err:\n    raise ImportError(\"The GTK3 backends require PyGObject\") from err\n\ntry:\n    # :raises ValueError: If module/version is already loaded, already\n    # required, or unavailable.\n    gi.require_version(\"Gtk\", \"3.0\")\nexcept ValueError as e:\n    # in this case we want to re-raise as ImportError so the\n    # auto-backend selection logic correctly skips.\n    raise ImportError(e) from e\n\nfrom gi.repository import Gio, GLib, GObject, Gtk, Gdk\nfrom . import _backend_gtk\nfrom ._backend_gtk import (  # noqa: F401 # pylint: disable=W0611\n    _BackendGTK, _FigureCanvasGTK, _FigureManagerGTK, _NavigationToolbar2GTK,\n    TimerGTK as TimerGTK3,\n)\n\n\n_log = logging.getLogger(__name__)\n\n\n@functools.cache\ndef _mpl_to_gtk_cursor(mpl_cursor):\n    return Gdk.Cursor.new_from_name(\n        Gdk.Display.get_default(),\n        _backend_gtk.mpl_to_gtk_cursor_name(mpl_cursor))",
                        "filename": "lib/matplotlib/backends/backend_gtk3.py",
                        "start_index": 0,
                        "end_index": 1179,
                        "start_line": 1,
                        "end_line": 41,
                        "max_line": 587,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.7",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains backend code for GTK3 in Matplotlib, which could be relevant for understanding how cursor events are handled in different backends, especially since the issue mentions a specific backend (QtAgg)."
                }
            ],
            "galleries/examples/event_handling/data_browser.py": [
                {
                    "chunk": {
                        "code": "if __name__ == '__main__':\n    import matplotlib.pyplot as plt\n\n    # Fixing random state for reproducibility\n    np.random.seed(19680801)\n\n    X = np.random.rand(100, 200)\n    xs = np.mean(X, axis=1)\n    ys = np.std(X, axis=1)\n\n    fig, (ax, ax2) = plt.subplots(2, 1)\n    ax.set_title('click on point to plot time series')\n    line, = ax.plot(xs, ys, 'o', picker=True, pickradius=5)\n\n    browser = PointBrowser()\n\n    fig.canvas.mpl_connect('pick_event', browser.on_pick)\n    fig.canvas.mpl_connect('key_press_event', browser.on_press)\n\n    plt.show()",
                        "filename": "galleries/examples/event_handling/data_browser.py",
                        "start_index": 2459,
                        "end_index": 3011,
                        "start_line": 91,
                        "end_line": 110,
                        "max_line": 110,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.7",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet includes code for connecting a pick event with a canvas, which is relevant because the issue involves an error that occurs after clicking on data points."
                }
            ],
            "galleries/examples/widgets/cursor.py": [
                {
                    "chunk": {
                        "code": "\"\"\"\n======\nCursor\n======\n\n\"\"\"\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.widgets import Cursor\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots(figsize=(8, 6))\n\nx, y = 4*(np.random.rand(2, 100) - .5)\nax.plot(x, y, 'o')\nax.set_xlim(-2, 2)\nax.set_ylim(-2, 2)\n\n# Set useblit=True on most backends for enhanced performance.\ncursor = Cursor(ax, useblit=True, color='red', linewidth=2)\n\nplt.show()\n\n# %%\n#\n# .. admonition:: References\n#\n#    The use of the following functions, methods, classes and modules is shown\n#    in this example:\n#\n#    - `matplotlib.widgets.Cursor`",
                        "filename": "galleries/examples/widgets/cursor.py",
                        "start_index": 0,
                        "end_index": 636,
                        "start_line": 1,
                        "end_line": 34,
                        "max_line": 34,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.7",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet shows the use of the Cursor widget in Matplotlib, which is directly related to the issue as it involves cursor interaction."
                }
            ],
            "galleries/examples/event_handling/cursor_demo.py": [
                {
                    "chunk": {
                        "code": "\"\"\"\n=================\nCross-hair cursor\n=================\n\nThis example adds a cross-hair as a data cursor.  The cross-hair is\nimplemented as regular line objects that are updated on mouse move.\n\nWe show three implementations:\n\n1) A simple cursor implementation that redraws the figure on every mouse move.\n   This is a bit slow, and you may notice some lag of the cross-hair movement.\n2) A cursor that uses blitting for speedup of the rendering.\n3) A cursor that snaps to data points.\n\nFaster cursoring is possible using native GUI drawing, as in\n:doc:`/gallery/user_interfaces/wxcursor_demo_sgskip`.\n\nThe mpldatacursor__ and mplcursors__ third-party packages can be used to\nachieve a similar effect.\n\n__ https://github.com/joferkington/mpldatacursor\n__ https://github.com/anntzer/mplcursors\n\n.. redirect-from:: /gallery/misc/cursor_demo\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.backend_bases import MouseEvent\n\n\nclass Cursor:\n    \"\"\"\n    A cross hair cursor.\n    \"\"\"\n    def __init__(self, ax):\n        self.ax = ax\n        self.horizontal_line = ax.axhline(color='k', lw=0.8, ls='--')\n        self.vertical_line = ax.axvline(color='k', lw=0.8, ls='--')\n        # text location in axes coordinates\n        self.text = ax.text(0.72, 0.9, '', transform=ax.transAxes)\n\n    def set_cross_hair_visible(self, visible):\n        need_redraw = self.horizontal_line.get_visible() != visible\n        self.horizontal_line.set_visible(visible)\n        self.vertical_line.set_visible(visible)\n        self.text.set_visible(visible)\n        return need_redraw\n\n    def on_mouse_move(self, event):\n        if not event.inaxes:\n            need_redraw = self.set_cross_hair_visible(False)\n            if need_redraw:\n                self.ax.figure.canvas.draw()\n        else:\n            self.set_cross_hair_visible(True)\n            x, y = event.xdata, event.ydata\n            # update the line positions\n            self.horizontal_line.set_ydata([y])\n            self.vertical_line.set_xdata([x])\n            self.text.set_text(f'x={x:1.2f}, y={y:1.2f}')\n            self.ax.figure.canvas.draw()\n\n\nx = np.arange(0, 1, 0.01)\ny = np.sin(2 * 2 * np.pi * x)\n\nfig, ax = plt.subplots()\nax.set_title('Simple cursor')\nax.plot(x, y, 'o')\ncursor = Cursor(ax)\nfig.canvas.mpl_connect('motion_notify_event', cursor.on_mouse_move)\n\n# Simulate a mouse move to (0.5, 0.5), needed for online docs\nt = ax.transData\nMouseEvent(\n    \"motion_notify_event\", ax.figure.canvas, *t.transform((0.5, 0.5))\n)._process()\n\n# %%\n# Faster redrawing using blitting\n# \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n# This technique stores the rendered plot as a background image. Only the\n# changed artists (cross-hair lines and text) are rendered anew. They are\n# combined with the background using blitting.\n#\n# This technique is significantly faster. It requires a bit more setup because\n# the background has to be stored without the cross-hair lines (see",
                        "filename": "galleries/examples/event_handling/cursor_demo.py",
                        "start_index": 0,
                        "end_index": 2929,
                        "start_line": 1,
                        "end_line": 90,
                        "max_line": 242,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.7",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet demonstrates a custom cursor implementation, which could provide insight into how cursor events are handled and potentially lead to understanding the AttributeError in the issue."
                }
            ]
        },
        "solution_task": "- Downgrade matplotlib to version 3.7.0 or lower, as the issue is not present in those versions.\n- Alternatively, if downgrading is not an option, check for updates or patches for mplcursor that address the compatibility issue with matplotlib 3.7.1.\n- If a patch is not available, consider reporting the issue to the mplcursor maintainers, including the error message and the conditions under which the bug occurs.",
        "bouncer_response": {
            "score": 5,
            "criteria": "RESPONSES that offer some actionable advice but are incomplete or partially relevant should score between 4 and 6.",
            "supporting_evidence": "The RESPONSE provides a few actionable steps to address the bug, such as downgrading matplotlib to a version where the issue is not present, checking for updates or patches for mplcursor, and reporting the issue to the mplcursor maintainers. These are practical steps that could help in resolving the issue. However, the RESPONSE also includes a list of code snippets from a GitHub repository that are not directly related to the bug described in the PROMPT. While these snippets might be tangentially related to cursor interaction, they do not provide a direct solution to the AttributeError encountered. The RESPONSE does not address the specific traceback or the AttributeError in the context of mplcursor's interaction with matplotlib 3.7.1, which is the core of the bug. Therefore, the RESPONSE is only partially relevant and incomplete in terms of providing a comprehensive solution to the bug.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711696858.0337222,
        "result": "Doesn't seem like we have fully grasped all the specifics of this ticket \ud83e\udd14.                   But we've outlined some ideas that might help you get started:\n\n- Downgrade matplotlib to version 3.7.0 or lower, as the issue is not present in those versions.\n- Alternatively, if downgrading is not an option, check for updates or patches for mplcursor that address the compatibility issue with matplotlib 3.7.1.\n- If a patch is not available, consider reporting the issue to the mplcursor maintainers, including the error message and the conditions under which the bug occurs.\n\n### Code snippets to check\n\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries) \u2192 [examples](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples) \u2192 [widgets](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples/widgets)- [Lines 1 - 46](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//galleries/examples/widgets/mouse_cursor.py#L1-L46)\n\n This snippet shows an example of setting a custom cursor on a figure canvas, which is relevant to the issue as it involves cursor interaction with matplotlib.\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries) \u2192 [examples](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples) \u2192 [widgets](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples/widgets)- [Lines 1 - 39](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//galleries/examples/widgets/multicursor.py#L1-L39)\n\n This snippet demonstrates the use of a cursor across multiple plots, which could be related to the issue since it involves cursor events and might share underlying mechanisms with mplcursor.\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib) \u2192 [backends](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib/backends)- [Lines 1 - 41](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//lib/matplotlib/backends/backend_gtk3.py#L1-L41)\n\n This snippet contains backend code for GTK3 in Matplotlib, which could be relevant for understanding how cursor events are handled in different backends, especially since the issue mentions a specific backend (QtAgg).\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries) \u2192 [examples](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples) \u2192 [event_handling](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples/event_handling)- [Lines 91 - 110](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//galleries/examples/event_handling/data_browser.py#L91-L110)\n\n This snippet includes code for connecting a pick event with a canvas, which is relevant because the issue involves an error that occurs after clicking on data points.\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries) \u2192 [examples](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples) \u2192 [widgets](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples/widgets)- [Lines 1 - 34](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//galleries/examples/widgets/cursor.py#L1-L34)\n\n This snippet shows the use of the Cursor widget in Matplotlib, which is directly related to the issue as it involves cursor interaction.\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries) \u2192 [examples](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples) \u2192 [event_handling](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples/event_handling)- [Lines 1 - 90](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//galleries/examples/event_handling/cursor_demo.py#L1-L90)\n\n This snippet demonstrates a custom cursor implementation, which could provide insight into how cursor events are handled and potentially lead to understanding the AttributeError in the issue.",
        "context_relevance": 0.2800000000000001,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: RESPONSE that is RELEVANT to some of the PROMPT should get as score of 2, 3, or 4.\nSupporting Evidence: The RESPONSE provides a general suggestion to downgrade matplotlib or to check for updates, which is somewhat relevant to the PROMPT. However, it does not address the specific bug or the traceback provided in the PROMPT. The RESPONSE also includes irrelevant information about code snippets and a template that does not pertain to the bug report, which indicates a lack of complete relevance to the PROMPT."
        },
        "qa_relevance": 0.2
    }
}