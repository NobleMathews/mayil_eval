{
    "id": "sphinx-doc__sphinx-7961",
    "repo_name": "testbed/sphinx-doc__sphinx__4.0",
    "task_id": 7879954577485015720,
    "title": "Support mathjax 3.0",
    "body": "[MathJax 3.0 was released mid last year](http://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html), and has a number of improvements - most notably on the speed of loading (something like an 80% decrease in load time). It would be great to get this into the Sphinx MathJax extension.\r\n\r\nThe [MathJax upgrading docs](http://docs.mathjax.org/en/latest/upgrading/v2.html#upgrading-from-v2-to-v3) suggest that it will not be trivial to upgrade, but it may be worth it given the performance and modularity improvements. What do folks think?\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/sphinx-doc__sphinx__4.0.git",
    "requested_commit": "",
    "mayil_response": "To implement support for MathJax 3.0 in the Sphinx MathJax extension, follow these steps:\n\n- Update the `MATHJAX_URL` in `sphinx/ext/mathjax.py` to point to the MathJax 3.0 library.\n- Replace the `mathjax_config` and `mathjax2_config` with `mathjax3_config` in the `install_mathjax` function.\n- Update the `install_mathjax` function to use the new configuration format for MathJax 3.0.\n- Ensure that the `setup` function in `sphinx/ext/mathjax.py` initializes the `mathjax3_config` configuration value.\n- Update the `html_visit_math` and `html_visit_displaymath` functions to generate HTML compatible with MathJax 3.0.\n- Test the changes with documents containing various math expressions to ensure compatibility.\n\nHere's a rough outline of the changes in code:\n\n```python\n# sphinx/ext/mathjax.py\n\n# Update the MathJax URL to the latest version\nMATHJAX_URL = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js'\n\n# ... (other code)\n\ndef install_mathjax(app: Sphinx, pagename: str, templatename: str, context: dict[str, Any],\n                    event_arg: Any) -> None:\n    # ... (existing code)\n\n    # Update to use mathjax3_config\n    if app.config.mathjax3_config:\n        body = 'window.MathJax = %s' % json.dumps(app.config.mathjax3_config)\n        app.add_js_file(None, body=body)\n\n    # ... (existing code)\n\ndef setup(app: Sphinx) -> dict[str, Any]:\n    # ... (existing code)\n\n    # Add the new mathjax3_config value\n    app.add_config_value('mathjax3_config', None, 'html')\n\n    # ... (existing code)\n\n# ... (other code)\n```\n\nMake sure to read the MathJax 3.0 documentation to understand the new configuration format and update the `mathjax3_config` accordingly. The MathJax 3.0 documentation will provide details on how to configure the library for optimal performance and compatibility with your Sphinx project.\n\nAfter making these changes, thoroughly test the Sphinx project to ensure that all math expressions are rendered correctly and that there are no issues with the MathJax upgrade.\n\n### Code snippets to check\n\n-  \u2192 [sphinx](https://github.com/testbed/sphinx-doc__sphinx__4.0/tree//sphinx) \u2192 [ext](https://github.com/testbed/sphinx-doc__sphinx__4.0/tree//sphinx/ext)- [Lines 1 - 67](https://github.com/testbed/sphinx-doc__sphinx__4.0/blob//sphinx/ext/mathjax.py#L1-L67)\n\n This snippet defines the MathJax URL and functions for rendering math in HTML, which will need to be updated to support MathJax 3.0. \n\n\n   - [Lines 70 - 122](https://github.com/testbed/sphinx-doc__sphinx__4.0/blob//sphinx/ext/mathjax.py#L70-L122)\n\n This snippet includes configuration and setup for MathJax, including a warning for using the old MathJax 2 configuration and the addition of the new MathJax 3 configuration, which is relevant for the upgrade.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0005,
        "snippet_processor": 0.08709,
        "issue_star_creation": 0.028009999999999997,
        "issue_star_solver": 0.07825000000000001,
        "bouncer": 0.02886
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711702815.5828748,
        "relevant_snippets": [
            {
                "code": "\"\"\"Allow `MathJax`_ to be used to display math in Sphinx's HTML writer.\n\nThis requires the MathJax JavaScript library on your webserver/computer.\n\n.. _MathJax: https://www.mathjax.org/\n\"\"\"\n\nfrom __future__ import annotations\n\nimport json\nfrom typing import Any, cast\n\nfrom docutils import nodes\n\nimport sphinx\nfrom sphinx.application import Sphinx\nfrom sphinx.domains.math import MathDomain\nfrom sphinx.errors import ExtensionError\nfrom sphinx.locale import _\nfrom sphinx.util.math import get_node_equation_number\nfrom sphinx.writers.html import HTML5Translator\n\n# more information for mathjax secure url is here:\n# https://docs.mathjax.org/en/latest/start.html#secure-access-to-the-cdn\nMATHJAX_URL = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js'\n\nlogger = sphinx.util.logging.getLogger(__name__)\n\n\ndef html_visit_math(self: HTML5Translator, node: nodes.math) -> None:\n    self.body.append(self.starttag(node, 'span', '', CLASS='math notranslate nohighlight'))\n    self.body.append(self.builder.config.mathjax_inline[0] +\n                     self.encode(node.astext()) +\n                     self.builder.config.mathjax_inline[1] + '</span>')\n    raise nodes.SkipNode\n\n\ndef html_visit_displaymath(self: HTML5Translator, node: nodes.math_block) -> None:\n    self.body.append(self.starttag(node, 'div', CLASS='math notranslate nohighlight'))\n    if node['nowrap']:\n        self.body.append(self.encode(node.astext()))\n        self.body.append('</div>')\n        raise nodes.SkipNode\n\n    # necessary to e.g. set the id property correctly\n    if node['number']:\n        number = get_node_equation_number(self, node)\n        self.body.append('<span class=\"eqno\">(%s)' % number)\n        self.add_permalink_ref(node, _('Permalink to this equation'))\n        self.body.append('</span>')\n    self.body.append(self.builder.config.mathjax_display[0])\n    parts = [prt for prt in node.astext().split('\\n\\n') if prt.strip()]\n    if len(parts) > 1:  # Add alignment if there are more than 1 equation\n        self.body.append(r' \\begin{align}\\begin{aligned}')\n    for i, part in enumerate(parts):\n        part = self.encode(part)\n        if r'\\\\' in part:\n            self.body.append(r'\\begin{split}' + part + r'\\end{split}')\n        else:\n            self.body.append(part)\n        if i < len(parts) - 1:  # append new line if not the last equation\n            self.body.append(r'\\\\')\n    if len(parts) > 1:  # Add alignment if there are more than 1 equation\n        self.body.append(r'\\end{aligned}\\end{align} ')\n    self.body.append(self.builder.config.mathjax_display[1])\n    self.body.append('</div>\\n')\n    raise nodes.SkipNode",
                "filename": "sphinx/ext/mathjax.py",
                "start_index": 0,
                "end_index": 2636,
                "start_line": 1,
                "end_line": 67,
                "max_line": 122,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "def install_mathjax(app: Sphinx, pagename: str, templatename: str, context: dict[str, Any],\n                    event_arg: Any) -> None:\n    if (\n        app.builder.format != 'html' or\n        app.builder.math_renderer_name != 'mathjax'  # type: ignore[attr-defined]\n    ):\n        return\n    if not app.config.mathjax_path:\n        raise ExtensionError('mathjax_path config value must be set for the '\n                             'mathjax extension to work')\n\n    domain = cast(MathDomain, app.env.get_domain('math'))\n    if app.registry.html_assets_policy == 'always' or domain.has_equations(pagename):\n        # Enable mathjax only if equations exists\n        if app.config.mathjax2_config:\n            if app.config.mathjax_path == MATHJAX_URL:\n                logger.warning(\n                    'mathjax_config/mathjax2_config does not work '\n                    'for the current MathJax version, use mathjax3_config instead')\n            body = 'MathJax.Hub.Config(%s)' % json.dumps(app.config.mathjax2_config)\n            app.add_js_file(None, type='text/x-mathjax-config', body=body)\n        if app.config.mathjax3_config:\n            body = 'window.MathJax = %s' % json.dumps(app.config.mathjax3_config)\n            app.add_js_file(None, body=body)\n\n        options = {}\n        if app.config.mathjax_options:\n            options.update(app.config.mathjax_options)\n        if 'async' not in options and 'defer' not in options:\n            if app.config.mathjax3_config:\n                # Load MathJax v3 via \"defer\" method\n                options['defer'] = 'defer'\n            else:\n                # Load other MathJax via \"async\" method\n                options['async'] = 'async'\n        app.add_js_file(app.config.mathjax_path, **options)\n\n\ndef setup(app: Sphinx) -> dict[str, Any]:\n    app.add_html_math_renderer('mathjax',\n                               (html_visit_math, None),\n                               (html_visit_displaymath, None))\n\n    app.add_config_value('mathjax_path', MATHJAX_URL, 'html')\n    app.add_config_value('mathjax_options', {}, 'html')\n    app.add_config_value('mathjax_inline', [r'\\(', r'\\)'], 'html')\n    app.add_config_value('mathjax_display', [r'\\[', r'\\]'], 'html')\n    app.add_config_value('mathjax_config', None, 'html')\n    app.add_config_value('mathjax2_config', lambda c: c.mathjax_config, 'html')\n    app.add_config_value('mathjax3_config', None, 'html')\n    app.connect('html-page-context', install_mathjax)\n\n    return {'version': sphinx.__display_version__, 'parallel_read_safe': True}",
                "filename": "sphinx/ext/mathjax.py",
                "start_index": 2639,
                "end_index": 5181,
                "start_line": 70,
                "end_line": 122,
                "max_line": 122,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 0.8
            },
            {
                "code": "def html_visit_displaymath(self: HTML5Translator, node: nodes.math_block) -> None:\n    if node['nowrap']:\n        latex = node.astext()\n    else:\n        latex = wrap_displaymath(node.astext(), None, False)\n    try:\n        rendered_path, depth = render_math(self, latex)\n    except MathExtError as exc:\n        msg = str(exc)\n        sm = nodes.system_message(msg, type='WARNING', level=2,\n                                  backrefs=[], source=node.astext())\n        sm.walkabout(self)\n        logger.warning(__('inline latex %r: %s'), node.astext(), msg)\n        raise nodes.SkipNode from exc\n    self.body.append(self.starttag(node, 'div', CLASS='math'))\n    self.body.append('<p>')\n    if node['number']:\n        number = get_node_equation_number(self, node)\n        self.body.append('<span class=\"eqno\">(%s)' % number)\n        self.add_permalink_ref(node, _('Permalink to this equation'))\n        self.body.append('</span>')\n\n    if rendered_path is None:\n        # something failed -- use text-only as a bad substitute\n        self.body.append('<span class=\"math\">%s</span></p>\\n</div>' %\n                         self.encode(node.astext()).strip())\n    else:\n        if self.builder.config.imgmath_embed:\n            image_format = self.builder.config.imgmath_image_format.lower()\n            img_src = render_maths_to_base64(image_format, rendered_path)\n        else:\n            bname = path.basename(rendered_path)\n            relative_path = path.join(self.builder.imgpath, 'math', bname)\n            img_src = relative_path.replace(path.sep, '/')\n        self.body.append(f'<img src=\"{img_src}\"' + get_tooltip(self, node) +\n                         '/></p>\\n</div>')\n    raise nodes.SkipNode\n\n\ndef setup(app: Sphinx) -> dict[str, Any]:\n    app.add_html_math_renderer('imgmath',\n                               (html_visit_math, None),\n                               (html_visit_displaymath, None))\n\n    app.add_config_value('imgmath_image_format', 'png', 'html')\n    app.add_config_value('imgmath_dvipng', 'dvipng', 'html')\n    app.add_config_value('imgmath_dvisvgm', 'dvisvgm', 'html')\n    app.add_config_value('imgmath_latex', 'latex', 'html')\n    app.add_config_value('imgmath_use_preview', False, 'html')\n    app.add_config_value('imgmath_dvipng_args',\n                         ['-gamma', '1.5', '-D', '110', '-bg', 'Transparent'],\n                         'html')\n    app.add_config_value('imgmath_dvisvgm_args', ['--no-fonts'], 'html')\n    app.add_config_value('imgmath_latex_args', [], 'html')\n    app.add_config_value('imgmath_latex_preamble', '', 'html')\n    app.add_config_value('imgmath_add_tooltips', True, 'html')\n    app.add_config_value('imgmath_font_size', 12, 'html')\n    app.add_config_value('imgmath_embed', False, 'html', [bool])\n    app.connect('build-finished', clean_up_files)\n    return {'version': sphinx.__display_version__, 'parallel_read_safe': True}",
                "filename": "sphinx/ext/imgmath.py",
                "start_index": 12227,
                "end_index": 15116,
                "start_line": 342,
                "end_line": 401,
                "max_line": 401,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def clean_up_files(app: Sphinx, exc: Exception) -> None:\n    if exc:\n        return\n\n    if hasattr(app.builder, '_imgmath_tempdir'):\n        try:\n            shutil.rmtree(app.builder._imgmath_tempdir)\n        except Exception:\n            pass\n\n    if app.builder.config.imgmath_embed:\n        # in embed mode, the images are still generated in the math output dir\n        # to be shared across workers, but are not useful to the final document\n        try:\n            shutil.rmtree(path.join(app.builder.outdir, app.builder.imagedir, 'math'))\n        except Exception:\n            pass\n\n\ndef get_tooltip(self: HTML5Translator, node: Element) -> str:\n    if self.builder.config.imgmath_add_tooltips:\n        return ' alt=\"%s\"' % self.encode(node.astext()).strip()\n    return ''\n\n\ndef html_visit_math(self: HTML5Translator, node: nodes.math) -> None:\n    try:\n        rendered_path, depth = render_math(self, '$' + node.astext() + '$')\n    except MathExtError as exc:\n        msg = str(exc)\n        sm = nodes.system_message(msg, type='WARNING', level=2,\n                                  backrefs=[], source=node.astext())\n        sm.walkabout(self)\n        logger.warning(__('display latex %r: %s'), node.astext(), msg)\n        raise nodes.SkipNode from exc\n\n    if rendered_path is None:\n        # something failed -- use text-only as a bad substitute\n        self.body.append('<span class=\"math\">%s</span>' %\n                         self.encode(node.astext()).strip())\n    else:\n        if self.builder.config.imgmath_embed:\n            image_format = self.builder.config.imgmath_image_format.lower()\n            img_src = render_maths_to_base64(image_format, rendered_path)\n        else:\n            bname = path.basename(rendered_path)\n            relative_path = path.join(self.builder.imgpath, 'math', bname)\n            img_src = relative_path.replace(path.sep, '/')\n        c = f'<img class=\"math\" src=\"{img_src}\"' + get_tooltip(self, node)\n        if depth is not None:\n            c += f' style=\"vertical-align: {-depth:d}px\"'\n        self.body.append(c + '/>')\n    raise nodes.SkipNode",
                "filename": "sphinx/ext/imgmath.py",
                "start_index": 10123,
                "end_index": 12224,
                "start_line": 287,
                "end_line": 378,
                "max_line": 401,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"Render math in HTML via dvipng or dvisvgm.\"\"\"\n\nfrom __future__ import annotations\n\nimport base64\nimport re\nimport shutil\nimport subprocess\nimport tempfile\nfrom os import path\nfrom subprocess import CalledProcessError\nfrom typing import Any\n\nfrom docutils import nodes\nfrom docutils.nodes import Element\n\nimport sphinx\nfrom sphinx import package_dir\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.errors import SphinxError\nfrom sphinx.locale import _, __\nfrom sphinx.util import logging, sha1\nfrom sphinx.util.math import get_node_equation_number, wrap_displaymath\nfrom sphinx.util.osutil import ensuredir\nfrom sphinx.util.png import read_png_depth, write_png_depth\nfrom sphinx.util.template import LaTeXRenderer\nfrom sphinx.writers.html import HTML5Translator\n\nlogger = logging.getLogger(__name__)\n\ntemplates_path = path.join(package_dir, 'templates', 'imgmath')\n\n__all__ = ()\n\n\nclass MathExtError(SphinxError):\n    category = 'Math extension error'\n\n    def __init__(\n        self, msg: str, stderr: str | None = None, stdout: str | None = None,\n    ) -> None:\n        if stderr:\n            msg += '\\n[stderr]\\n' + stderr\n        if stdout:\n            msg += '\\n[stdout]\\n' + stdout\n        super().__init__(msg)\n\n\nclass InvokeError(SphinxError):\n    \"\"\"errors on invoking converters.\"\"\"\n\n\nSUPPORT_FORMAT = ('png', 'svg')\n\ndepth_re = re.compile(r'\\[\\d+ depth=(-?\\d+)\\]')\ndepthsvg_re = re.compile(r'.*, depth=(.*)pt')\ndepthsvgcomment_re = re.compile(r'<!-- DEPTH=(-?\\d+) -->')\n\n\ndef read_svg_depth(filename: str) -> int | None:\n    \"\"\"Read the depth from comment at last line of SVG file\n    \"\"\"\n    with open(filename, encoding=\"utf-8\") as f:\n        for line in f:  # noqa: B007\n            pass\n        # Only last line is checked\n        matched = depthsvgcomment_re.match(line)\n        if matched:\n            return int(matched.group(1))\n        return None\n\n\ndef write_svg_depth(filename: str, depth: int) -> None:\n    \"\"\"Write the depth to SVG file as a comment at end of file\n    \"\"\"\n    with open(filename, 'a', encoding=\"utf-8\") as f:\n        f.write('\\n<!-- DEPTH=%s -->' % depth)",
                "filename": "sphinx/ext/imgmath.py",
                "start_index": 0,
                "end_index": 2169,
                "start_line": 1,
                "end_line": 79,
                "max_line": 401,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def setup(app: Sphinx) -> dict[str, Any]:\n    app.add_domain(MathDomain)\n    app.add_role('eq', MathReferenceRole(warn_dangling=True))\n\n    return {\n        'version': 'builtin',\n        'env_version': 2,\n        'parallel_read_safe': True,\n        'parallel_write_safe': True,\n    }",
                "filename": "sphinx/domains/math.py",
                "start_index": 5175,
                "end_index": 5458,
                "start_line": 141,
                "end_line": 150,
                "max_line": 150,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"The math domain.\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import TYPE_CHECKING, Any, Iterable\n\nfrom docutils import nodes\nfrom docutils.nodes import Element, Node, make_id, system_message\n\nfrom sphinx.addnodes import pending_xref\nfrom sphinx.domains import Domain\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.locale import __\nfrom sphinx.roles import XRefRole\nfrom sphinx.util import logging\nfrom sphinx.util.nodes import make_refnode\n\nif TYPE_CHECKING:\n    from sphinx.application import Sphinx\n    from sphinx.builders import Builder\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass MathReferenceRole(XRefRole):\n    def result_nodes(self, document: nodes.document, env: BuildEnvironment, node: Element,\n                     is_ref: bool) -> tuple[list[Node], list[system_message]]:\n        node['refdomain'] = 'math'\n        return [node], []",
                "filename": "sphinx/domains/math.py",
                "start_index": 0,
                "end_index": 871,
                "start_line": 1,
                "end_line": 30,
                "max_line": 150,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "class MathDirective(SphinxDirective):\n    has_content = True\n    required_arguments = 0\n    optional_arguments = 1\n    final_argument_whitespace = True\n    option_spec: OptionSpec = {\n        'label': directives.unchanged,\n        'name': directives.unchanged,\n        'class': directives.class_option,\n        'nowrap': directives.flag,\n    }\n\n    def run(self) -> list[Node]:\n        latex = '\\n'.join(self.content)\n        if self.arguments and self.arguments[0]:\n            latex = self.arguments[0] + '\\n\\n' + latex\n        label = self.options.get('label', self.options.get('name'))\n        node = nodes.math_block(latex, latex,\n                                classes=self.options.get('class', []),\n                                docname=self.env.docname,\n                                number=None,\n                                label=label,\n                                nowrap='nowrap' in self.options)\n        self.add_name(node)\n        self.set_source_info(node)\n\n        ret: list[Node] = [node]\n        self.add_target(ret)\n        return ret\n\n    def add_target(self, ret: list[Node]) -> None:\n        node = cast(nodes.math_block, ret[0])\n\n        # assign label automatically if math_number_all enabled\n        if node['label'] == '' or (self.config.math_number_all and not node['label']):\n            seq = self.env.new_serialno('sphinx.ext.math#equations')\n            node['label'] = \"%s:%d\" % (self.env.docname, seq)\n\n        # no targets and numbers are needed\n        if not node['label']:\n            return\n\n        # register label to domain\n        domain = cast(MathDomain, self.env.get_domain('math'))\n        domain.note_equation(self.env.docname, node['label'], location=node)\n        node['number'] = domain.get_equation_number_for(node['label'])\n\n        # add target node\n        node_id = make_id('equation-%s' % node['label'])\n        target = nodes.target('', '', ids=[node_id])\n        self.state.document.note_explicit_target(target)\n        ret.insert(0, target)\n\n\ndef setup(app: Sphinx) -> dict[str, Any]:\n    directives.register_directive('figure', Figure)\n    directives.register_directive('meta', Meta)\n    directives.register_directive('csv-table', CSVTable)\n    directives.register_directive('code', Code)\n    directives.register_directive('math', MathDirective)\n\n    return {\n        'version': 'builtin',\n        'parallel_read_safe': True,\n        'parallel_write_safe': True,\n    }",
                "filename": "sphinx/directives/patches.py",
                "start_index": 4341,
                "end_index": 6780,
                "start_line": 124,
                "end_line": 189,
                "max_line": 189,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"Utility functions for math.\"\"\"\n\nfrom __future__ import annotations\n\nfrom docutils import nodes\n\nfrom sphinx.builders.html import HTML5Translator\n\n\ndef get_node_equation_number(writer: HTML5Translator, node: nodes.math_block) -> str:\n    if writer.builder.config.math_numfig and writer.builder.config.numfig:\n        figtype = 'displaymath'\n        if writer.builder.name == 'singlehtml':\n            key = f\"{writer.docnames[-1]}/{figtype}\"\n        else:\n            key = figtype\n\n        id = node['ids'][0]\n        number = writer.builder.fignumbers.get(key, {}).get(id, ())\n        return '.'.join(map(str, number))\n    else:\n        return node['number']\n\n\ndef wrap_displaymath(text: str, label: str | None, numbering: bool) -> str:\n    def is_equation(part: str) -> str:\n        return part.strip()\n\n    if label is None:\n        labeldef = ''\n    else:\n        labeldef = r'\\label{%s}' % label\n        numbering = True\n\n    parts = list(filter(is_equation, text.split('\\n\\n')))\n    equations = []\n    if len(parts) == 0:\n        return ''\n    elif len(parts) == 1:\n        if numbering:\n            begin = r'\\begin{equation}' + labeldef\n            end = r'\\end{equation}'\n        else:\n            begin = r'\\begin{equation*}' + labeldef\n            end = r'\\end{equation*}'\n        equations.append('\\\\begin{split}%s\\\\end{split}\\n' % parts[0])\n    else:\n        if numbering:\n            begin = r'\\begin{align}%s\\!\\begin{aligned}' % labeldef\n            end = r'\\end{aligned}\\end{align}'\n        else:\n            begin = r'\\begin{align*}%s\\!\\begin{aligned}' % labeldef\n            end = r'\\end{aligned}\\end{align*}'\n        for part in parts:\n            equations.append('%s\\\\\\\\\\n' % part.strip())\n\n    concatenated_equations = ''.join(equations)\n    return f'{begin}\\n{concatenated_equations}{end}'",
                "filename": "sphinx/util/math.py",
                "start_index": 0,
                "end_index": 1815,
                "start_line": 1,
                "end_line": 58,
                "max_line": 58,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "\"\"\"Mathematics domain.\"\"\"\n    name = 'math'\n    label = 'mathematics'\n\n    initial_data: dict[str, Any] = {\n        'objects': {},  # labelid -> (docname, eqno)\n        'has_equations': {},  # docname -> bool\n    }\n    dangling_warnings = {\n        'eq': 'equation not found: %(target)s',\n    }\n    enumerable_nodes = {  # node_class -> (figtype, title_getter)\n        nodes.math_block: ('displaymath', None),\n    }\n    roles = {\n        'numref': MathReferenceRole(),\n    }\n\n    @property\n    def equations(self) -> dict[str, tuple[str, int]]:\n        return self.data.setdefault('objects', {})  # labelid -> (docname, eqno)\n\n    def note_equation(self, docname: str, labelid: str, location: Any = None) -> None:\n        if labelid in self.equations:\n            other = self.equations[labelid][0]\n            logger.warning(__('duplicate label of equation %s, other instance in %s') %\n                           (labelid, other), location=location)\n\n        self.equations[labelid] = (docname, self.env.new_serialno('eqno') + 1)\n\n    def get_equation_number_for(self, labelid: str) -> int | None:\n        if labelid in self.equations:\n            return self.equations[labelid][1]\n        else:\n            return None\n\n    def process_doc(self, env: BuildEnvironment, docname: str,\n                    document: nodes.document) -> None:\n        def math_node(node: Node) -> bool:\n            return isinstance(node, (nodes.math, nodes.math_block))\n\n        self.data['has_equations'][docname] = any(document.findall(math_node))\n\n    def clear_doc(self, docname: str) -> None:\n        for equation_id, (doc, _eqno) in list(self.equations.items()):\n            if doc == docname:\n                del self.equations[equation_id]\n\n        self.data['has_equations'].pop(docname, None)\n\n    def merge_domaindata(self, docnames: Iterable[str], otherdata: dict[str, Any]) -> None:\n        for labelid, (doc, eqno) in otherdata['objects'].items():\n            if doc in docnames:\n                self.equations[labelid] = (doc, eqno)\n\n        for docname in docnames:\n            self.data['has_equations'][docname] = otherdata['has_equations'][docname]",
                "filename": "sphinx/domains/math.py",
                "start_index": 904,
                "end_index": 3052,
                "start_line": 34,
                "end_line": 90,
                "max_line": 150,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                "sha": "",
                "context_relevance": 0.2
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "sphinx/ext/mathjax.py": [
                {
                    "chunk": {
                        "code": "\"\"\"Allow `MathJax`_ to be used to display math in Sphinx's HTML writer.\n\nThis requires the MathJax JavaScript library on your webserver/computer.\n\n.. _MathJax: https://www.mathjax.org/\n\"\"\"\n\nfrom __future__ import annotations\n\nimport json\nfrom typing import Any, cast\n\nfrom docutils import nodes\n\nimport sphinx\nfrom sphinx.application import Sphinx\nfrom sphinx.domains.math import MathDomain\nfrom sphinx.errors import ExtensionError\nfrom sphinx.locale import _\nfrom sphinx.util.math import get_node_equation_number\nfrom sphinx.writers.html import HTML5Translator\n\n# more information for mathjax secure url is here:\n# https://docs.mathjax.org/en/latest/start.html#secure-access-to-the-cdn\nMATHJAX_URL = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js'\n\nlogger = sphinx.util.logging.getLogger(__name__)\n\n\ndef html_visit_math(self: HTML5Translator, node: nodes.math) -> None:\n    self.body.append(self.starttag(node, 'span', '', CLASS='math notranslate nohighlight'))\n    self.body.append(self.builder.config.mathjax_inline[0] +\n                     self.encode(node.astext()) +\n                     self.builder.config.mathjax_inline[1] + '</span>')\n    raise nodes.SkipNode\n\n\ndef html_visit_displaymath(self: HTML5Translator, node: nodes.math_block) -> None:\n    self.body.append(self.starttag(node, 'div', CLASS='math notranslate nohighlight'))\n    if node['nowrap']:\n        self.body.append(self.encode(node.astext()))\n        self.body.append('</div>')\n        raise nodes.SkipNode\n\n    # necessary to e.g. set the id property correctly\n    if node['number']:\n        number = get_node_equation_number(self, node)\n        self.body.append('<span class=\"eqno\">(%s)' % number)\n        self.add_permalink_ref(node, _('Permalink to this equation'))\n        self.body.append('</span>')\n    self.body.append(self.builder.config.mathjax_display[0])\n    parts = [prt for prt in node.astext().split('\\n\\n') if prt.strip()]\n    if len(parts) > 1:  # Add alignment if there are more than 1 equation\n        self.body.append(r' \\begin{align}\\begin{aligned}')\n    for i, part in enumerate(parts):\n        part = self.encode(part)\n        if r'\\\\' in part:\n            self.body.append(r'\\begin{split}' + part + r'\\end{split}')\n        else:\n            self.body.append(part)\n        if i < len(parts) - 1:  # append new line if not the last equation\n            self.body.append(r'\\\\')\n    if len(parts) > 1:  # Add alignment if there are more than 1 equation\n        self.body.append(r'\\end{aligned}\\end{align} ')\n    self.body.append(self.builder.config.mathjax_display[1])\n    self.body.append('</div>\\n')\n    raise nodes.SkipNode",
                        "filename": "sphinx/ext/mathjax.py",
                        "start_index": 0,
                        "end_index": 2636,
                        "start_line": 1,
                        "end_line": 67,
                        "max_line": 122,
                        "git_instance": "github",
                        "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet defines the MathJax URL and functions for rendering math in HTML, which will need to be updated to support MathJax 3.0."
                },
                {
                    "chunk": {
                        "code": "def install_mathjax(app: Sphinx, pagename: str, templatename: str, context: dict[str, Any],\n                    event_arg: Any) -> None:\n    if (\n        app.builder.format != 'html' or\n        app.builder.math_renderer_name != 'mathjax'  # type: ignore[attr-defined]\n    ):\n        return\n    if not app.config.mathjax_path:\n        raise ExtensionError('mathjax_path config value must be set for the '\n                             'mathjax extension to work')\n\n    domain = cast(MathDomain, app.env.get_domain('math'))\n    if app.registry.html_assets_policy == 'always' or domain.has_equations(pagename):\n        # Enable mathjax only if equations exists\n        if app.config.mathjax2_config:\n            if app.config.mathjax_path == MATHJAX_URL:\n                logger.warning(\n                    'mathjax_config/mathjax2_config does not work '\n                    'for the current MathJax version, use mathjax3_config instead')\n            body = 'MathJax.Hub.Config(%s)' % json.dumps(app.config.mathjax2_config)\n            app.add_js_file(None, type='text/x-mathjax-config', body=body)\n        if app.config.mathjax3_config:\n            body = 'window.MathJax = %s' % json.dumps(app.config.mathjax3_config)\n            app.add_js_file(None, body=body)\n\n        options = {}\n        if app.config.mathjax_options:\n            options.update(app.config.mathjax_options)\n        if 'async' not in options and 'defer' not in options:\n            if app.config.mathjax3_config:\n                # Load MathJax v3 via \"defer\" method\n                options['defer'] = 'defer'\n            else:\n                # Load other MathJax via \"async\" method\n                options['async'] = 'async'\n        app.add_js_file(app.config.mathjax_path, **options)\n\n\ndef setup(app: Sphinx) -> dict[str, Any]:\n    app.add_html_math_renderer('mathjax',\n                               (html_visit_math, None),\n                               (html_visit_displaymath, None))\n\n    app.add_config_value('mathjax_path', MATHJAX_URL, 'html')\n    app.add_config_value('mathjax_options', {}, 'html')\n    app.add_config_value('mathjax_inline', [r'\\(', r'\\)'], 'html')\n    app.add_config_value('mathjax_display', [r'\\[', r'\\]'], 'html')\n    app.add_config_value('mathjax_config', None, 'html')\n    app.add_config_value('mathjax2_config', lambda c: c.mathjax_config, 'html')\n    app.add_config_value('mathjax3_config', None, 'html')\n    app.connect('html-page-context', install_mathjax)\n\n    return {'version': sphinx.__display_version__, 'parallel_read_safe': True}",
                        "filename": "sphinx/ext/mathjax.py",
                        "start_index": 2639,
                        "end_index": 5181,
                        "start_line": 70,
                        "end_line": 122,
                        "max_line": 122,
                        "git_instance": "github",
                        "repo_name": "testbed/sphinx-doc__sphinx__4.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet includes configuration and setup for MathJax, including a warning for using the old MathJax 2 configuration and the addition of the new MathJax 3 configuration, which is relevant for the upgrade."
                }
            ]
        },
        "solution_task": "To implement support for MathJax 3.0 in the Sphinx MathJax extension, follow these steps:\n\n- Update the `MATHJAX_URL` in `sphinx/ext/mathjax.py` to point to the MathJax 3.0 library.\n- Replace the `mathjax_config` and `mathjax2_config` with `mathjax3_config` in the `install_mathjax` function.\n- Update the `install_mathjax` function to use the new configuration format for MathJax 3.0.\n- Ensure that the `setup` function in `sphinx/ext/mathjax.py` initializes the `mathjax3_config` configuration value.\n- Update the `html_visit_math` and `html_visit_displaymath` functions to generate HTML compatible with MathJax 3.0.\n- Test the changes with documents containing various math expressions to ensure compatibility.\n\nHere's a rough outline of the changes in code:\n\n```python\n# sphinx/ext/mathjax.py\n\n# Update the MathJax URL to the latest version\nMATHJAX_URL = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js'\n\n# ... (other code)\n\ndef install_mathjax(app: Sphinx, pagename: str, templatename: str, context: dict[str, Any],\n                    event_arg: Any) -> None:\n    # ... (existing code)\n\n    # Update to use mathjax3_config\n    if app.config.mathjax3_config:\n        body = 'window.MathJax = %s' % json.dumps(app.config.mathjax3_config)\n        app.add_js_file(None, body=body)\n\n    # ... (existing code)\n\ndef setup(app: Sphinx) -> dict[str, Any]:\n    # ... (existing code)\n\n    # Add the new mathjax3_config value\n    app.add_config_value('mathjax3_config', None, 'html')\n\n    # ... (existing code)\n\n# ... (other code)\n```\n\nMake sure to read the MathJax 3.0 documentation to understand the new configuration format and update the `mathjax3_config` accordingly. The MathJax 3.0 documentation will provide details on how to configure the library for optimal performance and compatibility with your Sphinx project.\n\nAfter making these changes, thoroughly test the Sphinx project to ensure that all math expressions are rendered correctly and that there are no issues with the MathJax upgrade.",
        "bouncer_response": {
            "score": 8,
            "criteria": "RESPONSE must provide actionable, relevant guidance to more parts of the PROMPT's described issue to score higher.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable plan for upgrading the Sphinx MathJax extension to support MathJax 3.0. It includes specific steps such as updating the MATHJAX_URL, replacing the configuration variables, and updating functions to be compatible with MathJax 3.0. The RESPONSE also includes a code snippet to illustrate the changes needed in the `sphinx/ext/mathjax.py` file, which is highly relevant to the feature request. Additionally, it advises on testing the changes and reading the MathJax 3.0 documentation for configuration details, which are important steps in the upgrade process. The RESPONSE does not address potential challenges that may arise during the upgrade process, which are hinted at in the PROMPT's mention of the upgrade not being trivial. However, it does provide a solid foundation for starting the upgrade process.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711702903.852892,
        "result": "To implement support for MathJax 3.0 in the Sphinx MathJax extension, follow these steps:\n\n- Update the `MATHJAX_URL` in `sphinx/ext/mathjax.py` to point to the MathJax 3.0 library.\n- Replace the `mathjax_config` and `mathjax2_config` with `mathjax3_config` in the `install_mathjax` function.\n- Update the `install_mathjax` function to use the new configuration format for MathJax 3.0.\n- Ensure that the `setup` function in `sphinx/ext/mathjax.py` initializes the `mathjax3_config` configuration value.\n- Update the `html_visit_math` and `html_visit_displaymath` functions to generate HTML compatible with MathJax 3.0.\n- Test the changes with documents containing various math expressions to ensure compatibility.\n\nHere's a rough outline of the changes in code:\n\n```python\n# sphinx/ext/mathjax.py\n\n# Update the MathJax URL to the latest version\nMATHJAX_URL = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js'\n\n# ... (other code)\n\ndef install_mathjax(app: Sphinx, pagename: str, templatename: str, context: dict[str, Any],\n                    event_arg: Any) -> None:\n    # ... (existing code)\n\n    # Update to use mathjax3_config\n    if app.config.mathjax3_config:\n        body = 'window.MathJax = %s' % json.dumps(app.config.mathjax3_config)\n        app.add_js_file(None, body=body)\n\n    # ... (existing code)\n\ndef setup(app: Sphinx) -> dict[str, Any]:\n    # ... (existing code)\n\n    # Add the new mathjax3_config value\n    app.add_config_value('mathjax3_config', None, 'html')\n\n    # ... (existing code)\n\n# ... (other code)\n```\n\nMake sure to read the MathJax 3.0 documentation to understand the new configuration format and update the `mathjax3_config` accordingly. The MathJax 3.0 documentation will provide details on how to configure the library for optimal performance and compatibility with your Sphinx project.\n\nAfter making these changes, thoroughly test the Sphinx project to ensure that all math expressions are rendered correctly and that there are no issues with the MathJax upgrade.\n\n### Code snippets to check\n\n-  \u2192 [sphinx](https://github.com/testbed/sphinx-doc__sphinx__4.0/tree//sphinx) \u2192 [ext](https://github.com/testbed/sphinx-doc__sphinx__4.0/tree//sphinx/ext)- [Lines 1 - 67](https://github.com/testbed/sphinx-doc__sphinx__4.0/blob//sphinx/ext/mathjax.py#L1-L67)\n\n This snippet defines the MathJax URL and functions for rendering math in HTML, which will need to be updated to support MathJax 3.0. \n\n\n   - [Lines 70 - 122](https://github.com/testbed/sphinx-doc__sphinx__4.0/blob//sphinx/ext/mathjax.py#L70-L122)\n\n This snippet includes configuration and setup for MathJax, including a warning for using the old MathJax 2 configuration and the addition of the new MathJax 3 configuration, which is relevant for the upgrade.",
        "context_relevance": 0.34,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: Relevance of the RESPONSE to the PROMPT\nSupporting Evidence: The RESPONSE provides a detailed and technical plan for upgrading the Sphinx MathJax extension to support MathJax 3.0, which is directly relevant to the PROMPT's request for thoughts on implementing the upgrade. It addresses the performance and modularity improvements mentioned in the PROMPT and outlines specific steps and code changes needed for the upgrade process. The RESPONSE also includes a reference to the MathJax 3.0 documentation for further guidance, which is pertinent to the PROMPT's mention of the upgrading docs. The RESPONSE does not directly address the question \"What do folks think?\" which is why it does not receive a full score of 10. However, it is highly relevant to the technical aspects of the PROMPT."
        },
        "qa_relevance": 0.9
    }
}