{
    "id": "django__django-16662",
    "repo_name": "testbed/django__django__5.0",
    "task_id": 6685696143753978100,
    "title": "Migration import ordering violates coding style and isort defaults",
    "body": "Description\n\t\nNew migration files are generated with imports sorted by module, independent of import style. For example:\nimport datetime\nfrom django.db import migrations, models\nimport time\nThe \u200bDjango coding style specifies:\nPlace all import module statements before from module import objects in each section.\nThis guidance is the same as what isort does by default, \u200bas documented here. Newly generated migrations can fail isort for this reason.\nThis would mean migration files should instead be generated like this:\nimport datetime\nimport time\nfrom django.db import migrations, models\nFor reference, previous issues related to migration import sorting: #24155, #25384.\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/django__django__5.0.git",
    "requested_commit": "",
    "mayil_response": "- Modify the `MIGRATION_TEMPLATE` in `django/db/migrations/writer.py` to ensure that imports are sorted according to Django's coding style and isort's default behavior.\n- Implement a custom sorting function or adjust the `sort_imports` function (if it exists) to sort imports with standard library imports first, followed by third-party libraries, and then project-specific imports.\n- Ensure that the `import_section` variable in the migration file template is generated by calling this custom sorting function with the appropriate lists of imports.\n- If isort is used as an external tool or library, configure its settings to match the desired import order, either by creating a `.isort.cfg` file or by adjusting the settings within the code where isort is called.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__5.0/tree//django) \u2192 [db](https://github.com/testbed/django__django__5.0/tree//django/db) \u2192 [migrations](https://github.com/testbed/django__django__5.0/tree//django/db/migrations)- [Lines 298 - 316](https://github.com/testbed/django__django__5.0/blob//django/db/migrations/writer.py#L298-L316)\n\n This snippet contains the template for migration files, which is where the import order is defined and needs to be corrected to match the coding style and isort defaults.\n-  \u2192 [django](https://github.com/testbed/django__django__5.0/tree//django) \u2192 [contrib](https://github.com/testbed/django__django__5.0/tree//django/contrib) \u2192 [auth](https://github.com/testbed/django__django__5.0/tree//django/contrib/auth) \u2192 [migrations](https://github.com/testbed/django__django__5.0/tree//django/contrib/auth/migrations)- [Lines 1 - 4](https://github.com/testbed/django__django__5.0/blob//django/contrib/auth/migrations/0001_initial.py#L1-L4)\n\n This snippet shows an example of a migration file with imports that do not follow the correct order. It may need to be used as a reference or updated to follow the new import order.\n-  \u2192 [django](https://github.com/testbed/django__django__5.0/tree//django) \u2192 [db](https://github.com/testbed/django__django__5.0/tree//django/db) \u2192 [migrations](https://github.com/testbed/django__django__5.0/tree//django/db/migrations)- [Lines 381 - 1683](https://github.com/testbed/django__django__5.0/blob//django/db/migrations/autodetector.py#L381-L1683)\n\n This snippet is part of the autodetector which might be responsible for generating the order of imports in new migration files, and could require changes to ensure the correct order is produced.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.000224,
        "snippet_processor": 0.05249,
        "issue_star_creation": 0.021079999999999998,
        "issue_star_solver": 0.06552000000000001,
        "bouncer": 0.02299
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711705691.501869,
        "relevant_snippets": [
            {
                "code": "def _sort_migrations(self):\n        \"\"\"\n        Reorder to make things possible. Reordering may be needed so FKs work\n        nicely inside the same app.\n        \"\"\"\n        for app_label, ops in sorted(self.generated_operations.items()):\n            ts = TopologicalSorter()\n            for op in ops:\n                ts.add(op)\n                for dep in op._auto_deps:\n                    # Resolve intra-app dependencies to handle circular\n                    # references involving a swappable model.\n                    dep = self._resolve_dependency(dep)[0]\n                    if dep[0] != app_label:\n                        continue\n                    ts.add(op, *(x for x in ops if self.check_dependency(x, dep)))\n            self.generated_operations[app_label] = list(ts.static_order())\n\n    def _optimize_migrations(self):\n        # Add in internal dependencies among the migrations\n        for app_label, migrations in self.migrations.items():\n            for m1, m2 in zip(migrations, migrations[1:]):\n                m2.dependencies.append((app_label, m1.name))\n\n        # De-dupe dependencies\n        for migrations in self.migrations.values():\n            for migration in migrations:\n                migration.dependencies = list(set(migration.dependencies))\n\n        # Optimize migrations\n        for app_label, migrations in self.migrations.items():\n            for migration in migrations:\n                migration.operations = MigrationOptimizer().optimize(\n                    migration.operations, app_label\n                )",
                "filename": "django/db/migrations/autodetector.py",
                "start_index": 17806,
                "end_index": 19358,
                "start_line": 381,
                "end_line": 1683,
                "max_line": 1776,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "for migration in app_migrations:\n                # Describe the migration",
                "filename": "django/core/management/commands/makemigrations.py",
                "start_index": 13742,
                "end_index": 13815,
                "start_line": 299,
                "end_line": 341,
                "max_line": 513,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "class Migration(migrations.Migration):",
                "filename": "django/contrib/auth/migrations/0001_initial.py",
                "start_index": 154,
                "end_index": 192,
                "start_line": 7,
                "end_line": 7,
                "max_line": 204,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 0.1
            },
            {
                "code": "yield \"# This is an auto-generated Django model module.\"\n            yield \"# You'll have to do the following manually to clean this up:\"\n            yield \"#   * Rearrange models' order\"\n            yield \"#   * Make sure each model has one field with primary_key=True\"\n            yield (\n                \"#   * Make sure each ForeignKey and OneToOneField has `on_delete` set \"\n                \"to the desired behavior\"\n            )\n            yield (\n                \"#   * Remove `managed = False` lines if you wish to allow \"\n                \"Django to create, modify, and delete the table\"\n            )\n            yield (\n                \"# Feel free to rename the models, but don't rename db_table values or \"\n                \"field names.\"\n            )\n            yield \"from %s import models\" % self.db_module\n            known_models = []\n            # Determine types of tables and/or views to be introspected.\n            types = {\"t\"}\n            if options[\"include_partitions\"]:\n                types.add(\"p\")\n            if options[\"include_views\"]:\n                types.add(\"v\")\n            table_info = connection.introspection.get_table_list(cursor)\n            table_info = {info.name: info for info in table_info if info.type in types}",
                "filename": "django/core/management/commands/inspectdb.py",
                "start_index": 1866,
                "end_index": 3129,
                "start_line": 60,
                "end_line": 85,
                "max_line": 414,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "MIGRATION_HEADER_TEMPLATE = \"\"\"\\\n# Generated by Django %(version)s on %(timestamp)s\n\n\"\"\"\n\n\nMIGRATION_TEMPLATE = \"\"\"\\\n%(migration_header)s%(imports)s\n\nclass Migration(migrations.Migration):\n%(replaces_str)s%(initial_str)s\n    dependencies = [\n%(dependencies)s\\\n    ]\n\n    operations = [\n%(operations)s\\\n    ]\n\"\"\"",
                "filename": "django/db/migrations/writer.py",
                "start_index": 11301,
                "end_index": 11612,
                "start_line": 298,
                "end_line": 316,
                "max_line": 316,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 0.7
            },
            {
                "code": "from django.db import migrations\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"auth\", \"0005_alter_user_last_login_null\"),\n        (\"contenttypes\", \"0002_remove_content_type_name\"),\n    ]\n\n    operations = [\n        # Ensure the contenttypes migration is applied before sending\n        # post_migrate signals (which create ContentTypes).\n    ]",
                "filename": "django/contrib/auth/migrations/0006_require_contenttypes_0002.py",
                "start_index": 0,
                "end_index": 368,
                "start_line": 1,
                "end_line": 13,
                "max_line": 13,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "import django.contrib.auth.models\nfrom django.contrib.auth import validators\nfrom django.db import migrations, models\nfrom django.utils import timezone",
                "filename": "django/contrib/auth/migrations/0001_initial.py",
                "start_index": 0,
                "end_index": 151,
                "start_line": 1,
                "end_line": 4,
                "max_line": 204,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 0.7
            },
            {
                "code": "valid_fields = set(\n            chain.from_iterable(\n                (f.name, f.attname)\n                if not (f.auto_created and not f.concrete)\n                else (f.field.related_query_name(),)\n                for f in chain(opts.fields, opts.related_objects)\n            )\n        )\n\n        invalid_fields.extend(fields - valid_fields)\n\n        for invalid_field in invalid_fields:\n            errors.append(\n                checks.Error(\n                    \"'ordering' refers to the nonexistent field, related \"\n                    \"field, or lookup '%s'.\" % invalid_field,\n                    obj=cls,\n                    id=\"models.E015\",\n                )\n            )\n        return errors",
                "filename": "django/db/models/base.py",
                "start_index": 87521,
                "end_index": 88226,
                "start_line": 2218,
                "end_line": 2553,
                "max_line": 2607,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 0.0
            },
            {
                "code": "from django.contrib.auth import validators\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"auth\", \"0007_alter_validators_add_error_messages\"),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name=\"user\",\n            name=\"username\",\n            field=models.CharField(\n                error_messages={\"unique\": \"A user with that username already exists.\"},\n                help_text=(\n                    \"Required. 150 characters or fewer. Letters, digits and @/./+/-/_ \"\n                    \"only.\"\n                ),\n                max_length=150,\n                unique=True,\n                validators=[validators.UnicodeUsernameValidator()],\n                verbose_name=\"username\",\n            ),\n        ),\n    ]",
                "filename": "django/contrib/auth/migrations/0008_alter_user_username_max_length.py",
                "start_index": 0,
                "end_index": 813,
                "start_line": 1,
                "end_line": 26,
                "max_line": 26,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "import sys\nimport time\nfrom importlib import import_module\n\nfrom django.apps import apps\nfrom django.core.management.base import BaseCommand, CommandError, no_translations\nfrom django.core.management.sql import emit_post_migrate_signal, emit_pre_migrate_signal\nfrom django.db import DEFAULT_DB_ALIAS, connections, router\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.executor import MigrationExecutor\nfrom django.db.migrations.loader import AmbiguityError\nfrom django.db.migrations.state import ModelState, ProjectState\nfrom django.utils.module_loading import module_has_submodule\nfrom django.utils.text import Truncator",
                "filename": "django/core/management/commands/migrate.py",
                "start_index": 0,
                "end_index": 668,
                "start_line": 1,
                "end_line": 14,
                "max_line": 511,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": "",
                "context_relevance": 0.2
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "django/db/migrations/writer.py": [
                {
                    "chunk": {
                        "code": "MIGRATION_HEADER_TEMPLATE = \"\"\"\\\n# Generated by Django %(version)s on %(timestamp)s\n\n\"\"\"\n\n\nMIGRATION_TEMPLATE = \"\"\"\\\n%(migration_header)s%(imports)s\n\nclass Migration(migrations.Migration):\n%(replaces_str)s%(initial_str)s\n    dependencies = [\n%(dependencies)s\\\n    ]\n\n    operations = [\n%(operations)s\\\n    ]\n\"\"\"",
                        "filename": "django/db/migrations/writer.py",
                        "start_index": 11301,
                        "end_index": 11612,
                        "start_line": 298,
                        "end_line": 316,
                        "max_line": 316,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__5.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the template for migration files, which is where the import order is defined and needs to be corrected to match the coding style and isort defaults."
                }
            ],
            "django/contrib/auth/migrations/0001_initial.py": [
                {
                    "chunk": {
                        "code": "import django.contrib.auth.models\nfrom django.contrib.auth import validators\nfrom django.db import migrations, models\nfrom django.utils import timezone",
                        "filename": "django/contrib/auth/migrations/0001_initial.py",
                        "start_index": 0,
                        "end_index": 151,
                        "start_line": 1,
                        "end_line": 4,
                        "max_line": 204,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__5.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet shows an example of a migration file with imports that do not follow the correct order. It may need to be used as a reference or updated to follow the new import order."
                }
            ],
            "django/db/migrations/autodetector.py": [
                {
                    "chunk": {
                        "code": "def _sort_migrations(self):\n        \"\"\"\n        Reorder to make things possible. Reordering may be needed so FKs work\n        nicely inside the same app.\n        \"\"\"\n        for app_label, ops in sorted(self.generated_operations.items()):\n            ts = TopologicalSorter()\n            for op in ops:\n                ts.add(op)\n                for dep in op._auto_deps:\n                    # Resolve intra-app dependencies to handle circular\n                    # references involving a swappable model.\n                    dep = self._resolve_dependency(dep)[0]\n                    if dep[0] != app_label:\n                        continue\n                    ts.add(op, *(x for x in ops if self.check_dependency(x, dep)))\n            self.generated_operations[app_label] = list(ts.static_order())\n\n    def _optimize_migrations(self):\n        # Add in internal dependencies among the migrations\n        for app_label, migrations in self.migrations.items():\n            for m1, m2 in zip(migrations, migrations[1:]):\n                m2.dependencies.append((app_label, m1.name))\n\n        # De-dupe dependencies\n        for migrations in self.migrations.values():\n            for migration in migrations:\n                migration.dependencies = list(set(migration.dependencies))\n\n        # Optimize migrations\n        for app_label, migrations in self.migrations.items():\n            for migration in migrations:\n                migration.operations = MigrationOptimizer().optimize(\n                    migration.operations, app_label\n                )",
                        "filename": "django/db/migrations/autodetector.py",
                        "start_index": 17806,
                        "end_index": 19358,
                        "start_line": 381,
                        "end_line": 1683,
                        "max_line": 1776,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__5.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is part of the autodetector which might be responsible for generating the order of imports in new migration files, and could require changes to ensure the correct order is produced."
                }
            ]
        },
        "solution_task": "- Modify the `MIGRATION_TEMPLATE` in `django/db/migrations/writer.py` to ensure that imports are sorted according to Django's coding style and isort's default behavior.\n- Implement a custom sorting function or adjust the `sort_imports` function (if it exists) to sort imports with standard library imports first, followed by third-party libraries, and then project-specific imports.\n- Ensure that the `import_section` variable in the migration file template is generated by calling this custom sorting function with the appropriate lists of imports.\n- If isort is used as an external tool or library, configure its settings to match the desired import order, either by creating a `.isort.cfg` file or by adjusting the settings within the code where isort is called.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable solution to the problem of migration import ordering not adhering to Django's coding style and isort defaults. It suggests modifying the `MIGRATION_TEMPLATE` in `django/db/migrations/writer.py`, which is directly related to how migration files are generated. The RESPONSE also recommends implementing a custom sorting function or adjusting an existing one, which is a logical step towards ensuring the correct import order. Additionally, it advises configuring isort settings to match the desired import order, which is relevant since isort is a tool commonly used for sorting imports in Python projects. The RESPONSE also points to specific code snippets that should be checked, which is helpful for someone looking to address the issue. The only reason it does not score a 10 is that it does not provide the exact code changes needed, but it gives all the necessary guidance for a developer to implement the solution.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711705774.3712919,
        "result": "- Modify the `MIGRATION_TEMPLATE` in `django/db/migrations/writer.py` to ensure that imports are sorted according to Django's coding style and isort's default behavior.\n- Implement a custom sorting function or adjust the `sort_imports` function (if it exists) to sort imports with standard library imports first, followed by third-party libraries, and then project-specific imports.\n- Ensure that the `import_section` variable in the migration file template is generated by calling this custom sorting function with the appropriate lists of imports.\n- If isort is used as an external tool or library, configure its settings to match the desired import order, either by creating a `.isort.cfg` file or by adjusting the settings within the code where isort is called.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__5.0/tree//django) \u2192 [db](https://github.com/testbed/django__django__5.0/tree//django/db) \u2192 [migrations](https://github.com/testbed/django__django__5.0/tree//django/db/migrations)- [Lines 298 - 316](https://github.com/testbed/django__django__5.0/blob//django/db/migrations/writer.py#L298-L316)\n\n This snippet contains the template for migration files, which is where the import order is defined and needs to be corrected to match the coding style and isort defaults.\n-  \u2192 [django](https://github.com/testbed/django__django__5.0/tree//django) \u2192 [contrib](https://github.com/testbed/django__django__5.0/tree//django/contrib) \u2192 [auth](https://github.com/testbed/django__django__5.0/tree//django/contrib/auth) \u2192 [migrations](https://github.com/testbed/django__django__5.0/tree//django/contrib/auth/migrations)- [Lines 1 - 4](https://github.com/testbed/django__django__5.0/blob//django/contrib/auth/migrations/0001_initial.py#L1-L4)\n\n This snippet shows an example of a migration file with imports that do not follow the correct order. It may need to be used as a reference or updated to follow the new import order.\n-  \u2192 [django](https://github.com/testbed/django__django__5.0/tree//django) \u2192 [db](https://github.com/testbed/django__django__5.0/tree//django/db) \u2192 [migrations](https://github.com/testbed/django__django__5.0/tree//django/db/migrations)- [Lines 381 - 1683](https://github.com/testbed/django__django__5.0/blob//django/db/migrations/autodetector.py#L381-L1683)\n\n This snippet is part of the autodetector which might be responsible for generating the order of imports in new migration files, and could require changes to ensure the correct order is produced.",
        "context_relevance": 0.27,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE must be relevant to the entire PROMPT and answer it completely to get a score of 10.\nSupporting Evidence: The RESPONSE directly addresses the issue described in the PROMPT by providing a detailed solution to ensure that migration files are generated with the correct import order. It suggests modifying the `MIGRATION_TEMPLATE` to align with Django's coding style and isort defaults, implementing a custom sorting function, and configuring isort settings if used. Additionally, the RESPONSE includes references to specific code snippets that are relevant to the issue, indicating where changes should be made. This shows that the RESPONSE is fully relevant to the PROMPT and answers it completely."
        },
        "qa_relevance": 1.0
    }
}