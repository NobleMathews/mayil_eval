{
    "id": "pydata__xarray-5126",
    "repo_name": "testbed/pydata__xarray__0.12",
    "task_id": 6206309067556331078,
    "title": "FR: Provide option for collapsing the HTML display in notebooks",
    "body": "# Issue description\r\nThe overly long output of the text repr of xarray always bugged so I was very happy that the recently implemented html repr collapsed the data part, and equally sad to see that 0.16.0 reverted that, IMHO, correct design implementation back, presumably to align it with the text repr.\r\n\r\n# Suggested solution\r\nAs the opinions will vary on what a good repr should do, similar to existing xarray.set_options I would like to have an option that let's me control if the data part (and maybe other parts?) appear in a collapsed fashion for the html repr.\r\n\r\n# Additional questions\r\n* Is it worth considering this as well for the text repr? Or is that harder to implement?\r\n\r\nAny guidance on \r\n  * which files need to change\r\n  * potential pitfalls\r\n\r\nwould be welcome. I'm happy to work on this, as I seem to be the only one not liking the current implementation.\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pydata__xarray__0.12.git",
    "requested_commit": "",
    "mayil_response": "To implement the feature request for collapsing the HTML display in notebooks for xarray objects, you can follow these steps:\n\n- Add a new option to control the collapsed state of the HTML representation in the `xarray.set_options` context manager.\n- Modify the HTML formatter to respect this new option when generating the HTML representation.\n- Update the CSS to ensure that the collapsed state is styled correctly.\n\nHere's a high-level overview of the implementation:\n\n1. **Add a New Option:**\n   - Add a new option in `xarray/core/options.py` (not provided in the snippets) to control the collapsed state of the HTML representation. For example, `display_html_collapsed`.\n\n2. **Update HTML Formatter:**\n   - In `xarray/core/formatting_html.py`, update the `_obj_repr` function to check the new option and set the `collapsed` state accordingly.\n   - Modify the `collapsible_section` function to use the new option to determine whether a section should be collapsed by default.\n\n3. **Update CSS:**\n   - In `xarray/static/css/style.css`, ensure that the styles for the collapsed/expanded states are correct and that the toggling behavior works as expected.\n\nHere's some pseudo-code to illustrate the changes:\n\n```python\n# In xarray/core/options.py (pseudo-code)\ndef set_options(display_html_collapsed=False):\n    # Add logic to set the option\n\n# In xarray/core/formatting_html.py\ndef _obj_repr(obj, header_components, sections):\n    # ... existing code ...\n    # Check the new option to determine the collapsed state\n    collapsed = OPTIONS['display_html_collapsed']\n    # Pass the collapsed state to the section rendering functions\n    # ... existing code ...\n\ndef collapsible_section(name, inline_details=\"\", details=\"\", n_items=None, enabled=True, collapsed=False):\n    # ... existing code ...\n    # Use the collapsed parameter to set the initial state\n    collapsed_attr = \"checked\" if collapsed else \"\"\n    # ... existing code ...\n\n# In xarray/static/css/style.css\n/* Update styles for the collapsed state if necessary */\n.xr-section-details {\n    display: none; /* Hide details when collapsed */\n}\n.xr-section-summary-in:checked ~ .xr-section-details {\n    display: block; /* Show details when checkbox is checked */\n}\n```\n\n**Potential Pitfalls:**\n- Ensuring backward compatibility with existing behavior.\n- Verifying that the new option works correctly in different notebook environments (e.g., JupyterLab, classic Jupyter Notebook, etc.).\n- Testing the feature with various themes (light/dark) to ensure that the CSS is applied correctly.\n\n**Files to Change:**\n- `xarray/core/options.py`: Add the new option for controlling the collapsed state.\n- `xarray/core/formatting_html.py`: Update the HTML representation functions to use the new option.\n- `xarray/static/css/style.css`: Update the CSS to style the collapsed/expanded states.\n\n**Further Research Material:**\n- Look into the implementation of `xarray.set_options` to understand how to add a new option.\n- Review the HTML and CSS specifications for details on how to implement collapsible sections.\n- Familiarize yourself with the existing HTML representation code in `xarray/core/formatting_html.py` to understand how it currently works.\n\n### Code snippets to check\n\n-  \u2192 [xarray](https://github.com/testbed/pydata__xarray__0.12/tree//xarray) \u2192 [core](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/core)- [Lines 254 - 342](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting_html.py#L254-L342)\n\n This snippet contains the HTML representation logic for xarray objects, which is relevant to the issue of controlling the collapsed state of the HTML repr. \n\n\n   - [Lines 158 - 342](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting_html.py#L158-L342)\n\n This snippet includes functions related to the collapsible sections in the HTML repr, which will likely need to be updated to add the new option for controlling the collapsed state. \n\n\n   - [Lines 75 - 296](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting_html.py#L75-L296)\n\n This snippet is part of the HTML formatting logic and includes the generation of the HTML for variable summaries, which may need to be updated to respect the new collapsing option.\n-  \u2192 [xarray](https://github.com/testbed/pydata__xarray__0.12/tree//xarray) \u2192 [static](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/static) \u2192 [css](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/static/css)- [Lines 1 - 340](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/static/css/style.css#L1-L340)\n\n This snippet contains the CSS styles for the HTML repr of xarray objects, which may need to be modified to support the new collapsing functionality.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0005495,
        "snippet_processor": 0.06112,
        "issue_star_creation": 0.025959999999999997,
        "issue_star_solver": 0.08023,
        "bouncer": 0.027180000000000003
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711759330.722479,
        "relevant_snippets": [
            {
                "code": "name: \ud83d\udca1 Feature Request\ndescription: Suggest an idea for xarray\nlabels: [enhancement]\nbody:\n  - type: textarea\n    id: description\n    attributes:\n      label: Is your feature request related to a problem?\n      description: |\n        Please do a quick search of existing issues to make sure that this has not been asked before.\n        Please provide a clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\n    validations:\n      required: true\n  - type: textarea\n    id: solution\n    attributes:\n      label: Describe the solution you'd like\n      description: |\n        A clear and concise description of what you want to happen.\n  - type: textarea\n    id: alternatives\n    attributes:\n      label: Describe alternatives you've considered\n      description: |\n        A clear and concise description of any alternative solutions or features you've considered.\n    validations:\n      required: false\n  - type: textarea\n    id: additional-context\n    attributes:\n      label: Additional context\n      description: |\n        Add any other context about the feature request here.\n    validations:\n      required: false",
                "filename": ".github/ISSUE_TEMPLATE/newfeature.yml",
                "start_index": 0,
                "end_index": 1154,
                "start_line": 1,
                "end_line": 35,
                "max_line": 35,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 1.0
            },
            {
                "code": "/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\nhtml[theme=dark],\nbody[data-theme=dark],\nbody.vscode-dark {\n  --xr-font-color0: rgba(255, 255, 255, 1);\n  --xr-font-color2: rgba(255, 255, 255, 0.54);\n  --xr-font-color3: rgba(255, 255, 255, 0.38);\n  --xr-border-color: #1F1F1F;\n  --xr-disabled-color: #515151;\n  --xr-background-color: #111111;\n  --xr-background-color-row-even: #111111;\n  --xr-background-color-row-odd: #313131;\n}\n\n.xr-wrap {\n  display: block !important;\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-text-repr-fallback {\n  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n  display: none;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.x",
                "filename": "xarray/static/css/style.css",
                "start_index": 0,
                "end_index": 2932,
                "start_line": 1,
                "end_line": 340,
                "max_line": 348,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "index_section = partial(\n    _mapping_section,\n    name=\"Indexes\",\n    details_func=summarize_indexes,\n    max_items_collapse=0,\n    expand_option_name=\"display_expand_indexes\",\n)\n\nattr_section = partial(\n    _mapping_section,\n    name=\"Attributes\",\n    details_func=summarize_attrs,\n    max_items_collapse=10,\n    expand_option_name=\"display_expand_attrs\",\n)\n\n\ndef _get_indexes_dict(indexes):\n    return {\n        tuple(index_vars.keys()): idx for idx, index_vars in indexes.group_by_index()\n    }\n\n\ndef _obj_repr(obj, header_components, sections):\n    \"\"\"Return HTML repr of an xarray object.\n\n    If CSS is not injected (untrusted notebook), fallback to the plain text repr.\n\n    \"\"\"\n    header = f\"<div class='xr-header'>{''.join(h for h in header_components)}</div>\"\n    sections = \"\".join(f\"<li class='xr-section-item'>{s}</li>\" for s in sections)\n\n    icons_svg, css_style = _load_static_files()\n    return (\n        \"<div>\"\n        f\"{icons_svg}<style>{css_style}</style>\"\n        f\"<pre class='xr-text-repr-fallback'>{escape(repr(obj))}</pre>\"\n        \"<div class='xr-wrap' style='display:none'>\"\n        f\"{header}\"\n        f\"<ul class='xr-sections'>{sections}</ul>\"\n        \"</div>\"\n        \"</div>\"\n    )\n\n\ndef array_repr(arr):\n    dims = OrderedDict((k, v) for k, v in zip(arr.dims, arr.shape))\n    if hasattr(arr, \"xindexes\"):\n        indexed_dims = arr.xindexes.dims\n    else:\n        indexed_dims = {}\n\n    obj_type = f\"xarray.{type(arr).__name__}\"\n    arr_name = f\"'{arr.name}'\" if getattr(arr, \"name\", None) else \"\"\n\n    header_components = [\n        f\"<div class='xr-obj-type'>{obj_type}</div>\",\n        f\"<div class='xr-array-name'>{arr_name}</div>\",\n        format_dims(dims, indexed_dims),\n    ]\n\n    sections = [array_section(arr)]\n\n    if hasattr(arr, \"coords\"):\n        sections.append(coord_section(arr.coords))\n\n    if hasattr(arr, \"xindexes\"):\n        indexes = _get_indexes_dict(arr.xindexes)\n        sections.append(index_section(indexes))\n\n    sections.append(attr_section(arr.attrs))\n\n    return _obj_repr(arr, header_components, sections)\n\n\ndef dataset_repr(ds):\n    obj_type = f\"xarray.{type(ds).__name__}\"\n\n    header_components = [f\"<div class='xr-obj-type'>{escape(obj_type)}</div>\"]\n\n    sections = [\n        dim_section(ds),\n        coord_section(ds.coords),\n        datavar_section(ds.data_vars),\n        index_section(_get_indexes_dict(ds.xindexes)),\n        attr_section(ds.attrs),\n    ]\n\n    return _obj_repr(ds, header_components, sections)",
                "filename": "xarray/core/formatting_html.py",
                "start_index": 7729,
                "end_index": 10213,
                "start_line": 254,
                "end_line": 342,
                "max_line": 342,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 0.8
            },
            {
                "code": "import numpy as np\nimport pandas as pd\n\nimport xarray as xr\n\n\nclass Repr:\n    def setup(self):\n        a = np.arange(0, 100)\n        data_vars = dict()\n        for i in a:\n            data_vars[f\"long_variable_name_{i}\"] = xr.DataArray(\n                name=f\"long_variable_name_{i}\",\n                data=np.arange(0, 20),\n                dims=[f\"long_coord_name_{i}_x\"],\n                coords={f\"long_coord_name_{i}_x\": np.arange(0, 20) * 2},\n            )\n        self.ds = xr.Dataset(data_vars)\n        self.ds.attrs = {f\"attr_{k}\": 2 for k in a}\n\n    def time_repr(self):\n        repr(self.ds)\n\n    def time_repr_html(self):\n        self.ds._repr_html_()\n\n\nclass ReprMultiIndex:\n    def setup(self):\n        index = pd.MultiIndex.from_product(\n            [range(1000), range(1000)], names=(\"level_0\", \"level_1\")\n        )\n        series = pd.Series(range(1000 * 1000), index=index)\n        self.da = xr.DataArray(series)\n\n    def time_repr(self):\n        repr(self.da)\n\n    def time_repr_html(self):\n        self.da._repr_html_()",
                "filename": "asv_bench/benchmarks/repr.py",
                "start_index": 0,
                "end_index": 1036,
                "start_line": 1,
                "end_line": 40,
                "max_line": 40,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "cursive_repr(\"<recursive array>\")\ndef array_repr(arr):\n    from xarray.core.variable import Variable\n\n    max_rows = OPTIONS[\"display_max_rows\"]\n\n    # used for DataArray, Variable and IndexVariable\n    if hasattr(arr, \"name\") and arr.name is not None:\n        name_str = f\"{arr.name!r} \"\n    else:\n        name_str = \"\"\n\n    if (\n        isinstance(arr, Variable)\n        or _get_boolean_with_default(\"display_expand_data\", default=True)\n        or isinstance(arr.variable._data, MemoryCachedArray)\n    ):\n        data_repr = short_data_repr(arr)\n    else:\n        data_repr = inline_variable_array_repr(arr.variable, OPTIONS[\"display_width\"])\n\n    start = f\"<xarray.{type(arr).__name__} {name_str}\"\n    dims = dim_summary_limited(arr, col_width=len(start) + 1, max_rows=max_rows)\n    summary = [\n        f\"{start}({dims})>\",\n        data_repr,\n    ]\n\n    if hasattr(arr, \"coords\"):\n        if arr.coords:\n            col_width = _calculate_col_width(arr.coords)\n            summary.append(\n                coords_repr(arr.coords, col_width=col_width, max_rows=max_rows)\n            )\n\n        unindexed_dims_str = unindexed_dims_repr(\n            arr.dims, arr.coords, max_rows=max_rows\n        )\n        if unindexed_dims_str:\n            summary.append(unindexed_dims_str)\n\n        display_default_indexes = _get_boolean_with_default(\n            \"display_default_indexes\", False\n        )\n\n        xindexes = filter_nondefault_indexes(\n            _get_indexes_dict(arr.xindexes), not display_default_indexes\n        )\n\n        if xindexes:\n            summary.append(indexes_repr(xindexes, max_rows=max_rows))\n\n    if arr.attrs:\n        summary.append(attrs_repr(arr.attrs, max_rows=max_rows))\n\n    return \"\\n\".join(summary)\n\n\n@recursive_repr(\"<recursive Dataset>\")\ndef dataset_repr(ds):\n    summary = [f\"<xarray.{type(ds).__name__}>\"]\n\n    col_width = _calculate_col_width(ds.variables)\n    max_rows = OPTIONS[\"display_max_rows\"]\n\n    dims_start = pretty_print(\"Dimensions:\", col_width)\n    dims_values = dim_summary_limited(ds, col_width=col_width + 1, max_rows=max_rows)\n    summary.append(f\"{dims_start}({dims_values})\")\n\n    if ds.coords:\n        summary.append(coords_repr(ds.coords, col_width=col_width, max_rows=max_rows))\n\n    unindexed_dims_str = unindexed_dims_repr(ds.dims, ds.coords, max_rows=max_rows)\n    if unindexed_dims_str:\n        summary.append(unindexed_dims_str)\n\n    summary.append(data_vars_repr(ds.data_vars, col_width=col_width, max_rows=max_rows))\n\n    display_default_indexes = _get_boolean_with_default(\n        \"display_default_indexes\", False\n    )\n    xindexes = filter_nondefault_indexes(\n        _get_indexes_dict(ds.xindexes), not display_default_indexes\n    )\n    if xindexes:\n        summary.append(indexes_repr(xindexes, max_rows=max_rows))\n\n    if ds.attrs:\n        summary.append(attrs_repr(ds.attrs, max_rows=max_rows))\n\n    return \"\\n\".join(summary)\n\n\ndef",
                "filename": "xarray/core/formatting.py",
                "start_index": 20303,
                "end_index": 23207,
                "start_line": 626,
                "end_line": 877,
                "max_line": 893,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 0.8
            },
            {
                "code": "def inline_dask_repr(array):\n    \"\"\"Similar to dask.array.DataArray.__repr__, but without\n    redundant information that's already printed by the repr\n    function of the xarray wrapper.\n    \"\"\"\n    assert isinstance(array, array_type(\"dask\")), array\n\n    chunksize = tuple(c[0] for c in array.chunks)\n\n    if hasattr(array, \"_meta\"):\n        meta = array._meta\n        identifier = (type(meta).__module__, type(meta).__name__)\n        meta_repr = _KNOWN_TYPE_REPRS.get(identifier, \".\".join(identifier))\n        meta_string = f\", meta={meta_repr}\"\n    else:\n        meta_string = \"\"\n\n    return f\"dask.array<chunksize={chunksize}{meta_string}>\"\n\n\ndef inline_sparse_repr(array):\n    \"\"\"Similar to sparse.COO.__repr__, but without the redundant shape/dtype.\"\"\"\n    sparse_array_type = array_type(\"sparse\")\n    assert isinstance(array, sparse_array_type), array\n    return \"<{}: nnz={:d}, fill_value={!s}>\".format(\n        type(array).__name__, array.nnz, array.fill_value\n    )\n\n\ndef inline_variable_array_repr(var, max_width):\n    \"\"\"Build a one-line summary of a variable's data.\"\"\"\n    if hasattr(var._data, \"_repr_inline_\"):\n        return var._data._repr_inline_(max_width)\n    if var._in_memory:\n        return format_array_flat(var, max_width)\n    dask_array_type = array_type(\"dask\")\n    if isinstance(var._data, dask_array_type):\n        return inline_dask_repr(var.data)\n    sparse_array_type = array_type(\"sparse\")\n    if isinstance(var._data, sparse_array_type):\n        return inline_sparse_repr(var.data)\n    if hasattr(var._data, \"__array_function__\"):\n        return maybe_truncate(repr(var._data).replace(\"\\n\", \" \"), max_width)\n    # internal xarray array type\n    return \"...\"\n\n\ndef summarize_variable(\n    name: Hashable,\n    var,\n    col_width: int,\n    max_width: int | None = None,\n    is_index: bool = False,\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    variable = getattr(var, \"variable\", var)\n\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n\n    marker = \"*\" if is_index else \" \"\n    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n\n    if variable.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, variable.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{variable.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(variable, values_width)\n\n    return front_str + values_str",
                "filename": "xarray/core/formatting.py",
                "start_index": 8342,
                "end_index": 11003,
                "start_line": 240,
                "end_line": 316,
                "max_line": 893,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 0.7
            },
            {
                "code": "def summarize_variable(name, var, is_index=False, dtype=None):\n    variable = var.variable if hasattr(var, \"variable\") else var\n\n    cssclass_idx = \" class='xr-has-index'\" if is_index else \"\"\n    dims_str = f\"({', '.join(escape(dim) for dim in var.dims)})\"\n    name = escape(str(name))\n    dtype = dtype or escape(str(var.dtype))\n\n    # \"unique\" ids required to expand/collapse subsections\n    attrs_id = \"attrs-\" + str(uuid.uuid4())\n    data_id = \"data-\" + str(uuid.uuid4())\n    disabled = \"\" if len(var.attrs) else \"disabled\"\n\n    preview = escape(inline_variable_array_repr(variable, 35))\n    attrs_ul = summarize_attrs(var.attrs)\n    data_repr = short_data_repr_html(variable)\n\n    attrs_icon = _icon(\"icon-file-text2\")\n    data_icon = _icon(\"icon-database\")\n\n    return (\n        f\"<div class='xr-var-name'><span{cssclass_idx}>{name}</span></div>\"\n        f\"<div class='xr-var-dims'>{dims_str}</div>\"\n        f\"<div class='xr-var-dtype'>{dtype}</div>\"\n        f\"<div class='xr-var-preview xr-preview'>{preview}</div>\"\n        f\"<input id='{attrs_id}' class='xr-var-attrs-in' \"\n        f\"type='checkbox' {disabled}>\"\n        f\"<label for='{attrs_id}' title='Show/Hide attributes'>\"\n        f\"{attrs_icon}</label>\"\n        f\"<input id='{data_id}' class='xr-var-data-in' type='checkbox'>\"\n        f\"<label for='{data_id}' title='Show/Hide data repr'>\"\n        f\"{data_icon}</label>\"\n        f\"<div class='xr-var-attrs'>{attrs_ul}</div>\"\n        f\"<div class='xr-var-data'>{data_repr}</div>\"\n    )\n\n\ndef summarize_coords(variables):\n    li_items = []\n    for k, v in variables.items():\n        li_content = summarize_variable(k, v, is_index=k in variables.xindexes)\n        li_items.append(f\"<li class='xr-var-item'>{li_content}</li>\")\n\n    vars_li = \"\".join(li_items)\n\n    return f\"<ul class='xr-var-list'>{vars_li}</ul>\"\n\n\ndef summarize_vars(variables):\n    vars_li = \"\".join(\n        f\"<li class='xr-var-item'>{summarize_variable(k, v)}</li>\"\n        for k, v in variables.items()\n    )\n\n    return f\"<ul class='xr-var-list'>{vars_li}</ul>\"\n\n\ndef short_index_repr_html(index):\n    if hasattr(index, \"_repr_html_\"):\n        return index._repr_html_()\n\n    return f\"<pre>{escape(repr(index))}</pre>\"\n\n\ndef summarize_index(coord_names, index):\n    name = \"<br>\".join([escape(str(n)) for n in coord_names])\n\n    index_id = f\"index-{uuid.uuid4()}\"\n    preview = escape(inline_index_repr(index))\n    details = short_index_repr_html(index)\n\n    data_icon = _icon(\"icon-database\")\n\n    return (\n        f\"<div class='xr-index-name'><div>{name}</div></div>\"\n        f\"<div class='xr-index-preview'>{preview}</div>\"\n        f\"<div></div>\"\n        f\"<input id='{index_id}' class='xr-index-data-in' type='checkbox'/>\"\n        f\"<label for='{index_id}' title='Show/Hide index repr'>{data_icon}</label>\"\n        f\"<div class='xr-index-data'>{details}</div>\"\n    )",
                "filename": "xarray/core/formatting_html.py",
                "start_index": 1914,
                "end_index": 4767,
                "start_line": 75,
                "end_line": 296,
                "max_line": 342,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 0.8
            },
            {
                "code": "def summarize_attr(key, value, col_width=None):\n    \"\"\"Summary for __repr__ - use ``X.attrs[key]`` for full value.\"\"\"\n    # Indent key and add ':', then right-pad if col_width is not None\n    k_str = f\"    {key}:\"\n    if col_width is not None:\n        k_str = pretty_print(k_str, col_width)\n    # Replace tabs and newlines, so we print on one line in known width\n    v_str = str(value).replace(\"\\t\", \"\\\\t\").replace(\"\\n\", \"\\\\n\")\n    # Finally, truncate to the desired display width\n    return maybe_truncate(f\"{k_str} {v_str}\", OPTIONS[\"display_width\"])\n\n\nEMPTY_REPR = \"    *empty*\"\n\n\ndef _calculate_col_width(col_items):\n    max_name_length = max(len(str(s)) for s in col_items) if col_items else 0\n    col_width = max(max_name_length, 7) + 6\n    return col_width\n\n\ndef _mapping_repr(\n    mapping,\n    title,\n    summarizer,\n    expand_option_name,\n    col_width=None,\n    max_rows=None,\n    indexes=None,\n):\n    if col_width is None:\n        col_width = _calculate_col_width(mapping)\n\n    summarizer_kwargs = defaultdict(dict)\n    if indexes is not None:\n        summarizer_kwargs = {k: {\"is_index\": k in indexes} for k in mapping}\n\n    summary = [f\"{title}:\"]\n    if mapping:\n        len_mapping = len(mapping)\n        if not _get_boolean_with_default(expand_option_name, default=True):\n            summary = [f\"{summary[0]} ({len_mapping})\"]\n        elif max_rows is not None and len_mapping > max_rows:\n            summary = [f\"{summary[0]} ({max_rows}/{len_mapping})\"]\n            first_rows = calc_max_rows_first(max_rows)\n            keys = list(mapping.keys())\n            summary += [\n                summarizer(k, mapping[k], col_width, **summarizer_kwargs[k])\n                for k in keys[:first_rows]\n            ]\n            if max_rows > 1:\n                last_rows = calc_max_rows_last(max_rows)\n                summary += [pretty_print(\"    ...\", col_width) + \" ...\"]\n                summary += [\n                    summarizer(k, mapping[k], col_width, **summarizer_kwargs[k])\n                    for k in keys[-last_rows:]\n                ]\n        else:\n            summary += [\n                summarizer(k, v, col_width, **summarizer_kwargs[k])\n                for k, v in mapping.items()\n            ]\n    else:\n        summary += [EMPTY_REPR]\n    return \"\\n\".join(summary)\n\n\ndata_vars_repr = functools.partial(\n    _mapping_repr,\n    title=\"Data variables\",\n    summarizer=summarize_variable,\n    expand_option_name=\"display_expand_data_vars\",\n)\n\nattrs_repr = functools.partial(\n    _mapping_repr,\n    title=\"Attributes\",\n    summarizer=summarize_attr,\n    expand_option_name=\"display_expand_attrs\",\n)",
                "filename": "xarray/core/formatting.py",
                "start_index": 11006,
                "end_index": 13633,
                "start_line": 319,
                "end_line": 893,
                "max_line": 893,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 0.7
            },
            {
                "code": "\"\"\"String formatting routines for __repr__.\n\"\"\"\nfrom __future__ import annotations\n\nimport contextlib\nimport functools\nimport math\nfrom collections import defaultdict\nfrom collections.abc import Collection, Hashable\nfrom datetime import datetime, timedelta\nfrom itertools import chain, zip_longest\nfrom reprlib import recursive_repr\n\nimport numpy as np\nimport pandas as pd\nfrom pandas.errors import OutOfBoundsDatetime\n\nfrom xarray.core.duck_array_ops import array_equiv\nfrom xarray.core.indexing import ExplicitlyIndexed, MemoryCachedArray\nfrom xarray.core.options import OPTIONS, _get_boolean_with_default\nfrom xarray.core.pycompat import array_type\nfrom xarray.core.utils import is_duck_array\n\n\ndef pretty_print(x, numchars: int):\n    \"\"\"Given an object `x`, call `str(x)` and format the returned string so\n    that it is numchars long, padding with trailing spaces or truncating with\n    ellipses as necessary\n    \"\"\"\n    s = maybe_truncate(x, numchars)\n    return s + \" \" * max(numchars - len(s), 0)\n\n\ndef maybe_truncate(obj, maxlen=500):\n    s = str(obj)\n    if len(s) > maxlen:\n        s = s[: (maxlen - 3)] + \"...\"\n    return s\n\n\ndef wrap_indent(text, start=\"\", length=None):\n    if length is None:\n        length = len(start)\n    indent = \"\\n\" + \" \" * length\n    return start + indent.join(x for x in text.splitlines())\n\n\ndef _get_indexer_at_least_n_items(shape, n_desired, from_end):\n    assert 0 < n_desired <= math.prod(shape)\n    cum_items = np.cumprod(shape[::-1])\n    n_steps = np.argmax(cum_items >= n_desired)\n    stop = math.ceil(float(n_desired) / np.r_[1, cum_items][n_steps])\n    indexer = (\n        ((-1 if from_end else 0),) * (len(shape) - 1 - n_steps)\n        + ((slice(-stop, None) if from_end else slice(stop)),)\n        + (slice(None),) * n_steps\n    )\n    return indexer\n\n\ndef first_n_items(array, n_desired):\n    \"\"\"Returns the first n_desired items of an array\"\"\"\n    # Unfortunately, we can't just do array.flat[:n_desired] here because it\n    # might not be a numpy.ndarray. Moreover, access to elements of the array\n    # could be very expensive (e.g. if it's only available over DAP), so go out\n    # of our way to get them in a single call to __getitem__ using only slices.\n    if n_desired < 1:\n        raise ValueError(\"must request at least one item\")\n\n    if array.size == 0:\n        # work around for https://github.com/numpy/numpy/issues/5195\n        return []\n\n    if n_desired < array.size:\n        indexer = _get_indexer_at_least_n_items(array.shape, n_desired, from_end=False)\n        array = array[indexer]\n    return np.asarray(array).flat[:n_desired]",
                "filename": "xarray/core/formatting.py",
                "start_index": 0,
                "end_index": 2599,
                "start_line": 1,
                "end_line": 77,
                "max_line": 893,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 0.2
            },
            {
                "code": "def summarize_indexes(indexes):\n    indexes_li = \"\".join(\n        f\"<li class='xr-var-item'>{summarize_index(v, i)}</li>\"\n        for v, i in indexes.items()\n    )\n    return f\"<ul class='xr-var-list'>{indexes_li}</ul>\"\n\n\ndef collapsible_section(\n    name, inline_details=\"\", details=\"\", n_items=None, enabled=True, collapsed=False\n):\n    # \"unique\" id to expand/collapse the section\n    data_id = \"section-\" + str(uuid.uuid4())\n\n    has_items = n_items is not None and n_items\n    n_items_span = \"\" if n_items is None else f\" <span>({n_items})</span>\"\n    enabled = \"\" if enabled and has_items else \"disabled\"\n    collapsed = \"\" if collapsed or not has_items else \"checked\"\n    tip = \" title='Expand/collapse section'\" if enabled else \"\"\n\n    return (\n        f\"<input id='{data_id}' class='xr-section-summary-in' \"\n        f\"type='checkbox' {enabled} {collapsed}>\"\n        f\"<label for='{data_id}' class='xr-section-summary' {tip}>\"\n        f\"{name}:{n_items_span}</label>\"\n        f\"<div class='xr-section-inline-details'>{inline_details}</div>\"\n        f\"<div class='xr-section-details'>{details}</div>\"\n    )\n\n\ndef _mapping_section(\n    mapping, name, details_func, max_items_collapse, expand_option_name, enabled=True\n):\n    n_items = len(mapping)\n    expanded = _get_boolean_with_default(\n        expand_option_name, n_items < max_items_collapse\n    )\n    collapsed = not expanded\n\n    return collapsible_section(\n        name,\n        details=details_func(mapping),\n        n_items=n_items,\n        enabled=enabled,\n        collapsed=collapsed,\n    )\n\n\ndef dim_section(obj):\n    dim_list = format_dims(obj.dims, obj.xindexes.dims)\n\n    return collapsible_section(\n        \"Dimensions\", inline_details=dim_list, enabled=False, collapsed=True\n    )\n\n\ndef array_section(obj):\n    # \"unique\" id to expand/collapse the section\n    data_id = \"section-\" + str(uuid.uuid4())\n    collapsed = (\n        \"checked\"\n        if _get_boolean_with_default(\"display_expand_data\", default=True)\n        else \"\"\n    )\n    variable = getattr(obj, \"variable\", obj)\n    preview = escape(inline_variable_array_repr(variable, max_width=70))\n    data_repr = short_data_repr_html(obj)\n    data_icon = _icon(\"icon-database\")\n\n    return (\n        \"<div class='xr-array-wrap'>\"\n        f\"<input id='{data_id}' class='xr-array-in' type='checkbox' {collapsed}>\"\n        f\"<label for='{data_id}' title='Show/hide data repr'>{data_icon}</label>\"\n        f\"<div class='xr-array-preview xr-preview'><span>{preview}</span></div>\"\n        f\"<div class='xr-array-data'>{data_repr}</div>\"\n        \"</div>\"\n    )\n\n\ncoord_section = partial(\n    _mapping_section,\n    name=\"Coordinates\",\n    details_func=summarize_coords,\n    max_items_collapse=25,\n    expand_option_name=\"display_expand_coords\",\n)\n\n\ndatavar_section = partial(\n    _mapping_section,\n    name=\"Data variables\",\n    details_func=summarize_vars,\n    max_items_collapse=15,\n    expand_option_name=\"display_expand_data_vars\",\n)",
                "filename": "xarray/core/formatting_html.py",
                "start_index": 4770,
                "end_index": 7727,
                "start_line": 158,
                "end_line": 342,
                "max_line": 342,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": "",
                "context_relevance": 1.0
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "xarray/core/formatting_html.py": [
                {
                    "chunk": {
                        "code": "index_section = partial(\n    _mapping_section,\n    name=\"Indexes\",\n    details_func=summarize_indexes,\n    max_items_collapse=0,\n    expand_option_name=\"display_expand_indexes\",\n)\n\nattr_section = partial(\n    _mapping_section,\n    name=\"Attributes\",\n    details_func=summarize_attrs,\n    max_items_collapse=10,\n    expand_option_name=\"display_expand_attrs\",\n)\n\n\ndef _get_indexes_dict(indexes):\n    return {\n        tuple(index_vars.keys()): idx for idx, index_vars in indexes.group_by_index()\n    }\n\n\ndef _obj_repr(obj, header_components, sections):\n    \"\"\"Return HTML repr of an xarray object.\n\n    If CSS is not injected (untrusted notebook), fallback to the plain text repr.\n\n    \"\"\"\n    header = f\"<div class='xr-header'>{''.join(h for h in header_components)}</div>\"\n    sections = \"\".join(f\"<li class='xr-section-item'>{s}</li>\" for s in sections)\n\n    icons_svg, css_style = _load_static_files()\n    return (\n        \"<div>\"\n        f\"{icons_svg}<style>{css_style}</style>\"\n        f\"<pre class='xr-text-repr-fallback'>{escape(repr(obj))}</pre>\"\n        \"<div class='xr-wrap' style='display:none'>\"\n        f\"{header}\"\n        f\"<ul class='xr-sections'>{sections}</ul>\"\n        \"</div>\"\n        \"</div>\"\n    )\n\n\ndef array_repr(arr):\n    dims = OrderedDict((k, v) for k, v in zip(arr.dims, arr.shape))\n    if hasattr(arr, \"xindexes\"):\n        indexed_dims = arr.xindexes.dims\n    else:\n        indexed_dims = {}\n\n    obj_type = f\"xarray.{type(arr).__name__}\"\n    arr_name = f\"'{arr.name}'\" if getattr(arr, \"name\", None) else \"\"\n\n    header_components = [\n        f\"<div class='xr-obj-type'>{obj_type}</div>\",\n        f\"<div class='xr-array-name'>{arr_name}</div>\",\n        format_dims(dims, indexed_dims),\n    ]\n\n    sections = [array_section(arr)]\n\n    if hasattr(arr, \"coords\"):\n        sections.append(coord_section(arr.coords))\n\n    if hasattr(arr, \"xindexes\"):\n        indexes = _get_indexes_dict(arr.xindexes)\n        sections.append(index_section(indexes))\n\n    sections.append(attr_section(arr.attrs))\n\n    return _obj_repr(arr, header_components, sections)\n\n\ndef dataset_repr(ds):\n    obj_type = f\"xarray.{type(ds).__name__}\"\n\n    header_components = [f\"<div class='xr-obj-type'>{escape(obj_type)}</div>\"]\n\n    sections = [\n        dim_section(ds),\n        coord_section(ds.coords),\n        datavar_section(ds.data_vars),\n        index_section(_get_indexes_dict(ds.xindexes)),\n        attr_section(ds.attrs),\n    ]\n\n    return _obj_repr(ds, header_components, sections)",
                        "filename": "xarray/core/formatting_html.py",
                        "start_index": 7729,
                        "end_index": 10213,
                        "start_line": 254,
                        "end_line": 342,
                        "max_line": 342,
                        "git_instance": "github",
                        "repo_name": "testbed/pydata__xarray__0.12",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the HTML representation logic for xarray objects, which is relevant to the issue of controlling the collapsed state of the HTML repr."
                },
                {
                    "chunk": {
                        "code": "def summarize_indexes(indexes):\n    indexes_li = \"\".join(\n        f\"<li class='xr-var-item'>{summarize_index(v, i)}</li>\"\n        for v, i in indexes.items()\n    )\n    return f\"<ul class='xr-var-list'>{indexes_li}</ul>\"\n\n\ndef collapsible_section(\n    name, inline_details=\"\", details=\"\", n_items=None, enabled=True, collapsed=False\n):\n    # \"unique\" id to expand/collapse the section\n    data_id = \"section-\" + str(uuid.uuid4())\n\n    has_items = n_items is not None and n_items\n    n_items_span = \"\" if n_items is None else f\" <span>({n_items})</span>\"\n    enabled = \"\" if enabled and has_items else \"disabled\"\n    collapsed = \"\" if collapsed or not has_items else \"checked\"\n    tip = \" title='Expand/collapse section'\" if enabled else \"\"\n\n    return (\n        f\"<input id='{data_id}' class='xr-section-summary-in' \"\n        f\"type='checkbox' {enabled} {collapsed}>\"\n        f\"<label for='{data_id}' class='xr-section-summary' {tip}>\"\n        f\"{name}:{n_items_span}</label>\"\n        f\"<div class='xr-section-inline-details'>{inline_details}</div>\"\n        f\"<div class='xr-section-details'>{details}</div>\"\n    )\n\n\ndef _mapping_section(\n    mapping, name, details_func, max_items_collapse, expand_option_name, enabled=True\n):\n    n_items = len(mapping)\n    expanded = _get_boolean_with_default(\n        expand_option_name, n_items < max_items_collapse\n    )\n    collapsed = not expanded\n\n    return collapsible_section(\n        name,\n        details=details_func(mapping),\n        n_items=n_items,\n        enabled=enabled,\n        collapsed=collapsed,\n    )\n\n\ndef dim_section(obj):\n    dim_list = format_dims(obj.dims, obj.xindexes.dims)\n\n    return collapsible_section(\n        \"Dimensions\", inline_details=dim_list, enabled=False, collapsed=True\n    )\n\n\ndef array_section(obj):\n    # \"unique\" id to expand/collapse the section\n    data_id = \"section-\" + str(uuid.uuid4())\n    collapsed = (\n        \"checked\"\n        if _get_boolean_with_default(\"display_expand_data\", default=True)\n        else \"\"\n    )\n    variable = getattr(obj, \"variable\", obj)\n    preview = escape(inline_variable_array_repr(variable, max_width=70))\n    data_repr = short_data_repr_html(obj)\n    data_icon = _icon(\"icon-database\")\n\n    return (\n        \"<div class='xr-array-wrap'>\"\n        f\"<input id='{data_id}' class='xr-array-in' type='checkbox' {collapsed}>\"\n        f\"<label for='{data_id}' title='Show/hide data repr'>{data_icon}</label>\"\n        f\"<div class='xr-array-preview xr-preview'><span>{preview}</span></div>\"\n        f\"<div class='xr-array-data'>{data_repr}</div>\"\n        \"</div>\"\n    )\n\n\ncoord_section = partial(\n    _mapping_section,\n    name=\"Coordinates\",\n    details_func=summarize_coords,\n    max_items_collapse=25,\n    expand_option_name=\"display_expand_coords\",\n)\n\n\ndatavar_section = partial(\n    _mapping_section,\n    name=\"Data variables\",\n    details_func=summarize_vars,\n    max_items_collapse=15,\n    expand_option_name=\"display_expand_data_vars\",\n)",
                        "filename": "xarray/core/formatting_html.py",
                        "start_index": 4770,
                        "end_index": 7727,
                        "start_line": 158,
                        "end_line": 342,
                        "max_line": 342,
                        "git_instance": "github",
                        "repo_name": "testbed/pydata__xarray__0.12",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet includes functions related to the collapsible sections in the HTML repr, which will likely need to be updated to add the new option for controlling the collapsed state."
                },
                {
                    "chunk": {
                        "code": "def summarize_variable(name, var, is_index=False, dtype=None):\n    variable = var.variable if hasattr(var, \"variable\") else var\n\n    cssclass_idx = \" class='xr-has-index'\" if is_index else \"\"\n    dims_str = f\"({', '.join(escape(dim) for dim in var.dims)})\"\n    name = escape(str(name))\n    dtype = dtype or escape(str(var.dtype))\n\n    # \"unique\" ids required to expand/collapse subsections\n    attrs_id = \"attrs-\" + str(uuid.uuid4())\n    data_id = \"data-\" + str(uuid.uuid4())\n    disabled = \"\" if len(var.attrs) else \"disabled\"\n\n    preview = escape(inline_variable_array_repr(variable, 35))\n    attrs_ul = summarize_attrs(var.attrs)\n    data_repr = short_data_repr_html(variable)\n\n    attrs_icon = _icon(\"icon-file-text2\")\n    data_icon = _icon(\"icon-database\")\n\n    return (\n        f\"<div class='xr-var-name'><span{cssclass_idx}>{name}</span></div>\"\n        f\"<div class='xr-var-dims'>{dims_str}</div>\"\n        f\"<div class='xr-var-dtype'>{dtype}</div>\"\n        f\"<div class='xr-var-preview xr-preview'>{preview}</div>\"\n        f\"<input id='{attrs_id}' class='xr-var-attrs-in' \"\n        f\"type='checkbox' {disabled}>\"\n        f\"<label for='{attrs_id}' title='Show/Hide attributes'>\"\n        f\"{attrs_icon}</label>\"\n        f\"<input id='{data_id}' class='xr-var-data-in' type='checkbox'>\"\n        f\"<label for='{data_id}' title='Show/Hide data repr'>\"\n        f\"{data_icon}</label>\"\n        f\"<div class='xr-var-attrs'>{attrs_ul}</div>\"\n        f\"<div class='xr-var-data'>{data_repr}</div>\"\n    )\n\n\ndef summarize_coords(variables):\n    li_items = []\n    for k, v in variables.items():\n        li_content = summarize_variable(k, v, is_index=k in variables.xindexes)\n        li_items.append(f\"<li class='xr-var-item'>{li_content}</li>\")\n\n    vars_li = \"\".join(li_items)\n\n    return f\"<ul class='xr-var-list'>{vars_li}</ul>\"\n\n\ndef summarize_vars(variables):\n    vars_li = \"\".join(\n        f\"<li class='xr-var-item'>{summarize_variable(k, v)}</li>\"\n        for k, v in variables.items()\n    )\n\n    return f\"<ul class='xr-var-list'>{vars_li}</ul>\"\n\n\ndef short_index_repr_html(index):\n    if hasattr(index, \"_repr_html_\"):\n        return index._repr_html_()\n\n    return f\"<pre>{escape(repr(index))}</pre>\"\n\n\ndef summarize_index(coord_names, index):\n    name = \"<br>\".join([escape(str(n)) for n in coord_names])\n\n    index_id = f\"index-{uuid.uuid4()}\"\n    preview = escape(inline_index_repr(index))\n    details = short_index_repr_html(index)\n\n    data_icon = _icon(\"icon-database\")\n\n    return (\n        f\"<div class='xr-index-name'><div>{name}</div></div>\"\n        f\"<div class='xr-index-preview'>{preview}</div>\"\n        f\"<div></div>\"\n        f\"<input id='{index_id}' class='xr-index-data-in' type='checkbox'/>\"\n        f\"<label for='{index_id}' title='Show/Hide index repr'>{data_icon}</label>\"\n        f\"<div class='xr-index-data'>{details}</div>\"\n    )",
                        "filename": "xarray/core/formatting_html.py",
                        "start_index": 1914,
                        "end_index": 4767,
                        "start_line": 75,
                        "end_line": 296,
                        "max_line": 342,
                        "git_instance": "github",
                        "repo_name": "testbed/pydata__xarray__0.12",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is part of the HTML formatting logic and includes the generation of the HTML for variable summaries, which may need to be updated to respect the new collapsing option."
                }
            ],
            "xarray/static/css/style.css": [
                {
                    "chunk": {
                        "code": "/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\nhtml[theme=dark],\nbody[data-theme=dark],\nbody.vscode-dark {\n  --xr-font-color0: rgba(255, 255, 255, 1);\n  --xr-font-color2: rgba(255, 255, 255, 0.54);\n  --xr-font-color3: rgba(255, 255, 255, 0.38);\n  --xr-border-color: #1F1F1F;\n  --xr-disabled-color: #515151;\n  --xr-background-color: #111111;\n  --xr-background-color-row-even: #111111;\n  --xr-background-color-row-odd: #313131;\n}\n\n.xr-wrap {\n  display: block !important;\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-text-repr-fallback {\n  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n  display: none;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.x",
                        "filename": "xarray/static/css/style.css",
                        "start_index": 0,
                        "end_index": 2932,
                        "start_line": 1,
                        "end_line": 340,
                        "max_line": 348,
                        "git_instance": "github",
                        "repo_name": "testbed/pydata__xarray__0.12",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the CSS styles for the HTML repr of xarray objects, which may need to be modified to support the new collapsing functionality."
                }
            ]
        },
        "solution_task": "To implement the feature request for collapsing the HTML display in notebooks for xarray objects, you can follow these steps:\n\n- Add a new option to control the collapsed state of the HTML representation in the `xarray.set_options` context manager.\n- Modify the HTML formatter to respect this new option when generating the HTML representation.\n- Update the CSS to ensure that the collapsed state is styled correctly.\n\nHere's a high-level overview of the implementation:\n\n1. **Add a New Option:**\n   - Add a new option in `xarray/core/options.py` (not provided in the snippets) to control the collapsed state of the HTML representation. For example, `display_html_collapsed`.\n\n2. **Update HTML Formatter:**\n   - In `xarray/core/formatting_html.py`, update the `_obj_repr` function to check the new option and set the `collapsed` state accordingly.\n   - Modify the `collapsible_section` function to use the new option to determine whether a section should be collapsed by default.\n\n3. **Update CSS:**\n   - In `xarray/static/css/style.css`, ensure that the styles for the collapsed/expanded states are correct and that the toggling behavior works as expected.\n\nHere's some pseudo-code to illustrate the changes:\n\n```python\n# In xarray/core/options.py (pseudo-code)\ndef set_options(display_html_collapsed=False):\n    # Add logic to set the option\n\n# In xarray/core/formatting_html.py\ndef _obj_repr(obj, header_components, sections):\n    # ... existing code ...\n    # Check the new option to determine the collapsed state\n    collapsed = OPTIONS['display_html_collapsed']\n    # Pass the collapsed state to the section rendering functions\n    # ... existing code ...\n\ndef collapsible_section(name, inline_details=\"\", details=\"\", n_items=None, enabled=True, collapsed=False):\n    # ... existing code ...\n    # Use the collapsed parameter to set the initial state\n    collapsed_attr = \"checked\" if collapsed else \"\"\n    # ... existing code ...\n\n# In xarray/static/css/style.css\n/* Update styles for the collapsed state if necessary */\n.xr-section-details {\n    display: none; /* Hide details when collapsed */\n}\n.xr-section-summary-in:checked ~ .xr-section-details {\n    display: block; /* Show details when checkbox is checked */\n}\n```\n\n**Potential Pitfalls:**\n- Ensuring backward compatibility with existing behavior.\n- Verifying that the new option works correctly in different notebook environments (e.g., JupyterLab, classic Jupyter Notebook, etc.).\n- Testing the feature with various themes (light/dark) to ensure that the CSS is applied correctly.\n\n**Files to Change:**\n- `xarray/core/options.py`: Add the new option for controlling the collapsed state.\n- `xarray/core/formatting_html.py`: Update the HTML representation functions to use the new option.\n- `xarray/static/css/style.css`: Update the CSS to style the collapsed/expanded states.\n\n**Further Research Material:**\n- Look into the implementation of `xarray.set_options` to understand how to add a new option.\n- Review the HTML and CSS specifications for details on how to implement collapsible sections.\n- Familiarize yourself with the existing HTML representation code in `xarray/core/formatting_html.py` to understand how it currently works.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The VALUE score should reflect how well the RESPONSE addresses the specific needs and context presented in the PROMPT, regardless of the completeness of the PROMPT itself. RESPONSES that are highly relevant, offering clear and comprehensive suggestions or solutions for the described feature request, should score between 7 and 9.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable plan for implementing the feature request to allow collapsing the HTML display in notebooks for xarray objects. It suggests adding a new option in the xarray settings, updating the HTML formatter and CSS, and provides pseudo-code to illustrate the changes. The RESPONSE also identifies potential pitfalls, such as ensuring backward compatibility and verifying the new option in different notebook environments. Additionally, it points out the specific files that need to be changed and provides further research material, including links to relevant code snippets. The RESPONSE is comprehensive and directly addresses the feature request, making it highly valuable for the implementation of the feature.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711759468.315995,
        "result": "To implement the feature request for collapsing the HTML display in notebooks for xarray objects, you can follow these steps:\n\n- Add a new option to control the collapsed state of the HTML representation in the `xarray.set_options` context manager.\n- Modify the HTML formatter to respect this new option when generating the HTML representation.\n- Update the CSS to ensure that the collapsed state is styled correctly.\n\nHere's a high-level overview of the implementation:\n\n1. **Add a New Option:**\n   - Add a new option in `xarray/core/options.py` (not provided in the snippets) to control the collapsed state of the HTML representation. For example, `display_html_collapsed`.\n\n2. **Update HTML Formatter:**\n   - In `xarray/core/formatting_html.py`, update the `_obj_repr` function to check the new option and set the `collapsed` state accordingly.\n   - Modify the `collapsible_section` function to use the new option to determine whether a section should be collapsed by default.\n\n3. **Update CSS:**\n   - In `xarray/static/css/style.css`, ensure that the styles for the collapsed/expanded states are correct and that the toggling behavior works as expected.\n\nHere's some pseudo-code to illustrate the changes:\n\n```python\n# In xarray/core/options.py (pseudo-code)\ndef set_options(display_html_collapsed=False):\n    # Add logic to set the option\n\n# In xarray/core/formatting_html.py\ndef _obj_repr(obj, header_components, sections):\n    # ... existing code ...\n    # Check the new option to determine the collapsed state\n    collapsed = OPTIONS['display_html_collapsed']\n    # Pass the collapsed state to the section rendering functions\n    # ... existing code ...\n\ndef collapsible_section(name, inline_details=\"\", details=\"\", n_items=None, enabled=True, collapsed=False):\n    # ... existing code ...\n    # Use the collapsed parameter to set the initial state\n    collapsed_attr = \"checked\" if collapsed else \"\"\n    # ... existing code ...\n\n# In xarray/static/css/style.css\n/* Update styles for the collapsed state if necessary */\n.xr-section-details {\n    display: none; /* Hide details when collapsed */\n}\n.xr-section-summary-in:checked ~ .xr-section-details {\n    display: block; /* Show details when checkbox is checked */\n}\n```\n\n**Potential Pitfalls:**\n- Ensuring backward compatibility with existing behavior.\n- Verifying that the new option works correctly in different notebook environments (e.g., JupyterLab, classic Jupyter Notebook, etc.).\n- Testing the feature with various themes (light/dark) to ensure that the CSS is applied correctly.\n\n**Files to Change:**\n- `xarray/core/options.py`: Add the new option for controlling the collapsed state.\n- `xarray/core/formatting_html.py`: Update the HTML representation functions to use the new option.\n- `xarray/static/css/style.css`: Update the CSS to style the collapsed/expanded states.\n\n**Further Research Material:**\n- Look into the implementation of `xarray.set_options` to understand how to add a new option.\n- Review the HTML and CSS specifications for details on how to implement collapsible sections.\n- Familiarize yourself with the existing HTML representation code in `xarray/core/formatting_html.py` to understand how it currently works.\n\n### Code snippets to check\n\n-  \u2192 [xarray](https://github.com/testbed/pydata__xarray__0.12/tree//xarray) \u2192 [core](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/core)- [Lines 254 - 342](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting_html.py#L254-L342)\n\n This snippet contains the HTML representation logic for xarray objects, which is relevant to the issue of controlling the collapsed state of the HTML repr. \n\n\n   - [Lines 158 - 342](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting_html.py#L158-L342)\n\n This snippet includes functions related to the collapsible sections in the HTML repr, which will likely need to be updated to add the new option for controlling the collapsed state. \n\n\n   - [Lines 75 - 296](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting_html.py#L75-L296)\n\n This snippet is part of the HTML formatting logic and includes the generation of the HTML for variable summaries, which may need to be updated to respect the new collapsing option.\n-  \u2192 [xarray](https://github.com/testbed/pydata__xarray__0.12/tree//xarray) \u2192 [static](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/static) \u2192 [css](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/static/css)- [Lines 1 - 340](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/static/css/style.css#L1-L340)\n\n This snippet contains the CSS styles for the HTML repr of xarray objects, which may need to be modified to support the new collapsing functionality.",
        "context_relevance": 0.64,
        "hypotheses": [],
        "groundedness_score": 1.0,
        "qa_relevance_reasons": {
            "reason": "Criteria: The RESPONSE must be relevant to the entire PROMPT and answer the entire PROMPT completely to get a score of 10.\nSupporting Evidence: The RESPONSE provides a detailed and relevant solution to the issue described in the PROMPT, suggesting modifications to the `xarray.set_options` and the HTML formatter, as well as CSS updates. It addresses the suggested solution by offering a way to control the collapsed state of the HTML representation. It also provides guidance on potential pitfalls, files to change, and further research material, which directly responds to the additional questions in the PROMPT. The RESPONSE is comprehensive and covers all aspects of the PROMPT, thus earning a score of 10."
        },
        "qa_relevance": 1.0
    }
}