{
    "id": "BEAM-2762",
    "repo_name": "testbed/UpCart-2.0",
    "title": "Title Broken For Reward Product",
    "body": "\n### [EMBEDDED_LINK_1]\n\n[EMBEDDED_LINK_2]\n\n[EMBEDDED_LINK_3]\n---\nGlossary:\nconversation_customer_1: The customer, Valentina Gioielli, reported an issue where the first reward item added to the cart could not be clicked to view its landing page. The admin, Jordan Falconer, initially provided a solution involving Custom CSS and a JavaScript function to disable quantity adjustments on free items. However, this did not resolve the issue, as the item remained unclickable. Valentina then offered admin access to their store, which Jordan accepted to investigate further.\n\nJordan confirmed that enabling pointer events caused a redirect to the homepage instead of the product page. The engineering team was notified, and it was discovered that the behavior was intentionally implemented in a previous update (BEAM-2545) to remove product links for reward products. The proposed resolution was to make this a configurable setting.\n\nValentina mentioned a potential problem where a deleted product was selected, and the name did not match, asking for one last check. Jordan confirmed that the issue persisted, still redirecting to the homepage.\n\nThe engineering team, with Opey Adeyemi's input, decided to make the linking of reward products to their pages an optional setting. Opey indicated that the fix could be done within a week but aimed to complete it sooner. The issue (BEAM-2762) was tracked through various statuses: Todo, PR (Pull Request), In Progress, In Review, Production Ready, and finally Done.\n\nOpey Adeyemi commented that the fix was implemented specifically for Valentina's store by enabling the newly created setting. Jordan informed Valentina that the engineering team had implemented a fix and asked if further assistance was needed.\nconversation_customer_2: The customer, Valentina Gioielli, reported an issue where the first reward item added to the cart could not be clicked to view its landing page. Admin Jordan Falconer initially provided a solution involving Custom CSS and a JavaScript function to disable quantity selection on free items, but this did not resolve the issue. Valentina then offered admin access to their store for further investigation.\n\nUpon gaining access, Jordan confirmed the customer's intent to have the reward item link to the product page. However, after attempting a fix, Jordan discovered that enabling pointer events redirected to the home page instead of the product page. This issue was escalated to the engineering team.\n\nValentina later suggested that a deleted product being selected might be the problem and asked for one last check. Jordan confirmed that the issue persisted, leading to the home page.\n\nComments from the engineering team revealed that the inability to click on reward products was an intentional feature from a previous issue (BEAM-2545), but they acknowledged the need for an optional setting to allow clicking on reward products. Engineer Opey Adeyemi indicated that a fix could be expected within a week, but it might be completed sooner.\n\nThe issue (BEAM-2762) was tracked through various statuses: Todo, PR (Pull Request), In Progress, In Review, Production Ready, and finally Done. Opey Adeyemi confirmed that a setting was created and enabled for the merchant's store to fix the issue. Jordan Falconer informed the customer that the fix had been implemented and offered further assistance if needed.\ntranscript_2: The video transcript reveals an issue with pointer events for a specific product on a webpage. The speaker demonstrates that while pointer events work correctly for one product, they are not enabled by default for another. Upon manually enabling pointer events and clicking on the problematic product, the webpage redirects to the home page instead of the product's page. The speaker is unsure why this redirection occurs and suggests it might be related to the store's setup, which they describe as potentially \"janky.\" They request assistance in resolving the issue so that clicking on the product leads to the correct product page, confirming that access rights are in place for making necessary changes. The speaker ends by expressing their confusion about the cause of the issue and hopes the team can provide a solution.\n\n",
    "classification": "bug",
    "state": "closed",
    "repo_link": "https://github.com/testbed/UpCart-2.0.git",
    "requested_commit": null,
    "issue_tracker_identifier": "",
    "ai_cost": {
        "issue_classifier": 0.0005704999999999999,
        "issue_summarizer": 0.019639999999999998,
        "search_embedding": 0.00010842,
        "documentation_agent": 0.008110000000000001,
        "repo_summary": 0.068924,
        "issue_star_solver": 0.20166650000000003,
        "snippet_processor": 0.02163,
        "bouncer": 0.03735
    },
    "attachments": [
        {
            "title": "Message from Clo\u00e8 Milano",
            "url": "https://app.intercom.com/a/apps/wqw8tviu/conversations/188602100013218",
            "content": "user_Valentina Gioielli: <div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/933834707/2a13df14db62f9eed95899c7/Screenshot+2024-01-15+alle+19.00.34.png?expires=1714344805&amp;signature=6e0d241121e65ddbdfb6b404858223d6776f167a43f7a12f3b41bcca28fe9430\"></div>\nuser_Valentina Gioielli: <p>this reward the first one, when added they cannot click to see the landing page</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Hey there!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">We can make this happen :) You'll want to start in your UpCart Settings --&gt; Custom CSS</p>\n<p class=\"no-margin\"></p>\n<pre><code>.free-item-disable-qty .upcart-product-quantity-input,<br>.free-item-disable-qty .upcart-product-quantity-minus,<br>.free-item-disable-qty .upcart-product-quantity-plus {<br>    pointer-events: none !important;<br>    cursor: not-allowed;<br>    opacity: 0.5;<br>}<br><br>.free-item-disable-qty .upcart-product-title,<br>.free-item-disable-qty .upcart-product-image-wrapper {<br>    pointer-events: none !important;<br>}<br></code></pre>\n<p class=\"no-margin\">Once you have that pasted in there, you'll want to go into your:</p>\n<p class=\"no-margin\"><b>Custom HTML, under: Scripts (Before Load)</b>.</p>\n<p class=\"no-margin\">You can use the drop bar to find this area!</p>\n<p class=\"no-margin\"></p>\n<pre><code>&lt;script&gt;<br>  function upcartDisableQtyOnFreeItems(cart) {<br>    const freeItems = cart.items.filter((item) =&gt; item.price === 0);<br>    for (const item of freeItems) {<br>      const cartRow = document.querySelector(`[id=\"${item.key}\"].upcart-product-item`);<br>      cartRow?.classList.add('free-item-disable-qty');<br>    }<br>  }<br><br>  window.upcartOnCartLoaded = upcartDisableQtyOnFreeItems;<br>  window.upcartOnCartUpdated = upcartDisableQtyOnFreeItems;<br>&lt;/script&gt;</code></pre>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">As always, I'm here to help, so if I can provide any further clarification or help in general, please do let me know!</p>\nuser_Valentina Gioielli: <p>nothing has changed, the object is still not clickable, can i give you access?</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I'll have a look again :)</p>\nuser_Valentina Gioielli: <p>the item*</p>\nuser_Valentina Gioielli: <div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/933866143/74fbefa7ab940e1428e990c6/Screenshot+2024-01-15+alle+19.25.48.png?expires=1714344805&amp;signature=b03394ee544605154b9d33f75985666dca8dbadd4f9509b29b395819df18c18c\"></div>\nadmin_Jordan Falconer: <p class=\"no-margin\">To confirm, you want this to bring the customer to the product page?</p>\nuser_Valentina Gioielli: <p>yes</p>\nuser_Valentina Gioielli: <p>please</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I've just sent your store a Collaborator Access request! </p>\n<p class=\"no-margin\">It should say it comes from either BEAM or AfterSell!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">Do you mind accepting it, and then letting me know when you do accept it? </p>\nuser_Valentina Gioielli: <p>done thanks</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Thank you!</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Alright I'm going to need technical input on this. I can enable the pointer events, but when I do so, it brings me to the home page instead of the product page.</p>\n<p class=\"no-margin\">I've flagged this to our engineering team and will let you know as soon as there is an update!</p>\nuser_Valentina Gioielli: <p>thanks</p>\nuser_Valentina Gioielli: <p>how long</p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> was linked to the conversation </p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I am unsure of the timeline for a fix but our engineering team will have a look as soon as possible and get back to you in this chat as soon as they have updates!</p>\nuser_Valentina Gioielli: <p>maybe i found a problem, a deleted product was selected, the name did not match, could you try one last time and see if it works with your inputs? grazei</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I'll just be a minute! I'll let you know!</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Unfortunately it is still bringing me to the homepage</p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>This was done on purpose in <a href=\"https://linear.app/beam-commerce/issue/BEAM-2545/%5B2-star-review%5D-remove-product-link-for-reward-products\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2545</a> - I didn't realize people would specifically want to do this. I suppose the resolution here is to make this a setting that is optional so they can still do this</p>\nadmin_Jordan Falconer: <p><b>Jordan Falconer</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>Ahhh! I figured the pointer events was on purpose but couldn't figure out why the link wasn't having it</p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>Yeah my bad, the fix should be chill though, I'm hoping for it to be done quickly, you can tell the merchant it'll be fixed within the week (but secretly I might have it done today) @jordan </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>Todo</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Just heard back from our engineering team! A fix should be implemented within the week :) I'll let you know as soon as it's complete!</p>\nuser_Valentina Gioielli: <p>ok thanks</p>\nadmin_Patti Rendall: <p class=\"no-margin\">No problem! We'll let you know when it's done.</p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>PR</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>In Progress</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>PR</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>In Review</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>Production Ready</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>Done</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>Fixed for this merchant (i.e. I enabled the setting I just created on their store)</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Hey there!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">I just heard back from our engineering team. A fix has been implemented for you! Please let me know if there's anything further I'd be able to help with :)</p>\n",
            "placeholder_tag": "conversation_customer_1",
            "content_type": "ExternalAssetsType.CONVERSATION_CUSTOMER"
        }
    ],
    "inline_assets": [
        {
            "title": "",
            "url": "https://app.intercom.com/a/inbox/wqw8tviu/inbox/shared/all/conversation/188602100013218?view=List",
            "content": "user_Valentina Gioielli: <div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/933834707/2a13df14db62f9eed95899c7/Screenshot+2024-01-15+alle+19.00.34.png?expires=1714344804&amp;signature=dc722541b9d22a4230bf33844bdea8b02f758d5c17140a09f80081b730528a6f\"></div>\nuser_Valentina Gioielli: <p>this reward the first one, when added they cannot click to see the landing page</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Hey there!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">We can make this happen :) You'll want to start in your UpCart Settings --&gt; Custom CSS</p>\n<p class=\"no-margin\"></p>\n<pre><code>.free-item-disable-qty .upcart-product-quantity-input,<br>.free-item-disable-qty .upcart-product-quantity-minus,<br>.free-item-disable-qty .upcart-product-quantity-plus {<br>    pointer-events: none !important;<br>    cursor: not-allowed;<br>    opacity: 0.5;<br>}<br><br>.free-item-disable-qty .upcart-product-title,<br>.free-item-disable-qty .upcart-product-image-wrapper {<br>    pointer-events: none !important;<br>}<br></code></pre>\n<p class=\"no-margin\">Once you have that pasted in there, you'll want to go into your:</p>\n<p class=\"no-margin\"><b>Custom HTML, under: Scripts (Before Load)</b>.</p>\n<p class=\"no-margin\">You can use the drop bar to find this area!</p>\n<p class=\"no-margin\"></p>\n<pre><code>&lt;script&gt;<br>  function upcartDisableQtyOnFreeItems(cart) {<br>    const freeItems = cart.items.filter((item) =&gt; item.price === 0);<br>    for (const item of freeItems) {<br>      const cartRow = document.querySelector(`[id=\"${item.key}\"].upcart-product-item`);<br>      cartRow?.classList.add('free-item-disable-qty');<br>    }<br>  }<br><br>  window.upcartOnCartLoaded = upcartDisableQtyOnFreeItems;<br>  window.upcartOnCartUpdated = upcartDisableQtyOnFreeItems;<br>&lt;/script&gt;</code></pre>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">As always, I'm here to help, so if I can provide any further clarification or help in general, please do let me know!</p>\nuser_Valentina Gioielli: <p>nothing has changed, the object is still not clickable, can i give you access?</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I'll have a look again :)</p>\nuser_Valentina Gioielli: <p>the item*</p>\nuser_Valentina Gioielli: <div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/933866143/74fbefa7ab940e1428e990c6/Screenshot+2024-01-15+alle+19.25.48.png?expires=1714344804&amp;signature=073bcb8c415092e01d55d87fa4d434bcc447c5647ccf73d948df879ace9022df\"></div>\nadmin_Jordan Falconer: <p class=\"no-margin\">To confirm, you want this to bring the customer to the product page?</p>\nuser_Valentina Gioielli: <p>yes</p>\nuser_Valentina Gioielli: <p>please</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I've just sent your store a Collaborator Access request! </p>\n<p class=\"no-margin\">It should say it comes from either BEAM or AfterSell!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">Do you mind accepting it, and then letting me know when you do accept it? </p>\nuser_Valentina Gioielli: <p>done thanks</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Thank you!</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Alright I'm going to need technical input on this. I can enable the pointer events, but when I do so, it brings me to the home page instead of the product page.</p>\n<p class=\"no-margin\">I've flagged this to our engineering team and will let you know as soon as there is an update!</p>\nuser_Valentina Gioielli: <p>thanks</p>\nuser_Valentina Gioielli: <p>how long</p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> was linked to the conversation </p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I am unsure of the timeline for a fix but our engineering team will have a look as soon as possible and get back to you in this chat as soon as they have updates!</p>\nuser_Valentina Gioielli: <p>maybe i found a problem, a deleted product was selected, the name did not match, could you try one last time and see if it works with your inputs? grazei</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I'll just be a minute! I'll let you know!</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Unfortunately it is still bringing me to the homepage</p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>This was done on purpose in <a href=\"https://linear.app/beam-commerce/issue/BEAM-2545/%5B2-star-review%5D-remove-product-link-for-reward-products\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2545</a> - I didn't realize people would specifically want to do this. I suppose the resolution here is to make this a setting that is optional so they can still do this</p>\nadmin_Jordan Falconer: <p><b>Jordan Falconer</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>Ahhh! I figured the pointer events was on purpose but couldn't figure out why the link wasn't having it</p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>Yeah my bad, the fix should be chill though, I'm hoping for it to be done quickly, you can tell the merchant it'll be fixed within the week (but secretly I might have it done today) @jordan </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>Todo</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Just heard back from our engineering team! A fix should be implemented within the week :) I'll let you know as soon as it's complete!</p>\nuser_Valentina Gioielli: <p>ok thanks</p>\nadmin_Patti Rendall: <p class=\"no-margin\">No problem! We'll let you know when it's done.</p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>PR</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>In Progress</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>PR</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>In Review</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>Production Ready</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>Done</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>Fixed for this merchant (i.e. I enabled the setting I just created on their store)</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Hey there!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">I just heard back from our engineering team. A fix has been implemented for you! Please let me know if there's anything further I'd be able to help with :)</p>\n",
            "placeholder_tag": "conversation_customer_2",
            "content_type": "ExternalAssetsType.CONVERSATION_CUSTOMER"
        },
        {
            "title": "",
            "url": "https://www.loom.com/share/5f1344a9a01348389958733dd97b1101",
            "content": "Okay, so kind of weird issue here. So by default the pointer events are not enabled here for this product You can do it with this one just fine but anyways When I click on it Yeah, so when I click on it Where is it? Where is it? Am I stupid? Oh there we are. None. So if I change this so that We can actually click on it if I click on it it's going to bring me to the home page for some reason I think it's just the way the store is set up I don't know if it's a bit janky or what but yeah I don't know how to fix that so that it would go to that product Anyways we have access and everything if you guys could take a look that'd be wonderful because I have no idea why it wouldnt take me to that products page Thanks",
            "placeholder_tag": "transcript_2",
            "content_type": "ExternalAssetsType.TRANSCRIPT"
        }
    ],
    "linked_issue_ids": [],
    "comments": [],
    "issue_summary": "Error Messages:\n- No explicit error messages provided.\n\nFunction and Variable Names:\n- Custom CSS\n- JavaScript function\n- pointer events\n\nTechnical Descriptions:\n- Issue with the first reward item added to the cart not being clickable to view its landing page.\n- Custom CSS and JavaScript function used to disable quantity adjustments on free items.\n- Enabling pointer events caused a redirect to the homepage instead of the product page.\n- Previous update (BEAM-2545) intentionally removed product links for reward products.\n- Configurable setting proposed to allow linking of reward products to their pages.\n- Deleted product selection might cause a mismatch in the product name.\n- Fix implemented for Valentina's store by enabling a newly created setting.\n- Issue tracked with ID BEAM-2762 through statuses: Todo, PR (Pull Request), In Progress, In Review, Production Ready, Done.\n- Manual enabling of pointer events leads to incorrect redirection to the home page.\n- Access rights confirmed for making necessary changes to the store setup.\n\nOutput Format:\n- Issue: Reward item link unclickable, redirecting to homepage instead of product page.\n- Relevant Updates: BEAM-2545 (intentional removal of product links), BEAM-2762 (issue tracking and fix).\n- Solutions: Configurable setting for linking reward products, Custom CSS and JavaScript to disable quantity adjustments, fix specific to Valentina's store.\n- Additional Context: Pointer events, deleted product selection issue, store setup described as \"janky.\"",
    "repo_summary": "The project is a Shopify app built using Node.js and TypeScript. It includes modules for handling subscription upgrades, discount codes, and cart functionality. The project structure consists of directories for different modules like `web`, `extensions-src`, and `storefront-tester`. Key configuration files include `package.json`, `tsconfig.json`, and various scripts for setup, testing, and deployment.\n\nThe issue at hand involves the Subscription Upgrades module in the editor and cart functionality. The Subscription Upgrades module should have settings to prevent downgrades, and the cart frontend should display subscription upgrade options for line items. For one-time purchase items, there should be an \"Upgrade to...\" button, and for subscription items, a dropdown to select different selling plans. The behavior of the subscription upgrade area should update dynamically based on the selected purchase option.\n\nThe code snippets provided include functions for handling plan acceptance callbacks, updating cart visuals based on item count, and generating fake product data for preview purposes.",
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1714343029.703147,
        "classification": "bug",
        "initial_code_snippets": [
            {
                "code": "{\n                    title: t('Add Rewards'),\n                    badge: editorData.rewardsModule\n                      ? {\n                          children: t('Completed'),\n                          status: t('success'),\n                        }\n                      : undefined,\n                    description: t('Add a rewards module to offer urge customers to shop more. Create a free shipping bar, offer a free gift, or other rewards.'), // prettier-ignore\n                    action: {\n                      content: t('Add Rewards'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=rewards`);\n                      },\n                    },\n                  },\n                  {\n                    title: t('Confirm UpCart Compatibility'),\n                    description: t(\"Although UpCart uses standard Shopify technologies, not all apps do. Ensure any other apps you're using function as expected.\"), // prettier-ignore\n                  },\n                  // {\n                  //   title: t('Sell more with AfterSell \ud83d\udcb8'),\n                  //   description: t(\"AfterSell enables checkout and post-purchase upsells. It's a great way to increase your AOV and sell more. Learn more about AfterSell and get a free trial.\"), // prettier-ignore\n                  //   action: {\n                  //     content: t('Boost my Sales'),\n                  //     onAction: () => {\n                  //       navigate(ROUTE_OBJECTS.AFTERSELL_AD.url);\n                  //     },\n                  //   },\n                  // },\n                ]}",
                "filename": "web/src/@templates/Home/Home.tsx",
                "start_index": 7463,
                "end_index": 9094,
                "start_line": 1,
                "end_line": 233,
                "max_line": 260,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<div className={`upcart-product-image-wrapper ${styles.ProductRow__imageWrapper}`}>\n            {/*anti-pattern of disabling link was chosen in order to preserve existing DOM structure & merchant custom CSS*/}\n            <a href={itemIsReward(item) ? '/' : item.url} data-no-pointer={itemIsReward(item)}>\n              {src ? <img src={src} alt={item.title} /> : <ImageMajor height=\"75%\" width=\"75%\" />}\n            </a>\n          </div>\n        </div>\n        <div className=\"Stack__item Stack__item--fill\">\n          <div className={styles.ProductRow__productHeading}>\n            <div className={styles.ProductRow__productTitleAndVariant}>\n              <h3\n                className={`upcart-product-title UpcartDesignSettings__cartTextColor ${styles.ProductRow__productTitle}`}\n              >\n                <a\n                  className={`upcart-product-title-link ${styles.ProductRow__productTitleLink}`}\n                  href={itemIsReward(item) ? '/' : item.url}\n                  data-no-pointer={itemIsReward(item)}\n                >\n                  {item.product_title}\n                </a>\n              </h3>\n              {!item.product_has_only_default_variant &&\n                item.options_with_values?.map((option: any) => (\n                  <div\n                    key={option.name}\n                    className=\"upcart-item-option\"\n                    data-upcart-item-option-category={option.name}\n                    data-upcart-item-option-value={option.value}\n                  >\n                    <span className=\"TextStyle--variationSubdued UpcartDesignSettings__cartTextSubduedColor\">\n                      <span className=\"upcart-item-option-category\">{option.name}: </span>\n                      <span className=\"upcart-item-option-value\">{option.value}</span>\n                    </span>\n                  </div>\n                ))}\n              <div className=\"upcart-item-properties-anchor-before\" />\n              <ProductProperties item={item} settings={settings} />\n              <div className=\"upcart-item-properties-anchor-after\" />\n            </div>\n            {!isTrashLoading && (\n              <TrashButton\n                cartIsLoading={cartIsLoading}\n                isTrashLoading={isTrashLoading}\n                setIsTrashLoading={setIsTrashLoading}\n                onClick={() => deleteProductItem(item)}\n              />\n            )}\n          </div>\n          <div>\n            <div className=\"Stack Stack--noWrap Stack--distributionEqualSpacing Stack--alignmentCenter\">\n              <div className=\"Stack__item\">\n                {shouldShowQuantitySelector && (\n                  <div className={styles.ProductRow__stepper}>",
                "filename": "web/storefront/src/components/common/SingleProductRow/SingleProductRow.tsx",
                "start_index": 5370,
                "end_index": 8065,
                "start_line": 135,
                "end_line": 187,
                "max_line": 257,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "sortedTiers.forEach((tier, index) => {\n      //Only the 'discountProduct' reward type has product(s)\n      if (tier.targetType === 'discountProduct' && tier.products) {\n        if (index <= currentTier) {\n          //Products to be added\n\n          tier.products.forEach((product, productIndex) => {\n            //Check if the product is in the cart, if it isn't we need to add it\n            let cartIndex = cart.items.findIndex(\n              (item) =>\n                item.properties &&\n                item.properties.__upcartTier === index &&\n                item.properties.__upcartProductTier === productIndex,\n            );\n\n            //Check the \"lock\" to see if the product has already been added, in the process of being added or failed to add\n            let productAddedLock = sessionStorageEngine.get(`upcartTier${index}_${productIndex}AddedToCart`, true);\n\n            if (cartIndex === -1 && !productAddedLock) {\n              //Item was not found in the cart & the lock is available\n\n              //Get the variantId\n              let variantId = product?.variants?.edges?.[0]?.node?.id;\n              variantId = variantId?.split('/')[4];\n\n              itemsToAdd.push({\n                variantId: Number(variantId),\n                quantity: 1,\n                properties: {\n                  [REWARD_ITEM_PROPERTY_KEY]: variantId,\n                  __upcartTier: index,\n                  __upcartProductTier: productIndex,\n                } as UpcartRewardsCartProperties,\n              });\n            }\n          });\n        } else {\n          //Products to be removed\n          //Find all items in the cart, matching the Tier, and mark them for removal\n          let products = cart.items.filter((item) => item.properties && item.properties.__upcartTier === index);\n\n          products.forEach((product) => {\n            itemsToRemove.push({\n              key: product.key,\n              lineIdxFrom1: product.lineIdxFrom1,\n              newQuantity: (product?.quantity || 1) - 1,\n              properties: {\n                [REWARD_ITEM_PROPERTY_KEY]: product.variant_id.toString(),\n                __upcartTier: index,\n                __upcartProductTier: product?.properties?.__upcartProductTier,\n              } as UpcartRewardsCartProperties,\n            });\n          });\n\n          tier.products.forEach((product, productIndex) => {\n            //Check if the product is in the cart\n            let cartIndex = cart.items.findIndex(\n              (item) =>\n                item.properties &&\n                item.properties.__upcartTier === index &&\n                item.properties.__upcartProductTier === productIndex,\n            );\n\n            //If the user removed a product from the cart, we need to remove the lock\n            if (cartIndex === -1) {\n              sessionStorageEngine.unset([`upcartTier${index}_${productIndex}AddedToCart`]);\n            }\n          });\n        }\n      }\n    });\n\n    //\"Acquire\" the locks",
                "filename": "web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx",
                "start_index": 9879,
                "end_index": 12845,
                "start_line": 269,
                "end_line": 341,
                "max_line": 492,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n                    title: t('Activate UpCart'),\n                    description: t(`Activate the UpCart app embed block in your Theme editor. Find it in Theme settings > App embeds. Don't forget to press save.`), // prettier-ignore\n                    badge: {\n                      children: themeData?.theme && !themeData.theme.embedEnabled ? t('Required') : t('Completed'),\n                      status: themeData?.theme && !themeData.theme.embedEnabled ? t('critical') : t('success'),\n                    },\n                    action: {\n                      content: t('Open Theme Settings'),\n                      onAction: () => {\n                        window.open(themeEditorDeepLink, '_blank').focus();\n                      },\n                    },\n                  },\n                  {\n                    title: t('Match your brand design'),\n                    badge: designChanged\n                      ? {\n                          children: t('Completed'),\n                          status: t('success'),\n                        }\n                      : undefined,\n                    description: t('UpCart comes with great defaults but every brand is different. Hop into the cart editor and use the design options to match your brand.'), // prettier-ignore\n                    action: {\n                      content: t('Open Cart Editor'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=design`);\n                      },\n                    },\n                  },\n                  {\n                    title: t('Add Upsells'),\n                    badge: {\n                      children: editorData.upsellsModule ? t('Completed') : t('Recommended'),\n                      status: editorData.upsellsModule ? t('success') : t('info'),\n                    },\n                    description: t(\"Boost your AOV by using UpCart's high converting upsell offers. Head over to the cart editor to add upsells to your cart drawer.\"), // prettier-ignore\n                    action: {\n                      content: t('Add Upsells'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=upsells`);\n                      },\n                    },\n                  },",
                "filename": "web/src/@templates/Home/Home.tsx",
                "start_index": 5120,
                "end_index": 7444,
                "start_line": 1,
                "end_line": 222,
                "max_line": 260,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { GiftCardMajor, ProductsMajor, ShipmentMajor } from '@shopify/polaris-icons';\nimport clx from 'classnames';\nimport parse from 'html-react-parser';\nimport React, { useCallback, useEffect, useMemo } from 'react';\nimport { RewardTier } from '../../../../../../common/defaultMetafields';\nimport { REWARD_ITEM_PROPERTY_KEY } from '../../../constants/index';\nimport { convertCurrency, formatMoney } from '../../../helpers/currency';\nimport { useCartTotal } from '../../../hooks/useCartTotal';\nimport { AddToCartOpensCart, CartItem, ItemToAddToCart, ItemToChangeInCart } from '../../../platform';\nimport { StorageEngine } from '../../../services/storage';\nimport {\n  calcCountProgress,\n  calculateCountTieredProgress,\n  calculateProgress,\n  calculateTieredProgress,\n} from '../../../utils';\nimport { withErrorBoundary } from '../HOCs';\nimport styles from './styles.module.scss';\nimport { IRewardsModule } from './types';\nimport { useCartItems } from './hooks/useCartItems';\nimport { useCartItemCategories } from './hooks/useCartItemCategories';\nimport { useCartHelpers } from '../../../hooks/useCartHelpers';\n\nconst sessionStorageEngine = new StorageEngine('session');\n\nconst UnsafeRewardsModule: React.FC<IRewardsModule> = ({ platform, cart, refetchCart }) => {\n  const { itemCount: cartItemCount } = useCartItems({\n    cart,\n    settings: platform.settings,\n    includeRewards: false,\n  });\n\n  const { rewardItems } = useCartItemCategories({\n    cart,\n    settings: platform.settings,\n  });\n\n  const { totalAfterAllDiscountsWithoutGiftCards, totalAfterOnlyDiscountCodesWithoutGiftCards } = useCartTotal({\n    cart,\n  });\n\n  const {\n    rewardsBarBackgroundColor,\n    rewardsBarForegroundColor,\n    rewardsBasis,\n    rewardsEditor,\n    rewardsEditorAfterText,\n    rewardsEditorForItemCount,\n    rewardsItemCount,\n    rewardsMinAmount,\n    rewardsTargetType,\n    rewardsTiers,\n    rewardsTierProducts,\n    rewardsShowIconWithSingleTier,\n  } = platform.settings.upcartEditorSettings;\n\n  if (rewardsTiers.tiers.length === 0) {\n    rewardsTiers.tiers.push({\n      targetType: rewardsTargetType,\n      minAmount: rewardsMinAmount,\n      itemCount: rewardsItemCount,\n      textBeforeReachingForCartTotal: rewardsEditor,\n      textBeforeReachingForItemCount: rewardsEditorForItemCount,\n      rewardDescription: 'Free Shipping',\n      products: rewardsTierProducts,\n    });\n  }\n\n  // Calculate total price of non-gift-card reward items already present in the cart (BEAM-1664 & BEAM-400)\n  const rewardsItemsTotalPrice = rewardItems.reduce((total, item) => {\n    if (item.gift_card) return total;\n    return total + (rewardsTiers.tiers[0].targetType === 'shipping' ? item.line_price : item.original_line_price);\n  }, 0);\n\n  // See Linear issue BEAM-400 for a full explanation of this logic.\n  const totalPrice =\n    (rewardsTiers.tiers[0].targetType === 'shipping'\n      ? totalAfterAllDiscountsWithoutGiftCards\n      : totalAfterOnlyDiscountCodesWithoutGiftCards) - rewardsItemsTotalPrice;",
                "filename": "web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx",
                "start_index": 0,
                "end_index": 2983,
                "start_line": 1,
                "end_line": 79,
                "max_line": 492,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<Button\n                    primary\n                    size=\"large\"\n                    url=\"https://apps.shopify.com/upcart-cart-builder?source=aftersell-app-upcart-landing-page\"\n                    external\n                  >\n                    {t('Claim free trial') as string}\n                  </Button>\n                  <LegacyStack alignment=\"center\" spacing=\"extraTight\">\n                    <Reviews title={''} />\n                    <p style={{ fontSize: '18px', fontWeight: 'bolder', paddingBottom: '2px', marginLeft: '4px' }}>\n                      5.0 (500+ Reviews)\n                    </p>\n                  </LegacyStack>\n                  <br />\n                </LegacyStack>\n              </LegacyStack>\n\n              <div className={styles.mainImage}>\n                <img src=\"https://i.ytimg.com/vi_webp/P3xyRIPRh6A/maxresdefault.webp\" />\n              </div>\n            </div>\n          </Layout.Section>\n          <Layout.Section fullWidth>\n            <LegacyStack vertical spacing=\"extraLoose\">\n              <LegacyStack distribution=\"fillEvenly\">\n                <div className={styles.contentImage}>\n                  <img src={upCartBenefitsMap[0].postPurchaseUpsellImage} />\n                </div>\n                <LegacyStack vertical>\n                  <Heading>\n                    <h3 style={{ fontSize: '20px', fontWeight: 'bold', marginTop: '5px' }}>\n                      {upCartBenefitsMap[0].postPurchaseUpsell}\n                    </h3>\n                  </Heading>\n                  <LegacyStack vertical>\n                    <CheckmarkBenefit benefit=\"One Click Upsell Funnels\" />\n                    <CheckmarkBenefit benefit=\"Deep offer targeting with triggers\" />\n                    <CheckmarkBenefit benefit=\"AI recommended offers\" />\n                    <CheckmarkBenefit benefit=\"A/B test offers\" />\n                  </LegacyStack>\n                </LegacyStack>\n              </LegacyStack>\n              <LegacyStack distribution=\"fillEvenly\">\n                <LegacyStack vertical>\n                  <Heading>\n                    <h3 style={{ fontSize: '20px', fontWeight: 'bold', marginTop: '5px' }}>\n                      {upCartBenefitsMap[1].thankYouPage}\n                    </h3>\n                  </Heading>\n                  <LegacyStack vertical>\n                    <CheckmarkBenefit benefit=\"Product recommendations & storewide discount popup\" />\n                    <CheckmarkBenefit benefit=\"FAQs & reviews\" />\n                    <CheckmarkBenefit benefit=\"Images and videos\" />\n                  </LegacyStack>\n                </LegacyStack>\n                <div className={styles.contentImage}>\n                  <img src={upCartBenefitsMap[1].thankYouPageImage} />\n                </div>\n              </LegacyStack>\n              <LegacyStack distribution=",
                "filename": "web/src/@templates/AfterSellAd/AfterSellAd.tsx",
                "start_index": 2946,
                "end_index": 5780,
                "start_line": 79,
                "end_line": 139,
                "max_line": 163,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const tieredRewardsCount = useMemo(() => {\n    if (sortedTiers.length === 1) {\n      let rewardsCount = parseInt(sortedTiers[0].itemCount);\n      if (Number.isNaN(rewardsCount)) {\n        rewardsCount = 0;\n      }\n      const differenceCount = rewardsCount - cartItemCount;\n\n      if (differenceCount <= 0) {\n        return parse(rewardsEditorAfterText);\n      }\n\n      return parse(sortedTiers[0].textBeforeReachingForItemCount.replace('{COUNT}', differenceCount.toString()));\n    } else if (sortedTiers.length > 1) {\n      if (currentTierCount) {\n        const differenceCount = parseInt(currentTierCount.itemCount) - cartItemCount;\n        return parse(currentTierCount.textBeforeReachingForItemCount.replace('{COUNT}', differenceCount.toString()));\n      } else {\n        // achieved final tier\n        return parse(rewardsEditorAfterText);\n      }\n    }\n  }, [sortedTiers, cartItemCount, rewardsEditorAfterText, currentTierCount]);\n\n  const tieredRewardsAmount = useMemo(() => {\n    if (sortedTiersAmount.length === 1) {\n      const differenceAmount = parseFloat(sortedTiersAmount[0].minAmount) * 100 - totalPrice;\n      const amount = formatMoney(differenceAmount, platform.shop.moneyFormat);\n      if (differenceAmount <= 0) {\n        return parse(rewardsEditorAfterText);\n      }\n\n      return parse(sortedTiersAmount[0].textBeforeReachingForCartTotal.replace('{AMOUNT}', amount));\n    } else if (sortedTiersAmount.length > 1) {\n      if (currentTierAmount) {\n        const differenceAmount = parseFloat(currentTierAmount.minAmount) * 100 - totalPrice;\n        const amount = formatMoney(differenceAmount, platform.shop.moneyFormat);\n        return parse(currentTierAmount.textBeforeReachingForCartTotal.replace('{AMOUNT}', amount));\n      } else {\n        return parse(rewardsEditorAfterText);\n      }\n    }\n  }, [currentTierAmount, platform.shop.moneyFormat, rewardsEditorAfterText, sortedTiersAmount, totalPrice]);\n\n  const { findItemInCart } = useCartHelpers({ platform });\n\n  const removeProductFromCart = useCallback(\n    async (item: Pick<CartItem, 'key' | 'lineIdxFrom1'>) => {\n      const itemRemoved = findItemInCart({ cart, key: item.key, lineIdxFrom1: item.lineIdxFrom1 });\n      if (itemRemoved) {\n        return platform.cart\n          .changeCartItem({ item, settings: platform.settings, newQuantity: 0 })\n          .then(async (res) => {\n            platform.publicApi.upcartOnItemRemoved(itemRemoved.key, itemRemoved);\n          })\n          .catch((e) => console.error(e));\n      }\n    },\n    [platform.cart, cart, platform.publicApi, platform.settings, findItemInCart],\n  );",
                "filename": "web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx",
                "start_index": 5563,
                "end_index": 8164,
                "start_line": 158,
                "end_line": 487,
                "max_line": 492,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<LegacyCard.Section>\n      <div>\n        <div className={styles.TierSettings}>\n          <div>\n            <ProductSelectModal\n              isOpen={productModalIsOpen}\n              onClose={() => setProductModalIsOpen(false)}\n              onSave={(value) => {\n                const product = value.products[0];\n                setFieldValue(\n                  `upcartEditorSettings.rewardsTiers.tiers[${productModalIndex}].products[${productTierIndex}]`,\n                  product,\n                );\n                setFieldTouched(\n                  `upcartEditorSettings.rewardsTiers.tiers[${productModalIndex}].products[${productTierIndex}]`,\n                  true,\n                );\n                setProductModalIsOpen(false);\n              }}\n              selectedProducts={\n                values.upcartEditorSettings.rewardsTiers.tiers[productModalIndex].products?.[productTierIndex]\n                  ? ([\n                      values.upcartEditorSettings.rewardsTiers.tiers[productModalIndex].products?.[productTierIndex],\n                    ] as Product[])\n                  : []\n              }\n              multiProduct={false}\n            />\n            {tiers.map((tier, index) => (\n              <div key={index}>\n                {tiers.length > 1 ? (\n                  <div>\n                    {index != 0 && <br />}\n                    {index != 0 && <hr />}\n                    {index != 0 && <br />}\n                    <p style={{ textDecoration: 'underline', fontSize: '18px', marginBottom: '10px' }}>\n                      Tier {index + 1}\n                    </p>\n                  </div>\n                ) : (\n                  <Field\n                    id=\"upcartEditorSettings.rewardsShowIconWithSingleTier\"\n                    label={t('Show reward icon')}\n                    name={`upcartEditorSettings.rewardsShowIconWithSingleTier`}\n                    component={CheckboxField}\n                  />\n                )}\n                <Field\n                  id=\"upcartEditorSettings.targetType\"\n                  label={'Reward Type'}\n                  name={`upcartEditorSettings.rewardsTiers.tiers[${index}].targetType`}\n                  component={SelectField}\n                  options={[\n                    { label: 'Shipping', value: 'shipping' },\n                    { label: 'Discount', value: 'productsOrOrder' },\n                    { label: 'Product', value: 'discountProduct' },\n                  ]}\n                />\n                {(tiers.length > 1 || values.upcartEditorSettings.rewardsShowIconWithSingleTier) && (\n                  <Field\n                    id=\"upcartEditorSettings.rewardDescription\"\n                    label={t('Reward Description')}\n                    name={`upcartEditorSettings.rewardsTiers.tiers[${index}].rewardDescription`}\n                    component={InputField}\n                    type=\"text\"\n                    maxLength={25}\n                  />\n                )}\n                {values.",
                "filename": "web/src/@templates/CartEditor/RewardsModule/RewardSettingsModule.tsx",
                "start_index": 1856,
                "end_index": 4849,
                "start_line": 40,
                "end_line": 188,
                "max_line": 248,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<Modal.Section>\n            <Layout>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={GiftCardMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Rewards Module\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Show rewards in the cart such as a free shipping bar!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={CheckoutMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Upsells Module\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Add seamless in-cart upsells to boost your sales!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={AddProductMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Add-ons Module\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Show an add-on such as shipping protection or another product!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={PaintBrushMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Customizations\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Our team will help you customize with trust badges and more!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneHalf>\n                <LegacyCard title=\"See previews below (click arrows to scroll)\" sectioned>\n                  <Carousel\n                    showArrows={true}\n                    showThumbs={false}\n                    showStatus={false}\n                    showIndicators={true}\n                    autoPlay={true}\n                    interval={7500}\n                    infiniteLoop={true}\n                    renderIndicator={(onClickHandler, isSelected, index, label) => {\n                      if (isSelected) {\n                        return (\n                          <li",
                "filename": "web/src/@components/common/ModuleUnlock/ModuleUnlock.tsx",
                "start_index": 2934,
                "end_index": 5930,
                "start_line": 91,
                "end_line": 166,
                "max_line": 295,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "[\n  { selector: 'div#CartCount[data-cart-count-bubble] > span[data-cart-count]', content: { type: 'innerHtml' } }, // Debut theme\n  { selector: 'div#CartCount[site-header__cart-count] > span#item_count', content: { type: 'innerHtml' } }, // For theme ID 120599248957\n  { selector: \"a#cart-icon-bubble div[class~='cart-count-bubble'] > span\", content: { type: 'innerHtml' } }, // Dawn theme\n  { selector: \"#sticky-app-client div[data-cl='sticky-button'] > div:last-child\", content: { type: 'innerHtml' } }, // app\n  { selector: 'span[data-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'span.cart_count', content: { type: 'innerHtml' } },\n  { selector: 'span.counter.qty', content: { type: 'innerHtml' } },\n  { selector: '.current-cart-count > span.inner-count', content: { type: 'innerHtml' } },\n  { selector: \"[class*='cart-item-count']\", content: { type: 'innerHtml' } },\n  { selector: \"[class*='cart-link__count']\", content: { type: 'innerHtml' } },\n  { selector: '.cart-icon--basket2 > div', content: { type: 'innerHtml' } },\n  { selector: 'span.bigcounter', content: { type: 'innerHtml' } }, // bengalores.com\n  { selector: 'span.header__cart-count', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"].gt_show-cart > span.gt_cart-count', content: { type: 'innerHtml' } },\n  { selector: 'button#CartButton > span[x-text=\"$store.cart_count.count\"]', content: { type: 'innerHtml' } },\n  { selector: '#CartLink #CartCount', content: { type: 'innerHtml' } },\n  { selector: '.cart-count-bubble > span[data-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'div.header__cart-count > span[data-js-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"] div[data-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'span.cart-items-count', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"][aria-label=\"Cart\"].cart-icon--basket1 > div', content: { type: 'innerHtml' } },\n  { selector: 'cart-count.header__cart-count', content: { type: 'innerHtml' } },\n  { selector: '.Header__CartCount', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"] #CartCount', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"] .js-cart-count', content: { type: 'innerHtml' } },\n  {\n    selector: 'a[href*=\"/cart\"] span.site-header-cart--count',\n    content: { type: 'dataAttribute', attributeName: 'data-header-cart-count' },\n    onCountZero: ({ el }) => {\n      el.classList.remove('visible');\n    },\n    onCountNonZero: ({ el }) => {\n      el.classList.add('visible');\n    },\n  },\n  /**\n   * jodis-471.myshopify.com\n   * See Linear issue BEAM-828\n   */",
                "filename": "web/storefront/src/platform/online-store/cart/cart.ts",
                "start_index": 15097,
                "end_index": 17744,
                "start_line": 69,
                "end_line": 520,
                "max_line": 589,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const handleRedirect = useCallback(\n    (event: React.MouseEvent) => {\n      // NOTE: if there is default theme behaviour that overrides clicks on\n      // <a> tags, this handler will NOT be called. The redirectUrl\n      // is added as an href on the <a> tag and used here so that the customer\n      // call still go to checkout/cart if this handler doesn't get called\n      setCheckoutButtonIsLoading(true);\n      try {\n        // NOTE: if the following Public API function throws and error, we should NOT perform\n        // the redirect. This is documented behaviour in the Public API docs.\n        // See Linear issue BEAM-653 for more info.\n        platform.publicApi.upcartOnCheckout(event);\n        for (const listener of platform.publicApi.upcartCheckoutListeners) {\n          listener();\n        }\n      } catch {\n        setCheckoutButtonIsLoading(false);\n        return;\n      }\n      event.preventDefault();\n      document.location.href = redirectUrl;\n    },\n    [redirectUrl, platform],\n  );\n\n  return (\n    <div className={`${styles.Footer} UpcartDesignSettings__cartAccentColor upcart-footer`}>\n      {children}\n      <DiscountCodesAndSavings\n        platform={platform}\n        cartWithHiddenItems={cartWithHiddenItems}\n        refetchCart={refetchCart}\n      />\n\n      <HtmlField platform={platform} fieldKey=\"aboveCheckoutButton\" totalPrice={totalPrice} />\n\n      <div className={`${styles.Footer__checkoutButton}`}>\n        <CustomButton\n          key={totalPrice}\n          url={redirectUrl}\n          fullWidth\n          onClick={handleRedirect}\n          loading={checkoutButtonIsLoading}\n        >\n          {parse(buttonText.replace(/{{total_price}}/g, formatMoney(totalPrice, platform.shop.moneyFormat)))}\n        </CustomButton>\n      </div>\n\n      <HtmlField platform={platform} fieldKey=\"belowCheckoutButton\" totalPrice={totalPrice} />\n\n      {settings.upcartEditorSettings.expressPayModule && <ExpressPayButtonsModule platform={platform} />}\n\n      {settings.upcartSettings.showContinueShoppingButton && (\n        <div\n          className={`upcart-continue-shopping UpcartDesignSettings__cartTextColor ${styles.Footer__continueShopping}`}\n        >\n          {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n          <a onClick={continueHandler}>\n            {settings.upcartSettings.translations.continueShopping ?? 'Or continue shopping'}\n          </a>\n        </div>\n      )}\n      {/* BELOW MODULES */}\n      {settings.upcartEditorSettings.trustBadgesModule &&\n        settings.upcartEditorSettings.trustBadges.position === 'bottom' && (\n          <TrustBadgesModule platform={platform}></TrustBadgesModule>\n        )}\n    </div>\n  );\n};\n\nexport default Footer;",
                "filename": "web/storefront/src/modules/CartPopup/Footer/Footer.tsx",
                "start_index": 2269,
                "end_index": 4973,
                "start_line": 57,
                "end_line": 128,
                "max_line": 128,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "/**\n * This file is for integration with the Product Options & Customizer app.\n * https://apps.shopify.com/product-customizer\n */\nimport { REWARD_ITEM_PROPERTY_KEY } from '../constants';\nimport type { CartItem } from '../platform';\n\nexport function itemIsProductCustomizerAddon(item: CartItem) {\n  return item.product_type === 'SHOPSTORM_HIDDEN_PRODUCT';\n}\n\nexport function itemIsReward(item: CartItem): boolean {\n  return Boolean(item.properties?.[REWARD_ITEM_PROPERTY_KEY]);\n}",
                "filename": "web/storefront/src/utils/product-customizer.ts",
                "start_index": 0,
                "end_index": 478,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "cartIsEnabled: { type: 'boolean', value: true },\n\n    // Design Settings\n    settingsModule: {\n      type: 'json',\n      value: {\n        fields: {\n          /**\n           * This field has changed to mean \"show strikethrough prices\". This means that we also show the strikethrough\n           * if there is a discount applied to an item, even if the item doesn't have a compare-at price.\n           */\n          compareAtPrice: true,\n          inheritFonts: true,\n          backgroundColor: '#FFFFFF',\n          cartAccentColor: '#f6f6f7',\n          buttonColor: '#000000',\n          buttonTextColor: '#FFFFFF',\n          buttonTextHoverColor: '#e9e9e9',\n          cartTextColor: '#000000',\n        },\n      },\n    },\n\n    // Announcements Module\n    announcementModule: { type: 'boolean', value: false },\n    announcementEditor: {\n      type: 'multi_line_text_field',\n      value: '<p>Your products are reserved for <b>{TIMER}</b> minutes!</p>',\n    },\n    announcementBackgroundColor: { type: 'single_line_text_field', value: '#CDE0E0' },\n    announcementModulePosition: { type: 'single_line_text_field', value: 'top' },\n    announcementBorderColor: { type: 'single_line_text_field', value: '#C5E6FD' },\n    announcementTimer: { type: 'single_line_text_field', value: '00:00' },\n\n    // Rewards Module\n    rewardsModule: { type: 'boolean', value: false },\n    rewardsBarBackgroundColor: { type: 'single_line_text_field', value: '#E2E2E2' },\n    rewardsBarForegroundColor: { type: 'single_line_text_field', value: '#93D3FF' },\n    rewardsBasis: { type: 'single_line_text_field', value: 'cartTotal' },\n    rewardsTargetType: { type: 'single_line_text_field', value: 'productsOrOrder' },\n    rewardsMinAmount: { type: 'single_line_text_field', value: '125' },\n    rewardsEditor: {\n      type: 'multi_line_text_field',\n      value: '<p>You\u2019re <b>{AMOUNT}</b> away from free shipping!</p>',\n    },\n    rewardsEditorAfterText: { type: 'multi_line_text_field', value: 'Free shipping unlocked!' },\n    rewardsEditorForItemCount: {\n      type: 'multi_line_text_field',\n      value: '<p>You\u2019re <b>{COUNT}</b> products away from free shipping!</p>',\n    },\n    rewardsItemCount: { type: 'single_line_text_field', value: '5' },\n    rewardsTiers: {\n      type: 'json',\n      value: { tiers: [], geoLocationPricing: [], rewardsAutoConvertCurrency: false, rewardsGeoLocationEnabled: false },\n    },\n    rewardsTierProducts: { type: 'json', value: [] },\n    rewardsShowIconWithSingleTier: { type: 'boolean', value: false },\n\n    // Upsells Module\n    upsellsModule: { type: 'boolean', value: false },\n    upsellsDirection: { type: 'single_line_text_field', value: 'horizontal' },\n    upsellsTitle: { type: 'multi_line_text_field', value: \"You'll love these\" },\n    maximumUpsellsToShow: { type: 'single_line_text_field', value: '10' },\n    upsellsShouldLimit: { type: 'boolean', value: false },\n    upsellsTrigger: { type: 'boolean', value: false },\n    sho",
                "filename": "common/defaultMetafields.ts",
                "start_index": 14968,
                "end_index": 17911,
                "start_line": 417,
                "end_line": 482,
                "max_line": 567,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "export async function handlePlanAcceptanceCallback({\n  shopifyService,\n  embeddedAppUrl,\n  unauthenticatedUnsafeAcceptedShopifyChargeId,\n}: {\n  shopifyService: ShopifyService;\n  embeddedAppUrl: URL;\n  unauthenticatedUnsafeAcceptedShopifyChargeId: number | null;\n}): Promise<PlanAcceptanceCallbackRedirect> {\n  const initiatedPlanAcceptance = await InitiatedPlanAcceptanceModel.findOneAndDelete({\n    shop: shopifyService.shop,\n    shopifyChargeId: unauthenticatedUnsafeAcceptedShopifyChargeId,\n  });\n  if (!initiatedPlanAcceptance) {\n    throw new Error(\n      `[${shopifyService.shop}] Cannot accept plan because the plan acceptance was not initiated through our server. This is a security risk and could indicate a malicious attempt to change a shop's plan. Shopify charge id: ${unauthenticatedUnsafeAcceptedShopifyChargeId}`,\n    );\n  }\n\n  // track userlist event for plan accepted\n  await trackUserlistEvent({\n    domain: shopifyService.shop,\n    eventName: USERLIST_EVENTS.upcart_pricing_accept,\n  });\n  const safeChargeId = initiatedPlanAcceptance.shopifyChargeId;\n  const isCancellingCharge = !safeChargeId;\n  if (isCancellingCharge) {\n    const activeSubscription = await shopifyService.getActiveSubscription();\n    if (activeSubscription) {\n      await shopifyService.graphql.AppSubscriptionCancel({ id: activeSubscription.id });\n    }\n  }\n  const shop = await ShopModel.findOneAndUpdate({ domain: shopifyService.shop }, [\n    {\n      $set: {\n        acceptedUpcartPlanId: initiatedPlanAcceptance.upcartPlanId,\n        hasAcceptedBilling: true,\n        // only update the firstFreeTrialStartDate if it is not already set\n        firstFreeTrialStartDate: {\n          $cond: {\n            if: '$firstFreeTrialStartDate',\n            then: '$firstFreeTrialStartDate',\n            else: new Date(Date.now()),\n          },\n        },\n      },\n    },\n  ]);\n  const hasCompletedOnboarding = Boolean(shop.isInstall);\n  const redirectUrl = new URL(embeddedAppUrl.toString());\n  if (!hasCompletedOnboarding) {\n    redirectUrl.pathname += '/onboarding';\n  }\n  return {\n    redirectUrl: redirectUrl.toString(),\n  };\n}",
                "filename": "web/server/modules/billing/plan-acceptance/plan-acceptance.ts",
                "start_index": 1340,
                "end_index": 3454,
                "start_line": 38,
                "end_line": 161,
                "max_line": 161,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const PRIMARY_CART_BUTTON_SELECTOR = [\n  // We use the \"*=\" operator to allow selecting all of the following:\n  // - <a href=\"/cart\">\n  // - <a href=\"https://test.com/cart\">\n  // - <a href=\"/cart?foo=bar\">\n  \"a[href*='/cart']\",\n\n  // We do not want to accidentally select a link that is supposed to _modify_ the cart.\n  // If we didn't have these conditions, then we would break cart editing functionality.\n  \":not([href*='/cart/change'])\",\n  \":not([href*='/cart/add'])\",\n  \":not([href*='/cart/clear'])\",\n\n  // We do not want to accidentally select a link to a product or collection\n  // that starts with \"cart...\", such as:\n  // - <a href=\"/products/cart-wheel\">\n  // - <a href=\"/collections/cart-wheels\">\n  \":not([href*='/products/cart'])\",\n  \":not([href*='/collections/cart'])\",\n\n  // The .upcart class is used for the following purposes:\n  // 1. to ensure that the checkout button can go to cart if the setting is enabled\n  // 2. in custom buttons to prevent UpCart from overriding the click\n  \":not([class*='upcart'])\",\n\n  // For compatibility with Revy (https://apps.shopify.com/sales-booster-upsell-cross-sell-by-revy-shopify-apps),\n  // we don't want to override clicks on their button.\n  \":not([class*='revy-upsell-btn-cart'])\",\n\n  // We do not want to accidentally select a link that includes a discount code that includes \"cart\".\n  // These links could be direct discount links, or checkout links that include the discount code in\n  // the URL.\n  // - <a href=\"/checkout?discount=cart-discount\">\n  // - <a href=\"/discount/cart-discount\">\n  \":not([href*='/checkout'])\",\n  \":not([href*='/discount'])\",\n\n  // The following group of conditions is used to prevent selecting Cart Permalinks.\n  // Reference: https://shopify.dev/docs/apps/checkout/cart-permalinks/cart-permalinks\n  //\n  // Cart permalinks are supposed to go to checkout with pre-populated items. It is possible\n  // to redirect cart permalinks to the storefront, but in these cases we still don't want to\n  // select the link because that would prevent the items from being added to the cart.\n  //\n  // The reference above has some examples of what a cart permalink looks like, but\n  // here are some for quick reference:\n  // - <a href=\"/cart/1234567890:1\">\n  // - <a href=\"/cart/1234567890:1,987654321:3\">\n  // - <a href=\"/cart/1234567890:1?payment=shop_pay\">\n  // - <a href=\"/cart/1234567890:1?discount=cart-discount\">\n  //\n  // Ideally, we would use a regex to match cart permalinks, but we can't use\n  // a regex in a CSS selector.\n  \":not([href*='/cart/1'])\",\n  \":not([href*='/cart/2'])\",\n  \":not([href*='/cart/3'])\",\n  \":not([href*='/cart/4'])\",\n  \":not([href*='/cart/5'])\",\n  \":not([href*='/cart/6'])\",\n  \":not([href*='/cart/7'])\",\n  \":not([href*='/cart/8'])\",\n  \":not([href*='/cart/9'])\",\n].join('');",
                "filename": "web/storefront/src/constants/index.ts",
                "start_index": 423,
                "end_index": 3203,
                "start_line": 11,
                "end_line": 73,
                "max_line": 163,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const dawnCartHtml = `<svg class=\"icon icon-cart\" aria-hidden=\"true\" focusable=\"false\" role=\"presentation\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 40 40\" fill=\"none\">\n  <path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M20.5 6.5a4.75 4.75 0 00-4.75 4.75v.56h-3.16l-.77 11.6a5 5 0 004.99 5.34h7.38a5 5 0 004.99-5.33l-.77-11.6h-3.16v-.57A4.75 4.75 0 0020.5 6.5zm3.75 5.31v-.56a3.75 3.75 0 10-7.5 0v.56h7.5zm-7.5 1h7.5v.56a3.75 3.75 0 11-7.5 0v-.56zm-1 0v.56a4.75 4.75 0 109.5 0v-.56h2.22l.71 10.67a4 4 0 01-3.99 4.27h-7.38a4 4 0 01-4-4.27l.72-10.67h2.22z\"></path>\n  </svg><span class=\"visually-hidden\">Cart</span><div class=\"cart-count-bubble\"><span aria-hidden=\"true\"></span></div>`;\n\nconst dawnEmptyCartHtml = `<svg class=\"icon icon-cart-empty\" aria-hidden=\"true\" focusable=\"false\" role=\"presentation\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 40 40\" fill=\"none\">\n  <path d=\"m15.75 11.8h-3.16l-.77 11.6a5 5 0 0 0 4.99 5.34h7.38a5 5 0 0 0 4.99-5.33l-.78-11.61zm0 1h-2.22l-.71 10.67a4 4 0 0 0 3.99 4.27h7.38a4 4 0 0 0 4-4.27l-.72-10.67h-2.22v.63a4.75 4.75 0 1 1 -9.5 0zm8.5 0h-7.5v.63a3.75 3.75 0 1 0 7.5 0z\" fill=\"currentColor\" fill-rule=\"evenodd\"></path>\n  </svg><span class=\"visually-hidden\">Cart</span>`;\n\nconst emptyCartElement = document.querySelector('a#cart-icon-bubble');\n\nconst defaultImpulseWithItemHtml = `<span class=\"cart-link\"><svg aria-hidden=\"true\" focusable=\"false\" role=\"presentation\" class=\"icon icon-bag\" viewBox=\"0 0 64 64\"><g fill=\"none\" stroke=\"#000\" stroke-width=\"2\"><path d=\"M25 26c0-15.79 3.57-20 8-20s8 4.21 8 20\"></path><path d=\"M14.74 18h36.51l3.59 36.73h-43.7z\"></path></g></svg><span class=\"icon__fallback-text\">Cart</span><span class=\"cart-link__bubble cart-link__bubble--visible\"></span></span>`;\nconst defaultImpulseEmptyHtml = `<span class=\"cart-link\"><svg aria-hidden=\"true\" focusable=\"false\" role=\"presentation\" class=\"icon icon-bag\" viewBox=\"0 0 64 64\"><g fill=\"none\" stroke=\"#000\" stroke-width=\"2\"><path d=\"M25 26c0-15.79 3.57-20 8-20s8 4.21 8 20\"></path><path d=\"M14.74 18h36.51l3.59 36.73h-43.7z\"></path></g></svg><span class=\"icon__fallback-text\">Cart</span><span class=\"cart-link__bubble\"></span></span>`;\n\nconst defaultDawnHandler = (count: number) => {\n  const cartElement: HTMLElement | null = document.querySelector(\n    \"a#cart-icon-bubble div[class~='cart-count-bubble'] > span\",\n  );\n\n  if (emptyCartElement) {\n    if (!cartElement && count !== 0) {\n      emptyCartElement.innerHTML = dawnCartHtml;\n    }\n\n    if (cartElement && count === 0) {\n      emptyCartElement.innerHTML = dawnEmptyCartHtml;\n    }\n  }\n};\n\nconst impulseHandler = (count: number) => {\n  const cartElement = document.querySelector(\"a[href*='/cart'][aria-controls='CartDrawer']\");\n  if (!cartElement || !count) return;\n  if (count === 0) {\n    cartElement.innerHTML = defaultImpulseEmptyHtml;\n  } else {\n    cartElement.innerHTML = defaultImpulseWithItemHtml;\n  }\n};\n\n// alevrenl.myshopify.com",
                "filename": "web/storefront/src/platform/online-store/cart/cart.ts",
                "start_index": 20703,
                "end_index": 23627,
                "start_line": 543,
                "end_line": 582,
                "max_line": 589,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "// SHINEON PRODUCT TEMPLATE\nconst handleAddToCartForShineon = (platform: CartPlatform, e: DOMEvent<HTMLInputElement>): boolean => {\n  if (e.target.id && e.target.id.includes('so-btn-add-to-cart')) {\n    // const isBwBox = (document.querySelector('#product-form-options-wrap .so-variant-change.so-active') as HTMLInputElement | null)?.dataset.option1;\n    //\n    // if (isBwBox === \"B&W Box\") {\n    //   const shineonModal: HTMLElement | null = document.querySelector(\".so-modal.so-modal-e-and-g-upsell.fade.in\");\n    //   const shineonModalBackdrop: HTMLElement | null = document.querySelector(\".so-modal-backdrop.fade.in\");\n    //\n    //   if (shineonModal) {\n    //     shineonModal.style.display = \"block\";\n    //\n    //     if (shineonModalBackdrop) shineonModalBackdrop.style.display = \"block\";\n    //   }\n    //\n    //   return true;\n    // }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n\n    const items: Items[] = [];\n    const params = new URLSearchParams(document.location.search);\n    const productId = params.get('variant') || e.target.id.slice(e.target.id.lastIndexOf('-') + 1);\n    const quantity: string = (document.querySelector('.so-cart-qty-input') as HTMLInputElement | null)?.value || '1';\n    console.debug('this');\n    items.push({ id: productId, quantity: quantity });\n\n    // Addons\n    const addons: NodeListOf<HTMLInputElement> = document.querySelectorAll('.addon_product-label');\n\n    if (addons && addons.length !== 0) {\n      for (const addon of addons) {\n        const addonId = (addon.querySelector('input[type=checkbox]:checked') as HTMLInputElement | null)?.dataset\n          .variantId;\n\n        if (addonId) {\n          const quantity = (addon.querySelector('.addon__quantity') as HTMLInputElement | null)?.innerText || '1';\n          items.push({ id: addonId, quantity: quantity, properties: {} });\n        }\n      }\n    }\n\n    manyAddToCart(platform, items);\n\n    return true;\n  }\n\n  return false;\n};",
                "filename": "web/storefront/src/interceptors/handlers/handleAddToCartException.ts",
                "start_index": 4845,
                "end_index": 6796,
                "start_line": 123,
                "end_line": 199,
                "max_line": 201,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n    selector: 'a[href*=\"/cart\"] span.header-cart__count',\n    content: { type: 'innerHtml' },\n    onCountZero: ({ el }) => {\n      const container = el.closest('.has-cart-count');\n      container?.classList.remove('has-cart-count');\n    },\n    onCountNonZero: ({ el }) => {\n      const container = el.closest('.header-cart[data-ajax-cart-trigger]');\n      container?.classList.add('has-cart-count');\n    },\n  },\n  {\n    selector: 'a[href*=\"/cart\"] .cart-link__bubble',\n    content: { type: 'noContent' },\n    onCountZero: ({ el }) => {\n      el.classList.remove('cart-link__bubble--visible');\n    },\n    onCountNonZero: ({ el }) => {\n      el.classList.add('cart-link__bubble--visible');\n    },\n  },\n  {\n    selector: '.cart-link__bubble-num',\n    content: { type: 'innerHtml' },\n    // The following callbacks are used specifically for modernbandit.myshopify.com.\n    // However, the selector above and innerHtml modifications are used for other\n    // stores as well. Even if modernbandit.myshopify.com uninstalls, we should not remove\n    // the selector as that would break other stores.\n    onCountZero: () => {\n      if (getShopifyDomain() === 'modernbandit.myshopify.com') {\n        document.body.classList.remove('cart-has-items');\n      }\n    },\n    onCountNonZero: () => {\n      if (getShopifyDomain() === 'modernbandit.myshopify.com') {\n        document.body.classList.add('cart-has-items');\n      }\n    },\n  },\n  {\n    selector: 'a[href*=\"/cart\"].header-trigger__link--cart',\n    content: { type: 'noContent' },\n    onCountZero: ({ el }) => {\n      el.classList.remove('js-cart-full');\n    },\n    onCountNonZero: ({ el }) => {\n      el.classList.add('js-cart-full');\n    },\n  },\n  /**\n   * fragrancesoil.myshopify.com\n   * See Linear issue BEAM-1377\n   */\n  {\n    selector: 'a[href*=\"/cart\"] .sf-cart-count',\n    content: { type: 'innerHtml' },\n    onCountZero: ({ el }) => {\n      el.closest('section.sf-header')?.classList.remove('cart-has-items');\n    },\n    onCountNonZero: ({ el }) => {\n      el.closest('section.sf-header')?.classList.add('cart-has-items');\n    },\n  },\n  /**\n   * instant-speaker.myshopify.com\n   * See Linear issue BEAM-1311\n   */\n  {\n    selector: '#header-cart-drawer-item-count',\n    content: { type: 'innerHtml' },\n    onCountZero: ({ el }) => {\n      el.classList.add('hide');\n    },\n    onCountNonZero: ({ el }) => {\n      el.classList.remove('hide');\n    },\n  },\n  /**\n   * rdbody.myshopify.com\n   * See Linear issue BEAM-1305\n   */\n  {\n    selector: '.cart-count-badge',\n    content: { type: 'innerHtml' },\n    onCountZero: ({ el }) => {\n      el.classList.add('hide');\n    },\n    onCountNonZero: ({ el }) => {\n      el.classList.remove('hide');\n    },\n  },\n  {\n    selector: 'a[href*=\"/cart\"] #cart-item-count',\n    content: { type: 'innerHtml' },\n    onCountZero: ({ el }) => {\n      el.classList.remove('visible');\n    },\n    onCountNonZero: ({ el }) => {\n      el.classList.add('visible');\n    },\n  },\n]",
                "filename": "web/storefront/src/platform/online-store/cart/cart.ts",
                "start_index": 17747,
                "end_index": 20700,
                "start_line": 1,
                "end_line": 573,
                "max_line": 589,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n  id: 7680954040579,\n  title: 'Placeholder Product',\n  handle: 'derby-tier-backpack',\n  description:\n    '\\u003cp\\u003e\\u003cem\\u003eThis is a demonstration store. You can purchase products like this from \\u003ca href=\"http://unitedbyblue.com/\" target=\"_blank\"\\u003eUnited By Blue\\u003c/a\\u003e.\\u003c/em\\u003e\\u003c/p\\u003e\\n\\u003cp\\u003eOur Derby backpack is built with downpour proof sustainable canvas complemented by leather trim and brass hardware. Features padded canvas shoulder straps adjustable for all -day comfort. Finished with a drawstring closure and snap buckles to keep your belongings safe and secure on any trail taken.\\u003c/p\\u003e\\n\\u003cul\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003e100% organic waxed 18 oz canvas\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003eFull grain genuine leather trim\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003eHeavy-duty brass hardware and YKK zippers\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003eLifetime\\u00a0Guarantee\\u003c/li\\u003e\\n\\u003c/ul\\u003e\\n\\u003cul class=\"tabs-content\"\\u003e\\u003c/ul\\u003e',\n  published_at: '2022-05-07T13:11:39-06:00',\n  created_at: '2022-05-07T13:11:41-06:00',\n  vendor: 'United By Blue',\n  type: 'Bags',\n  tags: [],\n  price: 11300,\n  price_min: 11300,\n  price_max: 11300,\n  available: true,\n  price_varies: false,\n  compare_at_price: 12600,\n  compare_at_price_min: 12600,\n  compare_at_price_max: 12600,\n  compare_at_price_varies: false,\n  variants: [\n    {\n      id: 42789609046275,\n      title: 'Nutmeg',\n      option1: 'Nutmeg',\n      option2: null,\n      option3: null,\n      sku: '4160',\n      requires_shipping: true,\n      taxable: true,\n      featured_image: null,\n      available: true,\n      name: 'Derby Tier Backpack - Nutmeg',\n      public_title: 'Nutmeg',\n      options: ['Nutmeg'],\n      price: 11300,\n      weight: 1361,\n      compare_at_price: 12600,\n      inventory_management: 'shopify',\n      barcode: '',\n      requires_selling_plan: false,\n      selling_plan_allocations: [],\n    },\n  ],\n  images: [\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_nutmeg_810294de-9152-4bf7-b5e0-b88fc94a1ff8.jpg?v=1651950701',\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_moss_drawstring.jpg?v=1651950701',\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/product_lifestyle-58.jpg?v=1651950701',\n  ],\n  featured_image:\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_nutmeg_810294de-9152-4bf7-b5e0-b88fc94a1ff8.jpg?v=1651950701',\n  options: [{ name: 'Color', position: 1, values: ['Nutmeg'] }],\n  url: NO_HREF, // prevent redirect in preview",
                "filename": "web/src/@templates/CartEditor/platform/preview/products/fake-products.ts",
                "start_index": 4669,
                "end_index": 7380,
                "start_line": 1,
                "end_line": 504,
                "max_line": 559,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": ", [cartItems, upsellItems, showUpsellItemsAlreadyInCart, platform.products, preview])",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 6857,
                "end_index": 6942,
                "start_line": 175,
                "end_line": 175,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "initial_doc_snippets": [
            {
                "code": "---\nid: 3vst4bcr\ntitle: Discount Codes Module\nfile_version: 1.1.3\napp_version: 1.18.31\n---\n\n# Required background information\n\n## Discount types\n\nThere are two types of discounts: **automatic discounts** and **discount codes**.\n\n- **Automatic discounts** are applied to a cart or checkout automatically when the discount criteria are met.\n\n- **Discount codes** must be manually typed in by the customer. They stay active until the customer either removes the code, enters a different conflicting discount code, or changes their cart/checkout so that the discount is not longer applicable.\n\nThis module is specifically for **discount codes**. We do not have to worry about **automatic discounts** because they will work in the cart by default and they do not require any user interaction.\n\n## Discount targets\n\nA discount can be used to reduce the cost of **product(s)**, **order**, or **shipping**.\n\n- **Product discounts** reduce the price of one or more products and are shown as a reduction on individual line items.\n\n- **Order discounts** reduce the price of the order as a whole and are shown as a reduction on the overal price.\n\n- **Shipping discounts** reduce the price of shipping.\n\n# Read and write discount codes\n\n## Read discount codes\n\nWe read discount codes using the `cart.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:78:24:26:`    const cart: Cart&lt;CartItemWithoutCompareAtPrice&gt; = await fetch(getShopifyRoutesRoot() + &#39;cart.js&#39;).then((res) =&gt;`\"/> Ajax API endpoint.\n\nAn applied discount code will be returned from the API as part of either the `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> or the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/>. The `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> are for order discounts and the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/> are for product discounts.\n\nThese discount applications will include both **automatic discounts** and **discount codes**. We can distinguish between these using the `type`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:460:1:1:`  type: &#39;discount_code&#39; | &#39;&#39;;`\"/> field of the `DiscountApplication`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:446:4:4:`export interface DiscountApplication {`\"/>.\n\n## Apply a discount code\n\n<br/>\n\nWe apply a discount code by making a request from the storefront to the route `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/>.\n\nThe `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/> route is intended by Shopify to be used for [shareable discount links](https://help.shopify.com/en/manual/discounts/managing-discount-codes#promote-a-discount-using-a-shareable-link). Normally a customer would navigate to the link directly in their browser and would be redirected to the storefront. We are using it in a non-standard way by making a background network request.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n23         await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);\n```\n\n<br/>\n\nAfter applying a discount code, we refetch the cart to check if the discount was successfully applied and to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/DiscountCodeModule/DiscountCodeModule.tsx\n\n```tsx\n23           await platform.discounts.attemptApplyDiscountCode({ discountCode: discountCodeToApply });\n24           const updatedCart = await refetchCart();\n25\n26           const discountApplications = getAllUniqueDiscountApplications(updatedCart);\n27           const isValid = discountApplications.some(\n28             (discountApplication) => discountApplication.title === discountCodeToApply,\n29           );\n```\n\n<br/>\n\n## Remove a discount code\n\n<br/>\n\nWe remove a discount code by applying a fake invalid discount code.\n\nThere is no native way to remove discount codes so this is a workaround.\n\nThis behaviour relies on the fact that there can only be one discount code applied in the cart. We are replacing the one allowed discount code with an invalid code.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n14       async removeDiscountCode(): Promise<void> {\n15         const FAKE_INVALID_DISCOUNT_CODE = '~!~!UPCART_REMOVE_DISCOUNT!~!~';\n16         await this.UNSAFE_POSSIBLE_NO_OP_applyDiscountCodeAndSetShopifyCookie({ discountCode: FAKE_INVALID_DISCOUNT_CODE });\n17       }\n```\n\n<br/>\n\nAfter removing a discount code, we refetch the cart to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/components/DiscountCodeBadge/DiscountCodeBadge.tsx\n\n```tsx\n18         await platform.discounts.removeDiscountCode();\n19         await refetchCart();\n```\n\n<br/>\n\n> \u26a0\ufe0f After we apply or remove a discount code, the `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> of discounted line items will change. If we did not refetch the cart then we would have an outdated `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> value which would cause errors if we tried to call `cart/update.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:191:17:21:`    return fetchQd(this.ajaxMutationCartQ, getShopifyRoutesRoot() + &#39;cart/update.js&#39;, {`\"/> or `cart/change.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:153:8:12:`      getShopifyRoutesRoot() + `cart/change.js?${query.toString()}`,`\"/>.\n\n# Limitations\n\n## **Multiple** discount codes are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n50                     Multiple discount codes are not supported.\n```\n\n<br/>\n\n### Why are multiple discount codes not supported?\n\nWe cannot apply multiple discount codes because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support multiple codes. This is the only way that we know of to apply a discount code from the storefront. We will have to wait for Shopify to add support for multiple codes or to find a different way to apply codes which does support multiple.\n\nIf a customer applies two discount codes back to back, the first discount code will be discarded and only use the most recently applied code will affect the cart.\n\n## Free shipping discounts are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n58                   Free shipping discounts are not supported.\n```\n\n<br/>\n\n### Why are free shipping discounts not supported?\n\nWe cannot apply free shipping discounts because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support them.\n\n## Shopify Plus stores using checkout.liquid are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n64                   Shopify Plus stores using checkout.liquid are not supported.\n```\n\n<br/>\n\n### Why are Shopify Plus stores using checkout.liquid not supported?\n\nHistorically, the Ajax API only included automatic discounts and did not include discount codes. Shopify changed this behaviour and started including discounts from discount codes in Ajax API responses. There are still some stores which do not include discount codes in Ajax API responses. The discount codes module does not work on these stores.\n\n### How can we tell if a store is eligible?\n\nThe Ajax API will include discount codes in responses only if the store is on Shopify's new checkout.\n\n<br/>\n\nWe can identify wether or not a store is on Shopify's new checkout by looking at the cart token. If the cart token is 32 characters long and only includes hex digits (0123456789abcdef) then the store is on Shopify's old checkout, otherwise it is on Shopify's new checkout and the Ajax API will include discount codes in responses.\n\nStores that are on Shopify's new checkout may have different token formats. The following are examples that we've seen:\n\n- c1-d3f024e3af037f40bfe1b016b5b76f05\n- Z2NwLXVzLWNlbnRyYWwxOjAxSEZFMjFIV1FZUFc0SlQ3Q00ySFFSSjgy\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart({ cart }: { cart: Cart<CartItem> }): boolean {\n6          if (!cart.token) return false;\n7          const isLegacyCartToken = cart.token.match(/^[0-9a-f]{32}$/) !== null;\n8          return !isLegacyCartToken;\n9        }\n```\n\n<br/>\n\n### What happens if a store is not eligible?\n\n<br/>\n\nIf a store is not eligible then the discount code module will not be shown.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/Cart.tsx\n\n```tsx\n499                      {platform.discounts.getStoreCanApplyDiscountCodesInCart({ cart }) &&\n500                        settings.upcartEditorSettings.discountCodeModule && (\n501                          <DiscountCodeModule platform={platform} refetchCart={refetchCart} />\n502                        )}\n```\n\n<br/>\n\nIn the preview we will show the discount code module even for stores that are not eligible. We do this because it would require a lot of work to check eligibility when not on the storefront.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/platform/preview/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart(args: { cart: Cart<CartItem> }): boolean {\n6          return true;\n7        }\n```\n\n<br/>\n\nThis file was generated by Swimm. [Click here to view it in the app](https://app.swimm.io/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr).",
                "filename": ".swm/discount-codes-module.3vst4bcr.sw.md",
                "start_index": 0,
                "end_index": 11446,
                "start_line": 1,
                "end_line": 231,
                "max_line": 231,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>UpCart Loading...</title>\n    <script>\n      /*\n       * Constants\n       */\n      const INSTALL_SOURCE_QUERY_PARAM = 'via';\n      const COOKIE_LIFETIME_MS = 3 * 24 * 60 * 60 * 1000; // 3 days\n      const COOKIE_NAME = 'upcart_install_source';\n\n      /*\n       * 1. Get the ?via= query for the following steps\n       */\n      const installSource = encodeURIComponent(\n        new URLSearchParams(window.location.search).get(INSTALL_SOURCE_QUERY_PARAM),\n      );\n\n      /*\n       * 2. Set a cookie with the install source for 3 days so we can read it when they install the app\n       */\n      const cookieDomain = '.' + window.location.hostname;\n      const cookieExpiresDate = new Date();\n      cookieExpiresDate.setTime(cookieExpiresDate.getTime() + COOKIE_LIFETIME_MS);\n      const cookieExpires = cookieExpiresDate.toGMTString();\n      document.cookie = `${COOKIE_NAME}=${installSource}; expires=${cookieExpires}; domain=${cookieDomain}; path=/; SameSite=None; Secure`;\n\n      /*\n       * 3. Redirect to the app store, including the install source as a query param for App Store Google Analytics\n       */\n      window.location.replace(`https://apps.shopify.com/upcart-cart-builder?join-via=${installSource}`);\n    </script>\n  </head>\n  <body></body>\n</html>",
                "filename": "web/public/join.html",
                "start_index": 0,
                "end_index": 1304,
                "start_line": 1,
                "end_line": 36,
                "max_line": 36,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Specification: Subscription Upgrades\n\n## Editor\n\nThere should be a module in the editor with:\n\n- Name: \"Subscription Upgrades\"\n- Icon: Repeat Order\n- Default status: disabled\n- Settings:\n  - \"Prevent downgrades\"\n    - Help text: \"If enabled, customers will not be allowed to downgrade from a subscription to one-time purchase. Caution: this may increase cart abandonment.\"\n    - Type: checkbox\n    - Default: disabled\n\n## Cart\n\n> If the subscription upgrades module is disabled in the editor, the cart should skip all subscription upgrade functionality.\n>\n> The following cart specification is applicable only if the subscription upgrades module has been enabled in the editor.\n\n### Behaviour\n\nThe cart frontend for subscription upgrades should be isolated to an area below each line item. This area can include content, or can be omitted if there is nothing to show. If the area includes content, then the area should have:\n\n- Public CSS class: `.upcart-subscription-upgrade-section`\n- Styling: full-width of line item\n\nThe content of each subscription upgrade area should be independent of the content for the subscription areas for any other line items.\n\nThe content of the subscription upgrade area should be as follows:\n\nA. For **one-time purchase** line items:\n\n- If the item cannot be sold as a subscription, nothing should be shown.\n- If the item can be sold as a subscription:\n  - There should be a button with:\n    - Content: \"Upgrade to \\_\\_\\_\\_\", where \\_\\_\\_\\_ is the name of the first selling plan group for the item\n    - When clicked:\n      1. Show a loading spinner instead of text, and disable the button\n      2. Change the item to be a subscription with the first selling plan of the first selling plan group. The line item should have the property `__upcartSubscriptionUpgrade: \"true\"`\n    - Styling: full width of area, match to other buttons in cart\n    - Public CSS class: `.upcart-subscription-upgrade-button`\n\nB. For **subscription** line items:\n\n- There should be a dropdown with:\n  - Content: the name of the current selling plan\n  - Options:\n    - (OPTIONAL) A group with:\n      - Title: \"Full price\"\n      - Options:\n        - \"One-time purchase\"\n      - Condition: this group should be included if the \"Prevent downgrades\" setting is disabled AND the item does not _require_ a selling plan (i.e., it can be sold as a one-time purchase)\n    - A group for each possible selling plan group for the item with:\n      - Title: the name of the selling plan group\n      - Options: the names of the possible selling plans in the group for the item\n  - When selected:\n    1. Show a loading spinner overlayed on the dropdown and disable the dropdown\n    2. Change the selling plan of the item to the selected selling plan. If \"One-time only\" was selected, then remove the selling plan from the item to change it to a one-time purchase. The line item should have the property `__upcartSubscriptionEdit: \"true\"`\n  - Styling: full width of area, match to other dropdowns in cart\n  - Public CSS class: `.upcart-subscription-upgrade-dropdown`\n\nWhen the current purchase option for a line item changes, the content of the subscription upgrade area should be updated to match the new purchase option.\n\n### Edge Cases and Clarifications\n\n- The content of the subscription upgrade area does not depend on _how_ the purchase option was selected. For example, the subscription upgrade area content for an item that was added to the cart as a subscription should be the same as the content for an item that was upgraded from a one-time purchase to a subscription in-cart.\n- When selling plans are being loaded for a product, there should be no content in the subscription upgrade area. Before the selling plans are loaded, we can't fully decide what content to show so it's fine to show nothing.\n- When the selling plan of an item is changed, the quantity of the item should remain constant. If you don't provide a quantity to the AJAX API when changing a line item, then the quantity of the line item will be set to 1 which should be avoided.\n- Selling plans that do not apply to the selected variant for a line item should be ignored. It is possible to have selling plans that apply only to specific variants of a product. In cases where none of the selling plans from a selling plan group apply to the variant for the line item, the selling plan group should be ignored. An ignored group should not be listed in the dropdown (because it would be an empty section) and it should not be used for text of the upgrade button (because it would have no selling plan to select).",
                "filename": "docs/subscription-upgrades.md",
                "start_index": 0,
                "end_index": 4584,
                "start_line": 1,
                "end_line": 71,
                "max_line": 71,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Security Policy\n\n## Supported versions\n\n### New features\n\nNew features will only be added to the master branch and will not be made available in point releases.\n\n### Bug fixes\n\nOnly the latest release series will receive bug fixes. When enough bugs are fixed and its deemed worthy to release a new gem, this is the branch it happens from.\n\n### Security issues\n\nOnly the latest release series will receive patches and new versions in case of a security issue.\n\n### Severe security issues\n\nFor severe security issues we will provide new versions as above, and also the last major release series will receive patches and new versions. The classification of the security issue is judged by the core team.\n\n### Unsupported Release Series\n\nWhen a release series is no longer supported, it's your own responsibility to deal with bugs and security issues. If you are not comfortable maintaining your own versions, you should upgrade to a supported version.\n\n## Reporting a bug\n\nAll security bugs in shopify repositories should be reported to [our hackerone program](https://hackerone.com/shopify)\nShopify's whitehat program is our way to reward security researchers for finding serious security vulnerabilities in the In Scope properties listed at the bottom of this page, including our core application (all functionality associated with a Shopify store, particularly your-store.myshopify.com/admin) and certain ancillary applications.\n\n## Disclosure Policy\n\nWe look forward to working with all security researchers and strive to be respectful, always assume the best and treat others as peers. We expect the same in return from all participants. To achieve this, our team strives to:\n\n- Reply to all reports within one business day and triage within two business days (if applicable)\n- Be as transparent as possible, answering all inquires about our report decisions and adding hackers to duplicate HackerOne reports\n- Award bounties within a week of resolution (excluding extenuating circumstances)\n- Only close reports as N/A when the issue reported is included in Known Issues, Ineligible Vulnerabilities Types or lacks evidence of a vulnerability\n\n**The following rules must be followed in order for any rewards to be paid:**\n\n- You may only test against shops you have created which include your HackerOne YOURHANDLE @ wearehackerone.com registered email address.\n- You must not attempt to gain access to, or interact with, any shops other than those created by you.\n- The use of commercial scanners is prohibited (e.g., Nessus).\n- Rules for reporting must be followed.\n- Do not disclose any issues publicly before they have been resolved.\n- Shopify reserves the right to modify the rules for this program or deem any submissions invalid at any time. Shopify may cancel the whitehat program without notice at any time.\n- Contacting Shopify Support over chat, email or phone about your HackerOne report is not allowed. We may disqualify you from receiving a reward, or from participating in the program altogether.\n- You are not an employee of Shopify; employees should report bugs to the internal bug bounty program.\n- You hereby represent, warrant and covenant that any content you submit to Shopify is an original work of authorship and that you are legally entitled to grant the rights and privileges conveyed by these terms. You further represent, warrant and covenant that the consent of no other person or entity is or will be necessary for Shopify to use the submitted content.\n- By submitting content to Shopify, you irrevocably waive all moral rights which you may have in the content.\n- All content submitted by you to Shopify under this program is licensed under the MIT License.\n- You must report any discovered vulnerability to Shopify as soon as you have validated the vulnerability.\n- Failure to follow any of the foregoing rules will disqualify you from participating in this program.\n\n** Please see our [Hackerone Profile](https://hackerone.com/shopify) for full details\n\n## Receiving Security Updates\n\nTo recieve all general updates to vulnerabilities, please subscribe to our hackerone [Hacktivity](https://hackerone.com/shopify/hacktivity)",
                "filename": "SECURITY.md",
                "start_index": 0,
                "end_index": 4160,
                "start_line": 1,
                "end_line": 59,
                "max_line": 59,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# UpCart 3.0\n\n## Setup\n\nView setup instructions on Notion: https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 133,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "MIT License\n\nCopyright (c) 2021 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
                "filename": "extensions/theme-app-extension/LICENSE.md",
                "start_index": 0,
                "end_index": 1063,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "## Dev Setup\n\nFollow the [instructions in this Notion document](https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7?pvs=4) to setup the development environment for the Chrome extension.",
                "filename": "chrome-extensions/cart-customization/README.md",
                "start_index": 0,
                "end_index": 208,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.\\\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can\u2019t go back!**\n\nIf you aren\u2019t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you\u2019re on your own.\n\nYou don\u2019t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn\u2019t feel obligated to use this feature. However we understand that this tool wouldn\u2019t be useful if you couldn\u2019t customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n\n### Code Splitting\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\n\n### Analyzing the Bundle Size\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\n\n### Making a Progressive Web App\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\n\n### Advanced Configuration\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\n\n### Deployment\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\n\n### `npm run build` fails to minify\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)",
                "filename": "web/storefront/README.md",
                "start_index": 0,
                "end_index": 3354,
                "start_line": 1,
                "end_line": 70,
                "max_line": 70,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<html></html>",
                "filename": "web/storefront/public/index.html",
                "start_index": 0,
                "end_index": 13,
                "start_line": 1,
                "end_line": 1,
                "max_line": 1,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# [[[ --- STAGE: BASE ENVIRONMENT SETUP --- ]]]\n# see https://github.com/moby/moby/issues/37345#issuecomment-400250849\nFROM node:18.16.1-alpine as base\n# Accept command line '--build-arg' arguments\nARG PORT=8081\nARG HOST\nARG SHOPIFY_API_KEY\nARG INTERCOM_APP_ID\nARG SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY\n\n# Copy command line args to env to use during build and for final image runtime\nENV PORT=${PORT} \\\n    HOST=${HOST} \\\n    SHOPIFY_API_KEY=${SHOPIFY_API_KEY} \\\n    INTERCOM_APP_ID=${INTERCOM_APP_ID}\n    # ^^^^^ WARNING ^^^^^ do not include trailing \"\\\" on the last line above, you will get a syntax error with a terrible error message\n    #\n    # SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY is intentionally not included here since it is only for building and shouldn't be available at runtime\n\n# [[[ --- STAGE: BUILD --- ]]]\nFROM base AS build\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nCOPY web/patches ./web/patches\nRUN yarn install --cwd web --frozen-lockfile --production=false\nCOPY . .\n# NOTE: we need Sentry API token to upload source maps to Sentry during build, see withSentryConfig in next.config.js\nRUN echo \"[auth]\\ntoken=${SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY}\" > ./web/.sentryclirc\nRUN yarn web:build\n\n# [[[ --- STAGE: LICENSES WEB --- ]]]\nFROM base AS licenses-web\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web > ./web/public/licenses/web.txt\n\n# [[[ --- STAGE: LICENSES STOREFRONT --- ]]]\nFROM base AS licenses-storefront\nWORKDIR /app\nCOPY web/storefront/package.json web/storefront/yarn.lock ./web/storefront/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web/storefront > ./web/public/licenses/storefront.txt\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM base\nWORKDIR /app\nCOPY --from=build /app .\nCOPY package.json ./package.json\nRUN yarn install --frozen-lockfile --production=true\nCOPY --from=licenses-web /app/web/public/licenses/web.txt ./web/public/licenses/web.txt\nCOPY --from=licenses-storefront /app/web/public/licenses/storefront.txt ./web/public/licenses/storefront.txt\nCMD [\"yarn\", \"web:start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2181,
                "start_line": 1,
                "end_line": 53,
                "max_line": 53,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "The starting point for this repository was created using the Shopify CLI, commit\nf5d560da33aafae0b552de72a90f1320d1023524. Some boilerplate code from the CLI\nremains and is licensed as follows:\n\"\"\"\nMIT License\n\nCopyright (c) 2018 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\"",
                "filename": "LICENSE.md",
                "start_index": 0,
                "end_index": 1265,
                "start_line": 1,
                "end_line": 26,
                "max_line": 26,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { Shop, ShopModel } from '../modules/shops/shops.model';\nimport { RequestWithShop } from '../types/express.types';\nimport Shopify from '@shopify/shopify-api';\n\nexport const getShopDocFromRequest = async (req: RequestWithShop): Promise<Shop> => {\n  if (req.shopDoc) {\n    return req.shopDoc;\n  }\n\n  const shop = Shopify.Utils.sanitizeShop(req.query.shop as string);\n  const shopDoc = await ShopModel.findOne({ domain: shop }).lean();\n  req.shopDoc = shopDoc;\n  return shopDoc;\n};",
                "filename": "web/server/helpers/getShopDocFromRequest.ts",
                "start_index": 0,
                "end_index": 485,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "intial_documentation_sources": {
            "shopify": {
                "collection": "shopify_documentation",
                "reason_for_relevance": "The issue involves a Shopify store setup, and the documentation may provide insights on pointer events, product linking, and custom CSS and JavaScript functions within the Shopify context."
            }
        },
        "external_documentation_snippets": {
            "external_shopify": [
                {
                    "code": "Product recommendations\n Media and images\n Overview\n Support product media\n Product media UX guidelines\n Theme Store\n Product media UX guidelines\n The following are the main user experience (UX), and user interface (UI), aspects to consider with product media:\n Badges and buttons\n 3D model viewers\n Video players\n Slideshows\n Badges and buttons\n Both video and 3D model media displays should have the following included in their display, with each associated element, respectively:\n A play or 3D icon badge on the media thumbnail\n A play or 3D icon button control on the featured media\n 3D model media displays should also include a View in your space button.\n For example:\n When adding these badges and buttons you should consider the following:\n The icons to use\n Their placement and sizing\n Their styling\n The 'View in your space' button\n When including the View in your space button, you should consider the following:\n If the button is being placed on top of the media display, then you need to ensure that video and 3D controls aren't obstructed.\n Only show the button for devices that support AR. Supporting devices will run iOS version 13 or higher, or Android version 9 or higher.\n If a product's media includes a 3D model, and that media should be displayed, then the button should be visible regardless of the currently displayed media type. Additionally, if the product has more than one 3D model, then the button should open the currently visible model, or the first model if none are currently visible.\n The button should include the 3D icon.\n The button should only be placed below the featured media. For example:\n Tip\n To learn more about how to create a View in your space button, refer to Support product media.\n Icons\n Click the button below to download an asset library that includes icons for video and 3D model displays. You should use the icons from this library, rather than create custom icons as they're industry standards that will help customers more easily identify the available interaction.\n Download product media assets\n The icons come in two different styles:\n Rounded\n Angular\n You should only use one style, and it should match your theme's style.\n Badge placement and sizing\n The placement, and sizing, of the display varies depending whether it's for a thumbnail badge, or a featured button control.\n Thumbnail badge\n Thumbnail badges should adhere to the following guidelines:\n They shouldn't occupy more than 1/9th of the thumbnail display, or 1/6th for landscape thumbnails, and shouldn't be smaller than 20px x 20px. For example:\n They can be aligned in any corner of the thumbnail, however should be uniformly aligned. For example:\n Featured button control\n Featured button controls should be a minimum of 60px x 60px, and maximum of 90px x 90px.\n Styling\n The styling of the badges and buttons should adhere to the following guidelines:\n You should maintain the whitespace around the badge and button icons, as well as their proportions. For example:\n The background of both badges, and buttons, can be modified to match your theme style. For example, a circle, rounded corners, etc. For example:\n You should use existing colour settings to style the badges and buttons. There should be a high contrast between the background and the icon, as well as the media and the background, so settings for \"Main background\", \"Heading\", or \"Text\" generally give the best results. For example:\n The opacity of the badge elements should vary depending on the element. Refer to Thumbnail badge opacity and Featured button control opacity to learn more.\n In addition to the above, the View in your space button should either have no background color, or a very neutral color, so that it doesn't compete with primary and secondary calls to action. For example:\n Thumbnail badge opacity\n The thumbnail badge elements should adhere to the following opacity guidelines:\n The icon opacity should be 60%.\n The badge background opacity should be 100%.\n The badge background should have a border that is at least 5% opacity of the icon's colour.\n For example:\n Featured button control opacity\n The featured badge elements should adhere to the following opacity guidelines:\n The icon opacity should be 100%.\n The icon should persist on hover to maintain visibility.\n The badge background opacity should be a minimum of 75%.\n The badge background should have a border that is at least 5% opacity of the icon's colour.\n For example:\n 3D model viewers\n There are the following aspects to consider with 3D model viewers:\n The general behavior\n Accessibility\n The display elements\n Focus order\n Accessibility\n You should consider the following accessibility guidelines:\n 3D model content should default to inactive on page load as it can be unexpected, overwhelming, and distracting when defaulted to active.\n 3D models should allow for panning with only the keyboard, in addition to mouse and swipe gestures.\n Add dedicated button controls, with appropriate labels, to control the model positioning.\n Ensure keyboard focus states are visible for sighted keyboard-only or voice dictation users.\n Refrain from shifting keyboard focus when interacting with a button control so customers can navigate away when they're ready.\n Allow for text descriptions of models for each stage view.\n Announce the current state of the model via ARIA live status element when button controls are interacted with.\n Test your implementation with a variety of assistive technologies. For example, keyboard alone, and multiple screen readers.\n Display elements\n 3D model viewers should have the following display elements:\n 3D model viewer controls\n 3D model viewer progress bar\n 3D model viewer controls\n These controls should follow the badge and button styling suggestions, however the icons can be set to a minimum of 55% opacity. For example:\n These controls should be placed in the bottom right corner of the media element, either with even, or no padding:\n You should keep visual consistency among all UI elements, so the corners of the control display shouldn't be rounded unless the icons and buttons in the theme are also rounded. For example:\n 3D model viewer progress bar\n The progress bar is to show the load progress of the model. Similar to the controls, the progress bar should following the badge and button styling practices, however it should have 100% opacity, and should be placed at the top of the media element.\n For example:\n Focus order\n In order to facilitate keyboard interaction, 3D model viewers should have a specific focus order on the related elements. There are two main states to consider:\n Inactive\n Active\n Inactive\n When the viewer is inactive, the focus order should be as follows:\n Viewer controls\n Active\n When the viewer is active, the focus order should be as follows:\n Viewer container\n Zoom in\n Zoom out\n Fullscreen\n Video players\n There are the following aspects to consider with video players:\n The general behavior\n Accessibility\n Styling and placement\n Accessibility\n Video content should default to paused on page load as it can be unexpected, overwhelming, and distracting when defaulted to playing.\n If a video plays on page load, it should be muted by default.\n Test your implementation with a variety of assistive technologies. For example, keyboard alone, and multiple screen readers.\n Styling and placement\n In addition to the badge and button styling suggestions, video players should adhere to the following:\n They should be placed at the bottom of the featured media, either with even, or no padding:\n If the theme uses custom focus states, then you should maintain consistency. Otherwise, the default browser focus state should be used.\n You should keep visual consistency among all UI elements, so the corners of the control display shouldn't be rounded unless the icons and buttons in the theme are also rounded. For example:\n General behavior\n Note\n The following uses the terms \"active\" and \"inactive\". In the context of videos, this would be equivalent to \"playing\" and \"paused\".\n In general, video players and 3D model viewers should be set to inactive while advancing through media galleries as videos and models that aren't visible shouldn't be active.\n If more than one media element is displaying at a time, then all media should be inactive by default, requiring the customer to initiate activity. If only one media element is visible at once, then you should adhere to the following:\n Desktop - The first media element on page load should be set to inactive, however as the media changes, the current media should automatically be set to active.\n Tablet/Mobile - All media elements should default to inactive, requiring the customer to initiate activity.\n Slideshows\n If your theme uses a slideshow media gallery, then you shouldn't rely solely on swipe gestures for navigation as video players and 3D model viewers can interfere. For example:\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Badges and buttons\n 3D model viewers\n Video players\n General behavior\n Slideshows\n Updates & News\n Developer changelog\n Partner blog",
                    "filename": "docs/themes/product-merchandising/media/media-ux/content.txt",
                    "start_index": 0,
                    "end_index": 9092,
                    "start_line": 1,
                    "end_line": 140,
                    "max_line": 140,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product recommendations\n Media and images\n Gift cards\n Pricing and payments\n Delivery and fulfillment\n Migrating to Online Store 2.0\n Troubleshooting\n Theme Store\n Product merchandising\n To help merchants to provide an engaging product experience, Shopify has options for the following:\n Product variants: A simple organization of product options to help customers easily find and select their desired product.\n Product media: Offer an immersive experience and enable merchants to increase a customer's confidence in their product.\n Product recommendations: Enable customers to discover new products.\n Gift cards: An alternative payment method. You can add a recipient form to your gift card product page.\n Was this page helpful?",
                    "filename": "docs/themes/product-merchandising/content.txt",
                    "start_index": 0,
                    "end_index": 729,
                    "start_line": 1,
                    "end_line": 15,
                    "max_line": 15,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product recommendations\n Media and images\n Overview\n Support product media\n Product media UX guidelines\n Theme Store\n Support product media\n Merchants can add media to their products, like images, 3D models, videos, and YouTube or Vimeo videos.\n In this tutorial, you'll learn how to support product media in your theme.\n Resources\n The media attribute of the product object\n Media filters\n Implementing product media\n Product media is usually displayed on the product page. However, you might want to display product media in other areas of your theme, so it's recommended to build your media display in a snippet so that it can be reused.\n To display product media, you can loop through the media attribute of the product object and apply the associated media filter, depending on the media type.\n Example\n If you want to output product media on the product page, and your product page content is hosted in a product.liquid section, then you might do the following:\n Create a snippet called media.liquid to host your media display.\n Render media.liquid in your product.liquid section.\n sections/product.liquid\n 1 {% for media in product.media %}\n 2\n    {% render 'media', media: media %}\n 3 {% endfor %}\n snippets/media.liquid\n 1 {% case media.media_type %}\n 2\n    {% when 'image' %}\n 3\n      <div class=\"product-single__media\" style=\"padding-top: {{ 1 | divided_by: media.aspect_ratio | times: 100}}%;\" data-media-id=\"{{ media.id }}\">\n 4\n        {{ media | image_url: width: 2048, height: 2048 | image_tag }}\n 5\n      </div>\n 6\n    {% when 'external_video' %}\n 7\n      <div class=\"product-single__media\" style=\"padding-top: {{ 1 | divided_by: media.aspect_ratio | times: 100}}%;\" data-media-id=\"{{ media.id }}\">\n 8\n        {{ media | external_video_tag }}\n 9\n      </div>\n 10\n    {% when 'video' %}\n 11\n      <div class=\"product-single__media\" data-media-id=\"{{ media.id }}\">\n 12\n        {{ media | video_tag: controls: true }}\n 13\n      </div>\n 14\n    {% when 'model' %}\n 15\n      <div class=\"product-single__media\" style=\"padding-top: 100%\" data-media-id=\"{{ media.id }}\">\n 16\n        {{ media | model_viewer_tag }}\n 17\n      </div>\n 18\n    {% else %}\n 19\n      <div class=\"product-single__media\" style=\"padding-top: 100%;\" data-media-id=\"{{ media.id }}\">\n 20\n        {{ media | media_tag }}\n 21\n      </div>\n 22 {% endcase %}\n Each media type in the example above is wrapped in a <div> element with custom style and data attributes. These are based on the considerations documented in UX considerations, and should be adjusted accordingly to match your approach.\n Tip\n For another example of supporting media in a theme, you can refer to Dawn's implementation in the main-product.liquid section and product-thumbnail.liquid snippet.\n UX considerations\n Every theme requires a different approach to create responsive media that works across all screen sizes and devices. The following general recommendations can help ensure that you're offering a good customer experience:\n Make media elements responsive\n Preserve media element interactivity\n A product can have multiple videos, so if your theme has a thumbnail view for each media element, or displays multiple media elements at once, you should ensure that only the active video is playing.\n Tip\n For more in-depth information, refer to Product media UX guidelines.\n Responsive media elements\n Shopify-hosted 3D models use Google\u2019s model viewer component, and externally rendered videos are rendered in <iframe> elements. Neither of these are responsive containers by default.\n Shopify-hosted videos are rendered in HTML5 video players, which are responsive by default, however only once they\u2019re rendered.\n Given the above, you should consider using an aspect ratio box to create a responsive container for each.\n Tip\n 3D models don\u2019t have predefined aspect ratios, so it\u2019s common practice to create a square container by setting padding-top to 100%.\n Interactive media elements\n Shopify-hosted, and externally-hosted, video elements, and 3D models have interactive components. For example, videos have progress bars and volume control, and 3D models can be rotated.\n If any of these media elements are hosted in a carousel or swipe-interactive display, then the interactive components shouldn\u2019t interfere with the ability to interact with the display.\n Use media preview images\n Every media type has a preview_image attribute. This could be useful in scenarios like the following:\n Product thumbnails\n Social media images\n Tip\n Applying the image_url Liquid URL filter to the media object returns the preview_image URL.\n Product thumbnails\n If your theme displays thumbnails for each media source on the product, then you can utilize the preview_image attribute of the media object in order to show a thumbnail image for each media source.\n For example:\n 1 {% if product.media.size > 1 %}\n 2\n    <div class=\"thumbnails-wrapper\">\n 3\n      {% for media in product.media %}\n 4\n        <a data-thumbnail-id=\"{{ media.id }}\">\n 5\n          {{ media.preview_image | image_url: width: 110, height: 110, scale: 2 | image_tag: media.alt, 'product-single__thumbnail-image' }}\n 6\n        </a>\n 7\n      {% endfor %}\n 8\n    </div>\n 9 {% endif %}\n Tip\n The above example adds a data-thumbnail-id attribute which is intended to be used in conjunction with the data-media-id attribute that\u2019s included in the general media loop example above. This gives you an easy way to associate a thumbnail with its media display.\n Social media images\n Rather than only showing images for social media previews, you can include media preview images as well.\n For example:\n 1 {%- if template.name == 'product' -%}\n 2\n    {%- assign og_title = product.title | strip_html -%}\n 3\n    {%- assign og_type = 'product' -%}\n 4\n 5\n    {%- if product.media.size > 0 -%}\n 6\n      {%- capture og_image_tags -%}\n 7\n        {% for media in product.media limit:3 -%}\n 8\n          <meta property=\"og:image\" content=\"http:{{ media | image_url: width: 1200 height: 1200 }}\">\n 9\n        {%- endfor %}\n 10\n      {%- endcapture -%}\n 11\n 12\n      {%- capture og_image_secure_url_tags -%}\n 13\n        {% for media in product.media limit:3 -%}\n 14\n          <meta property=\"og:image:secure_url\" content=\"https:{{ media | image_url: with: 1200, height: 1200 }}\">\n 15\n        {%- endfor %}\n 16\n      {%- endcapture -%}\n 17\n    {%- endif -%}\n 18 {%- endif -%}\n Support AR functionality\n If merchants have 3D models of their products, then you can give them the option to showcase those models through AR. To do this, you can use the Shopify-XR library to support AR Quick Look in iOS\u2019s Safari, and Android\u2019s Scene Viewer.\n You need to do the following to use this library:\n Initialize the library\n Launch the display\n Initialize the library\n The following JavaScript needs to be included on product pages to initialize the library:\n 1 <script>\n 2\n    function setupShopifyXr(){\n 3\n      if (!window.ShopifyXR) {\n 4\n        document.addEventListener('shopify_xr_initialized', function() {\n 5\n          setupShopifyXr();\n 6\n        });\n 7\n      }else{\n 8\n        window.ShopifyXR.addModels();\n 9\n        window.ShopifyXR.setupXRElements();\n 10\n      }\n 11\n    }\n 12\n 13\n    window.Shopify.loadFeatures([\n 14\n      {\n 15\n        name: 'shopify-xr',\n 16\n        version: '1.0',\n 17\n        onLoad: setupShopifyXr\n 18\n      }\n 19\n    ]);\n 20 </script>\n Launch the display\n You can launch the display in two ways:\n With a button\n With JavaScript\n Launch the display with a button\n You can launch the display with a button that has the following attributes:\n Attribute Description\n data-shopify-xr The Shopify-XR library scans the DOM for elements with this attribute and attaches a click handler to launch the display.\n data-shopify-model3d-id The media ID of the current model.\n data-shopify-title The title of the product.\n data-shopify-xr-hidden A base data attribute for the Shopify-XR library to reference.\n You would include a button for each model type media source.\n For example:\n 1 {% for media in product.media %}\n 2\n    {% case media.type %}\n 3\n      ...\n 4\n      {% when 'model' %}\n 5\n        <div class=\"product-single__media\" style=\"padding-top: 100%\" data-media-id=\"{{ media.id }}\">\n 6\n          {{ media | model_viewer_tag }}\n 7\n        </div>\n 8\n 9\n        <button\n 10\n          data-shopify-xr\n 11\n          data-shopify-model3d-id=\"{{ media.id }}\"\n 12\n          data-shopify-title=\"{{ product.title | escape }}\"\n 13\n          data-shopify-xr-hidden\n 14\n        />\n 15\n      ...\n 16\n    {% endcase %}\n 17 {% endfor %}\n Launch the display with JavaScript\n Rather than include a button to launch the display, you can use JavaScript. For example:\n 1 <script>\n 2\n    window.ShopifyXR.launchXR({\n 3\n      model3dId: [media-id],\n 4\n      title: \"{{ product.title | escape }}\",\n 5\n    });\n 6 </script>\n Note\n In the example above, [media-id] represents the media ID for the associated model.\n Control video functionality with parameters\n Shopify hosted videos can have all HTML5 video attributes set when they\u2019re rendered with the Liquid video_tag or media_tag filter. For example:\n autoplay - Whether to automatically play the video after it\u2019s loaded.\n loop - Whether to loop the video.\n muted - Whether to mute the video\u2019s audio.\n controls - Whether a user can control the video playback.\n Each parameter is false by default, however you can set them to be true like the following:\n 1 <!-- Autoplay a video -->\n 2 {{ media | video_tag: autoplay: true }}\n 3\n 4 <!-- Autoplay a video, and loop it -->\n 5 {{ media | video_tag: autoplay: true, loop: true }}\n 6\n 7 <!-- Autoplay a video, loop it, and mute it -->\n 8 {{ media | video_tag: autoplay: true, loop: true, muted: true }}\n 9\n 10 <!-- Autoplay a video, loop it, mute it, and allow the user to control the video playback -->\n 11 {{ media | video_tag: autoplay: true, loop: true, muted: true, controls: true }}\n Tip\n You can control these same behaviors for externally-hosted videos using the Liquid external_video_url filter. However, the available parameters depend on the video host.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Resources\n Implementing product media\n UX considerations\n Use media preview images\n Support AR functionality\n Control video functionality with parameters\n Updates & News",
                    "filename": "docs/themes/product-merchandising/media/support-media/content.txt",
                    "start_index": 0,
                    "end_index": 10265,
                    "start_line": 1,
                    "end_line": 280,
                    "max_line": 280,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product recommendations\n Overview\n Related products\n Complementary products\n Media and images\n Theme Store\n Show related products on product pages\n Related products are products that are similar to a selected product. You can display potential substitutes to help customers discover other similar products they might like. These products should appear in a You might also like section on the product page.\n Adding the related products section to your product pages displays an automatically generated list of product recommendations.\n In this tutorial, you'll learn how to show related products in your theme.\n Resources\n To implement product recommendations, you'll use the following:\n The recommendations object\n The /{locale}/recommendations/products endpoint of the Product Recommendations API\n Recommendation logic\n The recommendation algorithm predicts the most relevant products based on the product that a customer is interacting with. The criteria that the algorithm uses depends on the merchant's online store. In general, it might take into account the following factors:\n Purchase history: Products that have historically been purchased together.\n Product description: Products with similar descriptions.\n Related collections: Products from collections that the current product is part of, excluding collections with handles all and frontpage.\n Recommendation algorithm criteria\n The criteria that's used depends on a merchant's online store, and the recommendation intent. The following outlines which criteria is used, and when:\n Criteria Application\n Purchase history\n and\n Product description Merchants with an English storefront.\n Purchase history only Merchants with a non-English storefront.\n Related collections All merchants when purchase history and product description recommendations aren't available.\n Tip\n To learn more about the recommendation logic limitations, refer to Limitations.\n The Shopify Search & Discovery app enables users to customize product recommendation and search results, which can impact results from storefront search and the Ajax Product Recommendations API. To learn about how these results can be impacted, visit the Shopify Help Center.\n Limitations\n The following list describes some limitations of the recommendation logic:\n You can't customize the recommendation algorithm to exclude specific products. However, you can choose which of the returned products to show with JavaScript.\n The recommendation algorithm doesn't use orders that have been imported from another store or ecommerce platform to generate product recommendations.\n Products that are out of stock or set to a price of 0, gift cards, and products in the visitor's cart aren't included in recommendations.\n UI guidelines\n The following best practices can help to make sure that you're displaying recommended products in a way that improves the customer experience:\n The recommendation algorithm associates up to ten products with each product, in order of relevance. For example, the first recommended product is more relevant than the tenth recommended product. For this reason, it's a good idea to limit your recommendations to four products for each product page to promote only the most relevant recommendations.\n Make sure that you load the proper image size for the product card.\n Because the recommendations are loaded asynchronously with JavaScript, you might want to add an empty state or not show the recommended products section at all. The placeholder is swapped with the actual recommended products after you load them.\n Use phrases such as \u201cYou might also like\u201d for the section header to explain to your customers why you're displaying the recommended products.\n Implementing product recommendations\n In this implementation, the section content builds the general display by looping through each product returned through the products attribute of the recommendations object. However, this object isn\u2019t populated when the section is initially rendered, so you need to use JavaScript to retrieve the populated section content through the section response of the Product Recommendations API.\n Example\n sections/product-recommendations.liquid\n 1 <div\n 2\n    class=\"product-recommendations\"\n 3\n    data-url=\"{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4&intent=related\"\n 4 >\n 5\n    {%- if recommendations.performed? and recommendations.products_count > 0 -%}\n 6\n      {% if recommendations.intent == 'related' %}\n 7\n        <h2>You may also like</h2>\n 8\n      {% elsif recommendations.intent == 'complementary' %}\n 9\n        <h2>Pair it with</h2>\n 10\n      {% endif %}\n 11\n 12\n      <ul>\n 13\n        {%- for product in recommendations.products -%}\n 14\n          <li class=\"product\">\n 15\n            <a href=\"{{ product.url }}\">\n 16\n              <img\n 17\n                class=\"product__img\"\n 18\n                src=\"{{ product.featured_image | image_url: width: 300, height: 300 }}\"\n 19\n                alt=\"{{ product.featured_image.alt }}\"\n 20\n              />\n 21\n 22\n              <p class=\"product__title\">{{ product.title }}</p>\n 23\n              <p class=\"product__price\">{{ product.price | money}}</p>\n 24\n            </a>\n 25\n          </li>\n 26\n        {%- endfor -%}\n 27\n      </ul>\n 28\n    {%- endif -%}\n 29 </div>\n 30\n 31 {% javascript %}\n 32\n    const handleIntersection = (entries, observer) => {\n 33\n      if (!entries[0].isIntersecting) return;\n 34\n 35\n      observer.unobserve(productRecommendationsSection);\n 36\n 37\n      const url = productRecommendationsSection.dataset.url;\n 38\n 39\n      fetch(url)\n 40\n        .then(response => response.text())\n 41\n        .then(text => {\n 42\n          const html = document.createElement('div');\n 43\n          html.innerHTML = text;\n 44\n          const recommendations = html.querySelector('.product-recommendations');\n 45\n 46\n          if (recommendations && recommendations.innerHTML.trim().length) {\n 47\n            productRecommendationsSection.innerHTML = recommendations.innerHTML;\n 48\n          }\n 49\n        })\n 50\n        .catch(e => {\n 51\n          console.error(e);\n 52\n        });\n 53\n    };\n 54\n 55\n    const productRecommendationsSection = document.querySelector('.product-recommendations');\n 56\n    const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});\n 57\n 58\n    observer.observe(productRecommendationsSection);\n 59 {% endjavascript %}\n 60\n 61 {% schema %}\n 62\n    {\n 63\n      \"name\": \"Product recommendations\",\n 64\n      \"settings\": []\n 65\n    }\n 66 {% endschema %}\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Resources\n Recommendation logic\n Limitations\n UI guidelines\n Implementing product recommendations\n Updates & News\n Developer changelog",
                    "filename": "docs/themes/product-merchandising/recommendations/related-products/content.txt",
                    "start_index": 0,
                    "end_index": 6760,
                    "start_line": 1,
                    "end_line": 170,
                    "max_line": 170,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "? product?.variants?.nodes[0];\n 4\n 5 return json({\n 6\n    product,\n 7\n    selectedVariant,\n 8 });\n Update the useLoaderData() hook\n Add selectedVariant to the useLoaderData() destructured object:\n app/routes/products.$handle.jsx\n 1 const {product, selectedVariant} = useLoaderData();\n Pass the variant to ProductOptions\n Update the <ProductOptions> component to accept a selectedVariant parameter:\n app/routes/products.$handle.jsx\n 1 <ProductOptions\n 2\n    options={product.options}\n 3\n    selectedVariant={selectedVariant}\n 4 />\n Update ProductOptions\n Replace the top portion of ProductOptions with the following code:\n app/components/ProductOptions.jsx\n 1 export default function ProductOptions({options, selectedVariant}) {\n 2\n    const {pathname, search} = useLocation();\n 3\n    const [currentSearchParams] = useSearchParams();\n 4\n    const navigation = useNavigation();\n 5\n 6\n    const paramsWithDefaults = (() => {\n 7\n      const defaultParams = new URLSearchParams(currentSearchParams);\n 8\n 9\n      if (!selectedVariant) {\n 10\n        return defaultParams;\n 11\n      }\n 12\n 13\n      for (const {name, value} of selectedVariant.selectedOptions) {\n 14\n        if (!currentSearchParams.has(name)) {\n 15\n          defaultParams.set(name, value);\n 16\n        }\n 17\n      }\n 18\n 19\n      return defaultParams;\n 20\n    })();\n 21\n 22\n    // Update the in-flight request data from the 'navigation' (if available)\n 23\n    // to create an optimistic UI that selects a link before the request is completed\n 24\n    const searchParams = navigation.location\n 25\n      ? new URLSearchParams(navigation.location.search)\n 26\n      : paramsWithDefaults;\n 27\n 28\n    return (\n The new logic does the following:\n Get the selectedVariant from the component props\n On render, create a paramsWithDefaults URLSearchParams Object\n Clone the existing parameters\n If the parameters don't already include a selected value for the selected variant, then add it to the cloned parameters\n Use paramsWithDefaults as the fallback when you create the searchParams object\n Test the new logic by visiting http://localhost:3000/products/snowboard. Default option values should be selected on page load.\n This logic doesn't override a user selection, but it pre-populates selected options based on the first variant returned from the Storefront API.\n Step 7: Add a Shop Pay Button\n You've already created a page where customers can view and select your product. To add a Shop Pay button, you can refer to the Hydrogen React components for pre-built commerce primitives.\n Hydrogen React components add client-side ecommerce functionality to JavaScript-based apps. In this step, you'll use the Money and ShopPay components to simplify your development experience.\n Get the Shop Domain\n To use the Shop Pay button, you'll need to get the shop's primary domain from the Storefront API.\n Update your PRODUCT_QUERY to also fetch the shop's primary domain URL.\n app/routes/products.$handle.jsx\n 1 const PRODUCT_QUERY = `#graphql\n 2\n    query product($handle: String!, $selectedOptions: [SelectedOptionInput!]!) {\n 3\n      shop {\n 4\n        primaryDomain {\n 5\n          url\n 6\n        }\n 7\n      }\n 8\n      product(handle: $handle) {\n 9\n        id\n 10\n        title\n 11\n        handle\n 12\n        vendor\n 13\n        description\n 14\n        descriptionHtml\n 15\n        featuredImage {\n 16\n          id\n 17\n          url\n 18\n          altText\n 19\n          width\n 20\n          height\n 21\n        }\n 22\n        options {\n 23\n          name,\n 24\n          values\n 25\n        }\n 26\n        selectedVariant: variantBySelectedOptions(selectedOptions: $selectedOptions) {\n 27\n          id\n 28\n          availableForSale\n 29\n          selectedOptions {\n 30\n            name\n 31\n            value\n 32\n          }\n 33\n          image {\n 34\n            id\n 35\n            url\n 36\n            altText\n 37\n            width\n 38\n            height\n 39\n          }\n 40\n          price {\n 41\n            amount\n 42\n            currencyCode\n 43\n          }\n 44\n          compareAtPrice {\n 45\n            amount\n 46\n            currencyCode\n 47\n          }\n 48\n          sku\n 49\n          title\n 50\n          unitPrice {\n 51\n            amount\n 52\n            currencyCode\n 53\n          }\n 54\n          product {\n 55\n            title\n 56\n            handle\n 57\n          }\n 58\n        }\n 59\n        variants(first: 1) {\n 60\n          nodes {\n 61\n            id\n 62\n            title\n 63\n            availableForSale\n 64\n            price {\n 65\n              currencyCode\n 66\n              amount\n 67\n            }\n 68\n            compareAtPrice {\n 69\n              currencyCode\n 70\n              amount\n 71\n            }\n 72\n            selectedOptions {\n 73\n              name\n 74\n              value\n 75\n            }\n 76\n          }\n 77\n        }\n 78\n      }\n 79\n    }\n 80 `;\n Destructure the shop object from the response.\n app/routes/products.$handle.jsx\n 1 const {shop, product} = await context.storefront.query(PRODUCT_QUERY, {\n 2\n    variables: {\n 3\n      handle,\n 4\n      selectedOptions,\n 5\n    },\n 6 });\n Return the shop object in the json() function.\n app/routes/products.$handle.jsx\n 1 return json({\n 2\n    shop,\n 3\n    product,\n 4\n    selectedVariant,\n 5 });\n In the ProductHandle function, destructure shop to the useLoaderData() hook.\n app/routes/products.$handle.jsx\n 1 const {shop, product, selectedVariant} = useLoaderData();\n Render the Shop Pay Button\n In the products.$handle.jsx file, import the Hydrogen React components to render pricing and the Shop Pay button:\n app/routes/products.$handle.jsx\n 1 import {Image, Money, ShopPayButton} from '@shopify/hydrogen-react';\n Below the <ProductOptions>, render the price and the Shop Pay button:\n app/routes/products.$handle.jsx\n 1 <ProductOptions\n 2\n    options={product.options}\n 3\n    selectedVariant={selectedVariant}\n 4 />\n 5 <Money\n 6\n    withoutTrailingZeros\n 7\n    data={selectedVariant.price}\n 8\n    className=\"text-xl font-semibold mb-2\"\n 9 />\n 10 {selectedVariant.availableForSale && (\n 11\n    <ShopPayButton\n 12\n      storeDomain={shop.primaryDomain.url}\n 13\n      variantIds={[selectedVariant?.id]}\n 14\n      width={'400px'}\n 15\n    />\n 16 )}\n The pricing should now show for the selected variant, and you can jump directly to a Shop Pay checkout (if the store has it activated).\n The product page now renders all of the details for a product and its variants. It also includes a button to purchase the product.\n Next steps\n Implement an Add to cart button, enabling customers to choose products to purchase before entering the payment process.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n What you'll learn\n Requirements\n Step 1: Create a product route\n Step 2: Setup the Remix loader to get product data\n Step 3: Query the Storefront API\n Step 4: Display title, description, and product images\n Step 5: Render the product variant options\n Step 6: Set a default variant\n Step 7: Add a Shop Pay Button\n Next steps\n Updates & News",
                    "filename": "docs/custom-storefronts/hydrogen/building/product-details-page/content.txt",
                    "start_index": 23643,
                    "end_index": 30600,
                    "start_line": 895,
                    "end_line": 1215,
                    "max_line": 1215,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Secure tokens\n Shortened URLs\n Setting up Iframe protection\n Apps on the Shopify App Store must set the proper Content Security Policy frame-ancestors directive to avoid clickjacking attacks. If the Content Security Policy frame-ancestors directive is missing or set incorrectly when you submit your app to the Shopify App Store, then your app might be rejected. You'll be required to address this before re-submitting your app for review.\n Tip\n To learn more about clickjacking, refer to Portswigger's Web Academy or OWASP Clickjacking. To learn more about the frame-ancestors directive, refer to MDN Web Docs.\n Embedded Apps\n If your app is an embedded app, then you need to make sure that your app is only frameable by the authenticated shop domain. Set the frame-ancestors directive dynamically based on the current shop domain and the Shopify admin domain. Setting this directive guarantees that your app can be framed only within the shop admin.\n For example, if the shop shopify-dev.myshopify.com installs your app, then the response headers from your app when being rendered by this shop will contain the following frame-ancestors declaration:\n 1 Content-Security-Policy: frame-ancestors https://shopify-dev.myshopify.com https://admin.shopify.com;\n You can include other declarations in your Content-Security-Policy header besides frame-ancestors.\n Note\n The frame-ancestors declaration must be different for every shop, and these headers must be present in any routes that render HTML content.\n Apps that aren't embedded\n If your app isn't embedded, then we recommend setting the frame-ancestors directive to 'none' in order to disallow framing.\n Content-Security-Policy: frame-ancestors 'none';\n Troubleshooting\n Apps can fail to meet the iframe protection requirement in the following ways:\n The app isn't embedded, but is configured as an embedded app in the Partner Dashboard\n The app is embedded, but isn't following the expected frame-ancestors guidelines\n The following scenarios explain how to correct these issues.\n The app shouldn't be embedded, but is configured as an embedded app in the Partner Dashboard\n If your app isn't embedded in the shop admin, then it shouldn't be configured as embedded in the Partner Dashboard.\n Follow these steps to check the configuration of your app:\n Log in to your Partner Dashboard.\n Click Apps.\n Click the name of your app.\n Click Configuration.\n In the Embedded in Shopify admin section, set the value for Embed app in Shopify admin to True.\n Click Save and release.\n The app is embedded, but isn't following the expected frame-ancestors guidelines\n This scenario uses the following example values:\n Fraud Filter as the app\n cambridgetestshop-staging.myshopify.com as the shop\n To validate whether Fraud Filter implements the expected headers, follow these steps:\n Log in to the cambridgetestshop-staging shop.\n Click Apps.\n Right-click anywhere on the page and select Inspect.\n Select the Network tab.\n Load your app by clicking on its name. The content of the Network tab will start to change.\n Click Doc in the Network tab to filter requests for documents.\n Click the document to load a panel with more details.\n If there's more than one document, then select the last one in the list.\n Check the Request URL. The URL should be from the app's domain. In this scenario, the Request URL is from the Fraud Filter app domain.\n Check that the \"frame-ancestors\" directive is included in the \"Content-Security-Policy\" header.\n In this scenario, the directive is correctly included for the cambridgetestshop-staging.myshopify.com shop.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Embedded Apps\n Apps that aren't embedded\n Troubleshooting\n Updates & News\n Developer changelog\n Partner blog",
                    "filename": "docs/apps/store/security/iframe-protection/content.txt",
                    "start_index": 0,
                    "end_index": 3747,
                    "start_line": 1,
                    "end_line": 55,
                    "max_line": 55,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Verify that the sold out message or badge is displayed when applicable.\n Product page\n Run the following tests on your product page, on each of the product configurations outlined. For each of these tests, verify the following:\n Customers can add a selected variant to the cart\n Variant information changes dynamically when different variants are selected\n Customers are prevented from adding more than the available quantity of items to the cart\n Product configurations\n Single product (no variants)\n On sale product\n Product with one option\n Product with more than 1 option with different variant quantity inventories (out of stock variant, unavailable variant).\n Product with three options\n Product with 100 variants\n Product with no image\n Product with varying product media (image, vidoe, 3D model. AR, MP4)\n Product with unit price\n Tests\n Add a product title:\n A single word title (30 characters, no spacing)\n A multi-word title (30-60 characters)\n Verify that when variants are selected from drop-down menus, product details are updated dynamically:\n Variant prices\n Variant media\n Variant SKU\n Action buttons (disable Add to cart and dynamic checkout buttons on sold out and unavailable variants)\n Variant selectors (cross out or disable sold out and unavailable variants)\n Unit price\n Shop Pay Installments banner\n Local pickup banner\n Inventory quantity (if applicable)\n Product images\n No image\n Test the following aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n PNG image\n Image zoom (if applicable)\n Color swatches (if applicable)\n Option to disable swatches\n Clear instruction on how to upload custom swatches\n Product description\n Add multiple paragraphs (minimum 1000 characters)\n Add links:\n Internal link\n External link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Add images (images must display as they appear in the rich text editor)\n Verify that an error message appears when customers try to add more than the available quantity of items to the cart\n Blog page\n Run the following tests on your blog page. For each of these tests, verify the following:\n All blog posts in the collection are accessible\n Multiple blog post image ratios are supported\n Must support varying blog post image ratios\n Blog post information must be visible. This includes the title, excerpt, author, date, and comment count\n If available, blog filtering works as expected and combining filter tags doesn't break the page\n Test the way the grid responds to blog images of different aspect ratios, using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Test blog filtering (if applicable):\n Filter by a single-word tag (30 characters, no spacing)\n Filter by a long list of tags (20+ tags)\n Test a blog with many posts:\n Test pagination (if applicable)\n Verify that only five pages show on initial load\n Test the View more button (if applicable)\n Test infinite scrolling (if applicable)\n Blog post page (Article)\n Run the following tests on your blog post page.\n Add blog post content:\n Add multiple paragraphs (minimum 1000 characters)\n Add links:\n Internal link\n External link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Add images (images must display as they appear in the rich text editor)\n Add comments:\n Input comment text\n Submit the form\n Test error detection and handling\n Test the submission success message\n Verify that comments over a certain limit are paginated\n Test the following blog post image aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Cart page, modal, or drawer\n Run the following tests on your cart. For each of these tests, verify the following:\n All products in the cart are fully visible\n The customer must be able to update the product quantity\n Automatic discounts must update dynamically\n Add enough products to the cart to trigger scrolling\n Setting 0 for quantity should remove the product\n Verify that an error message appears when customers try to add more than the available quantity of items to the cart\n Automatic discount\n Cart notes\n Search page\n Run the following tests on your search page. For each of these tests, verify that search result attributes are fully visible.\n Verify that the number of results displayed on first load is limited\n Test pagination (if applicable):\n Pagination truncates on search results with five or more pages\n Test the View more button (if applicable)\n Test infinite scrolling (if applicable)\n Test filtering (if applicable)\n Test both list and grid view (if applicable)\n Test error detection and handling, for example, when no results are found\n Pages\n Run the following tests on a page that uses the generic page template. For each of these tests, verify that page content is fully visible.\n Add a page title:\n A single word title (30 characters, no spacing)\n A multi-word title (30-60 characters)\n Add multiple paragraphs (minimum 3000 characters)\n Add links:\n Internal link\n External link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Add image \u2013 must display imagery as inputted in the RTE\n Repeat testing for all existing product templates\n Pages (contact form template)\n Run the following tests on a page that uses the contact form template. For each of these tests, verify that customers can send the merchant an email using the contact form.\n Input text\n Test mandatory fields, such as the message field\n Submit the form\n Test error detection and handling\n Test the submission success message\n Gift card page\n Run the following tests on the gift card page. For each of these tests, verify that the gift card code and store name or logo is fully visible.\n Add logo fallback text:\n Long store name (30-40 characters, no spaces)\n Long store name with hyphens\n Add a logo:\n Test the following logo aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Transparent background on PNG image\n Logo scales appropriately\n Varying positions/alignments (if applicable)\n Gift card code must not be cut off\n 6. Link sharing\n Share a link to the store where you're testing your theme on various social media platforms. Verify that the sharing image appears. You can use tools like the Facebook sharing debugger and the Twitter card validator to perform this test.\n 7. Local pickup\n Test your local pickup banner in the following scenarios. Before you start, prepare your store to test local pickup.\n Variant 1 - available for pickup at five locations:\n Verify that the pickup banner appears\n When you click Check availability at other stores, verify that all locations are visible, and that you can scroll to see all location information\n Variant 2 - available for pickup at only one location:\n Verify that the pickup banner appears\n Verify that the Check availability at other stores text is updated to View store information\n Variant 3 - available for pickup at only two locations, and sold out one of those locations:\n Verify that the pickup banner appears, and indicates that the item is available or unavailable at one of the locations.\n Verify that the Check availability at other stores link is present\n Verify that clicking on Check availability at other stores brings up only two locations\n Variant 4 - only available at a location that doesn't offer pickup:\n Verify that the pickup banner is removed\n Variant 5 - sold out at all locations:\n Verify that the pickup banner is removed\n Verify that the Add to cart button is changed to Sold out\n Ensure the pickup banner changes dynamically when a new variant is selected\n 8. Unit pricing\n Test unit prices in your theme. Before you start, prepare your store to test unit pricing.\n Verify that unit prices change dynamically on variant change\n Verify that unit prices appear in the following locations:\n Product page\n Collection page product cards\n Cart drawer, page, or popup\n Customer order page\n 9. Rich media\n Test rich media in your theme. Before you start, prepare your store to test rich media.\n Verify 3D/AR behavior:\n Verify that you can view and move 3d models on desktop and mobile devices\n Verify that the View in your space button appears on mobile devices\n Verify that can view both AR objects on mobile devices\n Verify video behavior (YouTube, Vimeo, MP4):\n Verify that video controls are accessible\n Verify that you can mute and unmute videos\n Verify that you can play and pause videos\n Verify that variant display when the associated variant is selected\n Verify that rich media types don't break the product card layout of the collection page:\n YouTube\n Vimeo\n MP4\n 3D models\n 10. Selling plans\n Test selling plans in your theme. Before you start, prepare your store to test selling plans.\n Applied selling plans appear on the cart page\n Applied selling plans appear on the customer order page\n Was this section helpful?\n YesNo\n ON THIS PAGE\n 1. Home page\n 2. Header\n 3. Footer\n 4. Sections\n 5. Pages\n 6. Link sharing\n 7. Local pickup\n 8. Unit pricing\n 9. Rich media\n 10. Selling plans\n Updates & News\n Developer changelog",
                    "filename": "docs/themes/store/test-theme/checklist/content.txt",
                    "start_index": 13320,
                    "end_index": 22422,
                    "start_line": 353,
                    "end_line": 565,
                    "max_line": 565,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Subscriptions\n Deferred purchase options\n Build a user interface\n Build a customer-facing portal\n Overview\n Create customer-facing portals\n Markets\n B2B\n Channels\n Combined listings\n Billing\n App Store\n Create a customer-facing purchase option portal\n This tutorial describes how to create an automated, secure purchase option portal where customers can manage their purchase option information without interacting with merchants. Customers can use an email link or button to access the portal.\n What you'll learn\n In this tutorial, you'll learn how to do the following tasks:\n Expose a link or button to send an email\n Authenticate and access the customer-facing portal\n Make requests to the GraphQL Admin API to implement relevant views and forms on your app\n Update a customer's payment method\n Requirements\n Note\n Most Subscriptions, Pre-order and Try before you buy (TBYB) apps need to request API access through the Partner Dashboard. We give API access to apps that are designed according to our principles for Subscriptions, Pre-order and TBYB apps.\n Public apps that use Subscriptions, Pre-order or TBYB need to meet specific requirements to be published on the Shopify App Store.\n Custom apps created in the Shopify admin can't use Subscriptions, Pre-order or TBYB because these apps can't use extensions or request access to protected scopes. If you're building a solution for a single store, then build your custom app in the Partner Dashboard.\n Create a subscription or deferred purchase option app.\n Set up an app proxy with the following app proxy configuration:\n Subpath prefix: apps\n Subpath: my-purchase-option-app\n Proxy URL: https://my-purchase-option-app.com/app_proxy\n Access scopes\n Your app requires the following access scopes:\n Subscriptions\n write_products\n read_customer_payment_methods\n read_own_subscription_contracts\n write_own_subscription_contracts\n Deferred purchase options\n write_products\n read_all_orders\n read_customer_payment_methods\n read_purchase_options\n write_purchase_options\n read_payment_mandate\n write_payment_mandate\n Step 1: Expose a link or button to send an email\n Provide a link or button that triggers an email to be sent to a customer. You should place a link or button in an area that\u2019s accessible to the customer.\n You can provide a link or button in one of the following areas:\n On the customer account page on the storefront\n On the Order status page, by customizing the Order status page to expose a link or button\n In an email, sent directly to the customer after the app receives an order creation webhook or a subscription contract creation webhook. The email should contain a secure login link for the customer. For example,\n https://example.com/apps/my-purchase-option-app/customer_area?customer_id={customer_id}&shop_id={shop_id}&authentication_token={authentication_token}\n Caution\n You shouldn't render the login link on the shop's storefront because untrusted JavaScript in themes and apps can read and steal information.\n Step 2: Authenticate and access the customer-facing portal\n After you've exposed an action to send an email, the customer can use an email link to access the secure purchase option portal. Use an authentication scheme of your choice.\n Note\n The login link should be revocable. A fixed URL isn't safe to use because emails can be forwarded.\n Just verifying the authenticity of the URL isn't a secure method. Ideally, a tuple that includes the shop, customer, and token should be stored in the database.\n The token should be deleted whenever convenient. For example, you can expire the token after X minutes or when the customer signs off. In the case of a sign off, the customer can start the process again with another email that contains a new login URL.\n Learn about considerations for customer-facing portals.\n Step 3: Make requests to the GraphQL Admin API\n After clicking the link, the customer is redirected to an endpoint predetermined by the URL.\n For example, if the following URL is provided:\n https://example.com/apps/my-purchase-option-app/customer_area?customer_id={customer_id}&shop_id={shop_id}&authentication_token={authentication_token}\n Then Shopify makes a request to the following endpoint:\n https://my-purchase-option-app.com/app_proxy/customer_area?customer_id={customer_id}&shop_id={shop_id}&authentication_token={authentication_token}\n The app can then implement the relevant views and forms. For example, the app might do the following implementation tasks:\n Updating billing and shipping addresses\n Pausing, unpausing, skipping, and canceling subscriptions\n Canceling and modifying pre-orders\n All endpoints are forwarded from the app proxy into your app, as long as the links and form actions start with https://example.com/apps/my-purchase-option-app/.\n When your app receives the request, you can make further requests to the GraphQL Admin API. For example, you can use the sellingPlanCreate mutation and the subscriptionContractCreate mutation.\n Step 4: Update a customer's payment method\n For security reasons, customer payment methods, such as credit cards, can't be updated using the API. Customers need to authenticate their payment method where applicable or request a second email that redirects them to a secure flow where their payment method can be safely updated.\n After a customer has updated their payment method, the information is available to the app using the same customer payment method ID.\n The following request returns a secure URL to send to the customer to update their payment method:\n Request: POST /admin/api/2024-04.json\n 1 mutation {\n 2\n   customerPaymentMethodGetUpdateUrl(customerPaymentMethodId: \"b0761d88b49eba7568f3bcf795402080\") {\n 3\n     updatePaymentMethodUrl\n 4\n     userErrors {\n 5\n       code\n 6\n       field\n 7\n       message\n 8\n     }\n 9\n   }\n 10 }\n JSON response:\n 1 {\n 2\n   \"data\": {\n 3\n     \"customerPaymentMethodGetUpdateUrl\": {\n 4\n       \"updatePaymentMethodUrl\": {\n 5\n         \"https:\\/\\/shop1.myshopify.io\\/payment_methods\\/confirm?key=eyJfcmFpbHMiOnsibWVzc2FnZSI6IklqZzRZalpqTVRNNU1UVTJZbVV6WVdRMlpHVXpaRFEwWm1ZM016UTBZV0kwSWc9PSIsImV4cCI6IjIwMjEtMDktMTVUMjE6NTE6NTUuNTIwWiIsInB1ciI6bnVsbH19--07cc836a6ce419a16d0e7ddfc514f586e48e8eae\"\n 6\n       },\n 7\n       \"userErrors\": []\n 8\n     }\n 9\n   },\n 10\n   \"extensions\": {\n 11\n     \"cost\": {\n 12\n       \"requestedQueryCost\": 10,\n 13\n       \"actualQueryCost\": 10\n 14\n     }\n 15\n   }\n 16 }\n If the response is an error message or if the customer needs to update their payment method at a later date, then you can use the customerPaymentMethodSendUpdateEmail mutation to send an email to the email address associated with the specified ID.\n Request: POST /admin/api/2024-04.json\n 1 mutation {\n 2\n   customerPaymentMethodSendUpdateEmail(customerPaymentMethodId: \"b0761d88b49eba7568f3bcf795402080\") {\n 3\n     customer {\n 4\n       id\n 5\n     }\n 6\n     userErrors {\n 7\n       field\n 8\n       message\n 9\n     }\n 10\n   }\n 11 }\n JSON response:\n 1 {\n 2\n    \"data\": {\n 3\n      \"customerPaymentMethodSendUpdateEmail\": {\n 4\n        \"customer\": {\n 5\n          \"id\": \"gid://shopify/Customer/2\"\n 6\n 9\n    },\n 10\n    \"extensions\": {\n 11\n      \"cost\": {\n 12\n        \"requestedQueryCost\": 10,\n 13\n        \"actualQueryCost\": 10\n Step 1: Expose a link or button to send an email\n Step 2: Authenticate and access the customer-facing portal\n Step 3: Make requests to the GraphQL Admin API\n Step 4: Update a customer's payment method\n Updates & News",
                    "filename": "docs/apps/selling-strategies/purchase-options/customer-portal/create-customer-portal/content.txt",
                    "start_index": 0,
                    "end_index": 7438,
                    "start_line": 1,
                    "end_line": 175,
                    "max_line": 175,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product recommendations\n Overview\n Related products\n Complementary products\n Media and images\n Theme Store\n Product recommendations\n Displaying recommended products to customers makes it easier for them to discover new products, and can help to increase online store sales.\n Before you add product recommendations to your theme, it's a good idea to get familiar with the following:\n Recommendation intents\n How to track recommendations\n To learn how to include recommendations in your theme, refer to Related products and Complementary products. You can also refer to Dawn's implementation.\n Recommendation intents\n Tailoring product recommendations across the customer's journey is a powerful way to help customers discover products. Recommendation intents are designed to recommend products using a targeted strategy.\n Shopify provides the following types of recommendation intents:\n Related products: Offer customers a mix of products that are similar to a product the customer is interacting with. An example is substitutable products that display in a You might also like section.\n Complementary products: Offer customers products that are complementary to a product the customer is interacting with. An example is add-on products that display in a Pair it with section.\n Only related recommendations are auto-generated by Shopify. Complementary recommendations need to be manually set up. Recommended products for each intent can be configured using the Shopify Search & Discovery app.\n Track recommendations\n To track your product recommendations in Shopify, you need to use the format for product URLs that's specified by the API. To learn more, refer to Tracking conversions for product recommendations.\n After you've implemented product recommendations, you can track how effective they are directly from the Analytics page in your Shopify admin. To learn more about product recommendation reports, refer to Product recommendation conversion over time.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Recommendation intents\n Track recommendations\n Updates & News\n Developer changelog\n Partner blog\n Engineering blog",
                    "filename": "docs/themes/product-merchandising/recommendations/content.txt",
                    "start_index": 0,
                    "end_index": 2126,
                    "start_line": 1,
                    "end_line": 30,
                    "max_line": 30,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Customizing Shopify checkout\n Merchants use Shopify checkout to accept orders and receive payments wherever they sell online. You can augment Shopify checkout with new functionality by building an app.\n How it works\n After a customer adds products to a cart, they use Shopify checkout to enter their customer, shipping, and payment information before placing the order.\n Developers can create apps that extend Shopify checkout to include functionality that isn't provided natively. For example, you can create an app that offers a customer free shipping or other discounts depending on what's in their cart.\n Merchants install these apps on their store in the Shopify admin. In the Shopify admin, merchants can use the checkout editor to place a checkout UI extension in the checkout experience.\n Customization options\n You can customize Shopify checkout using multiple technologies. All customization options are easy to install and upgrade-safe, which enables merchants to continue getting platform benefits when Shopify releases new products such as Shop Pay, or features such as One-page checkout.\n For a detailed breakdown of the available technologies for customizing checkout, and ways that you can extend checkout, refer to the options for customizing Shopify checkout.\n Getting started\n Learn how to customize and extend checkout by following one of our use case tutorials:\n Pre-purchase product offers\n Build a pre-purchase upsell offer that prompts the customer to add a product to their order.\n Post-purchase checkout extensions\n Create a basic example of a post-purchase checkout extension.\n Thank you and order status extensions\n Build a survey that asks customers how they heard about the store after they made a purchase.\n Custom banners\n Learn how to add a custom banner to checkout.\n Custom fields\n Learn how to add custom fields to checkout that customers can use to add delivery instructions to their order.\n Client-side validation\n Use a checkout UI extension to validate fields at checkout and block customer progress.\n Header\n Use a checkout UI extension and the GraphQL Admin API's checkout branding types to customize the checkout header with custom images, including the back to cart link.\n Footer\n Use a checkout UI extension and the GraphQL Admin API's checkout branding types to customize the checkout footer with store policies.\n Discounts\n Use Shopify Functions to create a new discount type for users.\n Payment customizations\n Use Shopify Functions to hide a payment option offered to customers at checkout.\n Delivery customizations\n Use Shopify Functions to rename a delivery option offered to customers at checkout.\n Cart and checkout validations\n Use Shopify Functions to block progress on a checkout when the cart line quantities exceed a limit.\n Order routing location rules\n Use Shopify Functions to choose a different order location during checkout.\n Customized bundles\n Use Shopify Functions to group products together and sell them as a single unit.\n Fulfillment constraints\n Use Shopify Functions to customize fulfillment and delivery strategies.\n Upgrade\n Deprecated\n checkout.liquid is deprecated. It will be sunset for the Information, Shipping, and Payment checkout steps on August 13, 2024, and for the Thank you and Order status pages on August 28, 2025. Additional scripts and script tags will also be sunset for the Order status page on August 28, 2025.\n Stores that currently use checkout.liquid need to upgrade to Checkout Extensibility before these dates. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n A report identifying your current checkout customizations is available in the Shopify admin. The report provides high-level guidance to map customizations to Checkout Extensibility. Use this report to simplify your review of your existing customizations and to help you upgrade to Checkout Extensibility faster. Learn more.\n To upgrade a checkout.liquid customization to Checkout Extensibility, take one or more of the following actions:\n Use a public app that's built using extensions.\n We're adding new checkout apps to the Shopify App Store on a regular basis. If there currently isn't a suitable public app for your customization, then consider simplifying your checkout temporarily and adding new apps to your store as they become available.\n Build a custom app using extensions, or hire a service partner to build one for you.\n In some cases, after you've upgraded you can revert to checkout.liquid until its sunset dates.\n If you're upgrading a store to Checkout Extensibility, we recommend planning your in-checkout, Thank you page, and Order status page upgrades together, when possible, for the following benefits:\n Avoid maintaining multiple tech stacks, like UI extensions and checkout.liquid.\n Apply styling once to the entire experience.\n Manage one sunset date for checkout.liquid rather than one date for pre-purchase pages and another for Thank you and Order status pages.\n If this isn't possible, then we recommend prioritizing the upgrade for in-checkout pages first and upgrading after-purchase pages after that.\n Product roadmap\n Some checkout customization features are in development and will be released later this year. The following are the features on our roadmap and our estimated launch dates:\n Note\n This roadmap is being shared for informational purposes and is subject to change. Bug fixes and improvements will be added as we hear from the community during the developer preview. Please share your feedback on what future features you'd like to see in our community discussion board.\n Checkout UI extensions\n Checkout UI extensions are available to all Shopify Plus merchants. Some individual stores might not yet have access if they rely on features that are incompatible with Checkout Extensibility.\n Milestone Target\n Checkout UI extensions available on all eligible Plus stores January 2023 (shipped)\n General availability of extensions on the Thank you and Order status page (Plus plan only) November 2023 (shipped)\n General availability of extensions on the Thank you and Order status page (all plans above Starter) April 2024\n We'll continue adding API capabilities to help you access the right functionality in extensions. We'll also continue adding UI components that offer performant patterns on our design best practices. We release new components and APIs into the unstable API version first, and promote to the next stable release based on Shopify's API version release schedule.\n Feature Target launch date\n Support for reading and writing discount codes January 2023 (shipped)\n New UI components: Tooltip, Pressable January 2023 (shipped)\n Support for reading and writing gift cards February 2023 (shipped)\n New UI components: Popover, Modal February 2023 (shipped)\n Heading styles, button styles and corner radius controls through the Branding API February 2023 (shipped)\n Session token API to enable authenticated network calls February 2023 (shipped)\n New API that allows checkout UI extensions to directly query the Storefront API February 2023 (shipped)\n New UI components: Disclosure, DatePicker April 2023 (shipped)\n Merchant-uploaded custom fonts through the GraphQL Admin API April 2023 (shipped)\n Support for adding checkout field validation errors from UI extensions April 2023 (shipped)\n New API for SellingPlan on line items (read/write) May 2023 (shipped)\n New API for reading presented and selected payment options May 2023 (shipped)\n New API for reading presented and selected delivery options June 2023 (shipped)\n New UI components: DateField June 2023 (shipped)\n Developer preview of the Order status page in the checkout editor June 2023 (shipped)\n New extension targets for enhancing delivery options June 2023 (shipped)\n New API for cart metafields (read/write) July 2023 (shipped)\n New API for writing updates to the shipping address July 2023 (shipped)\n New API to read the customer billing address August 2023 (shipped)\n New API for reading price breakdown on checkout total August 2023 (shipped)\n New API to read a unique and stable session token for the current buyer checkout session September 2023 (shipped)\n New API for customized SMS consent capture September 2023 (shipped)\n New extension targets for extending payment options September 2023 (shipped)\n New UI component: Map September 2023 (shipped)\n Advanced color styling through the GraphQL Admin API September 2023 (shipped)\n New extension targets for header and footer customization November 2023 (shipped)\n New API to read and write cookie tracking consent January 2024 (shipped)\n Advanced section styling, such as borders and spacing, through the Branding API January 2024 (shipped)\n Customizations Report to identify existing checkout.liquid customizations with upgrade guidance January 2024 (shipped)\n Header and footer customizations through the Branding API January 2024 (shipped)\n New API to read checkout steps to enable buiding a custom breadcrumb March 2024 (shipped)\n New UI components for customer privacy consent collection Sheet March 2024 (shipped)\n Tailored upgrade guidance for existing checkout.liquid customizations March 2024\n Pre-filling the checkout state from inputs provided through the Cart API March 2024\n Support for custom address auto-completion April 2024\n Support for adding and updating additional fees April 2024\n New UI components for search and selection, including support for custom auto-completion May 2024\n Support for hiding or locking address input fields Q2 2024\n Support for styling order summary line items with the Branding API Q2 2024\n Support for integrating 3rd-party chat applications into checkout Q2 2024\n Input query API for customizing the data available to UI extensions Q2 2024\n Support for conditional (responsive) component rendering on mobile checkouts Q2 2024\n New UI components to support QR codes Q2 2024\n Shopify Functions\n We'll continue to add new Shopify Function APIs to further customize checkout business logic.\n Milestone Target\n General availability of Product Discount API and Order Discount API December 2022 (shipped)\n General availability of Payment Customization API and Delivery Customization API February 2023 (shipped)\n General availability of Cart Transform Function API July 2023 (shipped)\n General availability of Order Routing Location Rule API July 2023 (shipped)\n General availability of Fulfillment Constraints API July 2023 (shipped)\n General availability of Cart and Checkout Validation API for custom apps July 2023 (shipped)\n Developer preview of Function API to customize delivery options for local pickup September 2023 (shipped)\n Developer preview of Cart Transform Function API: per component pricing and update operation October 2023 (shipped)\n General availability of Cart and Checkout Validation API for public apps January 2024 (shipped)\n General availability of Cart Transform Function API: per component pricing and update operation January 2024 (shipped)\n General availability of Shipping Discount API January 2024 (shipped)\n Addition to the Product Discount API to return all applicable discounts January 2024 (shipped)\n Developer preview of Function API for integrating a 3rd-party pickup point network February 2024 (shipped)\n General availability of Function API to customize delivery options for local pickup Q1 2024\n General availability of Cart Transform Function API: per component pricing and update operation Q1 2024 (shipped)\n Addition to the Product Discount API to return all applicable discounts Q1 2024 (shipped)\n Developer Preview of Discounts Allocator Function API to customize discounts allocation logic Q1 2024 (shipped)\n Addition to the Product Discount API to target product line items Q2 2024\n Addition to the Product Discount API to stack multiple discounts on the same product line item Q2 2024\n Web pixel app extensions\n We'll continue to add new custom pixel and app pixel events and features.\n Milestone Target\n Add attributes to Checkout object March 2023 (shipped)\n Add firstName and lastName to Customer object March 2023 (shipped)\n Add productVariants to searchResult object March 2023 (shipped)\n Add address1, address2 and zip to mailingAddress object April 2023 (shipped)\n Add type to Product object April 2023 (shipped)\n New standard event: checkout_shipping_info_submitted April 2023 (shipped)\n New standard event: checkout_address_info_submitted April 2023 (shipped)\n New standard event: checkout_contact_info_submitted April 2023 (shipped)\n Add support for all collections in collection_viewed event May 2023 (shipped)\n Add ordersCount to Customer object June 2023 (shipped)\n Custom pixel saved versions July 2023 (shipped)\n Add discountApplications to Checkout object July 2023 (shipped)\n Add DiscountApplication.allocationMethod to Checkout object July 2023 (shipped)\n New standard event: cart_viewed event July 2023 (shipped)\n New standard event: product_removed_from_cart event August 2023 (shipped)\n Add Product.url to ProductVariant September 2023 (shipped)\n Add billingAddress to Checkout object September 2023 (shipped)\n New Custom Pixel Autocomplete - helps to write custom pixels referencing the standard event schema September 2023 (shipped)\n New visitor API September 2023 (shipped)\n Add Transaction.gateway to Checkout object October 2023 (shipped)\n New standard event: DOM events - clicked , input_blurred, input_focused, input_changed, form_submitted January 2024 (shipped)\n New Pixel Granular Consent Purposes February 2024\n Custom Pixel debugging tool for troubleshooting firing and event data Q2 2024\n Customize standard event payloads with checkout data Q2 2024\n Web pixels on Shop Pay Q3 2024\n New standard event: JavaScript error events Q3 2024\n Was this section helpful?\n YesNo\n ON THIS PAGE\n How it works\n Customization options\n Getting started\n Upgrade\n Product roadmap",
                    "filename": "docs/apps/checkout/content.txt",
                    "start_index": 0,
                    "end_index": 13869,
                    "start_line": 1,
                    "end_line": 170,
                    "max_line": 170,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                }
            ]
        },
        "mmr_code_snippets_initial": [
            {
                "code": "{\n                    title: t('Add Rewards'),\n                    badge: editorData.rewardsModule\n                      ? {\n                          children: t('Completed'),\n                          status: t('success'),\n                        }\n                      : undefined,\n                    description: t('Add a rewards module to offer urge customers to shop more. Create a free shipping bar, offer a free gift, or other rewards.'), // prettier-ignore\n                    action: {\n                      content: t('Add Rewards'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=rewards`);\n                      },\n                    },\n                  },\n                  {\n                    title: t('Confirm UpCart Compatibility'),\n                    description: t(\"Although UpCart uses standard Shopify technologies, not all apps do. Ensure any other apps you're using function as expected.\"), // prettier-ignore\n                  },\n                  // {\n                  //   title: t('Sell more with AfterSell \ud83d\udcb8'),\n                  //   description: t(\"AfterSell enables checkout and post-purchase upsells. It's a great way to increase your AOV and sell more. Learn more about AfterSell and get a free trial.\"), // prettier-ignore\n                  //   action: {\n                  //     content: t('Boost my Sales'),\n                  //     onAction: () => {\n                  //       navigate(ROUTE_OBJECTS.AFTERSELL_AD.url);\n                  //     },\n                  //   },\n                  // },\n                ]}",
                "filename": "web/src/@templates/Home/Home.tsx",
                "start_index": 7463,
                "end_index": 9094,
                "start_line": 1,
                "end_line": 233,
                "max_line": 260,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const dawnCartHtml = `<svg class=\"icon icon-cart\" aria-hidden=\"true\" focusable=\"false\" role=\"presentation\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 40 40\" fill=\"none\">\n  <path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M20.5 6.5a4.75 4.75 0 00-4.75 4.75v.56h-3.16l-.77 11.6a5 5 0 004.99 5.34h7.38a5 5 0 004.99-5.33l-.77-11.6h-3.16v-.57A4.75 4.75 0 0020.5 6.5zm3.75 5.31v-.56a3.75 3.75 0 10-7.5 0v.56h7.5zm-7.5 1h7.5v.56a3.75 3.75 0 11-7.5 0v-.56zm-1 0v.56a4.75 4.75 0 109.5 0v-.56h2.22l.71 10.67a4 4 0 01-3.99 4.27h-7.38a4 4 0 01-4-4.27l.72-10.67h2.22z\"></path>\n  </svg><span class=\"visually-hidden\">Cart</span><div class=\"cart-count-bubble\"><span aria-hidden=\"true\"></span></div>`;\n\nconst dawnEmptyCartHtml = `<svg class=\"icon icon-cart-empty\" aria-hidden=\"true\" focusable=\"false\" role=\"presentation\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 40 40\" fill=\"none\">\n  <path d=\"m15.75 11.8h-3.16l-.77 11.6a5 5 0 0 0 4.99 5.34h7.38a5 5 0 0 0 4.99-5.33l-.78-11.61zm0 1h-2.22l-.71 10.67a4 4 0 0 0 3.99 4.27h7.38a4 4 0 0 0 4-4.27l-.72-10.67h-2.22v.63a4.75 4.75 0 1 1 -9.5 0zm8.5 0h-7.5v.63a3.75 3.75 0 1 0 7.5 0z\" fill=\"currentColor\" fill-rule=\"evenodd\"></path>\n  </svg><span class=\"visually-hidden\">Cart</span>`;\n\nconst emptyCartElement = document.querySelector('a#cart-icon-bubble');\n\nconst defaultImpulseWithItemHtml = `<span class=\"cart-link\"><svg aria-hidden=\"true\" focusable=\"false\" role=\"presentation\" class=\"icon icon-bag\" viewBox=\"0 0 64 64\"><g fill=\"none\" stroke=\"#000\" stroke-width=\"2\"><path d=\"M25 26c0-15.79 3.57-20 8-20s8 4.21 8 20\"></path><path d=\"M14.74 18h36.51l3.59 36.73h-43.7z\"></path></g></svg><span class=\"icon__fallback-text\">Cart</span><span class=\"cart-link__bubble cart-link__bubble--visible\"></span></span>`;\nconst defaultImpulseEmptyHtml = `<span class=\"cart-link\"><svg aria-hidden=\"true\" focusable=\"false\" role=\"presentation\" class=\"icon icon-bag\" viewBox=\"0 0 64 64\"><g fill=\"none\" stroke=\"#000\" stroke-width=\"2\"><path d=\"M25 26c0-15.79 3.57-20 8-20s8 4.21 8 20\"></path><path d=\"M14.74 18h36.51l3.59 36.73h-43.7z\"></path></g></svg><span class=\"icon__fallback-text\">Cart</span><span class=\"cart-link__bubble\"></span></span>`;\n\nconst defaultDawnHandler = (count: number) => {\n  const cartElement: HTMLElement | null = document.querySelector(\n    \"a#cart-icon-bubble div[class~='cart-count-bubble'] > span\",\n  );\n\n  if (emptyCartElement) {\n    if (!cartElement && count !== 0) {\n      emptyCartElement.innerHTML = dawnCartHtml;\n    }\n\n    if (cartElement && count === 0) {\n      emptyCartElement.innerHTML = dawnEmptyCartHtml;\n    }\n  }\n};\n\nconst impulseHandler = (count: number) => {\n  const cartElement = document.querySelector(\"a[href*='/cart'][aria-controls='CartDrawer']\");\n  if (!cartElement || !count) return;\n  if (count === 0) {\n    cartElement.innerHTML = defaultImpulseEmptyHtml;\n  } else {\n    cartElement.innerHTML = defaultImpulseWithItemHtml;\n  }\n};\n\n// alevrenl.myshopify.com",
                "filename": "web/storefront/src/platform/online-store/cart/cart.ts",
                "start_index": 20703,
                "end_index": 23627,
                "start_line": 543,
                "end_line": 582,
                "max_line": 589,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n  id: 7680954040579,\n  title: 'Placeholder Product',\n  handle: 'derby-tier-backpack',\n  description:\n    '\\u003cp\\u003e\\u003cem\\u003eThis is a demonstration store. You can purchase products like this from \\u003ca href=\"http://unitedbyblue.com/\" target=\"_blank\"\\u003eUnited By Blue\\u003c/a\\u003e.\\u003c/em\\u003e\\u003c/p\\u003e\\n\\u003cp\\u003eOur Derby backpack is built with downpour proof sustainable canvas complemented by leather trim and brass hardware. Features padded canvas shoulder straps adjustable for all -day comfort. Finished with a drawstring closure and snap buckles to keep your belongings safe and secure on any trail taken.\\u003c/p\\u003e\\n\\u003cul\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003e100% organic waxed 18 oz canvas\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003eFull grain genuine leather trim\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003eHeavy-duty brass hardware and YKK zippers\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003eLifetime\\u00a0Guarantee\\u003c/li\\u003e\\n\\u003c/ul\\u003e\\n\\u003cul class=\"tabs-content\"\\u003e\\u003c/ul\\u003e',\n  published_at: '2022-05-07T13:11:39-06:00',\n  created_at: '2022-05-07T13:11:41-06:00',\n  vendor: 'United By Blue',\n  type: 'Bags',\n  tags: [],\n  price: 11300,\n  price_min: 11300,\n  price_max: 11300,\n  available: true,\n  price_varies: false,\n  compare_at_price: 12600,\n  compare_at_price_min: 12600,\n  compare_at_price_max: 12600,\n  compare_at_price_varies: false,\n  variants: [\n    {\n      id: 42789609046275,\n      title: 'Nutmeg',\n      option1: 'Nutmeg',\n      option2: null,\n      option3: null,\n      sku: '4160',\n      requires_shipping: true,\n      taxable: true,\n      featured_image: null,\n      available: true,\n      name: 'Derby Tier Backpack - Nutmeg',\n      public_title: 'Nutmeg',\n      options: ['Nutmeg'],\n      price: 11300,\n      weight: 1361,\n      compare_at_price: 12600,\n      inventory_management: 'shopify',\n      barcode: '',\n      requires_selling_plan: false,\n      selling_plan_allocations: [],\n    },\n  ],\n  images: [\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_nutmeg_810294de-9152-4bf7-b5e0-b88fc94a1ff8.jpg?v=1651950701',\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_moss_drawstring.jpg?v=1651950701',\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/product_lifestyle-58.jpg?v=1651950701',\n  ],\n  featured_image:\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_nutmeg_810294de-9152-4bf7-b5e0-b88fc94a1ff8.jpg?v=1651950701',\n  options: [{ name: 'Color', position: 1, values: ['Nutmeg'] }],\n  url: NO_HREF, // prevent redirect in preview",
                "filename": "web/src/@templates/CartEditor/platform/preview/products/fake-products.ts",
                "start_index": 4669,
                "end_index": 7380,
                "start_line": 1,
                "end_line": 504,
                "max_line": 559,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "sortedTiers.forEach((tier, index) => {\n      //Only the 'discountProduct' reward type has product(s)\n      if (tier.targetType === 'discountProduct' && tier.products) {\n        if (index <= currentTier) {\n          //Products to be added\n\n          tier.products.forEach((product, productIndex) => {\n            //Check if the product is in the cart, if it isn't we need to add it\n            let cartIndex = cart.items.findIndex(\n              (item) =>\n                item.properties &&\n                item.properties.__upcartTier === index &&\n                item.properties.__upcartProductTier === productIndex,\n            );\n\n            //Check the \"lock\" to see if the product has already been added, in the process of being added or failed to add\n            let productAddedLock = sessionStorageEngine.get(`upcartTier${index}_${productIndex}AddedToCart`, true);\n\n            if (cartIndex === -1 && !productAddedLock) {\n              //Item was not found in the cart & the lock is available\n\n              //Get the variantId\n              let variantId = product?.variants?.edges?.[0]?.node?.id;\n              variantId = variantId?.split('/')[4];\n\n              itemsToAdd.push({\n                variantId: Number(variantId),\n                quantity: 1,\n                properties: {\n                  [REWARD_ITEM_PROPERTY_KEY]: variantId,\n                  __upcartTier: index,\n                  __upcartProductTier: productIndex,\n                } as UpcartRewardsCartProperties,\n              });\n            }\n          });\n        } else {\n          //Products to be removed\n          //Find all items in the cart, matching the Tier, and mark them for removal\n          let products = cart.items.filter((item) => item.properties && item.properties.__upcartTier === index);\n\n          products.forEach((product) => {\n            itemsToRemove.push({\n              key: product.key,\n              lineIdxFrom1: product.lineIdxFrom1,\n              newQuantity: (product?.quantity || 1) - 1,\n              properties: {\n                [REWARD_ITEM_PROPERTY_KEY]: product.variant_id.toString(),\n                __upcartTier: index,\n                __upcartProductTier: product?.properties?.__upcartProductTier,\n              } as UpcartRewardsCartProperties,\n            });\n          });\n\n          tier.products.forEach((product, productIndex) => {\n            //Check if the product is in the cart\n            let cartIndex = cart.items.findIndex(\n              (item) =>\n                item.properties &&\n                item.properties.__upcartTier === index &&\n                item.properties.__upcartProductTier === productIndex,\n            );\n\n            //If the user removed a product from the cart, we need to remove the lock\n            if (cartIndex === -1) {\n              sessionStorageEngine.unset([`upcartTier${index}_${productIndex}AddedToCart`]);\n            }\n          });\n        }\n      }\n    });\n\n    //\"Acquire\" the locks",
                "filename": "web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx",
                "start_index": 9879,
                "end_index": 12845,
                "start_line": 269,
                "end_line": 341,
                "max_line": 492,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "export async function handlePlanAcceptanceCallback({\n  shopifyService,\n  embeddedAppUrl,\n  unauthenticatedUnsafeAcceptedShopifyChargeId,\n}: {\n  shopifyService: ShopifyService;\n  embeddedAppUrl: URL;\n  unauthenticatedUnsafeAcceptedShopifyChargeId: number | null;\n}): Promise<PlanAcceptanceCallbackRedirect> {\n  const initiatedPlanAcceptance = await InitiatedPlanAcceptanceModel.findOneAndDelete({\n    shop: shopifyService.shop,\n    shopifyChargeId: unauthenticatedUnsafeAcceptedShopifyChargeId,\n  });\n  if (!initiatedPlanAcceptance) {\n    throw new Error(\n      `[${shopifyService.shop}] Cannot accept plan because the plan acceptance was not initiated through our server. This is a security risk and could indicate a malicious attempt to change a shop's plan. Shopify charge id: ${unauthenticatedUnsafeAcceptedShopifyChargeId}`,\n    );\n  }\n\n  // track userlist event for plan accepted\n  await trackUserlistEvent({\n    domain: shopifyService.shop,\n    eventName: USERLIST_EVENTS.upcart_pricing_accept,\n  });\n  const safeChargeId = initiatedPlanAcceptance.shopifyChargeId;\n  const isCancellingCharge = !safeChargeId;\n  if (isCancellingCharge) {\n    const activeSubscription = await shopifyService.getActiveSubscription();\n    if (activeSubscription) {\n      await shopifyService.graphql.AppSubscriptionCancel({ id: activeSubscription.id });\n    }\n  }\n  const shop = await ShopModel.findOneAndUpdate({ domain: shopifyService.shop }, [\n    {\n      $set: {\n        acceptedUpcartPlanId: initiatedPlanAcceptance.upcartPlanId,\n        hasAcceptedBilling: true,\n        // only update the firstFreeTrialStartDate if it is not already set\n        firstFreeTrialStartDate: {\n          $cond: {\n            if: '$firstFreeTrialStartDate',\n            then: '$firstFreeTrialStartDate',\n            else: new Date(Date.now()),\n          },\n        },\n      },\n    },\n  ]);\n  const hasCompletedOnboarding = Boolean(shop.isInstall);\n  const redirectUrl = new URL(embeddedAppUrl.toString());\n  if (!hasCompletedOnboarding) {\n    redirectUrl.pathname += '/onboarding';\n  }\n  return {\n    redirectUrl: redirectUrl.toString(),\n  };\n}",
                "filename": "web/server/modules/billing/plan-acceptance/plan-acceptance.ts",
                "start_index": 1340,
                "end_index": 3454,
                "start_line": 38,
                "end_line": 161,
                "max_line": 161,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<div className={`upcart-product-image-wrapper ${styles.ProductRow__imageWrapper}`}>\n            {/*anti-pattern of disabling link was chosen in order to preserve existing DOM structure & merchant custom CSS*/}\n            <a href={itemIsReward(item) ? '/' : item.url} data-no-pointer={itemIsReward(item)}>\n              {src ? <img src={src} alt={item.title} /> : <ImageMajor height=\"75%\" width=\"75%\" />}\n            </a>\n          </div>\n        </div>\n        <div className=\"Stack__item Stack__item--fill\">\n          <div className={styles.ProductRow__productHeading}>\n            <div className={styles.ProductRow__productTitleAndVariant}>\n              <h3\n                className={`upcart-product-title UpcartDesignSettings__cartTextColor ${styles.ProductRow__productTitle}`}\n              >\n                <a\n                  className={`upcart-product-title-link ${styles.ProductRow__productTitleLink}`}\n                  href={itemIsReward(item) ? '/' : item.url}\n                  data-no-pointer={itemIsReward(item)}\n                >\n                  {item.product_title}\n                </a>\n              </h3>\n              {!item.product_has_only_default_variant &&\n                item.options_with_values?.map((option: any) => (\n                  <div\n                    key={option.name}\n                    className=\"upcart-item-option\"\n                    data-upcart-item-option-category={option.name}\n                    data-upcart-item-option-value={option.value}\n                  >\n                    <span className=\"TextStyle--variationSubdued UpcartDesignSettings__cartTextSubduedColor\">\n                      <span className=\"upcart-item-option-category\">{option.name}: </span>\n                      <span className=\"upcart-item-option-value\">{option.value}</span>\n                    </span>\n                  </div>\n                ))}\n              <div className=\"upcart-item-properties-anchor-before\" />\n              <ProductProperties item={item} settings={settings} />\n              <div className=\"upcart-item-properties-anchor-after\" />\n            </div>\n            {!isTrashLoading && (\n              <TrashButton\n                cartIsLoading={cartIsLoading}\n                isTrashLoading={isTrashLoading}\n                setIsTrashLoading={setIsTrashLoading}\n                onClick={() => deleteProductItem(item)}\n              />\n            )}\n          </div>\n          <div>\n            <div className=\"Stack Stack--noWrap Stack--distributionEqualSpacing Stack--alignmentCenter\">\n              <div className=\"Stack__item\">\n                {shouldShowQuantitySelector && (\n                  <div className={styles.ProductRow__stepper}>",
                "filename": "web/storefront/src/components/common/SingleProductRow/SingleProductRow.tsx",
                "start_index": 5370,
                "end_index": 8065,
                "start_line": 135,
                "end_line": 187,
                "max_line": 257,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "// SHINEON PRODUCT TEMPLATE\nconst handleAddToCartForShineon = (platform: CartPlatform, e: DOMEvent<HTMLInputElement>): boolean => {\n  if (e.target.id && e.target.id.includes('so-btn-add-to-cart')) {\n    // const isBwBox = (document.querySelector('#product-form-options-wrap .so-variant-change.so-active') as HTMLInputElement | null)?.dataset.option1;\n    //\n    // if (isBwBox === \"B&W Box\") {\n    //   const shineonModal: HTMLElement | null = document.querySelector(\".so-modal.so-modal-e-and-g-upsell.fade.in\");\n    //   const shineonModalBackdrop: HTMLElement | null = document.querySelector(\".so-modal-backdrop.fade.in\");\n    //\n    //   if (shineonModal) {\n    //     shineonModal.style.display = \"block\";\n    //\n    //     if (shineonModalBackdrop) shineonModalBackdrop.style.display = \"block\";\n    //   }\n    //\n    //   return true;\n    // }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n\n    const items: Items[] = [];\n    const params = new URLSearchParams(document.location.search);\n    const productId = params.get('variant') || e.target.id.slice(e.target.id.lastIndexOf('-') + 1);\n    const quantity: string = (document.querySelector('.so-cart-qty-input') as HTMLInputElement | null)?.value || '1';\n    console.debug('this');\n    items.push({ id: productId, quantity: quantity });\n\n    // Addons\n    const addons: NodeListOf<HTMLInputElement> = document.querySelectorAll('.addon_product-label');\n\n    if (addons && addons.length !== 0) {\n      for (const addon of addons) {\n        const addonId = (addon.querySelector('input[type=checkbox]:checked') as HTMLInputElement | null)?.dataset\n          .variantId;\n\n        if (addonId) {\n          const quantity = (addon.querySelector('.addon__quantity') as HTMLInputElement | null)?.innerText || '1';\n          items.push({ id: addonId, quantity: quantity, properties: {} });\n        }\n      }\n    }\n\n    manyAddToCart(platform, items);\n\n    return true;\n  }\n\n  return false;\n};",
                "filename": "web/storefront/src/interceptors/handlers/handleAddToCartException.ts",
                "start_index": 4845,
                "end_index": 6796,
                "start_line": 123,
                "end_line": 199,
                "max_line": 201,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "/**\n * This file is for integration with the Product Options & Customizer app.\n * https://apps.shopify.com/product-customizer\n */\nimport { REWARD_ITEM_PROPERTY_KEY } from '../constants';\nimport type { CartItem } from '../platform';\n\nexport function itemIsProductCustomizerAddon(item: CartItem) {\n  return item.product_type === 'SHOPSTORM_HIDDEN_PRODUCT';\n}\n\nexport function itemIsReward(item: CartItem): boolean {\n  return Boolean(item.properties?.[REWARD_ITEM_PROPERTY_KEY]);\n}",
                "filename": "web/storefront/src/utils/product-customizer.ts",
                "start_index": 0,
                "end_index": 478,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const PRIMARY_CART_BUTTON_SELECTOR = [\n  // We use the \"*=\" operator to allow selecting all of the following:\n  // - <a href=\"/cart\">\n  // - <a href=\"https://test.com/cart\">\n  // - <a href=\"/cart?foo=bar\">\n  \"a[href*='/cart']\",\n\n  // We do not want to accidentally select a link that is supposed to _modify_ the cart.\n  // If we didn't have these conditions, then we would break cart editing functionality.\n  \":not([href*='/cart/change'])\",\n  \":not([href*='/cart/add'])\",\n  \":not([href*='/cart/clear'])\",\n\n  // We do not want to accidentally select a link to a product or collection\n  // that starts with \"cart...\", such as:\n  // - <a href=\"/products/cart-wheel\">\n  // - <a href=\"/collections/cart-wheels\">\n  \":not([href*='/products/cart'])\",\n  \":not([href*='/collections/cart'])\",\n\n  // The .upcart class is used for the following purposes:\n  // 1. to ensure that the checkout button can go to cart if the setting is enabled\n  // 2. in custom buttons to prevent UpCart from overriding the click\n  \":not([class*='upcart'])\",\n\n  // For compatibility with Revy (https://apps.shopify.com/sales-booster-upsell-cross-sell-by-revy-shopify-apps),\n  // we don't want to override clicks on their button.\n  \":not([class*='revy-upsell-btn-cart'])\",\n\n  // We do not want to accidentally select a link that includes a discount code that includes \"cart\".\n  // These links could be direct discount links, or checkout links that include the discount code in\n  // the URL.\n  // - <a href=\"/checkout?discount=cart-discount\">\n  // - <a href=\"/discount/cart-discount\">\n  \":not([href*='/checkout'])\",\n  \":not([href*='/discount'])\",\n\n  // The following group of conditions is used to prevent selecting Cart Permalinks.\n  // Reference: https://shopify.dev/docs/apps/checkout/cart-permalinks/cart-permalinks\n  //\n  // Cart permalinks are supposed to go to checkout with pre-populated items. It is possible\n  // to redirect cart permalinks to the storefront, but in these cases we still don't want to\n  // select the link because that would prevent the items from being added to the cart.\n  //\n  // The reference above has some examples of what a cart permalink looks like, but\n  // here are some for quick reference:\n  // - <a href=\"/cart/1234567890:1\">\n  // - <a href=\"/cart/1234567890:1,987654321:3\">\n  // - <a href=\"/cart/1234567890:1?payment=shop_pay\">\n  // - <a href=\"/cart/1234567890:1?discount=cart-discount\">\n  //\n  // Ideally, we would use a regex to match cart permalinks, but we can't use\n  // a regex in a CSS selector.\n  \":not([href*='/cart/1'])\",\n  \":not([href*='/cart/2'])\",\n  \":not([href*='/cart/3'])\",\n  \":not([href*='/cart/4'])\",\n  \":not([href*='/cart/5'])\",\n  \":not([href*='/cart/6'])\",\n  \":not([href*='/cart/7'])\",\n  \":not([href*='/cart/8'])\",\n  \":not([href*='/cart/9'])\",\n].join('');",
                "filename": "web/storefront/src/constants/index.ts",
                "start_index": 423,
                "end_index": 3203,
                "start_line": 11,
                "end_line": 73,
                "max_line": 163,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { GiftCardMajor, ProductsMajor, ShipmentMajor } from '@shopify/polaris-icons';\nimport clx from 'classnames';\nimport parse from 'html-react-parser';\nimport React, { useCallback, useEffect, useMemo } from 'react';\nimport { RewardTier } from '../../../../../../common/defaultMetafields';\nimport { REWARD_ITEM_PROPERTY_KEY } from '../../../constants/index';\nimport { convertCurrency, formatMoney } from '../../../helpers/currency';\nimport { useCartTotal } from '../../../hooks/useCartTotal';\nimport { AddToCartOpensCart, CartItem, ItemToAddToCart, ItemToChangeInCart } from '../../../platform';\nimport { StorageEngine } from '../../../services/storage';\nimport {\n  calcCountProgress,\n  calculateCountTieredProgress,\n  calculateProgress,\n  calculateTieredProgress,\n} from '../../../utils';\nimport { withErrorBoundary } from '../HOCs';\nimport styles from './styles.module.scss';\nimport { IRewardsModule } from './types';\nimport { useCartItems } from './hooks/useCartItems';\nimport { useCartItemCategories } from './hooks/useCartItemCategories';\nimport { useCartHelpers } from '../../../hooks/useCartHelpers';\n\nconst sessionStorageEngine = new StorageEngine('session');\n\nconst UnsafeRewardsModule: React.FC<IRewardsModule> = ({ platform, cart, refetchCart }) => {\n  const { itemCount: cartItemCount } = useCartItems({\n    cart,\n    settings: platform.settings,\n    includeRewards: false,\n  });\n\n  const { rewardItems } = useCartItemCategories({\n    cart,\n    settings: platform.settings,\n  });\n\n  const { totalAfterAllDiscountsWithoutGiftCards, totalAfterOnlyDiscountCodesWithoutGiftCards } = useCartTotal({\n    cart,\n  });\n\n  const {\n    rewardsBarBackgroundColor,\n    rewardsBarForegroundColor,\n    rewardsBasis,\n    rewardsEditor,\n    rewardsEditorAfterText,\n    rewardsEditorForItemCount,\n    rewardsItemCount,\n    rewardsMinAmount,\n    rewardsTargetType,\n    rewardsTiers,\n    rewardsTierProducts,\n    rewardsShowIconWithSingleTier,\n  } = platform.settings.upcartEditorSettings;\n\n  if (rewardsTiers.tiers.length === 0) {\n    rewardsTiers.tiers.push({\n      targetType: rewardsTargetType,\n      minAmount: rewardsMinAmount,\n      itemCount: rewardsItemCount,\n      textBeforeReachingForCartTotal: rewardsEditor,\n      textBeforeReachingForItemCount: rewardsEditorForItemCount,\n      rewardDescription: 'Free Shipping',\n      products: rewardsTierProducts,\n    });\n  }\n\n  // Calculate total price of non-gift-card reward items already present in the cart (BEAM-1664 & BEAM-400)\n  const rewardsItemsTotalPrice = rewardItems.reduce((total, item) => {\n    if (item.gift_card) return total;\n    return total + (rewardsTiers.tiers[0].targetType === 'shipping' ? item.line_price : item.original_line_price);\n  }, 0);\n\n  // See Linear issue BEAM-400 for a full explanation of this logic.\n  const totalPrice =\n    (rewardsTiers.tiers[0].targetType === 'shipping'\n      ? totalAfterAllDiscountsWithoutGiftCards\n      : totalAfterOnlyDiscountCodesWithoutGiftCards) - rewardsItemsTotalPrice;",
                "filename": "web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx",
                "start_index": 0,
                "end_index": 2983,
                "start_line": 1,
                "end_line": 79,
                "max_line": 492,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "solution_task": {
            "structured_resp": "Clarify:\nThe issue is that the first reward item added to the cart is not clickable, preventing users from viewing its landing page. When pointer events are manually enabled, clicking the reward item redirects to the homepage instead of the product page. This behavior is a result of a previous update (BEAM-2545) that intentionally removed product links for reward products. A configurable setting was proposed to allow linking of reward products to their pages, and a fix was implemented for Valentina's store by enabling this setting. The issue is tracked with ID BEAM-2762.\n\nHypothesize:\n- The issue may be due to CSS or JavaScript that disables pointer events or click events on the reward item elements.\n- The redirect to the homepage instead of the product page could be due to incorrect URL handling or event propagation that triggers a default action.\n- The previous update (BEAM-2545) that removed product links for reward products might be interfering with the new setting that was supposed to enable links for Valentina's store.\n\nExperiment:\n- Review the code snippets provided to identify any CSS or JavaScript that disables pointer events or click events on reward items.\n- Check for event handlers that might be redirecting to the homepage instead of the product page.\n- Verify if the new setting to enable links for reward products is correctly implemented and if it's being applied as expected.\n\nAnalyze:\n- The provided code snippets do not contain any CSS or JavaScript that directly relates to the issue of reward items being unclickable or redirecting incorrectly.\n- The snippets do not show event handlers for the reward items or the logic that determines the URL to which a user is redirected upon clicking a reward item.\n- The documentation and code snippets do not provide information about the implementation of the configurable setting that was supposed to fix the issue for Valentina's store.\n\nResolve:\n- To resolve the issue, the following steps should be taken:\n  - Locate the CSS or JavaScript code that is responsible for disabling pointer events or click events on the reward item elements. This could be in the form of `pointer-events: none;` in CSS or `event.preventDefault();` in JavaScript event handlers.\n  - If the code is found, modify it to allow pointer events or click events when the new configurable setting for linking reward products is enabled.\n  - Ensure that the event handler for clicking a reward item checks the configurable setting and redirects to the correct product page URL instead of the homepage.\n  - If the setting is not being applied correctly, debug the logic that reads and applies the setting to ensure that it enables the links for reward products when configured to do so.\n  - Test the changes in Valentina's store to confirm that the reward items are now clickable and redirect to the correct product pages.\n  - Update the issue tracker (BEAM-2762) with the changes made and mark the issue as resolved once confirmed.",
            "response": "To address the problem of the first reward item in the cart not being clickable and redirecting incorrectly, it's essential to investigate and modify the website's code. This will ensure that users can interact with reward items as intended and be directed to the appropriate product pages. The following actions are recommended to rectify the situation:\n\n- Search for and identify any CSS rules or JavaScript code that disables pointer or click events on reward item elements. This may involve looking for styles such as `pointer-events: none;` or JavaScript functions that call `event.preventDefault();`.\n- Once located, adjust the code to permit pointer and click events when the new setting for linking reward products is active.\n- Modify the click event handler for reward items to check the new setting and navigate to the correct product page URL, rather than defaulting to the homepage.\n- Investigate and fix any issues with the application of the new setting to ensure it allows links for reward products as intended.\n- Conduct thorough testing on Valentina's store to verify that reward items are now clickable and lead to the appropriate product pages.\n- After implementing and testing the changes, update the issue tracking system with the resolution details and close the issue as resolved."
        },
        "snippet_processor_task": {
            "web/storefront/src/components/common/SingleProductRow/SingleProductRow.tsx": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "Explanation of discount types, discount targets, reading, applying, and removing discount codes, limitations of multiple codes, free shipping discounts, and Shopify Plus stores using checkout.liquid",
                        "snippet": {
                            "code": "---\nid: 3vst4bcr\ntitle: Discount Codes Module\nfile_version: 1.1.3\napp_version: 1.18.31\n---\n\n# Required background information\n\n## Discount types\n\nThere are two types of discounts: **automatic discounts** and **discount codes**.\n\n- **Automatic discounts** are applied to a cart or checkout automatically when the discount criteria are met.\n\n- **Discount codes** must be manually typed in by the customer. They stay active until the customer either removes the code, enters a different conflicting discount code, or changes their cart/checkout so that the discount is not longer applicable.\n\nThis module is specifically for **discount codes**. We do not have to worry about **automatic discounts** because they will work in the cart by default and they do not require any user interaction.\n\n## Discount targets\n\nA discount can be used to reduce the cost of **product(s)**, **order**, or **shipping**.\n\n- **Product discounts** reduce the price of one or more products and are shown as a reduction on individual line items.\n\n- **Order discounts** reduce the price of the order as a whole and are shown as a reduction on the overal price.\n\n- **Shipping discounts** reduce the price of shipping.\n\n# Read and write discount codes\n\n## Read discount codes\n\nWe read discount codes using the `cart.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:78:24:26:`    const cart: Cart&lt;CartItemWithoutCompareAtPrice&gt; = await fetch(getShopifyRoutesRoot() + &#39;cart.js&#39;).then((res) =&gt;`\"/> Ajax API endpoint.\n\nAn applied discount code will be returned from the API as part of either the `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> or the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/>. The `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> are for order discounts and the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/> are for product discounts.\n\nThese discount applications will include both **automatic discounts** and **discount codes**. We can distinguish between these using the `type`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:460:1:1:`  type: &#39;discount_code&#39; | &#39;&#39;;`\"/> field of the `DiscountApplication`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:446:4:4:`export interface DiscountApplication {`\"/>.\n\n## Apply a discount code\n\n<br/>\n\nWe apply a discount code by making a request from the storefront to the route `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/>.\n\nThe `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/> route is intended by Shopify to be used for [shareable discount links](https://help.shopify.com/en/manual/discounts/managing-discount-codes#promote-a-discount-using-a-shareable-link). Normally a customer would navigate to the link directly in their browser and would be redirected to the storefront. We are using it in a non-standard way by making a background network request.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n23         await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);\n```\n\n<br/>\n\nAfter applying a discount code, we refetch the cart to check if the discount was successfully applied and to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/DiscountCodeModule/DiscountCodeModule.tsx\n\n```tsx\n23           await platform.discounts.attemptApplyDiscountCode({ discountCode: discountCodeToApply });\n24           const updatedCart = await refetchCart();\n25\n26           const discountApplications = getAllUniqueDiscountApplications(updatedCart);\n27           const isValid = discountApplications.some(\n28             (discountApplication) => discountApplication.title === discountCodeToApply,\n29           );\n```\n\n<br/>\n\n## Remove a discount code\n\n<br/>\n\nWe remove a discount code by applying a fake invalid discount code.\n\nThere is no native way to remove discount codes so this is a workaround.\n\nThis behaviour relies on the fact that there can only be one discount code applied in the cart. We are replacing the one allowed discount code with an invalid code.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n14       async removeDiscountCode(): Promise<void> {\n15         const FAKE_INVALID_DISCOUNT_CODE = '~!~!UPCART_REMOVE_DISCOUNT!~!~';\n16         await this.UNSAFE_POSSIBLE_NO_OP_applyDiscountCodeAndSetShopifyCookie({ discountCode: FAKE_INVALID_DISCOUNT_CODE });\n17       }\n```\n\n<br/>\n\nAfter removing a discount code, we refetch the cart to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/components/DiscountCodeBadge/DiscountCodeBadge.tsx\n\n```tsx\n18         await platform.discounts.removeDiscountCode();\n19         await refetchCart();\n```\n\n<br/>\n\n> \u26a0\ufe0f After we apply or remove a discount code, the `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> of discounted line items will change. If we did not refetch the cart then we would have an outdated `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> value which would cause errors if we tried to call `cart/update.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:191:17:21:`    return fetchQd(this.ajaxMutationCartQ, getShopifyRoutesRoot() + &#39;cart/update.js&#39;, {`\"/> or `cart/change.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:153:8:12:`      getShopifyRoutesRoot() + `cart/change.js?${query.toString()}`,`\"/>.\n\n# Limitations\n\n## **Multiple** discount codes are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n50                     Multiple discount codes are not supported.\n```\n\n<br/>\n\n### Why are multiple discount codes not supported?\n\nWe cannot apply multiple discount codes because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support multiple codes. This is the only way that we know of to apply a discount code from the storefront. We will have to wait for Shopify to add support for multiple codes or to find a different way to apply codes which does support multiple.\n\nIf a customer applies two discount codes back to back, the first discount code will be discarded and only use the most recently applied code will affect the cart.\n\n## Free shipping discounts are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n58                   Free shipping discounts are not supported.\n```\n\n<br/>\n\n### Why are free shipping discounts not supported?\n\nWe cannot apply free shipping discounts because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support them.\n\n## Shopify Plus stores using checkout.liquid are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n64                   Shopify Plus stores using checkout.liquid are not supported.\n```\n\n<br/>\n\n### Why are Shopify Plus stores using checkout.liquid not supported?\n\nHistorically, the Ajax API only included automatic discounts and did not include discount codes. Shopify changed this behaviour and started including discounts from discount codes in Ajax API responses. There are still some stores which do not include discount codes in Ajax API responses. The discount codes module does not work on these stores.\n\n### How can we tell if a store is eligible?\n\nThe Ajax API will include discount codes in responses only if the store is on Shopify's new checkout.\n\n<br/>\n\nWe can identify wether or not a store is on Shopify's new checkout by looking at the cart token. If the cart token is 32 characters long and only includes hex digits (0123456789abcdef) then the store is on Shopify's old checkout, otherwise it is on Shopify's new checkout and the Ajax API will include discount codes in responses.\n\nStores that are on Shopify's new checkout may have different token formats. The following are examples that we've seen:\n\n- c1-d3f024e3af037f40bfe1b016b5b76f05\n- Z2NwLXVzLWNlbnRyYWwxOjAxSEZFMjFIV1FZUFc0SlQ3Q00ySFFSSjgy\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart({ cart }: { cart: Cart<CartItem> }): boolean {\n6          if (!cart.token) return false;\n7          const isLegacyCartToken = cart.token.match(/^[0-9a-f]{32}$/) !== null;\n8          return !isLegacyCartToken;\n9        }\n```\n\n<br/>\n\n### What happens if a store is not eligible?\n\n<br/>\n\nIf a store is not eligible then the discount code module will not be shown.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/Cart.tsx\n\n```tsx\n499                      {platform.discounts.getStoreCanApplyDiscountCodesInCart({ cart }) &&\n500                        settings.upcartEditorSettings.discountCodeModule && (\n501                          <DiscountCodeModule platform={platform} refetchCart={refetchCart} />\n502                        )}\n```\n\n<br/>\n\nIn the preview we will show the discount code module even for stores that are not eligible. We do this because it would require a lot of work to check eligibility when not on the storefront.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/platform/preview/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart(args: { cart: Cart<CartItem> }): boolean {\n6          return true;\n7        }\n```\n\n<br/>\n\nThis file was generated by Swimm. [Click here to view it in the app](https://app.swimm.io/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr).",
                            "filename": ".swm/discount-codes-module.3vst4bcr.sw.md",
                            "start_index": 0,
                            "end_index": 11446,
                            "start_line": 1,
                            "end_line": 231,
                            "max_line": 231,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "initial_doc_snippets"
                    },
                    "reason_for_reviewing": "This snippet is directly related to handling product links and pointer events, which are at the core of the issue where enabling pointer events causes incorrect redirection."
                }
            ],
            "web/storefront/src/utils/product-customizer.ts": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Snippet provides information on activating the UpCart app embed block, matching brand design in the cart editor, and adding upsells to the cart drawer in the Theme editor.",
                        "snippet": {
                            "code": "{\n                    title: t('Activate UpCart'),\n                    description: t(`Activate the UpCart app embed block in your Theme editor. Find it in Theme settings > App embeds. Don't forget to press save.`), // prettier-ignore\n                    badge: {\n                      children: themeData?.theme && !themeData.theme.embedEnabled ? t('Required') : t('Completed'),\n                      status: themeData?.theme && !themeData.theme.embedEnabled ? t('critical') : t('success'),\n                    },\n                    action: {\n                      content: t('Open Theme Settings'),\n                      onAction: () => {\n                        window.open(themeEditorDeepLink, '_blank').focus();\n                      },\n                    },\n                  },\n                  {\n                    title: t('Match your brand design'),\n                    badge: designChanged\n                      ? {\n                          children: t('Completed'),\n                          status: t('success'),\n                        }\n                      : undefined,\n                    description: t('UpCart comes with great defaults but every brand is different. Hop into the cart editor and use the design options to match your brand.'), // prettier-ignore\n                    action: {\n                      content: t('Open Cart Editor'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=design`);\n                      },\n                    },\n                  },\n                  {\n                    title: t('Add Upsells'),\n                    badge: {\n                      children: editorData.upsellsModule ? t('Completed') : t('Recommended'),\n                      status: editorData.upsellsModule ? t('success') : t('info'),\n                    },\n                    description: t(\"Boost your AOV by using UpCart's high converting upsell offers. Head over to the cart editor to add upsells to your cart drawer.\"), // prettier-ignore\n                    action: {\n                      content: t('Add Upsells'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=upsells`);\n                      },\n                    },\n                  },",
                            "filename": "web/src/@templates/Home/Home.tsx",
                            "start_index": 5120,
                            "end_index": 7444,
                            "start_line": 1,
                            "end_line": 222,
                            "max_line": 260,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet contains functions for checking if an item is a reward item, which is relevant since the issue involves reward items and their links."
                }
            ],
            "web/src/@templates/CartEditor/RewardsModule/RewardSettingsModule.tsx": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "The snippet provides key functions for calculating reward items' total price and setting up reward tiers based on platform settings.",
                        "snippet": {
                            "code": "import { GiftCardMajor, ProductsMajor, ShipmentMajor } from '@shopify/polaris-icons';\nimport clx from 'classnames';\nimport parse from 'html-react-parser';\nimport React, { useCallback, useEffect, useMemo } from 'react';\nimport { RewardTier } from '../../../../../../common/defaultMetafields';\nimport { REWARD_ITEM_PROPERTY_KEY } from '../../../constants/index';\nimport { convertCurrency, formatMoney } from '../../../helpers/currency';\nimport { useCartTotal } from '../../../hooks/useCartTotal';\nimport { AddToCartOpensCart, CartItem, ItemToAddToCart, ItemToChangeInCart } from '../../../platform';\nimport { StorageEngine } from '../../../services/storage';\nimport {\n  calcCountProgress,\n  calculateCountTieredProgress,\n  calculateProgress,\n  calculateTieredProgress,\n} from '../../../utils';\nimport { withErrorBoundary } from '../HOCs';\nimport styles from './styles.module.scss';\nimport { IRewardsModule } from './types';\nimport { useCartItems } from './hooks/useCartItems';\nimport { useCartItemCategories } from './hooks/useCartItemCategories';\nimport { useCartHelpers } from '../../../hooks/useCartHelpers';\n\nconst sessionStorageEngine = new StorageEngine('session');\n\nconst UnsafeRewardsModule: React.FC<IRewardsModule> = ({ platform, cart, refetchCart }) => {\n  const { itemCount: cartItemCount } = useCartItems({\n    cart,\n    settings: platform.settings,\n    includeRewards: false,\n  });\n\n  const { rewardItems } = useCartItemCategories({\n    cart,\n    settings: platform.settings,\n  });\n\n  const { totalAfterAllDiscountsWithoutGiftCards, totalAfterOnlyDiscountCodesWithoutGiftCards } = useCartTotal({\n    cart,\n  });\n\n  const {\n    rewardsBarBackgroundColor,\n    rewardsBarForegroundColor,\n    rewardsBasis,\n    rewardsEditor,\n    rewardsEditorAfterText,\n    rewardsEditorForItemCount,\n    rewardsItemCount,\n    rewardsMinAmount,\n    rewardsTargetType,\n    rewardsTiers,\n    rewardsTierProducts,\n    rewardsShowIconWithSingleTier,\n  } = platform.settings.upcartEditorSettings;\n\n  if (rewardsTiers.tiers.length === 0) {\n    rewardsTiers.tiers.push({\n      targetType: rewardsTargetType,\n      minAmount: rewardsMinAmount,\n      itemCount: rewardsItemCount,\n      textBeforeReachingForCartTotal: rewardsEditor,\n      textBeforeReachingForItemCount: rewardsEditorForItemCount,\n      rewardDescription: 'Free Shipping',\n      products: rewardsTierProducts,\n    });\n  }\n\n  // Calculate total price of non-gift-card reward items already present in the cart (BEAM-1664 & BEAM-400)\n  const rewardsItemsTotalPrice = rewardItems.reduce((total, item) => {\n    if (item.gift_card) return total;\n    return total + (rewardsTiers.tiers[0].targetType === 'shipping' ? item.line_price : item.original_line_price);\n  }, 0);\n\n  // See Linear issue BEAM-400 for a full explanation of this logic.\n  const totalPrice =\n    (rewardsTiers.tiers[0].targetType === 'shipping'\n      ? totalAfterAllDiscountsWithoutGiftCards\n      : totalAfterOnlyDiscountCodesWithoutGiftCards) - rewardsItemsTotalPrice;",
                            "filename": "web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx",
                            "start_index": 0,
                            "end_index": 2983,
                            "start_line": 1,
                            "end_line": 79,
                            "max_line": 492,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "It details handling product selection in the RewardsModule, which could be related to the issue of reward item links being unclickable."
                }
            ],
            "web/storefront/src/modules/CartPopup/Footer/Footer.tsx": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "Code snippet provides details on handling product selection, updating values, and displaying tier settings in the RewardsModule of the CartEditor.",
                        "snippet": {
                            "code": "<LegacyCard.Section>\n      <div>\n        <div className={styles.TierSettings}>\n          <div>\n            <ProductSelectModal\n              isOpen={productModalIsOpen}\n              onClose={() => setProductModalIsOpen(false)}\n              onSave={(value) => {\n                const product = value.products[0];\n                setFieldValue(\n                  `upcartEditorSettings.rewardsTiers.tiers[${productModalIndex}].products[${productTierIndex}]`,\n                  product,\n                );\n                setFieldTouched(\n                  `upcartEditorSettings.rewardsTiers.tiers[${productModalIndex}].products[${productTierIndex}]`,\n                  true,\n                );\n                setProductModalIsOpen(false);\n              }}\n              selectedProducts={\n                values.upcartEditorSettings.rewardsTiers.tiers[productModalIndex].products?.[productTierIndex]\n                  ? ([\n                      values.upcartEditorSettings.rewardsTiers.tiers[productModalIndex].products?.[productTierIndex],\n                    ] as Product[])\n                  : []\n              }\n              multiProduct={false}\n            />\n            {tiers.map((tier, index) => (\n              <div key={index}>\n                {tiers.length > 1 ? (\n                  <div>\n                    {index != 0 && <br />}\n                    {index != 0 && <hr />}\n                    {index != 0 && <br />}\n                    <p style={{ textDecoration: 'underline', fontSize: '18px', marginBottom: '10px' }}>\n                      Tier {index + 1}\n                    </p>\n                  </div>\n                ) : (\n                  <Field\n                    id=\"upcartEditorSettings.rewardsShowIconWithSingleTier\"\n                    label={t('Show reward icon')}\n                    name={`upcartEditorSettings.rewardsShowIconWithSingleTier`}\n                    component={CheckboxField}\n                  />\n                )}\n                <Field\n                  id=\"upcartEditorSettings.targetType\"\n                  label={'Reward Type'}\n                  name={`upcartEditorSettings.rewardsTiers.tiers[${index}].targetType`}\n                  component={SelectField}\n                  options={[\n                    { label: 'Shipping', value: 'shipping' },\n                    { label: 'Discount', value: 'productsOrOrder' },\n                    { label: 'Product', value: 'discountProduct' },\n                  ]}\n                />\n                {(tiers.length > 1 || values.upcartEditorSettings.rewardsShowIconWithSingleTier) && (\n                  <Field\n                    id=\"upcartEditorSettings.rewardDescription\"\n                    label={t('Reward Description')}\n                    name={`upcartEditorSettings.rewardsTiers.tiers[${index}].rewardDescription`}\n                    component={InputField}\n                    type=\"text\"\n                    maxLength={25}\n                  />\n                )}\n                {values.",
                            "filename": "web/src/@templates/CartEditor/RewardsModule/RewardSettingsModule.tsx",
                            "start_index": 1856,
                            "end_index": 4849,
                            "start_line": 40,
                            "end_line": 188,
                            "max_line": 248,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "It includes the 'handleRedirect' function, which is relevant to the issue of incorrect redirection when a reward item is clicked."
                }
            ]
        },
        "bouncer_response": {
            "score": 7,
            "criteria": "The RESPONSE must provide actionable, relevant guidance to more parts of the PROMPT's described issue to score higher.",
            "supporting_evidence": "The RESPONSE provides a series of actionable steps that are relevant to the issue described in the PROMPT. It suggests identifying and modifying CSS rules or JavaScript code that may be preventing pointer or click events on reward item elements, which is directly related to the problem of the reward item not being clickable. The RESPONSE also recommends adjusting the code to permit events when the new setting is active, modifying the click event handler, fixing any issues with the application of the new setting, and conducting thorough testing. These are all relevant and actionable steps that could lead to resolving the issue.\n\nAdditionally, the RESPONSE provides specific code snippets to check, which could be very useful for someone trying to fix the bug. The inclusion of these snippets shows an understanding of the problem and offers a clear direction for further investigation.\n\nHowever, the RESPONSE does not address the fact that the issue has already been resolved by the engineering team, as indicated in the PROMPT. The RESPONSE seems to suggest actions as if the issue is still open, which is not the case. Therefore, while the RESPONSE is highly relevant and provides clear guidance, it does not fully take into account the current status of the issue as resolved, which prevents it from scoring a 10.",
            "clarification_questions": "NONE"
        },
        "end_time": 1714343131.2950468,
        "result": "To address the problem of the first reward item in the cart not being clickable and redirecting incorrectly, it's essential to investigate and modify the website's code. This will ensure that users can interact with reward items as intended and be directed to the appropriate product pages. The following actions are recommended to rectify the situation:\n\n- Search for and identify any CSS rules or JavaScript code that disables pointer or click events on reward item elements. This may involve looking for styles such as `pointer-events: none;` or JavaScript functions that call `event.preventDefault();`.\n- Once located, adjust the code to permit pointer and click events when the new setting for linking reward products is active.\n- Modify the click event handler for reward items to check the new setting and navigate to the correct product page URL, rather than defaulting to the homepage.\n- Investigate and fix any issues with the application of the new setting to ensure it allows links for reward products as intended.\n- Conduct thorough testing on Valentina's store to verify that reward items are now clickable and lead to the appropriate product pages.\n- After implementing and testing the changes, update the issue tracking system with the resolution details and close the issue as resolved.\n\n### Code snippets to check\n\n-  \u2192 [web](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web) \u2192 [src](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src) \u2192 [@templates](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates) \u2192 [Home](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/Home)- [Lines 1 - 222](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/Home/Home.tsx#L1-L222)\n\n This snippet contains functions for checking if an item is a reward item, which is relevant since the issue involves reward items and their links.\n-  \u2192 [web](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web) \u2192 [storefront](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront) \u2192 [src](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src) \u2192 [modules](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules) \u2192 [CartPopup](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules/CartPopup) \u2192 [RewardsModule](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules/CartPopup/RewardsModule)- [Lines 1 - 79](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx#L1-L79)\n\n It details handling product selection in the RewardsModule, which could be related to the issue of reward item links being unclickable.\n-  \u2192 [web](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web) \u2192 [src](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src) \u2192 [@templates](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates) \u2192 [CartEditor](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/CartEditor) \u2192 [RewardsModule](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/CartEditor/RewardsModule)- [Lines 40 - 188](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/CartEditor/RewardsModule/RewardSettingsModule.tsx#L40-L188)\n\n It includes the 'handleRedirect' function, which is relevant to the issue of incorrect redirection when a reward item is clicked."
    }
}