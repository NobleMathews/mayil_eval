{
    "id": "BEAM-2762",
    "repo_name": "testbed/UpCart-2.0",
    "title": "Title Broken For Reward Product",
    "body": "\n### [EMBEDDED_LINK_1]\n\n[EMBEDDED_LINK_2]\n\n[EMBEDDED_LINK_3]\n---\nGlossary:\nconversation_customer_1: The customer, Valentina Gioielli, reported an issue where the first reward item added to the cart could not be clicked to view its landing page. Admin Jordan Falconer initially provided a solution involving Custom CSS and a JavaScript function to disable quantity selection on free items, but this did not resolve the issue. Valentina then asked if she could give access to their store for further investigation.\n\nJordan confirmed the customer's intent to link the reward product to its product page and requested Collaborator Access to the store, which Valentina granted. After gaining access, Jordan discovered that enabling pointer events redirected to the homepage instead of the product page. This issue was escalated to the engineering team.\n\nValentina later suggested that a deleted product might have been selected, causing a mismatch in names, and requested another check. Jordan confirmed that the issue persisted, leading to the homepage.\n\nComments from Opey Adeyemi on the linked issue BEAM-2762 revealed that the inability to click on reward products was an intentional change made in a previous issue (BEAM-2545) to remove product links for reward products. Opey suggested making this feature optional and estimated a fix within a week, though he hinted it might be completed sooner.\n\nThe issue's status was updated several times, moving from Todo to PR (Pull Request), In Progress, In Review, Production Ready, and finally Done. Opey commented that a fix was implemented specifically for the merchant by enabling a newly created setting on their store.\n\nJordan informed Valentina that the engineering team had implemented a fix and asked if further assistance was needed. Patti Rendall also confirmed they would notify the customer once the fix was complete.\nconversation_customer_2: The customer, Valentina Gioielli, reported an issue where the first reward item added to the cart could not be clicked to view its landing page. Admin Jordan Falconer initially provided a solution involving Custom CSS and a JavaScript function to disable quantity adjustments on free items, but this did not resolve the issue. Valentina then offered admin access to their store for further investigation.\n\nUpon gaining access, Jordan confirmed that enabling pointer events caused navigation to the homepage instead of the product page. It was discovered that a deleted product was mistakenly selected, which Valentina thought could be the problem. However, even after correcting this, the issue persisted.\n\nComments from Opey Adeyemi on the linked issue BEAM-2762 revealed that the inability to click on reward product links was an intentional feature from a previous issue (BEAM-2545) to remove product links for reward items. Opey suggested making this feature optional to accommodate different merchant preferences.\n\nOpey indicated that a fix could be expected within a week, but it might be completed sooner. The issue's status was updated several times, indicating progress through stages such as Todo, In Progress, PR (Pull Request), In Review, Production Ready, and finally Done. Opey commented that a setting had been created and enabled for Valentina's store to fix the issue.\n\nJordan Falconer followed up with Valentina, informing her that the engineering team had implemented a fix and asked if further assistance was needed.\ntranscript_2: The video transcript reveals an issue with pointer events for a specific product on a website. The speaker demonstrates that by default, pointer events are disabled for this product, contrasting with another product where pointer events work correctly. Upon manually enabling pointer events and clicking on the problematic product, the speaker is unexpectedly redirected to the homepage instead of the product's page. The speaker expresses confusion about why this redirection occurs, suggesting it might be related to the store's setup, which they describe as potentially \"janky.\" The speaker requests assistance to resolve the issue, as they are unsure how to fix the redirection so that clicking on the product leads to its respective page. They confirm that they have access to the necessary resources and are seeking help to understand and correct the behavior that prevents navigation to the product's page.\n\n",
    "classification": "bug",
    "state": "closed",
    "repo_link": "https://github.com/testbed/UpCart-2.0.git",
    "requested_commit": null,
    "issue_tracker_identifier": "",
    "ai_cost": {
        "issue_classifier": 0.0005755,
        "issue_summarizer": 0.0195,
        "search_embedding": 0.00010972,
        "documentation_agent": 0.00791,
        "repo_summary": 0.0687865,
        "issue_star_solver": 0.19689250000000003,
        "snippet_processor": 0.0227,
        "bouncer": 0.032100000000000004
    },
    "attachments": [
        {
            "title": "Message from Clo\u00e8 Milano",
            "url": "https://app.intercom.com/a/apps/wqw8tviu/conversations/188602100013218",
            "content": "user_Valentina Gioielli: <div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/933834707/2a13df14db62f9eed95899c7/Screenshot+2024-01-15+alle+19.00.34.png?expires=1714403370&amp;signature=d66e73ca803db6f1861196a0c0dcec44729bd28e2630c144837f80682f6c0dd6\"></div>\nuser_Valentina Gioielli: <p>this reward the first one, when added they cannot click to see the landing page</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Hey there!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">We can make this happen :) You'll want to start in your UpCart Settings --&gt; Custom CSS</p>\n<p class=\"no-margin\"></p>\n<pre><code>.free-item-disable-qty .upcart-product-quantity-input,<br>.free-item-disable-qty .upcart-product-quantity-minus,<br>.free-item-disable-qty .upcart-product-quantity-plus {<br>    pointer-events: none !important;<br>    cursor: not-allowed;<br>    opacity: 0.5;<br>}<br><br>.free-item-disable-qty .upcart-product-title,<br>.free-item-disable-qty .upcart-product-image-wrapper {<br>    pointer-events: none !important;<br>}<br></code></pre>\n<p class=\"no-margin\">Once you have that pasted in there, you'll want to go into your:</p>\n<p class=\"no-margin\"><b>Custom HTML, under: Scripts (Before Load)</b>.</p>\n<p class=\"no-margin\">You can use the drop bar to find this area!</p>\n<p class=\"no-margin\"></p>\n<pre><code>&lt;script&gt;<br>  function upcartDisableQtyOnFreeItems(cart) {<br>    const freeItems = cart.items.filter((item) =&gt; item.price === 0);<br>    for (const item of freeItems) {<br>      const cartRow = document.querySelector(`[id=\"${item.key}\"].upcart-product-item`);<br>      cartRow?.classList.add('free-item-disable-qty');<br>    }<br>  }<br><br>  window.upcartOnCartLoaded = upcartDisableQtyOnFreeItems;<br>  window.upcartOnCartUpdated = upcartDisableQtyOnFreeItems;<br>&lt;/script&gt;</code></pre>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">As always, I'm here to help, so if I can provide any further clarification or help in general, please do let me know!</p>\nuser_Valentina Gioielli: <p>nothing has changed, the object is still not clickable, can i give you access?</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I'll have a look again :)</p>\nuser_Valentina Gioielli: <p>the item*</p>\nuser_Valentina Gioielli: <div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/933866143/74fbefa7ab940e1428e990c6/Screenshot+2024-01-15+alle+19.25.48.png?expires=1714403370&amp;signature=0d0a1e14ef6f77f172e9616a0adfd8203fbbe97e6f7d555d93e98a548f328e17\"></div>\nadmin_Jordan Falconer: <p class=\"no-margin\">To confirm, you want this to bring the customer to the product page?</p>\nuser_Valentina Gioielli: <p>yes</p>\nuser_Valentina Gioielli: <p>please</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I've just sent your store a Collaborator Access request! </p>\n<p class=\"no-margin\">It should say it comes from either BEAM or AfterSell!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">Do you mind accepting it, and then letting me know when you do accept it? </p>\nuser_Valentina Gioielli: <p>done thanks</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Thank you!</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Alright I'm going to need technical input on this. I can enable the pointer events, but when I do so, it brings me to the home page instead of the product page.</p>\n<p class=\"no-margin\">I've flagged this to our engineering team and will let you know as soon as there is an update!</p>\nuser_Valentina Gioielli: <p>thanks</p>\nuser_Valentina Gioielli: <p>how long</p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> was linked to the conversation </p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I am unsure of the timeline for a fix but our engineering team will have a look as soon as possible and get back to you in this chat as soon as they have updates!</p>\nuser_Valentina Gioielli: <p>maybe i found a problem, a deleted product was selected, the name did not match, could you try one last time and see if it works with your inputs? grazei</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I'll just be a minute! I'll let you know!</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Unfortunately it is still bringing me to the homepage</p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>This was done on purpose in <a href=\"https://linear.app/beam-commerce/issue/BEAM-2545/%5B2-star-review%5D-remove-product-link-for-reward-products\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2545</a> - I didn't realize people would specifically want to do this. I suppose the resolution here is to make this a setting that is optional so they can still do this</p>\nadmin_Jordan Falconer: <p><b>Jordan Falconer</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>Ahhh! I figured the pointer events was on purpose but couldn't figure out why the link wasn't having it</p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>Yeah my bad, the fix should be chill though, I'm hoping for it to be done quickly, you can tell the merchant it'll be fixed within the week (but secretly I might have it done today) @jordan </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>Todo</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Just heard back from our engineering team! A fix should be implemented within the week :) I'll let you know as soon as it's complete!</p>\nuser_Valentina Gioielli: <p>ok thanks</p>\nadmin_Patti Rendall: <p class=\"no-margin\">No problem! We'll let you know when it's done.</p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>PR</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>In Progress</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>PR</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>In Review</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>Production Ready</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>Done</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>Fixed for this merchant (i.e. I enabled the setting I just created on their store)</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Hey there!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">I just heard back from our engineering team. A fix has been implemented for you! Please let me know if there's anything further I'd be able to help with :)</p>\n",
            "placeholder_tag": "conversation_customer_1",
            "content_type": "ExternalAssetsType.CONVERSATION_CUSTOMER"
        }
    ],
    "inline_assets": [
        {
            "title": "",
            "url": "https://app.intercom.com/a/inbox/wqw8tviu/inbox/shared/all/conversation/188602100013218?view=List",
            "content": "user_Valentina Gioielli: <div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/933834707/2a13df14db62f9eed95899c7/Screenshot+2024-01-15+alle+19.00.34.png?expires=1714403369&amp;signature=487c8867297b747a8f86e8c7888418b7ccd5fd7e028e7fef78ad59bf529f4b0b\"></div>\nuser_Valentina Gioielli: <p>this reward the first one, when added they cannot click to see the landing page</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Hey there!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">We can make this happen :) You'll want to start in your UpCart Settings --&gt; Custom CSS</p>\n<p class=\"no-margin\"></p>\n<pre><code>.free-item-disable-qty .upcart-product-quantity-input,<br>.free-item-disable-qty .upcart-product-quantity-minus,<br>.free-item-disable-qty .upcart-product-quantity-plus {<br>    pointer-events: none !important;<br>    cursor: not-allowed;<br>    opacity: 0.5;<br>}<br><br>.free-item-disable-qty .upcart-product-title,<br>.free-item-disable-qty .upcart-product-image-wrapper {<br>    pointer-events: none !important;<br>}<br></code></pre>\n<p class=\"no-margin\">Once you have that pasted in there, you'll want to go into your:</p>\n<p class=\"no-margin\"><b>Custom HTML, under: Scripts (Before Load)</b>.</p>\n<p class=\"no-margin\">You can use the drop bar to find this area!</p>\n<p class=\"no-margin\"></p>\n<pre><code>&lt;script&gt;<br>  function upcartDisableQtyOnFreeItems(cart) {<br>    const freeItems = cart.items.filter((item) =&gt; item.price === 0);<br>    for (const item of freeItems) {<br>      const cartRow = document.querySelector(`[id=\"${item.key}\"].upcart-product-item`);<br>      cartRow?.classList.add('free-item-disable-qty');<br>    }<br>  }<br><br>  window.upcartOnCartLoaded = upcartDisableQtyOnFreeItems;<br>  window.upcartOnCartUpdated = upcartDisableQtyOnFreeItems;<br>&lt;/script&gt;</code></pre>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">As always, I'm here to help, so if I can provide any further clarification or help in general, please do let me know!</p>\nuser_Valentina Gioielli: <p>nothing has changed, the object is still not clickable, can i give you access?</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I'll have a look again :)</p>\nuser_Valentina Gioielli: <p>the item*</p>\nuser_Valentina Gioielli: <div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/933866143/74fbefa7ab940e1428e990c6/Screenshot+2024-01-15+alle+19.25.48.png?expires=1714403369&amp;signature=8ea137cfd79f4425627bdf9f87fbf3f8517c3f9744d32588db17e9fd6c64b4f4\"></div>\nadmin_Jordan Falconer: <p class=\"no-margin\">To confirm, you want this to bring the customer to the product page?</p>\nuser_Valentina Gioielli: <p>yes</p>\nuser_Valentina Gioielli: <p>please</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I've just sent your store a Collaborator Access request! </p>\n<p class=\"no-margin\">It should say it comes from either BEAM or AfterSell!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">Do you mind accepting it, and then letting me know when you do accept it? </p>\nuser_Valentina Gioielli: <p>done thanks</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Thank you!</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Alright I'm going to need technical input on this. I can enable the pointer events, but when I do so, it brings me to the home page instead of the product page.</p>\n<p class=\"no-margin\">I've flagged this to our engineering team and will let you know as soon as there is an update!</p>\nuser_Valentina Gioielli: <p>thanks</p>\nuser_Valentina Gioielli: <p>how long</p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> was linked to the conversation </p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I am unsure of the timeline for a fix but our engineering team will have a look as soon as possible and get back to you in this chat as soon as they have updates!</p>\nuser_Valentina Gioielli: <p>maybe i found a problem, a deleted product was selected, the name did not match, could you try one last time and see if it works with your inputs? grazei</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I'll just be a minute! I'll let you know!</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Unfortunately it is still bringing me to the homepage</p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>This was done on purpose in <a href=\"https://linear.app/beam-commerce/issue/BEAM-2545/%5B2-star-review%5D-remove-product-link-for-reward-products\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2545</a> - I didn't realize people would specifically want to do this. I suppose the resolution here is to make this a setting that is optional so they can still do this</p>\nadmin_Jordan Falconer: <p><b>Jordan Falconer</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>Ahhh! I figured the pointer events was on purpose but couldn't figure out why the link wasn't having it</p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>Yeah my bad, the fix should be chill though, I'm hoping for it to be done quickly, you can tell the merchant it'll be fixed within the week (but secretly I might have it done today) @jordan </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>Todo</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Just heard back from our engineering team! A fix should be implemented within the week :) I'll let you know as soon as it's complete!</p>\nuser_Valentina Gioielli: <p>ok thanks</p>\nadmin_Patti Rendall: <p class=\"no-margin\">No problem! We'll let you know when it's done.</p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>PR</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>In Progress</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>PR</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>In Review</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>Production Ready</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>Done</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>Fixed for this merchant (i.e. I enabled the setting I just created on their store)</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Hey there!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">I just heard back from our engineering team. A fix has been implemented for you! Please let me know if there's anything further I'd be able to help with :)</p>\n",
            "placeholder_tag": "conversation_customer_2",
            "content_type": "ExternalAssetsType.CONVERSATION_CUSTOMER"
        },
        {
            "title": "",
            "url": "https://www.loom.com/share/5f1344a9a01348389958733dd97b1101",
            "content": "Okay, so kind of weird issue here. So by default the pointer events are not enabled here for this product You can do it with this one just fine but anyways When I click on it Yeah, so when I click on it Where is it? Where is it? Am I stupid? Oh there we are. None. So if I change this so that We can actually click on it if I click on it it's going to bring me to the home page for some reason I think it's just the way the store is set up I don't know if it's a bit janky or what but yeah I don't know how to fix that so that it would go to that product Anyways we have access and everything if you guys could take a look that'd be wonderful because I have no idea why it wouldnt take me to that products page Thanks",
            "placeholder_tag": "transcript_2",
            "content_type": "ExternalAssetsType.TRANSCRIPT"
        }
    ],
    "linked_issue_ids": [],
    "comments": [],
    "issue_summary": "Error Messages:\n- No explicit error messages provided.\n\nFunction and Variable Names:\n- Custom CSS (mentioned as a solution attempt)\n- JavaScript function to disable quantity selection/adjustments on free items (mentioned as a solution attempt)\n- Pointer events (mentioned as causing redirection to the homepage)\n\nTechnical Descriptions:\n- Issue with the first reward item added to the cart not being clickable to view its landing page.\n- Enabling pointer events caused redirection to the homepage instead of the product page.\n- A deleted product was mistakenly selected, causing a mismatch in names.\n- The inability to click on reward product links was an intentional change made in a previous issue (BEAM-2545).\n- A fix was suggested to make the feature of removing product links for reward items optional.\n- A setting was created and enabled for the merchant's store to fix the issue.\n- The issue's status moved through Todo, PR (Pull Request), In Progress, In Review, Production Ready, and Done.\n- The fix was implemented specifically for the merchant by enabling a newly created setting on their store.\n\nLinked Issues:\n- BEAM-2762: Related to the inability to click on reward products.\n- BEAM-2545: Previous issue where the feature to remove product links for reward products was implemented.\n\nAdditional Context:\n- Collaborator Access was requested and granted for store investigation.\n- The issue was escalated to the engineering team.\n- A fix was implemented and the customer was informed.",
    "repo_summary": "The software project is a Shopify app built using Node.js and TypeScript. It consists of multiple modules and directories such as `web`, `chrome-extensions`, `common`, and `storefront-tester`. The project uses various technologies and tools like Shopify CLI, TypeScript, ESLint, Prettier, Jest, and more.\n\nThe `RewardsModule` in `web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx` handles adding and removing products based on reward tiers. The `handleAddToCartForShineon` function in `web/storefront/src/interceptors/handlers/handleAddToCartException.ts` manages adding products to the cart for Shineon products. The `fake-products.ts` file in `web/src/@templates/CartEditor/platform/preview/products` contains placeholder product data for demonstration purposes.\n\nThe project also includes documentation for features like Subscription Upgrades, Discount Codes Module, and more. The `handlePlanAcceptanceCallback` function in `web/server/modules/billing/plan-acceptance/plan-acceptance.ts` handles accepting subscription plans and updating the cart accordingly.\n\nThe project follows a structured approach with clear separation of concerns and utilizes various scripts and configurations defined in `package.json` files to manage dependencies, build processes, and testing.",
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1714401631.2351549,
        "classification": "bug",
        "initial_code_snippets": [
            {
                "code": "<div className={`upcart-product-image-wrapper ${styles.ProductRow__imageWrapper}`}>\n            {/*anti-pattern of disabling link was chosen in order to preserve existing DOM structure & merchant custom CSS*/}\n            <a href={itemIsReward(item) ? '/' : item.url} data-no-pointer={itemIsReward(item)}>\n              {src ? <img src={src} alt={item.title} /> : <ImageMajor height=\"75%\" width=\"75%\" />}\n            </a>\n          </div>\n        </div>\n        <div className=\"Stack__item Stack__item--fill\">\n          <div className={styles.ProductRow__productHeading}>\n            <div className={styles.ProductRow__productTitleAndVariant}>\n              <h3\n                className={`upcart-product-title UpcartDesignSettings__cartTextColor ${styles.ProductRow__productTitle}`}\n              >\n                <a\n                  className={`upcart-product-title-link ${styles.ProductRow__productTitleLink}`}\n                  href={itemIsReward(item) ? '/' : item.url}\n                  data-no-pointer={itemIsReward(item)}\n                >\n                  {item.product_title}\n                </a>\n              </h3>\n              {!item.product_has_only_default_variant &&\n                item.options_with_values?.map((option: any) => (\n                  <div\n                    key={option.name}\n                    className=\"upcart-item-option\"\n                    data-upcart-item-option-category={option.name}\n                    data-upcart-item-option-value={option.value}\n                  >\n                    <span className=\"TextStyle--variationSubdued UpcartDesignSettings__cartTextSubduedColor\">\n                      <span className=\"upcart-item-option-category\">{option.name}: </span>\n                      <span className=\"upcart-item-option-value\">{option.value}</span>\n                    </span>\n                  </div>\n                ))}\n              <div className=\"upcart-item-properties-anchor-before\" />\n              <ProductProperties item={item} settings={settings} />\n              <div className=\"upcart-item-properties-anchor-after\" />\n            </div>\n            {!isTrashLoading && (\n              <TrashButton\n                cartIsLoading={cartIsLoading}\n                isTrashLoading={isTrashLoading}\n                setIsTrashLoading={setIsTrashLoading}\n                onClick={() => deleteProductItem(item)}\n              />\n            )}\n          </div>\n          <div>\n            <div className=\"Stack Stack--noWrap Stack--distributionEqualSpacing Stack--alignmentCenter\">\n              <div className=\"Stack__item\">\n                {shouldShowQuantitySelector && (\n                  <div className={styles.ProductRow__stepper}>",
                "filename": "web/storefront/src/components/common/SingleProductRow/SingleProductRow.tsx",
                "start_index": 5370,
                "end_index": 8065,
                "start_line": 135,
                "end_line": 187,
                "max_line": 257,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n                    title: t('Add Rewards'),\n                    badge: editorData.rewardsModule\n                      ? {\n                          children: t('Completed'),\n                          status: t('success'),\n                        }\n                      : undefined,\n                    description: t('Add a rewards module to offer urge customers to shop more. Create a free shipping bar, offer a free gift, or other rewards.'), // prettier-ignore\n                    action: {\n                      content: t('Add Rewards'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=rewards`);\n                      },\n                    },\n                  },\n                  {\n                    title: t('Confirm UpCart Compatibility'),\n                    description: t(\"Although UpCart uses standard Shopify technologies, not all apps do. Ensure any other apps you're using function as expected.\"), // prettier-ignore\n                  },\n                  // {\n                  //   title: t('Sell more with AfterSell \ud83d\udcb8'),\n                  //   description: t(\"AfterSell enables checkout and post-purchase upsells. It's a great way to increase your AOV and sell more. Learn more about AfterSell and get a free trial.\"), // prettier-ignore\n                  //   action: {\n                  //     content: t('Boost my Sales'),\n                  //     onAction: () => {\n                  //       navigate(ROUTE_OBJECTS.AFTERSELL_AD.url);\n                  //     },\n                  //   },\n                  // },\n                ]}",
                "filename": "web/src/@templates/Home/Home.tsx",
                "start_index": 7463,
                "end_index": 9094,
                "start_line": 1,
                "end_line": 233,
                "max_line": 260,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n                    title: t('Activate UpCart'),\n                    description: t(`Activate the UpCart app embed block in your Theme editor. Find it in Theme settings > App embeds. Don't forget to press save.`), // prettier-ignore\n                    badge: {\n                      children: themeData?.theme && !themeData.theme.embedEnabled ? t('Required') : t('Completed'),\n                      status: themeData?.theme && !themeData.theme.embedEnabled ? t('critical') : t('success'),\n                    },\n                    action: {\n                      content: t('Open Theme Settings'),\n                      onAction: () => {\n                        window.open(themeEditorDeepLink, '_blank').focus();\n                      },\n                    },\n                  },\n                  {\n                    title: t('Match your brand design'),\n                    badge: designChanged\n                      ? {\n                          children: t('Completed'),\n                          status: t('success'),\n                        }\n                      : undefined,\n                    description: t('UpCart comes with great defaults but every brand is different. Hop into the cart editor and use the design options to match your brand.'), // prettier-ignore\n                    action: {\n                      content: t('Open Cart Editor'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=design`);\n                      },\n                    },\n                  },\n                  {\n                    title: t('Add Upsells'),\n                    badge: {\n                      children: editorData.upsellsModule ? t('Completed') : t('Recommended'),\n                      status: editorData.upsellsModule ? t('success') : t('info'),\n                    },\n                    description: t(\"Boost your AOV by using UpCart's high converting upsell offers. Head over to the cart editor to add upsells to your cart drawer.\"), // prettier-ignore\n                    action: {\n                      content: t('Add Upsells'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=upsells`);\n                      },\n                    },\n                  },",
                "filename": "web/src/@templates/Home/Home.tsx",
                "start_index": 5120,
                "end_index": 7444,
                "start_line": 1,
                "end_line": 222,
                "max_line": 260,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "sortedTiers.forEach((tier, index) => {\n      //Only the 'discountProduct' reward type has product(s)\n      if (tier.targetType === 'discountProduct' && tier.products) {\n        if (index <= currentTier) {\n          //Products to be added\n\n          tier.products.forEach((product, productIndex) => {\n            //Check if the product is in the cart, if it isn't we need to add it\n            let cartIndex = cart.items.findIndex(\n              (item) =>\n                item.properties &&\n                item.properties.__upcartTier === index &&\n                item.properties.__upcartProductTier === productIndex,\n            );\n\n            //Check the \"lock\" to see if the product has already been added, in the process of being added or failed to add\n            let productAddedLock = sessionStorageEngine.get(`upcartTier${index}_${productIndex}AddedToCart`, true);\n\n            if (cartIndex === -1 && !productAddedLock) {\n              //Item was not found in the cart & the lock is available\n\n              //Get the variantId\n              let variantId = product?.variants?.edges?.[0]?.node?.id;\n              variantId = variantId?.split('/')[4];\n\n              itemsToAdd.push({\n                variantId: Number(variantId),\n                quantity: 1,\n                properties: {\n                  [REWARD_ITEM_PROPERTY_KEY]: variantId,\n                  __upcartTier: index,\n                  __upcartProductTier: productIndex,\n                } as UpcartRewardsCartProperties,\n              });\n            }\n          });\n        } else {\n          //Products to be removed\n          //Find all items in the cart, matching the Tier, and mark them for removal\n          let products = cart.items.filter((item) => item.properties && item.properties.__upcartTier === index);\n\n          products.forEach((product) => {\n            itemsToRemove.push({\n              key: product.key,\n              lineIdxFrom1: product.lineIdxFrom1,\n              newQuantity: (product?.quantity || 1) - 1,\n              properties: {\n                [REWARD_ITEM_PROPERTY_KEY]: product.variant_id.toString(),\n                __upcartTier: index,\n                __upcartProductTier: product?.properties?.__upcartProductTier,\n              } as UpcartRewardsCartProperties,\n            });\n          });\n\n          tier.products.forEach((product, productIndex) => {\n            //Check if the product is in the cart\n            let cartIndex = cart.items.findIndex(\n              (item) =>\n                item.properties &&\n                item.properties.__upcartTier === index &&\n                item.properties.__upcartProductTier === productIndex,\n            );\n\n            //If the user removed a product from the cart, we need to remove the lock\n            if (cartIndex === -1) {\n              sessionStorageEngine.unset([`upcartTier${index}_${productIndex}AddedToCart`]);\n            }\n          });\n        }\n      }\n    });\n\n    //\"Acquire\" the locks",
                "filename": "web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx",
                "start_index": 9879,
                "end_index": 12845,
                "start_line": 269,
                "end_line": 341,
                "max_line": 492,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<Button\n                    primary\n                    size=\"large\"\n                    url=\"https://apps.shopify.com/upcart-cart-builder?source=aftersell-app-upcart-landing-page\"\n                    external\n                  >\n                    {t('Claim free trial') as string}\n                  </Button>\n                  <LegacyStack alignment=\"center\" spacing=\"extraTight\">\n                    <Reviews title={''} />\n                    <p style={{ fontSize: '18px', fontWeight: 'bolder', paddingBottom: '2px', marginLeft: '4px' }}>\n                      5.0 (500+ Reviews)\n                    </p>\n                  </LegacyStack>\n                  <br />\n                </LegacyStack>\n              </LegacyStack>\n\n              <div className={styles.mainImage}>\n                <img src=\"https://i.ytimg.com/vi_webp/P3xyRIPRh6A/maxresdefault.webp\" />\n              </div>\n            </div>\n          </Layout.Section>\n          <Layout.Section fullWidth>\n            <LegacyStack vertical spacing=\"extraLoose\">\n              <LegacyStack distribution=\"fillEvenly\">\n                <div className={styles.contentImage}>\n                  <img src={upCartBenefitsMap[0].postPurchaseUpsellImage} />\n                </div>\n                <LegacyStack vertical>\n                  <Heading>\n                    <h3 style={{ fontSize: '20px', fontWeight: 'bold', marginTop: '5px' }}>\n                      {upCartBenefitsMap[0].postPurchaseUpsell}\n                    </h3>\n                  </Heading>\n                  <LegacyStack vertical>\n                    <CheckmarkBenefit benefit=\"One Click Upsell Funnels\" />\n                    <CheckmarkBenefit benefit=\"Deep offer targeting with triggers\" />\n                    <CheckmarkBenefit benefit=\"AI recommended offers\" />\n                    <CheckmarkBenefit benefit=\"A/B test offers\" />\n                  </LegacyStack>\n                </LegacyStack>\n              </LegacyStack>\n              <LegacyStack distribution=\"fillEvenly\">\n                <LegacyStack vertical>\n                  <Heading>\n                    <h3 style={{ fontSize: '20px', fontWeight: 'bold', marginTop: '5px' }}>\n                      {upCartBenefitsMap[1].thankYouPage}\n                    </h3>\n                  </Heading>\n                  <LegacyStack vertical>\n                    <CheckmarkBenefit benefit=\"Product recommendations & storewide discount popup\" />\n                    <CheckmarkBenefit benefit=\"FAQs & reviews\" />\n                    <CheckmarkBenefit benefit=\"Images and videos\" />\n                  </LegacyStack>\n                </LegacyStack>\n                <div className={styles.contentImage}>\n                  <img src={upCartBenefitsMap[1].thankYouPageImage} />\n                </div>\n              </LegacyStack>\n              <LegacyStack distribution=",
                "filename": "web/src/@templates/AfterSellAd/AfterSellAd.tsx",
                "start_index": 2946,
                "end_index": 5780,
                "start_line": 79,
                "end_line": 139,
                "max_line": 163,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { GiftCardMajor, ProductsMajor, ShipmentMajor } from '@shopify/polaris-icons';\nimport clx from 'classnames';\nimport parse from 'html-react-parser';\nimport React, { useCallback, useEffect, useMemo } from 'react';\nimport { RewardTier } from '../../../../../../common/defaultMetafields';\nimport { REWARD_ITEM_PROPERTY_KEY } from '../../../constants/index';\nimport { convertCurrency, formatMoney } from '../../../helpers/currency';\nimport { useCartTotal } from '../../../hooks/useCartTotal';\nimport { AddToCartOpensCart, CartItem, ItemToAddToCart, ItemToChangeInCart } from '../../../platform';\nimport { StorageEngine } from '../../../services/storage';\nimport {\n  calcCountProgress,\n  calculateCountTieredProgress,\n  calculateProgress,\n  calculateTieredProgress,\n} from '../../../utils';\nimport { withErrorBoundary } from '../HOCs';\nimport styles from './styles.module.scss';\nimport { IRewardsModule } from './types';\nimport { useCartItems } from './hooks/useCartItems';\nimport { useCartItemCategories } from './hooks/useCartItemCategories';\nimport { useCartHelpers } from '../../../hooks/useCartHelpers';\n\nconst sessionStorageEngine = new StorageEngine('session');\n\nconst UnsafeRewardsModule: React.FC<IRewardsModule> = ({ platform, cart, refetchCart }) => {\n  const { itemCount: cartItemCount } = useCartItems({\n    cart,\n    settings: platform.settings,\n    includeRewards: false,\n  });\n\n  const { rewardItems } = useCartItemCategories({\n    cart,\n    settings: platform.settings,\n  });\n\n  const { totalAfterAllDiscountsWithoutGiftCards, totalAfterOnlyDiscountCodesWithoutGiftCards } = useCartTotal({\n    cart,\n  });\n\n  const {\n    rewardsBarBackgroundColor,\n    rewardsBarForegroundColor,\n    rewardsBasis,\n    rewardsEditor,\n    rewardsEditorAfterText,\n    rewardsEditorForItemCount,\n    rewardsItemCount,\n    rewardsMinAmount,\n    rewardsTargetType,\n    rewardsTiers,\n    rewardsTierProducts,\n    rewardsShowIconWithSingleTier,\n  } = platform.settings.upcartEditorSettings;\n\n  if (rewardsTiers.tiers.length === 0) {\n    rewardsTiers.tiers.push({\n      targetType: rewardsTargetType,\n      minAmount: rewardsMinAmount,\n      itemCount: rewardsItemCount,\n      textBeforeReachingForCartTotal: rewardsEditor,\n      textBeforeReachingForItemCount: rewardsEditorForItemCount,\n      rewardDescription: 'Free Shipping',\n      products: rewardsTierProducts,\n    });\n  }\n\n  // Calculate total price of non-gift-card reward items already present in the cart (BEAM-1664 & BEAM-400)\n  const rewardsItemsTotalPrice = rewardItems.reduce((total, item) => {\n    if (item.gift_card) return total;\n    return total + (rewardsTiers.tiers[0].targetType === 'shipping' ? item.line_price : item.original_line_price);\n  }, 0);\n\n  // See Linear issue BEAM-400 for a full explanation of this logic.\n  const totalPrice =\n    (rewardsTiers.tiers[0].targetType === 'shipping'\n      ? totalAfterAllDiscountsWithoutGiftCards\n      : totalAfterOnlyDiscountCodesWithoutGiftCards) - rewardsItemsTotalPrice;",
                "filename": "web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx",
                "start_index": 0,
                "end_index": 2983,
                "start_line": 1,
                "end_line": 79,
                "max_line": 492,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<LegacyCard.Section>\n      <div>\n        <div className={styles.TierSettings}>\n          <div>\n            <ProductSelectModal\n              isOpen={productModalIsOpen}\n              onClose={() => setProductModalIsOpen(false)}\n              onSave={(value) => {\n                const product = value.products[0];\n                setFieldValue(\n                  `upcartEditorSettings.rewardsTiers.tiers[${productModalIndex}].products[${productTierIndex}]`,\n                  product,\n                );\n                setFieldTouched(\n                  `upcartEditorSettings.rewardsTiers.tiers[${productModalIndex}].products[${productTierIndex}]`,\n                  true,\n                );\n                setProductModalIsOpen(false);\n              }}\n              selectedProducts={\n                values.upcartEditorSettings.rewardsTiers.tiers[productModalIndex].products?.[productTierIndex]\n                  ? ([\n                      values.upcartEditorSettings.rewardsTiers.tiers[productModalIndex].products?.[productTierIndex],\n                    ] as Product[])\n                  : []\n              }\n              multiProduct={false}\n            />\n            {tiers.map((tier, index) => (\n              <div key={index}>\n                {tiers.length > 1 ? (\n                  <div>\n                    {index != 0 && <br />}\n                    {index != 0 && <hr />}\n                    {index != 0 && <br />}\n                    <p style={{ textDecoration: 'underline', fontSize: '18px', marginBottom: '10px' }}>\n                      Tier {index + 1}\n                    </p>\n                  </div>\n                ) : (\n                  <Field\n                    id=\"upcartEditorSettings.rewardsShowIconWithSingleTier\"\n                    label={t('Show reward icon')}\n                    name={`upcartEditorSettings.rewardsShowIconWithSingleTier`}\n                    component={CheckboxField}\n                  />\n                )}\n                <Field\n                  id=\"upcartEditorSettings.targetType\"\n                  label={'Reward Type'}\n                  name={`upcartEditorSettings.rewardsTiers.tiers[${index}].targetType`}\n                  component={SelectField}\n                  options={[\n                    { label: 'Shipping', value: 'shipping' },\n                    { label: 'Discount', value: 'productsOrOrder' },\n                    { label: 'Product', value: 'discountProduct' },\n                  ]}\n                />\n                {(tiers.length > 1 || values.upcartEditorSettings.rewardsShowIconWithSingleTier) && (\n                  <Field\n                    id=\"upcartEditorSettings.rewardDescription\"\n                    label={t('Reward Description')}\n                    name={`upcartEditorSettings.rewardsTiers.tiers[${index}].rewardDescription`}\n                    component={InputField}\n                    type=\"text\"\n                    maxLength={25}\n                  />\n                )}\n                {values.",
                "filename": "web/src/@templates/CartEditor/RewardsModule/RewardSettingsModule.tsx",
                "start_index": 1856,
                "end_index": 4849,
                "start_line": 40,
                "end_line": 188,
                "max_line": 248,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<Modal.Section>\n            <Layout>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={GiftCardMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Rewards Module\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Show rewards in the cart such as a free shipping bar!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={CheckoutMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Upsells Module\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Add seamless in-cart upsells to boost your sales!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={AddProductMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Add-ons Module\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Show an add-on such as shipping protection or another product!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={PaintBrushMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Customizations\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Our team will help you customize with trust badges and more!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneHalf>\n                <LegacyCard title=\"See previews below (click arrows to scroll)\" sectioned>\n                  <Carousel\n                    showArrows={true}\n                    showThumbs={false}\n                    showStatus={false}\n                    showIndicators={true}\n                    autoPlay={true}\n                    interval={7500}\n                    infiniteLoop={true}\n                    renderIndicator={(onClickHandler, isSelected, index, label) => {\n                      if (isSelected) {\n                        return (\n                          <li",
                "filename": "web/src/@components/common/ModuleUnlock/ModuleUnlock.tsx",
                "start_index": 2934,
                "end_index": 5930,
                "start_line": 91,
                "end_line": 166,
                "max_line": 295,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const tieredRewardsCount = useMemo(() => {\n    if (sortedTiers.length === 1) {\n      let rewardsCount = parseInt(sortedTiers[0].itemCount);\n      if (Number.isNaN(rewardsCount)) {\n        rewardsCount = 0;\n      }\n      const differenceCount = rewardsCount - cartItemCount;\n\n      if (differenceCount <= 0) {\n        return parse(rewardsEditorAfterText);\n      }\n\n      return parse(sortedTiers[0].textBeforeReachingForItemCount.replace('{COUNT}', differenceCount.toString()));\n    } else if (sortedTiers.length > 1) {\n      if (currentTierCount) {\n        const differenceCount = parseInt(currentTierCount.itemCount) - cartItemCount;\n        return parse(currentTierCount.textBeforeReachingForItemCount.replace('{COUNT}', differenceCount.toString()));\n      } else {\n        // achieved final tier\n        return parse(rewardsEditorAfterText);\n      }\n    }\n  }, [sortedTiers, cartItemCount, rewardsEditorAfterText, currentTierCount]);\n\n  const tieredRewardsAmount = useMemo(() => {\n    if (sortedTiersAmount.length === 1) {\n      const differenceAmount = parseFloat(sortedTiersAmount[0].minAmount) * 100 - totalPrice;\n      const amount = formatMoney(differenceAmount, platform.shop.moneyFormat);\n      if (differenceAmount <= 0) {\n        return parse(rewardsEditorAfterText);\n      }\n\n      return parse(sortedTiersAmount[0].textBeforeReachingForCartTotal.replace('{AMOUNT}', amount));\n    } else if (sortedTiersAmount.length > 1) {\n      if (currentTierAmount) {\n        const differenceAmount = parseFloat(currentTierAmount.minAmount) * 100 - totalPrice;\n        const amount = formatMoney(differenceAmount, platform.shop.moneyFormat);\n        return parse(currentTierAmount.textBeforeReachingForCartTotal.replace('{AMOUNT}', amount));\n      } else {\n        return parse(rewardsEditorAfterText);\n      }\n    }\n  }, [currentTierAmount, platform.shop.moneyFormat, rewardsEditorAfterText, sortedTiersAmount, totalPrice]);\n\n  const { findItemInCart } = useCartHelpers({ platform });\n\n  const removeProductFromCart = useCallback(\n    async (item: Pick<CartItem, 'key' | 'lineIdxFrom1'>) => {\n      const itemRemoved = findItemInCart({ cart, key: item.key, lineIdxFrom1: item.lineIdxFrom1 });\n      if (itemRemoved) {\n        return platform.cart\n          .changeCartItem({ item, settings: platform.settings, newQuantity: 0 })\n          .then(async (res) => {\n            platform.publicApi.upcartOnItemRemoved(itemRemoved.key, itemRemoved);\n          })\n          .catch((e) => console.error(e));\n      }\n    },\n    [platform.cart, cart, platform.publicApi, platform.settings, findItemInCart],\n  );",
                "filename": "web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx",
                "start_index": 5563,
                "end_index": 8164,
                "start_line": 158,
                "end_line": 487,
                "max_line": 492,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "[\n  { selector: 'div#CartCount[data-cart-count-bubble] > span[data-cart-count]', content: { type: 'innerHtml' } }, // Debut theme\n  { selector: 'div#CartCount[site-header__cart-count] > span#item_count', content: { type: 'innerHtml' } }, // For theme ID 120599248957\n  { selector: \"a#cart-icon-bubble div[class~='cart-count-bubble'] > span\", content: { type: 'innerHtml' } }, // Dawn theme\n  { selector: \"#sticky-app-client div[data-cl='sticky-button'] > div:last-child\", content: { type: 'innerHtml' } }, // app\n  { selector: 'span[data-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'span.cart_count', content: { type: 'innerHtml' } },\n  { selector: 'span.counter.qty', content: { type: 'innerHtml' } },\n  { selector: '.current-cart-count > span.inner-count', content: { type: 'innerHtml' } },\n  { selector: \"[class*='cart-item-count']\", content: { type: 'innerHtml' } },\n  { selector: \"[class*='cart-link__count']\", content: { type: 'innerHtml' } },\n  { selector: '.cart-icon--basket2 > div', content: { type: 'innerHtml' } },\n  { selector: 'span.bigcounter', content: { type: 'innerHtml' } }, // bengalores.com\n  { selector: 'span.header__cart-count', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"].gt_show-cart > span.gt_cart-count', content: { type: 'innerHtml' } },\n  { selector: 'button#CartButton > span[x-text=\"$store.cart_count.count\"]', content: { type: 'innerHtml' } },\n  { selector: '#CartLink #CartCount', content: { type: 'innerHtml' } },\n  { selector: '.cart-count-bubble > span[data-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'div.header__cart-count > span[data-js-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"] div[data-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'span.cart-items-count', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"][aria-label=\"Cart\"].cart-icon--basket1 > div', content: { type: 'innerHtml' } },\n  { selector: 'cart-count.header__cart-count', content: { type: 'innerHtml' } },\n  { selector: '.Header__CartCount', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"] #CartCount', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"] .js-cart-count', content: { type: 'innerHtml' } },\n  {\n    selector: 'a[href*=\"/cart\"] span.site-header-cart--count',\n    content: { type: 'dataAttribute', attributeName: 'data-header-cart-count' },\n    onCountZero: ({ el }) => {\n      el.classList.remove('visible');\n    },\n    onCountNonZero: ({ el }) => {\n      el.classList.add('visible');\n    },\n  },\n  /**\n   * jodis-471.myshopify.com\n   * See Linear issue BEAM-828\n   */",
                "filename": "web/storefront/src/platform/online-store/cart/cart.ts",
                "start_index": 15097,
                "end_index": 17744,
                "start_line": 69,
                "end_line": 520,
                "max_line": 589,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n  id: 7680954040579,\n  title: 'Placeholder Product',\n  handle: 'derby-tier-backpack',\n  description:\n    '\\u003cp\\u003e\\u003cem\\u003eThis is a demonstration store. You can purchase products like this from \\u003ca href=\"http://unitedbyblue.com/\" target=\"_blank\"\\u003eUnited By Blue\\u003c/a\\u003e.\\u003c/em\\u003e\\u003c/p\\u003e\\n\\u003cp\\u003eOur Derby backpack is built with downpour proof sustainable canvas complemented by leather trim and brass hardware. Features padded canvas shoulder straps adjustable for all -day comfort. Finished with a drawstring closure and snap buckles to keep your belongings safe and secure on any trail taken.\\u003c/p\\u003e\\n\\u003cul\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003e100% organic waxed 18 oz canvas\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003eFull grain genuine leather trim\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003eHeavy-duty brass hardware and YKK zippers\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003eLifetime\\u00a0Guarantee\\u003c/li\\u003e\\n\\u003c/ul\\u003e\\n\\u003cul class=\"tabs-content\"\\u003e\\u003c/ul\\u003e',\n  published_at: '2022-05-07T13:11:39-06:00',\n  created_at: '2022-05-07T13:11:41-06:00',\n  vendor: 'United By Blue',\n  type: 'Bags',\n  tags: [],\n  price: 11300,\n  price_min: 11300,\n  price_max: 11300,\n  available: true,\n  price_varies: false,\n  compare_at_price: 12600,\n  compare_at_price_min: 12600,\n  compare_at_price_max: 12600,\n  compare_at_price_varies: false,\n  variants: [\n    {\n      id: 42789609046275,\n      title: 'Nutmeg',\n      option1: 'Nutmeg',\n      option2: null,\n      option3: null,\n      sku: '4160',\n      requires_shipping: true,\n      taxable: true,\n      featured_image: null,\n      available: true,\n      name: 'Derby Tier Backpack - Nutmeg',\n      public_title: 'Nutmeg',\n      options: ['Nutmeg'],\n      price: 11300,\n      weight: 1361,\n      compare_at_price: 12600,\n      inventory_management: 'shopify',\n      barcode: '',\n      requires_selling_plan: false,\n      selling_plan_allocations: [],\n    },\n  ],\n  images: [\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_nutmeg_810294de-9152-4bf7-b5e0-b88fc94a1ff8.jpg?v=1651950701',\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_moss_drawstring.jpg?v=1651950701',\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/product_lifestyle-58.jpg?v=1651950701',\n  ],\n  featured_image:\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_nutmeg_810294de-9152-4bf7-b5e0-b88fc94a1ff8.jpg?v=1651950701',\n  options: [{ name: 'Color', position: 1, values: ['Nutmeg'] }],\n  url: NO_HREF, // prevent redirect in preview",
                "filename": "web/src/@templates/CartEditor/platform/preview/products/fake-products.ts",
                "start_index": 4669,
                "end_index": 7380,
                "start_line": 1,
                "end_line": 504,
                "max_line": 559,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const handleRedirect = useCallback(\n    (event: React.MouseEvent) => {\n      // NOTE: if there is default theme behaviour that overrides clicks on\n      // <a> tags, this handler will NOT be called. The redirectUrl\n      // is added as an href on the <a> tag and used here so that the customer\n      // call still go to checkout/cart if this handler doesn't get called\n      setCheckoutButtonIsLoading(true);\n      try {\n        // NOTE: if the following Public API function throws and error, we should NOT perform\n        // the redirect. This is documented behaviour in the Public API docs.\n        // See Linear issue BEAM-653 for more info.\n        platform.publicApi.upcartOnCheckout(event);\n        for (const listener of platform.publicApi.upcartCheckoutListeners) {\n          listener();\n        }\n      } catch {\n        setCheckoutButtonIsLoading(false);\n        return;\n      }\n      event.preventDefault();\n      document.location.href = redirectUrl;\n    },\n    [redirectUrl, platform],\n  );\n\n  return (\n    <div className={`${styles.Footer} UpcartDesignSettings__cartAccentColor upcart-footer`}>\n      {children}\n      <DiscountCodesAndSavings\n        platform={platform}\n        cartWithHiddenItems={cartWithHiddenItems}\n        refetchCart={refetchCart}\n      />\n\n      <HtmlField platform={platform} fieldKey=\"aboveCheckoutButton\" totalPrice={totalPrice} />\n\n      <div className={`${styles.Footer__checkoutButton}`}>\n        <CustomButton\n          key={totalPrice}\n          url={redirectUrl}\n          fullWidth\n          onClick={handleRedirect}\n          loading={checkoutButtonIsLoading}\n        >\n          {parse(buttonText.replace(/{{total_price}}/g, formatMoney(totalPrice, platform.shop.moneyFormat)))}\n        </CustomButton>\n      </div>\n\n      <HtmlField platform={platform} fieldKey=\"belowCheckoutButton\" totalPrice={totalPrice} />\n\n      {settings.upcartEditorSettings.expressPayModule && <ExpressPayButtonsModule platform={platform} />}\n\n      {settings.upcartSettings.showContinueShoppingButton && (\n        <div\n          className={`upcart-continue-shopping UpcartDesignSettings__cartTextColor ${styles.Footer__continueShopping}`}\n        >\n          {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n          <a onClick={continueHandler}>\n            {settings.upcartSettings.translations.continueShopping ?? 'Or continue shopping'}\n          </a>\n        </div>\n      )}\n      {/* BELOW MODULES */}\n      {settings.upcartEditorSettings.trustBadgesModule &&\n        settings.upcartEditorSettings.trustBadges.position === 'bottom' && (\n          <TrustBadgesModule platform={platform}></TrustBadgesModule>\n        )}\n    </div>\n  );\n};\n\nexport default Footer;",
                "filename": "web/storefront/src/modules/CartPopup/Footer/Footer.tsx",
                "start_index": 2269,
                "end_index": 4973,
                "start_line": 57,
                "end_line": 128,
                "max_line": 128,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "/**\n * This file is for integration with the Product Options & Customizer app.\n * https://apps.shopify.com/product-customizer\n */\nimport { REWARD_ITEM_PROPERTY_KEY } from '../constants';\nimport type { CartItem } from '../platform';\n\nexport function itemIsProductCustomizerAddon(item: CartItem) {\n  return item.product_type === 'SHOPSTORM_HIDDEN_PRODUCT';\n}\n\nexport function itemIsReward(item: CartItem): boolean {\n  return Boolean(item.properties?.[REWARD_ITEM_PROPERTY_KEY]);\n}",
                "filename": "web/storefront/src/utils/product-customizer.ts",
                "start_index": 0,
                "end_index": 478,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const dawnCartHtml = `<svg class=\"icon icon-cart\" aria-hidden=\"true\" focusable=\"false\" role=\"presentation\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 40 40\" fill=\"none\">\n  <path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M20.5 6.5a4.75 4.75 0 00-4.75 4.75v.56h-3.16l-.77 11.6a5 5 0 004.99 5.34h7.38a5 5 0 004.99-5.33l-.77-11.6h-3.16v-.57A4.75 4.75 0 0020.5 6.5zm3.75 5.31v-.56a3.75 3.75 0 10-7.5 0v.56h7.5zm-7.5 1h7.5v.56a3.75 3.75 0 11-7.5 0v-.56zm-1 0v.56a4.75 4.75 0 109.5 0v-.56h2.22l.71 10.67a4 4 0 01-3.99 4.27h-7.38a4 4 0 01-4-4.27l.72-10.67h2.22z\"></path>\n  </svg><span class=\"visually-hidden\">Cart</span><div class=\"cart-count-bubble\"><span aria-hidden=\"true\"></span></div>`;\n\nconst dawnEmptyCartHtml = `<svg class=\"icon icon-cart-empty\" aria-hidden=\"true\" focusable=\"false\" role=\"presentation\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 40 40\" fill=\"none\">\n  <path d=\"m15.75 11.8h-3.16l-.77 11.6a5 5 0 0 0 4.99 5.34h7.38a5 5 0 0 0 4.99-5.33l-.78-11.61zm0 1h-2.22l-.71 10.67a4 4 0 0 0 3.99 4.27h7.38a4 4 0 0 0 4-4.27l-.72-10.67h-2.22v.63a4.75 4.75 0 1 1 -9.5 0zm8.5 0h-7.5v.63a3.75 3.75 0 1 0 7.5 0z\" fill=\"currentColor\" fill-rule=\"evenodd\"></path>\n  </svg><span class=\"visually-hidden\">Cart</span>`;\n\nconst emptyCartElement = document.querySelector('a#cart-icon-bubble');\n\nconst defaultImpulseWithItemHtml = `<span class=\"cart-link\"><svg aria-hidden=\"true\" focusable=\"false\" role=\"presentation\" class=\"icon icon-bag\" viewBox=\"0 0 64 64\"><g fill=\"none\" stroke=\"#000\" stroke-width=\"2\"><path d=\"M25 26c0-15.79 3.57-20 8-20s8 4.21 8 20\"></path><path d=\"M14.74 18h36.51l3.59 36.73h-43.7z\"></path></g></svg><span class=\"icon__fallback-text\">Cart</span><span class=\"cart-link__bubble cart-link__bubble--visible\"></span></span>`;\nconst defaultImpulseEmptyHtml = `<span class=\"cart-link\"><svg aria-hidden=\"true\" focusable=\"false\" role=\"presentation\" class=\"icon icon-bag\" viewBox=\"0 0 64 64\"><g fill=\"none\" stroke=\"#000\" stroke-width=\"2\"><path d=\"M25 26c0-15.79 3.57-20 8-20s8 4.21 8 20\"></path><path d=\"M14.74 18h36.51l3.59 36.73h-43.7z\"></path></g></svg><span class=\"icon__fallback-text\">Cart</span><span class=\"cart-link__bubble\"></span></span>`;\n\nconst defaultDawnHandler = (count: number) => {\n  const cartElement: HTMLElement | null = document.querySelector(\n    \"a#cart-icon-bubble div[class~='cart-count-bubble'] > span\",\n  );\n\n  if (emptyCartElement) {\n    if (!cartElement && count !== 0) {\n      emptyCartElement.innerHTML = dawnCartHtml;\n    }\n\n    if (cartElement && count === 0) {\n      emptyCartElement.innerHTML = dawnEmptyCartHtml;\n    }\n  }\n};\n\nconst impulseHandler = (count: number) => {\n  const cartElement = document.querySelector(\"a[href*='/cart'][aria-controls='CartDrawer']\");\n  if (!cartElement || !count) return;\n  if (count === 0) {\n    cartElement.innerHTML = defaultImpulseEmptyHtml;\n  } else {\n    cartElement.innerHTML = defaultImpulseWithItemHtml;\n  }\n};\n\n// alevrenl.myshopify.com",
                "filename": "web/storefront/src/platform/online-store/cart/cart.ts",
                "start_index": 20703,
                "end_index": 23627,
                "start_line": 543,
                "end_line": 582,
                "max_line": 589,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "// SHINEON PRODUCT TEMPLATE\nconst handleAddToCartForShineon = (platform: CartPlatform, e: DOMEvent<HTMLInputElement>): boolean => {\n  if (e.target.id && e.target.id.includes('so-btn-add-to-cart')) {\n    // const isBwBox = (document.querySelector('#product-form-options-wrap .so-variant-change.so-active') as HTMLInputElement | null)?.dataset.option1;\n    //\n    // if (isBwBox === \"B&W Box\") {\n    //   const shineonModal: HTMLElement | null = document.querySelector(\".so-modal.so-modal-e-and-g-upsell.fade.in\");\n    //   const shineonModalBackdrop: HTMLElement | null = document.querySelector(\".so-modal-backdrop.fade.in\");\n    //\n    //   if (shineonModal) {\n    //     shineonModal.style.display = \"block\";\n    //\n    //     if (shineonModalBackdrop) shineonModalBackdrop.style.display = \"block\";\n    //   }\n    //\n    //   return true;\n    // }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n\n    const items: Items[] = [];\n    const params = new URLSearchParams(document.location.search);\n    const productId = params.get('variant') || e.target.id.slice(e.target.id.lastIndexOf('-') + 1);\n    const quantity: string = (document.querySelector('.so-cart-qty-input') as HTMLInputElement | null)?.value || '1';\n    console.debug('this');\n    items.push({ id: productId, quantity: quantity });\n\n    // Addons\n    const addons: NodeListOf<HTMLInputElement> = document.querySelectorAll('.addon_product-label');\n\n    if (addons && addons.length !== 0) {\n      for (const addon of addons) {\n        const addonId = (addon.querySelector('input[type=checkbox]:checked') as HTMLInputElement | null)?.dataset\n          .variantId;\n\n        if (addonId) {\n          const quantity = (addon.querySelector('.addon__quantity') as HTMLInputElement | null)?.innerText || '1';\n          items.push({ id: addonId, quantity: quantity, properties: {} });\n        }\n      }\n    }\n\n    manyAddToCart(platform, items);\n\n    return true;\n  }\n\n  return false;\n};",
                "filename": "web/storefront/src/interceptors/handlers/handleAddToCartException.ts",
                "start_index": 4845,
                "end_index": 6796,
                "start_line": 123,
                "end_line": 199,
                "max_line": 201,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": ", [cartItems, upsellItems, showUpsellItemsAlreadyInCart, platform.products, preview])",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 6857,
                "end_index": 6942,
                "start_line": 175,
                "end_line": 175,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const PRIMARY_CART_BUTTON_SELECTOR = [\n  // We use the \"*=\" operator to allow selecting all of the following:\n  // - <a href=\"/cart\">\n  // - <a href=\"https://test.com/cart\">\n  // - <a href=\"/cart?foo=bar\">\n  \"a[href*='/cart']\",\n\n  // We do not want to accidentally select a link that is supposed to _modify_ the cart.\n  // If we didn't have these conditions, then we would break cart editing functionality.\n  \":not([href*='/cart/change'])\",\n  \":not([href*='/cart/add'])\",\n  \":not([href*='/cart/clear'])\",\n\n  // We do not want to accidentally select a link to a product or collection\n  // that starts with \"cart...\", such as:\n  // - <a href=\"/products/cart-wheel\">\n  // - <a href=\"/collections/cart-wheels\">\n  \":not([href*='/products/cart'])\",\n  \":not([href*='/collections/cart'])\",\n\n  // The .upcart class is used for the following purposes:\n  // 1. to ensure that the checkout button can go to cart if the setting is enabled\n  // 2. in custom buttons to prevent UpCart from overriding the click\n  \":not([class*='upcart'])\",\n\n  // For compatibility with Revy (https://apps.shopify.com/sales-booster-upsell-cross-sell-by-revy-shopify-apps),\n  // we don't want to override clicks on their button.\n  \":not([class*='revy-upsell-btn-cart'])\",\n\n  // We do not want to accidentally select a link that includes a discount code that includes \"cart\".\n  // These links could be direct discount links, or checkout links that include the discount code in\n  // the URL.\n  // - <a href=\"/checkout?discount=cart-discount\">\n  // - <a href=\"/discount/cart-discount\">\n  \":not([href*='/checkout'])\",\n  \":not([href*='/discount'])\",\n\n  // The following group of conditions is used to prevent selecting Cart Permalinks.\n  // Reference: https://shopify.dev/docs/apps/checkout/cart-permalinks/cart-permalinks\n  //\n  // Cart permalinks are supposed to go to checkout with pre-populated items. It is possible\n  // to redirect cart permalinks to the storefront, but in these cases we still don't want to\n  // select the link because that would prevent the items from being added to the cart.\n  //\n  // The reference above has some examples of what a cart permalink looks like, but\n  // here are some for quick reference:\n  // - <a href=\"/cart/1234567890:1\">\n  // - <a href=\"/cart/1234567890:1,987654321:3\">\n  // - <a href=\"/cart/1234567890:1?payment=shop_pay\">\n  // - <a href=\"/cart/1234567890:1?discount=cart-discount\">\n  //\n  // Ideally, we would use a regex to match cart permalinks, but we can't use\n  // a regex in a CSS selector.\n  \":not([href*='/cart/1'])\",\n  \":not([href*='/cart/2'])\",\n  \":not([href*='/cart/3'])\",\n  \":not([href*='/cart/4'])\",\n  \":not([href*='/cart/5'])\",\n  \":not([href*='/cart/6'])\",\n  \":not([href*='/cart/7'])\",\n  \":not([href*='/cart/8'])\",\n  \":not([href*='/cart/9'])\",\n].join('');",
                "filename": "web/storefront/src/constants/index.ts",
                "start_index": 423,
                "end_index": 3203,
                "start_line": 11,
                "end_line": 73,
                "max_line": 163,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "export async function handlePlanAcceptanceCallback({\n  shopifyService,\n  embeddedAppUrl,\n  unauthenticatedUnsafeAcceptedShopifyChargeId,\n}: {\n  shopifyService: ShopifyService;\n  embeddedAppUrl: URL;\n  unauthenticatedUnsafeAcceptedShopifyChargeId: number | null;\n}): Promise<PlanAcceptanceCallbackRedirect> {\n  const initiatedPlanAcceptance = await InitiatedPlanAcceptanceModel.findOneAndDelete({\n    shop: shopifyService.shop,\n    shopifyChargeId: unauthenticatedUnsafeAcceptedShopifyChargeId,\n  });\n  if (!initiatedPlanAcceptance) {\n    throw new Error(\n      `[${shopifyService.shop}] Cannot accept plan because the plan acceptance was not initiated through our server. This is a security risk and could indicate a malicious attempt to change a shop's plan. Shopify charge id: ${unauthenticatedUnsafeAcceptedShopifyChargeId}`,\n    );\n  }\n\n  // track userlist event for plan accepted\n  await trackUserlistEvent({\n    domain: shopifyService.shop,\n    eventName: USERLIST_EVENTS.upcart_pricing_accept,\n  });\n  const safeChargeId = initiatedPlanAcceptance.shopifyChargeId;\n  const isCancellingCharge = !safeChargeId;\n  if (isCancellingCharge) {\n    const activeSubscription = await shopifyService.getActiveSubscription();\n    if (activeSubscription) {\n      await shopifyService.graphql.AppSubscriptionCancel({ id: activeSubscription.id });\n    }\n  }\n  const shop = await ShopModel.findOneAndUpdate({ domain: shopifyService.shop }, [\n    {\n      $set: {\n        acceptedUpcartPlanId: initiatedPlanAcceptance.upcartPlanId,\n        hasAcceptedBilling: true,\n        // only update the firstFreeTrialStartDate if it is not already set\n        firstFreeTrialStartDate: {\n          $cond: {\n            if: '$firstFreeTrialStartDate',\n            then: '$firstFreeTrialStartDate',\n            else: new Date(Date.now()),\n          },\n        },\n      },\n    },\n  ]);\n  const hasCompletedOnboarding = Boolean(shop.isInstall);\n  const redirectUrl = new URL(embeddedAppUrl.toString());\n  if (!hasCompletedOnboarding) {\n    redirectUrl.pathname += '/onboarding';\n  }\n  return {\n    redirectUrl: redirectUrl.toString(),\n  };\n}",
                "filename": "web/server/modules/billing/plan-acceptance/plan-acceptance.ts",
                "start_index": 1340,
                "end_index": 3454,
                "start_line": 38,
                "end_line": 161,
                "max_line": 161,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n    selector: 'a[href*=\"/cart\"] span.header-cart__count',\n    content: { type: 'innerHtml' },\n    onCountZero: ({ el }) => {\n      const container = el.closest('.has-cart-count');\n      container?.classList.remove('has-cart-count');\n    },\n    onCountNonZero: ({ el }) => {\n      const container = el.closest('.header-cart[data-ajax-cart-trigger]');\n      container?.classList.add('has-cart-count');\n    },\n  },\n  {\n    selector: 'a[href*=\"/cart\"] .cart-link__bubble',\n    content: { type: 'noContent' },\n    onCountZero: ({ el }) => {\n      el.classList.remove('cart-link__bubble--visible');\n    },\n    onCountNonZero: ({ el }) => {\n      el.classList.add('cart-link__bubble--visible');\n    },\n  },\n  {\n    selector: '.cart-link__bubble-num',\n    content: { type: 'innerHtml' },\n    // The following callbacks are used specifically for modernbandit.myshopify.com.\n    // However, the selector above and innerHtml modifications are used for other\n    // stores as well. Even if modernbandit.myshopify.com uninstalls, we should not remove\n    // the selector as that would break other stores.\n    onCountZero: () => {\n      if (getShopifyDomain() === 'modernbandit.myshopify.com') {\n        document.body.classList.remove('cart-has-items');\n      }\n    },\n    onCountNonZero: () => {\n      if (getShopifyDomain() === 'modernbandit.myshopify.com') {\n        document.body.classList.add('cart-has-items');\n      }\n    },\n  },\n  {\n    selector: 'a[href*=\"/cart\"].header-trigger__link--cart',\n    content: { type: 'noContent' },\n    onCountZero: ({ el }) => {\n      el.classList.remove('js-cart-full');\n    },\n    onCountNonZero: ({ el }) => {\n      el.classList.add('js-cart-full');\n    },\n  },\n  /**\n   * fragrancesoil.myshopify.com\n   * See Linear issue BEAM-1377\n   */\n  {\n    selector: 'a[href*=\"/cart\"] .sf-cart-count',\n    content: { type: 'innerHtml' },\n    onCountZero: ({ el }) => {\n      el.closest('section.sf-header')?.classList.remove('cart-has-items');\n    },\n    onCountNonZero: ({ el }) => {\n      el.closest('section.sf-header')?.classList.add('cart-has-items');\n    },\n  },\n  /**\n   * instant-speaker.myshopify.com\n   * See Linear issue BEAM-1311\n   */\n  {\n    selector: '#header-cart-drawer-item-count',\n    content: { type: 'innerHtml' },\n    onCountZero: ({ el }) => {\n      el.classList.add('hide');\n    },\n    onCountNonZero: ({ el }) => {\n      el.classList.remove('hide');\n    },\n  },\n  /**\n   * rdbody.myshopify.com\n   * See Linear issue BEAM-1305\n   */\n  {\n    selector: '.cart-count-badge',\n    content: { type: 'innerHtml' },\n    onCountZero: ({ el }) => {\n      el.classList.add('hide');\n    },\n    onCountNonZero: ({ el }) => {\n      el.classList.remove('hide');\n    },\n  },\n  {\n    selector: 'a[href*=\"/cart\"] #cart-item-count',\n    content: { type: 'innerHtml' },\n    onCountZero: ({ el }) => {\n      el.classList.remove('visible');\n    },\n    onCountNonZero: ({ el }) => {\n      el.classList.add('visible');\n    },\n  },\n]",
                "filename": "web/storefront/src/platform/online-store/cart/cart.ts",
                "start_index": 17747,
                "end_index": 20700,
                "start_line": 1,
                "end_line": 573,
                "max_line": 589,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "cartIsEnabled: { type: 'boolean', value: true },\n\n    // Design Settings\n    settingsModule: {\n      type: 'json',\n      value: {\n        fields: {\n          /**\n           * This field has changed to mean \"show strikethrough prices\". This means that we also show the strikethrough\n           * if there is a discount applied to an item, even if the item doesn't have a compare-at price.\n           */\n          compareAtPrice: true,\n          inheritFonts: true,\n          backgroundColor: '#FFFFFF',\n          cartAccentColor: '#f6f6f7',\n          buttonColor: '#000000',\n          buttonTextColor: '#FFFFFF',\n          buttonTextHoverColor: '#e9e9e9',\n          cartTextColor: '#000000',\n        },\n      },\n    },\n\n    // Announcements Module\n    announcementModule: { type: 'boolean', value: false },\n    announcementEditor: {\n      type: 'multi_line_text_field',\n      value: '<p>Your products are reserved for <b>{TIMER}</b> minutes!</p>',\n    },\n    announcementBackgroundColor: { type: 'single_line_text_field', value: '#CDE0E0' },\n    announcementModulePosition: { type: 'single_line_text_field', value: 'top' },\n    announcementBorderColor: { type: 'single_line_text_field', value: '#C5E6FD' },\n    announcementTimer: { type: 'single_line_text_field', value: '00:00' },\n\n    // Rewards Module\n    rewardsModule: { type: 'boolean', value: false },\n    rewardsBarBackgroundColor: { type: 'single_line_text_field', value: '#E2E2E2' },\n    rewardsBarForegroundColor: { type: 'single_line_text_field', value: '#93D3FF' },\n    rewardsBasis: { type: 'single_line_text_field', value: 'cartTotal' },\n    rewardsTargetType: { type: 'single_line_text_field', value: 'productsOrOrder' },\n    rewardsMinAmount: { type: 'single_line_text_field', value: '125' },\n    rewardsEditor: {\n      type: 'multi_line_text_field',\n      value: '<p>You\u2019re <b>{AMOUNT}</b> away from free shipping!</p>',\n    },\n    rewardsEditorAfterText: { type: 'multi_line_text_field', value: 'Free shipping unlocked!' },\n    rewardsEditorForItemCount: {\n      type: 'multi_line_text_field',\n      value: '<p>You\u2019re <b>{COUNT}</b> products away from free shipping!</p>',\n    },\n    rewardsItemCount: { type: 'single_line_text_field', value: '5' },\n    rewardsTiers: {\n      type: 'json',\n      value: { tiers: [], geoLocationPricing: [], rewardsAutoConvertCurrency: false, rewardsGeoLocationEnabled: false },\n    },\n    rewardsTierProducts: { type: 'json', value: [] },\n    rewardsShowIconWithSingleTier: { type: 'boolean', value: false },\n\n    // Upsells Module\n    upsellsModule: { type: 'boolean', value: false },\n    upsellsDirection: { type: 'single_line_text_field', value: 'horizontal' },\n    upsellsTitle: { type: 'multi_line_text_field', value: \"You'll love these\" },\n    maximumUpsellsToShow: { type: 'single_line_text_field', value: '10' },\n    upsellsShouldLimit: { type: 'boolean', value: false },\n    upsellsTrigger: { type: 'boolean', value: false },\n    sho",
                "filename": "common/defaultMetafields.ts",
                "start_index": 14968,
                "end_index": 17911,
                "start_line": 417,
                "end_line": 482,
                "max_line": 567,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "initial_doc_snippets": [
            {
                "code": "---\nid: 3vst4bcr\ntitle: Discount Codes Module\nfile_version: 1.1.3\napp_version: 1.18.31\n---\n\n# Required background information\n\n## Discount types\n\nThere are two types of discounts: **automatic discounts** and **discount codes**.\n\n- **Automatic discounts** are applied to a cart or checkout automatically when the discount criteria are met.\n\n- **Discount codes** must be manually typed in by the customer. They stay active until the customer either removes the code, enters a different conflicting discount code, or changes their cart/checkout so that the discount is not longer applicable.\n\nThis module is specifically for **discount codes**. We do not have to worry about **automatic discounts** because they will work in the cart by default and they do not require any user interaction.\n\n## Discount targets\n\nA discount can be used to reduce the cost of **product(s)**, **order**, or **shipping**.\n\n- **Product discounts** reduce the price of one or more products and are shown as a reduction on individual line items.\n\n- **Order discounts** reduce the price of the order as a whole and are shown as a reduction on the overal price.\n\n- **Shipping discounts** reduce the price of shipping.\n\n# Read and write discount codes\n\n## Read discount codes\n\nWe read discount codes using the `cart.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:78:24:26:`    const cart: Cart&lt;CartItemWithoutCompareAtPrice&gt; = await fetch(getShopifyRoutesRoot() + &#39;cart.js&#39;).then((res) =&gt;`\"/> Ajax API endpoint.\n\nAn applied discount code will be returned from the API as part of either the `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> or the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/>. The `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> are for order discounts and the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/> are for product discounts.\n\nThese discount applications will include both **automatic discounts** and **discount codes**. We can distinguish between these using the `type`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:460:1:1:`  type: &#39;discount_code&#39; | &#39;&#39;;`\"/> field of the `DiscountApplication`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:446:4:4:`export interface DiscountApplication {`\"/>.\n\n## Apply a discount code\n\n<br/>\n\nWe apply a discount code by making a request from the storefront to the route `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/>.\n\nThe `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/> route is intended by Shopify to be used for [shareable discount links](https://help.shopify.com/en/manual/discounts/managing-discount-codes#promote-a-discount-using-a-shareable-link). Normally a customer would navigate to the link directly in their browser and would be redirected to the storefront. We are using it in a non-standard way by making a background network request.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n23         await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);\n```\n\n<br/>\n\nAfter applying a discount code, we refetch the cart to check if the discount was successfully applied and to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/DiscountCodeModule/DiscountCodeModule.tsx\n\n```tsx\n23           await platform.discounts.attemptApplyDiscountCode({ discountCode: discountCodeToApply });\n24           const updatedCart = await refetchCart();\n25\n26           const discountApplications = getAllUniqueDiscountApplications(updatedCart);\n27           const isValid = discountApplications.some(\n28             (discountApplication) => discountApplication.title === discountCodeToApply,\n29           );\n```\n\n<br/>\n\n## Remove a discount code\n\n<br/>\n\nWe remove a discount code by applying a fake invalid discount code.\n\nThere is no native way to remove discount codes so this is a workaround.\n\nThis behaviour relies on the fact that there can only be one discount code applied in the cart. We are replacing the one allowed discount code with an invalid code.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n14       async removeDiscountCode(): Promise<void> {\n15         const FAKE_INVALID_DISCOUNT_CODE = '~!~!UPCART_REMOVE_DISCOUNT!~!~';\n16         await this.UNSAFE_POSSIBLE_NO_OP_applyDiscountCodeAndSetShopifyCookie({ discountCode: FAKE_INVALID_DISCOUNT_CODE });\n17       }\n```\n\n<br/>\n\nAfter removing a discount code, we refetch the cart to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/components/DiscountCodeBadge/DiscountCodeBadge.tsx\n\n```tsx\n18         await platform.discounts.removeDiscountCode();\n19         await refetchCart();\n```\n\n<br/>\n\n> \u26a0\ufe0f After we apply or remove a discount code, the `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> of discounted line items will change. If we did not refetch the cart then we would have an outdated `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> value which would cause errors if we tried to call `cart/update.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:191:17:21:`    return fetchQd(this.ajaxMutationCartQ, getShopifyRoutesRoot() + &#39;cart/update.js&#39;, {`\"/> or `cart/change.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:153:8:12:`      getShopifyRoutesRoot() + `cart/change.js?${query.toString()}`,`\"/>.\n\n# Limitations\n\n## **Multiple** discount codes are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n50                     Multiple discount codes are not supported.\n```\n\n<br/>\n\n### Why are multiple discount codes not supported?\n\nWe cannot apply multiple discount codes because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support multiple codes. This is the only way that we know of to apply a discount code from the storefront. We will have to wait for Shopify to add support for multiple codes or to find a different way to apply codes which does support multiple.\n\nIf a customer applies two discount codes back to back, the first discount code will be discarded and only use the most recently applied code will affect the cart.\n\n## Free shipping discounts are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n58                   Free shipping discounts are not supported.\n```\n\n<br/>\n\n### Why are free shipping discounts not supported?\n\nWe cannot apply free shipping discounts because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support them.\n\n## Shopify Plus stores using checkout.liquid are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n64                   Shopify Plus stores using checkout.liquid are not supported.\n```\n\n<br/>\n\n### Why are Shopify Plus stores using checkout.liquid not supported?\n\nHistorically, the Ajax API only included automatic discounts and did not include discount codes. Shopify changed this behaviour and started including discounts from discount codes in Ajax API responses. There are still some stores which do not include discount codes in Ajax API responses. The discount codes module does not work on these stores.\n\n### How can we tell if a store is eligible?\n\nThe Ajax API will include discount codes in responses only if the store is on Shopify's new checkout.\n\n<br/>\n\nWe can identify wether or not a store is on Shopify's new checkout by looking at the cart token. If the cart token is 32 characters long and only includes hex digits (0123456789abcdef) then the store is on Shopify's old checkout, otherwise it is on Shopify's new checkout and the Ajax API will include discount codes in responses.\n\nStores that are on Shopify's new checkout may have different token formats. The following are examples that we've seen:\n\n- c1-d3f024e3af037f40bfe1b016b5b76f05\n- Z2NwLXVzLWNlbnRyYWwxOjAxSEZFMjFIV1FZUFc0SlQ3Q00ySFFSSjgy\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart({ cart }: { cart: Cart<CartItem> }): boolean {\n6          if (!cart.token) return false;\n7          const isLegacyCartToken = cart.token.match(/^[0-9a-f]{32}$/) !== null;\n8          return !isLegacyCartToken;\n9        }\n```\n\n<br/>\n\n### What happens if a store is not eligible?\n\n<br/>\n\nIf a store is not eligible then the discount code module will not be shown.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/Cart.tsx\n\n```tsx\n499                      {platform.discounts.getStoreCanApplyDiscountCodesInCart({ cart }) &&\n500                        settings.upcartEditorSettings.discountCodeModule && (\n501                          <DiscountCodeModule platform={platform} refetchCart={refetchCart} />\n502                        )}\n```\n\n<br/>\n\nIn the preview we will show the discount code module even for stores that are not eligible. We do this because it would require a lot of work to check eligibility when not on the storefront.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/platform/preview/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart(args: { cart: Cart<CartItem> }): boolean {\n6          return true;\n7        }\n```\n\n<br/>\n\nThis file was generated by Swimm. [Click here to view it in the app](https://app.swimm.io/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr).",
                "filename": ".swm/discount-codes-module.3vst4bcr.sw.md",
                "start_index": 0,
                "end_index": 11446,
                "start_line": 1,
                "end_line": 231,
                "max_line": 231,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>UpCart Loading...</title>\n    <script>\n      /*\n       * Constants\n       */\n      const INSTALL_SOURCE_QUERY_PARAM = 'via';\n      const COOKIE_LIFETIME_MS = 3 * 24 * 60 * 60 * 1000; // 3 days\n      const COOKIE_NAME = 'upcart_install_source';\n\n      /*\n       * 1. Get the ?via= query for the following steps\n       */\n      const installSource = encodeURIComponent(\n        new URLSearchParams(window.location.search).get(INSTALL_SOURCE_QUERY_PARAM),\n      );\n\n      /*\n       * 2. Set a cookie with the install source for 3 days so we can read it when they install the app\n       */\n      const cookieDomain = '.' + window.location.hostname;\n      const cookieExpiresDate = new Date();\n      cookieExpiresDate.setTime(cookieExpiresDate.getTime() + COOKIE_LIFETIME_MS);\n      const cookieExpires = cookieExpiresDate.toGMTString();\n      document.cookie = `${COOKIE_NAME}=${installSource}; expires=${cookieExpires}; domain=${cookieDomain}; path=/; SameSite=None; Secure`;\n\n      /*\n       * 3. Redirect to the app store, including the install source as a query param for App Store Google Analytics\n       */\n      window.location.replace(`https://apps.shopify.com/upcart-cart-builder?join-via=${installSource}`);\n    </script>\n  </head>\n  <body></body>\n</html>",
                "filename": "web/public/join.html",
                "start_index": 0,
                "end_index": 1304,
                "start_line": 1,
                "end_line": 36,
                "max_line": 36,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Specification: Subscription Upgrades\n\n## Editor\n\nThere should be a module in the editor with:\n\n- Name: \"Subscription Upgrades\"\n- Icon: Repeat Order\n- Default status: disabled\n- Settings:\n  - \"Prevent downgrades\"\n    - Help text: \"If enabled, customers will not be allowed to downgrade from a subscription to one-time purchase. Caution: this may increase cart abandonment.\"\n    - Type: checkbox\n    - Default: disabled\n\n## Cart\n\n> If the subscription upgrades module is disabled in the editor, the cart should skip all subscription upgrade functionality.\n>\n> The following cart specification is applicable only if the subscription upgrades module has been enabled in the editor.\n\n### Behaviour\n\nThe cart frontend for subscription upgrades should be isolated to an area below each line item. This area can include content, or can be omitted if there is nothing to show. If the area includes content, then the area should have:\n\n- Public CSS class: `.upcart-subscription-upgrade-section`\n- Styling: full-width of line item\n\nThe content of each subscription upgrade area should be independent of the content for the subscription areas for any other line items.\n\nThe content of the subscription upgrade area should be as follows:\n\nA. For **one-time purchase** line items:\n\n- If the item cannot be sold as a subscription, nothing should be shown.\n- If the item can be sold as a subscription:\n  - There should be a button with:\n    - Content: \"Upgrade to \\_\\_\\_\\_\", where \\_\\_\\_\\_ is the name of the first selling plan group for the item\n    - When clicked:\n      1. Show a loading spinner instead of text, and disable the button\n      2. Change the item to be a subscription with the first selling plan of the first selling plan group. The line item should have the property `__upcartSubscriptionUpgrade: \"true\"`\n    - Styling: full width of area, match to other buttons in cart\n    - Public CSS class: `.upcart-subscription-upgrade-button`\n\nB. For **subscription** line items:\n\n- There should be a dropdown with:\n  - Content: the name of the current selling plan\n  - Options:\n    - (OPTIONAL) A group with:\n      - Title: \"Full price\"\n      - Options:\n        - \"One-time purchase\"\n      - Condition: this group should be included if the \"Prevent downgrades\" setting is disabled AND the item does not _require_ a selling plan (i.e., it can be sold as a one-time purchase)\n    - A group for each possible selling plan group for the item with:\n      - Title: the name of the selling plan group\n      - Options: the names of the possible selling plans in the group for the item\n  - When selected:\n    1. Show a loading spinner overlayed on the dropdown and disable the dropdown\n    2. Change the selling plan of the item to the selected selling plan. If \"One-time only\" was selected, then remove the selling plan from the item to change it to a one-time purchase. The line item should have the property `__upcartSubscriptionEdit: \"true\"`\n  - Styling: full width of area, match to other dropdowns in cart\n  - Public CSS class: `.upcart-subscription-upgrade-dropdown`\n\nWhen the current purchase option for a line item changes, the content of the subscription upgrade area should be updated to match the new purchase option.\n\n### Edge Cases and Clarifications\n\n- The content of the subscription upgrade area does not depend on _how_ the purchase option was selected. For example, the subscription upgrade area content for an item that was added to the cart as a subscription should be the same as the content for an item that was upgraded from a one-time purchase to a subscription in-cart.\n- When selling plans are being loaded for a product, there should be no content in the subscription upgrade area. Before the selling plans are loaded, we can't fully decide what content to show so it's fine to show nothing.\n- When the selling plan of an item is changed, the quantity of the item should remain constant. If you don't provide a quantity to the AJAX API when changing a line item, then the quantity of the line item will be set to 1 which should be avoided.\n- Selling plans that do not apply to the selected variant for a line item should be ignored. It is possible to have selling plans that apply only to specific variants of a product. In cases where none of the selling plans from a selling plan group apply to the variant for the line item, the selling plan group should be ignored. An ignored group should not be listed in the dropdown (because it would be an empty section) and it should not be used for text of the upgrade button (because it would have no selling plan to select).",
                "filename": "docs/subscription-upgrades.md",
                "start_index": 0,
                "end_index": 4584,
                "start_line": 1,
                "end_line": 71,
                "max_line": 71,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Security Policy\n\n## Supported versions\n\n### New features\n\nNew features will only be added to the master branch and will not be made available in point releases.\n\n### Bug fixes\n\nOnly the latest release series will receive bug fixes. When enough bugs are fixed and its deemed worthy to release a new gem, this is the branch it happens from.\n\n### Security issues\n\nOnly the latest release series will receive patches and new versions in case of a security issue.\n\n### Severe security issues\n\nFor severe security issues we will provide new versions as above, and also the last major release series will receive patches and new versions. The classification of the security issue is judged by the core team.\n\n### Unsupported Release Series\n\nWhen a release series is no longer supported, it's your own responsibility to deal with bugs and security issues. If you are not comfortable maintaining your own versions, you should upgrade to a supported version.\n\n## Reporting a bug\n\nAll security bugs in shopify repositories should be reported to [our hackerone program](https://hackerone.com/shopify)\nShopify's whitehat program is our way to reward security researchers for finding serious security vulnerabilities in the In Scope properties listed at the bottom of this page, including our core application (all functionality associated with a Shopify store, particularly your-store.myshopify.com/admin) and certain ancillary applications.\n\n## Disclosure Policy\n\nWe look forward to working with all security researchers and strive to be respectful, always assume the best and treat others as peers. We expect the same in return from all participants. To achieve this, our team strives to:\n\n- Reply to all reports within one business day and triage within two business days (if applicable)\n- Be as transparent as possible, answering all inquires about our report decisions and adding hackers to duplicate HackerOne reports\n- Award bounties within a week of resolution (excluding extenuating circumstances)\n- Only close reports as N/A when the issue reported is included in Known Issues, Ineligible Vulnerabilities Types or lacks evidence of a vulnerability\n\n**The following rules must be followed in order for any rewards to be paid:**\n\n- You may only test against shops you have created which include your HackerOne YOURHANDLE @ wearehackerone.com registered email address.\n- You must not attempt to gain access to, or interact with, any shops other than those created by you.\n- The use of commercial scanners is prohibited (e.g., Nessus).\n- Rules for reporting must be followed.\n- Do not disclose any issues publicly before they have been resolved.\n- Shopify reserves the right to modify the rules for this program or deem any submissions invalid at any time. Shopify may cancel the whitehat program without notice at any time.\n- Contacting Shopify Support over chat, email or phone about your HackerOne report is not allowed. We may disqualify you from receiving a reward, or from participating in the program altogether.\n- You are not an employee of Shopify; employees should report bugs to the internal bug bounty program.\n- You hereby represent, warrant and covenant that any content you submit to Shopify is an original work of authorship and that you are legally entitled to grant the rights and privileges conveyed by these terms. You further represent, warrant and covenant that the consent of no other person or entity is or will be necessary for Shopify to use the submitted content.\n- By submitting content to Shopify, you irrevocably waive all moral rights which you may have in the content.\n- All content submitted by you to Shopify under this program is licensed under the MIT License.\n- You must report any discovered vulnerability to Shopify as soon as you have validated the vulnerability.\n- Failure to follow any of the foregoing rules will disqualify you from participating in this program.\n\n** Please see our [Hackerone Profile](https://hackerone.com/shopify) for full details\n\n## Receiving Security Updates\n\nTo recieve all general updates to vulnerabilities, please subscribe to our hackerone [Hacktivity](https://hackerone.com/shopify/hacktivity)",
                "filename": "SECURITY.md",
                "start_index": 0,
                "end_index": 4160,
                "start_line": 1,
                "end_line": 59,
                "max_line": 59,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# UpCart 3.0\n\n## Setup\n\nView setup instructions on Notion: https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 133,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "MIT License\n\nCopyright (c) 2021 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
                "filename": "extensions/theme-app-extension/LICENSE.md",
                "start_index": 0,
                "end_index": 1063,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "## Dev Setup\n\nFollow the [instructions in this Notion document](https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7?pvs=4) to setup the development environment for the Chrome extension.",
                "filename": "chrome-extensions/cart-customization/README.md",
                "start_index": 0,
                "end_index": 208,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.\\\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can\u2019t go back!**\n\nIf you aren\u2019t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you\u2019re on your own.\n\nYou don\u2019t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn\u2019t feel obligated to use this feature. However we understand that this tool wouldn\u2019t be useful if you couldn\u2019t customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n\n### Code Splitting\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\n\n### Analyzing the Bundle Size\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\n\n### Making a Progressive Web App\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\n\n### Advanced Configuration\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\n\n### Deployment\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\n\n### `npm run build` fails to minify\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)",
                "filename": "web/storefront/README.md",
                "start_index": 0,
                "end_index": 3354,
                "start_line": 1,
                "end_line": 70,
                "max_line": 70,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<html></html>",
                "filename": "web/storefront/public/index.html",
                "start_index": 0,
                "end_index": 13,
                "start_line": 1,
                "end_line": 1,
                "max_line": 1,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# [[[ --- STAGE: BASE ENVIRONMENT SETUP --- ]]]\n# see https://github.com/moby/moby/issues/37345#issuecomment-400250849\nFROM node:18.16.1-alpine as base\n# Accept command line '--build-arg' arguments\nARG PORT=8081\nARG HOST\nARG SHOPIFY_API_KEY\nARG INTERCOM_APP_ID\nARG SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY\n\n# Copy command line args to env to use during build and for final image runtime\nENV PORT=${PORT} \\\n    HOST=${HOST} \\\n    SHOPIFY_API_KEY=${SHOPIFY_API_KEY} \\\n    INTERCOM_APP_ID=${INTERCOM_APP_ID}\n    # ^^^^^ WARNING ^^^^^ do not include trailing \"\\\" on the last line above, you will get a syntax error with a terrible error message\n    #\n    # SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY is intentionally not included here since it is only for building and shouldn't be available at runtime\n\n# [[[ --- STAGE: BUILD --- ]]]\nFROM base AS build\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nCOPY web/patches ./web/patches\nRUN yarn install --cwd web --frozen-lockfile --production=false\nCOPY . .\n# NOTE: we need Sentry API token to upload source maps to Sentry during build, see withSentryConfig in next.config.js\nRUN echo \"[auth]\\ntoken=${SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY}\" > ./web/.sentryclirc\nRUN yarn web:build\n\n# [[[ --- STAGE: LICENSES WEB --- ]]]\nFROM base AS licenses-web\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web > ./web/public/licenses/web.txt\n\n# [[[ --- STAGE: LICENSES STOREFRONT --- ]]]\nFROM base AS licenses-storefront\nWORKDIR /app\nCOPY web/storefront/package.json web/storefront/yarn.lock ./web/storefront/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web/storefront > ./web/public/licenses/storefront.txt\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM base\nWORKDIR /app\nCOPY --from=build /app .\nCOPY package.json ./package.json\nRUN yarn install --frozen-lockfile --production=true\nCOPY --from=licenses-web /app/web/public/licenses/web.txt ./web/public/licenses/web.txt\nCOPY --from=licenses-storefront /app/web/public/licenses/storefront.txt ./web/public/licenses/storefront.txt\nCMD [\"yarn\", \"web:start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2181,
                "start_line": 1,
                "end_line": 53,
                "max_line": 53,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "The starting point for this repository was created using the Shopify CLI, commit\nf5d560da33aafae0b552de72a90f1320d1023524. Some boilerplate code from the CLI\nremains and is licensed as follows:\n\"\"\"\nMIT License\n\nCopyright (c) 2018 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\"",
                "filename": "LICENSE.md",
                "start_index": 0,
                "end_index": 1265,
                "start_line": 1,
                "end_line": 26,
                "max_line": 26,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { Shop, ShopModel } from '../modules/shops/shops.model';\nimport { RequestWithShop } from '../types/express.types';\nimport Shopify from '@shopify/shopify-api';\n\nexport const getShopDocFromRequest = async (req: RequestWithShop): Promise<Shop> => {\n  if (req.shopDoc) {\n    return req.shopDoc;\n  }\n\n  const shop = Shopify.Utils.sanitizeShop(req.query.shop as string);\n  const shopDoc = await ShopModel.findOne({ domain: shop }).lean();\n  req.shopDoc = shopDoc;\n  return shopDoc;\n};",
                "filename": "web/server/helpers/getShopDocFromRequest.ts",
                "start_index": 0,
                "end_index": 485,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "intial_documentation_sources": {
            "shopify": {
                "collection": "shopify_documentation",
                "reason_for_relevance": "The issue involves a Shopify store, and the documentation may provide insights on handling pointer events, product page redirection, and settings for store features."
            }
        },
        "external_documentation_snippets": {
            "external_shopify": [
                {
                    "code": "Product recommendations\n Media and images\n Overview\n Support product media\n Product media UX guidelines\n Theme Store\n Product media UX guidelines\n The following are the main user experience (UX), and user interface (UI), aspects to consider with product media:\n Badges and buttons\n 3D model viewers\n Video players\n Slideshows\n Badges and buttons\n Both video and 3D model media displays should have the following included in their display, with each associated element, respectively:\n A play or 3D icon badge on the media thumbnail\n A play or 3D icon button control on the featured media\n 3D model media displays should also include a View in your space button.\n For example:\n When adding these badges and buttons you should consider the following:\n The icons to use\n Their placement and sizing\n Their styling\n The 'View in your space' button\n When including the View in your space button, you should consider the following:\n If the button is being placed on top of the media display, then you need to ensure that video and 3D controls aren't obstructed.\n Only show the button for devices that support AR. Supporting devices will run iOS version 13 or higher, or Android version 9 or higher.\n If a product's media includes a 3D model, and that media should be displayed, then the button should be visible regardless of the currently displayed media type. Additionally, if the product has more than one 3D model, then the button should open the currently visible model, or the first model if none are currently visible.\n The button should include the 3D icon.\n The button should only be placed below the featured media. For example:\n Tip\n To learn more about how to create a View in your space button, refer to Support product media.\n Icons\n Click the button below to download an asset library that includes icons for video and 3D model displays. You should use the icons from this library, rather than create custom icons as they're industry standards that will help customers more easily identify the available interaction.\n Download product media assets\n The icons come in two different styles:\n Rounded\n Angular\n You should only use one style, and it should match your theme's style.\n Badge placement and sizing\n The placement, and sizing, of the display varies depending whether it's for a thumbnail badge, or a featured button control.\n Thumbnail badge\n Thumbnail badges should adhere to the following guidelines:\n They shouldn't occupy more than 1/9th of the thumbnail display, or 1/6th for landscape thumbnails, and shouldn't be smaller than 20px x 20px. For example:\n They can be aligned in any corner of the thumbnail, however should be uniformly aligned. For example:\n Featured button control\n Featured button controls should be a minimum of 60px x 60px, and maximum of 90px x 90px.\n Styling\n The styling of the badges and buttons should adhere to the following guidelines:\n You should maintain the whitespace around the badge and button icons, as well as their proportions. For example:\n The background of both badges, and buttons, can be modified to match your theme style. For example, a circle, rounded corners, etc. For example:\n You should use existing colour settings to style the badges and buttons. There should be a high contrast between the background and the icon, as well as the media and the background, so settings for \"Main background\", \"Heading\", or \"Text\" generally give the best results. For example:\n The opacity of the badge elements should vary depending on the element. Refer to Thumbnail badge opacity and Featured button control opacity to learn more.\n In addition to the above, the View in your space button should either have no background color, or a very neutral color, so that it doesn't compete with primary and secondary calls to action. For example:\n Thumbnail badge opacity\n The thumbnail badge elements should adhere to the following opacity guidelines:\n The icon opacity should be 60%.\n The badge background opacity should be 100%.\n The badge background should have a border that is at least 5% opacity of the icon's colour.\n For example:\n Featured button control opacity\n The featured badge elements should adhere to the following opacity guidelines:\n The icon opacity should be 100%.\n The icon should persist on hover to maintain visibility.\n The badge background opacity should be a minimum of 75%.\n The badge background should have a border that is at least 5% opacity of the icon's colour.\n For example:\n 3D model viewers\n There are the following aspects to consider with 3D model viewers:\n The general behavior\n Accessibility\n The display elements\n Focus order\n Accessibility\n You should consider the following accessibility guidelines:\n 3D model content should default to inactive on page load as it can be unexpected, overwhelming, and distracting when defaulted to active.\n 3D models should allow for panning with only the keyboard, in addition to mouse and swipe gestures.\n Add dedicated button controls, with appropriate labels, to control the model positioning.\n Ensure keyboard focus states are visible for sighted keyboard-only or voice dictation users.\n Refrain from shifting keyboard focus when interacting with a button control so customers can navigate away when they're ready.\n Allow for text descriptions of models for each stage view.\n Announce the current state of the model via ARIA live status element when button controls are interacted with.\n Test your implementation with a variety of assistive technologies. For example, keyboard alone, and multiple screen readers.\n Display elements\n 3D model viewers should have the following display elements:\n 3D model viewer controls\n 3D model viewer progress bar\n 3D model viewer controls\n These controls should follow the badge and button styling suggestions, however the icons can be set to a minimum of 55% opacity. For example:\n These controls should be placed in the bottom right corner of the media element, either with even, or no padding:\n You should keep visual consistency among all UI elements, so the corners of the control display shouldn't be rounded unless the icons and buttons in the theme are also rounded. For example:\n 3D model viewer progress bar\n The progress bar is to show the load progress of the model. Similar to the controls, the progress bar should following the badge and button styling practices, however it should have 100% opacity, and should be placed at the top of the media element.\n For example:\n Focus order\n In order to facilitate keyboard interaction, 3D model viewers should have a specific focus order on the related elements. There are two main states to consider:\n Inactive\n Active\n Inactive\n When the viewer is inactive, the focus order should be as follows:\n Viewer controls\n Active\n When the viewer is active, the focus order should be as follows:\n Viewer container\n Zoom in\n Zoom out\n Fullscreen\n Video players\n There are the following aspects to consider with video players:\n The general behavior\n Accessibility\n Styling and placement\n Accessibility\n Video content should default to paused on page load as it can be unexpected, overwhelming, and distracting when defaulted to playing.\n If a video plays on page load, it should be muted by default.\n Test your implementation with a variety of assistive technologies. For example, keyboard alone, and multiple screen readers.\n Styling and placement\n In addition to the badge and button styling suggestions, video players should adhere to the following:\n They should be placed at the bottom of the featured media, either with even, or no padding:\n If the theme uses custom focus states, then you should maintain consistency. Otherwise, the default browser focus state should be used.\n You should keep visual consistency among all UI elements, so the corners of the control display shouldn't be rounded unless the icons and buttons in the theme are also rounded. For example:\n General behavior\n Note\n The following uses the terms \"active\" and \"inactive\". In the context of videos, this would be equivalent to \"playing\" and \"paused\".\n In general, video players and 3D model viewers should be set to inactive while advancing through media galleries as videos and models that aren't visible shouldn't be active.\n If more than one media element is displaying at a time, then all media should be inactive by default, requiring the customer to initiate activity. If only one media element is visible at once, then you should adhere to the following:\n Desktop - The first media element on page load should be set to inactive, however as the media changes, the current media should automatically be set to active.\n Tablet/Mobile - All media elements should default to inactive, requiring the customer to initiate activity.\n Slideshows\n If your theme uses a slideshow media gallery, then you shouldn't rely solely on swipe gestures for navigation as video players and 3D model viewers can interfere. For example:\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Badges and buttons\n 3D model viewers\n Video players\n General behavior\n Slideshows\n Updates & News\n Developer changelog\n Partner blog",
                    "filename": "docs/themes/product-merchandising/media/media-ux/content.txt",
                    "start_index": 0,
                    "end_index": 9092,
                    "start_line": 1,
                    "end_line": 140,
                    "max_line": 140,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product recommendations\n Media and images\n Overview\n Support product media\n Product media UX guidelines\n Theme Store\n Support product media\n Merchants can add media to their products, like images, 3D models, videos, and YouTube or Vimeo videos.\n In this tutorial, you'll learn how to support product media in your theme.\n Resources\n The media attribute of the product object\n Media filters\n Implementing product media\n Product media is usually displayed on the product page. However, you might want to display product media in other areas of your theme, so it's recommended to build your media display in a snippet so that it can be reused.\n To display product media, you can loop through the media attribute of the product object and apply the associated media filter, depending on the media type.\n Example\n If you want to output product media on the product page, and your product page content is hosted in a product.liquid section, then you might do the following:\n Create a snippet called media.liquid to host your media display.\n Render media.liquid in your product.liquid section.\n sections/product.liquid\n 1 {% for media in product.media %}\n 2\n    {% render 'media', media: media %}\n 3 {% endfor %}\n snippets/media.liquid\n 1 {% case media.media_type %}\n 2\n    {% when 'image' %}\n 3\n      <div class=\"product-single__media\" style=\"padding-top: {{ 1 | divided_by: media.aspect_ratio | times: 100}}%;\" data-media-id=\"{{ media.id }}\">\n 4\n        {{ media | image_url: width: 2048, height: 2048 | image_tag }}\n 5\n      </div>\n 6\n    {% when 'external_video' %}\n 7\n      <div class=\"product-single__media\" style=\"padding-top: {{ 1 | divided_by: media.aspect_ratio | times: 100}}%;\" data-media-id=\"{{ media.id }}\">\n 8\n        {{ media | external_video_tag }}\n 9\n      </div>\n 10\n    {% when 'video' %}\n 11\n      <div class=\"product-single__media\" data-media-id=\"{{ media.id }}\">\n 12\n        {{ media | video_tag: controls: true }}\n 13\n      </div>\n 14\n    {% when 'model' %}\n 15\n      <div class=\"product-single__media\" style=\"padding-top: 100%\" data-media-id=\"{{ media.id }}\">\n 16\n        {{ media | model_viewer_tag }}\n 17\n      </div>\n 18\n    {% else %}\n 19\n      <div class=\"product-single__media\" style=\"padding-top: 100%;\" data-media-id=\"{{ media.id }}\">\n 20\n        {{ media | media_tag }}\n 21\n      </div>\n 22 {% endcase %}\n Each media type in the example above is wrapped in a <div> element with custom style and data attributes. These are based on the considerations documented in UX considerations, and should be adjusted accordingly to match your approach.\n Tip\n For another example of supporting media in a theme, you can refer to Dawn's implementation in the main-product.liquid section and product-thumbnail.liquid snippet.\n UX considerations\n Every theme requires a different approach to create responsive media that works across all screen sizes and devices. The following general recommendations can help ensure that you're offering a good customer experience:\n Make media elements responsive\n Preserve media element interactivity\n A product can have multiple videos, so if your theme has a thumbnail view for each media element, or displays multiple media elements at once, you should ensure that only the active video is playing.\n Tip\n For more in-depth information, refer to Product media UX guidelines.\n Responsive media elements\n Shopify-hosted 3D models use Google\u2019s model viewer component, and externally rendered videos are rendered in <iframe> elements. Neither of these are responsive containers by default.\n Shopify-hosted videos are rendered in HTML5 video players, which are responsive by default, however only once they\u2019re rendered.\n Given the above, you should consider using an aspect ratio box to create a responsive container for each.\n Tip\n 3D models don\u2019t have predefined aspect ratios, so it\u2019s common practice to create a square container by setting padding-top to 100%.\n Interactive media elements\n Shopify-hosted, and externally-hosted, video elements, and 3D models have interactive components. For example, videos have progress bars and volume control, and 3D models can be rotated.\n If any of these media elements are hosted in a carousel or swipe-interactive display, then the interactive components shouldn\u2019t interfere with the ability to interact with the display.\n Use media preview images\n Every media type has a preview_image attribute. This could be useful in scenarios like the following:\n Product thumbnails\n Social media images\n Tip\n Applying the image_url Liquid URL filter to the media object returns the preview_image URL.\n Product thumbnails\n If your theme displays thumbnails for each media source on the product, then you can utilize the preview_image attribute of the media object in order to show a thumbnail image for each media source.\n For example:\n 1 {% if product.media.size > 1 %}\n 2\n    <div class=\"thumbnails-wrapper\">\n 3\n      {% for media in product.media %}\n 4\n        <a data-thumbnail-id=\"{{ media.id }}\">\n 5\n          {{ media.preview_image | image_url: width: 110, height: 110, scale: 2 | image_tag: media.alt, 'product-single__thumbnail-image' }}\n 6\n        </a>\n 7\n      {% endfor %}\n 8\n    </div>\n 9 {% endif %}\n Tip\n The above example adds a data-thumbnail-id attribute which is intended to be used in conjunction with the data-media-id attribute that\u2019s included in the general media loop example above. This gives you an easy way to associate a thumbnail with its media display.\n Social media images\n Rather than only showing images for social media previews, you can include media preview images as well.\n For example:\n 1 {%- if template.name == 'product' -%}\n 2\n    {%- assign og_title = product.title | strip_html -%}\n 3\n    {%- assign og_type = 'product' -%}\n 4\n 5\n    {%- if product.media.size > 0 -%}\n 6\n      {%- capture og_image_tags -%}\n 7\n        {% for media in product.media limit:3 -%}\n 8\n          <meta property=\"og:image\" content=\"http:{{ media | image_url: width: 1200 height: 1200 }}\">\n 9\n        {%- endfor %}\n 10\n      {%- endcapture -%}\n 11\n 12\n      {%- capture og_image_secure_url_tags -%}\n 13\n        {% for media in product.media limit:3 -%}\n 14\n          <meta property=\"og:image:secure_url\" content=\"https:{{ media | image_url: with: 1200, height: 1200 }}\">\n 15\n        {%- endfor %}\n 16\n      {%- endcapture -%}\n 17\n    {%- endif -%}\n 18 {%- endif -%}\n Support AR functionality\n If merchants have 3D models of their products, then you can give them the option to showcase those models through AR. To do this, you can use the Shopify-XR library to support AR Quick Look in iOS\u2019s Safari, and Android\u2019s Scene Viewer.\n You need to do the following to use this library:\n Initialize the library\n Launch the display\n Initialize the library\n The following JavaScript needs to be included on product pages to initialize the library:\n 1 <script>\n 2\n    function setupShopifyXr(){\n 3\n      if (!window.ShopifyXR) {\n 4\n        document.addEventListener('shopify_xr_initialized', function() {\n 5\n          setupShopifyXr();\n 6\n        });\n 7\n      }else{\n 8\n        window.ShopifyXR.addModels();\n 9\n        window.ShopifyXR.setupXRElements();\n 10\n      }\n 11\n    }\n 12\n 13\n    window.Shopify.loadFeatures([\n 14\n      {\n 15\n        name: 'shopify-xr',\n 16\n        version: '1.0',\n 17\n        onLoad: setupShopifyXr\n 18\n      }\n 19\n    ]);\n 20 </script>\n Launch the display\n You can launch the display in two ways:\n With a button\n With JavaScript\n Launch the display with a button\n You can launch the display with a button that has the following attributes:\n Attribute Description\n data-shopify-xr The Shopify-XR library scans the DOM for elements with this attribute and attaches a click handler to launch the display.\n data-shopify-model3d-id The media ID of the current model.\n data-shopify-title The title of the product.\n data-shopify-xr-hidden A base data attribute for the Shopify-XR library to reference.\n You would include a button for each model type media source.\n For example:\n 1 {% for media in product.media %}\n 2\n    {% case media.type %}\n 3\n      ...\n 4\n      {% when 'model' %}\n 5\n        <div class=\"product-single__media\" style=\"padding-top: 100%\" data-media-id=\"{{ media.id }}\">\n 6\n          {{ media | model_viewer_tag }}\n 7\n        </div>\n 8\n 9\n        <button\n 10\n          data-shopify-xr\n 11\n          data-shopify-model3d-id=\"{{ media.id }}\"\n 12\n          data-shopify-title=\"{{ product.title | escape }}\"\n 13\n          data-shopify-xr-hidden\n 14\n        />\n 15\n      ...\n 16\n    {% endcase %}\n 17 {% endfor %}\n Launch the display with JavaScript\n Rather than include a button to launch the display, you can use JavaScript. For example:\n 1 <script>\n 2\n    window.ShopifyXR.launchXR({\n 3\n      model3dId: [media-id],\n 4\n      title: \"{{ product.title | escape }}\",\n 5\n    });\n 6 </script>\n Note\n In the example above, [media-id] represents the media ID for the associated model.\n Control video functionality with parameters\n Shopify hosted videos can have all HTML5 video attributes set when they\u2019re rendered with the Liquid video_tag or media_tag filter. For example:\n autoplay - Whether to automatically play the video after it\u2019s loaded.\n loop - Whether to loop the video.\n muted - Whether to mute the video\u2019s audio.\n controls - Whether a user can control the video playback.\n Each parameter is false by default, however you can set them to be true like the following:\n 1 <!-- Autoplay a video -->\n 2 {{ media | video_tag: autoplay: true }}\n 3\n 4 <!-- Autoplay a video, and loop it -->\n 5 {{ media | video_tag: autoplay: true, loop: true }}\n 6\n 7 <!-- Autoplay a video, loop it, and mute it -->\n 8 {{ media | video_tag: autoplay: true, loop: true, muted: true }}\n 9\n 10 <!-- Autoplay a video, loop it, mute it, and allow the user to control the video playback -->\n 11 {{ media | video_tag: autoplay: true, loop: true, muted: true, controls: true }}\n Tip\n You can control these same behaviors for externally-hosted videos using the Liquid external_video_url filter. However, the available parameters depend on the video host.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Resources\n Implementing product media\n UX considerations\n Use media preview images\n Support AR functionality\n Control video functionality with parameters\n Updates & News",
                    "filename": "docs/themes/product-merchandising/media/support-media/content.txt",
                    "start_index": 0,
                    "end_index": 10265,
                    "start_line": 1,
                    "end_line": 280,
                    "max_line": 280,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product recommendations\n Media and images\n Gift cards\n Pricing and payments\n Delivery and fulfillment\n Migrating to Online Store 2.0\n Troubleshooting\n Theme Store\n Product merchandising\n To help merchants to provide an engaging product experience, Shopify has options for the following:\n Product variants: A simple organization of product options to help customers easily find and select their desired product.\n Product media: Offer an immersive experience and enable merchants to increase a customer's confidence in their product.\n Product recommendations: Enable customers to discover new products.\n Gift cards: An alternative payment method. You can add a recipient form to your gift card product page.\n Was this page helpful?",
                    "filename": "docs/themes/product-merchandising/content.txt",
                    "start_index": 0,
                    "end_index": 729,
                    "start_line": 1,
                    "end_line": 15,
                    "max_line": 15,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product recommendations\n Overview\n Related products\n Complementary products\n Media and images\n Theme Store\n Show related products on product pages\n Related products are products that are similar to a selected product. You can display potential substitutes to help customers discover other similar products they might like. These products should appear in a You might also like section on the product page.\n Adding the related products section to your product pages displays an automatically generated list of product recommendations.\n In this tutorial, you'll learn how to show related products in your theme.\n Resources\n To implement product recommendations, you'll use the following:\n The recommendations object\n The /{locale}/recommendations/products endpoint of the Product Recommendations API\n Recommendation logic\n The recommendation algorithm predicts the most relevant products based on the product that a customer is interacting with. The criteria that the algorithm uses depends on the merchant's online store. In general, it might take into account the following factors:\n Purchase history: Products that have historically been purchased together.\n Product description: Products with similar descriptions.\n Related collections: Products from collections that the current product is part of, excluding collections with handles all and frontpage.\n Recommendation algorithm criteria\n The criteria that's used depends on a merchant's online store, and the recommendation intent. The following outlines which criteria is used, and when:\n Criteria Application\n Purchase history\n and\n Product description Merchants with an English storefront.\n Purchase history only Merchants with a non-English storefront.\n Related collections All merchants when purchase history and product description recommendations aren't available.\n Tip\n To learn more about the recommendation logic limitations, refer to Limitations.\n The Shopify Search & Discovery app enables users to customize product recommendation and search results, which can impact results from storefront search and the Ajax Product Recommendations API. To learn about how these results can be impacted, visit the Shopify Help Center.\n Limitations\n The following list describes some limitations of the recommendation logic:\n You can't customize the recommendation algorithm to exclude specific products. However, you can choose which of the returned products to show with JavaScript.\n The recommendation algorithm doesn't use orders that have been imported from another store or ecommerce platform to generate product recommendations.\n Products that are out of stock or set to a price of 0, gift cards, and products in the visitor's cart aren't included in recommendations.\n UI guidelines\n The following best practices can help to make sure that you're displaying recommended products in a way that improves the customer experience:\n The recommendation algorithm associates up to ten products with each product, in order of relevance. For example, the first recommended product is more relevant than the tenth recommended product. For this reason, it's a good idea to limit your recommendations to four products for each product page to promote only the most relevant recommendations.\n Make sure that you load the proper image size for the product card.\n Because the recommendations are loaded asynchronously with JavaScript, you might want to add an empty state or not show the recommended products section at all. The placeholder is swapped with the actual recommended products after you load them.\n Use phrases such as \u201cYou might also like\u201d for the section header to explain to your customers why you're displaying the recommended products.\n Implementing product recommendations\n In this implementation, the section content builds the general display by looping through each product returned through the products attribute of the recommendations object. However, this object isn\u2019t populated when the section is initially rendered, so you need to use JavaScript to retrieve the populated section content through the section response of the Product Recommendations API.\n Example\n sections/product-recommendations.liquid\n 1 <div\n 2\n    class=\"product-recommendations\"\n 3\n    data-url=\"{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4&intent=related\"\n 4 >\n 5\n    {%- if recommendations.performed? and recommendations.products_count > 0 -%}\n 6\n      {% if recommendations.intent == 'related' %}\n 7\n        <h2>You may also like</h2>\n 8\n      {% elsif recommendations.intent == 'complementary' %}\n 9\n        <h2>Pair it with</h2>\n 10\n      {% endif %}\n 11\n 12\n      <ul>\n 13\n        {%- for product in recommendations.products -%}\n 14\n          <li class=\"product\">\n 15\n            <a href=\"{{ product.url }}\">\n 16\n              <img\n 17\n                class=\"product__img\"\n 18\n                src=\"{{ product.featured_image | image_url: width: 300, height: 300 }}\"\n 19\n                alt=\"{{ product.featured_image.alt }}\"\n 20\n              />\n 21\n 22\n              <p class=\"product__title\">{{ product.title }}</p>\n 23\n              <p class=\"product__price\">{{ product.price | money}}</p>\n 24\n            </a>\n 25\n          </li>\n 26\n        {%- endfor -%}\n 27\n      </ul>\n 28\n    {%- endif -%}\n 29 </div>\n 30\n 31 {% javascript %}\n 32\n    const handleIntersection = (entries, observer) => {\n 33\n      if (!entries[0].isIntersecting) return;\n 34\n 35\n      observer.unobserve(productRecommendationsSection);\n 36\n 37\n      const url = productRecommendationsSection.dataset.url;\n 38\n 39\n      fetch(url)\n 40\n        .then(response => response.text())\n 41\n        .then(text => {\n 42\n          const html = document.createElement('div');\n 43\n          html.innerHTML = text;\n 44\n          const recommendations = html.querySelector('.product-recommendations');\n 45\n 46\n          if (recommendations && recommendations.innerHTML.trim().length) {\n 47\n            productRecommendationsSection.innerHTML = recommendations.innerHTML;\n 48\n          }\n 49\n        })\n 50\n        .catch(e => {\n 51\n          console.error(e);\n 52\n        });\n 53\n    };\n 54\n 55\n    const productRecommendationsSection = document.querySelector('.product-recommendations');\n 56\n    const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});\n 57\n 58\n    observer.observe(productRecommendationsSection);\n 59 {% endjavascript %}\n 60\n 61 {% schema %}\n 62\n    {\n 63\n      \"name\": \"Product recommendations\",\n 64\n      \"settings\": []\n 65\n    }\n 66 {% endschema %}\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Resources\n Recommendation logic\n Limitations\n UI guidelines\n Implementing product recommendations\n Updates & News\n Developer changelog",
                    "filename": "docs/themes/product-merchandising/recommendations/related-products/content.txt",
                    "start_index": 0,
                    "end_index": 6760,
                    "start_line": 1,
                    "end_line": 170,
                    "max_line": 170,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "? product?.variants?.nodes[0];\n 4\n 5 return json({\n 6\n    product,\n 7\n    selectedVariant,\n 8 });\n Update the useLoaderData() hook\n Add selectedVariant to the useLoaderData() destructured object:\n app/routes/products.$handle.jsx\n 1 const {product, selectedVariant} = useLoaderData();\n Pass the variant to ProductOptions\n Update the <ProductOptions> component to accept a selectedVariant parameter:\n app/routes/products.$handle.jsx\n 1 <ProductOptions\n 2\n    options={product.options}\n 3\n    selectedVariant={selectedVariant}\n 4 />\n Update ProductOptions\n Replace the top portion of ProductOptions with the following code:\n app/components/ProductOptions.jsx\n 1 export default function ProductOptions({options, selectedVariant}) {\n 2\n    const {pathname, search} = useLocation();\n 3\n    const [currentSearchParams] = useSearchParams();\n 4\n    const navigation = useNavigation();\n 5\n 6\n    const paramsWithDefaults = (() => {\n 7\n      const defaultParams = new URLSearchParams(currentSearchParams);\n 8\n 9\n      if (!selectedVariant) {\n 10\n        return defaultParams;\n 11\n      }\n 12\n 13\n      for (const {name, value} of selectedVariant.selectedOptions) {\n 14\n        if (!currentSearchParams.has(name)) {\n 15\n          defaultParams.set(name, value);\n 16\n        }\n 17\n      }\n 18\n 19\n      return defaultParams;\n 20\n    })();\n 21\n 22\n    // Update the in-flight request data from the 'navigation' (if available)\n 23\n    // to create an optimistic UI that selects a link before the request is completed\n 24\n    const searchParams = navigation.location\n 25\n      ? new URLSearchParams(navigation.location.search)\n 26\n      : paramsWithDefaults;\n 27\n 28\n    return (\n The new logic does the following:\n Get the selectedVariant from the component props\n On render, create a paramsWithDefaults URLSearchParams Object\n Clone the existing parameters\n If the parameters don't already include a selected value for the selected variant, then add it to the cloned parameters\n Use paramsWithDefaults as the fallback when you create the searchParams object\n Test the new logic by visiting http://localhost:3000/products/snowboard. Default option values should be selected on page load.\n This logic doesn't override a user selection, but it pre-populates selected options based on the first variant returned from the Storefront API.\n Step 7: Add a Shop Pay Button\n You've already created a page where customers can view and select your product. To add a Shop Pay button, you can refer to the Hydrogen React components for pre-built commerce primitives.\n Hydrogen React components add client-side ecommerce functionality to JavaScript-based apps. In this step, you'll use the Money and ShopPay components to simplify your development experience.\n Get the Shop Domain\n To use the Shop Pay button, you'll need to get the shop's primary domain from the Storefront API.\n Update your PRODUCT_QUERY to also fetch the shop's primary domain URL.\n app/routes/products.$handle.jsx\n 1 const PRODUCT_QUERY = `#graphql\n 2\n    query product($handle: String!, $selectedOptions: [SelectedOptionInput!]!) {\n 3\n      shop {\n 4\n        primaryDomain {\n 5\n          url\n 6\n        }\n 7\n      }\n 8\n      product(handle: $handle) {\n 9\n        id\n 10\n        title\n 11\n        handle\n 12\n        vendor\n 13\n        description\n 14\n        descriptionHtml\n 15\n        featuredImage {\n 16\n          id\n 17\n          url\n 18\n          altText\n 19\n          width\n 20\n          height\n 21\n        }\n 22\n        options {\n 23\n          name,\n 24\n          values\n 25\n        }\n 26\n        selectedVariant: variantBySelectedOptions(selectedOptions: $selectedOptions) {\n 27\n          id\n 28\n          availableForSale\n 29\n          selectedOptions {\n 30\n            name\n 31\n            value\n 32\n          }\n 33\n          image {\n 34\n            id\n 35\n            url\n 36\n            altText\n 37\n            width\n 38\n            height\n 39\n          }\n 40\n          price {\n 41\n            amount\n 42\n            currencyCode\n 43\n          }\n 44\n          compareAtPrice {\n 45\n            amount\n 46\n            currencyCode\n 47\n          }\n 48\n          sku\n 49\n          title\n 50\n          unitPrice {\n 51\n            amount\n 52\n            currencyCode\n 53\n          }\n 54\n          product {\n 55\n            title\n 56\n            handle\n 57\n          }\n 58\n        }\n 59\n        variants(first: 1) {\n 60\n          nodes {\n 61\n            id\n 62\n            title\n 63\n            availableForSale\n 64\n            price {\n 65\n              currencyCode\n 66\n              amount\n 67\n            }\n 68\n            compareAtPrice {\n 69\n              currencyCode\n 70\n              amount\n 71\n            }\n 72\n            selectedOptions {\n 73\n              name\n 74\n              value\n 75\n            }\n 76\n          }\n 77\n        }\n 78\n      }\n 79\n    }\n 80 `;\n Destructure the shop object from the response.\n app/routes/products.$handle.jsx\n 1 const {shop, product} = await context.storefront.query(PRODUCT_QUERY, {\n 2\n    variables: {\n 3\n      handle,\n 4\n      selectedOptions,\n 5\n    },\n 6 });\n Return the shop object in the json() function.\n app/routes/products.$handle.jsx\n 1 return json({\n 2\n    shop,\n 3\n    product,\n 4\n    selectedVariant,\n 5 });\n In the ProductHandle function, destructure shop to the useLoaderData() hook.\n app/routes/products.$handle.jsx\n 1 const {shop, product, selectedVariant} = useLoaderData();\n Render the Shop Pay Button\n In the products.$handle.jsx file, import the Hydrogen React components to render pricing and the Shop Pay button:\n app/routes/products.$handle.jsx\n 1 import {Image, Money, ShopPayButton} from '@shopify/hydrogen-react';\n Below the <ProductOptions>, render the price and the Shop Pay button:\n app/routes/products.$handle.jsx\n 1 <ProductOptions\n 2\n    options={product.options}\n 3\n    selectedVariant={selectedVariant}\n 4 />\n 5 <Money\n 6\n    withoutTrailingZeros\n 7\n    data={selectedVariant.price}\n 8\n    className=\"text-xl font-semibold mb-2\"\n 9 />\n 10 {selectedVariant.availableForSale && (\n 11\n    <ShopPayButton\n 12\n      storeDomain={shop.primaryDomain.url}\n 13\n      variantIds={[selectedVariant?.id]}\n 14\n      width={'400px'}\n 15\n    />\n 16 )}\n The pricing should now show for the selected variant, and you can jump directly to a Shop Pay checkout (if the store has it activated).\n The product page now renders all of the details for a product and its variants. It also includes a button to purchase the product.\n Next steps\n Implement an Add to cart button, enabling customers to choose products to purchase before entering the payment process.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n What you'll learn\n Requirements\n Step 1: Create a product route\n Step 2: Setup the Remix loader to get product data\n Step 3: Query the Storefront API\n Step 4: Display title, description, and product images\n Step 5: Render the product variant options\n Step 6: Set a default variant\n Step 7: Add a Shop Pay Button\n Next steps\n Updates & News",
                    "filename": "docs/custom-storefronts/hydrogen/building/product-details-page/content.txt",
                    "start_index": 23643,
                    "end_index": 30600,
                    "start_line": 895,
                    "end_line": 1215,
                    "max_line": 1215,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product recommendations\n Overview\n Related products\n Complementary products\n Media and images\n Theme Store\n Product recommendations\n Displaying recommended products to customers makes it easier for them to discover new products, and can help to increase online store sales.\n Before you add product recommendations to your theme, it's a good idea to get familiar with the following:\n Recommendation intents\n How to track recommendations\n To learn how to include recommendations in your theme, refer to Related products and Complementary products. You can also refer to Dawn's implementation.\n Recommendation intents\n Tailoring product recommendations across the customer's journey is a powerful way to help customers discover products. Recommendation intents are designed to recommend products using a targeted strategy.\n Shopify provides the following types of recommendation intents:\n Related products: Offer customers a mix of products that are similar to a product the customer is interacting with. An example is substitutable products that display in a You might also like section.\n Complementary products: Offer customers products that are complementary to a product the customer is interacting with. An example is add-on products that display in a Pair it with section.\n Only related recommendations are auto-generated by Shopify. Complementary recommendations need to be manually set up. Recommended products for each intent can be configured using the Shopify Search & Discovery app.\n Track recommendations\n To track your product recommendations in Shopify, you need to use the format for product URLs that's specified by the API. To learn more, refer to Tracking conversions for product recommendations.\n After you've implemented product recommendations, you can track how effective they are directly from the Analytics page in your Shopify admin. To learn more about product recommendation reports, refer to Product recommendation conversion over time.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Recommendation intents\n Track recommendations\n Updates & News\n Developer changelog\n Partner blog\n Engineering blog",
                    "filename": "docs/themes/product-merchandising/recommendations/content.txt",
                    "start_index": 0,
                    "end_index": 2126,
                    "start_line": 1,
                    "end_line": 30,
                    "max_line": 30,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Verify that the sold out message or badge is displayed when applicable.\n Product page\n Run the following tests on your product page, on each of the product configurations outlined. For each of these tests, verify the following:\n Customers can add a selected variant to the cart\n Variant information changes dynamically when different variants are selected\n Customers are prevented from adding more than the available quantity of items to the cart\n Product configurations\n Single product (no variants)\n On sale product\n Product with one option\n Product with more than 1 option with different variant quantity inventories (out of stock variant, unavailable variant).\n Product with three options\n Product with 100 variants\n Product with no image\n Product with varying product media (image, vidoe, 3D model. AR, MP4)\n Product with unit price\n Tests\n Add a product title:\n A single word title (30 characters, no spacing)\n A multi-word title (30-60 characters)\n Verify that when variants are selected from drop-down menus, product details are updated dynamically:\n Variant prices\n Variant media\n Variant SKU\n Action buttons (disable Add to cart and dynamic checkout buttons on sold out and unavailable variants)\n Variant selectors (cross out or disable sold out and unavailable variants)\n Unit price\n Shop Pay Installments banner\n Local pickup banner\n Inventory quantity (if applicable)\n Product images\n No image\n Test the following aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n PNG image\n Image zoom (if applicable)\n Color swatches (if applicable)\n Option to disable swatches\n Clear instruction on how to upload custom swatches\n Product description\n Add multiple paragraphs (minimum 1000 characters)\n Add links:\n Internal link\n External link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Add images (images must display as they appear in the rich text editor)\n Verify that an error message appears when customers try to add more than the available quantity of items to the cart\n Blog page\n Run the following tests on your blog page. For each of these tests, verify the following:\n All blog posts in the collection are accessible\n Multiple blog post image ratios are supported\n Must support varying blog post image ratios\n Blog post information must be visible. This includes the title, excerpt, author, date, and comment count\n If available, blog filtering works as expected and combining filter tags doesn't break the page\n Test the way the grid responds to blog images of different aspect ratios, using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Test blog filtering (if applicable):\n Filter by a single-word tag (30 characters, no spacing)\n Filter by a long list of tags (20+ tags)\n Test a blog with many posts:\n Test pagination (if applicable)\n Verify that only five pages show on initial load\n Test the View more button (if applicable)\n Test infinite scrolling (if applicable)\n Blog post page (Article)\n Run the following tests on your blog post page.\n Add blog post content:\n Add multiple paragraphs (minimum 1000 characters)\n Add links:\n Internal link\n External link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Add images (images must display as they appear in the rich text editor)\n Add comments:\n Input comment text\n Submit the form\n Test error detection and handling\n Test the submission success message\n Verify that comments over a certain limit are paginated\n Test the following blog post image aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Cart page, modal, or drawer\n Run the following tests on your cart. For each of these tests, verify the following:\n All products in the cart are fully visible\n The customer must be able to update the product quantity\n Automatic discounts must update dynamically\n Add enough products to the cart to trigger scrolling\n Setting 0 for quantity should remove the product\n Verify that an error message appears when customers try to add more than the available quantity of items to the cart\n Automatic discount\n Cart notes\n Search page\n Run the following tests on your search page. For each of these tests, verify that search result attributes are fully visible.\n Verify that the number of results displayed on first load is limited\n Test pagination (if applicable):\n Pagination truncates on search results with five or more pages\n Test the View more button (if applicable)\n Test infinite scrolling (if applicable)\n Test filtering (if applicable)\n Test both list and grid view (if applicable)\n Test error detection and handling, for example, when no results are found\n Pages\n Run the following tests on a page that uses the generic page template. For each of these tests, verify that page content is fully visible.\n Add a page title:\n A single word title (30 characters, no spacing)\n A multi-word title (30-60 characters)\n Add multiple paragraphs (minimum 3000 characters)\n Add links:\n Internal link\n External link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Add image \u2013 must display imagery as inputted in the RTE\n Repeat testing for all existing product templates\n Pages (contact form template)\n Run the following tests on a page that uses the contact form template. For each of these tests, verify that customers can send the merchant an email using the contact form.\n Input text\n Test mandatory fields, such as the message field\n Submit the form\n Test error detection and handling\n Test the submission success message\n Gift card page\n Run the following tests on the gift card page. For each of these tests, verify that the gift card code and store name or logo is fully visible.\n Add logo fallback text:\n Long store name (30-40 characters, no spaces)\n Long store name with hyphens\n Add a logo:\n Test the following logo aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Transparent background on PNG image\n Logo scales appropriately\n Varying positions/alignments (if applicable)\n Gift card code must not be cut off\n 6. Link sharing\n Share a link to the store where you're testing your theme on various social media platforms. Verify that the sharing image appears. You can use tools like the Facebook sharing debugger and the Twitter card validator to perform this test.\n 7. Local pickup\n Test your local pickup banner in the following scenarios. Before you start, prepare your store to test local pickup.\n Variant 1 - available for pickup at five locations:\n Verify that the pickup banner appears\n When you click Check availability at other stores, verify that all locations are visible, and that you can scroll to see all location information\n Variant 2 - available for pickup at only one location:\n Verify that the pickup banner appears\n Verify that the Check availability at other stores text is updated to View store information\n Variant 3 - available for pickup at only two locations, and sold out one of those locations:\n Verify that the pickup banner appears, and indicates that the item is available or unavailable at one of the locations.\n Verify that the Check availability at other stores link is present\n Verify that clicking on Check availability at other stores brings up only two locations\n Variant 4 - only available at a location that doesn't offer pickup:\n Verify that the pickup banner is removed\n Variant 5 - sold out at all locations:\n Verify that the pickup banner is removed\n Verify that the Add to cart button is changed to Sold out\n Ensure the pickup banner changes dynamically when a new variant is selected\n 8. Unit pricing\n Test unit prices in your theme. Before you start, prepare your store to test unit pricing.\n Verify that unit prices change dynamically on variant change\n Verify that unit prices appear in the following locations:\n Product page\n Collection page product cards\n Cart drawer, page, or popup\n Customer order page\n 9. Rich media\n Test rich media in your theme. Before you start, prepare your store to test rich media.\n Verify 3D/AR behavior:\n Verify that you can view and move 3d models on desktop and mobile devices\n Verify that the View in your space button appears on mobile devices\n Verify that can view both AR objects on mobile devices\n Verify video behavior (YouTube, Vimeo, MP4):\n Verify that video controls are accessible\n Verify that you can mute and unmute videos\n Verify that you can play and pause videos\n Verify that variant display when the associated variant is selected\n Verify that rich media types don't break the product card layout of the collection page:\n YouTube\n Vimeo\n MP4\n 3D models\n 10. Selling plans\n Test selling plans in your theme. Before you start, prepare your store to test selling plans.\n Applied selling plans appear on the cart page\n Applied selling plans appear on the customer order page\n Was this section helpful?\n YesNo\n ON THIS PAGE\n 1. Home page\n 2. Header\n 3. Footer\n 4. Sections\n 5. Pages\n 6. Link sharing\n 7. Local pickup\n 8. Unit pricing\n 9. Rich media\n 10. Selling plans\n Updates & News\n Developer changelog",
                    "filename": "docs/themes/store/test-theme/checklist/content.txt",
                    "start_index": 13320,
                    "end_index": 22422,
                    "start_line": 353,
                    "end_line": 565,
                    "max_line": 565,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Testing\n Overview\n Testing assets\n Testing checklist\n Review process\n Theme success\n Theme revenue share\n Testing your theme for the Shopify Theme Store\n Use this checklist to ensure that your theme meets the functional requirements for the Shopify Theme Store. The checklist doesn't comprehensively represent all of the requirements for the Theme Store, but it can help you to make sure that your theme addresses edge cases that the theme review team will test as a part of the review process.\n To run these tests, you need to populate your store with data, and configure some additional features. To download this data and learn learn about the additional configurations you need to make, refer to Testing assets.\n You should run these tests in both the theme editor and the storefront.\n 1. Home page\n Add the following sections to the home page. After you add all of the sections, verify that they work properly.\n Three slideshows\n Five featured products, three of which are the same product\n Three different featured collections\n One collection list\n Three image with text\n One newsletter\n One rich text\n One blog post\n Two video (if applicable)\n Add additional sections until the homepage has 25 sections\n 2. Header\n Run the following tests on your header. For each of these tests, verify the following:\n The store name or logo displays properly and is accessible\n Header icons or links display properly and are accessible\n The navigation functions properly, and navigation titles are fully visible\n Add logo fallback text:\n Long store name (30-40 characters, no spaces)\n Add a logo:\n Test different aspect ratios in portrait and landscape mode:\n 16:9\n 4:3\n 3:2\n 1:1\n Transparent background on PNG image\n Logo scaling\n Different positions and alignments (if applicable)\n Add navigation:\n Long navigation menu (10+ menu items)\n Single-level navigation\n Two-level nested navigation\n Three-level nested navigation\n Long level one menu item titles (30-60 characters)\n Long level two menu item titles (30-60 characters)\n Long level three menu item titles (30-60 characters)\n Mega menu (if applicable)\n 3. Footer\n Run the following tests on your footer. For each of these tests, verify that footer text, icons, images are fully visible and functional.\n Add five columns or blocks, or the maximum number of blocks\n Add multiple menus\n Add a long navigation menu (10+ menu items)\n Add menu items with long titles (30-60 characters)\n Add all social links\n If your footer has a newsletter form, then test the following:\n Input form text\n Submit the form\n Test error detection and handling\n Test the submission success message\n 4. Sections\n Test the following sections in your theme:\n Announcement bar\n Slideshow\n Featured product\n Featured collection\n Collection list\n Image with text\n Newsletter\n Rich text\n Blog posts\n Video\n Any sections unique to your theme\n Announcement bar\n Run the following tests on your announcement bar section. For each of these tests, verify the following:\n Text and icons are fully visible\n Any links function properly\n Link styling indicates that the text is clickable\n If the text input is plain text, then add 60-100 characters of text, or the maximum character limit\n If the text input is rich text, then add the following text:\n Text with a single line break\n Text with two line breaks\n Text with three line breaks\n A paragraph (40-50 words)\n Add links:\n An internal link\n An external link\n Link opens in the same window\n Link opens in a new window\n Slideshow\n Run the following tests on your slideshow section.\n Add three slideshow sections\n Add the maximum number of slides. If there's no limit, then add 10 slides.\n Test the following image sizes:\n 2048px for retina displays\n 1024px for standard widescreen displays\n Test the following aspect ratios using 72ppi, portrait, and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Add video (if applicable)\n Add text:\n A heading\n A subheading (60 characters)\n A description\n If the text input is a plain single line text, then add 60-100 characters of text\n If the text input is rich text, then add the following text:\n Text with a single line break (60-100 characters)\n Text with two line breaks\n Text with three line breaks\n A paragraph (40-50 words)\n Add links:\n An internal link\n An external link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Add button text:\n A single word label (30 characters, no spacing)\n A multiple word label (30 characters)\n Add button links:\n Internal link\n External link\n Link opens in the same window\n Link opens in a new window\n Test autoplay behavior:\n If multiple slideshows have autoplay enabled, then each slideshow autoplays as expected\n Slideshow controls work as expected when slideshow is on autoplay\n Featured product\n Run the following tests on your featured product section. For each of these tests, verify the following:\n Adding duplicate featured products doesn't break the section or the page\n Customers can add different featured products to the cart\n Add five featured product sections, three of which are the same product\n Select different variants for one of the duplicated products\n Add one of the duplicated products to the cart\n Perform tests from the product page checklist\n Featured collection\n Run the following tests on your featured collection section. For each of these tests, verify the following:\n All sections work as expected\n Adding multiple featured collections doesn't break the section or the page\n Add three featured collection sections, using collections of varying sizes\n Perform tests from the collection page checklist\n Collection list\n Run the following tests on your collection list section. For each of these tests, verify the following:\n Collection titles are visible\n Collections with no image display the first product in the collection, or the collection's title, in the image block\n Adding multiple collection list sections doesn't break the section or the page\n Add the maximum number of collections. If there's no limit, then add 10 collections.\n Add a collection with a long title\n Add a collection with a single word title (30 characters, no spacing)\n Add a collection with a multi-word title (30 characters)\n Add collections where the collection images have different aspect ratios, in portrait and landscape orientations\n 16:9\n 4:3\n 3:2\n 1:1\n Add one collection with no featured collection image\n Image with text\n Run the following tests on your image with text section. For each of these tests, verify the following:\n All text is completely visible\n Varying image qualities and ratios are supportedImages must support varying image qualities and ratios\n Adding multiple image with text sections doesn't break the section or the page\n Add three image with text sections\n Add text:\n A heading\n A subheading (60 characters)\n A description\n If the text input is a plain single line text, then add 60-100 characters of text\n If the text input is rich text, then add the following text:\n Text with a single line break (60-100 characters)\n Text with two line breaks\n Text with three line breaks\n A paragraph (40-50 words)\n Add links:\n An internal link\n An external link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Test the following image sizes:\n 2048px for retina displays\n 1024px for standard widescreen\n Test the following aspect ratios using 72ppi, portrait, and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Newsletter\n Run the following tests on your newsletter section. For each of these tests, verify the following:\n All text is completely visible\n The form outputs proper error and success messages\n Test the following parts of the newsletter form:\n Input form text\n Submit the form\n Test error detection and handling\n Test the submission success message\n Add a description:\n If the text input is a plain single line text, then add 60-100 characters of text\n If the text input is rich text, then add the following text:\n Text with a single line break (60-100 characters)\n Text with two line breaks\n Text with three line breaks\n A paragraph (40-50 words)\n Add links:\n An internal link\n An external link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Rich text\n Run the following tests on your rich text section. For each of these tests, verify that all of the text is visible.\n Add a heading\n Add a subheading (60 characters)\n Add a description\n Add multiple paragraphs (minimum 1000 characters)\n Add links:\n Internal link\n External link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Blog posts\n Run the following tests on your blog posts section. For each of these tests, verify the following:\n All text is visible\n The blog post grid supports varying image ratios\n Add blog posts with different image aspect ratios:\n 16:9\n 4:3\n 3:2\n 1:1\n Add a blog post with a long title\n Add a blog post with a single word title (30 characters, no spacing)\n Add a blog post with a multi-word title (30 characters)\n Video\n Add the following video types in a video section. For each of these tests, verify the following:\n Adding multiple video sections doesn't break section or the page\n Video controls are present and functional\n Add a YouTube video\n Add a Vimeo video\n Add an MP4 video (if applicable)\n Unique sections\n If your theme has any additional sections then you need to test them as well. Run the tests that apply to your section. Verify the following:\n Each section supports varying image qualities and ratios\n All text is visible\n Adding multiples of the same section doesn't break the section or the page\n Add 2-3 instances of the same section\n Add text:\n A heading\n A subheading (60 characters)\n A description\n If the text input is a plain single line text, then add 60-100 characters of text\n If the text input is rich text, then add the following text:\n Text with a single line break (60-100 characters)\n Text with two line breaks\n Text with three line breaks\n A paragraph (40-50 words)\n Add links:\n An internal link\n An external link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Test the following image sizes:\n 2048px for retina displays\n 1024px for standard widescreen\n Test the following aspect ratios using 72ppi, portrait, and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n 5. Pages\n Test the following pages or elements in your theme:\n Password page\n Collection list page\n Collection page\n Product page\n Blog page\n Blog post/article page\n Cart\n Search page\n Pages\n Page with a contact form\n Gift card page\n Password page\n Run the following tests on your password page. For each of these tests, verify the following:\n Customers are able to access the store with a password\n The store logo or name and the password message are fully visible\n Add logo fallback text:\n Long store name (30-40 characters, no spaces)\n Long store name with hyphens\n Add a logo:\n Test the following logo aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Transparent background on PNG image\n Logo scales appropriately\n Test the password form:\n Fill the email field\n Submit the form\n Test error detection and handling\n Test the submission success message\n Add a password message (500+ characters)\n Add different sized background images, if applicable:\n 2048px for retina displays\n 1024px for standard widescreen\n Test the following aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Collection list page\n Run the following tests on your collection list page. For each of these tests, verify the following:\n Multiple collection image ratios are supported\n A collection with no image displays the first product in that collection, or displays the collection's title in the image block\n Add a collection with a long title\n Add a collection with a single word title (30 characters, no spacing)\n Add a collection with a multi-word title (30 characters)\n Test the following aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Add a collection with no featured collection image\n Collection page\n Run the following tests on your collection page. For each of these tests, verify the following:\n All products in the collection are accessible\n The collection can be sorted and filtered\n Combining filter tags doesn't break the page\n Product information in the product grid is fully visible\n Test group filtering (if applicable)\n Add a single word tag (30 characters, no spacing)\n Add a long list of tags (20+ tags)\n Verify that only a limited number of products are displayed on initial load\n Test pagination (if applicable)\n Pagination truncates on a collection with five or more pages\n Test View more button (if applicable)\n Test infinite scrolling (if applicable)\n Add a product title:\n A single word title (30 characters, no spacing)\n A multi-word title (30-60 characters)\n Add a product vendor:\n A single word vendor (30 characters, no spacing)\n A multi-word vendor (30-60 characters)\n Test the way the grid responds to images of different aspect ratios, using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n If the collection page has an Add to cart button, verify that it's replaced or disabled when a sold out or unavailable variant is selected.\n Verify that the sold out message or badge is displayed when applicable.\n Product page\n Run the following tests on your product page, on each of the product configurations outlined.",
                    "filename": "docs/themes/store/test-theme/checklist/content.txt",
                    "start_index": 0,
                    "end_index": 13500,
                    "start_line": 1,
                    "end_line": 355,
                    "max_line": 565,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product recommendations\n Overview\n Related products\n Complementary products\n Media and images\n Theme Store\n Show complementary products on product pages\n Complementary products are products that are often bought in addition to a selected product. They're often referred to as something that \u201cpairs well with\" the current product. You can display complementary products on the product page to help customers discover new products.\n In this tutorial, you'll learn how to show complementary products in your theme.\n Resources\n To implement product recommendations, you'll use the following:\n The recommendations object\n The /{locale}/recommendations/products endpoint of the Product Recommendations API\n Limitations\n Products that are out of stock or set to a price of 0, gift cards, and products in the visitor's cart aren't included in recommendations.\n UI guidelines\n The following best practices can help to make sure that you're displaying recommended products in a way that improves the customer experience:\n Complementary product recommendations should usually be placed near the top of the product page, typically in the product information section, near the original product image.\n The product recommendations API serves up to 10 complementary products for each product. We recommend showing 2-3 products by default, and paginating for additional products.\n Make sure that you load the proper image size for the product card.\n Because the recommendations are loaded asynchronously with JavaScript, you might want to add an empty state or not show the complementary products section at all. The placeholder is swapped with the actual complementary products after you load them.\n Use phrases such as \u201cPairs well with\u201d for the section header to explain to your customers why you're displaying the products.\n Implementing complementary products\n In this implementation, the section content builds the general display by looping through each product returned through the products attribute of the recommendations object. However, this object isn\u2019t populated when the section is initially rendered, so you need to use JavaScript to retrieve the populated section content through the section response of the Product Recommendations API.\n sections/product-recommendations.liquid\n 1 <div\n 2\n    class=\"product-recommendations\"\n 3\n    data-url=\"{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4&intent=related\"\n 4 >\n 5\n    {%- if recommendations.performed? and recommendations.products_count > 0 -%}\n 6\n      {% if recommendations.intent == 'related' %}\n 7\n        <h2>You may also like</h2>\n 8\n      {% elsif recommendations.intent == 'complementary' %}\n 9\n        <h2>Pair it with</h2>\n 10\n      {% endif %}\n 11\n 12\n      <ul>\n 13\n        {%- for product in recommendations.products -%}\n 14\n          <li class=\"product\">\n 15\n            <a href=\"{{ product.url }}\">\n 16\n              <img\n 17\n                class=\"product__img\"\n 18\n                src=\"{{ product.featured_image | image_url: width: 300, height: 300 }}\"\n 19\n                alt=\"{{ product.featured_image.alt }}\"\n 20\n              />\n 21\n 22\n              <p class=\"product__title\">{{ product.title }}</p>\n 23\n              <p class=\"product__price\">{{ product.price | money}}</p>\n 24\n            </a>\n 25\n          </li>\n 26\n        {%- endfor -%}\n 27\n      </ul>\n 28\n    {%- endif -%}\n 29 </div>\n 30\n 31 {% javascript %}\n 32\n    const handleIntersection = (entries, observer) => {\n 33\n      if (!entries[0].isIntersecting) return;\n 34\n 35\n      observer.unobserve(productRecommendationsSection);\n 36\n 37\n      const url = productRecommendationsSection.dataset.url;\n 38\n 39\n      fetch(url)\n 40\n        .then(response => response.text())\n 41\n        .then(text => {\n 42\n          const html = document.createElement('div');\n 43\n          html.innerHTML = text;\n 44\n          const recommendations = html.querySelector('.product-recommendations');\n 45\n 46\n          if (recommendations && recommendations.innerHTML.trim().length) {\n 47\n            productRecommendationsSection.innerHTML = recommendations.innerHTML;\n 48\n          }\n 49\n        })\n 50\n        .catch(e => {\n 51\n          console.error(e);\n 52\n        });\n 53\n    };\n 54\n 55\n    const productRecommendationsSection = document.querySelector('.product-recommendations');\n 56\n    const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});\n 57\n 58\n    observer.observe(productRecommendationsSection);\n 59 {% endjavascript %}\n 60\n 61 {% schema %}\n 62\n    {\n 63\n      \"name\": \"Product recommendations\",\n 64\n      \"settings\": []\n 65\n    }\n 66 {% endschema %}\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Resources\n Limitations\n UI guidelines\n Implementing complementary products\n Updates & News\n Developer changelog\n Partner blog",
                    "filename": "docs/themes/product-merchandising/recommendations/complementary-products/content.txt",
                    "start_index": 0,
                    "end_index": 4854,
                    "start_line": 1,
                    "end_line": 150,
                    "max_line": 150,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Learn more about the Seo component.\n Note\n In this example, you truncated the description to 155 characters. This is because Shopify's SEO description is limited to 155 characters. For production stores, you should curate your SEO descriptions for length.\n Step 7: Render products\n Create a ProductCard component that displays a product's title, image, and price:\n app/components/ProductCard.jsx\n 1 import {Link} from '@remix-run/react';\n 2 import {Image, Money} from '@shopify/hydrogen';\n 3\n 4 export default function ProductCard({product}) {\n 5\n    const {price, compareAtPrice} = product.variants?.nodes[0] || {};\n 6\n    const isDiscounted = compareAtPrice?.amount > price?.amount;\n 7\n 8\n    return (\n 9\n      <Link to={`/products/${product.handle}`}>\n 10\n        <div className=\"grid gap-6\">\n 11\n          <div className=\"shadow-sm rounded relative\">\n 12\n            {isDiscounted && (\n 13\n              <label className=\"subpixel-antialiased absolute top-0 right-0 m-4 text-right text-notice text-red-600 text-xs\">\n 14\n                Sale\n 15\n              </label>\n 16\n            )}\n 17\n            <Image\n 18\n              data={product.variants.nodes[0].image}\n 19\n              alt={product.title}\n 20\n            />\n 21\n          </div>\n 22\n          <div className=\"grid gap-1\">\n 23\n            <h3 className=\"max-w-prose text-copy w-full overflow-hidden whitespace-nowrap text-ellipsis \">\n 24\n              {product.title}\n 25\n            </h3>\n 26\n            <div className=\"flex gap-4\">\n 27\n              <span className=\"max-w-prose whitespace-pre-wrap inherit text-copy flex gap-4\">\n 28\n                <Money withoutTrailingZeros data={price} />\n 29\n                {isDiscounted && (\n 30\n                  <Money\n 31\n                    className=\"line-through opacity-50\"\n 32\n                    withoutTrailingZeros\n 33\n                    data={compareAtPrice}\n 34\n                  />\n 35\n                )}\n 36\n              </span>\n 37\n            </div>\n 38\n          </div>\n 39\n        </div>\n 40\n      </Link>\n 41\n    );\n 42 }\n Create a ProductGrid component to render a ProductCard for each product:\n app/components/ProductGrid.jsx\n 1 import ProductCard from './ProductCard';\n 2\n 3 export default function ProductGrid({collection, url}) {\n 4\n 5\n    return (\n 6\n      <section className=\"w-full gap-4 md:gap-8 grid\">\n 7\n        <div className=\"grid-flow-row grid gap-2 gap-y-6 md:gap-4 lg:gap-6 grid-cols-2 md:grid-cols-3 lg:grid-cols-4\">\n 8\n          {collection.products.nodes.map((product) => (\n 9\n            <ProductCard key={product.id} product={product} />\n 10\n          ))}\n 11\n        </div>\n 12\n      </section>\n 13\n    );\n 14 }\n Add the ProductGrid to the collection page and pass the collection's products and URL as props.\n You'll require the props in a subsequent step.\n app/routes/collections.$handle.jsx\n 1 import {useLoaderData} from '@remix-run/react';\n 2 import {json} from '@shopify/remix-oxygen';\n 3 import ProductGrid from '../components/ProductGrid';\n 4\n 5 const seo = ({data}) => ({\n 6\n    title: data?.collection?.title,\n 7\n    description: data?.collection?.description.substr(0, 154),\n 8 });\n 9\n 10 export const handle = {\n 11\n    seo,\n 12 };\n 13\n 14 export async function loader({params, context}) {\n 15\n    const {handle} = params;\n 16\n    const {collection} = await context.storefront.query(COLLECTION_QUERY, {\n 17\n      variables: {\n 18\n        handle,\n 19\n      },\n 20\n    });\n 21\n 22\n    // Handle 404s\n 23\n    if (!collection) {\n 24\n      throw new Response(null, {status: 404});\n 25\n    }\n 26\n 27\n    // json is a Remix utility for creating application/json responses\n 28\n    // https://remix.run/docs/en/v1/utils/json\n 29\n    return json({\n 30\n      collection,\n 31\n    });\n 32 }\n 33\n 34 export function meta({data}){\n 35\n    return [\n 36\n      {title: data?.collection?.title ?? 'Collection'},\n 37\n      {description: data?.collection?.description},\n 38\n    ];\n 39 };\n 40\n 41 export default function Collection() {\n 42\n    const {collection} = useLoaderData();\n 43\n    return (\n 44\n      <>\n 45\n        <header className=\"grid w-full gap-8 py-8 justify-items-start\">\n 46\n          <h1 className=\"text-4xl whitespace-pre-wrap font-bold inline-block\">\n 47\n            {collection.title}\n 48\n          </h1>\n 49\n 50\n          {collection.description && (\n 51\n            <div className=\"flex items-baseline justify-between w-full\">\n 52\n              <div>\n 53\n                <p className=\"max-w-md whitespace-pre-wrap inherit text-copy inline-block\">\n 54\n                  {collection.description}\n 55\n                </p>\n 56\n              </div>\n 57\n            </div>\n 58\n          )}\n 59\n        </header>\n 60\n        <ProductGrid\n 61\n          collection={collection}\n 62\n          url={`/collections/${collection.handle}`}\n 63\n        />\n 64\n      </>\n 65\n    );\n 66 }\n 67\n 68 const COLLECTION_QUERY = `#graphql\n 69\n    query CollectionDetails($handle: String!) {\n 70\n      collection(handle: $handle) {\n 71\n        id\n 72\n        title\n 73\n        description\n 74\n        handle\n 75\n        products(first: 4) {\n 76\n          nodes {\n 77\n            id\n 78\n            title\n 79\n            publishedAt\n 80\n            handle\n 81\n            variants(first: 1) {\n 82\n              nodes {\n 83\n                id\n 84\n                image {\n 85\n                  url\n 86\n                  altText\n 87\n                  width\n 88\n                  height\n 89\n                }\n 90\n                price {\n 91\n                  amount\n 92\n                  currencyCode\n 93\n                }\n 94\n                compareAtPrice {\n 95\n                  amount\n 96\n                  currencyCode\n 97\n                }\n 98\n              }\n 99\n            }\n 100\n          }\n 101\n        }\n 102\n      }\n 103\n    }\n 104 `;\n Step 8: Pagination\n In this step, you'll add a Load more products button to the bottom of the collection page.\n You're currently fetching the first four products, but your collections are likely to have more than that. You can query up to 250 products, but doing so wouldn't be as performant.\n Instead, the Storefront API uses cursors to query just one page at a time. Because cursors can be a bit tricky, we provide the Pagination component. This implementation maintains the pagination state in the URL, so that users can navigate to a product and return back to the same scrolled position in a list.\n Update the loader to use getPaginationVariables. This generates an object with the keys first, last, startCursor, and endCursor. Pass those values into your Storefront API COLLECTION_QUERY. Make sure to also update the collection query to include pageInfo.\n app/routes/collections.$handle.jsx\n 1 import {useLoaderData} from '@remix-run/react';\n 2 import {json} from '@shopify/remix-oxygen';\n 3 import ProductGrid from '../components/ProductGrid';\n 4 import {getPaginationVariables} from '@shopify/hydrogen';\n 5 const seo = ({data}) => ({\n 6\n    title: data?.collection?.title,\n 7\n    description: data?.collection?.description.substr(0, 154),\n 8 });\n 9\n 10 export const handle = {\n 11\n    seo,\n 12 };\n 13\n 14 export async function loader({params, context, request}) {\n 15\n    const paginationVariables = getPaginationVariables(request, {\n 16\n      pageBy: 4,\n 17\n    });\n 18\n    const {handle} = params;\n 19\n    const {collection} = await context.storefront.query(COLLECTION_QUERY, {\n 20\n      variables: {\n 21\n        ...paginationVariables,\n 22\n        handle,\n 23\n      },\n 24\n    });\n 25\n 26\n    // Handle 404s\n 27\n    if (!collection) {\n 28\n      throw new Response(null, {status: 404});\n 29\n    }\n 30\n 31\n    // json is a Remix utility for creating application/json responses\n 32\n    // https://remix.run/docs/en/v1/utils/json\n 33\n    return json({\n 34\n      collection,\n 35\n    });\n 36 }\n 37\n 38 export function meta({data}) {\n 39\n    return [\n 40\n      {title: data?.collection?.title ?? 'Collection'},\n 41\n      {description: data?.collection?.description},\n 42\n    ];\n 43 }\n 44\n 45 export default function Collection() {\n 46\n    const {collection} = useLoaderData();\n 47\n    return (\n 48\n      <>\n 49\n        <header className=\"grid w-full gap-8 py-8 justify-items-start\">\n 50\n          <h1 className=\"text-4xl whitespace-pre-wrap font-bold inline-block\">\n 51\n            {collection.title}\n 52\n          </h1>\n 53\n 54\n          {collection.description && (\n 55\n            <div className=\"flex items-baseline justify-between w-full\">\n 56\n              <div>\n 57\n                <p className=\"max-w-md whitespace-pre-wrap inherit text-copy inline-block\">\n 58\n                  {collection.description}\n 59\n                </p>\n 60\n              </div>\n 61\n            </div>\n 62\n          )}\n 63\n        </header>\n 64\n        <ProductGrid\n 65\n          collection={collection}\n 66\n          url={`/collections/${collection.handle}`}\n 67\n        />\n 68\n      </>\n 69\n    );\n 70 }\n 71\n 72 const COLLECTION_QUERY = `#graphql\n 73\n    query CollectionDetails(\n 74\n      $handle: String!\n 75\n      $first: Int\n 76\n      $last: Int\n 77\n      $startCursor: String\n 78\n      $endCursor: String\n 79\n    ) {\n 80\n      collection(handle: $handle) {\n 81\n        id\n 82\n        title\n 83\n        description\n 84\n        handle\n 85\n        products(\n 86\n          first: $first,\n 87\n          last: $last,\n 88\n          before: $startCursor,\n 89\n          after: $endCursor,\n 90\n        ) {\n 91\n          nodes {\n 92\n            id\n 93\n            title\n 94\n            publishedAt\n 95\n            handle\n 96\n            variants(first: 1) {\n 97\n              nodes {\n 98\n                id\n 99\n                image {\n 100\n                  url\n 101\n                  altText\n 102\n                  width\n 103\n                  height\n 104\n                }\n 105\n                price {\n 106\n                  amount\n 107\n                  currencyCode\n 108\n                }\n 109\n                compareAtPrice {\n 110\n                  amount\n 111\n                  currencyCode\n 112\n                }\n 113\n              }\n 114\n            }\n 115\n          }\n 116\n          pageInfo {\n 117\n            hasPreviousPage\n 118\n            hasNextPage\n 119\n            startCursor\n 120\n            endCursor\n 121\n          }\n 122\n        }\n 123\n      }\n 124\n    }\n 125\n 126\n    `;\n Update the ProductGrid component to use the Pagination component.\n app/components/ProductGrid.jsx\n 1 import {Pagination} from '@shopify/hydrogen';\n 2 import ProductCard from './ProductCard';\n 3\n 4 export default function ProductGrid({collection}) {\n 5\n    return (\n 6\n      <section className=\"w-full gap-4 md:gap-8 grid\">\n 7\n        <div className=\"grid-flow-row grid gap-2 gap-y-6 md:gap-4 lg:gap-6 grid-cols-2 md:grid-cols-3 lg:grid-cols-4\">\n 8\n          <Pagination connection={collection.products}>\n 9\n            {({nodes}) => {\n 10\n              return nodes.map((product) => (\n 11\n                <ProductCard key={product.id} product={product} />\n 12\n              ));\n 13\n            }}\n 14\n          </Pagination>\n 15\n        </div>\n 16\n      </section>\n 17\n    );\n 18 }\n Add both Load more products and Load previous products to the ProductGrid.",
                    "filename": "docs/custom-storefronts/hydrogen/building/collection-page/content.txt",
                    "start_index": 10634,
                    "end_index": 21756,
                    "start_line": 440,
                    "end_line": 1003,
                    "max_line": 1075,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                }
            ]
        },
        "mmr_code_snippets_initial": [
            {
                "code": "<div className={`upcart-product-image-wrapper ${styles.ProductRow__imageWrapper}`}>\n            {/*anti-pattern of disabling link was chosen in order to preserve existing DOM structure & merchant custom CSS*/}\n            <a href={itemIsReward(item) ? '/' : item.url} data-no-pointer={itemIsReward(item)}>\n              {src ? <img src={src} alt={item.title} /> : <ImageMajor height=\"75%\" width=\"75%\" />}\n            </a>\n          </div>\n        </div>\n        <div className=\"Stack__item Stack__item--fill\">\n          <div className={styles.ProductRow__productHeading}>\n            <div className={styles.ProductRow__productTitleAndVariant}>\n              <h3\n                className={`upcart-product-title UpcartDesignSettings__cartTextColor ${styles.ProductRow__productTitle}`}\n              >\n                <a\n                  className={`upcart-product-title-link ${styles.ProductRow__productTitleLink}`}\n                  href={itemIsReward(item) ? '/' : item.url}\n                  data-no-pointer={itemIsReward(item)}\n                >\n                  {item.product_title}\n                </a>\n              </h3>\n              {!item.product_has_only_default_variant &&\n                item.options_with_values?.map((option: any) => (\n                  <div\n                    key={option.name}\n                    className=\"upcart-item-option\"\n                    data-upcart-item-option-category={option.name}\n                    data-upcart-item-option-value={option.value}\n                  >\n                    <span className=\"TextStyle--variationSubdued UpcartDesignSettings__cartTextSubduedColor\">\n                      <span className=\"upcart-item-option-category\">{option.name}: </span>\n                      <span className=\"upcart-item-option-value\">{option.value}</span>\n                    </span>\n                  </div>\n                ))}\n              <div className=\"upcart-item-properties-anchor-before\" />\n              <ProductProperties item={item} settings={settings} />\n              <div className=\"upcart-item-properties-anchor-after\" />\n            </div>\n            {!isTrashLoading && (\n              <TrashButton\n                cartIsLoading={cartIsLoading}\n                isTrashLoading={isTrashLoading}\n                setIsTrashLoading={setIsTrashLoading}\n                onClick={() => deleteProductItem(item)}\n              />\n            )}\n          </div>\n          <div>\n            <div className=\"Stack Stack--noWrap Stack--distributionEqualSpacing Stack--alignmentCenter\">\n              <div className=\"Stack__item\">\n                {shouldShowQuantitySelector && (\n                  <div className={styles.ProductRow__stepper}>",
                "filename": "web/storefront/src/components/common/SingleProductRow/SingleProductRow.tsx",
                "start_index": 5370,
                "end_index": 8065,
                "start_line": 135,
                "end_line": 187,
                "max_line": 257,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "export async function handlePlanAcceptanceCallback({\n  shopifyService,\n  embeddedAppUrl,\n  unauthenticatedUnsafeAcceptedShopifyChargeId,\n}: {\n  shopifyService: ShopifyService;\n  embeddedAppUrl: URL;\n  unauthenticatedUnsafeAcceptedShopifyChargeId: number | null;\n}): Promise<PlanAcceptanceCallbackRedirect> {\n  const initiatedPlanAcceptance = await InitiatedPlanAcceptanceModel.findOneAndDelete({\n    shop: shopifyService.shop,\n    shopifyChargeId: unauthenticatedUnsafeAcceptedShopifyChargeId,\n  });\n  if (!initiatedPlanAcceptance) {\n    throw new Error(\n      `[${shopifyService.shop}] Cannot accept plan because the plan acceptance was not initiated through our server. This is a security risk and could indicate a malicious attempt to change a shop's plan. Shopify charge id: ${unauthenticatedUnsafeAcceptedShopifyChargeId}`,\n    );\n  }\n\n  // track userlist event for plan accepted\n  await trackUserlistEvent({\n    domain: shopifyService.shop,\n    eventName: USERLIST_EVENTS.upcart_pricing_accept,\n  });\n  const safeChargeId = initiatedPlanAcceptance.shopifyChargeId;\n  const isCancellingCharge = !safeChargeId;\n  if (isCancellingCharge) {\n    const activeSubscription = await shopifyService.getActiveSubscription();\n    if (activeSubscription) {\n      await shopifyService.graphql.AppSubscriptionCancel({ id: activeSubscription.id });\n    }\n  }\n  const shop = await ShopModel.findOneAndUpdate({ domain: shopifyService.shop }, [\n    {\n      $set: {\n        acceptedUpcartPlanId: initiatedPlanAcceptance.upcartPlanId,\n        hasAcceptedBilling: true,\n        // only update the firstFreeTrialStartDate if it is not already set\n        firstFreeTrialStartDate: {\n          $cond: {\n            if: '$firstFreeTrialStartDate',\n            then: '$firstFreeTrialStartDate',\n            else: new Date(Date.now()),\n          },\n        },\n      },\n    },\n  ]);\n  const hasCompletedOnboarding = Boolean(shop.isInstall);\n  const redirectUrl = new URL(embeddedAppUrl.toString());\n  if (!hasCompletedOnboarding) {\n    redirectUrl.pathname += '/onboarding';\n  }\n  return {\n    redirectUrl: redirectUrl.toString(),\n  };\n}",
                "filename": "web/server/modules/billing/plan-acceptance/plan-acceptance.ts",
                "start_index": 1340,
                "end_index": 3454,
                "start_line": 38,
                "end_line": 161,
                "max_line": 161,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "sortedTiers.forEach((tier, index) => {\n      //Only the 'discountProduct' reward type has product(s)\n      if (tier.targetType === 'discountProduct' && tier.products) {\n        if (index <= currentTier) {\n          //Products to be added\n\n          tier.products.forEach((product, productIndex) => {\n            //Check if the product is in the cart, if it isn't we need to add it\n            let cartIndex = cart.items.findIndex(\n              (item) =>\n                item.properties &&\n                item.properties.__upcartTier === index &&\n                item.properties.__upcartProductTier === productIndex,\n            );\n\n            //Check the \"lock\" to see if the product has already been added, in the process of being added or failed to add\n            let productAddedLock = sessionStorageEngine.get(`upcartTier${index}_${productIndex}AddedToCart`, true);\n\n            if (cartIndex === -1 && !productAddedLock) {\n              //Item was not found in the cart & the lock is available\n\n              //Get the variantId\n              let variantId = product?.variants?.edges?.[0]?.node?.id;\n              variantId = variantId?.split('/')[4];\n\n              itemsToAdd.push({\n                variantId: Number(variantId),\n                quantity: 1,\n                properties: {\n                  [REWARD_ITEM_PROPERTY_KEY]: variantId,\n                  __upcartTier: index,\n                  __upcartProductTier: productIndex,\n                } as UpcartRewardsCartProperties,\n              });\n            }\n          });\n        } else {\n          //Products to be removed\n          //Find all items in the cart, matching the Tier, and mark them for removal\n          let products = cart.items.filter((item) => item.properties && item.properties.__upcartTier === index);\n\n          products.forEach((product) => {\n            itemsToRemove.push({\n              key: product.key,\n              lineIdxFrom1: product.lineIdxFrom1,\n              newQuantity: (product?.quantity || 1) - 1,\n              properties: {\n                [REWARD_ITEM_PROPERTY_KEY]: product.variant_id.toString(),\n                __upcartTier: index,\n                __upcartProductTier: product?.properties?.__upcartProductTier,\n              } as UpcartRewardsCartProperties,\n            });\n          });\n\n          tier.products.forEach((product, productIndex) => {\n            //Check if the product is in the cart\n            let cartIndex = cart.items.findIndex(\n              (item) =>\n                item.properties &&\n                item.properties.__upcartTier === index &&\n                item.properties.__upcartProductTier === productIndex,\n            );\n\n            //If the user removed a product from the cart, we need to remove the lock\n            if (cartIndex === -1) {\n              sessionStorageEngine.unset([`upcartTier${index}_${productIndex}AddedToCart`]);\n            }\n          });\n        }\n      }\n    });\n\n    //\"Acquire\" the locks",
                "filename": "web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx",
                "start_index": 9879,
                "end_index": 12845,
                "start_line": 269,
                "end_line": 341,
                "max_line": 492,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n                    title: t('Activate UpCart'),\n                    description: t(`Activate the UpCart app embed block in your Theme editor. Find it in Theme settings > App embeds. Don't forget to press save.`), // prettier-ignore\n                    badge: {\n                      children: themeData?.theme && !themeData.theme.embedEnabled ? t('Required') : t('Completed'),\n                      status: themeData?.theme && !themeData.theme.embedEnabled ? t('critical') : t('success'),\n                    },\n                    action: {\n                      content: t('Open Theme Settings'),\n                      onAction: () => {\n                        window.open(themeEditorDeepLink, '_blank').focus();\n                      },\n                    },\n                  },\n                  {\n                    title: t('Match your brand design'),\n                    badge: designChanged\n                      ? {\n                          children: t('Completed'),\n                          status: t('success'),\n                        }\n                      : undefined,\n                    description: t('UpCart comes with great defaults but every brand is different. Hop into the cart editor and use the design options to match your brand.'), // prettier-ignore\n                    action: {\n                      content: t('Open Cart Editor'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=design`);\n                      },\n                    },\n                  },\n                  {\n                    title: t('Add Upsells'),\n                    badge: {\n                      children: editorData.upsellsModule ? t('Completed') : t('Recommended'),\n                      status: editorData.upsellsModule ? t('success') : t('info'),\n                    },\n                    description: t(\"Boost your AOV by using UpCart's high converting upsell offers. Head over to the cart editor to add upsells to your cart drawer.\"), // prettier-ignore\n                    action: {\n                      content: t('Add Upsells'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=upsells`);\n                      },\n                    },\n                  },",
                "filename": "web/src/@templates/Home/Home.tsx",
                "start_index": 5120,
                "end_index": 7444,
                "start_line": 1,
                "end_line": 222,
                "max_line": 260,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "// SHINEON PRODUCT TEMPLATE\nconst handleAddToCartForShineon = (platform: CartPlatform, e: DOMEvent<HTMLInputElement>): boolean => {\n  if (e.target.id && e.target.id.includes('so-btn-add-to-cart')) {\n    // const isBwBox = (document.querySelector('#product-form-options-wrap .so-variant-change.so-active') as HTMLInputElement | null)?.dataset.option1;\n    //\n    // if (isBwBox === \"B&W Box\") {\n    //   const shineonModal: HTMLElement | null = document.querySelector(\".so-modal.so-modal-e-and-g-upsell.fade.in\");\n    //   const shineonModalBackdrop: HTMLElement | null = document.querySelector(\".so-modal-backdrop.fade.in\");\n    //\n    //   if (shineonModal) {\n    //     shineonModal.style.display = \"block\";\n    //\n    //     if (shineonModalBackdrop) shineonModalBackdrop.style.display = \"block\";\n    //   }\n    //\n    //   return true;\n    // }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n\n    const items: Items[] = [];\n    const params = new URLSearchParams(document.location.search);\n    const productId = params.get('variant') || e.target.id.slice(e.target.id.lastIndexOf('-') + 1);\n    const quantity: string = (document.querySelector('.so-cart-qty-input') as HTMLInputElement | null)?.value || '1';\n    console.debug('this');\n    items.push({ id: productId, quantity: quantity });\n\n    // Addons\n    const addons: NodeListOf<HTMLInputElement> = document.querySelectorAll('.addon_product-label');\n\n    if (addons && addons.length !== 0) {\n      for (const addon of addons) {\n        const addonId = (addon.querySelector('input[type=checkbox]:checked') as HTMLInputElement | null)?.dataset\n          .variantId;\n\n        if (addonId) {\n          const quantity = (addon.querySelector('.addon__quantity') as HTMLInputElement | null)?.innerText || '1';\n          items.push({ id: addonId, quantity: quantity, properties: {} });\n        }\n      }\n    }\n\n    manyAddToCart(platform, items);\n\n    return true;\n  }\n\n  return false;\n};",
                "filename": "web/storefront/src/interceptors/handlers/handleAddToCartException.ts",
                "start_index": 4845,
                "end_index": 6796,
                "start_line": 123,
                "end_line": 199,
                "max_line": 201,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n  id: 7680954040579,\n  title: 'Placeholder Product',\n  handle: 'derby-tier-backpack',\n  description:\n    '\\u003cp\\u003e\\u003cem\\u003eThis is a demonstration store. You can purchase products like this from \\u003ca href=\"http://unitedbyblue.com/\" target=\"_blank\"\\u003eUnited By Blue\\u003c/a\\u003e.\\u003c/em\\u003e\\u003c/p\\u003e\\n\\u003cp\\u003eOur Derby backpack is built with downpour proof sustainable canvas complemented by leather trim and brass hardware. Features padded canvas shoulder straps adjustable for all -day comfort. Finished with a drawstring closure and snap buckles to keep your belongings safe and secure on any trail taken.\\u003c/p\\u003e\\n\\u003cul\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003e100% organic waxed 18 oz canvas\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003eFull grain genuine leather trim\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003eHeavy-duty brass hardware and YKK zippers\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003eLifetime\\u00a0Guarantee\\u003c/li\\u003e\\n\\u003c/ul\\u003e\\n\\u003cul class=\"tabs-content\"\\u003e\\u003c/ul\\u003e',\n  published_at: '2022-05-07T13:11:39-06:00',\n  created_at: '2022-05-07T13:11:41-06:00',\n  vendor: 'United By Blue',\n  type: 'Bags',\n  tags: [],\n  price: 11300,\n  price_min: 11300,\n  price_max: 11300,\n  available: true,\n  price_varies: false,\n  compare_at_price: 12600,\n  compare_at_price_min: 12600,\n  compare_at_price_max: 12600,\n  compare_at_price_varies: false,\n  variants: [\n    {\n      id: 42789609046275,\n      title: 'Nutmeg',\n      option1: 'Nutmeg',\n      option2: null,\n      option3: null,\n      sku: '4160',\n      requires_shipping: true,\n      taxable: true,\n      featured_image: null,\n      available: true,\n      name: 'Derby Tier Backpack - Nutmeg',\n      public_title: 'Nutmeg',\n      options: ['Nutmeg'],\n      price: 11300,\n      weight: 1361,\n      compare_at_price: 12600,\n      inventory_management: 'shopify',\n      barcode: '',\n      requires_selling_plan: false,\n      selling_plan_allocations: [],\n    },\n  ],\n  images: [\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_nutmeg_810294de-9152-4bf7-b5e0-b88fc94a1ff8.jpg?v=1651950701',\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_moss_drawstring.jpg?v=1651950701',\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/product_lifestyle-58.jpg?v=1651950701',\n  ],\n  featured_image:\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_nutmeg_810294de-9152-4bf7-b5e0-b88fc94a1ff8.jpg?v=1651950701',\n  options: [{ name: 'Color', position: 1, values: ['Nutmeg'] }],\n  url: NO_HREF, // prevent redirect in preview",
                "filename": "web/src/@templates/CartEditor/platform/preview/products/fake-products.ts",
                "start_index": 4669,
                "end_index": 7380,
                "start_line": 1,
                "end_line": 504,
                "max_line": 559,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "[\n  { selector: 'div#CartCount[data-cart-count-bubble] > span[data-cart-count]', content: { type: 'innerHtml' } }, // Debut theme\n  { selector: 'div#CartCount[site-header__cart-count] > span#item_count', content: { type: 'innerHtml' } }, // For theme ID 120599248957\n  { selector: \"a#cart-icon-bubble div[class~='cart-count-bubble'] > span\", content: { type: 'innerHtml' } }, // Dawn theme\n  { selector: \"#sticky-app-client div[data-cl='sticky-button'] > div:last-child\", content: { type: 'innerHtml' } }, // app\n  { selector: 'span[data-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'span.cart_count', content: { type: 'innerHtml' } },\n  { selector: 'span.counter.qty', content: { type: 'innerHtml' } },\n  { selector: '.current-cart-count > span.inner-count', content: { type: 'innerHtml' } },\n  { selector: \"[class*='cart-item-count']\", content: { type: 'innerHtml' } },\n  { selector: \"[class*='cart-link__count']\", content: { type: 'innerHtml' } },\n  { selector: '.cart-icon--basket2 > div', content: { type: 'innerHtml' } },\n  { selector: 'span.bigcounter', content: { type: 'innerHtml' } }, // bengalores.com\n  { selector: 'span.header__cart-count', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"].gt_show-cart > span.gt_cart-count', content: { type: 'innerHtml' } },\n  { selector: 'button#CartButton > span[x-text=\"$store.cart_count.count\"]', content: { type: 'innerHtml' } },\n  { selector: '#CartLink #CartCount', content: { type: 'innerHtml' } },\n  { selector: '.cart-count-bubble > span[data-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'div.header__cart-count > span[data-js-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"] div[data-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'span.cart-items-count', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"][aria-label=\"Cart\"].cart-icon--basket1 > div', content: { type: 'innerHtml' } },\n  { selector: 'cart-count.header__cart-count', content: { type: 'innerHtml' } },\n  { selector: '.Header__CartCount', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"] #CartCount', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"] .js-cart-count', content: { type: 'innerHtml' } },\n  {\n    selector: 'a[href*=\"/cart\"] span.site-header-cart--count',\n    content: { type: 'dataAttribute', attributeName: 'data-header-cart-count' },\n    onCountZero: ({ el }) => {\n      el.classList.remove('visible');\n    },\n    onCountNonZero: ({ el }) => {\n      el.classList.add('visible');\n    },\n  },\n  /**\n   * jodis-471.myshopify.com\n   * See Linear issue BEAM-828\n   */",
                "filename": "web/storefront/src/platform/online-store/cart/cart.ts",
                "start_index": 15097,
                "end_index": 17744,
                "start_line": 69,
                "end_line": 520,
                "max_line": 589,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "/**\n * This file is for integration with the Product Options & Customizer app.\n * https://apps.shopify.com/product-customizer\n */\nimport { REWARD_ITEM_PROPERTY_KEY } from '../constants';\nimport type { CartItem } from '../platform';\n\nexport function itemIsProductCustomizerAddon(item: CartItem) {\n  return item.product_type === 'SHOPSTORM_HIDDEN_PRODUCT';\n}\n\nexport function itemIsReward(item: CartItem): boolean {\n  return Boolean(item.properties?.[REWARD_ITEM_PROPERTY_KEY]);\n}",
                "filename": "web/storefront/src/utils/product-customizer.ts",
                "start_index": 0,
                "end_index": 478,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<Modal.Section>\n            <Layout>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={GiftCardMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Rewards Module\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Show rewards in the cart such as a free shipping bar!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={CheckoutMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Upsells Module\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Add seamless in-cart upsells to boost your sales!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={AddProductMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Add-ons Module\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Show an add-on such as shipping protection or another product!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={PaintBrushMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Customizations\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Our team will help you customize with trust badges and more!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneHalf>\n                <LegacyCard title=\"See previews below (click arrows to scroll)\" sectioned>\n                  <Carousel\n                    showArrows={true}\n                    showThumbs={false}\n                    showStatus={false}\n                    showIndicators={true}\n                    autoPlay={true}\n                    interval={7500}\n                    infiniteLoop={true}\n                    renderIndicator={(onClickHandler, isSelected, index, label) => {\n                      if (isSelected) {\n                        return (\n                          <li",
                "filename": "web/src/@components/common/ModuleUnlock/ModuleUnlock.tsx",
                "start_index": 2934,
                "end_index": 5930,
                "start_line": 91,
                "end_line": 166,
                "max_line": 295,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { GiftCardMajor, ProductsMajor, ShipmentMajor } from '@shopify/polaris-icons';\nimport clx from 'classnames';\nimport parse from 'html-react-parser';\nimport React, { useCallback, useEffect, useMemo } from 'react';\nimport { RewardTier } from '../../../../../../common/defaultMetafields';\nimport { REWARD_ITEM_PROPERTY_KEY } from '../../../constants/index';\nimport { convertCurrency, formatMoney } from '../../../helpers/currency';\nimport { useCartTotal } from '../../../hooks/useCartTotal';\nimport { AddToCartOpensCart, CartItem, ItemToAddToCart, ItemToChangeInCart } from '../../../platform';\nimport { StorageEngine } from '../../../services/storage';\nimport {\n  calcCountProgress,\n  calculateCountTieredProgress,\n  calculateProgress,\n  calculateTieredProgress,\n} from '../../../utils';\nimport { withErrorBoundary } from '../HOCs';\nimport styles from './styles.module.scss';\nimport { IRewardsModule } from './types';\nimport { useCartItems } from './hooks/useCartItems';\nimport { useCartItemCategories } from './hooks/useCartItemCategories';\nimport { useCartHelpers } from '../../../hooks/useCartHelpers';\n\nconst sessionStorageEngine = new StorageEngine('session');\n\nconst UnsafeRewardsModule: React.FC<IRewardsModule> = ({ platform, cart, refetchCart }) => {\n  const { itemCount: cartItemCount } = useCartItems({\n    cart,\n    settings: platform.settings,\n    includeRewards: false,\n  });\n\n  const { rewardItems } = useCartItemCategories({\n    cart,\n    settings: platform.settings,\n  });\n\n  const { totalAfterAllDiscountsWithoutGiftCards, totalAfterOnlyDiscountCodesWithoutGiftCards } = useCartTotal({\n    cart,\n  });\n\n  const {\n    rewardsBarBackgroundColor,\n    rewardsBarForegroundColor,\n    rewardsBasis,\n    rewardsEditor,\n    rewardsEditorAfterText,\n    rewardsEditorForItemCount,\n    rewardsItemCount,\n    rewardsMinAmount,\n    rewardsTargetType,\n    rewardsTiers,\n    rewardsTierProducts,\n    rewardsShowIconWithSingleTier,\n  } = platform.settings.upcartEditorSettings;\n\n  if (rewardsTiers.tiers.length === 0) {\n    rewardsTiers.tiers.push({\n      targetType: rewardsTargetType,\n      minAmount: rewardsMinAmount,\n      itemCount: rewardsItemCount,\n      textBeforeReachingForCartTotal: rewardsEditor,\n      textBeforeReachingForItemCount: rewardsEditorForItemCount,\n      rewardDescription: 'Free Shipping',\n      products: rewardsTierProducts,\n    });\n  }\n\n  // Calculate total price of non-gift-card reward items already present in the cart (BEAM-1664 & BEAM-400)\n  const rewardsItemsTotalPrice = rewardItems.reduce((total, item) => {\n    if (item.gift_card) return total;\n    return total + (rewardsTiers.tiers[0].targetType === 'shipping' ? item.line_price : item.original_line_price);\n  }, 0);\n\n  // See Linear issue BEAM-400 for a full explanation of this logic.\n  const totalPrice =\n    (rewardsTiers.tiers[0].targetType === 'shipping'\n      ? totalAfterAllDiscountsWithoutGiftCards\n      : totalAfterOnlyDiscountCodesWithoutGiftCards) - rewardsItemsTotalPrice;",
                "filename": "web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx",
                "start_index": 0,
                "end_index": 2983,
                "start_line": 1,
                "end_line": 79,
                "max_line": 492,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "reranked_doc_snippets_initial": [
            {
                "code": "---\nid: 3vst4bcr\ntitle: Discount Codes Module\nfile_version: 1.1.3\napp_version: 1.18.31\n---\n\n# Required background information\n\n## Discount types\n\nThere are two types of discounts: **automatic discounts** and **discount codes**.\n\n- **Automatic discounts** are applied to a cart or checkout automatically when the discount criteria are met.\n\n- **Discount codes** must be manually typed in by the customer. They stay active until the customer either removes the code, enters a different conflicting discount code, or changes their cart/checkout so that the discount is not longer applicable.\n\nThis module is specifically for **discount codes**. We do not have to worry about **automatic discounts** because they will work in the cart by default and they do not require any user interaction.\n\n## Discount targets\n\nA discount can be used to reduce the cost of **product(s)**, **order**, or **shipping**.\n\n- **Product discounts** reduce the price of one or more products and are shown as a reduction on individual line items.\n\n- **Order discounts** reduce the price of the order as a whole and are shown as a reduction on the overal price.\n\n- **Shipping discounts** reduce the price of shipping.\n\n# Read and write discount codes\n\n## Read discount codes\n\nWe read discount codes using the `cart.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:78:24:26:`    const cart: Cart&lt;CartItemWithoutCompareAtPrice&gt; = await fetch(getShopifyRoutesRoot() + &#39;cart.js&#39;).then((res) =&gt;`\"/> Ajax API endpoint.\n\nAn applied discount code will be returned from the API as part of either the `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> or the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/>. The `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> are for order discounts and the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/> are for product discounts.\n\nThese discount applications will include both **automatic discounts** and **discount codes**. We can distinguish between these using the `type`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:460:1:1:`  type: &#39;discount_code&#39; | &#39;&#39;;`\"/> field of the `DiscountApplication`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:446:4:4:`export interface DiscountApplication {`\"/>.\n\n## Apply a discount code\n\n<br/>\n\nWe apply a discount code by making a request from the storefront to the route `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/>.\n\nThe `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/> route is intended by Shopify to be used for [shareable discount links](https://help.shopify.com/en/manual/discounts/managing-discount-codes#promote-a-discount-using-a-shareable-link). Normally a customer would navigate to the link directly in their browser and would be redirected to the storefront. We are using it in a non-standard way by making a background network request.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n23         await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);\n```\n\n<br/>\n\nAfter applying a discount code, we refetch the cart to check if the discount was successfully applied and to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/DiscountCodeModule/DiscountCodeModule.tsx\n\n```tsx\n23           await platform.discounts.attemptApplyDiscountCode({ discountCode: discountCodeToApply });\n24           const updatedCart = await refetchCart();\n25\n26           const discountApplications = getAllUniqueDiscountApplications(updatedCart);\n27           const isValid = discountApplications.some(\n28             (discountApplication) => discountApplication.title === discountCodeToApply,\n29           );\n```\n\n<br/>\n\n## Remove a discount code\n\n<br/>\n\nWe remove a discount code by applying a fake invalid discount code.\n\nThere is no native way to remove discount codes so this is a workaround.\n\nThis behaviour relies on the fact that there can only be one discount code applied in the cart. We are replacing the one allowed discount code with an invalid code.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n14       async removeDiscountCode(): Promise<void> {\n15         const FAKE_INVALID_DISCOUNT_CODE = '~!~!UPCART_REMOVE_DISCOUNT!~!~';\n16         await this.UNSAFE_POSSIBLE_NO_OP_applyDiscountCodeAndSetShopifyCookie({ discountCode: FAKE_INVALID_DISCOUNT_CODE });\n17       }\n```\n\n<br/>\n\nAfter removing a discount code, we refetch the cart to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/components/DiscountCodeBadge/DiscountCodeBadge.tsx\n\n```tsx\n18         await platform.discounts.removeDiscountCode();\n19         await refetchCart();\n```\n\n<br/>\n\n> \u26a0\ufe0f After we apply or remove a discount code, the `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> of discounted line items will change. If we did not refetch the cart then we would have an outdated `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> value which would cause errors if we tried to call `cart/update.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:191:17:21:`    return fetchQd(this.ajaxMutationCartQ, getShopifyRoutesRoot() + &#39;cart/update.js&#39;, {`\"/> or `cart/change.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:153:8:12:`      getShopifyRoutesRoot() + `cart/change.js?${query.toString()}`,`\"/>.\n\n# Limitations\n\n## **Multiple** discount codes are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n50                     Multiple discount codes are not supported.\n```\n\n<br/>\n\n### Why are multiple discount codes not supported?\n\nWe cannot apply multiple discount codes because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support multiple codes. This is the only way that we know of to apply a discount code from the storefront. We will have to wait for Shopify to add support for multiple codes or to find a different way to apply codes which does support multiple.\n\nIf a customer applies two discount codes back to back, the first discount code will be discarded and only use the most recently applied code will affect the cart.\n\n## Free shipping discounts are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n58                   Free shipping discounts are not supported.\n```\n\n<br/>\n\n### Why are free shipping discounts not supported?\n\nWe cannot apply free shipping discounts because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support them.\n\n## Shopify Plus stores using checkout.liquid are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n64                   Shopify Plus stores using checkout.liquid are not supported.\n```\n\n<br/>\n\n### Why are Shopify Plus stores using checkout.liquid not supported?\n\nHistorically, the Ajax API only included automatic discounts and did not include discount codes. Shopify changed this behaviour and started including discounts from discount codes in Ajax API responses. There are still some stores which do not include discount codes in Ajax API responses. The discount codes module does not work on these stores.\n\n### How can we tell if a store is eligible?\n\nThe Ajax API will include discount codes in responses only if the store is on Shopify's new checkout.\n\n<br/>\n\nWe can identify wether or not a store is on Shopify's new checkout by looking at the cart token. If the cart token is 32 characters long and only includes hex digits (0123456789abcdef) then the store is on Shopify's old checkout, otherwise it is on Shopify's new checkout and the Ajax API will include discount codes in responses.\n\nStores that are on Shopify's new checkout may have different token formats. The following are examples that we've seen:\n\n- c1-d3f024e3af037f40bfe1b016b5b76f05\n- Z2NwLXVzLWNlbnRyYWwxOjAxSEZFMjFIV1FZUFc0SlQ3Q00ySFFSSjgy\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart({ cart }: { cart: Cart<CartItem> }): boolean {\n6          if (!cart.token) return false;\n7          const isLegacyCartToken = cart.token.match(/^[0-9a-f]{32}$/) !== null;\n8          return !isLegacyCartToken;\n9        }\n```\n\n<br/>\n\n### What happens if a store is not eligible?\n\n<br/>\n\nIf a store is not eligible then the discount code module will not be shown.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/Cart.tsx\n\n```tsx\n499                      {platform.discounts.getStoreCanApplyDiscountCodesInCart({ cart }) &&\n500                        settings.upcartEditorSettings.discountCodeModule && (\n501                          <DiscountCodeModule platform={platform} refetchCart={refetchCart} />\n502                        )}\n```\n\n<br/>\n\nIn the preview we will show the discount code module even for stores that are not eligible. We do this because it would require a lot of work to check eligibility when not on the storefront.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/platform/preview/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart(args: { cart: Cart<CartItem> }): boolean {\n6          return true;\n7        }\n```\n\n<br/>\n\nThis file was generated by Swimm. [Click here to view it in the app](https://app.swimm.io/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr).",
                "filename": ".swm/discount-codes-module.3vst4bcr.sw.md",
                "start_index": 0,
                "end_index": 11446,
                "start_line": 1,
                "end_line": 231,
                "max_line": 231,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>UpCart Loading...</title>\n    <script>\n      /*\n       * Constants\n       */\n      const INSTALL_SOURCE_QUERY_PARAM = 'via';\n      const COOKIE_LIFETIME_MS = 3 * 24 * 60 * 60 * 1000; // 3 days\n      const COOKIE_NAME = 'upcart_install_source';\n\n      /*\n       * 1. Get the ?via= query for the following steps\n       */\n      const installSource = encodeURIComponent(\n        new URLSearchParams(window.location.search).get(INSTALL_SOURCE_QUERY_PARAM),\n      );\n\n      /*\n       * 2. Set a cookie with the install source for 3 days so we can read it when they install the app\n       */\n      const cookieDomain = '.' + window.location.hostname;\n      const cookieExpiresDate = new Date();\n      cookieExpiresDate.setTime(cookieExpiresDate.getTime() + COOKIE_LIFETIME_MS);\n      const cookieExpires = cookieExpiresDate.toGMTString();\n      document.cookie = `${COOKIE_NAME}=${installSource}; expires=${cookieExpires}; domain=${cookieDomain}; path=/; SameSite=None; Secure`;\n\n      /*\n       * 3. Redirect to the app store, including the install source as a query param for App Store Google Analytics\n       */\n      window.location.replace(`https://apps.shopify.com/upcart-cart-builder?join-via=${installSource}`);\n    </script>\n  </head>\n  <body></body>\n</html>",
                "filename": "web/public/join.html",
                "start_index": 0,
                "end_index": 1304,
                "start_line": 1,
                "end_line": 36,
                "max_line": 36,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Specification: Subscription Upgrades\n\n## Editor\n\nThere should be a module in the editor with:\n\n- Name: \"Subscription Upgrades\"\n- Icon: Repeat Order\n- Default status: disabled\n- Settings:\n  - \"Prevent downgrades\"\n    - Help text: \"If enabled, customers will not be allowed to downgrade from a subscription to one-time purchase. Caution: this may increase cart abandonment.\"\n    - Type: checkbox\n    - Default: disabled\n\n## Cart\n\n> If the subscription upgrades module is disabled in the editor, the cart should skip all subscription upgrade functionality.\n>\n> The following cart specification is applicable only if the subscription upgrades module has been enabled in the editor.\n\n### Behaviour\n\nThe cart frontend for subscription upgrades should be isolated to an area below each line item. This area can include content, or can be omitted if there is nothing to show. If the area includes content, then the area should have:\n\n- Public CSS class: `.upcart-subscription-upgrade-section`\n- Styling: full-width of line item\n\nThe content of each subscription upgrade area should be independent of the content for the subscription areas for any other line items.\n\nThe content of the subscription upgrade area should be as follows:\n\nA. For **one-time purchase** line items:\n\n- If the item cannot be sold as a subscription, nothing should be shown.\n- If the item can be sold as a subscription:\n  - There should be a button with:\n    - Content: \"Upgrade to \\_\\_\\_\\_\", where \\_\\_\\_\\_ is the name of the first selling plan group for the item\n    - When clicked:\n      1. Show a loading spinner instead of text, and disable the button\n      2. Change the item to be a subscription with the first selling plan of the first selling plan group. The line item should have the property `__upcartSubscriptionUpgrade: \"true\"`\n    - Styling: full width of area, match to other buttons in cart\n    - Public CSS class: `.upcart-subscription-upgrade-button`\n\nB. For **subscription** line items:\n\n- There should be a dropdown with:\n  - Content: the name of the current selling plan\n  - Options:\n    - (OPTIONAL) A group with:\n      - Title: \"Full price\"\n      - Options:\n        - \"One-time purchase\"\n      - Condition: this group should be included if the \"Prevent downgrades\" setting is disabled AND the item does not _require_ a selling plan (i.e., it can be sold as a one-time purchase)\n    - A group for each possible selling plan group for the item with:\n      - Title: the name of the selling plan group\n      - Options: the names of the possible selling plans in the group for the item\n  - When selected:\n    1. Show a loading spinner overlayed on the dropdown and disable the dropdown\n    2. Change the selling plan of the item to the selected selling plan. If \"One-time only\" was selected, then remove the selling plan from the item to change it to a one-time purchase. The line item should have the property `__upcartSubscriptionEdit: \"true\"`\n  - Styling: full width of area, match to other dropdowns in cart\n  - Public CSS class: `.upcart-subscription-upgrade-dropdown`\n\nWhen the current purchase option for a line item changes, the content of the subscription upgrade area should be updated to match the new purchase option.\n\n### Edge Cases and Clarifications\n\n- The content of the subscription upgrade area does not depend on _how_ the purchase option was selected. For example, the subscription upgrade area content for an item that was added to the cart as a subscription should be the same as the content for an item that was upgraded from a one-time purchase to a subscription in-cart.\n- When selling plans are being loaded for a product, there should be no content in the subscription upgrade area. Before the selling plans are loaded, we can't fully decide what content to show so it's fine to show nothing.\n- When the selling plan of an item is changed, the quantity of the item should remain constant. If you don't provide a quantity to the AJAX API when changing a line item, then the quantity of the line item will be set to 1 which should be avoided.\n- Selling plans that do not apply to the selected variant for a line item should be ignored. It is possible to have selling plans that apply only to specific variants of a product. In cases where none of the selling plans from a selling plan group apply to the variant for the line item, the selling plan group should be ignored. An ignored group should not be listed in the dropdown (because it would be an empty section) and it should not be used for text of the upgrade button (because it would have no selling plan to select).",
                "filename": "docs/subscription-upgrades.md",
                "start_index": 0,
                "end_index": 4584,
                "start_line": 1,
                "end_line": 71,
                "max_line": 71,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Security Policy\n\n## Supported versions\n\n### New features\n\nNew features will only be added to the master branch and will not be made available in point releases.\n\n### Bug fixes\n\nOnly the latest release series will receive bug fixes. When enough bugs are fixed and its deemed worthy to release a new gem, this is the branch it happens from.\n\n### Security issues\n\nOnly the latest release series will receive patches and new versions in case of a security issue.\n\n### Severe security issues\n\nFor severe security issues we will provide new versions as above, and also the last major release series will receive patches and new versions. The classification of the security issue is judged by the core team.\n\n### Unsupported Release Series\n\nWhen a release series is no longer supported, it's your own responsibility to deal with bugs and security issues. If you are not comfortable maintaining your own versions, you should upgrade to a supported version.\n\n## Reporting a bug\n\nAll security bugs in shopify repositories should be reported to [our hackerone program](https://hackerone.com/shopify)\nShopify's whitehat program is our way to reward security researchers for finding serious security vulnerabilities in the In Scope properties listed at the bottom of this page, including our core application (all functionality associated with a Shopify store, particularly your-store.myshopify.com/admin) and certain ancillary applications.\n\n## Disclosure Policy\n\nWe look forward to working with all security researchers and strive to be respectful, always assume the best and treat others as peers. We expect the same in return from all participants. To achieve this, our team strives to:\n\n- Reply to all reports within one business day and triage within two business days (if applicable)\n- Be as transparent as possible, answering all inquires about our report decisions and adding hackers to duplicate HackerOne reports\n- Award bounties within a week of resolution (excluding extenuating circumstances)\n- Only close reports as N/A when the issue reported is included in Known Issues, Ineligible Vulnerabilities Types or lacks evidence of a vulnerability\n\n**The following rules must be followed in order for any rewards to be paid:**\n\n- You may only test against shops you have created which include your HackerOne YOURHANDLE @ wearehackerone.com registered email address.\n- You must not attempt to gain access to, or interact with, any shops other than those created by you.\n- The use of commercial scanners is prohibited (e.g., Nessus).\n- Rules for reporting must be followed.\n- Do not disclose any issues publicly before they have been resolved.\n- Shopify reserves the right to modify the rules for this program or deem any submissions invalid at any time. Shopify may cancel the whitehat program without notice at any time.\n- Contacting Shopify Support over chat, email or phone about your HackerOne report is not allowed. We may disqualify you from receiving a reward, or from participating in the program altogether.\n- You are not an employee of Shopify; employees should report bugs to the internal bug bounty program.\n- You hereby represent, warrant and covenant that any content you submit to Shopify is an original work of authorship and that you are legally entitled to grant the rights and privileges conveyed by these terms. You further represent, warrant and covenant that the consent of no other person or entity is or will be necessary for Shopify to use the submitted content.\n- By submitting content to Shopify, you irrevocably waive all moral rights which you may have in the content.\n- All content submitted by you to Shopify under this program is licensed under the MIT License.\n- You must report any discovered vulnerability to Shopify as soon as you have validated the vulnerability.\n- Failure to follow any of the foregoing rules will disqualify you from participating in this program.\n\n** Please see our [Hackerone Profile](https://hackerone.com/shopify) for full details\n\n## Receiving Security Updates\n\nTo recieve all general updates to vulnerabilities, please subscribe to our hackerone [Hacktivity](https://hackerone.com/shopify/hacktivity)",
                "filename": "SECURITY.md",
                "start_index": 0,
                "end_index": 4160,
                "start_line": 1,
                "end_line": 59,
                "max_line": 59,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# UpCart 3.0\n\n## Setup\n\nView setup instructions on Notion: https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 133,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "MIT License\n\nCopyright (c) 2021 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
                "filename": "extensions/theme-app-extension/LICENSE.md",
                "start_index": 0,
                "end_index": 1063,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "## Dev Setup\n\nFollow the [instructions in this Notion document](https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7?pvs=4) to setup the development environment for the Chrome extension.",
                "filename": "chrome-extensions/cart-customization/README.md",
                "start_index": 0,
                "end_index": 208,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.\\\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can\u2019t go back!**\n\nIf you aren\u2019t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you\u2019re on your own.\n\nYou don\u2019t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn\u2019t feel obligated to use this feature. However we understand that this tool wouldn\u2019t be useful if you couldn\u2019t customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n\n### Code Splitting\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\n\n### Analyzing the Bundle Size\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\n\n### Making a Progressive Web App\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\n\n### Advanced Configuration\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\n\n### Deployment\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\n\n### `npm run build` fails to minify\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)",
                "filename": "web/storefront/README.md",
                "start_index": 0,
                "end_index": 3354,
                "start_line": 1,
                "end_line": 70,
                "max_line": 70,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<html></html>",
                "filename": "web/storefront/public/index.html",
                "start_index": 0,
                "end_index": 13,
                "start_line": 1,
                "end_line": 1,
                "max_line": 1,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# [[[ --- STAGE: BASE ENVIRONMENT SETUP --- ]]]\n# see https://github.com/moby/moby/issues/37345#issuecomment-400250849\nFROM node:18.16.1-alpine as base\n# Accept command line '--build-arg' arguments\nARG PORT=8081\nARG HOST\nARG SHOPIFY_API_KEY\nARG INTERCOM_APP_ID\nARG SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY\n\n# Copy command line args to env to use during build and for final image runtime\nENV PORT=${PORT} \\\n    HOST=${HOST} \\\n    SHOPIFY_API_KEY=${SHOPIFY_API_KEY} \\\n    INTERCOM_APP_ID=${INTERCOM_APP_ID}\n    # ^^^^^ WARNING ^^^^^ do not include trailing \"\\\" on the last line above, you will get a syntax error with a terrible error message\n    #\n    # SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY is intentionally not included here since it is only for building and shouldn't be available at runtime\n\n# [[[ --- STAGE: BUILD --- ]]]\nFROM base AS build\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nCOPY web/patches ./web/patches\nRUN yarn install --cwd web --frozen-lockfile --production=false\nCOPY . .\n# NOTE: we need Sentry API token to upload source maps to Sentry during build, see withSentryConfig in next.config.js\nRUN echo \"[auth]\\ntoken=${SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY}\" > ./web/.sentryclirc\nRUN yarn web:build\n\n# [[[ --- STAGE: LICENSES WEB --- ]]]\nFROM base AS licenses-web\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web > ./web/public/licenses/web.txt\n\n# [[[ --- STAGE: LICENSES STOREFRONT --- ]]]\nFROM base AS licenses-storefront\nWORKDIR /app\nCOPY web/storefront/package.json web/storefront/yarn.lock ./web/storefront/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web/storefront > ./web/public/licenses/storefront.txt\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM base\nWORKDIR /app\nCOPY --from=build /app .\nCOPY package.json ./package.json\nRUN yarn install --frozen-lockfile --production=true\nCOPY --from=licenses-web /app/web/public/licenses/web.txt ./web/public/licenses/web.txt\nCOPY --from=licenses-storefront /app/web/public/licenses/storefront.txt ./web/public/licenses/storefront.txt\nCMD [\"yarn\", \"web:start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2181,
                "start_line": 1,
                "end_line": 53,
                "max_line": 53,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "The starting point for this repository was created using the Shopify CLI, commit\nf5d560da33aafae0b552de72a90f1320d1023524. Some boilerplate code from the CLI\nremains and is licensed as follows:\n\"\"\"\nMIT License\n\nCopyright (c) 2018 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\"",
                "filename": "LICENSE.md",
                "start_index": 0,
                "end_index": 1265,
                "start_line": 1,
                "end_line": 26,
                "max_line": 26,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { Shop, ShopModel } from '../modules/shops/shops.model';\nimport { RequestWithShop } from '../types/express.types';\nimport Shopify from '@shopify/shopify-api';\n\nexport const getShopDocFromRequest = async (req: RequestWithShop): Promise<Shop> => {\n  if (req.shopDoc) {\n    return req.shopDoc;\n  }\n\n  const shop = Shopify.Utils.sanitizeShop(req.query.shop as string);\n  const shopDoc = await ShopModel.findOne({ domain: shop }).lean();\n  req.shopDoc = shopDoc;\n  return shopDoc;\n};",
                "filename": "web/server/helpers/getShopDocFromRequest.ts",
                "start_index": 0,
                "end_index": 485,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "solution_task": {
            "structured_resp": "Clarify:\nThe issue is that the first reward item added to the cart is not clickable to view its landing page. Enabling pointer events caused redirection to the homepage instead of the product page. This behavior was intentionally changed in a previous issue (BEAM-2545) to make reward product links non-clickable. A fix was suggested to make this feature optional and a setting was created and enabled for the merchant's store to resolve the issue.\n\nHypothesize:\n- The issue may be related to the handling of pointer events or click events on the reward items in the cart.\n- The code that disables the clickability of reward items may not be considering the new setting that was created to make this feature optional.\n- The redirection to the homepage instead of the product page when pointer events are enabled suggests that the event handler for the click might be incorrectly set up or that the URL for the product page is not correctly assigned.\n\nExperiment:\n- Review the code related to the RewardsModule, particularly the event handling for clicks on reward items.\n- Check if the new setting to make the non-clickable feature optional is being checked before disabling pointer events or click events on reward items.\n- Verify the URLs assigned to reward items and the event handlers that manage the redirection to ensure they point to the correct product page.\n\nAnalyze:\n- The provided code snippets do not include the specific logic that handles the clickability of reward items or the redirection logic. Therefore, we cannot directly analyze the exact cause of the issue from the snippets.\n- The RewardsModule code provided does not show any event handling or URL assignment for the reward items.\n- The Footer.tsx snippet includes a `handleRedirect` function, but it is related to the checkout process and not to individual product items.\n\nResolve:\n- Locate the code that handles the click events on reward items within the RewardsModule or related components.\n- Implement a check for the new optional setting before disabling pointer events or click events on reward items. If the setting is enabled, allow the default click behavior.\n- Ensure that the URLs for reward items are correctly set to point to their respective product pages and not the homepage.\n- If the redirection issue persists, debug the click event handler to ensure it is not being overridden or incorrectly handled, causing a redirect to the homepage.\n- Test the changes to confirm that the first reward item added to the cart is now clickable and redirects to the correct product page when the optional setting is enabled.",
            "response": "To address the challenge of making the first reward item added to the cart clickable and directing to its landing page, we need to modify the existing codebase. This involves ensuring that the reward items' clickability is controlled by a merchant-specific setting and that the correct URLs are assigned for redirection. Here are the steps to achieve this:\n\n- Review the code within the RewardsModule or associated components that manages click events on reward items.\n- Introduce a conditional check for the merchant-specific setting that controls the clickability of reward items. If the setting permits, enable the default click behavior.\n- Confirm that the URLs assigned to reward items correctly direct to their individual product pages, rather than the homepage.\n- In case the redirection to the product page does not work as expected, investigate the click event handler for potential issues that might lead to incorrect redirection.\n- After implementing the changes, thoroughly test to ensure that clicking on the first reward item in the cart leads to its product page, provided the merchant-specific setting is activated."
        },
        "snippet_processor_task": {
            "web/storefront/src/components/common/SingleProductRow/SingleProductRow.tsx": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "The snippet provides code related to rendering product images and titles, including conditional logic for reward items and disabling links. It mentions the use of custom CSS and pointer events, which could be relevant to the issues described.",
                        "snippet": {
                            "code": "<div className={`upcart-product-image-wrapper ${styles.ProductRow__imageWrapper}`}>\n            {/*anti-pattern of disabling link was chosen in order to preserve existing DOM structure & merchant custom CSS*/}\n            <a href={itemIsReward(item) ? '/' : item.url} data-no-pointer={itemIsReward(item)}>\n              {src ? <img src={src} alt={item.title} /> : <ImageMajor height=\"75%\" width=\"75%\" />}\n            </a>\n          </div>\n        </div>\n        <div className=\"Stack__item Stack__item--fill\">\n          <div className={styles.ProductRow__productHeading}>\n            <div className={styles.ProductRow__productTitleAndVariant}>\n              <h3\n                className={`upcart-product-title UpcartDesignSettings__cartTextColor ${styles.ProductRow__productTitle}`}\n              >\n                <a\n                  className={`upcart-product-title-link ${styles.ProductRow__productTitleLink}`}\n                  href={itemIsReward(item) ? '/' : item.url}\n                  data-no-pointer={itemIsReward(item)}\n                >\n                  {item.product_title}\n                </a>\n              </h3>\n              {!item.product_has_only_default_variant &&\n                item.options_with_values?.map((option: any) => (\n                  <div\n                    key={option.name}\n                    className=\"upcart-item-option\"\n                    data-upcart-item-option-category={option.name}\n                    data-upcart-item-option-value={option.value}\n                  >\n                    <span className=\"TextStyle--variationSubdued UpcartDesignSettings__cartTextSubduedColor\">\n                      <span className=\"upcart-item-option-category\">{option.name}: </span>\n                      <span className=\"upcart-item-option-value\">{option.value}</span>\n                    </span>\n                  </div>\n                ))}\n              <div className=\"upcart-item-properties-anchor-before\" />\n              <ProductProperties item={item} settings={settings} />\n              <div className=\"upcart-item-properties-anchor-after\" />\n            </div>\n            {!isTrashLoading && (\n              <TrashButton\n                cartIsLoading={cartIsLoading}\n                isTrashLoading={isTrashLoading}\n                setIsTrashLoading={setIsTrashLoading}\n                onClick={() => deleteProductItem(item)}\n              />\n            )}\n          </div>\n          <div>\n            <div className=\"Stack Stack--noWrap Stack--distributionEqualSpacing Stack--alignmentCenter\">\n              <div className=\"Stack__item\">\n                {shouldShowQuantitySelector && (\n                  <div className={styles.ProductRow__stepper}>",
                            "filename": "web/storefront/src/components/common/SingleProductRow/SingleProductRow.tsx",
                            "start_index": 5370,
                            "end_index": 8065,
                            "start_line": 135,
                            "end_line": 187,
                            "max_line": 257,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet is directly related to rendering product images and titles, including the logic for disabling links on reward items, which is at the core of the issue regarding the inability to click on reward product links."
                }
            ],
            "web/storefront/src/utils/product-customizer.ts": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Functions for checking if an item is a product customizer addon or a reward item based on specific criteria.",
                        "snippet": {
                            "code": "/**\n * This file is for integration with the Product Options & Customizer app.\n * https://apps.shopify.com/product-customizer\n */\nimport { REWARD_ITEM_PROPERTY_KEY } from '../constants';\nimport type { CartItem } from '../platform';\n\nexport function itemIsProductCustomizerAddon(item: CartItem) {\n  return item.product_type === 'SHOPSTORM_HIDDEN_PRODUCT';\n}\n\nexport function itemIsReward(item: CartItem): boolean {\n  return Boolean(item.properties?.[REWARD_ITEM_PROPERTY_KEY]);\n}",
                            "filename": "web/storefront/src/utils/product-customizer.ts",
                            "start_index": 0,
                            "end_index": 478,
                            "start_line": 1,
                            "end_line": 14,
                            "max_line": 14,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet contains functions for checking if an item is a reward item, which is relevant to the issue since the problem involves reward items and their clickability."
                }
            ],
            "common/defaultMetafields.ts": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Defines various settings and modules related to the cart functionality such as Design Settings, Announcements Module, Rewards Module, and Upsells Module.",
                        "snippet": {
                            "code": "cartIsEnabled: { type: 'boolean', value: true },\n\n    // Design Settings\n    settingsModule: {\n      type: 'json',\n      value: {\n        fields: {\n          /**\n           * This field has changed to mean \"show strikethrough prices\". This means that we also show the strikethrough\n           * if there is a discount applied to an item, even if the item doesn't have a compare-at price.\n           */\n          compareAtPrice: true,\n          inheritFonts: true,\n          backgroundColor: '#FFFFFF',\n          cartAccentColor: '#f6f6f7',\n          buttonColor: '#000000',\n          buttonTextColor: '#FFFFFF',\n          buttonTextHoverColor: '#e9e9e9',\n          cartTextColor: '#000000',\n        },\n      },\n    },\n\n    // Announcements Module\n    announcementModule: { type: 'boolean', value: false },\n    announcementEditor: {\n      type: 'multi_line_text_field',\n      value: '<p>Your products are reserved for <b>{TIMER}</b> minutes!</p>',\n    },\n    announcementBackgroundColor: { type: 'single_line_text_field', value: '#CDE0E0' },\n    announcementModulePosition: { type: 'single_line_text_field', value: 'top' },\n    announcementBorderColor: { type: 'single_line_text_field', value: '#C5E6FD' },\n    announcementTimer: { type: 'single_line_text_field', value: '00:00' },\n\n    // Rewards Module\n    rewardsModule: { type: 'boolean', value: false },\n    rewardsBarBackgroundColor: { type: 'single_line_text_field', value: '#E2E2E2' },\n    rewardsBarForegroundColor: { type: 'single_line_text_field', value: '#93D3FF' },\n    rewardsBasis: { type: 'single_line_text_field', value: 'cartTotal' },\n    rewardsTargetType: { type: 'single_line_text_field', value: 'productsOrOrder' },\n    rewardsMinAmount: { type: 'single_line_text_field', value: '125' },\n    rewardsEditor: {\n      type: 'multi_line_text_field',\n      value: '<p>You\u2019re <b>{AMOUNT}</b> away from free shipping!</p>',\n    },\n    rewardsEditorAfterText: { type: 'multi_line_text_field', value: 'Free shipping unlocked!' },\n    rewardsEditorForItemCount: {\n      type: 'multi_line_text_field',\n      value: '<p>You\u2019re <b>{COUNT}</b> products away from free shipping!</p>',\n    },\n    rewardsItemCount: { type: 'single_line_text_field', value: '5' },\n    rewardsTiers: {\n      type: 'json',\n      value: { tiers: [], geoLocationPricing: [], rewardsAutoConvertCurrency: false, rewardsGeoLocationEnabled: false },\n    },\n    rewardsTierProducts: { type: 'json', value: [] },\n    rewardsShowIconWithSingleTier: { type: 'boolean', value: false },\n\n    // Upsells Module\n    upsellsModule: { type: 'boolean', value: false },\n    upsellsDirection: { type: 'single_line_text_field', value: 'horizontal' },\n    upsellsTitle: { type: 'multi_line_text_field', value: \"You'll love these\" },\n    maximumUpsellsToShow: { type: 'single_line_text_field', value: '10' },\n    upsellsShouldLimit: { type: 'boolean', value: false },\n    upsellsTrigger: { type: 'boolean', value: false },\n    sho",
                            "filename": "common/defaultMetafields.ts",
                            "start_index": 14968,
                            "end_index": 17911,
                            "start_line": 417,
                            "end_line": 482,
                            "max_line": 567,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet defines settings related to the Rewards Module, which is pertinent since the fix involved creating and enabling a new setting for the merchant's store to address the issue."
                }
            ]
        },
        "bouncer_response": {
            "score": 7,
            "criteria": "The RESPONSE must provide actionable, relevant guidance to more parts of the PROMPT's described issue to score higher.",
            "supporting_evidence": "The RESPONSE provides a structured approach to addressing the issue of making the first reward item clickable and directing to its landing page. It suggests reviewing the code that manages click events, introducing a conditional check for a merchant-specific setting, confirming correct URL redirection, investigating click event handlers, and thorough testing. The RESPONSE also provides specific code snippets to check, which are relevant to the issue at hand. However, it does not address the fact that the issue was already resolved by the engineering team, as indicated in the PROMPT. The RESPONSE seems to overlook the current status of the issue, which has been marked as 'Done' after a fix was implemented.",
            "clarification_questions": "NONE"
        },
        "end_time": 1714401768.036215,
        "result": "To address the challenge of making the first reward item added to the cart clickable and directing to its landing page, we need to modify the existing codebase. This involves ensuring that the reward items' clickability is controlled by a merchant-specific setting and that the correct URLs are assigned for redirection. Here are the steps to achieve this:\n\n- Review the code within the RewardsModule or associated components that manages click events on reward items.\n- Introduce a conditional check for the merchant-specific setting that controls the clickability of reward items. If the setting permits, enable the default click behavior.\n- Confirm that the URLs assigned to reward items correctly direct to their individual product pages, rather than the homepage.\n- In case the redirection to the product page does not work as expected, investigate the click event handler for potential issues that might lead to incorrect redirection.\n- After implementing the changes, thoroughly test to ensure that clicking on the first reward item in the cart leads to its product page, provided the merchant-specific setting is activated.\n\n### Code snippets to check\n\n-  \u2192 [web](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web) \u2192 [storefront](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront) \u2192 [src](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src) \u2192 [components](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/components) \u2192 [common](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/components/common) \u2192 [SingleProductRow](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/components/common/SingleProductRow)- [Lines 135 - 187](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/components/common/SingleProductRow/SingleProductRow.tsx#L135-L187)\n\n This snippet is directly related to rendering product images and titles, including the logic for disabling links on reward items, which is at the core of the issue regarding the inability to click on reward product links.\n-  \u2192 [web](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web) \u2192 [storefront](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront) \u2192 [src](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src) \u2192 [utils](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/utils)- [Lines 1 - 14](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/utils/product-customizer.ts#L1-L14)\n\n This snippet contains functions for checking if an item is a reward item, which is relevant to the issue since the problem involves reward items and their clickability.\n-  \u2192 [common](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/common)- [Lines 417 - 482](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/common/defaultMetafields.ts#L417-L482)\n\n This snippet defines settings related to the Rewards Module, which is pertinent since the fix involved creating and enabling a new setting for the merchant's store to address the issue."
    }
}