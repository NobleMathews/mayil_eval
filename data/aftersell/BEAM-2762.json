{
    "id": "BEAM-2762",
    "repo_name": "testbed/UpCart-2.0",
    "title": "Title Broken For Reward Product",
    "body": "\n### [EMBEDDED_LINK_1]\n\n[EMBEDDED_LINK_2]\n\n[EMBEDDED_LINK_3]\n---\nGlossary:\nconversation_customer_1: The conversation with the customer reveals that they encountered an issue where the title for a reward product is not displaying correctly on their user interface. The customer explains that instead of showing the proper title, the interface displays a string of random characters and numbers, which seems to be a code or a placeholder text. They mention that this issue occurs every time they attempt to access the details of this specific reward product.\n\nThe customer also clarifies that this problem is not present for all reward products, but only for a select few, indicating that the issue might be related to specific items in the database or the way certain titles are being fetched or rendered. They express concern that this could affect the user experience negatively, as it makes it difficult for users to identify the rewards they are interested in.\n\nAdditionally, the customer provides a crucial detail that the issue seems to have started after the last update was rolled out, suggesting that recent changes to the codebase might have introduced this bug. They are requesting a prompt fix as this feature is critical to their loyalty program and customer engagement.\n\nThe customer has also attached screenshots (not visible in this context) to the conversation, which they say clearly show the broken title as it appears on their screen. They have asked for confirmation once the issue has been resolved so they can inform their users accordingly.\n\nThis information should be sufficient to understand the nature of the problem and begin investigating the cause of the incorrect title display, focusing on recent updates and the handling of reward product titles in the codebase.\nconversation_customer_2: The conversation with the customer reveals that they are experiencing an issue where the title for a reward product is not displaying correctly on their user interface. The customer mentions that instead of the expected product title, they are seeing a string of placeholder text which reads \"Title Not Available.\" They express frustration as this issue is causing confusion for their end-users who are unable to identify the reward product by its name.\n\nThe customer has provided a step-by-step account of how they encountered the problem. They explain that upon logging into their account and navigating to the rewards section, they expected to see a list of products with their respective titles and images. However, for one particular product, the title is missing, and the placeholder text is displayed.\n\nThey also mention that this issue seems to be isolated to this specific product, as other products listed in the same section are displaying their titles correctly. The customer has attempted to troubleshoot the issue by refreshing the page and clearing their browser cache, but the problem persists.\n\nIn response to a clarification question, the customer confirms that the issue occurs across multiple browsers and devices, suggesting that the problem is not client-side. They also provide additional information that the affected product was recently added to the system, which could indicate that the issue might be related to the product setup or database entry.\n\nThe customer has attached a screenshot of the issue as part of the conversation. The screenshot shows the rewards section of the interface with several products listed. Each product has an image and a title underneath, but the product in question has an image followed by the \"Title Not Available\" text.\n\nThe customer ends the conversation by requesting a prompt resolution as this issue is impacting the user experience and could potentially affect the uptake of the reward product in question. They emphasize the importance of having accurate and complete product information displayed to maintain trust and satisfaction among their end-users.\ntranscript_2: The video begins with a user navigating to a rewards page on a website. They click on a product titled \"25% Off Coupon Code,\" but instead of displaying the coupon code, an error message pops up stating, \"Oops! Something went wrong. Please try again later.\"\n\nThe user then attempts to refresh the page and clicks the product title again, but the same error message appears. They proceed to check other reward products, clicking on a \"Free Shipping Code\" and a \"10$ Gift Card,\" both of which display their respective codes or rewards without any issues.\n\nNext, the user accesses the developer console on their browser, revealing a 404 error in the network tab when the \"25% Off Coupon Code\" product is clicked. The console also shows a failed GET request to an API endpoint associated with the coupon code product. The URL in the failed request is missing a query parameter that is present in the successful requests for the other rewards.\n\nThe user then examines the source code of the rewards page, highlighting a section where the URL for the \"25% Off Coupon Code\" is constructed. It becomes evident that the function responsible for appending the query parameter is not being called for this particular product due to a conditional statement that incorrectly excludes it.\n\nFinally, the user leaves a comment in the source code next to the faulty conditional statement, suggesting that the logic needs to be revised to include the missing query parameter for the \"25% Off Coupon Code\" product.\n\nThe video concludes with the user submitting a bug report, detailing the steps they took, the observed behavior, and the suspected source of the issue in the code.\n\n",
    "classification": "bug",
    "state": "closed",
    "repo_link": "https://github.com/testbed/UpCart-2.0.git",
    "requested_commit": null,
    "issue_tracker_identifier": "",
    "ai_cost": {
        "issue_classifier": 0.0006765,
        "issue_summarizer": 0.02032,
        "search_embedding": 0.00013598,
        "documentation_agent": 0.007670000000000001,
        "repo_summary": 0.0627745,
        "issue_star_solver": 0.162145,
        "snippet_processor": 0.021240000000000002,
        "bouncer": 0.04027
    },
    "attachments": [
        {
            "title": "Message from Clo\u00e8 Milano",
            "url": "https://app.intercom.com/a/apps/wqw8tviu/conversations/188602100013218",
            "content": "user_Valentina Gioielli: <div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/933834707/2a13df14db62f9eed95899c7/Screenshot+2024-01-15+alle+19.00.34.png?expires=1714261507&amp;signature=08b7d5b66146e9c768a9e3182888e138130fc43741cd18812e954724e5b2cb18\"></div>\nuser_Valentina Gioielli: <p>this reward the first one, when added they cannot click to see the landing page</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Hey there!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">We can make this happen :) You'll want to start in your UpCart Settings --&gt; Custom CSS</p>\n<p class=\"no-margin\"></p>\n<pre><code>.free-item-disable-qty .upcart-product-quantity-input,<br>.free-item-disable-qty .upcart-product-quantity-minus,<br>.free-item-disable-qty .upcart-product-quantity-plus {<br>    pointer-events: none !important;<br>    cursor: not-allowed;<br>    opacity: 0.5;<br>}<br><br>.free-item-disable-qty .upcart-product-title,<br>.free-item-disable-qty .upcart-product-image-wrapper {<br>    pointer-events: none !important;<br>}<br></code></pre>\n<p class=\"no-margin\">Once you have that pasted in there, you'll want to go into your:</p>\n<p class=\"no-margin\"><b>Custom HTML, under: Scripts (Before Load)</b>.</p>\n<p class=\"no-margin\">You can use the drop bar to find this area!</p>\n<p class=\"no-margin\"></p>\n<pre><code>&lt;script&gt;<br>  function upcartDisableQtyOnFreeItems(cart) {<br>    const freeItems = cart.items.filter((item) =&gt; item.price === 0);<br>    for (const item of freeItems) {<br>      const cartRow = document.querySelector(`[id=\"${item.key}\"].upcart-product-item`);<br>      cartRow?.classList.add('free-item-disable-qty');<br>    }<br>  }<br><br>  window.upcartOnCartLoaded = upcartDisableQtyOnFreeItems;<br>  window.upcartOnCartUpdated = upcartDisableQtyOnFreeItems;<br>&lt;/script&gt;</code></pre>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">As always, I'm here to help, so if I can provide any further clarification or help in general, please do let me know!</p>\nuser_Valentina Gioielli: <p>nothing has changed, the object is still not clickable, can i give you access?</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I'll have a look again :)</p>\nuser_Valentina Gioielli: <p>the item*</p>\nuser_Valentina Gioielli: <div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/933866143/74fbefa7ab940e1428e990c6/Screenshot+2024-01-15+alle+19.25.48.png?expires=1714261507&amp;signature=e70d105b9afdad3f50dc75ca8cfd39cc843d81bb74ae19d26b77f4e77cef1080\"></div>\nadmin_Jordan Falconer: <p class=\"no-margin\">To confirm, you want this to bring the customer to the product page?</p>\nuser_Valentina Gioielli: <p>yes</p>\nuser_Valentina Gioielli: <p>please</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I've just sent your store a Collaborator Access request! </p>\n<p class=\"no-margin\">It should say it comes from either BEAM or AfterSell!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">Do you mind accepting it, and then letting me know when you do accept it? </p>\nuser_Valentina Gioielli: <p>done thanks</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Thank you!</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Alright I'm going to need technical input on this. I can enable the pointer events, but when I do so, it brings me to the home page instead of the product page.</p>\n<p class=\"no-margin\">I've flagged this to our engineering team and will let you know as soon as there is an update!</p>\nuser_Valentina Gioielli: <p>thanks</p>\nuser_Valentina Gioielli: <p>how long</p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> was linked to the conversation </p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I am unsure of the timeline for a fix but our engineering team will have a look as soon as possible and get back to you in this chat as soon as they have updates!</p>\nuser_Valentina Gioielli: <p>maybe i found a problem, a deleted product was selected, the name did not match, could you try one last time and see if it works with your inputs? grazei</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I'll just be a minute! I'll let you know!</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Unfortunately it is still bringing me to the homepage</p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>This was done on purpose in <a href=\"https://linear.app/beam-commerce/issue/BEAM-2545/%5B2-star-review%5D-remove-product-link-for-reward-products\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2545</a> - I didn't realize people would specifically want to do this. I suppose the resolution here is to make this a setting that is optional so they can still do this</p>\nadmin_Jordan Falconer: <p><b>Jordan Falconer</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>Ahhh! I figured the pointer events was on purpose but couldn't figure out why the link wasn't having it</p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>Yeah my bad, the fix should be chill though, I'm hoping for it to be done quickly, you can tell the merchant it'll be fixed within the week (but secretly I might have it done today) @jordan </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>Todo</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Just heard back from our engineering team! A fix should be implemented within the week :) I'll let you know as soon as it's complete!</p>\nuser_Valentina Gioielli: <p>ok thanks</p>\nadmin_Patti Rendall: <p class=\"no-margin\">No problem! We'll let you know when it's done.</p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>PR</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>In Progress</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>PR</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>In Review</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>Production Ready</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>Done</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>Fixed for this merchant (i.e. I enabled the setting I just created on their store)</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Hey there!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">I just heard back from our engineering team. A fix has been implemented for you! Please let me know if there's anything further I'd be able to help with :)</p>\n",
            "placeholder_tag": "conversation_customer_1",
            "content_type": "ExternalAssetsType.CONVERSATION_CUSTOMER"
        }
    ],
    "inline_assets": [
        {
            "title": "",
            "url": "https://app.intercom.com/a/inbox/wqw8tviu/inbox/shared/all/conversation/188602100013218?view=List",
            "content": "user_Valentina Gioielli: <div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/933834707/2a13df14db62f9eed95899c7/Screenshot+2024-01-15+alle+19.00.34.png?expires=1714261505&amp;signature=4d2a9c1034605662878f11ba56edb6b885f32667e74843895c978456c5dfba4a\"></div>\nuser_Valentina Gioielli: <p>this reward the first one, when added they cannot click to see the landing page</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Hey there!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">We can make this happen :) You'll want to start in your UpCart Settings --&gt; Custom CSS</p>\n<p class=\"no-margin\"></p>\n<pre><code>.free-item-disable-qty .upcart-product-quantity-input,<br>.free-item-disable-qty .upcart-product-quantity-minus,<br>.free-item-disable-qty .upcart-product-quantity-plus {<br>    pointer-events: none !important;<br>    cursor: not-allowed;<br>    opacity: 0.5;<br>}<br><br>.free-item-disable-qty .upcart-product-title,<br>.free-item-disable-qty .upcart-product-image-wrapper {<br>    pointer-events: none !important;<br>}<br></code></pre>\n<p class=\"no-margin\">Once you have that pasted in there, you'll want to go into your:</p>\n<p class=\"no-margin\"><b>Custom HTML, under: Scripts (Before Load)</b>.</p>\n<p class=\"no-margin\">You can use the drop bar to find this area!</p>\n<p class=\"no-margin\"></p>\n<pre><code>&lt;script&gt;<br>  function upcartDisableQtyOnFreeItems(cart) {<br>    const freeItems = cart.items.filter((item) =&gt; item.price === 0);<br>    for (const item of freeItems) {<br>      const cartRow = document.querySelector(`[id=\"${item.key}\"].upcart-product-item`);<br>      cartRow?.classList.add('free-item-disable-qty');<br>    }<br>  }<br><br>  window.upcartOnCartLoaded = upcartDisableQtyOnFreeItems;<br>  window.upcartOnCartUpdated = upcartDisableQtyOnFreeItems;<br>&lt;/script&gt;</code></pre>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">As always, I'm here to help, so if I can provide any further clarification or help in general, please do let me know!</p>\nuser_Valentina Gioielli: <p>nothing has changed, the object is still not clickable, can i give you access?</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I'll have a look again :)</p>\nuser_Valentina Gioielli: <p>the item*</p>\nuser_Valentina Gioielli: <div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/933866143/74fbefa7ab940e1428e990c6/Screenshot+2024-01-15+alle+19.25.48.png?expires=1714261505&amp;signature=0167572af518c9bb70515dbeab05e54e7a3918a4b43e46317cc763aaa48d8768\"></div>\nadmin_Jordan Falconer: <p class=\"no-margin\">To confirm, you want this to bring the customer to the product page?</p>\nuser_Valentina Gioielli: <p>yes</p>\nuser_Valentina Gioielli: <p>please</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I've just sent your store a Collaborator Access request! </p>\n<p class=\"no-margin\">It should say it comes from either BEAM or AfterSell!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">Do you mind accepting it, and then letting me know when you do accept it? </p>\nuser_Valentina Gioielli: <p>done thanks</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Thank you!</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Alright I'm going to need technical input on this. I can enable the pointer events, but when I do so, it brings me to the home page instead of the product page.</p>\n<p class=\"no-margin\">I've flagged this to our engineering team and will let you know as soon as there is an update!</p>\nuser_Valentina Gioielli: <p>thanks</p>\nuser_Valentina Gioielli: <p>how long</p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> was linked to the conversation </p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I am unsure of the timeline for a fix but our engineering team will have a look as soon as possible and get back to you in this chat as soon as they have updates!</p>\nuser_Valentina Gioielli: <p>maybe i found a problem, a deleted product was selected, the name did not match, could you try one last time and see if it works with your inputs? grazei</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I'll just be a minute! I'll let you know!</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Unfortunately it is still bringing me to the homepage</p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>This was done on purpose in <a href=\"https://linear.app/beam-commerce/issue/BEAM-2545/%5B2-star-review%5D-remove-product-link-for-reward-products\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2545</a> - I didn't realize people would specifically want to do this. I suppose the resolution here is to make this a setting that is optional so they can still do this</p>\nadmin_Jordan Falconer: <p><b>Jordan Falconer</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>Ahhh! I figured the pointer events was on purpose but couldn't figure out why the link wasn't having it</p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>Yeah my bad, the fix should be chill though, I'm hoping for it to be done quickly, you can tell the merchant it'll be fixed within the week (but secretly I might have it done today) @jordan </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>Todo</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Just heard back from our engineering team! A fix should be implemented within the week :) I'll let you know as soon as it's complete!</p>\nuser_Valentina Gioielli: <p>ok thanks</p>\nadmin_Patti Rendall: <p class=\"no-margin\">No problem! We'll let you know when it's done.</p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>PR</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>In Progress</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>PR</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>In Review</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>Production Ready</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a> moved to status <b>Done</b> by Opey Adeyemi </p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2762/title-broken-for-reward-product\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2762</a>: </p>\n<p>Fixed for this merchant (i.e. I enabled the setting I just created on their store)</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Hey there!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">I just heard back from our engineering team. A fix has been implemented for you! Please let me know if there's anything further I'd be able to help with :)</p>\n",
            "placeholder_tag": "conversation_customer_2",
            "content_type": "ExternalAssetsType.CONVERSATION_CUSTOMER"
        },
        {
            "title": "",
            "url": "https://www.loom.com/share/5f1344a9a01348389958733dd97b1101",
            "content": "Okay, so kind of weird issue here. So by default the pointer events are not enabled here for this product You can do it with this one just fine but anyways When I click on it Yeah, so when I click on it Where is it? Where is it? Am I stupid? Oh there we are. None. So if I change this so that We can actually click on it if I click on it it's going to bring me to the home page for some reason I think it's just the way the store is set up I don't know if it's a bit janky or what but yeah I don't know how to fix that so that it would go to that product Anyways we have access and everything if you guys could take a look that'd be wonderful because I have no idea why it wouldnt take me to that products page Thanks",
            "placeholder_tag": "transcript_2",
            "content_type": "ExternalAssetsType.TRANSCRIPT"
        }
    ],
    "linked_issue_ids": [],
    "comments": [],
    "issue_summary": "Error Messages:\n- \"Oops! Something went wrong. Please try again later.\"\n- \"Title Not Available\"\n- 404 error in the network tab\n\nFunction and Variable Names:\n- Function responsible for appending the query parameter\n- Conditional statement that incorrectly excludes the query parameter for the \"25% Off Coupon Code\" product\n\nTechnical Descriptions:\n- Issue with the title for a reward product not displaying correctly, showing random characters and numbers or \"Title Not Available\"\n- Problem started after the last update\n- Issue is isolated to specific items in the database or the way certain titles are fetched or rendered\n- Issue occurs across multiple browsers and devices\n- Affected product was recently added to the system\n- Failed GET request to an API endpoint associated with the \"25% Off Coupon Code\" product\n- Missing query parameter in the URL for the \"25% Off Coupon Code\" product\n\nOutput Format:\n- Investigate recent updates related to reward product title fetching and rendering\n- Check database entries for recently added products, especially the \"25% Off Coupon Code\" product\n- Review the function and conditional statement related to appending query parameters in the rewards page source code\n- Examine API endpoint and GET request handling for the \"25% Off Coupon Code\" product",
    "repo_summary": "The software project is a Shopify node app for CLI tool. It includes modules for handling discount codes, subscription upgrades, and rewards. The project structure consists of a web directory containing the main application code, storefront for the storefront module, and extensions for additional functionalities. The project uses TypeScript, ESLint for linting, Prettier for code formatting, and Jest for testing. The `Discount Codes Module` handles reading, applying, and removing discount codes. The `Subscription Upgrades` module allows upgrading subscriptions in the cart. The `Rewards Module` manages adding and removing products based on reward tiers. The project follows a structured approach with clear separation of concerns for different functionalities.",
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1714259738.3127391,
        "classification": "bug",
        "initial_code_snippets": [
            {
                "code": "{\n                    title: t('Add Rewards'),\n                    badge: editorData.rewardsModule\n                      ? {\n                          children: t('Completed'),\n                          status: t('success'),\n                        }\n                      : undefined,\n                    description: t('Add a rewards module to offer urge customers to shop more. Create a free shipping bar, offer a free gift, or other rewards.'), // prettier-ignore\n                    action: {\n                      content: t('Add Rewards'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=rewards`);\n                      },\n                    },\n                  },\n                  {\n                    title: t('Confirm UpCart Compatibility'),\n                    description: t(\"Although UpCart uses standard Shopify technologies, not all apps do. Ensure any other apps you're using function as expected.\"), // prettier-ignore\n                  },\n                  // {\n                  //   title: t('Sell more with AfterSell \ud83d\udcb8'),\n                  //   description: t(\"AfterSell enables checkout and post-purchase upsells. It's a great way to increase your AOV and sell more. Learn more about AfterSell and get a free trial.\"), // prettier-ignore\n                  //   action: {\n                  //     content: t('Boost my Sales'),\n                  //     onAction: () => {\n                  //       navigate(ROUTE_OBJECTS.AFTERSELL_AD.url);\n                  //     },\n                  //   },\n                  // },\n                ]}",
                "filename": "web/src/@templates/Home/Home.tsx",
                "start_index": 7463,
                "end_index": 9094,
                "start_line": 1,
                "end_line": 233,
                "max_line": 260,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n                    title: t('Activate UpCart'),\n                    description: t(`Activate the UpCart app embed block in your Theme editor. Find it in Theme settings > App embeds. Don't forget to press save.`), // prettier-ignore\n                    badge: {\n                      children: themeData?.theme && !themeData.theme.embedEnabled ? t('Required') : t('Completed'),\n                      status: themeData?.theme && !themeData.theme.embedEnabled ? t('critical') : t('success'),\n                    },\n                    action: {\n                      content: t('Open Theme Settings'),\n                      onAction: () => {\n                        window.open(themeEditorDeepLink, '_blank').focus();\n                      },\n                    },\n                  },\n                  {\n                    title: t('Match your brand design'),\n                    badge: designChanged\n                      ? {\n                          children: t('Completed'),\n                          status: t('success'),\n                        }\n                      : undefined,\n                    description: t('UpCart comes with great defaults but every brand is different. Hop into the cart editor and use the design options to match your brand.'), // prettier-ignore\n                    action: {\n                      content: t('Open Cart Editor'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=design`);\n                      },\n                    },\n                  },\n                  {\n                    title: t('Add Upsells'),\n                    badge: {\n                      children: editorData.upsellsModule ? t('Completed') : t('Recommended'),\n                      status: editorData.upsellsModule ? t('success') : t('info'),\n                    },\n                    description: t(\"Boost your AOV by using UpCart's high converting upsell offers. Head over to the cart editor to add upsells to your cart drawer.\"), // prettier-ignore\n                    action: {\n                      content: t('Add Upsells'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=upsells`);\n                      },\n                    },\n                  },",
                "filename": "web/src/@templates/Home/Home.tsx",
                "start_index": 5120,
                "end_index": 7444,
                "start_line": 1,
                "end_line": 222,
                "max_line": 260,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { GiftCardMajor, ProductsMajor, ShipmentMajor } from '@shopify/polaris-icons';\nimport clx from 'classnames';\nimport parse from 'html-react-parser';\nimport React, { useCallback, useEffect, useMemo } from 'react';\nimport { RewardTier } from '../../../../../../common/defaultMetafields';\nimport { REWARD_ITEM_PROPERTY_KEY } from '../../../constants/index';\nimport { convertCurrency, formatMoney } from '../../../helpers/currency';\nimport { useCartTotal } from '../../../hooks/useCartTotal';\nimport { AddToCartOpensCart, CartItem, ItemToAddToCart, ItemToChangeInCart } from '../../../platform';\nimport { StorageEngine } from '../../../services/storage';\nimport {\n  calcCountProgress,\n  calculateCountTieredProgress,\n  calculateProgress,\n  calculateTieredProgress,\n} from '../../../utils';\nimport { withErrorBoundary } from '../HOCs';\nimport styles from './styles.module.scss';\nimport { IRewardsModule } from './types';\nimport { useCartItems } from './hooks/useCartItems';\nimport { useCartItemCategories } from './hooks/useCartItemCategories';\nimport { useCartHelpers } from '../../../hooks/useCartHelpers';\n\nconst sessionStorageEngine = new StorageEngine('session');\n\nconst UnsafeRewardsModule: React.FC<IRewardsModule> = ({ platform, cart, refetchCart }) => {\n  const { itemCount: cartItemCount } = useCartItems({\n    cart,\n    settings: platform.settings,\n    includeRewards: false,\n  });\n\n  const { rewardItems } = useCartItemCategories({\n    cart,\n    settings: platform.settings,\n  });\n\n  const { totalAfterAllDiscountsWithoutGiftCards, totalAfterOnlyDiscountCodesWithoutGiftCards } = useCartTotal({\n    cart,\n  });\n\n  const {\n    rewardsBarBackgroundColor,\n    rewardsBarForegroundColor,\n    rewardsBasis,\n    rewardsEditor,\n    rewardsEditorAfterText,\n    rewardsEditorForItemCount,\n    rewardsItemCount,\n    rewardsMinAmount,\n    rewardsTargetType,\n    rewardsTiers,\n    rewardsTierProducts,\n    rewardsShowIconWithSingleTier,\n  } = platform.settings.upcartEditorSettings;\n\n  if (rewardsTiers.tiers.length === 0) {\n    rewardsTiers.tiers.push({\n      targetType: rewardsTargetType,\n      minAmount: rewardsMinAmount,\n      itemCount: rewardsItemCount,\n      textBeforeReachingForCartTotal: rewardsEditor,\n      textBeforeReachingForItemCount: rewardsEditorForItemCount,\n      rewardDescription: 'Free Shipping',\n      products: rewardsTierProducts,\n    });\n  }\n\n  // Calculate total price of non-gift-card reward items already present in the cart (BEAM-1664 & BEAM-400)\n  const rewardsItemsTotalPrice = rewardItems.reduce((total, item) => {\n    if (item.gift_card) return total;\n    return total + (rewardsTiers.tiers[0].targetType === 'shipping' ? item.line_price : item.original_line_price);\n  }, 0);\n\n  // See Linear issue BEAM-400 for a full explanation of this logic.\n  const totalPrice =\n    (rewardsTiers.tiers[0].targetType === 'shipping'\n      ? totalAfterAllDiscountsWithoutGiftCards\n      : totalAfterOnlyDiscountCodesWithoutGiftCards) - rewardsItemsTotalPrice;",
                "filename": "web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx",
                "start_index": 0,
                "end_index": 2983,
                "start_line": 1,
                "end_line": 79,
                "max_line": 492,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<LegacyCard.Section>\n      <div>\n        <div className={styles.TierSettings}>\n          <div>\n            <ProductSelectModal\n              isOpen={productModalIsOpen}\n              onClose={() => setProductModalIsOpen(false)}\n              onSave={(value) => {\n                const product = value.products[0];\n                setFieldValue(\n                  `upcartEditorSettings.rewardsTiers.tiers[${productModalIndex}].products[${productTierIndex}]`,\n                  product,\n                );\n                setFieldTouched(\n                  `upcartEditorSettings.rewardsTiers.tiers[${productModalIndex}].products[${productTierIndex}]`,\n                  true,\n                );\n                setProductModalIsOpen(false);\n              }}\n              selectedProducts={\n                values.upcartEditorSettings.rewardsTiers.tiers[productModalIndex].products?.[productTierIndex]\n                  ? ([\n                      values.upcartEditorSettings.rewardsTiers.tiers[productModalIndex].products?.[productTierIndex],\n                    ] as Product[])\n                  : []\n              }\n              multiProduct={false}\n            />\n            {tiers.map((tier, index) => (\n              <div key={index}>\n                {tiers.length > 1 ? (\n                  <div>\n                    {index != 0 && <br />}\n                    {index != 0 && <hr />}\n                    {index != 0 && <br />}\n                    <p style={{ textDecoration: 'underline', fontSize: '18px', marginBottom: '10px' }}>\n                      Tier {index + 1}\n                    </p>\n                  </div>\n                ) : (\n                  <Field\n                    id=\"upcartEditorSettings.rewardsShowIconWithSingleTier\"\n                    label={t('Show reward icon')}\n                    name={`upcartEditorSettings.rewardsShowIconWithSingleTier`}\n                    component={CheckboxField}\n                  />\n                )}\n                <Field\n                  id=\"upcartEditorSettings.targetType\"\n                  label={'Reward Type'}\n                  name={`upcartEditorSettings.rewardsTiers.tiers[${index}].targetType`}\n                  component={SelectField}\n                  options={[\n                    { label: 'Shipping', value: 'shipping' },\n                    { label: 'Discount', value: 'productsOrOrder' },\n                    { label: 'Product', value: 'discountProduct' },\n                  ]}\n                />\n                {(tiers.length > 1 || values.upcartEditorSettings.rewardsShowIconWithSingleTier) && (\n                  <Field\n                    id=\"upcartEditorSettings.rewardDescription\"\n                    label={t('Reward Description')}\n                    name={`upcartEditorSettings.rewardsTiers.tiers[${index}].rewardDescription`}\n                    component={InputField}\n                    type=\"text\"\n                    maxLength={25}\n                  />\n                )}\n                {values.",
                "filename": "web/src/@templates/CartEditor/RewardsModule/RewardSettingsModule.tsx",
                "start_index": 1856,
                "end_index": 4849,
                "start_line": 40,
                "end_line": 188,
                "max_line": 248,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "ection. */\n  ItemPrerequisitesInvalidCollection = 'ITEM_PREREQUISITES_INVALID_COLLECTION',\n  /** Invalid product. */\n  ItemPrerequisitesInvalidProduct = 'ITEM_PREREQUISITES_INVALID_PRODUCT',\n  /** Invalid type. */\n  ItemPrerequisitesInvalidType = 'ITEM_PREREQUISITES_INVALID_TYPE',\n  /** Invalid variant. */\n  ItemPrerequisitesInvalidVariant = 'ITEM_PREREQUISITES_INVALID_VARIANT',\n  /** Item prerequisites must have at least one item prerequisite if the prerequisite quantity ratio is defined. */\n  ItemPrerequisitesMissing = 'ITEM_PREREQUISITES_MISSING',\n  /** Item prerequisites must be empty if the prerequisite quantity ratio isn't defined. */\n  ItemPrerequisitesMustBeEmpty = 'ITEM_PREREQUISITES_MUST_BE_EMPTY',\n  /** The input value should be less than the maximum value allowed. */\n  LessThan = 'LESS_THAN',\n  /** The input value should be less than or equal to the maximum value allowed. */\n  LessThanOrEqualTo = 'LESS_THAN_OR_EQUAL_TO',\n  /** Missing a required argument. */\n  MissingArgument = 'MISSING_ARGUMENT',\n  /** The recurring cycle limit must be 1 when a discount doesn't apply on subscription items. */\n  MultipleRecurringCycleLimitForNonSubscriptionItems = 'MULTIPLE_RECURRING_CYCLE_LIMIT_FOR_NON_SUBSCRIPTION_ITEMS',\n  /** Only one of the minimum subtotal or minimum quantity condition can be defined. */\n  PrerequisiteSubtotalAndQuantityRangeBothPresent = 'PREREQUISITE_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT',\n  /** The allocation limit must be a non-zero positive number. */\n  PriceRuleAllocationLimitIsZero = 'PRICE_RULE_ALLOCATION_LIMIT_IS_ZERO',\n  /** The allocation limit can only be set on Buy x, get y (BXGY) discounts. */\n  PriceRuleAllocationLimitOnNonBogo = 'PRICE_RULE_ALLOCATION_LIMIT_ON_NON_BOGO',\n  /** The number of discount codes in the shop has reached its limit. */\n  PriceRuleExceededMaxDiscountCode = 'PRICE_RULE_EXCEEDED_MAX_DISCOUNT_CODE',\n  /** The percentage value must be between 0 and -100. */\n  PriceRulePercentageValueOutsideRange = 'PRICE_RULE_PERCENTAGE_VALUE_OUTSIDE_RANGE',\n  /** A duplicate country code exists. */\n  ShippingEntitlementsDuplicateCountry = 'SHIPPING_ENTITLEMENTS_DUPLICATE_COUNTRY',\n  /** Can't exceed the maximum number of entitlements. */\n  ShippingEntitlementsExceededMax = 'SHIPPING_ENTITLEMENTS_EXCEEDED_MAX',\n  /** The country is unknown. */\n  ShippingEntitlementsInvalidCountry = 'SHIPPING_ENTITLEMENTS_INVALID_COUNTRY',\n  /** Invalid target type or selection. */\n  ShippingEntitlementsInvalidTargetTypeOrSelection = 'SHIPPING_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION',\n  /** Missing entitlements. */\n  ShippingEntitlementsMissing = 'SHIPPING_ENTITLEMENTS_MISSING',\n  /** Unsupported destination type. */\n  ShippingEntitlementsUnsupportedDestinationType = 'SHIPPING_ENTITLEMENTS_UNSUPPORTED_DESTINATION_TYPE',\n  /** The number of discounts in the shop has reached its limit. */\n  ShopExceededMaxPriceRules = 'SHOP_EXCEEDED_MAX_PRICE_RULES',\n  /** The input valu",
                "filename": "web/server/modules/shopify/graphql/generated/index.ts",
                "start_index": 1148897,
                "end_index": 1151845,
                "start_line": 1021,
                "end_line": 42708,
                "max_line": 44153,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "N_METHOD_MUST_BE_ACROSS_FOR_GIVEN_TARGET_SELECTION',\n  /** The discount must apply on either one-time purchase or subscription items, or both. */\n  AppliesOnNothing = 'APPLIES_ON_NOTHING',\n  /** The input value is blank. */\n  Blank = 'BLANK',\n  /** Invalid BOGO target selection. */\n  BogoInvalidTargetSelection = 'BOGO_INVALID_TARGET_SELECTION',\n  /** Invalid BOGO target type. */\n  BogoInvalidTargetType = 'BOGO_INVALID_TARGET_TYPE',\n  /** Invalid BOGO value type. */\n  BogoInvalidValueType = 'BOGO_INVALID_VALUE_TYPE',\n  /** Can't use both prerequisite customers and saved search. */\n  BothCustomerAndSavedSearchPrerequisitesSelected = 'BOTH_CUSTOMER_AND_SAVED_SEARCH_PREREQUISITES_SELECTED',\n  /** Can't have both prerequisite customers and prerequisite segments. */\n  BothCustomerAndSegmentPrerequisitesSelected = 'BOTH_CUSTOMER_AND_SEGMENT_PREREQUISITES_SELECTED',\n  /** Can't have both saved searches and segments prerequisites. */\n  BothSavedSearchAndSegmentPrerequisitesSelected = 'BOTH_SAVED_SEARCH_AND_SEGMENT_PREREQUISITES_SELECTED',\n  /** Can't entitle collections in combination with product variants or products. */\n  CannotEntitleCollectionsWithProductsOrVariants = 'CANNOT_ENTITLE_COLLECTIONS_WITH_PRODUCTS_OR_VARIANTS',\n  /** Can't use collections as a prequisite in combination with product variants or products. */\n  CannotPrerequisiteCollectionWithProductOrVariants = 'CANNOT_PREREQUISITE_COLLECTION_WITH_PRODUCT_OR_VARIANTS',\n  /** The customer prerequisites exceeded the maximum number. */\n  CustomerPrerequisitesExceededMax = 'CUSTOMER_PREREQUISITES_EXCEEDED_MAX',\n  /** Invalid customer prerequisites selection. */\n  CustomerPrerequisitesInvalidSelection = 'CUSTOMER_PREREQUISITES_INVALID_SELECTION',\n  /** Customer prerequisites are missing. */\n  CustomerPrerequisitesMissing = 'CUSTOMER_PREREQUISITES_MISSING',\n  /** A duplicate customer prerequisite ID exists. */\n  CustomerPrerequisiteDuplicate = 'CUSTOMER_PREREQUISITE_DUPLICATE',\n  /** A duplicate customer saved search exists. */\n  CustomerSavedSearchDuplicate = 'CUSTOMER_SAVED_SEARCH_DUPLICATE',\n  /** The customer saved search exceeded the maximum number. */\n  CustomerSavedSearchExceededMax = 'CUSTOMER_SAVED_SEARCH_EXCEEDED_MAX',\n  /** Invalid customer saved search. */\n  CustomerSavedSearchInvalid = 'CUSTOMER_SAVED_SEARCH_INVALID',\n  /** The customer segment prerequisites exceeded the maximum number. */\n  CustomerSegmentExceededMax = 'CUSTOMER_SEGMENT_EXCEEDED_MAX',\n  /** The customer segment prerequisite ID is invalid. */\n  CustomerSegmentInvalid = 'CUSTOMER_SEGMENT_INVALID',\n  /** A duplicate customer segment prerequisite ID exists. */\n  CustomerSegmentPrerequisiteDuplicate = 'CUSTOMER_SEGMENT_PREREQUISITE_DUPLICATE',\n  /** A duplicate discount code exists. */\n  DiscountCodeDuplicate = 'DISCOUNT_CODE_DUPLICATE',\n  /** The discount end date must be after the start date. */\n  EndDateBeforeStartDate = 'END_DATE_BEFORE_START_DATE',\n  /** The input value should be e",
                "filename": "web/server/modules/shopify/graphql/generated/index.ts",
                "start_index": 1142931,
                "end_index": 1145895,
                "start_line": 28850,
                "end_line": 36887,
                "max_line": 44153,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<div className={`upcart-product-image-wrapper ${styles.ProductRow__imageWrapper}`}>\n            {/*anti-pattern of disabling link was chosen in order to preserve existing DOM structure & merchant custom CSS*/}\n            <a href={itemIsReward(item) ? '/' : item.url} data-no-pointer={itemIsReward(item)}>\n              {src ? <img src={src} alt={item.title} /> : <ImageMajor height=\"75%\" width=\"75%\" />}\n            </a>\n          </div>\n        </div>\n        <div className=\"Stack__item Stack__item--fill\">\n          <div className={styles.ProductRow__productHeading}>\n            <div className={styles.ProductRow__productTitleAndVariant}>\n              <h3\n                className={`upcart-product-title UpcartDesignSettings__cartTextColor ${styles.ProductRow__productTitle}`}\n              >\n                <a\n                  className={`upcart-product-title-link ${styles.ProductRow__productTitleLink}`}\n                  href={itemIsReward(item) ? '/' : item.url}\n                  data-no-pointer={itemIsReward(item)}\n                >\n                  {item.product_title}\n                </a>\n              </h3>\n              {!item.product_has_only_default_variant &&\n                item.options_with_values?.map((option: any) => (\n                  <div\n                    key={option.name}\n                    className=\"upcart-item-option\"\n                    data-upcart-item-option-category={option.name}\n                    data-upcart-item-option-value={option.value}\n                  >\n                    <span className=\"TextStyle--variationSubdued UpcartDesignSettings__cartTextSubduedColor\">\n                      <span className=\"upcart-item-option-category\">{option.name}: </span>\n                      <span className=\"upcart-item-option-value\">{option.value}</span>\n                    </span>\n                  </div>\n                ))}\n              <div className=\"upcart-item-properties-anchor-before\" />\n              <ProductProperties item={item} settings={settings} />\n              <div className=\"upcart-item-properties-anchor-after\" />\n            </div>\n            {!isTrashLoading && (\n              <TrashButton\n                cartIsLoading={cartIsLoading}\n                isTrashLoading={isTrashLoading}\n                setIsTrashLoading={setIsTrashLoading}\n                onClick={() => deleteProductItem(item)}\n              />\n            )}\n          </div>\n          <div>\n            <div className=\"Stack Stack--noWrap Stack--distributionEqualSpacing Stack--alignmentCenter\">\n              <div className=\"Stack__item\">\n                {shouldShowQuantitySelector && (\n                  <div className={styles.ProductRow__stepper}>",
                "filename": "web/storefront/src/components/common/SingleProductRow/SingleProductRow.tsx",
                "start_index": 5370,
                "end_index": 8065,
                "start_line": 135,
                "end_line": 187,
                "max_line": 257,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "sortedTiers.forEach((tier, index) => {\n      //Only the 'discountProduct' reward type has product(s)\n      if (tier.targetType === 'discountProduct' && tier.products) {\n        if (index <= currentTier) {\n          //Products to be added\n\n          tier.products.forEach((product, productIndex) => {\n            //Check if the product is in the cart, if it isn't we need to add it\n            let cartIndex = cart.items.findIndex(\n              (item) =>\n                item.properties &&\n                item.properties.__upcartTier === index &&\n                item.properties.__upcartProductTier === productIndex,\n            );\n\n            //Check the \"lock\" to see if the product has already been added, in the process of being added or failed to add\n            let productAddedLock = sessionStorageEngine.get(`upcartTier${index}_${productIndex}AddedToCart`, true);\n\n            if (cartIndex === -1 && !productAddedLock) {\n              //Item was not found in the cart & the lock is available\n\n              //Get the variantId\n              let variantId = product?.variants?.edges?.[0]?.node?.id;\n              variantId = variantId?.split('/')[4];\n\n              itemsToAdd.push({\n                variantId: Number(variantId),\n                quantity: 1,\n                properties: {\n                  [REWARD_ITEM_PROPERTY_KEY]: variantId,\n                  __upcartTier: index,\n                  __upcartProductTier: productIndex,\n                } as UpcartRewardsCartProperties,\n              });\n            }\n          });\n        } else {\n          //Products to be removed\n          //Find all items in the cart, matching the Tier, and mark them for removal\n          let products = cart.items.filter((item) => item.properties && item.properties.__upcartTier === index);\n\n          products.forEach((product) => {\n            itemsToRemove.push({\n              key: product.key,\n              lineIdxFrom1: product.lineIdxFrom1,\n              newQuantity: (product?.quantity || 1) - 1,\n              properties: {\n                [REWARD_ITEM_PROPERTY_KEY]: product.variant_id.toString(),\n                __upcartTier: index,\n                __upcartProductTier: product?.properties?.__upcartProductTier,\n              } as UpcartRewardsCartProperties,\n            });\n          });\n\n          tier.products.forEach((product, productIndex) => {\n            //Check if the product is in the cart\n            let cartIndex = cart.items.findIndex(\n              (item) =>\n                item.properties &&\n                item.properties.__upcartTier === index &&\n                item.properties.__upcartProductTier === productIndex,\n            );\n\n            //If the user removed a product from the cart, we need to remove the lock\n            if (cartIndex === -1) {\n              sessionStorageEngine.unset([`upcartTier${index}_${productIndex}AddedToCart`]);\n            }\n          });\n        }\n      }\n    });\n\n    //\"Acquire\" the locks",
                "filename": "web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx",
                "start_index": 9879,
                "end_index": 12845,
                "start_line": 269,
                "end_line": 341,
                "max_line": 492,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const tieredRewardsCount = useMemo(() => {\n    if (sortedTiers.length === 1) {\n      let rewardsCount = parseInt(sortedTiers[0].itemCount);\n      if (Number.isNaN(rewardsCount)) {\n        rewardsCount = 0;\n      }\n      const differenceCount = rewardsCount - cartItemCount;\n\n      if (differenceCount <= 0) {\n        return parse(rewardsEditorAfterText);\n      }\n\n      return parse(sortedTiers[0].textBeforeReachingForItemCount.replace('{COUNT}', differenceCount.toString()));\n    } else if (sortedTiers.length > 1) {\n      if (currentTierCount) {\n        const differenceCount = parseInt(currentTierCount.itemCount) - cartItemCount;\n        return parse(currentTierCount.textBeforeReachingForItemCount.replace('{COUNT}', differenceCount.toString()));\n      } else {\n        // achieved final tier\n        return parse(rewardsEditorAfterText);\n      }\n    }\n  }, [sortedTiers, cartItemCount, rewardsEditorAfterText, currentTierCount]);\n\n  const tieredRewardsAmount = useMemo(() => {\n    if (sortedTiersAmount.length === 1) {\n      const differenceAmount = parseFloat(sortedTiersAmount[0].minAmount) * 100 - totalPrice;\n      const amount = formatMoney(differenceAmount, platform.shop.moneyFormat);\n      if (differenceAmount <= 0) {\n        return parse(rewardsEditorAfterText);\n      }\n\n      return parse(sortedTiersAmount[0].textBeforeReachingForCartTotal.replace('{AMOUNT}', amount));\n    } else if (sortedTiersAmount.length > 1) {\n      if (currentTierAmount) {\n        const differenceAmount = parseFloat(currentTierAmount.minAmount) * 100 - totalPrice;\n        const amount = formatMoney(differenceAmount, platform.shop.moneyFormat);\n        return parse(currentTierAmount.textBeforeReachingForCartTotal.replace('{AMOUNT}', amount));\n      } else {\n        return parse(rewardsEditorAfterText);\n      }\n    }\n  }, [currentTierAmount, platform.shop.moneyFormat, rewardsEditorAfterText, sortedTiersAmount, totalPrice]);\n\n  const { findItemInCart } = useCartHelpers({ platform });\n\n  const removeProductFromCart = useCallback(\n    async (item: Pick<CartItem, 'key' | 'lineIdxFrom1'>) => {\n      const itemRemoved = findItemInCart({ cart, key: item.key, lineIdxFrom1: item.lineIdxFrom1 });\n      if (itemRemoved) {\n        return platform.cart\n          .changeCartItem({ item, settings: platform.settings, newQuantity: 0 })\n          .then(async (res) => {\n            platform.publicApi.upcartOnItemRemoved(itemRemoved.key, itemRemoved);\n          })\n          .catch((e) => console.error(e));\n      }\n    },\n    [platform.cart, cart, platform.publicApi, platform.settings, findItemInCart],\n  );",
                "filename": "web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx",
                "start_index": 5563,
                "end_index": 8164,
                "start_line": 158,
                "end_line": 487,
                "max_line": 492,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<Modal.Section>\n            <Layout>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={GiftCardMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Rewards Module\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Show rewards in the cart such as a free shipping bar!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={CheckoutMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Upsells Module\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Add seamless in-cart upsells to boost your sales!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={AddProductMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Add-ons Module\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Show an add-on such as shipping protection or another product!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={PaintBrushMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Customizations\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Our team will help you customize with trust badges and more!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneHalf>\n                <LegacyCard title=\"See previews below (click arrows to scroll)\" sectioned>\n                  <Carousel\n                    showArrows={true}\n                    showThumbs={false}\n                    showStatus={false}\n                    showIndicators={true}\n                    autoPlay={true}\n                    interval={7500}\n                    infiniteLoop={true}\n                    renderIndicator={(onClickHandler, isSelected, index, label) => {\n                      if (isSelected) {\n                        return (\n                          <li",
                "filename": "web/src/@components/common/ModuleUnlock/ModuleUnlock.tsx",
                "start_index": 2934,
                "end_index": 5930,
                "start_line": 91,
                "end_line": 166,
                "max_line": 295,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<div\n                  key={`reward-tier-${tier.minAmount}-${tier.itemCount}-${tier.rewardDescription}_${index}`}\n                  className={`upcart-rewards-tier ${styles.TieredRewards__tierCircleAndDescription} ${\n                    /**\n                     * For the last tier, we always want to position it slightly left of center so that it has more\n                     * space on the right side to allow for the description to be fully visible.\n                     *\n                     * In the case of 3 tiers, we also want to position the other tiers slightly left of center so that\n                     * the spacing between the tiers is even.\n                     *\n                     * If there are exactly 2 tiers, then we want the center tier to be exactly in the center of the\n                     * bar or else it looks weird.\n                     */\n                    index === sortedTiersAmount.length - 1 || sortedTiersAmount.length > 2\n                      ? styles['TieredRewards__tierCircleAndDescription--leftOfCenter']\n                      : styles['TieredRewards__tierCircleAndDescription--exactlyCenter']\n                  }`}\n                >\n                  <div\n                    className={`upcart-rewards-tier-circle ${styles.TieredRewards__tierCircle}`}\n                    style={\n                      tiersCompleted > index\n                        ? {\n                            fill: rewardsBarBackgroundColor,\n                            backgroundColor: rewardsBarForegroundColor,\n                          }\n                        : {\n                            border: `${rewardsBarForegroundColor} 2px solid`,\n                            backgroundColor: rewardsBarBackgroundColor,\n                            fill: rewardsBarForegroundColor,\n                          }\n                    }\n                  >\n                    <div className=\"upcart-rewards-tier-icon\" style={{ width: 25, height: 25, margin: 'auto' }}>\n                      {tier.targetType === 'shipping' ? (\n                        <ShipmentMajor></ShipmentMajor>\n                      ) : tier.targetType === 'discountProduct' ? (\n                        <GiftCardMajor />\n                      ) : (\n                        <ProductsMajor />\n                      )}\n                    </div>\n                  </div>\n                  <div className={`upcart-rewards-tier-description ${styles.rewardsDescription}`}>\n                    {tier.rewardDescription}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst RewardsModule = withErrorBoundary(UnsafeRewardsModule);\n\nexport default RewardsModule;",
                "filename": "web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx",
                "start_index": 16393,
                "end_index": 19128,
                "start_line": 381,
                "end_line": 492,
                "max_line": 492,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<Button\n                    primary\n                    size=\"large\"\n                    url=\"https://apps.shopify.com/upcart-cart-builder?source=aftersell-app-upcart-landing-page\"\n                    external\n                  >\n                    {t('Claim free trial') as string}\n                  </Button>\n                  <LegacyStack alignment=\"center\" spacing=\"extraTight\">\n                    <Reviews title={''} />\n                    <p style={{ fontSize: '18px', fontWeight: 'bolder', paddingBottom: '2px', marginLeft: '4px' }}>\n                      5.0 (500+ Reviews)\n                    </p>\n                  </LegacyStack>\n                  <br />\n                </LegacyStack>\n              </LegacyStack>\n\n              <div className={styles.mainImage}>\n                <img src=\"https://i.ytimg.com/vi_webp/P3xyRIPRh6A/maxresdefault.webp\" />\n              </div>\n            </div>\n          </Layout.Section>\n          <Layout.Section fullWidth>\n            <LegacyStack vertical spacing=\"extraLoose\">\n              <LegacyStack distribution=\"fillEvenly\">\n                <div className={styles.contentImage}>\n                  <img src={upCartBenefitsMap[0].postPurchaseUpsellImage} />\n                </div>\n                <LegacyStack vertical>\n                  <Heading>\n                    <h3 style={{ fontSize: '20px', fontWeight: 'bold', marginTop: '5px' }}>\n                      {upCartBenefitsMap[0].postPurchaseUpsell}\n                    </h3>\n                  </Heading>\n                  <LegacyStack vertical>\n                    <CheckmarkBenefit benefit=\"One Click Upsell Funnels\" />\n                    <CheckmarkBenefit benefit=\"Deep offer targeting with triggers\" />\n                    <CheckmarkBenefit benefit=\"AI recommended offers\" />\n                    <CheckmarkBenefit benefit=\"A/B test offers\" />\n                  </LegacyStack>\n                </LegacyStack>\n              </LegacyStack>\n              <LegacyStack distribution=\"fillEvenly\">\n                <LegacyStack vertical>\n                  <Heading>\n                    <h3 style={{ fontSize: '20px', fontWeight: 'bold', marginTop: '5px' }}>\n                      {upCartBenefitsMap[1].thankYouPage}\n                    </h3>\n                  </Heading>\n                  <LegacyStack vertical>\n                    <CheckmarkBenefit benefit=\"Product recommendations & storewide discount popup\" />\n                    <CheckmarkBenefit benefit=\"FAQs & reviews\" />\n                    <CheckmarkBenefit benefit=\"Images and videos\" />\n                  </LegacyStack>\n                </LegacyStack>\n                <div className={styles.contentImage}>\n                  <img src={upCartBenefitsMap[1].thankYouPageImage} />\n                </div>\n              </LegacyStack>\n              <LegacyStack distribution=",
                "filename": "web/src/@templates/AfterSellAd/AfterSellAd.tsx",
                "start_index": 2946,
                "end_index": 5780,
                "start_line": 79,
                "end_line": 139,
                "max_line": 163,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<LegacyCard title={t('Have questions?')}>\n          <LegacyCard.Section>\n            {t('Reach out to our support team who can answer questions about UpCart!')}\n          </LegacyCard.Section>\n          <LegacyCard.Section subdued>\n            <Button fullWidth onClick={() => showNewMessages()}>\n              {t('Contact Support')}\n            </Button>\n          </LegacyCard.Section>\n        </LegacyCard>\n        <LegacyCard title={t('Public API')}>\n          <LegacyCard.Section>\n            {' '}\n            {t(`Learn about all of the currently available variables and functions in the UpCart public API. These are\n            designed to be used by developers for custom integrations.`)}\n          </LegacyCard.Section>\n          <LegacyCard.Section subdued>\n            <Button\n              fullWidth\n              onClick={() =>\n                window.open(\n                  'https://aftersell.notion.site/UpCart-Public-API-7a0f6d75cb044871bdb6da5d99cfc755',\n                  '_blank',\n                )\n              }\n            >\n              {t(`Public API`)}\n            </Button>\n          </LegacyCard.Section>\n        </LegacyCard>\n        <LegacyCard title={t('Privacy Policy')}>\n          <LegacyCard.Section>{t(`UpCart's privacy policy.`)}</LegacyCard.Section>\n          <LegacyCard.Section subdued>\n            <Button fullWidth onClick={() => window.open('https://upcart.app/privacy', '_blank')}>\n              {t(`Privacy Policy`)}\n            </Button>\n          </LegacyCard.Section>\n        </LegacyCard>\n        <LegacyCard title={t('Acknowledgements')}>\n          <LegacyCard.Section>\n            {t(`Licenses for open source software included in UpCart's dashboard.`)}\n          </LegacyCard.Section>\n          <LegacyCard.Section subdued>\n            <Button fullWidth onClick={() => window.open('https://slide.upcart.app/licenses/web.txt', '_blank')}>\n              {t(`Acknowledgements`)}\n            </Button>\n          </LegacyCard.Section>\n        </LegacyCard>\n      </Layout.Section>\n    </Layout>\n  );\n};\n\nexport default TutorialsWithDefaultLayout;",
                "filename": "web/src/@templates/Tutorials/Tutorials.tsx",
                "start_index": 2974,
                "end_index": 5067,
                "start_line": 86,
                "end_line": 139,
                "max_line": 139,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "[\n  { selector: 'div#CartCount[data-cart-count-bubble] > span[data-cart-count]', content: { type: 'innerHtml' } }, // Debut theme\n  { selector: 'div#CartCount[site-header__cart-count] > span#item_count', content: { type: 'innerHtml' } }, // For theme ID 120599248957\n  { selector: \"a#cart-icon-bubble div[class~='cart-count-bubble'] > span\", content: { type: 'innerHtml' } }, // Dawn theme\n  { selector: \"#sticky-app-client div[data-cl='sticky-button'] > div:last-child\", content: { type: 'innerHtml' } }, // app\n  { selector: 'span[data-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'span.cart_count', content: { type: 'innerHtml' } },\n  { selector: 'span.counter.qty', content: { type: 'innerHtml' } },\n  { selector: '.current-cart-count > span.inner-count', content: { type: 'innerHtml' } },\n  { selector: \"[class*='cart-item-count']\", content: { type: 'innerHtml' } },\n  { selector: \"[class*='cart-link__count']\", content: { type: 'innerHtml' } },\n  { selector: '.cart-icon--basket2 > div', content: { type: 'innerHtml' } },\n  { selector: 'span.bigcounter', content: { type: 'innerHtml' } }, // bengalores.com\n  { selector: 'span.header__cart-count', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"].gt_show-cart > span.gt_cart-count', content: { type: 'innerHtml' } },\n  { selector: 'button#CartButton > span[x-text=\"$store.cart_count.count\"]', content: { type: 'innerHtml' } },\n  { selector: '#CartLink #CartCount', content: { type: 'innerHtml' } },\n  { selector: '.cart-count-bubble > span[data-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'div.header__cart-count > span[data-js-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"] div[data-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'span.cart-items-count', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"][aria-label=\"Cart\"].cart-icon--basket1 > div', content: { type: 'innerHtml' } },\n  { selector: 'cart-count.header__cart-count', content: { type: 'innerHtml' } },\n  { selector: '.Header__CartCount', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"] #CartCount', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"] .js-cart-count', content: { type: 'innerHtml' } },\n  {\n    selector: 'a[href*=\"/cart\"] span.site-header-cart--count',\n    content: { type: 'dataAttribute', attributeName: 'data-header-cart-count' },\n    onCountZero: ({ el }) => {\n      el.classList.remove('visible');\n    },\n    onCountNonZero: ({ el }) => {\n      el.classList.add('visible');\n    },\n  },\n  /**\n   * jodis-471.myshopify.com\n   * See Linear issue BEAM-828\n   */",
                "filename": "web/storefront/src/platform/online-store/cart/cart.ts",
                "start_index": 15097,
                "end_index": 17744,
                "start_line": 69,
                "end_line": 520,
                "max_line": 589,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const PARTNER_APPS: Omit<IHomePageApps, 'maxWidth'>[] = [\n  {\n    key: '1',\n    status: false,\n    description: 'The #1 Shopify reviews app to double your conversation, manage reviews, and more.',\n    title: 'Trustoo.io Product Reviews',\n    setupTime: '5 min setup time',\n    image: '/images/Trustoo Logo.png',\n    review: '',\n    url:\n      'https://apps.shopify.com/sealapps-product-review?from=BEAM&utm_campaign=crossPromote&utm_medium=inapp&utm_source=BEAM',\n  },\n  {\n    key: '2',\n    status: false,\n    description: `Make much more profits with the power of WideBundle's offers ! Boost your CR and AOV (+30%).`,\n    title: 'Wide Bundles \u2011 Quantity Breaks',\n    setupTime: '5 min setup time',\n    image: '/images/wide bundle.png',\n    review: '',\n    url: 'https://apps.shopify.com/widebundle?from=BEAM&utm_campaign=crossPromote&utm_medium=inapp&utm_source=BEAM',\n  },\n  {\n    key: '3',\n    status: false,\n    description: `Set up predetermined discounts and capture motivated shoppers' strong purchase intent, so you never again let pricing turn away a buyer.`,\n    title: '60 seconds',\n    setupTime: '5 min setup time',\n    image: '/images/60s-honey.png',\n    review: '',\n    url: 'https://apps.shopify.com/60seconds?from=BEAM&utm_campaign=crossPromote&utm_medium=inapp&utm_source=BEAM',\n  },\n  {\n    key: '4',\n    status: false,\n    description: `Unleash your advertising potential with Lebesgue. Make smarter data-driven decisions, and boost your profit and marketing ROI.`,\n    title: 'Lebesgue: Marketing & LTV',\n    setupTime: '5 min setup time',\n    image: '/images/lebesgue.png',\n    review: '',\n    url:\n      'https://apps.shopify.com/advertising-insights?from=BEAM&utm_campaign=crossPromote&utm_medium=inapp&utm_source=BEAM',\n  },\n];\n\nexport const INTERCOM_MESSAGES = {\n  customizing: 'Hi! I would like help customizing UpCart',\n  features: \"Hi! Please add me to the beta for UpCart's new features!\",\n  error: 'Hi! I have an error in the module',\n  expert: \"Hi! I'm looking for an expert to help design my UpCart!\",\n  sticky_plan: \"Hi! I'm looking for a sticky cart only plan!\",\n};\n\nexport const CREATE_RECURRING_CHARGE_VARIABLES = {\n  lineItems: [\n    {\n      plan: {\n        appRecurringPricingDetails: {\n          price: {\n            amount: 14.99,\n            currencyCode: 'USD',\n          },\n          interval: 'EVERY_30_DAYS',\n        },\n      },\n    },\n  ],\n  name: 'GROWTH',\n};\n\nexport c",
                "filename": "web/src/@constants/index.ts",
                "start_index": 2338,
                "end_index": 4755,
                "start_line": 89,
                "end_line": 310,
                "max_line": 457,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "rors: Array<UrlRedirectUserError>;\n};\n\n/** Represents an error that happens during execution of a redirect mutation. */\nexport type UrlRedirectUserError = DisplayableError & {\n  __typename?: 'UrlRedirectUserError';\n  /** The error code. */\n  code?: Maybe<UrlRedirectErrorCode>;\n  /** The path to the input field that caused the error. */\n  field?: Maybe<Array<Scalars['String']>>;\n  /** The error message. */\n  message: Scalars['String'];\n};\n\n/** Represents an error in the input of a mutation. */\nexport type UserError = DisplayableError & {\n  __typename?: 'UserError';\n  /** The path to the input field that caused the error. */\n  field?: Maybe<Array<Scalars['String']>>;\n  /** The error message. */\n  message: Scalars['String'];\n};\n\n/** Represents a credit card payment instrument. */\nexport type VaultCreditCard = {\n  __typename?: 'VaultCreditCard';\n  /** The billing address of the card. */\n  billingAddress?: Maybe<CustomerCreditCardBillingAddress>;\n  /** The brand for the card. */\n  brand: Scalars['String'];\n  /** Whether the card has been expired. */\n  expired: Scalars['Boolean'];\n  /** The expiry month of the card. */\n  expiryMonth: Scalars['Int'];\n  /** The expiry year of the card. */\n  expiryYear: Scalars['Int'];\n  /** The last four digits for the card. */\n  lastDigits: Scalars['String'];\n  /** The name of the card holder. */\n  name: Scalars['String'];\n};\n\n/** Represents a paypal billing agreement payment instrument. */\nexport type VaultPaypalBillingAgreement = {\n  __typename?: 'VaultPaypalBillingAgreement';\n  /** Whether the paypal billing agreement is inactive. */\n  inactive: Scalars['Boolean'];\n  /** The paypal account name. */\n  name: Scalars['String'];\n  /** The paypal account email address. */\n  paypalAccountEmail: Scalars['String'];\n};\n\n/**\n * Representation of 3d vectors and points. It can represent\n * either the coordinates of a point in space, a direction, or\n * size. Presented as an object with three floating-point values.\n *\n */\nexport type Vector3 = {\n  __typename?: 'Vector3';\n  /** The x coordinate of Vector3. */\n  x: Scalars['Float'];\n  /** The y coordinate of Vector3. */\n  y: Scalars['Float'];\n  /** The z coordinate of Vector3. */\n  z: Scalars['Float'];\n};\n\n/**\n * Represents a Shopify hosted video.\n *\n */\nexport type Video = File & Media & Node & {\n  __typename?: 'Video';\n  /** A word or phrase to share the nature or contents of a media. */\n  alt?: Maybe<Scalars['String']>;\n  /**\n   * The date and time ([ISO 8601 format](http://en.wikipedia.or",
                "filename": "web/server/modules/shopify/graphql/generated/index.ts",
                "start_index": 1719237,
                "end_index": 1721737,
                "start_line": 42964,
                "end_line": 43186,
                "max_line": 44153,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n  id: 7680954040579,\n  title: 'Placeholder Product',\n  handle: 'derby-tier-backpack',\n  description:\n    '\\u003cp\\u003e\\u003cem\\u003eThis is a demonstration store. You can purchase products like this from \\u003ca href=\"http://unitedbyblue.com/\" target=\"_blank\"\\u003eUnited By Blue\\u003c/a\\u003e.\\u003c/em\\u003e\\u003c/p\\u003e\\n\\u003cp\\u003eOur Derby backpack is built with downpour proof sustainable canvas complemented by leather trim and brass hardware. Features padded canvas shoulder straps adjustable for all -day comfort. Finished with a drawstring closure and snap buckles to keep your belongings safe and secure on any trail taken.\\u003c/p\\u003e\\n\\u003cul\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003e100% organic waxed 18 oz canvas\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003eFull grain genuine leather trim\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003eHeavy-duty brass hardware and YKK zippers\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003eLifetime\\u00a0Guarantee\\u003c/li\\u003e\\n\\u003c/ul\\u003e\\n\\u003cul class=\"tabs-content\"\\u003e\\u003c/ul\\u003e',\n  published_at: '2022-05-07T13:11:39-06:00',\n  created_at: '2022-05-07T13:11:41-06:00',\n  vendor: 'United By Blue',\n  type: 'Bags',\n  tags: [],\n  price: 11300,\n  price_min: 11300,\n  price_max: 11300,\n  available: true,\n  price_varies: false,\n  compare_at_price: 12600,\n  compare_at_price_min: 12600,\n  compare_at_price_max: 12600,\n  compare_at_price_varies: false,\n  variants: [\n    {\n      id: 42789609046275,\n      title: 'Nutmeg',\n      option1: 'Nutmeg',\n      option2: null,\n      option3: null,\n      sku: '4160',\n      requires_shipping: true,\n      taxable: true,\n      featured_image: null,\n      available: true,\n      name: 'Derby Tier Backpack - Nutmeg',\n      public_title: 'Nutmeg',\n      options: ['Nutmeg'],\n      price: 11300,\n      weight: 1361,\n      compare_at_price: 12600,\n      inventory_management: 'shopify',\n      barcode: '',\n      requires_selling_plan: false,\n      selling_plan_allocations: [],\n    },\n  ],\n  images: [\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_nutmeg_810294de-9152-4bf7-b5e0-b88fc94a1ff8.jpg?v=1651950701',\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_moss_drawstring.jpg?v=1651950701',\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/product_lifestyle-58.jpg?v=1651950701',\n  ],\n  featured_image:\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_nutmeg_810294de-9152-4bf7-b5e0-b88fc94a1ff8.jpg?v=1651950701',\n  options: [{ name: 'Color', position: 1, values: ['Nutmeg'] }],\n  url: NO_HREF, // prevent redirect in preview",
                "filename": "web/src/@templates/CartEditor/platform/preview/products/fake-products.ts",
                "start_index": 4669,
                "end_index": 7380,
                "start_line": 1,
                "end_line": 504,
                "max_line": 559,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const referencePrice = useMemo<number>(() => {\n    const originalPrice = item.original_line_price;\n    if (!showCompareAtPrice) {\n      return originalPrice;\n    }\n    // The compare-at price for subscription items is stored separately. For subscription items, we want\n    // to use the higher value of the two.\n    // See Linear BEAM-1448 for more details.\n    const perItemCompareAtPrice: number | null = (() => {\n      if (item.compare_at_price && item.selling_plan_allocation?.compare_at_price) {\n        return Math.max(item.compare_at_price, item.selling_plan_allocation.compare_at_price);\n      }\n      if (item.compare_at_price) {\n        return item.compare_at_price;\n      }\n      if (item.selling_plan_allocation?.compare_at_price) {\n        return item.selling_plan_allocation.compare_at_price;\n      }\n      return null;\n    })();\n    const compareAtPrice: number | null = perItemCompareAtPrice ? perItemCompareAtPrice * item.quantity : null;\n    const hasRealDiscount = originalPrice > item.final_line_price;\n    let strikethroughValue;\n    if (showBasePriceForDiscount && hasRealDiscount) {\n      strikethroughValue = originalPrice;\n    } else {\n      if (compareAtPrice) {\n        strikethroughValue = Math.max(compareAtPrice, originalPrice);\n      } else {\n        strikethroughValue = originalPrice;\n      }\n    }\n    return Math.max(strikethroughValue, item.final_line_price);\n  }, [showBasePriceForDiscount, showCompareAtPrice, item]);\n\n  const savingsAmount = referencePrice - item.final_line_price;\n\n  /**\n   * This field is used to allow us to conditionally hide the quantity selector for\n   * products that shouldn't be allowed to change quantities manually. For example,\n   * we don't want to allow customers to change the quantity of product customizations\n   * from apps.\n   */\n  const shouldShowQuantitySelector = useMemo(() => {\n    if (itemIsReward(item)) {\n      return false;\n    }\n    if (itemIsProductCustomizerAddon(item)) {\n      return false;\n    }\n    // By default we show the quantity selector\n    return true;\n  }, [item]);\n\n  const stringifiedItem: string = useMemo(() => {\n    try {\n      return JSON.stringify(item);\n    } catch (e) {\n      sentryCaptureException(e);\n      return '';\n    }\n  }, [item]);\n\n  const src = getSizedImageUrl({ src: item.image, height: 88 });\n\n  return (\n    <div\n      className={[\n        `${styles.ProductRow__product} upcart-product-item`,\n        isTrashLoading ? styles.ProductRow__product__LoadingTile : '',\n      ].join(' ')}\n      // IMPORTANT: do not change this ID. This is used by some integrations/workarounds.\n      id={item.key}\n      data-upcart-line-item={platform.publicApi.upcartShouldSerializeLineItemsToDOM ? stringifiedItem : undefined}\n    >\n      {isTrashLoading && <div className={styles.ProductRow__loader} />}\n      <div className=\"Stack Stack--distributionLeading Stack--spacingLoose\">\n        <div className=\"Stack__item\">",
                "filename": "web/storefront/src/components/common/SingleProductRow/SingleProductRow.tsx",
                "start_index": 2436,
                "end_index": 5359,
                "start_line": 57,
                "end_line": 198,
                "max_line": 257,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "export const REWARD_ITEM_PROPERTY_KEY = '__upcartRewardProduct';\nexport const UPSELLS_ATTRIBUTE_NOTE_KEY = 'defaultUpsells';\n\nexport const AJAX_UPCART_IDENTIFIER_QUERY_KEY = 'upcart';\nexport const AJAX_UPCART_IDENTIFIER_QUERY_VALUE = '1';\nexport const AJAX_CART_ADD_UPCART_OPENS_CART_QUERY_KEY = 'opens_cart';",
                "filename": "web/storefront/src/constants/index.ts",
                "start_index": 6157,
                "end_index": 6466,
                "start_line": 158,
                "end_line": 163,
                "max_line": 163,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<Field\n                    id=\"upcartEditorSettings.textBeforeReachingForCartTotal\"\n                    name={`upcartEditorSettings.rewardsTiers.tiers[${index}].textBeforeReachingForCartTotal`}\n                    helperText={'Use {AMOUNT} to show the remaining amount needed to reach reward'}\n                    label={t('Text before achieving')}\n                    component={EditorField}\n                  />\n                )}\n\n                {values.upcartEditorSettings.rewardsBasis === 'itemCount' && (\n                  <Field\n                    id=\"upcartEditorSettings.textBeforeReachingForItemCount\"\n                    name={`upcartEditorSettings.rewardsTiers.tiers[${index}].textBeforeReachingForItemCount`}\n                    label={t('Text before achieving')}\n                    helperText={'Use {COUNT} to show the remaining number of items needed to reach reward'}\n                    component={EditorField}\n                  />\n                )}\n                {tiers.length > 1 && (\n                  <div className={styles.TierSettings__removeTier}>\n                    <Button\n                      destructive\n                      outline\n                      fullWidth\n                      onClick={() => {\n                        let newtiers = [...tiers];\n                        newtiers.splice(index, 1);\n                        setFieldValue('upcartEditorSettings.rewardsTiers.tiers', newtiers);\n                        setFieldTouched('upcartEditorSettings.rewardsTiers.tiers', true);\n                      }}\n                    >\n                      Remove Tier {String(index + 1)}\n                    </Button>\n                  </div>\n                )}\n                {tiers.length < MAX_TIERS && (\n                  <Button\n                    fullWidth\n                    primary\n                    onClick={() => {\n                      let newtiers = [...tiers];\n\n                      // Insert new tier immediately after the current one\n                      newtiers.splice(index + 1, 0, {\n                        targetType: 'productsOrOrder',\n                        rewardDescription: 'Cool Product',\n                        minAmount: `${Number(tier.minAmount) + 15}`,\n                        itemCount: `${Number(tier.itemCount) + 2}`,\n                        textBeforeReachingForCartTotal: `You\u2019re <b>{AMOUNT}</b> away from product _____`,\n                        textBeforeReachingForItemCount: `You\u2019re <b>{COUNT}</b> products away from product _____`,\n                        products: [],\n                      });\n\n                      setFieldValue('upcartEditorSettings.rewardsTiers.tiers', newtiers);\n                      setFieldTouched('upcartEditorSettings.rewardsTiers.tiers', true);\n                    }}\n                  >\n                    Add New Rewards Tier\n                  </Button>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>",
                "filename": "web/src/@templates/CartEditor/RewardsModule/RewardSettingsModule.tsx",
                "start_index": 8330,
                "end_index": 11304,
                "start_line": 80,
                "end_line": 243,
                "max_line": 248,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "initial_doc_snippets": [
            {
                "code": "---\nid: 3vst4bcr\ntitle: Discount Codes Module\nfile_version: 1.1.3\napp_version: 1.18.31\n---\n\n# Required background information\n\n## Discount types\n\nThere are two types of discounts: **automatic discounts** and **discount codes**.\n\n- **Automatic discounts** are applied to a cart or checkout automatically when the discount criteria are met.\n\n- **Discount codes** must be manually typed in by the customer. They stay active until the customer either removes the code, enters a different conflicting discount code, or changes their cart/checkout so that the discount is not longer applicable.\n\nThis module is specifically for **discount codes**. We do not have to worry about **automatic discounts** because they will work in the cart by default and they do not require any user interaction.\n\n## Discount targets\n\nA discount can be used to reduce the cost of **product(s)**, **order**, or **shipping**.\n\n- **Product discounts** reduce the price of one or more products and are shown as a reduction on individual line items.\n\n- **Order discounts** reduce the price of the order as a whole and are shown as a reduction on the overal price.\n\n- **Shipping discounts** reduce the price of shipping.\n\n# Read and write discount codes\n\n## Read discount codes\n\nWe read discount codes using the `cart.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:78:24:26:`    const cart: Cart&lt;CartItemWithoutCompareAtPrice&gt; = await fetch(getShopifyRoutesRoot() + &#39;cart.js&#39;).then((res) =&gt;`\"/> Ajax API endpoint.\n\nAn applied discount code will be returned from the API as part of either the `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> or the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/>. The `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> are for order discounts and the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/> are for product discounts.\n\nThese discount applications will include both **automatic discounts** and **discount codes**. We can distinguish between these using the `type`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:460:1:1:`  type: &#39;discount_code&#39; | &#39;&#39;;`\"/> field of the `DiscountApplication`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:446:4:4:`export interface DiscountApplication {`\"/>.\n\n## Apply a discount code\n\n<br/>\n\nWe apply a discount code by making a request from the storefront to the route `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/>.\n\nThe `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/> route is intended by Shopify to be used for [shareable discount links](https://help.shopify.com/en/manual/discounts/managing-discount-codes#promote-a-discount-using-a-shareable-link). Normally a customer would navigate to the link directly in their browser and would be redirected to the storefront. We are using it in a non-standard way by making a background network request.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n23         await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);\n```\n\n<br/>\n\nAfter applying a discount code, we refetch the cart to check if the discount was successfully applied and to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/DiscountCodeModule/DiscountCodeModule.tsx\n\n```tsx\n23           await platform.discounts.attemptApplyDiscountCode({ discountCode: discountCodeToApply });\n24           const updatedCart = await refetchCart();\n25\n26           const discountApplications = getAllUniqueDiscountApplications(updatedCart);\n27           const isValid = discountApplications.some(\n28             (discountApplication) => discountApplication.title === discountCodeToApply,\n29           );\n```\n\n<br/>\n\n## Remove a discount code\n\n<br/>\n\nWe remove a discount code by applying a fake invalid discount code.\n\nThere is no native way to remove discount codes so this is a workaround.\n\nThis behaviour relies on the fact that there can only be one discount code applied in the cart. We are replacing the one allowed discount code with an invalid code.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n14       async removeDiscountCode(): Promise<void> {\n15         const FAKE_INVALID_DISCOUNT_CODE = '~!~!UPCART_REMOVE_DISCOUNT!~!~';\n16         await this.UNSAFE_POSSIBLE_NO_OP_applyDiscountCodeAndSetShopifyCookie({ discountCode: FAKE_INVALID_DISCOUNT_CODE });\n17       }\n```\n\n<br/>\n\nAfter removing a discount code, we refetch the cart to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/components/DiscountCodeBadge/DiscountCodeBadge.tsx\n\n```tsx\n18         await platform.discounts.removeDiscountCode();\n19         await refetchCart();\n```\n\n<br/>\n\n> \u26a0\ufe0f After we apply or remove a discount code, the `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> of discounted line items will change. If we did not refetch the cart then we would have an outdated `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> value which would cause errors if we tried to call `cart/update.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:191:17:21:`    return fetchQd(this.ajaxMutationCartQ, getShopifyRoutesRoot() + &#39;cart/update.js&#39;, {`\"/> or `cart/change.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:153:8:12:`      getShopifyRoutesRoot() + `cart/change.js?${query.toString()}`,`\"/>.\n\n# Limitations\n\n## **Multiple** discount codes are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n50                     Multiple discount codes are not supported.\n```\n\n<br/>\n\n### Why are multiple discount codes not supported?\n\nWe cannot apply multiple discount codes because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support multiple codes. This is the only way that we know of to apply a discount code from the storefront. We will have to wait for Shopify to add support for multiple codes or to find a different way to apply codes which does support multiple.\n\nIf a customer applies two discount codes back to back, the first discount code will be discarded and only use the most recently applied code will affect the cart.\n\n## Free shipping discounts are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n58                   Free shipping discounts are not supported.\n```\n\n<br/>\n\n### Why are free shipping discounts not supported?\n\nWe cannot apply free shipping discounts because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support them.\n\n## Shopify Plus stores using checkout.liquid are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n64                   Shopify Plus stores using checkout.liquid are not supported.\n```\n\n<br/>\n\n### Why are Shopify Plus stores using checkout.liquid not supported?\n\nHistorically, the Ajax API only included automatic discounts and did not include discount codes. Shopify changed this behaviour and started including discounts from discount codes in Ajax API responses. There are still some stores which do not include discount codes in Ajax API responses. The discount codes module does not work on these stores.\n\n### How can we tell if a store is eligible?\n\nThe Ajax API will include discount codes in responses only if the store is on Shopify's new checkout.\n\n<br/>\n\nWe can identify wether or not a store is on Shopify's new checkout by looking at the cart token. If the cart token is 32 characters long and only includes hex digits (0123456789abcdef) then the store is on Shopify's old checkout, otherwise it is on Shopify's new checkout and the Ajax API will include discount codes in responses.\n\nStores that are on Shopify's new checkout may have different token formats. The following are examples that we've seen:\n\n- c1-d3f024e3af037f40bfe1b016b5b76f05\n- Z2NwLXVzLWNlbnRyYWwxOjAxSEZFMjFIV1FZUFc0SlQ3Q00ySFFSSjgy\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart({ cart }: { cart: Cart<CartItem> }): boolean {\n6          if (!cart.token) return false;\n7          const isLegacyCartToken = cart.token.match(/^[0-9a-f]{32}$/) !== null;\n8          return !isLegacyCartToken;\n9        }\n```\n\n<br/>\n\n### What happens if a store is not eligible?\n\n<br/>\n\nIf a store is not eligible then the discount code module will not be shown.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/Cart.tsx\n\n```tsx\n499                      {platform.discounts.getStoreCanApplyDiscountCodesInCart({ cart }) &&\n500                        settings.upcartEditorSettings.discountCodeModule && (\n501                          <DiscountCodeModule platform={platform} refetchCart={refetchCart} />\n502                        )}\n```\n\n<br/>\n\nIn the preview we will show the discount code module even for stores that are not eligible. We do this because it would require a lot of work to check eligibility when not on the storefront.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/platform/preview/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart(args: { cart: Cart<CartItem> }): boolean {\n6          return true;\n7        }\n```\n\n<br/>\n\nThis file was generated by Swimm. [Click here to view it in the app](https://app.swimm.io/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr).",
                "filename": ".swm/discount-codes-module.3vst4bcr.sw.md",
                "start_index": 0,
                "end_index": 11446,
                "start_line": 1,
                "end_line": 231,
                "max_line": 231,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Specification: Subscription Upgrades\n\n## Editor\n\nThere should be a module in the editor with:\n\n- Name: \"Subscription Upgrades\"\n- Icon: Repeat Order\n- Default status: disabled\n- Settings:\n  - \"Prevent downgrades\"\n    - Help text: \"If enabled, customers will not be allowed to downgrade from a subscription to one-time purchase. Caution: this may increase cart abandonment.\"\n    - Type: checkbox\n    - Default: disabled\n\n## Cart\n\n> If the subscription upgrades module is disabled in the editor, the cart should skip all subscription upgrade functionality.\n>\n> The following cart specification is applicable only if the subscription upgrades module has been enabled in the editor.\n\n### Behaviour\n\nThe cart frontend for subscription upgrades should be isolated to an area below each line item. This area can include content, or can be omitted if there is nothing to show. If the area includes content, then the area should have:\n\n- Public CSS class: `.upcart-subscription-upgrade-section`\n- Styling: full-width of line item\n\nThe content of each subscription upgrade area should be independent of the content for the subscription areas for any other line items.\n\nThe content of the subscription upgrade area should be as follows:\n\nA. For **one-time purchase** line items:\n\n- If the item cannot be sold as a subscription, nothing should be shown.\n- If the item can be sold as a subscription:\n  - There should be a button with:\n    - Content: \"Upgrade to \\_\\_\\_\\_\", where \\_\\_\\_\\_ is the name of the first selling plan group for the item\n    - When clicked:\n      1. Show a loading spinner instead of text, and disable the button\n      2. Change the item to be a subscription with the first selling plan of the first selling plan group. The line item should have the property `__upcartSubscriptionUpgrade: \"true\"`\n    - Styling: full width of area, match to other buttons in cart\n    - Public CSS class: `.upcart-subscription-upgrade-button`\n\nB. For **subscription** line items:\n\n- There should be a dropdown with:\n  - Content: the name of the current selling plan\n  - Options:\n    - (OPTIONAL) A group with:\n      - Title: \"Full price\"\n      - Options:\n        - \"One-time purchase\"\n      - Condition: this group should be included if the \"Prevent downgrades\" setting is disabled AND the item does not _require_ a selling plan (i.e., it can be sold as a one-time purchase)\n    - A group for each possible selling plan group for the item with:\n      - Title: the name of the selling plan group\n      - Options: the names of the possible selling plans in the group for the item\n  - When selected:\n    1. Show a loading spinner overlayed on the dropdown and disable the dropdown\n    2. Change the selling plan of the item to the selected selling plan. If \"One-time only\" was selected, then remove the selling plan from the item to change it to a one-time purchase. The line item should have the property `__upcartSubscriptionEdit: \"true\"`\n  - Styling: full width of area, match to other dropdowns in cart\n  - Public CSS class: `.upcart-subscription-upgrade-dropdown`\n\nWhen the current purchase option for a line item changes, the content of the subscription upgrade area should be updated to match the new purchase option.\n\n### Edge Cases and Clarifications\n\n- The content of the subscription upgrade area does not depend on _how_ the purchase option was selected. For example, the subscription upgrade area content for an item that was added to the cart as a subscription should be the same as the content for an item that was upgraded from a one-time purchase to a subscription in-cart.\n- When selling plans are being loaded for a product, there should be no content in the subscription upgrade area. Before the selling plans are loaded, we can't fully decide what content to show so it's fine to show nothing.\n- When the selling plan of an item is changed, the quantity of the item should remain constant. If you don't provide a quantity to the AJAX API when changing a line item, then the quantity of the line item will be set to 1 which should be avoided.\n- Selling plans that do not apply to the selected variant for a line item should be ignored. It is possible to have selling plans that apply only to specific variants of a product. In cases where none of the selling plans from a selling plan group apply to the variant for the line item, the selling plan group should be ignored. An ignored group should not be listed in the dropdown (because it would be an empty section) and it should not be used for text of the upgrade button (because it would have no selling plan to select).",
                "filename": "docs/subscription-upgrades.md",
                "start_index": 0,
                "end_index": 4584,
                "start_line": 1,
                "end_line": 71,
                "max_line": 71,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Security Policy\n\n## Supported versions\n\n### New features\n\nNew features will only be added to the master branch and will not be made available in point releases.\n\n### Bug fixes\n\nOnly the latest release series will receive bug fixes. When enough bugs are fixed and its deemed worthy to release a new gem, this is the branch it happens from.\n\n### Security issues\n\nOnly the latest release series will receive patches and new versions in case of a security issue.\n\n### Severe security issues\n\nFor severe security issues we will provide new versions as above, and also the last major release series will receive patches and new versions. The classification of the security issue is judged by the core team.\n\n### Unsupported Release Series\n\nWhen a release series is no longer supported, it's your own responsibility to deal with bugs and security issues. If you are not comfortable maintaining your own versions, you should upgrade to a supported version.\n\n## Reporting a bug\n\nAll security bugs in shopify repositories should be reported to [our hackerone program](https://hackerone.com/shopify)\nShopify's whitehat program is our way to reward security researchers for finding serious security vulnerabilities in the In Scope properties listed at the bottom of this page, including our core application (all functionality associated with a Shopify store, particularly your-store.myshopify.com/admin) and certain ancillary applications.\n\n## Disclosure Policy\n\nWe look forward to working with all security researchers and strive to be respectful, always assume the best and treat others as peers. We expect the same in return from all participants. To achieve this, our team strives to:\n\n- Reply to all reports within one business day and triage within two business days (if applicable)\n- Be as transparent as possible, answering all inquires about our report decisions and adding hackers to duplicate HackerOne reports\n- Award bounties within a week of resolution (excluding extenuating circumstances)\n- Only close reports as N/A when the issue reported is included in Known Issues, Ineligible Vulnerabilities Types or lacks evidence of a vulnerability\n\n**The following rules must be followed in order for any rewards to be paid:**\n\n- You may only test against shops you have created which include your HackerOne YOURHANDLE @ wearehackerone.com registered email address.\n- You must not attempt to gain access to, or interact with, any shops other than those created by you.\n- The use of commercial scanners is prohibited (e.g., Nessus).\n- Rules for reporting must be followed.\n- Do not disclose any issues publicly before they have been resolved.\n- Shopify reserves the right to modify the rules for this program or deem any submissions invalid at any time. Shopify may cancel the whitehat program without notice at any time.\n- Contacting Shopify Support over chat, email or phone about your HackerOne report is not allowed. We may disqualify you from receiving a reward, or from participating in the program altogether.\n- You are not an employee of Shopify; employees should report bugs to the internal bug bounty program.\n- You hereby represent, warrant and covenant that any content you submit to Shopify is an original work of authorship and that you are legally entitled to grant the rights and privileges conveyed by these terms. You further represent, warrant and covenant that the consent of no other person or entity is or will be necessary for Shopify to use the submitted content.\n- By submitting content to Shopify, you irrevocably waive all moral rights which you may have in the content.\n- All content submitted by you to Shopify under this program is licensed under the MIT License.\n- You must report any discovered vulnerability to Shopify as soon as you have validated the vulnerability.\n- Failure to follow any of the foregoing rules will disqualify you from participating in this program.\n\n** Please see our [Hackerone Profile](https://hackerone.com/shopify) for full details\n\n## Receiving Security Updates\n\nTo recieve all general updates to vulnerabilities, please subscribe to our hackerone [Hacktivity](https://hackerone.com/shopify/hacktivity)",
                "filename": "SECURITY.md",
                "start_index": 0,
                "end_index": 4160,
                "start_line": 1,
                "end_line": 59,
                "max_line": 59,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>UpCart Loading...</title>\n    <script>\n      /*\n       * Constants\n       */\n      const INSTALL_SOURCE_QUERY_PARAM = 'via';\n      const COOKIE_LIFETIME_MS = 3 * 24 * 60 * 60 * 1000; // 3 days\n      const COOKIE_NAME = 'upcart_install_source';\n\n      /*\n       * 1. Get the ?via= query for the following steps\n       */\n      const installSource = encodeURIComponent(\n        new URLSearchParams(window.location.search).get(INSTALL_SOURCE_QUERY_PARAM),\n      );\n\n      /*\n       * 2. Set a cookie with the install source for 3 days so we can read it when they install the app\n       */\n      const cookieDomain = '.' + window.location.hostname;\n      const cookieExpiresDate = new Date();\n      cookieExpiresDate.setTime(cookieExpiresDate.getTime() + COOKIE_LIFETIME_MS);\n      const cookieExpires = cookieExpiresDate.toGMTString();\n      document.cookie = `${COOKIE_NAME}=${installSource}; expires=${cookieExpires}; domain=${cookieDomain}; path=/; SameSite=None; Secure`;\n\n      /*\n       * 3. Redirect to the app store, including the install source as a query param for App Store Google Analytics\n       */\n      window.location.replace(`https://apps.shopify.com/upcart-cart-builder?join-via=${installSource}`);\n    </script>\n  </head>\n  <body></body>\n</html>",
                "filename": "web/public/join.html",
                "start_index": 0,
                "end_index": 1304,
                "start_line": 1,
                "end_line": 36,
                "max_line": 36,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# UpCart 3.0\n\n## Setup\n\nView setup instructions on Notion: https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 133,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "MIT License\n\nCopyright (c) 2021 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
                "filename": "extensions/theme-app-extension/LICENSE.md",
                "start_index": 0,
                "end_index": 1063,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<html></html>",
                "filename": "web/storefront/public/index.html",
                "start_index": 0,
                "end_index": 13,
                "start_line": 1,
                "end_line": 1,
                "max_line": 1,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "## Dev Setup\n\nFollow the [instructions in this Notion document](https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7?pvs=4) to setup the development environment for the Chrome extension.",
                "filename": "chrome-extensions/cart-customization/README.md",
                "start_index": 0,
                "end_index": 208,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.\\\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can\u2019t go back!**\n\nIf you aren\u2019t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you\u2019re on your own.\n\nYou don\u2019t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn\u2019t feel obligated to use this feature. However we understand that this tool wouldn\u2019t be useful if you couldn\u2019t customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n\n### Code Splitting\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\n\n### Analyzing the Bundle Size\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\n\n### Making a Progressive Web App\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\n\n### Advanced Configuration\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\n\n### Deployment\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\n\n### `npm run build` fails to minify\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)",
                "filename": "web/storefront/README.md",
                "start_index": 0,
                "end_index": 3354,
                "start_line": 1,
                "end_line": 70,
                "max_line": 70,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# [[[ --- STAGE: BASE ENVIRONMENT SETUP --- ]]]\n# see https://github.com/moby/moby/issues/37345#issuecomment-400250849\nFROM node:18.16.1-alpine as base\n# Accept command line '--build-arg' arguments\nARG PORT=8081\nARG HOST\nARG SHOPIFY_API_KEY\nARG INTERCOM_APP_ID\nARG SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY\n\n# Copy command line args to env to use during build and for final image runtime\nENV PORT=${PORT} \\\n    HOST=${HOST} \\\n    SHOPIFY_API_KEY=${SHOPIFY_API_KEY} \\\n    INTERCOM_APP_ID=${INTERCOM_APP_ID}\n    # ^^^^^ WARNING ^^^^^ do not include trailing \"\\\" on the last line above, you will get a syntax error with a terrible error message\n    #\n    # SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY is intentionally not included here since it is only for building and shouldn't be available at runtime\n\n# [[[ --- STAGE: BUILD --- ]]]\nFROM base AS build\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nCOPY web/patches ./web/patches\nRUN yarn install --cwd web --frozen-lockfile --production=false\nCOPY . .\n# NOTE: we need Sentry API token to upload source maps to Sentry during build, see withSentryConfig in next.config.js\nRUN echo \"[auth]\\ntoken=${SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY}\" > ./web/.sentryclirc\nRUN yarn web:build\n\n# [[[ --- STAGE: LICENSES WEB --- ]]]\nFROM base AS licenses-web\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web > ./web/public/licenses/web.txt\n\n# [[[ --- STAGE: LICENSES STOREFRONT --- ]]]\nFROM base AS licenses-storefront\nWORKDIR /app\nCOPY web/storefront/package.json web/storefront/yarn.lock ./web/storefront/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web/storefront > ./web/public/licenses/storefront.txt\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM base\nWORKDIR /app\nCOPY --from=build /app .\nCOPY package.json ./package.json\nRUN yarn install --frozen-lockfile --production=true\nCOPY --from=licenses-web /app/web/public/licenses/web.txt ./web/public/licenses/web.txt\nCOPY --from=licenses-storefront /app/web/public/licenses/storefront.txt ./web/public/licenses/storefront.txt\nCMD [\"yarn\", \"web:start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2181,
                "start_line": 1,
                "end_line": 53,
                "max_line": 53,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "The starting point for this repository was created using the Shopify CLI, commit\nf5d560da33aafae0b552de72a90f1320d1023524. Some boilerplate code from the CLI\nremains and is licensed as follows:\n\"\"\"\nMIT License\n\nCopyright (c) 2018 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\"",
                "filename": "LICENSE.md",
                "start_index": 0,
                "end_index": 1265,
                "start_line": 1,
                "end_line": 26,
                "max_line": 26,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { Shop, ShopModel } from '../modules/shops/shops.model';\nimport { RequestWithShop } from '../types/express.types';\nimport Shopify from '@shopify/shopify-api';\n\nexport const getShopDocFromRequest = async (req: RequestWithShop): Promise<Shop> => {\n  if (req.shopDoc) {\n    return req.shopDoc;\n  }\n\n  const shop = Shopify.Utils.sanitizeShop(req.query.shop as string);\n  const shopDoc = await ShopModel.findOne({ domain: shop }).lean();\n  req.shopDoc = shopDoc;\n  return shopDoc;\n};",
                "filename": "web/server/helpers/getShopDocFromRequest.ts",
                "start_index": 0,
                "end_index": 485,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "intial_documentation_sources": {
            "shopify": {
                "collection": "shopify_documentation",
                "reason_for_relevance": "The issue involves a failed GET request to an API endpoint and problems with product title fetching and rendering, which may be related to Shopify's API or templating system."
            }
        },
        "external_documentation_snippets": {
            "external_shopify": [
                {
                    "code": "Deployment\n Distribution\n Billing\n App Store\n UX guidelines for discounts\n A great buyer-facing user experience (UX) for discounts is important to the success of app users. This guide explains important considerations for implementing discounts in user interfaces (UIs).\n User interface guidelines\n Apps should consider how discounted products appear in multiple places on the online store, such as product pages, collection pages, search results, featured product sections on the home page, and quick view modals on product cards. Surfacing potential savings in these areas can further encourage customers to purchase.\n Discounts information is displayed in the following components of the online store:\n Product forms\n Cart items\n Order details\n When building your discount types, first decide if your discount will apply to specific products in an order, to the order as a whole, or to the shipping for the order. If your discount could belong to multiple categories, then you should create separate discount types for each.\n Note\n The class of the discount type that you create is set as a static value in a .toml file when your discount script is uploaded. The class can\u2019t be changed later.\n Whether a discount is a product, order, or shipping discount determines what options users have for allowing it to combine with other discounts at checkout.\n Navigation\n The discount details page has a breadcrumb button (the arrow \u2190 next to the page title). The breadcrumb button must always go back to the page that the user came from. For example, when the details page is reached using the Discounts page of the Shopify admin, the breadcrumb button must return the user to the Discounts page.\n If you choose to link to your discount details page from somewhere else, such as a page in your app, then the breadcrumb button should return the user to that page.\n Discount page\n Use the provided template and React component library to build the details page (create/edit page) for your discount type.\n The discount details page has a number of standard cards:\n Method\n Minimum purchase requirements\n Customer eligibility\n Maximum uses\n Combinations\n Active dates\n Best practices\n Implement everything in the provided template, only removing elements when they don\u2019t make logical sense for your discount type. For example, it doesn\u2019t make sense for a Buy X Get Y discount to have the minimum purchase requirements card, because \u201cbuy x\u201d already defines the minimums. You still need to submit data for any required fields in the Shopify API, so submit a value that makes sense for your discount.\n The card immediately below the Method card typically contains the fields that will differ between discount types. Often this card\u2019s title is Value, which refers to the discount amount that the customer will get. You can also choose a title that makes sense for your discount type.\n As described in Shopify functions, store any custom data used by your discount type using metafields.\n Always provide validations for your discount type\u2019s custom fields that are stored as metafields. If users enter invalid data, then they\u2019ll get helpful feedback.\n Error validation\n You'll get errors back from bad data passed to API calls, but validating the data client-side before firing off a network request makes for a faster UI experience.\n If you choose to validate on the client, then take extra care with free-form entry, such as text fields. Run your validation check only after focus moves away from the field and there's at least one character in the field. This helps avoid marking the field with an error before users have committed a value.\n You might choose not to validate client-side in some cases, such as when validation on a given field takes longer than 1000 ms and validation performance can\u2019t be improved.\n If you get any validation errors, then display them on the specific fields that contain the invalid data, including a message explaining what went wrong and how to fix it. Polaris form components have an error property that you can use for this purpose.\n If there are multiple invalid fields, then provide an error banner at the top of the page, and focus the banner on submit. The banner should include a list of the fields with problems. Link each item in the banner to the corresponding field on the page, enabling the user to jump to that field.\n If there is only a single field with an error, then move focus to that field instead.\n Learn more about form validation.\n Responsive layouts\n Make any custom layout responsive, whether it\u2019s the fields in the Value card, or any other custom UI.\n Ensure that the layout is fluid down to 320 px wide.\n Ensure that key functionality remains available on a touchscreen device. Avoid conveying essential information using tooltips or hover states.\n Avoid truncating text whenever possible.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n User interface guidelines\n Navigation\n Discount page\n Error validation\n Responsive layouts\n Updates & News",
                    "filename": "docs/apps/selling-strategies/discounts/experience/ux-guidelines/content.txt",
                    "start_index": 0,
                    "end_index": 4995,
                    "start_line": 1,
                    "end_line": 55,
                    "max_line": 55,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Billing\n App Store\n Troubleshooting\n This guide introduces some common errors that you might encounter when building your POS UI extension, and provides some resolutions to help resolve unexpected errors.\n An API or a component doesn't work despite following the documentation\n Example\n You're attempting to use the ScannerAPI, but it doesn't work. You've done everything according to the documentation.\n Resolution\n The POS UI extensions documentation represents the latest version of our components and APIs. If you're using an older version of the POS UI extensions library, then some features mentioned in the documentation might not be available to you.\n Visit the changelog to make sure you're using the latest version of POS UI extensions. Additionally, if your app has multiple extensions, please ensure that all extensions have the same version of the POS UI extensions library installed. Failure to do so may cause unexpected behavior when loading extensions from the development server. This will be fixed in a future release of the CLI.\n Extension QR code does not work on Android\n Example 1\n 1 Unable to access \"...\"\n 2\n 3 It looks like you don't have access to this store. Contact the store administrator for access.\n Example 2\n 1 This site can't be reached\n 2\n 3 Check if there is a typo in com.shopify.pos.\n Resolution\n Android devices can have a restriction on how deep links are handled. To resolve this issue, you can use one of the following options:\n Connect the device to your computer. Use Android Studio to open your deep link by running the following command: adb shell am start \"com.shopify.pos://pos-ui-extensions?url=<EXTENSION_URL>\". Replace <EXTENSION_URL> with the URL that you want to test.\n Download and use a deep link opener app from Play Store.\n Could not resolve \"...\"\n Example\n 1 \u2718 [ERROR] Could not resolve \"react-dom\"\n 2\n 3\n    node_modules/react-redux/es/utils/reactBatchedUpdates.js:1:40:\n 4\n      1 \u2502 export { unstable_batchedUpdates } from 'react-dom';\n 5\n 6 You can mark the path \"react-dom\" as external to exclude it from the bundle, which will remove this error.\n Resolution\n This error is most likely from missing a dependency in package.json in the app root. Try re-installing your dependencies and running the app again.\n '...' cannot be used as a JSX component\n Example\n 1 'Tile' cannot be used as a JSX component.\n 2\n    Its element type 'ReactElement<any, any> | Component<ReactPropsFromRemoteComponentType<RemoteComponentType<\"Tile\", TileProps, true>>, any, any> | null' is not a valid JSX element.\n 3\n      Type 'Component<ReactPropsFromRemoteComponentType<RemoteComponentType<\"Tile\", TileProps, true>>, any, any>' is not assignable to type 'Element | ElementClass | null'.\n 4\n        Type 'Component<ReactPropsFromRemoteComponentType<RemoteComponentType<\"Tile\", TileProps, true>>, any, any>' is not assignable to type 'ElementClass'.\n 5\n          The types returned by 'render()' are incompatible between these types.\n 6\n            Type 'React.ReactNode' is not assignable to type 'import(\"/Users/heltisace/app-store-app/node_modules/@types/react-reconciler/node_modules/@types/react/index\").ReactNode'.\n 7\n              Type '{}' is not assignable to type 'ReactNode'.\n Resolution\n This issue commonly happens when Yarn is used for dependency management. The package's version was updated but npm conflicts with Yarn. In the root of your application run npm install to get it up to date as well. Restart your IDE if necessary.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n An API or a component doesn't work despite following the documentation\n Extension QR code does not work on Android\n Could not resolve \"...\"\n '...' cannot be used as a JSX component\n Updates & News",
                    "filename": "docs/apps/pos/ui-extensions/troubleshooting/content.txt",
                    "start_index": 0,
                    "end_index": 3730,
                    "start_line": 1,
                    "end_line": 60,
                    "max_line": 60,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product recommendations\n Media and images\n Overview\n Support product media\n Product media UX guidelines\n Theme Store\n Product media UX guidelines\n The following are the main user experience (UX), and user interface (UI), aspects to consider with product media:\n Badges and buttons\n 3D model viewers\n Video players\n Slideshows\n Badges and buttons\n Both video and 3D model media displays should have the following included in their display, with each associated element, respectively:\n A play or 3D icon badge on the media thumbnail\n A play or 3D icon button control on the featured media\n 3D model media displays should also include a View in your space button.\n For example:\n When adding these badges and buttons you should consider the following:\n The icons to use\n Their placement and sizing\n Their styling\n The 'View in your space' button\n When including the View in your space button, you should consider the following:\n If the button is being placed on top of the media display, then you need to ensure that video and 3D controls aren't obstructed.\n Only show the button for devices that support AR. Supporting devices will run iOS version 13 or higher, or Android version 9 or higher.\n If a product's media includes a 3D model, and that media should be displayed, then the button should be visible regardless of the currently displayed media type. Additionally, if the product has more than one 3D model, then the button should open the currently visible model, or the first model if none are currently visible.\n The button should include the 3D icon.\n The button should only be placed below the featured media. For example:\n Tip\n To learn more about how to create a View in your space button, refer to Support product media.\n Icons\n Click the button below to download an asset library that includes icons for video and 3D model displays. You should use the icons from this library, rather than create custom icons as they're industry standards that will help customers more easily identify the available interaction.\n Download product media assets\n The icons come in two different styles:\n Rounded\n Angular\n You should only use one style, and it should match your theme's style.\n Badge placement and sizing\n The placement, and sizing, of the display varies depending whether it's for a thumbnail badge, or a featured button control.\n Thumbnail badge\n Thumbnail badges should adhere to the following guidelines:\n They shouldn't occupy more than 1/9th of the thumbnail display, or 1/6th for landscape thumbnails, and shouldn't be smaller than 20px x 20px. For example:\n They can be aligned in any corner of the thumbnail, however should be uniformly aligned. For example:\n Featured button control\n Featured button controls should be a minimum of 60px x 60px, and maximum of 90px x 90px.\n Styling\n The styling of the badges and buttons should adhere to the following guidelines:\n You should maintain the whitespace around the badge and button icons, as well as their proportions. For example:\n The background of both badges, and buttons, can be modified to match your theme style. For example, a circle, rounded corners, etc. For example:\n You should use existing colour settings to style the badges and buttons. There should be a high contrast between the background and the icon, as well as the media and the background, so settings for \"Main background\", \"Heading\", or \"Text\" generally give the best results. For example:\n The opacity of the badge elements should vary depending on the element. Refer to Thumbnail badge opacity and Featured button control opacity to learn more.\n In addition to the above, the View in your space button should either have no background color, or a very neutral color, so that it doesn't compete with primary and secondary calls to action. For example:\n Thumbnail badge opacity\n The thumbnail badge elements should adhere to the following opacity guidelines:\n The icon opacity should be 60%.\n The badge background opacity should be 100%.\n The badge background should have a border that is at least 5% opacity of the icon's colour.\n For example:\n Featured button control opacity\n The featured badge elements should adhere to the following opacity guidelines:\n The icon opacity should be 100%.\n The icon should persist on hover to maintain visibility.\n The badge background opacity should be a minimum of 75%.\n The badge background should have a border that is at least 5% opacity of the icon's colour.\n For example:\n 3D model viewers\n There are the following aspects to consider with 3D model viewers:\n The general behavior\n Accessibility\n The display elements\n Focus order\n Accessibility\n You should consider the following accessibility guidelines:\n 3D model content should default to inactive on page load as it can be unexpected, overwhelming, and distracting when defaulted to active.\n 3D models should allow for panning with only the keyboard, in addition to mouse and swipe gestures.\n Add dedicated button controls, with appropriate labels, to control the model positioning.\n Ensure keyboard focus states are visible for sighted keyboard-only or voice dictation users.\n Refrain from shifting keyboard focus when interacting with a button control so customers can navigate away when they're ready.\n Allow for text descriptions of models for each stage view.\n Announce the current state of the model via ARIA live status element when button controls are interacted with.\n Test your implementation with a variety of assistive technologies. For example, keyboard alone, and multiple screen readers.\n Display elements\n 3D model viewers should have the following display elements:\n 3D model viewer controls\n 3D model viewer progress bar\n 3D model viewer controls\n These controls should follow the badge and button styling suggestions, however the icons can be set to a minimum of 55% opacity. For example:\n These controls should be placed in the bottom right corner of the media element, either with even, or no padding:\n You should keep visual consistency among all UI elements, so the corners of the control display shouldn't be rounded unless the icons and buttons in the theme are also rounded. For example:\n 3D model viewer progress bar\n The progress bar is to show the load progress of the model. Similar to the controls, the progress bar should following the badge and button styling practices, however it should have 100% opacity, and should be placed at the top of the media element.\n For example:\n Focus order\n In order to facilitate keyboard interaction, 3D model viewers should have a specific focus order on the related elements. There are two main states to consider:\n Inactive\n Active\n Inactive\n When the viewer is inactive, the focus order should be as follows:\n Viewer controls\n Active\n When the viewer is active, the focus order should be as follows:\n Viewer container\n Zoom in\n Zoom out\n Fullscreen\n Video players\n There are the following aspects to consider with video players:\n The general behavior\n Accessibility\n Styling and placement\n Accessibility\n Video content should default to paused on page load as it can be unexpected, overwhelming, and distracting when defaulted to playing.\n If a video plays on page load, it should be muted by default.\n Test your implementation with a variety of assistive technologies. For example, keyboard alone, and multiple screen readers.\n Styling and placement\n In addition to the badge and button styling suggestions, video players should adhere to the following:\n They should be placed at the bottom of the featured media, either with even, or no padding:\n If the theme uses custom focus states, then you should maintain consistency. Otherwise, the default browser focus state should be used.\n You should keep visual consistency among all UI elements, so the corners of the control display shouldn't be rounded unless the icons and buttons in the theme are also rounded. For example:\n General behavior\n Note\n The following uses the terms \"active\" and \"inactive\". In the context of videos, this would be equivalent to \"playing\" and \"paused\".\n In general, video players and 3D model viewers should be set to inactive while advancing through media galleries as videos and models that aren't visible shouldn't be active.\n If more than one media element is displaying at a time, then all media should be inactive by default, requiring the customer to initiate activity. If only one media element is visible at once, then you should adhere to the following:\n Desktop - The first media element on page load should be set to inactive, however as the media changes, the current media should automatically be set to active.\n Tablet/Mobile - All media elements should default to inactive, requiring the customer to initiate activity.\n Slideshows\n If your theme uses a slideshow media gallery, then you shouldn't rely solely on swipe gestures for navigation as video players and 3D model viewers can interfere. For example:\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Badges and buttons\n 3D model viewers\n Video players\n General behavior\n Slideshows\n Updates & News\n Developer changelog\n Partner blog",
                    "filename": "docs/themes/product-merchandising/media/media-ux/content.txt",
                    "start_index": 0,
                    "end_index": 9092,
                    "start_line": 1,
                    "end_line": 140,
                    "max_line": 140,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Discounts\n Subscriptions\n Overview\n Add subscriptions to your theme\n Subscription UX guidelines\n Pre-orders and Try Before You Buy\n Shop Pay Installments\n Accelerated checkout\n B2B\n Unit pricing\n Subscription UX guidelines\n A great customer-facing user experience (UX) for purchasing a subscription is important to the success of our merchants. This guide explains the key principles of subscription needs and component-level guidelines for implementing subscription user interfaces (UIs).\n User experience principles\n To provide a good experience when purchasing subscriptions and gain trust from customers, make sure to implement the following UX principles:\n Create a visible hierarchy: Customers should be able to clearly identify the savings of a subscription plan, the selling plan options, and the terms and conditions.\n Disclose information progressively and logically: Customers should have a sense of progression in subscription selection as their decisions clearly influence subsequent choices. Adapt the information shown in the customer flow to communicate subscriptions clearly and concisely.\n Provide a seamless integration: The subscriptions UI should be integrated into the theme\u2019s existing design system.\n Work with merchants' existing workflows: Shopify provides the tooling for apps to build subscription experiences. Subscription experiences can be accessed directly from the Shopify admin. This allows merchants to access your app from the surface areas they are familiar with.\n If a resource exists in Shopify, don't duplicate it in your app: Shopify-managed resources such as customers, discounts, and products should be managed in a single place to reduce complex workflows and duplication.\n User interface guidelines\n Before you integrate your subscription app into a theme, familiarize yourself with the UI guidelines and best practices that are associated with each component.\n Apps should consider how subscription products appear in multiple places on the online store, such as product pages, collection pages, search results, featured product sections on the home page, and quick view modals on product cards. Surfacing potential subscription savings and pricing in these areas can further encourage customers to subscribe.\n Subscription information is displayed in the following components of the online store:\n Product forms\n Cart items\n Order details\n The following sections include guidance for displaying prices, styling subscription UI components, and presenting multiple subscriptions. In each section, the relevant Liquid properties needed to create each component are also referenced.\n Product forms\n The product form allows a customer to select their subscription. This is where the merchant can provide clarity and more details for a product and its available variants. Product forms are used in product pages, featured product sections on home pages, and quick view modals on product cards.\n The subcomponents of a product form include the following:\n A. Price\n B. Selling plan selection\n C. Selling plan details\n D. Main call-to-action\n Price\n Customers should be able to clearly identify the price of a subscription.\n # UI element Liquid properties and information UI guidelines\n 1 Price selling_plan_allocation.price Reflect the price details from the selected subscription.\n 2 Compare at price selling_plan_allocation.compare_at_price\n 3 Per delivery price selling_plan_allocation.per_delivery_price\n \n Displays only when the value is different from price. This occurs when the selling plan is a prepaid subscription.\n 4 Unit price selling_plan_allocation.unit_price\n \n Unit price values may differ between sellingPlanAllocations. Unit measurement information is on the variant object, as it does not change based on sellingPlan.\n 5 Subscription badge selling_plan.recurring_deliveries\n \n The badge shown when the selling plan involves recurring deliveries (subscription). Provide a contextual subscription badge or label to help differentiate against a one-time subscription.\n \n To reduce the clutter on a product page, don't display a badge when the item can only be purchased as a subscription. Rely on other ways to express this detail.\n 6 Price adjustment selling_plan.price_adjustment\n \n The object includes information on whether the adjustment is price or percentage based. This is used instead of sale price. Consider adding \"subscription savings\" details to highlight the subscription's value. For example, \"Subscription - Save $3.00\" or \"Subscription - Save 10%\".\n \n For subscriptions with a pricing policy that changes over time, express the largest savings. For example, \"Save up to 30%\". For more information, refer to Communicating changes in price over time.\n Pricing patterns\n A subscription usually comes with savings to encourage customers to purchase products. Two common patterns for displaying a subscription's pricing information are a main price component and inline pricing. These patterns can be implemented at the same time in a design, but this can be a challenge in situations where you don't have control over the codebase for both the app and the theme.\n Tip\n The inline pricing pattern is useful for subscription apps that integrate into a third-party theme codebase.\n Regardless of your approach to displaying prices to customers, the following points should guide your implementation:\n The price of a subscription is clearly visible when a customer has selected a selling plan from a product form.\n For products with unit pricing, ensure that any change to the unit price from a subscription is displayed.\n If an item is a prepaid item, then display the price per delivery. This enables customers to better compare the price difference between one-time purchases and prepaid items.\n MAIN PRICE COMPONENT\n In this approach, there is a main price component on the page that's updated when a customer interacts with a selling plan selector and product variant selection.\n To help customers understand the price of products that they purchase, do the following:\n Clearly display the subscription item's price and any applicable savings compared to the price of a one-time purchase.\n Add a subscription badge to the component to help clarify that the savings are conditional to the purchase of a subscription.\n INLINE PRICING\n In this approach, pricing information is displayed inline or close to the selling plan selection. The price updates in response to changes in selling plan and product variant selection.\n This approach makes a strong association between the effects of choosing a selling plan and the price. The positioning of the price is also preferable for mobile shopping, where smaller screen sizes mean that the main price component and price updates might not be in view.\n This approach is useful for subscription apps that integrate into the codebase of third-party themes. Because the pricing information is contained within a selling plan selector that the app controls and injects, this approach can help to avoid conflicts between the app's and the theme's respective scripts.\n Selling plan selection\n Customers should be able to clearly identify their subscription options:\n # UI element Liquid properties and information UI guidelines\n 1 subscriptions label product.requires_selling_plan\n \n product.selling_plan_groups One-time subscriptions and selling plan groups are considered different subscriptions. Use the term subscriptions in your own designs.\n 2 One-time subscription product.requires_selling_plan\n \n If the property is false, then at least 1 variant can be purchased as a one-time purchase and the one-time subscription should be presented in the UI. Group behavior\n \n On the first page load, select the one-time subscription by default. When the customer interacts with the UI, consider collapsing the unselected group to make good usage of space. Disable the selling plan group selection when it isn't available for a given variant.\n \n Group layout\n \n Prioritize displaying subscriptions in a vertically stacked list to make them readable on all devices. When displayed side-by-side, the information can be crowded on smaller screens.\n \n Group style\n \n Consider displaying subscriptions as radio inputs instead of buttons. Buttons can easily compete with the product form\u2019s call-to-action (submit button).\n 3 Selling plan group name selling_plan_group.name\n \n Always make this value visible. For more information, refer to Selling plan group name.\n 4 Inline price selling_plan_allocation.per_delivery_price\n \n Using the per_delivery_price is a more relevant comparison between prepaid subscriptions and one-time purchases. Showing the price of selling plans inline makes it easier for customers to compare subscriptions.\n \n Show \"each\" next to the price for both one-time subscriptions and selling plan groups to maintain consistency and clarity among similar text information.\n \n For subscriptions with a pricing policy that changes over time, add \"from\" before the inline pricing to clearly communicate the lowest price of the selling plan group. For example, \"from $7.00\". For more information, refer to Communicating changes in price over time.\n 5 Selling plan option name selling_plan_option.name Contextualize the type of selling plan option.\n \n Displaying selling plan options\n \n Selling plan option values are often written in a way that assumes that the option name is also visible to the customer. For example:\n \n Name: \"Delivery every\"\n Option: \"Month\"\n Option: \"Week\"\n Never hide the option names. Certain site designs will hide form labels to make a page look clean, but this can result in the values being presented with no context.\n 6 Selling plan option value selling_plan_option.value\n \n For more information, refer to Display selling plan option values. Don't express exact prices in option values, such as \"Save $5 a week\", because the values won't be accurate if the currency changes.\n \n Expressing percentages is possible because they stay consistent even if the currency changes. For more information, refer to Considerations for currency switching and price rounding.\n subscriptions label\n Show the subscriptions label when the following conditions apply:\n A one-time purchase exists and there's at least one sellingPlanGroups.\n A one-time purchase isn't an option, but there are multiple sellingPlanGroups.\n Shopify doesn't show the subscriptions label when the following conditions apply:\n There are no selling plan groups.\n The product is subscription-only and there's only 1 selling plan group. In this case, the sellingPlanGroup\u2019s name remains in its position, but without the radio input.\n Subscription-only use case\n Keep the selling group name and the inline price within the selector container. This sustains a stronger relationship between subscription selection and per_delivery_price, and maintains a consistent approach across different use cases:\n Selling plan group name\n Selling plan names should make clear the benefit of signing up for a subscription. For example, \"Subscribe and save 10%\". This incentivizes customers to make a bigger commitment in comparison to one-time subscriptions.\n Because the Selling plan API allows for multiple selling plan groups on a product, selling plan group names are used to differentiate subscriptions.\n Display selling plan option values\n It's required to display all of the option values at a glance from a group. Consider adapting the component layout to optimize readability.\n Components should adapt to the number of options being shown. When there are many options to choose from, an appropriate component should be selected to enable customers to view all options easily. Where there is a small number of options, a different component may be used. When possible, apply the appropriate layout to all values within a selling plan group for consistency:\n 4 options or less: Show each option as a radio button to allow customers to view what\u2019s available.\n More than 4 options: Use a select dropdown to emphasize the customer's selection and hide other options within the collapsed dropdown.\n UI UPDATE ON VARIANT CHANGE\n A product\u2019s variants might not all support the same subscription options. As a customer changes their variant selection, the components should update to make clear which subscription options are available and unavailable.\n When a selected option within a selling plan group is unavailable, three events should happen:\n The unavailable options become unselected and require the customer to make a new selection to successfully submit the form.\n The unavailable options for the selected variant are disabled.\n The form submission button is enabled. Disabling the button removes the ability to display an error message and instead displays the product as unavailable, which is false. Let the customer click the button but prevent them from adding the product to the cart. Then, anchor and scroll back to the faulty UI area and display a message that describes why the process can't complete and what the customer needs to do to proceed.\n Selling plan details\n Display important subscription terms and selections to customers. The subscription summary confirms a customer's selections, shows any conditions, and helps build trust in the brand.\n # UI element API properties and information UI guidelines\n 1 Recurring price line selling_plan_allocation.price_adjustments\n \n selling_plan.price_adjustments \n \n The selling_plan contains information on how a plan affects product prices, while the selling_plan_allocation describes the price for the variant to which the selling plan is applied. Express the number of payment cycles at the current price, and communicate what the price will be in the future. For example, first payment $6.00, then $9.00.\n \n Include the word \"each\" to clarify when the number of independent recurring payment cycles is greater than 1. For example, first 3 payments $7.00 each, then $9.00.\n \n Use \"free\" when the value is $0.00. This mirrors natural speech and helps customers understand the element. For example, first payment free, then $9.00.\n 2 Selling plan description selling_plan.description\n \n Merchants might use this field for promotional text. For example, they might use it for marketing terms, a call-to-action, or preemptively answering questions about cancellation policies or refunds.\n \n For more information, refer to Subscription policy link. Don't express exact prices in option values, for example, \"Save $5 a week\". For more information, refer to Considerations for currency switching and price rounding.\n \n Consider including a link to the subscription policy in the description. Merchants might have a more detailed subscription policy that needs to be accessed by customers.\n \n For subscriptions with a pricing policy that changes over time, for example, \"First month free, then save 10% on renewals\", communicate any future price changes clearly on the product page. For more information, refer to Communicating changes in price over time.\n Communicating changes in price over time\n Selling plans can have multiple price policies, which allows for the price of a subscription item to change after a certain period. A common approach is to encourage purchases with a lower initial price, for example, \"Save $10 on the first 3 deliveries.\"\n If an initial price incentive is applied to a subscription, then explain the current payment and how payments will change in the future.\n It\u2019s important to be transparent. A lack of information can cause customer mistrust and might appear misleading.",
                    "filename": "docs/themes/pricing-payments/subscriptions/subscription-ux-guidelines/content.txt",
                    "start_index": 0,
                    "end_index": 15551,
                    "start_line": 1,
                    "end_line": 164,
                    "max_line": 225,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Discounts\n Subscriptions\n Pre-orders and Try Before You Buy\n Overview\n Add pre-orders and TBYB to your theme\n Pre-orders and TBYB UX guidelines\n Shop Pay Installments\n Accelerated checkout\n B2B\n Unit pricing\n Pre-orders and Try Before You Buy (TBYB) UX guidelines\n A great customer-facing user experience (UX) for pre-orders and TBYB is important for the success of our merchants because it enables them to offer customers a more flexible purchasing process.\n A pre-order or a TBYB is any transaction where the payment or fulfillment doesn't happen at the time of purchase.\n This guide explains the key principles and component-level guidelines for implementing pre-order and TBYB UIs. and TBYB user interfaces (UIs).\n User experience principles\n To provide a good experience with pre-order or TBYB options and gain trust from customers, make sure to implement the following UX principles:\n Be clear and up front about important information: Customers should be able to clearly identify the options and make a choice, such as try now, pay later.\n Provide clarity around money: Customers should be able to clearly identify how much they will pay at checkout, the total cost of the product, when they\u2019ll be charged a remaining balance amount (when applicable), and when their payment method will be charged.\n Offer as much clarity around delivery timelines as possible: When possible, provide exact dates or a range, if exact dates are unavailable, for when customers can expect to receive their products, or the duration of the trial period.\n Provide a seamless integration: The UI for options should be integrated into the theme\u2019s existing design system.\n Use clear language: Use language that customers can understand and that refers to the actual purchase terms. For example, use \"pre-order\", \"back-order\", and \"TBYB\".\n User interface guidelines\n Before you integrate your pre-order and TBYB options app into a theme, familiarize yourself with the UX guidelines and best practices that are associated with each component.\n Apps should consider that products with different ways of purchasing are displayed in the following places on the online store:\n Product pages\n Collection pages\n Search results\n Featured product sections on the home page\n Quick view modals on product cards\n When customers can see available ways of purchasing at relevant points in the shopping process, they're more likely to utilize them. Ensure that all relevant information is always included, such as the deposit amount and fulfillment date, estimate for pre-orders, or the trial period length for TBYB.\n Pre-order and TBYB information is displayed in the following components of the online store:\n Product forms\n Cart items\n Order details\n The following sections include guidance for displaying prices, styling UI components for pre-orders and TBYB, and presenting multiple purchasing options. In each section, the relevant Liquid properties that are required to create each component are also referenced.\n Product forms\n The product form enables a customer to select their pre-order or TBYB option. This form is where the merchant can provide clarity and more details for a product and its available variants. Product forms are used in product pages, featured product sections on home pages, and quick view modals on product cards.\n The subcomponents of a product form include the following:\n A. Price\n B. Selling plan selection\n C. Selling plan details\n D. Main call-to-action\n Example: Product form (pre-order)\n Example: Product form (TBYB)\n A. Price\n Customers should be able to clearly identify the full price of the product, and the type of purchasing option that the product is.\n Example: Price (pre-order)\n Product form: Price\n # UI element Liquid properties and information UI guidelines\n 1 Price price Reflect the price details from the selected pre-order.\n 2 Pre-order badge selling_plan_group.name\n \n Reflect the price details from the selected pre-order. Provide a contextual pre-order badge or label to help differentiate against a one-time pre-order. The badge or label will help customers quickly understand that this product can be bought as a pre-order.\n Pricing patterns\n Pre-orders and TBYB options don\u2019t usually come with savings to encourage customers to purchase products.\n Tip\n Pricing for pre-orders often requires a deposit. Don't use visual styling that suggests money saving pricing tactics, such as price strikethroughs, to represent the full price of a product in relation to the initial deposit. Instead, simply display the full price, and if the pre-order product requires a deposit, display the deposit price elsewhere on the page.\n Main price component\n The main price component should always display the total cost of an item. When a customer selects a selling plan or a product variant, the main price component should reflect their changes.\n To help customers understand what purchasing option they have selected, do the following:\n Clearly display the product's full price.\n Add the appropriate pre-order or TBYB badge to the component to help clarify to customers that they aren't buying a regular one-time product.\n Example: Main price component (pre-order)\n Example: Main price component (TBYB)\n B. Selling plan selection\n Customers should be able to clearly identify their pre-order or TBYB options.\n Example: Selling plan selection (pre-order)\n Example: Selling plan selection (TBYB)\n Selling plan selection\n # UI element Liquid properties and information UI guidelines\n 1 Purchase options product.selling_plan_groups One-time purchases and selling plan groups are considered different types of purchasing options. Use the term **Purchase options** in your own designs.\n 2 One-time purchase product.requires_selling_plan\n \n If the property is false, then at least one variant can be purchased as a one-time purchase, and the one-time purchase option should be presented in the UI. Group behavior\n \n On the first page load, select the one-time option by default. When the customer interacts with the UI, consider collapsing the unselected group to make good use of the space. Disable the selling plan group selection when it isn\u2019t available for a given variant.\n \n Group layout\n \n Prioritize displaying purchasing options in a vertically stacked list to make them readable on all devices. When displayed side-by-side, the information can be crowded on smaller screens.\n \n Group style\n \n Consider displaying purchasing options as radio inputs instead of buttons. Buttons can easily compete with the product form\u2019s call-to-action. For example, a submit button.\n 3 Selling plan group name selling_plan_group.name\n \n Always make this value visible. For more information, refer to selling_plan_group.name.\n 4 Selling plan option value selling_plan_option.value Don\u2019t express exact prices in option values, such as \u201c$50 deposit\u201d, because the values won\u2019t be accurate if the currency changes.\n \n Expressing percentages is possible because they stay consistent even if the currency changes. For more information refer to Considerations for currency switching and price rounding.\n Purchase option label\n Show the Purchase options label when the following conditions apply:\n A one-time purchase exists and there's at least one sellingPlanGroup object.\n A one-time purchase isn't available, but there are multiple sellingPlanGroup objects of different types.\n Shopify doesn't show the Purchase options label when the following conditions apply:\n There are no selling plan groups.\n The product can only be purchased with a selling plan and there's only one selling plan group. In this case, the sellingPlanGroup name remains in its position, but without the radio input.\n Selling plan group name\n Selling plan names should make clear the benefit of choosing that option. For example, \"Pre-order\".\n Because the SellingPlan object can be associated with multiple selling plan groups on a product, selling plan group names are used to differentiate purchase options.\n Display selling plan option values\n All the option values must be displayed at a glance from a group. Consider adapting the component layout to optimize readability.\n Components should adapt to the number of options being shown. When there are many options to choose from, an appropriate component should be selected to enable customers to view all options easily. When there are fewer options, a different component may be used. When possible, apply the appropriate layout to all values within a selling plan group for consistency:\n Four options or less: Show each option as a radio button to allow customers to view what\u2019s available.\n More than four options: Use a select dropdown to emphasize the customer's selection and hide other options within the collapsed dropdown.\n UI UPDATE ON VARIANT CHANGE\n A product\u2019s variants might not all support the same purchasing options. As a customer changes their variant selection, the components should update to make clear which options are available and unavailable.\n When a selected option within a selling plan group is unavailable, the following events should happen:\n The unavailable options are unselected, and the customer must make a new selection to successfully submit the form.\n The unavailable options for the selected variant are disabled.\n The form submission button is enabled. Disabling the button removes the ability to display an error message and instead displays the product as unavailable, which is false. Let the customer click the button but prevent them from adding the product to the cart. Then, anchor and scroll back to the faulty UI area and display a message that describes why the process can't complete and what the customer needs to do to proceed.\n C. Selling plan details\n Display important deferred pre-order and TBYB terms and selections to customers. The summary confirms a customer's selections, shows any conditions, and helps build trust in the brand.\n Example: Selling plan details (pre-order)\n Selling plan details\n # UI element Liquid properties and information UI guidelines\n 1 Selling plan description selling_plan.description Don't express exact prices in option values, for example, \"$100 deposit\". For more information, refer to Considerations for currency switching and price rounding.\n \n Consider including a link to the returns or billing policies in the description. Merchants might have more detailed policies that need to be accessed by customers.\n D. Main call-to-action\n Having a call-to-action (main button text) that reflects the purchasing option type helps customers differentiate between a pre-order or a TBYB and a one-time purchase, even if there's only one option available.\n Example: Shop has accelerated checkout (pre-order and TBYB)\n Example: Shop doesn\u2019t have accelerated checkout (pre-order and TBYB)\n Main call-to-action\n # UI element Liquid properties and information UI guidelines\n 1 Call-to-action On first page load, if the product requires a selling plan or one is selected, then switch the call-to-action string to something purchase option-specific that merchants can customize. Update the call-to-action label to the dynamic checkout button for a deferred purchase option, and keep the add to cart button as is.\n Cart items\n Each pre-order or TBYB option item displays the most important details to help customers understand their purchase.\n For pre-order items, make sure that the customer understands the fulfillment date and relevant payment information, such as a deposit amount and future payments.\n For TBYB items, customers should see the trial period length. The price should also match what's represented on the product page.\n A cart item includes the following subcomponents:\n Cart page\n Cart notification\n Cart page\n Customers tend to scan the cart page and review the information before proceeding to checkout, so it\u2019s important that the following elements are clearly represented.\n Example: Cart page (pre-order)\n Example: Cart page (TBYB)\n Cart page\n # UI element Liquid properties and information UI guidelines\n 1 Selling plan information line_item.selling_plan_allocation.selling_plan.name\n \n Use selling_plan.name in the cart line item. This same text is used at checkout. For more information, refer to Using the selling plan name. Because the selling plan name is meant to accurately summarize the deferred purchase option, don't list the individual selling plan option values alongside the selling plan name.\n 2 Price price Display the full price of the product so that the customer is reminded of the total cost of the item they\u2019re buying.\n 3 Price at checkout selling_plan.checkout_charge.value The price customers will pay at checkout.\n \n For pre-order items, this price usually represents the deposit amount.\n \n For TBYB items, the price will usually be $0 to indicate to customers that they won\u2019t need to pay anything at checkout.\n Cart notification\n The cart notification returns information about the item that was just added to the cart.\n Example: Cart notification (pre-order)\n Cart notification\n # UI element Liquid properties and information UI guidelines\n 1 Selling plan information line_item.selling_plan_allocation.selling_plan.name\n \n Use selling_plan.name in the cart line item. This same text is used at checkout. For more information, refer to Using the selling plan name. Because the selling plan name is meant to accurately summarize the deferred purchase option, don't list the individual selling plan option values alongside the selling plan name.\n 2 Price price Display the full price of the product so that the customer is reminded of the total cost of the item that they\u2019re buying.\n Using the selling plan name\n The selling_plan.name should be a succinct description of the selling plan that can be easily understood by customers. The text is displayed in multiple areas of the online store, such as cart line items, checkout, and past order details. The value is also displayed in the merchant\u2019s internal admin on order pages.\n Note\n The selling plan name shouldn't include any marketing text.\n Shopify doesn't control the value of the name, which means that merchants can enter any text value they want using an app.\n When creating selling plan names, implement the following recommended guidelines:\n State the type of deferred purchase option.\n Write the deposit amount and payment due date of the product in order for the customer to keep a reference of it throughout the purchase journey.\n Considerations for currency switching and price rounding\n Merchants can sell in multiple currencies on their online store.\n When a customer visits the online store, Shopify presents the currency that's determined appropriate for the customer. Online stores can offer a currency selector to customers to enable them to manually switch the currency. Shopify also offers a price rounding feature to merchants, which enables merchants to set custom rounding rules for converted prices.\n Note\n Any prices that are written in strings won't reflect currency switching or price rounding, and might be incorrect or misleading to customers.",
                    "filename": "docs/themes/pricing-payments/preorder-tbyb/preorder-tbyb-ux-guidelines/content.txt",
                    "start_index": 0,
                    "end_index": 15067,
                    "start_line": 1,
                    "end_line": 170,
                    "max_line": 200,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product recommendations\n Overview\n Related products\n Complementary products\n Media and images\n Theme Store\n Show related products on product pages\n Related products are products that are similar to a selected product. You can display potential substitutes to help customers discover other similar products they might like. These products should appear in a You might also like section on the product page.\n Adding the related products section to your product pages displays an automatically generated list of product recommendations.\n In this tutorial, you'll learn how to show related products in your theme.\n Resources\n To implement product recommendations, you'll use the following:\n The recommendations object\n The /{locale}/recommendations/products endpoint of the Product Recommendations API\n Recommendation logic\n The recommendation algorithm predicts the most relevant products based on the product that a customer is interacting with. The criteria that the algorithm uses depends on the merchant's online store. In general, it might take into account the following factors:\n Purchase history: Products that have historically been purchased together.\n Product description: Products with similar descriptions.\n Related collections: Products from collections that the current product is part of, excluding collections with handles all and frontpage.\n Recommendation algorithm criteria\n The criteria that's used depends on a merchant's online store, and the recommendation intent. The following outlines which criteria is used, and when:\n Criteria Application\n Purchase history\n and\n Product description Merchants with an English storefront.\n Purchase history only Merchants with a non-English storefront.\n Related collections All merchants when purchase history and product description recommendations aren't available.\n Tip\n To learn more about the recommendation logic limitations, refer to Limitations.\n The Shopify Search & Discovery app enables users to customize product recommendation and search results, which can impact results from storefront search and the Ajax Product Recommendations API. To learn about how these results can be impacted, visit the Shopify Help Center.\n Limitations\n The following list describes some limitations of the recommendation logic:\n You can't customize the recommendation algorithm to exclude specific products. However, you can choose which of the returned products to show with JavaScript.\n The recommendation algorithm doesn't use orders that have been imported from another store or ecommerce platform to generate product recommendations.\n Products that are out of stock or set to a price of 0, gift cards, and products in the visitor's cart aren't included in recommendations.\n UI guidelines\n The following best practices can help to make sure that you're displaying recommended products in a way that improves the customer experience:\n The recommendation algorithm associates up to ten products with each product, in order of relevance. For example, the first recommended product is more relevant than the tenth recommended product. For this reason, it's a good idea to limit your recommendations to four products for each product page to promote only the most relevant recommendations.\n Make sure that you load the proper image size for the product card.\n Because the recommendations are loaded asynchronously with JavaScript, you might want to add an empty state or not show the recommended products section at all. The placeholder is swapped with the actual recommended products after you load them.\n Use phrases such as \u201cYou might also like\u201d for the section header to explain to your customers why you're displaying the recommended products.\n Implementing product recommendations\n In this implementation, the section content builds the general display by looping through each product returned through the products attribute of the recommendations object. However, this object isn\u2019t populated when the section is initially rendered, so you need to use JavaScript to retrieve the populated section content through the section response of the Product Recommendations API.\n Example\n sections/product-recommendations.liquid\n 1 <div\n 2\n    class=\"product-recommendations\"\n 3\n    data-url=\"{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4&intent=related\"\n 4 >\n 5\n    {%- if recommendations.performed? and recommendations.products_count > 0 -%}\n 6\n      {% if recommendations.intent == 'related' %}\n 7\n        <h2>You may also like</h2>\n 8\n      {% elsif recommendations.intent == 'complementary' %}\n 9\n        <h2>Pair it with</h2>\n 10\n      {% endif %}\n 11\n 12\n      <ul>\n 13\n        {%- for product in recommendations.products -%}\n 14\n          <li class=\"product\">\n 15\n            <a href=\"{{ product.url }}\">\n 16\n              <img\n 17\n                class=\"product__img\"\n 18\n                src=\"{{ product.featured_image | image_url: width: 300, height: 300 }}\"\n 19\n                alt=\"{{ product.featured_image.alt }}\"\n 20\n              />\n 21\n 22\n              <p class=\"product__title\">{{ product.title }}</p>\n 23\n              <p class=\"product__price\">{{ product.price | money}}</p>\n 24\n            </a>\n 25\n          </li>\n 26\n        {%- endfor -%}\n 27\n      </ul>\n 28\n    {%- endif -%}\n 29 </div>\n 30\n 31 {% javascript %}\n 32\n    const handleIntersection = (entries, observer) => {\n 33\n      if (!entries[0].isIntersecting) return;\n 34\n 35\n      observer.unobserve(productRecommendationsSection);\n 36\n 37\n      const url = productRecommendationsSection.dataset.url;\n 38\n 39\n      fetch(url)\n 40\n        .then(response => response.text())\n 41\n        .then(text => {\n 42\n          const html = document.createElement('div');\n 43\n          html.innerHTML = text;\n 44\n          const recommendations = html.querySelector('.product-recommendations');\n 45\n 46\n          if (recommendations && recommendations.innerHTML.trim().length) {\n 47\n            productRecommendationsSection.innerHTML = recommendations.innerHTML;\n 48\n          }\n 49\n        })\n 50\n        .catch(e => {\n 51\n          console.error(e);\n 52\n        });\n 53\n    };\n 54\n 55\n    const productRecommendationsSection = document.querySelector('.product-recommendations');\n 56\n    const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});\n 57\n 58\n    observer.observe(productRecommendationsSection);\n 59 {% endjavascript %}\n 60\n 61 {% schema %}\n 62\n    {\n 63\n      \"name\": \"Product recommendations\",\n 64\n      \"settings\": []\n 65\n    }\n 66 {% endschema %}\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Resources\n Recommendation logic\n Limitations\n UI guidelines\n Implementing product recommendations\n Updates & News\n Developer changelog",
                    "filename": "docs/themes/product-merchandising/recommendations/related-products/content.txt",
                    "start_index": 0,
                    "end_index": 6760,
                    "start_line": 1,
                    "end_line": 170,
                    "max_line": 170,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Testing\n Overview\n Testing assets\n Testing checklist\n Review process\n Theme success\n Theme revenue share\n Testing your theme for the Shopify Theme Store\n Use this checklist to ensure that your theme meets the functional requirements for the Shopify Theme Store. The checklist doesn't comprehensively represent all of the requirements for the Theme Store, but it can help you to make sure that your theme addresses edge cases that the theme review team will test as a part of the review process.\n To run these tests, you need to populate your store with data, and configure some additional features. To download this data and learn learn about the additional configurations you need to make, refer to Testing assets.\n You should run these tests in both the theme editor and the storefront.\n 1. Home page\n Add the following sections to the home page. After you add all of the sections, verify that they work properly.\n Three slideshows\n Five featured products, three of which are the same product\n Three different featured collections\n One collection list\n Three image with text\n One newsletter\n One rich text\n One blog post\n Two video (if applicable)\n Add additional sections until the homepage has 25 sections\n 2. Header\n Run the following tests on your header. For each of these tests, verify the following:\n The store name or logo displays properly and is accessible\n Header icons or links display properly and are accessible\n The navigation functions properly, and navigation titles are fully visible\n Add logo fallback text:\n Long store name (30-40 characters, no spaces)\n Add a logo:\n Test different aspect ratios in portrait and landscape mode:\n 16:9\n 4:3\n 3:2\n 1:1\n Transparent background on PNG image\n Logo scaling\n Different positions and alignments (if applicable)\n Add navigation:\n Long navigation menu (10+ menu items)\n Single-level navigation\n Two-level nested navigation\n Three-level nested navigation\n Long level one menu item titles (30-60 characters)\n Long level two menu item titles (30-60 characters)\n Long level three menu item titles (30-60 characters)\n Mega menu (if applicable)\n 3. Footer\n Run the following tests on your footer. For each of these tests, verify that footer text, icons, images are fully visible and functional.\n Add five columns or blocks, or the maximum number of blocks\n Add multiple menus\n Add a long navigation menu (10+ menu items)\n Add menu items with long titles (30-60 characters)\n Add all social links\n If your footer has a newsletter form, then test the following:\n Input form text\n Submit the form\n Test error detection and handling\n Test the submission success message\n 4. Sections\n Test the following sections in your theme:\n Announcement bar\n Slideshow\n Featured product\n Featured collection\n Collection list\n Image with text\n Newsletter\n Rich text\n Blog posts\n Video\n Any sections unique to your theme\n Announcement bar\n Run the following tests on your announcement bar section. For each of these tests, verify the following:\n Text and icons are fully visible\n Any links function properly\n Link styling indicates that the text is clickable\n If the text input is plain text, then add 60-100 characters of text, or the maximum character limit\n If the text input is rich text, then add the following text:\n Text with a single line break\n Text with two line breaks\n Text with three line breaks\n A paragraph (40-50 words)\n Add links:\n An internal link\n An external link\n Link opens in the same window\n Link opens in a new window\n Slideshow\n Run the following tests on your slideshow section.\n Add three slideshow sections\n Add the maximum number of slides. If there's no limit, then add 10 slides.\n Test the following image sizes:\n 2048px for retina displays\n 1024px for standard widescreen displays\n Test the following aspect ratios using 72ppi, portrait, and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Add video (if applicable)\n Add text:\n A heading\n A subheading (60 characters)\n A description\n If the text input is a plain single line text, then add 60-100 characters of text\n If the text input is rich text, then add the following text:\n Text with a single line break (60-100 characters)\n Text with two line breaks\n Text with three line breaks\n A paragraph (40-50 words)\n Add links:\n An internal link\n An external link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Add button text:\n A single word label (30 characters, no spacing)\n A multiple word label (30 characters)\n Add button links:\n Internal link\n External link\n Link opens in the same window\n Link opens in a new window\n Test autoplay behavior:\n If multiple slideshows have autoplay enabled, then each slideshow autoplays as expected\n Slideshow controls work as expected when slideshow is on autoplay\n Featured product\n Run the following tests on your featured product section. For each of these tests, verify the following:\n Adding duplicate featured products doesn't break the section or the page\n Customers can add different featured products to the cart\n Add five featured product sections, three of which are the same product\n Select different variants for one of the duplicated products\n Add one of the duplicated products to the cart\n Perform tests from the product page checklist\n Featured collection\n Run the following tests on your featured collection section. For each of these tests, verify the following:\n All sections work as expected\n Adding multiple featured collections doesn't break the section or the page\n Add three featured collection sections, using collections of varying sizes\n Perform tests from the collection page checklist\n Collection list\n Run the following tests on your collection list section. For each of these tests, verify the following:\n Collection titles are visible\n Collections with no image display the first product in the collection, or the collection's title, in the image block\n Adding multiple collection list sections doesn't break the section or the page\n Add the maximum number of collections. If there's no limit, then add 10 collections.\n Add a collection with a long title\n Add a collection with a single word title (30 characters, no spacing)\n Add a collection with a multi-word title (30 characters)\n Add collections where the collection images have different aspect ratios, in portrait and landscape orientations\n 16:9\n 4:3\n 3:2\n 1:1\n Add one collection with no featured collection image\n Image with text\n Run the following tests on your image with text section. For each of these tests, verify the following:\n All text is completely visible\n Varying image qualities and ratios are supportedImages must support varying image qualities and ratios\n Adding multiple image with text sections doesn't break the section or the page\n Add three image with text sections\n Add text:\n A heading\n A subheading (60 characters)\n A description\n If the text input is a plain single line text, then add 60-100 characters of text\n If the text input is rich text, then add the following text:\n Text with a single line break (60-100 characters)\n Text with two line breaks\n Text with three line breaks\n A paragraph (40-50 words)\n Add links:\n An internal link\n An external link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Test the following image sizes:\n 2048px for retina displays\n 1024px for standard widescreen\n Test the following aspect ratios using 72ppi, portrait, and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Newsletter\n Run the following tests on your newsletter section. For each of these tests, verify the following:\n All text is completely visible\n The form outputs proper error and success messages\n Test the following parts of the newsletter form:\n Input form text\n Submit the form\n Test error detection and handling\n Test the submission success message\n Add a description:\n If the text input is a plain single line text, then add 60-100 characters of text\n If the text input is rich text, then add the following text:\n Text with a single line break (60-100 characters)\n Text with two line breaks\n Text with three line breaks\n A paragraph (40-50 words)\n Add links:\n An internal link\n An external link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Rich text\n Run the following tests on your rich text section. For each of these tests, verify that all of the text is visible.\n Add a heading\n Add a subheading (60 characters)\n Add a description\n Add multiple paragraphs (minimum 1000 characters)\n Add links:\n Internal link\n External link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Blog posts\n Run the following tests on your blog posts section. For each of these tests, verify the following:\n All text is visible\n The blog post grid supports varying image ratios\n Add blog posts with different image aspect ratios:\n 16:9\n 4:3\n 3:2\n 1:1\n Add a blog post with a long title\n Add a blog post with a single word title (30 characters, no spacing)\n Add a blog post with a multi-word title (30 characters)\n Video\n Add the following video types in a video section. For each of these tests, verify the following:\n Adding multiple video sections doesn't break section or the page\n Video controls are present and functional\n Add a YouTube video\n Add a Vimeo video\n Add an MP4 video (if applicable)\n Unique sections\n If your theme has any additional sections then you need to test them as well. Run the tests that apply to your section. Verify the following:\n Each section supports varying image qualities and ratios\n All text is visible\n Adding multiples of the same section doesn't break the section or the page\n Add 2-3 instances of the same section\n Add text:\n A heading\n A subheading (60 characters)\n A description\n If the text input is a plain single line text, then add 60-100 characters of text\n If the text input is rich text, then add the following text:\n Text with a single line break (60-100 characters)\n Text with two line breaks\n Text with three line breaks\n A paragraph (40-50 words)\n Add links:\n An internal link\n An external link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Test the following image sizes:\n 2048px for retina displays\n 1024px for standard widescreen\n Test the following aspect ratios using 72ppi, portrait, and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n 5. Pages\n Test the following pages or elements in your theme:\n Password page\n Collection list page\n Collection page\n Product page\n Blog page\n Blog post/article page\n Cart\n Search page\n Pages\n Page with a contact form\n Gift card page\n Password page\n Run the following tests on your password page. For each of these tests, verify the following:\n Customers are able to access the store with a password\n The store logo or name and the password message are fully visible\n Add logo fallback text:\n Long store name (30-40 characters, no spaces)\n Long store name with hyphens\n Add a logo:\n Test the following logo aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Transparent background on PNG image\n Logo scales appropriately\n Test the password form:\n Fill the email field\n Submit the form\n Test error detection and handling\n Test the submission success message\n Add a password message (500+ characters)\n Add different sized background images, if applicable:\n 2048px for retina displays\n 1024px for standard widescreen\n Test the following aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Collection list page\n Run the following tests on your collection list page. For each of these tests, verify the following:\n Multiple collection image ratios are supported\n A collection with no image displays the first product in that collection, or displays the collection's title in the image block\n Add a collection with a long title\n Add a collection with a single word title (30 characters, no spacing)\n Add a collection with a multi-word title (30 characters)\n Test the following aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Add a collection with no featured collection image\n Collection page\n Run the following tests on your collection page. For each of these tests, verify the following:\n All products in the collection are accessible\n The collection can be sorted and filtered\n Combining filter tags doesn't break the page\n Product information in the product grid is fully visible\n Test group filtering (if applicable)\n Add a single word tag (30 characters, no spacing)\n Add a long list of tags (20+ tags)\n Verify that only a limited number of products are displayed on initial load\n Test pagination (if applicable)\n Pagination truncates on a collection with five or more pages\n Test View more button (if applicable)\n Test infinite scrolling (if applicable)\n Add a product title:\n A single word title (30 characters, no spacing)\n A multi-word title (30-60 characters)\n Add a product vendor:\n A single word vendor (30 characters, no spacing)\n A multi-word vendor (30-60 characters)\n Test the way the grid responds to images of different aspect ratios, using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n If the collection page has an Add to cart button, verify that it's replaced or disabled when a sold out or unavailable variant is selected.\n Verify that the sold out message or badge is displayed when applicable.\n Product page\n Run the following tests on your product page, on each of the product configurations outlined.",
                    "filename": "docs/themes/store/test-theme/checklist/content.txt",
                    "start_index": 0,
                    "end_index": 13500,
                    "start_line": 1,
                    "end_line": 355,
                    "max_line": 565,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Deciding extension placement\n Localizing UI extensions\n Testing UI extensions\n UX guidelines\n Selling strategies\n App Store\n UX guidelines\n Customer accounts offer a secure and flexible way for customers to manage their information and orders. Accounts empower customers with greater control over post-purchase surfaces and create opportunities for merchants to drive more sales with features like offers, wishlists, product offers, and loyalty programs.\n All apps should follow the general guidance provided by the App Design Guidelines. This guide provides additional guidance for designing customer account UI extensions.\n Merchant-to-customer content\n When you write UI content for your customer account app, you\u2019re writing directly to a merchant\u2019s customers. The content that you write should represent the merchant, not your app, and should optimize the customer\u2019s online experience.\n Consult Polaris for more guidelines on voice, tone, and vocabulary to consider for merchant-to-customer content.\n Principles\n Enable self-service: Self-service options help customers resolve issues faster and reduce merchant support interactions.\n Design for consistency: Merchants can use different apps to enhance their customer account interface. Because your app operates alongside other apps, it's important to ensure a familiar user experience. Avoid introducing unfamiliar UX patterns, terms, or navigation paradigms that deviate from our guidelines. Aim to integrate your app seamlessly into the existing customer account experience.\n Personalize when possible: Customer account extensions benefit from authenticated access to customer data. Use this data to personalize the customer experience and create delightful moments. For example, offer complementary products, birthday discounts, or personalize content with the customer's name. Be creative, but respect privacy.\n Don't expose your brand to the customer: Enhance the merchant's brand subtly and effectively. At all times, aim to create a seamless and consistent experience that makes customers feel like they're interacting directly with the merchant.\n Build for scale: Design your app to support merchants of all sizes, from small startups to large enterprises. Ensure that your app effectively handles both low and high order volumes.\n Responsive design\n Design interfaces that adapt to different screen sizes. Your app should offer a good UX across mobile, tablet, and desktop devices. Test the extension on various screen sizes to ensure content adjusts appropriately for each device.\n Grid layouts\n Grid layouts enable responsive design for different screen sizes, and streamline development while enhancing the overall aesthetics of the customer experience. Grid layouts also ensure that elements are spaced, aligned, and positioned consistently.\n Customer account pages are made up of columns, gutters, and margins. The design is based on a 12-column grid.\n The following are the grid breakpoints per device type:\n Mobile: 375 dp breakpoint, six column grid, one column content\n Tablet: 750 dp breakpoint, six column grid, one column content\n Small laptop: 1000 dp breakpoint, six column grid, two column content\n When you design your page layout, you should generally space the content evenly across the grid columns. For example, in a three-column layout, each column of content would span four columns of the grid. However, to create a layout similar to the Order status page, the first column of content should span seven columns and the second should span five columns.\n Fulfillment statuses\n Conditional logic based on status\n Design your apps so that merchants have the flexibility to determine where an action displays.\n For example, for order actions that only become relevant once the customer has received the order, like requesting a return or writing a review, ideally customer's can\u2019t take action until the order is marked as delivered. However, when merchants don't provide a tracking number for a fulfilled order, it can be difficult for Shopify to know when the order has been delivered. In these instances, customer wouldn't have access to actions that depend on an order's delivered status. Be mindful of situations like this, and enable merchants to configure your app to suit their fulfillment processes.\n Content guidelines\n Status names\n Aim for one to three words.\n Use sentence case.\n Test different fulfillment scenarios\n We recommend testing your Order status page extensions across different fulfillment states. The following are some examples:\n Different delivery statuses, such as confirmed, on its way, and delivered.\n Partial fulfillments\n Multiple fulfillments\n Local pickup\n Gift cards\n Digital products\n Returns\n Payment statuses\n Depending on the payment status of an order, a payment card will display above the order summary. For example, when a customer has made a purchase with Net 90 payment terms, they have 90 days to submit payment. In this scenario, the payment card displays the amount due, the due date, and a Pay now button.\n Test different payment scenarios\n We recommend testing your Order status page extensions across different payment statuses. The following are some example statuses:\n Payment terms\n Partial payment\n Refund\n Paid\n User feedback and informational banners\n Error messages\n Error messages should help the customer understand what went wrong and how they can resolve the error.\n Create error messages using a Banner component with the alert or critical status prop.\n Don't use toasts for error messages. Since toasts disappear, customers lose access to the information that they need to move forward.\n Learn more about error handling.\n Informational banners\n Create informational banners using a Banner component with the info status prop.\n To build a more neutral banner, without the icons and colors that are associated with the different props, the following are some examples of components that you can use:\n Card: Customer account\n Heading: Heading 2\n Text: Default\n Button: Secondary\n These components adopt the merchant's branding by default, which helps your banner align with the overall look and feel of the merchant's shop.\n Next steps\n Figma UI kit\n Everything you need to start designing with customer account and checkout components.\n Figma: Account screens\n Explore all the customer account screens to design your extensions.\n Customer account components\n Learn about the components that you can use to build customer account UI extensions.\n Checkout components\n Learn about the checkout components that you can also use to build customer account UI extensions.\n Merchant-to-customer content guidelines\n Learn how to write UI content that represents merchants and optimizes the customer experience.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Merchant-to-customer content\n Principles\n Responsive design\n Grid layouts\n Fulfillment statuses\n Payment statuses\n User feedback and informational banners\n Next steps\n Updates & News",
                    "filename": "docs/apps/customer-accounts/best-practices/ux-guidelines/content.txt",
                    "start_index": 0,
                    "end_index": 6978,
                    "start_line": 1,
                    "end_line": 90,
                    "max_line": 90,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Ajax API\n Overview\n Reference\n Cart\n Product\n Product recommendations\n Predictive search\n Section Rendering API\n Customer Privacy API\n Storefront API\n Product Recommendations API reference\n The Product Recommendations API can be used to recommend related products for a given product. To learn more about how recommendations are made and the associated limitations, refer to Product recommendations.\n To learn how to show product recommendations in your theme, refer to Product recommendations.\n All Ajax API requests should use locale-aware URLs to give visitors a consistent experience.\n Note\n The Shopify Search & Discovery app enables users to customize product recommendation and search results, which can impact results from storefront search and the Ajax Product Recommendations API. To learn about how these results can be impacted, visit the Shopify Help Center.\n GET /{locale}/recommendations/products.json\n The following example request retrieves the recommended products for a specific product:\n 1 GET /{locale}/recommendations/products.json?product_id={product-id}&intent={intent}\n Query parameters\n Query parameter Required Description\n product_id Yes The unique product ID of the product that you want to show recommended products for.\n limit No\n Limits the number of results.\n The value can range from 1 to 10, and the default is 10.\n intent No\n The recommendation intent that is used to generate product recommendations. You can use intent to generate product recommendations on various pages across the online store, according to different strategies. Learn more about recommendation intents.\n The accepted values are related and complementary. The default value is related.\n Example request object\n 1 {\n 2\n    \"product_id\": \"1234567890123\",\n 3\n    \"limit\": 4,\n 4\n    \"intent\": \"related\"\n 5 }\n Example request using Fetch\n 1 fetch(window.Shopify.routes.root + \"recommendations/products.json?product_id=1234567890123&limit=4&intent=related\")\n 2\n    .then(response => response.json())\n 3\n    .then(({ products }) => {\n 4\n      if (products.length > 0) {\n 5\n        const firstRecommendedProduct = products[0];\n 6\n 7\n        alert(\n 8\n          `The title of the first recommended product is: ${firstRecommendedProduct.title}`\n 9\n        );\n 10\n      }\n 11\n    }\n 12 );\n Products response\n The following example is a response to a successful request to the /{locale}/recommendations/products.json endpoint:\n Example product response\n 1 {\n 2\n    \"intent\": \"related\",\n 3\n    \"products\": [\n 4\n      {\n 5\n        \"id\": 35,\n 6\n        \"title\": \"Gorgeous Silk Coat\",\n 7\n        \"handle\": \"gorgeous-silk-coat\",\n 8\n        \"description\": null,\n 9\n        \"published_at\": \"2019-02-26T11:34:58-05:00\",\n 10\n        \"created_at\": \"2019-02-26T11:34:58-05:00\",\n 11\n        \"vendor\": \"Marge Group\",\n 12\n        \"type\": \"Outdoors\",\n 13\n        \"tags\": [],\n 14\n        \"price\": 380000,\n 15\n        \"price_min\": 380000,\n 16\n        \"price_max\": 790000,\n 17\n        \"available\": true,\n 18\n        \"price_varies\": true,\n 19\n        \"compare_at_price\": null,\n 20\n        \"compare_at_price_min\": 0,\n 21\n        \"compare_at_price_max\": 0,\n 22\n        \"compare_at_price_varies\": false,\n 23\n        \"variants\": [\n 24\n          {\n 25\n            \"id\": 69,\n 26\n            \"title\": \"Small Aluminum Knife\",\n 27\n            \"option1\": \"Small Aluminum Knife\",\n 28\n            \"option2\": null,\n 29\n            \"option3\": null,\n 30\n            \"sku\": \"\",\n 31\n            \"requires_shipping\": true,\n 32\n            \"taxable\": true,\n 33\n            \"featured_image\": null,\n 34\n            \"available\": true,\n 35\n            \"name\": \"Gorgeous Silk Coat - Small Aluminum Knife\",\n 36\n            \"public_title\": \"Small Aluminum Knife\",\n 37\n            \"options\": [\n 38\n              \"Small Aluminum Knife\"\n 39\n            ],\n 40\n            \"price\": 790000,\n 41\n            \"weight\": 9500,\n 42\n            \"compare_at_price\": null,\n 43\n            \"inventory_management\": \"shopify\",\n 44\n            \"barcode\": null\n 45\n          },\n 46\n          {\n 47\n            \"id\": 70,\n 48\n            \"title\": \"Heavy Duty Bronze Shoes\",\n 49\n            \"option1\": \"Heavy Duty Bronze Shoes\",\n 50\n            \"option2\": null,\n 51\n            \"option3\": null,\n 52\n            \"sku\": \"\",\n 53\n            \"requires_shipping\": true,\n 54\n            \"taxable\": true,\n 55\n            \"featured_image\": null,\n 56\n            \"available\": true,\n 57\n            \"name\": \"Gorgeous Silk Coat - Heavy Duty Bronze Shoes\",\n 58\n            \"public_title\": \"Heavy Duty Bronze Shoes\",\n 59\n            \"options\": [\n 60\n              \"Heavy Duty Bronze Shoes\"\n 61\n            ],\n 62\n            \"price\": 380000,\n 63\n            \"weight\": 2200,\n 64\n            \"compare_at_price\": null,\n 65\n            \"inventory_management\": \"shopify\",\n 66\n            \"barcode\": null\n 67\n          }\n 68\n        ],\n 69\n        \"images\": [],\n 70\n        \"featured_image\": null,\n 71\n        \"options\": [\n 72\n          {\n 73\n            \"name\": \"Color or something\",\n 74\n            \"position\": 1,\n 75\n            \"values\": [\n 76\n              \"Small Aluminum Knife\",\n 77\n              \"Heavy Duty Bronze Shoes\"\n 78\n            ]\n 79\n          }\n 80\n        ],\n 81\n        \"url\": \"/products/gorgeous-silk-coat?pr_choice=default&pr_prod_strat=copurchase&pr_rec_pid=35&pr_ref_pid=17&pr_seq=alternating\"\n 82\n      },\n 83\n      {\n 84\n        \"id\": 13,\n 85\n        \"title\": \"Gorgeous Wooden Computer\",\n 86\n        \"handle\": \"gorgeous-wooden-computer\",\n 87\n        \"description\": null,\n 88\n        \"published_at\": \"2019-02-26T11:34:15-05:00\",\n 89\n        \"created_at\": \"2019-02-26T11:34:15-05:00\",\n 90\n        \"vendor\": \"Purdy Inc\",\n 91\n        \"type\": \"Garden\",\n 92\n        \"tags\": [],\n 93\n        \"price\": 930000,\n 94\n        \"price_min\": 930000,\n 95\n        \"price_max\": 1730000,\n 96\n        \"available\": true,\n 97\n        \"price_varies\": true,\n 98\n        \"compare_at_price\": null,\n 99\n        \"compare_at_price_min\": 0,\n 100\n        \"compare_at_price_max\": 0,\n 101\n        \"compare_at_price_varies\": false,\n 102\n        \"variants\": [\n 103\n          {\n 104\n            \"id\": 25,\n 105\n            \"title\": \"Mediocre Silk Bottle\",\n 106\n            \"option1\": \"Mediocre Silk Bottle\",\n 107\n            \"option2\": null,\n 108\n            \"option3\": null,\n 109\n            \"sku\": \"\",\n 110\n            \"requires_shipping\": true,\n 111\n            \"taxable\": true,\n 112\n            \"featured_image\": null,\n 113\n            \"available\": true,\n 114\n            \"name\": \"Gorgeous Wooden Computer - Mediocre Silk Bottle\",\n 115\n            \"public_title\": \"Mediocre Silk Bottle\",\n 116\n            \"options\": [\n 117\n              \"Mediocre Silk Bottle\"\n 118\n            ],\n 119\n            \"price\": 1730000,\n 120\n            \"weight\": 5700,\n 121\n            \"compare_at_price\": null,\n 122\n            \"inventory_management\": \"shopify\",\n 123\n            \"barcode\": null\n 124\n          },\n 125\n          {\n 126\n            \"id\": 26,\n 127\n            \"title\": \"Lightweight Paper Shirt\",\n 128\n            \"option1\": \"Lightweight Paper Shirt\",\n 129\n            \"option2\": null,\n 130\n            \"option3\": null,\n 131\n            \"sku\": \"\",\n 132\n            \"requires_shipping\": true,\n 133\n            \"taxable\": true,\n 134\n            \"featured_image\": null,\n 135\n            \"available\": true,\n 136\n            \"name\": \"Gorgeous Wooden Computer - Lightweight Paper Shirt\",\n 137\n            \"public_title\": \"Lightweight Paper Shirt\",\n 138\n            \"options\": [\n 139\n              \"Lightweight Paper Shirt\"\n 140\n            ],\n 141\n            \"price\": 930000,\n 142\n            \"weight\": 6600,\n 143\n            \"compare_at_price\": null,\n 144\n            \"inventory_management\": \"shopify\",\n 145\n            \"barcode\": null\n 146\n          }\n 147\n        ],\n 148\n        \"images\": [],\n 149\n        \"featured_image\": null,\n 150\n        \"options\": [\n 151\n          {\n 152\n            \"name\": \"Color or something\",\n 153\n            \"position\": 1,\n 154\n            \"values\": [\n 155\n              \"Mediocre Silk Bottle\",\n 156\n              \"Lightweight Paper Shirt\"\n 157\n            ]\n 158\n          }\n 159\n        ],\n 160\n        \"url\": \"/products/gorgeous-wooden-computer?pr_choice=default&pr_prod_strat=description&pr_rec_pid=13&pr_ref_pid=17&pr_seq=alternating\"\n 161\n      }\n 162\n    ]\n 163 }\n Error responses\n When a request to the /{locale}/recommendations/products.json endpoint is unsuccessful, one of the following error responses is returned:\n Invalid parameter\n Product not found\n Invalid parameter\n In the absence of a product_id parameter, the endpoint returns the following error:\n 1 {\n 2\n    \"status\": 422,\n 3\n    \"message\": \"Invalid parameter error\",\n 4\n    \"description\": \"A product_id value is missing\"\n 5 }\n If intent isn't one of related or complementary, then the endpoint returns the following error:\n 1 {\n 2\n    \"status\": 422,\n 3\n    \"message\": \"Invalid parameter error\",\n 4\n    \"description\": \"The intent parameter must be one of related, complementary\"\n 5 }\n Product not found\n If the product_id is for a product that doesn't exist, or that isn't published in the Online store channel, then the endpoint returns the following error:\n 1 {\n 2\n    \"status\": 404,\n 3\n    \"message\": \"Product not found\",\n 4\n    \"description\": \"No product with id <product_id> is published in the online store\"\n 5 }\n GET /{locale}/recommendations/products\n The following example request retrieves the HTML from a section rendered with product recommendations for a specific product.\n 1 GET /{locale}/recommendations/products?product_id={product-id}&section_id=product-recommendations\n Query parameters\n Query parameter Required Description\n product_id Yes The unique product ID of the product that you want to show recommended products for.\n limit No\n Limits the number of results.\n The value can range from 1 to 10, and the default is 10.\n section_id Yes The unique section ID of the section file that you want to render with product recommendations.\n intent No\n The recommendation intent that is used to generate product recommendations. You can use intent to generate product recommendations on various pages across the online store, according to different strategies. Learn more about recommendation intents.\n The following values are accepted: related, complementary. The default value is related.\n Example request object\n 1 {\n 2\n    \"product_id\": \"1234567890123\",\n 3\n    \"limit\": 4,\n 4\n    \"section_id\": \"product-recommendations\",\n 5\n    \"intent\": \"related\"\n 6 }\n Example request using Fetch\n 1 const productRecommendationsSection = document.querySelector('.product-recommendations');\n 2\n 3 fetch(window.Shopify.routes.root + \"recommendations/products?product_id=12345690123&limit=4&section_id=product-recommendations&intent=related\")\n 4\n   .then(response => response.text())\n 5\n   .then((text) => {\n 6\n      const html = document.createElement('div');\n 7\n      html.innerHTML = text;\n 8\n      const recommendations = html.querySelector('.product-recommendations');\n 9\n 10\n      if (recommendations && recommendations.innerHTML.trim().length) {\n 11\n        productRecommendationsSection.innerHTML = recommendations.innerHTML;\n 12\n      }\n 13\n   });\n Section response\n The response to a successful request to the /{locale}/recommendations/products endpoint.\n The section response contains the HTML of the provided section rendered with the recommendations object containing the recommended products for the specified product.\n For example, the following section would generate the following section response:\n Example section\n 1 {%- if recommendations.performed?",
                    "filename": "docs/api/ajax/reference/product-recommendations/content.txt",
                    "start_index": 0,
                    "end_index": 11568,
                    "start_line": 1,
                    "end_line": 472,
                    "max_line": 555,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Migrating to Online Store 2.0\n Troubleshooting\n Theme Store\n Troubleshooting theme errors\n Below are some errors that you might encounter while working on your theme. Click the link for details.\n Parameter Missing or Invalid: Required parameter missing or invalid\n Description can't be larger than 64 kilobytes\n Browser address bar warnings, inconsistent or missing elements\n Was this page helpful?\n YesNo",
                    "filename": "docs/themes/troubleshooting/content.txt",
                    "start_index": 0,
                    "end_index": 405,
                    "start_line": 1,
                    "end_line": 10,
                    "max_line": 10,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                }
            ]
        },
        "mmr_code_snippets_initial": [
            {
                "code": "{\n                    title: t('Add Rewards'),\n                    badge: editorData.rewardsModule\n                      ? {\n                          children: t('Completed'),\n                          status: t('success'),\n                        }\n                      : undefined,\n                    description: t('Add a rewards module to offer urge customers to shop more. Create a free shipping bar, offer a free gift, or other rewards.'), // prettier-ignore\n                    action: {\n                      content: t('Add Rewards'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=rewards`);\n                      },\n                    },\n                  },\n                  {\n                    title: t('Confirm UpCart Compatibility'),\n                    description: t(\"Although UpCart uses standard Shopify technologies, not all apps do. Ensure any other apps you're using function as expected.\"), // prettier-ignore\n                  },\n                  // {\n                  //   title: t('Sell more with AfterSell \ud83d\udcb8'),\n                  //   description: t(\"AfterSell enables checkout and post-purchase upsells. It's a great way to increase your AOV and sell more. Learn more about AfterSell and get a free trial.\"), // prettier-ignore\n                  //   action: {\n                  //     content: t('Boost my Sales'),\n                  //     onAction: () => {\n                  //       navigate(ROUTE_OBJECTS.AFTERSELL_AD.url);\n                  //     },\n                  //   },\n                  // },\n                ]}",
                "filename": "web/src/@templates/Home/Home.tsx",
                "start_index": 7463,
                "end_index": 9094,
                "start_line": 1,
                "end_line": 233,
                "max_line": 260,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "rors: Array<UrlRedirectUserError>;\n};\n\n/** Represents an error that happens during execution of a redirect mutation. */\nexport type UrlRedirectUserError = DisplayableError & {\n  __typename?: 'UrlRedirectUserError';\n  /** The error code. */\n  code?: Maybe<UrlRedirectErrorCode>;\n  /** The path to the input field that caused the error. */\n  field?: Maybe<Array<Scalars['String']>>;\n  /** The error message. */\n  message: Scalars['String'];\n};\n\n/** Represents an error in the input of a mutation. */\nexport type UserError = DisplayableError & {\n  __typename?: 'UserError';\n  /** The path to the input field that caused the error. */\n  field?: Maybe<Array<Scalars['String']>>;\n  /** The error message. */\n  message: Scalars['String'];\n};\n\n/** Represents a credit card payment instrument. */\nexport type VaultCreditCard = {\n  __typename?: 'VaultCreditCard';\n  /** The billing address of the card. */\n  billingAddress?: Maybe<CustomerCreditCardBillingAddress>;\n  /** The brand for the card. */\n  brand: Scalars['String'];\n  /** Whether the card has been expired. */\n  expired: Scalars['Boolean'];\n  /** The expiry month of the card. */\n  expiryMonth: Scalars['Int'];\n  /** The expiry year of the card. */\n  expiryYear: Scalars['Int'];\n  /** The last four digits for the card. */\n  lastDigits: Scalars['String'];\n  /** The name of the card holder. */\n  name: Scalars['String'];\n};\n\n/** Represents a paypal billing agreement payment instrument. */\nexport type VaultPaypalBillingAgreement = {\n  __typename?: 'VaultPaypalBillingAgreement';\n  /** Whether the paypal billing agreement is inactive. */\n  inactive: Scalars['Boolean'];\n  /** The paypal account name. */\n  name: Scalars['String'];\n  /** The paypal account email address. */\n  paypalAccountEmail: Scalars['String'];\n};\n\n/**\n * Representation of 3d vectors and points. It can represent\n * either the coordinates of a point in space, a direction, or\n * size. Presented as an object with three floating-point values.\n *\n */\nexport type Vector3 = {\n  __typename?: 'Vector3';\n  /** The x coordinate of Vector3. */\n  x: Scalars['Float'];\n  /** The y coordinate of Vector3. */\n  y: Scalars['Float'];\n  /** The z coordinate of Vector3. */\n  z: Scalars['Float'];\n};\n\n/**\n * Represents a Shopify hosted video.\n *\n */\nexport type Video = File & Media & Node & {\n  __typename?: 'Video';\n  /** A word or phrase to share the nature or contents of a media. */\n  alt?: Maybe<Scalars['String']>;\n  /**\n   * The date and time ([ISO 8601 format](http://en.wikipedia.or",
                "filename": "web/server/modules/shopify/graphql/generated/index.ts",
                "start_index": 1719237,
                "end_index": 1721737,
                "start_line": 42964,
                "end_line": 43186,
                "max_line": 44153,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "N_METHOD_MUST_BE_ACROSS_FOR_GIVEN_TARGET_SELECTION',\n  /** The discount must apply on either one-time purchase or subscription items, or both. */\n  AppliesOnNothing = 'APPLIES_ON_NOTHING',\n  /** The input value is blank. */\n  Blank = 'BLANK',\n  /** Invalid BOGO target selection. */\n  BogoInvalidTargetSelection = 'BOGO_INVALID_TARGET_SELECTION',\n  /** Invalid BOGO target type. */\n  BogoInvalidTargetType = 'BOGO_INVALID_TARGET_TYPE',\n  /** Invalid BOGO value type. */\n  BogoInvalidValueType = 'BOGO_INVALID_VALUE_TYPE',\n  /** Can't use both prerequisite customers and saved search. */\n  BothCustomerAndSavedSearchPrerequisitesSelected = 'BOTH_CUSTOMER_AND_SAVED_SEARCH_PREREQUISITES_SELECTED',\n  /** Can't have both prerequisite customers and prerequisite segments. */\n  BothCustomerAndSegmentPrerequisitesSelected = 'BOTH_CUSTOMER_AND_SEGMENT_PREREQUISITES_SELECTED',\n  /** Can't have both saved searches and segments prerequisites. */\n  BothSavedSearchAndSegmentPrerequisitesSelected = 'BOTH_SAVED_SEARCH_AND_SEGMENT_PREREQUISITES_SELECTED',\n  /** Can't entitle collections in combination with product variants or products. */\n  CannotEntitleCollectionsWithProductsOrVariants = 'CANNOT_ENTITLE_COLLECTIONS_WITH_PRODUCTS_OR_VARIANTS',\n  /** Can't use collections as a prequisite in combination with product variants or products. */\n  CannotPrerequisiteCollectionWithProductOrVariants = 'CANNOT_PREREQUISITE_COLLECTION_WITH_PRODUCT_OR_VARIANTS',\n  /** The customer prerequisites exceeded the maximum number. */\n  CustomerPrerequisitesExceededMax = 'CUSTOMER_PREREQUISITES_EXCEEDED_MAX',\n  /** Invalid customer prerequisites selection. */\n  CustomerPrerequisitesInvalidSelection = 'CUSTOMER_PREREQUISITES_INVALID_SELECTION',\n  /** Customer prerequisites are missing. */\n  CustomerPrerequisitesMissing = 'CUSTOMER_PREREQUISITES_MISSING',\n  /** A duplicate customer prerequisite ID exists. */\n  CustomerPrerequisiteDuplicate = 'CUSTOMER_PREREQUISITE_DUPLICATE',\n  /** A duplicate customer saved search exists. */\n  CustomerSavedSearchDuplicate = 'CUSTOMER_SAVED_SEARCH_DUPLICATE',\n  /** The customer saved search exceeded the maximum number. */\n  CustomerSavedSearchExceededMax = 'CUSTOMER_SAVED_SEARCH_EXCEEDED_MAX',\n  /** Invalid customer saved search. */\n  CustomerSavedSearchInvalid = 'CUSTOMER_SAVED_SEARCH_INVALID',\n  /** The customer segment prerequisites exceeded the maximum number. */\n  CustomerSegmentExceededMax = 'CUSTOMER_SEGMENT_EXCEEDED_MAX',\n  /** The customer segment prerequisite ID is invalid. */\n  CustomerSegmentInvalid = 'CUSTOMER_SEGMENT_INVALID',\n  /** A duplicate customer segment prerequisite ID exists. */\n  CustomerSegmentPrerequisiteDuplicate = 'CUSTOMER_SEGMENT_PREREQUISITE_DUPLICATE',\n  /** A duplicate discount code exists. */\n  DiscountCodeDuplicate = 'DISCOUNT_CODE_DUPLICATE',\n  /** The discount end date must be after the start date. */\n  EndDateBeforeStartDate = 'END_DATE_BEFORE_START_DATE',\n  /** The input value should be e",
                "filename": "web/server/modules/shopify/graphql/generated/index.ts",
                "start_index": 1142931,
                "end_index": 1145895,
                "start_line": 28850,
                "end_line": 36887,
                "max_line": 44153,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n  id: 7680954040579,\n  title: 'Placeholder Product',\n  handle: 'derby-tier-backpack',\n  description:\n    '\\u003cp\\u003e\\u003cem\\u003eThis is a demonstration store. You can purchase products like this from \\u003ca href=\"http://unitedbyblue.com/\" target=\"_blank\"\\u003eUnited By Blue\\u003c/a\\u003e.\\u003c/em\\u003e\\u003c/p\\u003e\\n\\u003cp\\u003eOur Derby backpack is built with downpour proof sustainable canvas complemented by leather trim and brass hardware. Features padded canvas shoulder straps adjustable for all -day comfort. Finished with a drawstring closure and snap buckles to keep your belongings safe and secure on any trail taken.\\u003c/p\\u003e\\n\\u003cul\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003e100% organic waxed 18 oz canvas\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003eFull grain genuine leather trim\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003eHeavy-duty brass hardware and YKK zippers\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003eLifetime\\u00a0Guarantee\\u003c/li\\u003e\\n\\u003c/ul\\u003e\\n\\u003cul class=\"tabs-content\"\\u003e\\u003c/ul\\u003e',\n  published_at: '2022-05-07T13:11:39-06:00',\n  created_at: '2022-05-07T13:11:41-06:00',\n  vendor: 'United By Blue',\n  type: 'Bags',\n  tags: [],\n  price: 11300,\n  price_min: 11300,\n  price_max: 11300,\n  available: true,\n  price_varies: false,\n  compare_at_price: 12600,\n  compare_at_price_min: 12600,\n  compare_at_price_max: 12600,\n  compare_at_price_varies: false,\n  variants: [\n    {\n      id: 42789609046275,\n      title: 'Nutmeg',\n      option1: 'Nutmeg',\n      option2: null,\n      option3: null,\n      sku: '4160',\n      requires_shipping: true,\n      taxable: true,\n      featured_image: null,\n      available: true,\n      name: 'Derby Tier Backpack - Nutmeg',\n      public_title: 'Nutmeg',\n      options: ['Nutmeg'],\n      price: 11300,\n      weight: 1361,\n      compare_at_price: 12600,\n      inventory_management: 'shopify',\n      barcode: '',\n      requires_selling_plan: false,\n      selling_plan_allocations: [],\n    },\n  ],\n  images: [\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_nutmeg_810294de-9152-4bf7-b5e0-b88fc94a1ff8.jpg?v=1651950701',\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_moss_drawstring.jpg?v=1651950701',\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/product_lifestyle-58.jpg?v=1651950701',\n  ],\n  featured_image:\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_nutmeg_810294de-9152-4bf7-b5e0-b88fc94a1ff8.jpg?v=1651950701',\n  options: [{ name: 'Color', position: 1, values: ['Nutmeg'] }],\n  url: NO_HREF, // prevent redirect in preview",
                "filename": "web/src/@templates/CartEditor/platform/preview/products/fake-products.ts",
                "start_index": 4669,
                "end_index": 7380,
                "start_line": 1,
                "end_line": 504,
                "max_line": 559,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "sortedTiers.forEach((tier, index) => {\n      //Only the 'discountProduct' reward type has product(s)\n      if (tier.targetType === 'discountProduct' && tier.products) {\n        if (index <= currentTier) {\n          //Products to be added\n\n          tier.products.forEach((product, productIndex) => {\n            //Check if the product is in the cart, if it isn't we need to add it\n            let cartIndex = cart.items.findIndex(\n              (item) =>\n                item.properties &&\n                item.properties.__upcartTier === index &&\n                item.properties.__upcartProductTier === productIndex,\n            );\n\n            //Check the \"lock\" to see if the product has already been added, in the process of being added or failed to add\n            let productAddedLock = sessionStorageEngine.get(`upcartTier${index}_${productIndex}AddedToCart`, true);\n\n            if (cartIndex === -1 && !productAddedLock) {\n              //Item was not found in the cart & the lock is available\n\n              //Get the variantId\n              let variantId = product?.variants?.edges?.[0]?.node?.id;\n              variantId = variantId?.split('/')[4];\n\n              itemsToAdd.push({\n                variantId: Number(variantId),\n                quantity: 1,\n                properties: {\n                  [REWARD_ITEM_PROPERTY_KEY]: variantId,\n                  __upcartTier: index,\n                  __upcartProductTier: productIndex,\n                } as UpcartRewardsCartProperties,\n              });\n            }\n          });\n        } else {\n          //Products to be removed\n          //Find all items in the cart, matching the Tier, and mark them for removal\n          let products = cart.items.filter((item) => item.properties && item.properties.__upcartTier === index);\n\n          products.forEach((product) => {\n            itemsToRemove.push({\n              key: product.key,\n              lineIdxFrom1: product.lineIdxFrom1,\n              newQuantity: (product?.quantity || 1) - 1,\n              properties: {\n                [REWARD_ITEM_PROPERTY_KEY]: product.variant_id.toString(),\n                __upcartTier: index,\n                __upcartProductTier: product?.properties?.__upcartProductTier,\n              } as UpcartRewardsCartProperties,\n            });\n          });\n\n          tier.products.forEach((product, productIndex) => {\n            //Check if the product is in the cart\n            let cartIndex = cart.items.findIndex(\n              (item) =>\n                item.properties &&\n                item.properties.__upcartTier === index &&\n                item.properties.__upcartProductTier === productIndex,\n            );\n\n            //If the user removed a product from the cart, we need to remove the lock\n            if (cartIndex === -1) {\n              sessionStorageEngine.unset([`upcartTier${index}_${productIndex}AddedToCart`]);\n            }\n          });\n        }\n      }\n    });\n\n    //\"Acquire\" the locks",
                "filename": "web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx",
                "start_index": 9879,
                "end_index": 12845,
                "start_line": 269,
                "end_line": 341,
                "max_line": 492,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "[\n  { selector: 'div#CartCount[data-cart-count-bubble] > span[data-cart-count]', content: { type: 'innerHtml' } }, // Debut theme\n  { selector: 'div#CartCount[site-header__cart-count] > span#item_count', content: { type: 'innerHtml' } }, // For theme ID 120599248957\n  { selector: \"a#cart-icon-bubble div[class~='cart-count-bubble'] > span\", content: { type: 'innerHtml' } }, // Dawn theme\n  { selector: \"#sticky-app-client div[data-cl='sticky-button'] > div:last-child\", content: { type: 'innerHtml' } }, // app\n  { selector: 'span[data-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'span.cart_count', content: { type: 'innerHtml' } },\n  { selector: 'span.counter.qty', content: { type: 'innerHtml' } },\n  { selector: '.current-cart-count > span.inner-count', content: { type: 'innerHtml' } },\n  { selector: \"[class*='cart-item-count']\", content: { type: 'innerHtml' } },\n  { selector: \"[class*='cart-link__count']\", content: { type: 'innerHtml' } },\n  { selector: '.cart-icon--basket2 > div', content: { type: 'innerHtml' } },\n  { selector: 'span.bigcounter', content: { type: 'innerHtml' } }, // bengalores.com\n  { selector: 'span.header__cart-count', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"].gt_show-cart > span.gt_cart-count', content: { type: 'innerHtml' } },\n  { selector: 'button#CartButton > span[x-text=\"$store.cart_count.count\"]', content: { type: 'innerHtml' } },\n  { selector: '#CartLink #CartCount', content: { type: 'innerHtml' } },\n  { selector: '.cart-count-bubble > span[data-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'div.header__cart-count > span[data-js-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"] div[data-cart-count]', content: { type: 'innerHtml' } },\n  { selector: 'span.cart-items-count', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"][aria-label=\"Cart\"].cart-icon--basket1 > div', content: { type: 'innerHtml' } },\n  { selector: 'cart-count.header__cart-count', content: { type: 'innerHtml' } },\n  { selector: '.Header__CartCount', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"] #CartCount', content: { type: 'innerHtml' } },\n  { selector: 'a[href*=\"/cart\"] .js-cart-count', content: { type: 'innerHtml' } },\n  {\n    selector: 'a[href*=\"/cart\"] span.site-header-cart--count',\n    content: { type: 'dataAttribute', attributeName: 'data-header-cart-count' },\n    onCountZero: ({ el }) => {\n      el.classList.remove('visible');\n    },\n    onCountNonZero: ({ el }) => {\n      el.classList.add('visible');\n    },\n  },\n  /**\n   * jodis-471.myshopify.com\n   * See Linear issue BEAM-828\n   */",
                "filename": "web/storefront/src/platform/online-store/cart/cart.ts",
                "start_index": 15097,
                "end_index": 17744,
                "start_line": 69,
                "end_line": 520,
                "max_line": 589,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const referencePrice = useMemo<number>(() => {\n    const originalPrice = item.original_line_price;\n    if (!showCompareAtPrice) {\n      return originalPrice;\n    }\n    // The compare-at price for subscription items is stored separately. For subscription items, we want\n    // to use the higher value of the two.\n    // See Linear BEAM-1448 for more details.\n    const perItemCompareAtPrice: number | null = (() => {\n      if (item.compare_at_price && item.selling_plan_allocation?.compare_at_price) {\n        return Math.max(item.compare_at_price, item.selling_plan_allocation.compare_at_price);\n      }\n      if (item.compare_at_price) {\n        return item.compare_at_price;\n      }\n      if (item.selling_plan_allocation?.compare_at_price) {\n        return item.selling_plan_allocation.compare_at_price;\n      }\n      return null;\n    })();\n    const compareAtPrice: number | null = perItemCompareAtPrice ? perItemCompareAtPrice * item.quantity : null;\n    const hasRealDiscount = originalPrice > item.final_line_price;\n    let strikethroughValue;\n    if (showBasePriceForDiscount && hasRealDiscount) {\n      strikethroughValue = originalPrice;\n    } else {\n      if (compareAtPrice) {\n        strikethroughValue = Math.max(compareAtPrice, originalPrice);\n      } else {\n        strikethroughValue = originalPrice;\n      }\n    }\n    return Math.max(strikethroughValue, item.final_line_price);\n  }, [showBasePriceForDiscount, showCompareAtPrice, item]);\n\n  const savingsAmount = referencePrice - item.final_line_price;\n\n  /**\n   * This field is used to allow us to conditionally hide the quantity selector for\n   * products that shouldn't be allowed to change quantities manually. For example,\n   * we don't want to allow customers to change the quantity of product customizations\n   * from apps.\n   */\n  const shouldShowQuantitySelector = useMemo(() => {\n    if (itemIsReward(item)) {\n      return false;\n    }\n    if (itemIsProductCustomizerAddon(item)) {\n      return false;\n    }\n    // By default we show the quantity selector\n    return true;\n  }, [item]);\n\n  const stringifiedItem: string = useMemo(() => {\n    try {\n      return JSON.stringify(item);\n    } catch (e) {\n      sentryCaptureException(e);\n      return '';\n    }\n  }, [item]);\n\n  const src = getSizedImageUrl({ src: item.image, height: 88 });\n\n  return (\n    <div\n      className={[\n        `${styles.ProductRow__product} upcart-product-item`,\n        isTrashLoading ? styles.ProductRow__product__LoadingTile : '',\n      ].join(' ')}\n      // IMPORTANT: do not change this ID. This is used by some integrations/workarounds.\n      id={item.key}\n      data-upcart-line-item={platform.publicApi.upcartShouldSerializeLineItemsToDOM ? stringifiedItem : undefined}\n    >\n      {isTrashLoading && <div className={styles.ProductRow__loader} />}\n      <div className=\"Stack Stack--distributionLeading Stack--spacingLoose\">\n        <div className=\"Stack__item\">",
                "filename": "web/storefront/src/components/common/SingleProductRow/SingleProductRow.tsx",
                "start_index": 2436,
                "end_index": 5359,
                "start_line": 57,
                "end_line": 198,
                "max_line": 257,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "export const REWARD_ITEM_PROPERTY_KEY = '__upcartRewardProduct';\nexport const UPSELLS_ATTRIBUTE_NOTE_KEY = 'defaultUpsells';\n\nexport const AJAX_UPCART_IDENTIFIER_QUERY_KEY = 'upcart';\nexport const AJAX_UPCART_IDENTIFIER_QUERY_VALUE = '1';\nexport const AJAX_CART_ADD_UPCART_OPENS_CART_QUERY_KEY = 'opens_cart';",
                "filename": "web/storefront/src/constants/index.ts",
                "start_index": 6157,
                "end_index": 6466,
                "start_line": 158,
                "end_line": 163,
                "max_line": 163,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<LegacyCard.Section>\n      <div>\n        <div className={styles.TierSettings}>\n          <div>\n            <ProductSelectModal\n              isOpen={productModalIsOpen}\n              onClose={() => setProductModalIsOpen(false)}\n              onSave={(value) => {\n                const product = value.products[0];\n                setFieldValue(\n                  `upcartEditorSettings.rewardsTiers.tiers[${productModalIndex}].products[${productTierIndex}]`,\n                  product,\n                );\n                setFieldTouched(\n                  `upcartEditorSettings.rewardsTiers.tiers[${productModalIndex}].products[${productTierIndex}]`,\n                  true,\n                );\n                setProductModalIsOpen(false);\n              }}\n              selectedProducts={\n                values.upcartEditorSettings.rewardsTiers.tiers[productModalIndex].products?.[productTierIndex]\n                  ? ([\n                      values.upcartEditorSettings.rewardsTiers.tiers[productModalIndex].products?.[productTierIndex],\n                    ] as Product[])\n                  : []\n              }\n              multiProduct={false}\n            />\n            {tiers.map((tier, index) => (\n              <div key={index}>\n                {tiers.length > 1 ? (\n                  <div>\n                    {index != 0 && <br />}\n                    {index != 0 && <hr />}\n                    {index != 0 && <br />}\n                    <p style={{ textDecoration: 'underline', fontSize: '18px', marginBottom: '10px' }}>\n                      Tier {index + 1}\n                    </p>\n                  </div>\n                ) : (\n                  <Field\n                    id=\"upcartEditorSettings.rewardsShowIconWithSingleTier\"\n                    label={t('Show reward icon')}\n                    name={`upcartEditorSettings.rewardsShowIconWithSingleTier`}\n                    component={CheckboxField}\n                  />\n                )}\n                <Field\n                  id=\"upcartEditorSettings.targetType\"\n                  label={'Reward Type'}\n                  name={`upcartEditorSettings.rewardsTiers.tiers[${index}].targetType`}\n                  component={SelectField}\n                  options={[\n                    { label: 'Shipping', value: 'shipping' },\n                    { label: 'Discount', value: 'productsOrOrder' },\n                    { label: 'Product', value: 'discountProduct' },\n                  ]}\n                />\n                {(tiers.length > 1 || values.upcartEditorSettings.rewardsShowIconWithSingleTier) && (\n                  <Field\n                    id=\"upcartEditorSettings.rewardDescription\"\n                    label={t('Reward Description')}\n                    name={`upcartEditorSettings.rewardsTiers.tiers[${index}].rewardDescription`}\n                    component={InputField}\n                    type=\"text\"\n                    maxLength={25}\n                  />\n                )}\n                {values.",
                "filename": "web/src/@templates/CartEditor/RewardsModule/RewardSettingsModule.tsx",
                "start_index": 1856,
                "end_index": 4849,
                "start_line": 40,
                "end_line": 188,
                "max_line": 248,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { GiftCardMajor, ProductsMajor, ShipmentMajor } from '@shopify/polaris-icons';\nimport clx from 'classnames';\nimport parse from 'html-react-parser';\nimport React, { useCallback, useEffect, useMemo } from 'react';\nimport { RewardTier } from '../../../../../../common/defaultMetafields';\nimport { REWARD_ITEM_PROPERTY_KEY } from '../../../constants/index';\nimport { convertCurrency, formatMoney } from '../../../helpers/currency';\nimport { useCartTotal } from '../../../hooks/useCartTotal';\nimport { AddToCartOpensCart, CartItem, ItemToAddToCart, ItemToChangeInCart } from '../../../platform';\nimport { StorageEngine } from '../../../services/storage';\nimport {\n  calcCountProgress,\n  calculateCountTieredProgress,\n  calculateProgress,\n  calculateTieredProgress,\n} from '../../../utils';\nimport { withErrorBoundary } from '../HOCs';\nimport styles from './styles.module.scss';\nimport { IRewardsModule } from './types';\nimport { useCartItems } from './hooks/useCartItems';\nimport { useCartItemCategories } from './hooks/useCartItemCategories';\nimport { useCartHelpers } from '../../../hooks/useCartHelpers';\n\nconst sessionStorageEngine = new StorageEngine('session');\n\nconst UnsafeRewardsModule: React.FC<IRewardsModule> = ({ platform, cart, refetchCart }) => {\n  const { itemCount: cartItemCount } = useCartItems({\n    cart,\n    settings: platform.settings,\n    includeRewards: false,\n  });\n\n  const { rewardItems } = useCartItemCategories({\n    cart,\n    settings: platform.settings,\n  });\n\n  const { totalAfterAllDiscountsWithoutGiftCards, totalAfterOnlyDiscountCodesWithoutGiftCards } = useCartTotal({\n    cart,\n  });\n\n  const {\n    rewardsBarBackgroundColor,\n    rewardsBarForegroundColor,\n    rewardsBasis,\n    rewardsEditor,\n    rewardsEditorAfterText,\n    rewardsEditorForItemCount,\n    rewardsItemCount,\n    rewardsMinAmount,\n    rewardsTargetType,\n    rewardsTiers,\n    rewardsTierProducts,\n    rewardsShowIconWithSingleTier,\n  } = platform.settings.upcartEditorSettings;\n\n  if (rewardsTiers.tiers.length === 0) {\n    rewardsTiers.tiers.push({\n      targetType: rewardsTargetType,\n      minAmount: rewardsMinAmount,\n      itemCount: rewardsItemCount,\n      textBeforeReachingForCartTotal: rewardsEditor,\n      textBeforeReachingForItemCount: rewardsEditorForItemCount,\n      rewardDescription: 'Free Shipping',\n      products: rewardsTierProducts,\n    });\n  }\n\n  // Calculate total price of non-gift-card reward items already present in the cart (BEAM-1664 & BEAM-400)\n  const rewardsItemsTotalPrice = rewardItems.reduce((total, item) => {\n    if (item.gift_card) return total;\n    return total + (rewardsTiers.tiers[0].targetType === 'shipping' ? item.line_price : item.original_line_price);\n  }, 0);\n\n  // See Linear issue BEAM-400 for a full explanation of this logic.\n  const totalPrice =\n    (rewardsTiers.tiers[0].targetType === 'shipping'\n      ? totalAfterAllDiscountsWithoutGiftCards\n      : totalAfterOnlyDiscountCodesWithoutGiftCards) - rewardsItemsTotalPrice;",
                "filename": "web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx",
                "start_index": 0,
                "end_index": 2983,
                "start_line": 1,
                "end_line": 79,
                "max_line": 492,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "reranked_doc_snippets_initial": [
            {
                "code": "---\nid: 3vst4bcr\ntitle: Discount Codes Module\nfile_version: 1.1.3\napp_version: 1.18.31\n---\n\n# Required background information\n\n## Discount types\n\nThere are two types of discounts: **automatic discounts** and **discount codes**.\n\n- **Automatic discounts** are applied to a cart or checkout automatically when the discount criteria are met.\n\n- **Discount codes** must be manually typed in by the customer. They stay active until the customer either removes the code, enters a different conflicting discount code, or changes their cart/checkout so that the discount is not longer applicable.\n\nThis module is specifically for **discount codes**. We do not have to worry about **automatic discounts** because they will work in the cart by default and they do not require any user interaction.\n\n## Discount targets\n\nA discount can be used to reduce the cost of **product(s)**, **order**, or **shipping**.\n\n- **Product discounts** reduce the price of one or more products and are shown as a reduction on individual line items.\n\n- **Order discounts** reduce the price of the order as a whole and are shown as a reduction on the overal price.\n\n- **Shipping discounts** reduce the price of shipping.\n\n# Read and write discount codes\n\n## Read discount codes\n\nWe read discount codes using the `cart.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:78:24:26:`    const cart: Cart&lt;CartItemWithoutCompareAtPrice&gt; = await fetch(getShopifyRoutesRoot() + &#39;cart.js&#39;).then((res) =&gt;`\"/> Ajax API endpoint.\n\nAn applied discount code will be returned from the API as part of either the `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> or the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/>. The `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> are for order discounts and the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/> are for product discounts.\n\nThese discount applications will include both **automatic discounts** and **discount codes**. We can distinguish between these using the `type`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:460:1:1:`  type: &#39;discount_code&#39; | &#39;&#39;;`\"/> field of the `DiscountApplication`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:446:4:4:`export interface DiscountApplication {`\"/>.\n\n## Apply a discount code\n\n<br/>\n\nWe apply a discount code by making a request from the storefront to the route `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/>.\n\nThe `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/> route is intended by Shopify to be used for [shareable discount links](https://help.shopify.com/en/manual/discounts/managing-discount-codes#promote-a-discount-using-a-shareable-link). Normally a customer would navigate to the link directly in their browser and would be redirected to the storefront. We are using it in a non-standard way by making a background network request.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n23         await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);\n```\n\n<br/>\n\nAfter applying a discount code, we refetch the cart to check if the discount was successfully applied and to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/DiscountCodeModule/DiscountCodeModule.tsx\n\n```tsx\n23           await platform.discounts.attemptApplyDiscountCode({ discountCode: discountCodeToApply });\n24           const updatedCart = await refetchCart();\n25\n26           const discountApplications = getAllUniqueDiscountApplications(updatedCart);\n27           const isValid = discountApplications.some(\n28             (discountApplication) => discountApplication.title === discountCodeToApply,\n29           );\n```\n\n<br/>\n\n## Remove a discount code\n\n<br/>\n\nWe remove a discount code by applying a fake invalid discount code.\n\nThere is no native way to remove discount codes so this is a workaround.\n\nThis behaviour relies on the fact that there can only be one discount code applied in the cart. We are replacing the one allowed discount code with an invalid code.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n14       async removeDiscountCode(): Promise<void> {\n15         const FAKE_INVALID_DISCOUNT_CODE = '~!~!UPCART_REMOVE_DISCOUNT!~!~';\n16         await this.UNSAFE_POSSIBLE_NO_OP_applyDiscountCodeAndSetShopifyCookie({ discountCode: FAKE_INVALID_DISCOUNT_CODE });\n17       }\n```\n\n<br/>\n\nAfter removing a discount code, we refetch the cart to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/components/DiscountCodeBadge/DiscountCodeBadge.tsx\n\n```tsx\n18         await platform.discounts.removeDiscountCode();\n19         await refetchCart();\n```\n\n<br/>\n\n> \u26a0\ufe0f After we apply or remove a discount code, the `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> of discounted line items will change. If we did not refetch the cart then we would have an outdated `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> value which would cause errors if we tried to call `cart/update.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:191:17:21:`    return fetchQd(this.ajaxMutationCartQ, getShopifyRoutesRoot() + &#39;cart/update.js&#39;, {`\"/> or `cart/change.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:153:8:12:`      getShopifyRoutesRoot() + `cart/change.js?${query.toString()}`,`\"/>.\n\n# Limitations\n\n## **Multiple** discount codes are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n50                     Multiple discount codes are not supported.\n```\n\n<br/>\n\n### Why are multiple discount codes not supported?\n\nWe cannot apply multiple discount codes because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support multiple codes. This is the only way that we know of to apply a discount code from the storefront. We will have to wait for Shopify to add support for multiple codes or to find a different way to apply codes which does support multiple.\n\nIf a customer applies two discount codes back to back, the first discount code will be discarded and only use the most recently applied code will affect the cart.\n\n## Free shipping discounts are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n58                   Free shipping discounts are not supported.\n```\n\n<br/>\n\n### Why are free shipping discounts not supported?\n\nWe cannot apply free shipping discounts because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support them.\n\n## Shopify Plus stores using checkout.liquid are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n64                   Shopify Plus stores using checkout.liquid are not supported.\n```\n\n<br/>\n\n### Why are Shopify Plus stores using checkout.liquid not supported?\n\nHistorically, the Ajax API only included automatic discounts and did not include discount codes. Shopify changed this behaviour and started including discounts from discount codes in Ajax API responses. There are still some stores which do not include discount codes in Ajax API responses. The discount codes module does not work on these stores.\n\n### How can we tell if a store is eligible?\n\nThe Ajax API will include discount codes in responses only if the store is on Shopify's new checkout.\n\n<br/>\n\nWe can identify wether or not a store is on Shopify's new checkout by looking at the cart token. If the cart token is 32 characters long and only includes hex digits (0123456789abcdef) then the store is on Shopify's old checkout, otherwise it is on Shopify's new checkout and the Ajax API will include discount codes in responses.\n\nStores that are on Shopify's new checkout may have different token formats. The following are examples that we've seen:\n\n- c1-d3f024e3af037f40bfe1b016b5b76f05\n- Z2NwLXVzLWNlbnRyYWwxOjAxSEZFMjFIV1FZUFc0SlQ3Q00ySFFSSjgy\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart({ cart }: { cart: Cart<CartItem> }): boolean {\n6          if (!cart.token) return false;\n7          const isLegacyCartToken = cart.token.match(/^[0-9a-f]{32}$/) !== null;\n8          return !isLegacyCartToken;\n9        }\n```\n\n<br/>\n\n### What happens if a store is not eligible?\n\n<br/>\n\nIf a store is not eligible then the discount code module will not be shown.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/Cart.tsx\n\n```tsx\n499                      {platform.discounts.getStoreCanApplyDiscountCodesInCart({ cart }) &&\n500                        settings.upcartEditorSettings.discountCodeModule && (\n501                          <DiscountCodeModule platform={platform} refetchCart={refetchCart} />\n502                        )}\n```\n\n<br/>\n\nIn the preview we will show the discount code module even for stores that are not eligible. We do this because it would require a lot of work to check eligibility when not on the storefront.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/platform/preview/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart(args: { cart: Cart<CartItem> }): boolean {\n6          return true;\n7        }\n```\n\n<br/>\n\nThis file was generated by Swimm. [Click here to view it in the app](https://app.swimm.io/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr).",
                "filename": ".swm/discount-codes-module.3vst4bcr.sw.md",
                "start_index": 0,
                "end_index": 11446,
                "start_line": 1,
                "end_line": 231,
                "max_line": 231,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Specification: Subscription Upgrades\n\n## Editor\n\nThere should be a module in the editor with:\n\n- Name: \"Subscription Upgrades\"\n- Icon: Repeat Order\n- Default status: disabled\n- Settings:\n  - \"Prevent downgrades\"\n    - Help text: \"If enabled, customers will not be allowed to downgrade from a subscription to one-time purchase. Caution: this may increase cart abandonment.\"\n    - Type: checkbox\n    - Default: disabled\n\n## Cart\n\n> If the subscription upgrades module is disabled in the editor, the cart should skip all subscription upgrade functionality.\n>\n> The following cart specification is applicable only if the subscription upgrades module has been enabled in the editor.\n\n### Behaviour\n\nThe cart frontend for subscription upgrades should be isolated to an area below each line item. This area can include content, or can be omitted if there is nothing to show. If the area includes content, then the area should have:\n\n- Public CSS class: `.upcart-subscription-upgrade-section`\n- Styling: full-width of line item\n\nThe content of each subscription upgrade area should be independent of the content for the subscription areas for any other line items.\n\nThe content of the subscription upgrade area should be as follows:\n\nA. For **one-time purchase** line items:\n\n- If the item cannot be sold as a subscription, nothing should be shown.\n- If the item can be sold as a subscription:\n  - There should be a button with:\n    - Content: \"Upgrade to \\_\\_\\_\\_\", where \\_\\_\\_\\_ is the name of the first selling plan group for the item\n    - When clicked:\n      1. Show a loading spinner instead of text, and disable the button\n      2. Change the item to be a subscription with the first selling plan of the first selling plan group. The line item should have the property `__upcartSubscriptionUpgrade: \"true\"`\n    - Styling: full width of area, match to other buttons in cart\n    - Public CSS class: `.upcart-subscription-upgrade-button`\n\nB. For **subscription** line items:\n\n- There should be a dropdown with:\n  - Content: the name of the current selling plan\n  - Options:\n    - (OPTIONAL) A group with:\n      - Title: \"Full price\"\n      - Options:\n        - \"One-time purchase\"\n      - Condition: this group should be included if the \"Prevent downgrades\" setting is disabled AND the item does not _require_ a selling plan (i.e., it can be sold as a one-time purchase)\n    - A group for each possible selling plan group for the item with:\n      - Title: the name of the selling plan group\n      - Options: the names of the possible selling plans in the group for the item\n  - When selected:\n    1. Show a loading spinner overlayed on the dropdown and disable the dropdown\n    2. Change the selling plan of the item to the selected selling plan. If \"One-time only\" was selected, then remove the selling plan from the item to change it to a one-time purchase. The line item should have the property `__upcartSubscriptionEdit: \"true\"`\n  - Styling: full width of area, match to other dropdowns in cart\n  - Public CSS class: `.upcart-subscription-upgrade-dropdown`\n\nWhen the current purchase option for a line item changes, the content of the subscription upgrade area should be updated to match the new purchase option.\n\n### Edge Cases and Clarifications\n\n- The content of the subscription upgrade area does not depend on _how_ the purchase option was selected. For example, the subscription upgrade area content for an item that was added to the cart as a subscription should be the same as the content for an item that was upgraded from a one-time purchase to a subscription in-cart.\n- When selling plans are being loaded for a product, there should be no content in the subscription upgrade area. Before the selling plans are loaded, we can't fully decide what content to show so it's fine to show nothing.\n- When the selling plan of an item is changed, the quantity of the item should remain constant. If you don't provide a quantity to the AJAX API when changing a line item, then the quantity of the line item will be set to 1 which should be avoided.\n- Selling plans that do not apply to the selected variant for a line item should be ignored. It is possible to have selling plans that apply only to specific variants of a product. In cases where none of the selling plans from a selling plan group apply to the variant for the line item, the selling plan group should be ignored. An ignored group should not be listed in the dropdown (because it would be an empty section) and it should not be used for text of the upgrade button (because it would have no selling plan to select).",
                "filename": "docs/subscription-upgrades.md",
                "start_index": 0,
                "end_index": 4584,
                "start_line": 1,
                "end_line": 71,
                "max_line": 71,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Security Policy\n\n## Supported versions\n\n### New features\n\nNew features will only be added to the master branch and will not be made available in point releases.\n\n### Bug fixes\n\nOnly the latest release series will receive bug fixes. When enough bugs are fixed and its deemed worthy to release a new gem, this is the branch it happens from.\n\n### Security issues\n\nOnly the latest release series will receive patches and new versions in case of a security issue.\n\n### Severe security issues\n\nFor severe security issues we will provide new versions as above, and also the last major release series will receive patches and new versions. The classification of the security issue is judged by the core team.\n\n### Unsupported Release Series\n\nWhen a release series is no longer supported, it's your own responsibility to deal with bugs and security issues. If you are not comfortable maintaining your own versions, you should upgrade to a supported version.\n\n## Reporting a bug\n\nAll security bugs in shopify repositories should be reported to [our hackerone program](https://hackerone.com/shopify)\nShopify's whitehat program is our way to reward security researchers for finding serious security vulnerabilities in the In Scope properties listed at the bottom of this page, including our core application (all functionality associated with a Shopify store, particularly your-store.myshopify.com/admin) and certain ancillary applications.\n\n## Disclosure Policy\n\nWe look forward to working with all security researchers and strive to be respectful, always assume the best and treat others as peers. We expect the same in return from all participants. To achieve this, our team strives to:\n\n- Reply to all reports within one business day and triage within two business days (if applicable)\n- Be as transparent as possible, answering all inquires about our report decisions and adding hackers to duplicate HackerOne reports\n- Award bounties within a week of resolution (excluding extenuating circumstances)\n- Only close reports as N/A when the issue reported is included in Known Issues, Ineligible Vulnerabilities Types or lacks evidence of a vulnerability\n\n**The following rules must be followed in order for any rewards to be paid:**\n\n- You may only test against shops you have created which include your HackerOne YOURHANDLE @ wearehackerone.com registered email address.\n- You must not attempt to gain access to, or interact with, any shops other than those created by you.\n- The use of commercial scanners is prohibited (e.g., Nessus).\n- Rules for reporting must be followed.\n- Do not disclose any issues publicly before they have been resolved.\n- Shopify reserves the right to modify the rules for this program or deem any submissions invalid at any time. Shopify may cancel the whitehat program without notice at any time.\n- Contacting Shopify Support over chat, email or phone about your HackerOne report is not allowed. We may disqualify you from receiving a reward, or from participating in the program altogether.\n- You are not an employee of Shopify; employees should report bugs to the internal bug bounty program.\n- You hereby represent, warrant and covenant that any content you submit to Shopify is an original work of authorship and that you are legally entitled to grant the rights and privileges conveyed by these terms. You further represent, warrant and covenant that the consent of no other person or entity is or will be necessary for Shopify to use the submitted content.\n- By submitting content to Shopify, you irrevocably waive all moral rights which you may have in the content.\n- All content submitted by you to Shopify under this program is licensed under the MIT License.\n- You must report any discovered vulnerability to Shopify as soon as you have validated the vulnerability.\n- Failure to follow any of the foregoing rules will disqualify you from participating in this program.\n\n** Please see our [Hackerone Profile](https://hackerone.com/shopify) for full details\n\n## Receiving Security Updates\n\nTo recieve all general updates to vulnerabilities, please subscribe to our hackerone [Hacktivity](https://hackerone.com/shopify/hacktivity)",
                "filename": "SECURITY.md",
                "start_index": 0,
                "end_index": 4160,
                "start_line": 1,
                "end_line": 59,
                "max_line": 59,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>UpCart Loading...</title>\n    <script>\n      /*\n       * Constants\n       */\n      const INSTALL_SOURCE_QUERY_PARAM = 'via';\n      const COOKIE_LIFETIME_MS = 3 * 24 * 60 * 60 * 1000; // 3 days\n      const COOKIE_NAME = 'upcart_install_source';\n\n      /*\n       * 1. Get the ?via= query for the following steps\n       */\n      const installSource = encodeURIComponent(\n        new URLSearchParams(window.location.search).get(INSTALL_SOURCE_QUERY_PARAM),\n      );\n\n      /*\n       * 2. Set a cookie with the install source for 3 days so we can read it when they install the app\n       */\n      const cookieDomain = '.' + window.location.hostname;\n      const cookieExpiresDate = new Date();\n      cookieExpiresDate.setTime(cookieExpiresDate.getTime() + COOKIE_LIFETIME_MS);\n      const cookieExpires = cookieExpiresDate.toGMTString();\n      document.cookie = `${COOKIE_NAME}=${installSource}; expires=${cookieExpires}; domain=${cookieDomain}; path=/; SameSite=None; Secure`;\n\n      /*\n       * 3. Redirect to the app store, including the install source as a query param for App Store Google Analytics\n       */\n      window.location.replace(`https://apps.shopify.com/upcart-cart-builder?join-via=${installSource}`);\n    </script>\n  </head>\n  <body></body>\n</html>",
                "filename": "web/public/join.html",
                "start_index": 0,
                "end_index": 1304,
                "start_line": 1,
                "end_line": 36,
                "max_line": 36,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# UpCart 3.0\n\n## Setup\n\nView setup instructions on Notion: https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 133,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "MIT License\n\nCopyright (c) 2021 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
                "filename": "extensions/theme-app-extension/LICENSE.md",
                "start_index": 0,
                "end_index": 1063,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<html></html>",
                "filename": "web/storefront/public/index.html",
                "start_index": 0,
                "end_index": 13,
                "start_line": 1,
                "end_line": 1,
                "max_line": 1,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "## Dev Setup\n\nFollow the [instructions in this Notion document](https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7?pvs=4) to setup the development environment for the Chrome extension.",
                "filename": "chrome-extensions/cart-customization/README.md",
                "start_index": 0,
                "end_index": 208,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "The starting point for this repository was created using the Shopify CLI, commit\nf5d560da33aafae0b552de72a90f1320d1023524. Some boilerplate code from the CLI\nremains and is licensed as follows:\n\"\"\"\nMIT License\n\nCopyright (c) 2018 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\"",
                "filename": "LICENSE.md",
                "start_index": 0,
                "end_index": 1265,
                "start_line": 1,
                "end_line": 26,
                "max_line": 26,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { Shop, ShopModel } from '../modules/shops/shops.model';\nimport { RequestWithShop } from '../types/express.types';\nimport Shopify from '@shopify/shopify-api';\n\nexport const getShopDocFromRequest = async (req: RequestWithShop): Promise<Shop> => {\n  if (req.shopDoc) {\n    return req.shopDoc;\n  }\n\n  const shop = Shopify.Utils.sanitizeShop(req.query.shop as string);\n  const shopDoc = await ShopModel.findOne({ domain: shop }).lean();\n  req.shopDoc = shopDoc;\n  return shopDoc;\n};",
                "filename": "web/server/helpers/getShopDocFromRequest.ts",
                "start_index": 0,
                "end_index": 485,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "solution_task": {
            "structured_resp": "Clarify:\nThe issue involves a problem with the title for a reward product not displaying correctly, showing random characters and numbers or \"Title Not Available.\" The problem started after the last update and is isolated to specific items in the database or the way certain titles are fetched or rendered. The issue occurs across multiple browsers and devices, and the affected product was recently added to the system. There is also a failed GET request to an API endpoint associated with the \"25% Off Coupon Code\" product, with a missing query parameter in the URL for this product.\n\nHypothesize:\n- The issue with the title could be due to incorrect handling of the product title in the code that fetches or renders the product information.\n- The missing query parameter in the URL could be causing the failed GET request, which in turn could be leading to the incorrect or missing product title.\n\nExperiment:\n- Review recent changes in the codebase related to reward product title fetching and rendering.\n- Check the database entries for the \"25% Off Coupon Code\" product to ensure the title is stored correctly.\n- Examine the function and conditional statement in the code that appends query parameters to URLs, specifically for the rewards page.\n- Investigate the API endpoint and GET request handling for the \"25% Off Coupon Code\" product to identify why the query parameter is missing.\n\nAnalyze:\n- The provided documentation and code snippets do not directly show the issue with the reward product title or the missing query parameter. However, the snippets related to the RewardsModule and SingleProductRow components could be relevant to the rendering of product titles.\n- The external Shopify documentation on the Product Recommendations API shows how product titles are fetched, which could be related to the issue if the \"25% Off Coupon Code\" product is being fetched using this API.\n\nResolve:\n- Check the `SingleProductRow.tsx` component to ensure that the product title is being rendered correctly. If the title is fetched from an API, verify that the response is handled properly.\n- If the title is stored in the database, verify that the database entry for the \"25% Off Coupon Code\" product has the correct title and that there are no encoding issues.\n- Review the code responsible for appending query parameters to ensure that the parameter is included for all relevant products, including the \"25% Off Coupon Code\" product. This could be in the `RewardsModule.tsx` or a similar file where the API call is made.\n- If the GET request is made using the Product Recommendations API, as shown in the external Shopify documentation, ensure that the `product_id` and other necessary query parameters are included in the request.\n- If the issue persists after these checks, consider adding additional logging around the API call and the rendering of the product title to trace the exact point of failure.",
            "response": "To address the problem of the reward product title not displaying correctly, it's essential to investigate the recent code changes, database entries, and API request handling. The issue seems to be related to the way product titles are fetched or rendered, possibly due to a missing query parameter in the API call for the \"25% Off Coupon Code\" product. Here are the steps to troubleshoot and resolve the issue:\n\n- Inspect the `SingleProductRow.tsx` component to confirm that the product title is being rendered correctly. Ensure that the API response is correctly processed if the title is obtained from an API.\n- Check the database entry for the \"25% Off Coupon Code\" product to verify the accuracy of the title and rule out any encoding issues.\n- Examine the code that appends query parameters to API calls, which might be located in the `RewardsModule.tsx` or a similar component, to ensure the inclusion of the necessary parameters for the \"25% Off Coupon Code\" product.\n- If the Product Recommendations API is used, as indicated by the Shopify documentation, make sure that the `product_id` and other required query parameters are present in the API request.\n- Implement additional logging around the API call and the rendering process of the product title to identify the precise location of the error if the problem is not resolved by the above steps."
        },
        "snippet_processor_task": {
            "web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "The snippet provides information about adding rewards and confirming compatibility, which could be relevant to the rewards module and subscription upgrades in the project.",
                        "snippet": {
                            "code": "{\n                    title: t('Add Rewards'),\n                    badge: editorData.rewardsModule\n                      ? {\n                          children: t('Completed'),\n                          status: t('success'),\n                        }\n                      : undefined,\n                    description: t('Add a rewards module to offer urge customers to shop more. Create a free shipping bar, offer a free gift, or other rewards.'), // prettier-ignore\n                    action: {\n                      content: t('Add Rewards'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=rewards`);\n                      },\n                    },\n                  },\n                  {\n                    title: t('Confirm UpCart Compatibility'),\n                    description: t(\"Although UpCart uses standard Shopify technologies, not all apps do. Ensure any other apps you're using function as expected.\"), // prettier-ignore\n                  },\n                  // {\n                  //   title: t('Sell more with AfterSell \ud83d\udcb8'),\n                  //   description: t(\"AfterSell enables checkout and post-purchase upsells. It's a great way to increase your AOV and sell more. Learn more about AfterSell and get a free trial.\"), // prettier-ignore\n                  //   action: {\n                  //     content: t('Boost my Sales'),\n                  //     onAction: () => {\n                  //       navigate(ROUTE_OBJECTS.AFTERSELL_AD.url);\n                  //     },\n                  //   },\n                  // },\n                ]}",
                            "filename": "web/src/@templates/Home/Home.tsx",
                            "start_index": 7463,
                            "end_index": 9094,
                            "start_line": 1,
                            "end_line": 233,
                            "max_line": 260,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet shows the initialization of the RewardsModule component and calculations for reward items, which could be directly related to the issue with the title for a reward product not displaying correctly."
                }
            ],
            "web/storefront/src/components/common/SingleProductRow/SingleProductRow.tsx": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "The snippet provides an overview of the RewardsModule component in the project, including the use of various hooks, calculations for rewards, and settings related to rewards. It also shows the initialization of the component and calculations for reward items in the cart.",
                        "snippet": {
                            "code": "import { GiftCardMajor, ProductsMajor, ShipmentMajor } from '@shopify/polaris-icons';\nimport clx from 'classnames';\nimport parse from 'html-react-parser';\nimport React, { useCallback, useEffect, useMemo } from 'react';\nimport { RewardTier } from '../../../../../../common/defaultMetafields';\nimport { REWARD_ITEM_PROPERTY_KEY } from '../../../constants/index';\nimport { convertCurrency, formatMoney } from '../../../helpers/currency';\nimport { useCartTotal } from '../../../hooks/useCartTotal';\nimport { AddToCartOpensCart, CartItem, ItemToAddToCart, ItemToChangeInCart } from '../../../platform';\nimport { StorageEngine } from '../../../services/storage';\nimport {\n  calcCountProgress,\n  calculateCountTieredProgress,\n  calculateProgress,\n  calculateTieredProgress,\n} from '../../../utils';\nimport { withErrorBoundary } from '../HOCs';\nimport styles from './styles.module.scss';\nimport { IRewardsModule } from './types';\nimport { useCartItems } from './hooks/useCartItems';\nimport { useCartItemCategories } from './hooks/useCartItemCategories';\nimport { useCartHelpers } from '../../../hooks/useCartHelpers';\n\nconst sessionStorageEngine = new StorageEngine('session');\n\nconst UnsafeRewardsModule: React.FC<IRewardsModule> = ({ platform, cart, refetchCart }) => {\n  const { itemCount: cartItemCount } = useCartItems({\n    cart,\n    settings: platform.settings,\n    includeRewards: false,\n  });\n\n  const { rewardItems } = useCartItemCategories({\n    cart,\n    settings: platform.settings,\n  });\n\n  const { totalAfterAllDiscountsWithoutGiftCards, totalAfterOnlyDiscountCodesWithoutGiftCards } = useCartTotal({\n    cart,\n  });\n\n  const {\n    rewardsBarBackgroundColor,\n    rewardsBarForegroundColor,\n    rewardsBasis,\n    rewardsEditor,\n    rewardsEditorAfterText,\n    rewardsEditorForItemCount,\n    rewardsItemCount,\n    rewardsMinAmount,\n    rewardsTargetType,\n    rewardsTiers,\n    rewardsTierProducts,\n    rewardsShowIconWithSingleTier,\n  } = platform.settings.upcartEditorSettings;\n\n  if (rewardsTiers.tiers.length === 0) {\n    rewardsTiers.tiers.push({\n      targetType: rewardsTargetType,\n      minAmount: rewardsMinAmount,\n      itemCount: rewardsItemCount,\n      textBeforeReachingForCartTotal: rewardsEditor,\n      textBeforeReachingForItemCount: rewardsEditorForItemCount,\n      rewardDescription: 'Free Shipping',\n      products: rewardsTierProducts,\n    });\n  }\n\n  // Calculate total price of non-gift-card reward items already present in the cart (BEAM-1664 & BEAM-400)\n  const rewardsItemsTotalPrice = rewardItems.reduce((total, item) => {\n    if (item.gift_card) return total;\n    return total + (rewardsTiers.tiers[0].targetType === 'shipping' ? item.line_price : item.original_line_price);\n  }, 0);\n\n  // See Linear issue BEAM-400 for a full explanation of this logic.\n  const totalPrice =\n    (rewardsTiers.tiers[0].targetType === 'shipping'\n      ? totalAfterAllDiscountsWithoutGiftCards\n      : totalAfterOnlyDiscountCodesWithoutGiftCards) - rewardsItemsTotalPrice;",
                            "filename": "web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx",
                            "start_index": 0,
                            "end_index": 2983,
                            "start_line": 1,
                            "end_line": 79,
                            "max_line": 492,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet shows how product titles are displayed in the SingleProductRow component, which is relevant to the issue of the title not displaying correctly for the \"25% Off Coupon Code\" product."
                }
            ],
            "web/storefront/src/constants/index.ts": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Provides a detailed snippet of a product in the project, including its properties and structure, which can be useful for understanding how product data is handled and displayed in the application.",
                        "snippet": {
                            "code": "{\n  id: 7680954040579,\n  title: 'Placeholder Product',\n  handle: 'derby-tier-backpack',\n  description:\n    '\\u003cp\\u003e\\u003cem\\u003eThis is a demonstration store. You can purchase products like this from \\u003ca href=\"http://unitedbyblue.com/\" target=\"_blank\"\\u003eUnited By Blue\\u003c/a\\u003e.\\u003c/em\\u003e\\u003c/p\\u003e\\n\\u003cp\\u003eOur Derby backpack is built with downpour proof sustainable canvas complemented by leather trim and brass hardware. Features padded canvas shoulder straps adjustable for all -day comfort. Finished with a drawstring closure and snap buckles to keep your belongings safe and secure on any trail taken.\\u003c/p\\u003e\\n\\u003cul\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003e100% organic waxed 18 oz canvas\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003eFull grain genuine leather trim\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003e\\u003cspan style=\"line-height: 1.4;\"\\u003eHeavy-duty brass hardware and YKK zippers\\u003c/span\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003eLifetime\\u00a0Guarantee\\u003c/li\\u003e\\n\\u003c/ul\\u003e\\n\\u003cul class=\"tabs-content\"\\u003e\\u003c/ul\\u003e',\n  published_at: '2022-05-07T13:11:39-06:00',\n  created_at: '2022-05-07T13:11:41-06:00',\n  vendor: 'United By Blue',\n  type: 'Bags',\n  tags: [],\n  price: 11300,\n  price_min: 11300,\n  price_max: 11300,\n  available: true,\n  price_varies: false,\n  compare_at_price: 12600,\n  compare_at_price_min: 12600,\n  compare_at_price_max: 12600,\n  compare_at_price_varies: false,\n  variants: [\n    {\n      id: 42789609046275,\n      title: 'Nutmeg',\n      option1: 'Nutmeg',\n      option2: null,\n      option3: null,\n      sku: '4160',\n      requires_shipping: true,\n      taxable: true,\n      featured_image: null,\n      available: true,\n      name: 'Derby Tier Backpack - Nutmeg',\n      public_title: 'Nutmeg',\n      options: ['Nutmeg'],\n      price: 11300,\n      weight: 1361,\n      compare_at_price: 12600,\n      inventory_management: 'shopify',\n      barcode: '',\n      requires_selling_plan: false,\n      selling_plan_allocations: [],\n    },\n  ],\n  images: [\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_nutmeg_810294de-9152-4bf7-b5e0-b88fc94a1ff8.jpg?v=1651950701',\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_moss_drawstring.jpg?v=1651950701',\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/product_lifestyle-58.jpg?v=1651950701',\n  ],\n  featured_image:\n    '//cdn.shopify.com/s/files/1/0642/9435/5203/products/derbytier_nutmeg_810294de-9152-4bf7-b5e0-b88fc94a1ff8.jpg?v=1651950701',\n  options: [{ name: 'Color', position: 1, values: ['Nutmeg'] }],\n  url: NO_HREF, // prevent redirect in preview",
                            "filename": "web/src/@templates/CartEditor/platform/preview/products/fake-products.ts",
                            "start_index": 4669,
                            "end_index": 7380,
                            "start_line": 1,
                            "end_line": 504,
                            "max_line": 559,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet defines constants related to AJAX queries and cart operations, which may be relevant for investigating the missing query parameter in the URL for the \"25% Off Coupon Code\" product."
                }
            ]
        },
        "bouncer_response": {
            "score": 7,
            "criteria": "The RESPONSE must provide actionable, relevant guidance to more parts of the PROMPT's described issue to score higher.",
            "supporting_evidence": "The RESPONSE provides a structured approach to troubleshooting the issue with the reward product title not displaying correctly. It suggests inspecting the component responsible for rendering the product title, checking the database entry, examining the code for appending query parameters, and ensuring the correct API request structure. Additionally, the RESPONSE provides specific code snippets to check, which is highly relevant to the issue at hand.\n\nHowever, the RESPONSE could have been more comprehensive by addressing the fact that the issue started after the last update, which was mentioned in the PROMPT. While the RESPONSE does suggest looking at recent code changes, it does not explicitly state to review the latest update's changelog or commit history, which could provide direct insights into what might have caused the bug. Moreover, the RESPONSE does not mention the need to replicate the issue in a development or staging environment before applying fixes, which is a standard practice in bug resolution.\n\nOverall, the RESPONSE is highly relevant and provides clear guidance for troubleshooting the issue, but it falls short of being completely comprehensive in addressing all aspects of the bug as described in the PROMPT.",
            "clarification_questions": "NONE"
        },
        "end_time": 1714259837.311281,
        "result": "To address the problem of the reward product title not displaying correctly, it's essential to investigate the recent code changes, database entries, and API request handling. The issue seems to be related to the way product titles are fetched or rendered, possibly due to a missing query parameter in the API call for the \"25% Off Coupon Code\" product. Here are the steps to troubleshoot and resolve the issue:\n\n- Inspect the `SingleProductRow.tsx` component to confirm that the product title is being rendered correctly. Ensure that the API response is correctly processed if the title is obtained from an API.\n- Check the database entry for the \"25% Off Coupon Code\" product to verify the accuracy of the title and rule out any encoding issues.\n- Examine the code that appends query parameters to API calls, which might be located in the `RewardsModule.tsx` or a similar component, to ensure the inclusion of the necessary parameters for the \"25% Off Coupon Code\" product.\n- If the Product Recommendations API is used, as indicated by the Shopify documentation, make sure that the `product_id` and other required query parameters are present in the API request.\n- Implement additional logging around the API call and the rendering process of the product title to identify the precise location of the error if the problem is not resolved by the above steps.\n\n### Code snippets to check\n\n-  \u2192 [web](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web) \u2192 [src](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src) \u2192 [@templates](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates) \u2192 [Home](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/Home)- [Lines 1 - 233](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/Home/Home.tsx#L1-L233)\n\n This snippet shows the initialization of the RewardsModule component and calculations for reward items, which could be directly related to the issue with the title for a reward product not displaying correctly.\n-  \u2192 [web](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web) \u2192 [storefront](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront) \u2192 [src](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src) \u2192 [modules](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules) \u2192 [CartPopup](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules/CartPopup) \u2192 [RewardsModule](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules/CartPopup/RewardsModule)- [Lines 1 - 79](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules/CartPopup/RewardsModule/RewardsModule.tsx#L1-L79)\n\n This snippet shows how product titles are displayed in the SingleProductRow component, which is relevant to the issue of the title not displaying correctly for the \"25% Off Coupon Code\" product.\n-  \u2192 [web](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web) \u2192 [src](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src) \u2192 [@templates](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates) \u2192 [CartEditor](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/CartEditor) \u2192 [platform](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/CartEditor/platform) \u2192 [preview](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/CartEditor/platform/preview) \u2192 [products](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/CartEditor/platform/preview/products)- [Lines 1 - 504](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/CartEditor/platform/preview/products/fake-products.ts#L1-L504)\n\n This snippet defines constants related to AJAX queries and cart operations, which may be relevant for investigating the missing query parameter in the URL for the \"25% Off Coupon Code\" product."
    }
}