{
    "id": "BEAM-2284",
    "repo_name": "testbed/UpCart-2.0",
    "title": "Remove translations of dashboard content (UpCart)",
    "body": "\nThe automatic translations of the dashboard were inaccurate in some cases. This caused the experience for merchants to be worse in their native language than if they were to use the app in English. We have removed the translations so the app will always be in English now.\n---\nGlossary:\nconversation_customer_1: The conversation begins with admin_Jordan Falconer explaining to a customer how to translate their basket into French by modifying UpCart settings and navigating to Cart Editor > Settings > Translations. The customer, user_KANINA CUISINE, responds that they cannot find the Translation option to select French and mentions an issue where a test message was received in English despite translating the \"Hello\" greeting to \"Bonjour.\"\n\nJordan provides further instructions, suggesting the customer scroll up to find the translations dropdown above the Custom HTML and Custom CSS sections. The customer still cannot find the Translate option and Jordan acknowledges seeing the tab open in a screenshot sent by the customer, which shows \"Hello\\n Bonjour.\"\n\nThe customer expresses confusion about where to choose the language after translating and questions whether the app supports multiple languages. They express a desire to have the app in French if possible. Additionally, the customer raises a separate issue regarding PayPal not appearing on their site, despite having given authorization for access to their store.\n\nJordan addresses the PayPal concern in another chat and notes that the application appears to be in French, except for a few fields, and promises to inform their manager. The customer confirms they have granted access, and Jordan assures that the technical team will look into the matter promptly.\n\nThe conversation concludes with Jordan linking to issue BEAM-2466, which is related to inaccurate UpCart UI translations. This issue is later canceled by Landon Fuhr, who also moves issue BEAM-2284 (Remove translations of dashboard content - UpCart) to \"In Progress.\" Opey Adeyemi suggests a changelog entry in case support tickets increase due to missing translations. Landon Fuhr moves BEAM-2284 through various statuses, ultimately marking it as \"Done.\"\n\nGitHub commits are referenced, indicating the removal of the `t()` function and the language picker from the client codebase as part of resolving BEAM-2284. Finally, admin_Patti Rendall informs the customer that the issue has been resolved and offers further assistance if needed, accompanied by an image that is not described.\n\n",
    "classification": "bug",
    "state": "closed",
    "repo_link": "https://github.com/testbed/UpCart-2.0.git",
    "requested_commit": null,
    "issue_tracker_identifier": "",
    "ai_cost": {
        "issue_classifier": 0.000397,
        "issue_summarizer": 0.01311,
        "search_embedding": 6.331e-05,
        "documentation_agent": 0.00757,
        "repo_summary": 0.06498450000000001,
        "issue_star_solver": 0.19145849999999998,
        "snippet_processor": 0.023420000000000003,
        "bouncer": 0.03794
    },
    "attachments": [
        {
            "title": "Message from KANINA CUISINE",
            "url": "https://app.intercom.com/a/apps/wqw8tviu/conversations/188602100010910",
            "content": "admin_Jordan Falconer: <p class=\"no-margin\">Hello, I would like my basket to be translated into French, how can I do this? THANKS</p>\n<p class=\"no-margin\"><br>\u200b</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Si vous souhaitez uniquement prendre en charge une seule langue sur votre boutique, vous pouvez le faire en modifiant les param\u00e8tres d'UpCart.</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">Allez simplement dans \u00c9diteur de panier &gt; Param\u00e8tres &gt; Traductions pour modifier tout notre texte dans la langue de votre choix !</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">If you only want to support a single language on your store, you can do that by changing UpCart's settings. </p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">Just go to Cart Editor &gt; Settings &gt; Translations to change all of our text to whatever language you want! </p>\nuser_KANINA CUISINE: <p>Bonjour,</p>\n<p>Je ne trouve pas l'option Traduction pour choisir la langue fran\u00e7aise. J'ai re\u00e7u un courriel d'une cliente me demandant de lui \u00e9crire en fran\u00e7ais, j'ai fait un test et j'ai re\u00e7u un message en anglais, bien que j'aie traduit la partie Hello/Bonjour?</p>\n<div class=\"intercom-container\"><img src=\"https://upcart.intercom-attachments-3.com/i/o/882633343/a213684e81888beaf490c0d3/image.png?expires=1714392105&amp;signature=d05566f437002b7e4e8e2ad8af159b66696bde119996521d77bc1f54078ef5f7\" alt=\"image.png\"></div><div class=\"intercom-container\"><img src=\"https://upcart.intercom-attachments-3.com/i/o/882633344/59ad761d8bfe16e7bbe1419d/image.png?expires=1714392105&amp;signature=a68ff09f6c39648f2c9064362ad2e65734e1bbefc6c444f199271cfd371d20c6\" alt=\"image.png\"></div><div class=\"intercom-container\"><img src=\"https://upcart.intercom-attachments-3.com/i/o/882633347/cf6748cdc1f1dbd4f35bb55f/image.png?expires=1714392105&amp;signature=65cda6cfefc25663de8b9b51e087c312cc94be6d0e6b4be5ec39fa5ad4f3ab95\" alt=\"image.png\"></div><p>Merci de me r\u00e9pondre rapidement.</p>\n<p>Salutations!<br>\u200b</p>\n<p>Le ven. 10 nov. 2023, \u00e0 14 h 19, Jordan from UpCart &lt;<a href=\"mailto:jordan.falconer@upcart.intercom-mail.com\" rel=\"nofollow\" target=\"_blank\" class=\"intercom-content-link\">jordan.falconer@upcart.intercom-mail.com</a>&gt; a \u00e9crit :<br>          </p>\n<div class=\"intercom-container\"><img src=\"https://upcart.intercom-mail.com/avatars/6715297/square_128/izzdre3p-1693499585.png\" alt=\"Jordan Falconer\"></div>\nadmin_Jordan Falconer: <p class=\"no-margin\">I can't find the Translation option to choose the French language. I received an email from a client asking me to write to her in French, I did a test and I received a message in English, although I translated the Hello/Bonjour?</p>\n<p class=\"no-margin\"><br>\u200b</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Salut!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">Si vous faites d\u00e9filer vers le bas ou fermez l'onglet des param\u00e8tres avanc\u00e9s, vous verrez un onglet de traductions :</p>\n<div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/882647975/97182ec05b1c351b78faef61/image.png\"></div><p class=\"no-margin\">Je ne suis pas s\u00fbr que ce \u00e0 quoi vous faites r\u00e9f\u00e9rence par message ne soit pas traduit car UpCart n'envoie pas de messages. Il est probable que j'ai mal compris ! S'il vous pla\u00eet laissez-moi savoir \u00e0 quoi vous faites r\u00e9f\u00e9rence :)</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Hey there!</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">If you scroll down, or close the advanced settings tab, you will see a translations tab:</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">I'm not sure what you're referring to by a message is not being translated as UpCart does not send messages. It's likely I'm misunderstanding! Please let me know what you're referring to :)</p>\nuser_KANINA CUISINE: <p>je ne le trouve plus</p>\nuser_KANINA CUISINE: <div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/900372563/0a1c48affe6cd7614063e40d/image.png?expires=1714392105&amp;signature=09b7ce019a3e578081a1a34c2cdc4f9f11ed201b1f10356e46c9e376dbc759b6\"></div>\nadmin_Jordan Falconer: <p class=\"no-margin\">I can't find it anymore</p>\n<p class=\"no-margin\"><br>\u200b</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Il faudrait faire d\u00e9filer un peu vers le haut. La liste d\u00e9roulante des traductions se trouve au-dessus des sections HTML personnalis\u00e9 et CSS personnalis\u00e9.</p>\n<div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/900375180/101991e74809e7d32580f5e8/image.png\"></div>\nadmin_Jordan Falconer: <p class=\"no-margin\">Pour r\u00e9f\u00e9rence:</p>\n<div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/900377381/332dcaa4e89131fb75021c38/image.png\"></div>\nadmin_Jordan Falconer: <p class=\"no-margin\">You should scroll up a bit. The translations drop-down list is above the Custom HTML and Custom CSS sections.</p>\n<p class=\"no-margin\"><br>\u200b</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">For reference:</p>\nuser_KANINA CUISINE: <div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/900387812/28b9ed4e799769ba5796c95d/image.png?expires=1714392105&amp;signature=700546927ea2d1458bb366ef9df960cd5739f72087180a731d4f0044ada1c86f\"></div>\nuser_KANINA CUISINE: <div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/900388069/5af311b9713948acd34c9935/image.png?expires=1714392105&amp;signature=32416d6821693cfcbe3a45184029b4831f02e1653e35762dd5a90b1f554ba3be\"></div>\nuser_KANINA CUISINE: <p>Je ne trouve plus Translate</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I can't find Translate anymore</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Dans l'image que vous avez envoy\u00e9e, l'onglet est ouvert. Il dit \"Bonjour\\n Bonjour\"</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">In the image you've sent, you have the tab open. It says \"Hello\\n Bonjour\"</p>\nuser_KANINA CUISINE: <p>J'ai d\u00e9j\u00e0 fait la traduction, mais il n'y avait pas o\u00f9 on peut choisir la langue?</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I already did the translation, but there was no place to choose the language?</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Je ne comprends plus ce que vous demandez. Voulez-vous prendre en charge plusieurs langues ?</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I'm no longer understanding what you're asking. Do you want to support multiple languages?</p>\nuser_KANINA CUISINE: <p>Je veux avoir l'application en fran\u00e7ais, s'il y a cette option</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">I want to have the application in French, if there is this option</p>\nuser_KANINA CUISINE: <p>Une autre question : </p>\nuser_KANINA CUISINE: <div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/900398184/bf941cefc8d51d2b001d3269/image.png?expires=1714392105&amp;signature=5874820824d436991a0bf99fee8082c4f213b07d4b62a513459110fc2f7bd699\"></div>\nuser_KANINA CUISINE: <div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/900398822/34974e40d4c91bd7be30b5b6/image.png?expires=1714392105&amp;signature=46444ebda40247bd6907e70b09dd1fe3a14aa9978479f28faa832e6e824281ce\"></div>\nuser_KANINA CUISINE: <p>Pay Pal n'apparait pas sur le site?</p>\nuser_KANINA CUISINE: <p>j'ai d\u00e9j\u00e0 donn\u00e9 l'autorisation pour acc\u00e9der \u00e0 ma boutique</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Brought up concerns from the other chat - Express payments not showing</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Dans la capture d'\u00e9cran que vous avez envoy\u00e9e, la candidature semble \u00eatre en fran\u00e7ais, \u00e0 l'exception de quelques champs, dont j'informerai mon responsable.</p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">Quant \u00e0 votre autre question, je l'ai abord\u00e9e dans l'autre chat!</p>\n<div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/900403570/d091a195a962f253e73efcd4/image.png\"></div>\nadmin_Jordan Falconer: <p class=\"no-margin\">In the screenshot you've sent the application does appear to be in French, with the exception of a couple fields, which I'll notify my manager about. </p>\n<p class=\"no-margin\"></p>\n<p class=\"no-margin\">As for your other question, I have addressed it in the other chat!</p>\nuser_KANINA CUISINE: <p>j'ai accept\u00e9 l'acc\u00e8s</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">collab accepted</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Super! Notre \u00e9quipe technique se penchera sur la question dans les plus brefs d\u00e9lais !</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Great! Our technical team will have a look into the matter as soon as possible!</p>\nuser_KANINA CUISINE: <p>merci</p>\nadmin_Jordan Falconer: <p class=\"no-margin\">Pas de soucis!</p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2466/upcart-ui-translations-arent-very-accurate\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2466</a> was linked to the conversation </p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2466/upcart-ui-translations-arent-very-accurate\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2466</a>: </p>\n<p>@landon is <a href=\"https://linear.app/beam-commerce/issue/BEAM-2284/remove-translations-of-dashboard-content-upcart\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2284</a> related and/or cancelling this?</p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2466/upcart-ui-translations-arent-very-accurate\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2466</a> moved to status <b>Canceled</b> by Landon Fuhr </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2284/remove-translations-of-dashboard-content-upcart\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2284</a> moved to status <b>In Progress</b> by Landon Fuhr </p>\nadmin_Jordan Falconer: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2284/remove-translations-of-dashboard-content-upcart\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2284</a>: </p>\n<p>@landon Should we changelog this in case support gets increased tickets asking about missing translations?</p>\nadmin_Jordan Falconer: <p><b>Landon Fuhr</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2284/remove-translations-of-dashboard-content-upcart\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2284</a>: </p>\n<p>Good point, thanks!</p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2284/remove-translations-of-dashboard-content-upcart\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2284</a> moved to status <b>In Review</b> by Landon Fuhr </p>\nadmin_Jordan Falconer: <p><b>Application</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2284/remove-translations-of-dashboard-content-upcart\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2284</a>: </p>\n<p>\u26a1\ufe0f GitHub Commit \u26a1\ufe0f <a href=\"https://github.com/beam-commerce/UpCart-2.0/commit/0e05810de1768c8411e6baf43f2d892c2d401ce5\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">Merge pull request #420 from beam-commerce/landon/beam-2284-remove-translations-of-dashboard-content-upcart</a> by Landon Fuhr</p>\nadmin_Jordan Falconer: <p><b>Application</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2284/remove-translations-of-dashboard-content-upcart\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2284</a>: </p>\n<p>\u26a1\ufe0f GitHub Commit \u26a1\ufe0f <a href=\"https://github.com/beam-commerce/UpCart-2.0/commit/52022dfabb7f55907144aa69d40ce667ed644ede\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">chore(client): remove all uses of <code>t()</code> [BEAM-2284]</a></p>\n<pre><code>t()</code></pre>\n<p>by Landon Fuhr</p>\nadmin_Jordan Falconer: <p><b>Application</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2284/remove-translations-of-dashboard-content-upcart\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2284</a>: </p>\n<p>\u26a1\ufe0f GitHub Commit \u26a1\ufe0f <a href=\"https://github.com/beam-commerce/UpCart-2.0/commit/a9721182f84ea8cbbc1d7fd60c83540fd918251d\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">chore(client): remove language picker [BEAM-2284]</a> by Landon Fuhr</p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2284/remove-translations-of-dashboard-content-upcart\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2284</a> moved to status <b>Production Ready</b> by Landon Fuhr </p>\nadmin_Jordan Falconer: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2284/remove-translations-of-dashboard-content-upcart\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2284</a> moved to status <b>Done</b> by Opey Adeyemi </p>\nadmin_Patti Rendall: <p class=\"no-margin\">Bonjour! Je voulais vous faire savoir que ce probl\u00e8me a \u00e9t\u00e9 r\u00e9solu pour vous. S'il vous pla\u00eet laissez-nous savoir si nous pouvons vous aider avec autre chose !</p>\nadmin_Patti Rendall: <div class=\"intercom-container\"><img src=\"https://downloads.intercomcdn.com/i/o/928187791/42c71f714dfa702482a37a46/image.png\"></div>\n",
            "placeholder_tag": "conversation_customer_1",
            "content_type": "ExternalAssetsType.CONVERSATION_CUSTOMER"
        }
    ],
    "inline_assets": [],
    "linked_issue_ids": [],
    "comments": [],
    "issue_summary": "Error Messages:\n- No explicit error messages provided.\n\nFunction and Variable Names:\n- `t()` function (removed)\n- Language picker (removed from client codebase)\n\nTechnical Descriptions:\n- Automatic translations of the dashboard were inaccurate.\n- Translations have been removed; the app will always be in English now.\n- Issue with translating \"Hello\" to \"Bonjour\" and receiving a test message in English.\n- Issue with PayPal not appearing on the site despite authorization.\n- BEAM-2466 related to inaccurate UpCart UI translations (canceled).\n- BEAM-2284 related to removing translations of dashboard content (moved to \"In Progress\" and marked as \"Done\").\n\nAdditional Context:\n- UpCart settings navigation path: Cart Editor > Settings > Translations.\n- Custom HTML and Custom CSS sections mentioned in relation to the translations dropdown.\n- GitHub commits indicate changes made to resolve BEAM-2284.\n- Suggestion for a changelog entry due to potential support tickets from missing translations.",
    "repo_summary": "The project is a Shopify app called UpCart 3.0 with various components and directories:\n\n1. The project structure includes directories like `web`, `common`, `chrome-extensions`, and `storefront-tester`.\n2. File types include `.md`, `.js`, `.toml`, `.lock`, `.json`, `.ts`, `.tsx`, `.scss`, `.svg`, `.png`, and others.\n3. Configuration files like `package.json` define scripts for Shopify CLI, deployment, testing, and setup.\n4. Dependencies include packages for Shopify, GraphQL, React, Redux, TypeScript, and more.\n5. Documentation includes specifications for Subscription Upgrades, Discount Codes Module, and default metafields.\n6. Code snippets show components like TranslationsSettings, service worker setup, and billing plan options.\n\nThe issue at hand involves removing inaccurate translations from the dashboard content due to language discrepancies affecting user experience. The translations have been removed to ensure the app is always in English.",
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1714390369.72272,
        "classification": "bug",
        "initial_code_snippets": [
            {
                "code": "{\n  upcartSettings: {\n    cartPosition: { type: 'single_line_text_field', value: 'right' },\n    disableSticky: { type: 'boolean', value: false },\n    openOnAddToCart: { type: 'boolean', value: true },\n    redirectToCart: { type: 'boolean', value: false },\n    translations: {\n      type: 'json',\n      value: {\n        cartTitle: 'Cart \u2022 {{cart_quantity}}',\n        checkout: 'Checkout \u2022 {{total_price}}',\n        addText: 'Add',\n        emptyCart: 'Your cart is empty',\n        discountSavings: 'Save',\n        continueShopping: 'Or continue shopping',\n        /** This was changed from being overall savings to only the savings from discounts. (ignore compare-at prices) */\n        totalSavings: 'Discounts',\n      },\n    },\n    htmlFields: {\n      type: 'json',\n      value: {\n        aboveFooter: '',\n        aboveHeader: '',\n        belowHeader: '',\n        betweenLineItems: '',\n        aboveCheckoutButton: '',\n        belowCheckoutButton: '',\n        bottomOfCart: '',\n        onEmptyCart: '',\n        scriptsBeforeLoad: '',\n      },\n    },\n    /** This field has been changed to mean \"show savings below price for products\". This includes compare-at prices */\n    automaticDiscount: { type: 'boolean', value: true },\n    basePriceForDiscount: { type: 'boolean', value: false },\n    hideSingleUnderscoredProperties: { type: 'boolean', value: false },\n    showContinueShoppingButton: { type: 'boolean', value: false },\n    ajaxRaceConditionPrevention: { type: 'boolean', value: false },\n    htmlFieldForceReRender: { type: 'boolean', value: false },\n    updateItemIdentifier: { type: 'single_line_text_field', value: 'key' as ItemIdentifier },\n    customCSS: { type: 'multi_line_text_field', value: '*{}' },\n    customStickyCartCSS: { type: 'multi_line_text_field', value: '*{}' },\n    integrationZapietEnabled: { type: 'boolean', value: false },\n    integrationYmqEnabled: { type: 'boolean', value: false },\n  },",
                "filename": "common/defaultMetafields.ts",
                "start_index": 13016,
                "end_index": 14936,
                "start_line": 1,
                "end_line": 556,
                "max_line": 567,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n                    title: t('Activate UpCart'),\n                    description: t(`Activate the UpCart app embed block in your Theme editor. Find it in Theme settings > App embeds. Don't forget to press save.`), // prettier-ignore\n                    badge: {\n                      children: themeData?.theme && !themeData.theme.embedEnabled ? t('Required') : t('Completed'),\n                      status: themeData?.theme && !themeData.theme.embedEnabled ? t('critical') : t('success'),\n                    },\n                    action: {\n                      content: t('Open Theme Settings'),\n                      onAction: () => {\n                        window.open(themeEditorDeepLink, '_blank').focus();\n                      },\n                    },\n                  },\n                  {\n                    title: t('Match your brand design'),\n                    badge: designChanged\n                      ? {\n                          children: t('Completed'),\n                          status: t('success'),\n                        }\n                      : undefined,\n                    description: t('UpCart comes with great defaults but every brand is different. Hop into the cart editor and use the design options to match your brand.'), // prettier-ignore\n                    action: {\n                      content: t('Open Cart Editor'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=design`);\n                      },\n                    },\n                  },\n                  {\n                    title: t('Add Upsells'),\n                    badge: {\n                      children: editorData.upsellsModule ? t('Completed') : t('Recommended'),\n                      status: editorData.upsellsModule ? t('success') : t('info'),\n                    },\n                    description: t(\"Boost your AOV by using UpCart's high converting upsell offers. Head over to the cart editor to add upsells to your cart drawer.\"), // prettier-ignore\n                    action: {\n                      content: t('Add Upsells'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=upsells`);\n                      },\n                    },\n                  },",
                "filename": "web/src/@templates/Home/Home.tsx",
                "start_index": 5120,
                "end_index": 7444,
                "start_line": 1,
                "end_line": 222,
                "max_line": 260,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const PARTNER_APPS: Omit<IHomePageApps, 'maxWidth'>[] = [\n  {\n    key: '1',\n    status: false,\n    description: 'The #1 Shopify reviews app to double your conversation, manage reviews, and more.',\n    title: 'Trustoo.io Product Reviews',\n    setupTime: '5 min setup time',\n    image: '/images/Trustoo Logo.png',\n    review: '',\n    url:\n      'https://apps.shopify.com/sealapps-product-review?from=BEAM&utm_campaign=crossPromote&utm_medium=inapp&utm_source=BEAM',\n  },\n  {\n    key: '2',\n    status: false,\n    description: `Make much more profits with the power of WideBundle's offers ! Boost your CR and AOV (+30%).`,\n    title: 'Wide Bundles \u2011 Quantity Breaks',\n    setupTime: '5 min setup time',\n    image: '/images/wide bundle.png',\n    review: '',\n    url: 'https://apps.shopify.com/widebundle?from=BEAM&utm_campaign=crossPromote&utm_medium=inapp&utm_source=BEAM',\n  },\n  {\n    key: '3',\n    status: false,\n    description: `Set up predetermined discounts and capture motivated shoppers' strong purchase intent, so you never again let pricing turn away a buyer.`,\n    title: '60 seconds',\n    setupTime: '5 min setup time',\n    image: '/images/60s-honey.png',\n    review: '',\n    url: 'https://apps.shopify.com/60seconds?from=BEAM&utm_campaign=crossPromote&utm_medium=inapp&utm_source=BEAM',\n  },\n  {\n    key: '4',\n    status: false,\n    description: `Unleash your advertising potential with Lebesgue. Make smarter data-driven decisions, and boost your profit and marketing ROI.`,\n    title: 'Lebesgue: Marketing & LTV',\n    setupTime: '5 min setup time',\n    image: '/images/lebesgue.png',\n    review: '',\n    url:\n      'https://apps.shopify.com/advertising-insights?from=BEAM&utm_campaign=crossPromote&utm_medium=inapp&utm_source=BEAM',\n  },\n];\n\nexport const INTERCOM_MESSAGES = {\n  customizing: 'Hi! I would like help customizing UpCart',\n  features: \"Hi! Please add me to the beta for UpCart's new features!\",\n  error: 'Hi! I have an error in the module',\n  expert: \"Hi! I'm looking for an expert to help design my UpCart!\",\n  sticky_plan: \"Hi! I'm looking for a sticky cart only plan!\",\n};\n\nexport const CREATE_RECURRING_CHARGE_VARIABLES = {\n  lineItems: [\n    {\n      plan: {\n        appRecurringPricingDetails: {\n          price: {\n            amount: 14.99,\n            currencyCode: 'USD',\n          },\n          interval: 'EVERY_30_DAYS',\n        },\n      },\n    },\n  ],\n  name: 'GROWTH',\n};\n\nexport c",
                "filename": "web/src/@constants/index.ts",
                "start_index": 2338,
                "end_index": 4755,
                "start_line": 89,
                "end_line": 310,
                "max_line": 457,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { InputField } from '@components/common/FormField';\nimport { useCurrentShop } from '@providers/shopContext';\nimport { Collapsible, LegacyStack } from '@shopify/polaris';\nimport { Field } from 'formik';\nimport get from 'lodash/get';\nimport { useMemo } from 'react';\n\nconst TranslationsSettings = ({ open }) => {\n  const { shop: shopDb } = useCurrentShop();\n  const upsellModuleIsEnabled = useMemo(() => get(shopDb, 'shop.featureFlags.upsellModuleIsEnabled', null), [shopDb]);\n\n  return (\n    <Collapsible\n      open={open}\n      id=\"basic-collapsible\"\n      transition={{ duration: '500ms', timingFunction: 'ease-in-out' }}\n      expandOnPrint\n    >\n      <LegacyStack vertical spacing=\"tight\">\n        <Field\n          id=\"upcartSettings.translations.cartTitle\"\n          name=\"upcartSettings.translations.cartTitle\"\n          label=\"Cart title\"\n          helpText={'Use {{cart_quantity}} for the # of items in cart'}\n          component={InputField}\n        />\n        <Field\n          id=\"upcartSettings.translations.checkout\"\n          name=\"upcartSettings.translations.checkout\"\n          label=\"Checkout\"\n          helpText={'Use {{total_price}} to display the total price'}\n          component={InputField}\n        />\n        {upsellModuleIsEnabled && (\n          <Field\n            id=\"upcartSettings.translations.addText\"\n            name=\"upcartSettings.translations.addText\"\n            label=\"Add text (Upsells Module)\"\n            component={InputField}\n          />\n        )}\n        <Field\n          id=\"upcartSettings.translations.emptyCart\"\n          name=\"upcartSettings.translations.emptyCart\"\n          label=\"Your cart is empty\"\n          component={InputField}\n        />\n        <Field\n          id=\"upcartSettings.translations.discountSavings\"\n          name=\"upcartSettings.translations.discountSavings\"\n          label=\"Automatic discount savings\"\n          component={InputField}\n        />\n        <Field\n          id=\"upcartSettings.translations.totalSavings\"\n          name=\"upcartSettings.translations.totalSavings\"\n          label=\"Total discount savings\"\n          component={InputField}\n        />\n        <Field\n          id=\"upcartSettings.translations.continueShopping\"\n          name=\"upcartSettings.translations.continueShopping\"\n          label=\"Continue shopping\"\n          component={InputField}\n        />\n      </LegacyStack>\n    </Collapsible>\n  );\n};\n\nexport default TranslationsSettings;",
                "filename": "web/src/@templates/CartEditor/Settings/TranslationsSettings.tsx",
                "start_index": 0,
                "end_index": 2441,
                "start_line": 1,
                "end_line": 71,
                "max_line": 71,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<LegacyCard title={t('Have questions?')}>\n          <LegacyCard.Section>\n            {t('Reach out to our support team who can answer questions about UpCart!')}\n          </LegacyCard.Section>\n          <LegacyCard.Section subdued>\n            <Button fullWidth onClick={() => showNewMessages()}>\n              {t('Contact Support')}\n            </Button>\n          </LegacyCard.Section>\n        </LegacyCard>\n        <LegacyCard title={t('Public API')}>\n          <LegacyCard.Section>\n            {' '}\n            {t(`Learn about all of the currently available variables and functions in the UpCart public API. These are\n            designed to be used by developers for custom integrations.`)}\n          </LegacyCard.Section>\n          <LegacyCard.Section subdued>\n            <Button\n              fullWidth\n              onClick={() =>\n                window.open(\n                  'https://aftersell.notion.site/UpCart-Public-API-7a0f6d75cb044871bdb6da5d99cfc755',\n                  '_blank',\n                )\n              }\n            >\n              {t(`Public API`)}\n            </Button>\n          </LegacyCard.Section>\n        </LegacyCard>\n        <LegacyCard title={t('Privacy Policy')}>\n          <LegacyCard.Section>{t(`UpCart's privacy policy.`)}</LegacyCard.Section>\n          <LegacyCard.Section subdued>\n            <Button fullWidth onClick={() => window.open('https://upcart.app/privacy', '_blank')}>\n              {t(`Privacy Policy`)}\n            </Button>\n          </LegacyCard.Section>\n        </LegacyCard>\n        <LegacyCard title={t('Acknowledgements')}>\n          <LegacyCard.Section>\n            {t(`Licenses for open source software included in UpCart's dashboard.`)}\n          </LegacyCard.Section>\n          <LegacyCard.Section subdued>\n            <Button fullWidth onClick={() => window.open('https://slide.upcart.app/licenses/web.txt', '_blank')}>\n              {t(`Acknowledgements`)}\n            </Button>\n          </LegacyCard.Section>\n        </LegacyCard>\n      </Layout.Section>\n    </Layout>\n  );\n};\n\nexport default TutorialsWithDefaultLayout;",
                "filename": "web/src/@templates/Tutorials/Tutorials.tsx",
                "start_index": 2974,
                "end_index": 5067,
                "start_line": 86,
                "end_line": 139,
                "max_line": 139,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n                    title: t('Add Rewards'),\n                    badge: editorData.rewardsModule\n                      ? {\n                          children: t('Completed'),\n                          status: t('success'),\n                        }\n                      : undefined,\n                    description: t('Add a rewards module to offer urge customers to shop more. Create a free shipping bar, offer a free gift, or other rewards.'), // prettier-ignore\n                    action: {\n                      content: t('Add Rewards'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=rewards`);\n                      },\n                    },\n                  },\n                  {\n                    title: t('Confirm UpCart Compatibility'),\n                    description: t(\"Although UpCart uses standard Shopify technologies, not all apps do. Ensure any other apps you're using function as expected.\"), // prettier-ignore\n                  },\n                  // {\n                  //   title: t('Sell more with AfterSell \ud83d\udcb8'),\n                  //   description: t(\"AfterSell enables checkout and post-purchase upsells. It's a great way to increase your AOV and sell more. Learn more about AfterSell and get a free trial.\"), // prettier-ignore\n                  //   action: {\n                  //     content: t('Boost my Sales'),\n                  //     onAction: () => {\n                  //       navigate(ROUTE_OBJECTS.AFTERSELL_AD.url);\n                  //     },\n                  //   },\n                  // },\n                ]}",
                "filename": "web/src/@templates/Home/Home.tsx",
                "start_index": 7463,
                "end_index": 9094,
                "start_line": 1,
                "end_line": 233,
                "max_line": 260,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n      BASIC_FREE: {\n        heading: {\n          title: 'BASIC',\n          subtitle: 'Free',\n        },\n        features: ['Design Settings', 'Announcements Module'],\n        button: {\n          id: 'BASIC',\n          active: acceptedUpcartPlanId === 'BASIC_FREE',\n          onClick: () => acceptBillingPlan('BASIC_FREE'),\n          loading: loading,\n          activateText: 'Downgrade',\n        },\n      },\n      GROWTH_FLAT_1499_NO_USAGE: {\n        heading: {\n          title: 'BASIC',\n          subtitle: '$14.99/month',\n        },\n        features: [\n          'Design Settings',\n          'Announcements Module',\n          'Upsells Module',\n          'Rewards Module',\n          'Add-ons Module',\n          'Custom HTML and CSS',\n          'Sticky Cart Button',\n        ],\n        button: {\n          id: 'GROWTH',\n          active: acceptedUpcartPlanId === 'GROWTH_FLAT_1499_NO_USAGE',\n          onClick: () => acceptBillingPlan('GROWTH_FLAT_1499_NO_USAGE'),\n          loading: loading,\n          activateText: activeSubscriptionName === 'ENTERPRISE' ? 'Select' : 'Upgrade',\n          activateIsPrimary: true,\n        },\n      },\n      GROWTH_FLAT_1499_PLUS_USAGE_TO_9999: {\n        heading: {\n          title: 'GET STARTED FROM',\n          subtitle: '$14.99/month',\n          subheaderLink: {\n            content: 'See full pricing breakdown',\n            onClick: () => {\n              setPricingModalIsOpenV1(true);\n            },\n          },\n        },\n        features: [\n          'Design Settings',\n          'Announcements Module',\n          'Upsells Module',\n          'Rewards Module',\n          'Add-ons Module',\n          'Custom HTML and CSS',\n          'Sticky Cart Button',\n        ],\n        button: {\n          id: 'GROWTH',\n          active: acceptedUpcartPlanId === 'GROWTH_FLAT_1499_PLUS_USAGE_TO_9999',\n          onClick: () => acceptBillingPlan('GROWTH_FLAT_1499_PLUS_USAGE_TO_9999'),\n          loading: loading,\n          activateText: activeSubscriptionName === 'ENTERPRISE' ? t('Select') : t('Upgrade'),\n          activateIsPrimary: true,\n        },\n      },",
                "filename": "web/src/@templates/YourPlan/YourPlan.tsx",
                "start_index": 2846,
                "end_index": 4938,
                "start_line": 1,
                "end_line": 178,
                "max_line": 286,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "GROWTH_FLAT_1499_PLUS_USAGE_TO_19999: {\n        heading: {\n          title: 'GET STARTED FROM',\n          subtitle: '$14.99/month',\n          subheaderLink: {\n            content: 'See full pricing breakdown',\n            onClick: () => {\n              setPricingModalIsOpenV2(true);\n            },\n          },\n        },\n        features: [\n          'Design Settings',\n          'Announcements Module',\n          'Upsells Module',\n          'Rewards Module',\n          'Add-ons Module',\n          'Custom HTML and CSS',\n          'Sticky Cart Button',\n        ],\n        button: {\n          id: 'GROWTH',\n          active: acceptedUpcartPlanId === 'GROWTH_FLAT_1499_PLUS_USAGE_TO_19999',\n          onClick: () => acceptBillingPlan('GROWTH_FLAT_1499_PLUS_USAGE_TO_19999'),\n          loading: loading,\n          activateText: activeSubscriptionName === 'ENTERPRISE' ? t('Select') : t('Upgrade'),\n          activateIsPrimary: true,\n        },\n      },\n      ENTERPRISE: {\n        heading: {\n          title: 'ENTERPRISE',\n          subtitle: '$299/month',\n        },\n        features: [\n          'Design Settings',\n          'Announcements Module',\n          'Upsells Module',\n          'Rewards Module',\n          'Add-ons Module',\n          'Custom HTML and CSS',\n          'Sticky Cart Button',\n          'Priority Technical Support',\n        ],\n        button: {\n          id: 'ENTERPRISE',\n          active: acceptedUpcartPlanId === 'ENTERPRISE_FLAT_29900_NO_USAGE',\n          onClick: () => acceptBillingPlan('ENTERPRISE_FLAT_29900_NO_USAGE'),\n          loading: loading,\n          activateText: 'Select',\n          activateIsPrimary: false,\n        },\n      },\n    }",
                "filename": "web/src/@templates/YourPlan/YourPlan.tsx",
                "start_index": 4945,
                "end_index": 6619,
                "start_line": 126,
                "end_line": 266,
                "max_line": 286,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<Button\n                    primary\n                    size=\"large\"\n                    url=\"https://apps.shopify.com/upcart-cart-builder?source=aftersell-app-upcart-landing-page\"\n                    external\n                  >\n                    {t('Claim free trial') as string}\n                  </Button>\n                  <LegacyStack alignment=\"center\" spacing=\"extraTight\">\n                    <Reviews title={''} />\n                    <p style={{ fontSize: '18px', fontWeight: 'bolder', paddingBottom: '2px', marginLeft: '4px' }}>\n                      5.0 (500+ Reviews)\n                    </p>\n                  </LegacyStack>\n                  <br />\n                </LegacyStack>\n              </LegacyStack>\n\n              <div className={styles.mainImage}>\n                <img src=\"https://i.ytimg.com/vi_webp/P3xyRIPRh6A/maxresdefault.webp\" />\n              </div>\n            </div>\n          </Layout.Section>\n          <Layout.Section fullWidth>\n            <LegacyStack vertical spacing=\"extraLoose\">\n              <LegacyStack distribution=\"fillEvenly\">\n                <div className={styles.contentImage}>\n                  <img src={upCartBenefitsMap[0].postPurchaseUpsellImage} />\n                </div>\n                <LegacyStack vertical>\n                  <Heading>\n                    <h3 style={{ fontSize: '20px', fontWeight: 'bold', marginTop: '5px' }}>\n                      {upCartBenefitsMap[0].postPurchaseUpsell}\n                    </h3>\n                  </Heading>\n                  <LegacyStack vertical>\n                    <CheckmarkBenefit benefit=\"One Click Upsell Funnels\" />\n                    <CheckmarkBenefit benefit=\"Deep offer targeting with triggers\" />\n                    <CheckmarkBenefit benefit=\"AI recommended offers\" />\n                    <CheckmarkBenefit benefit=\"A/B test offers\" />\n                  </LegacyStack>\n                </LegacyStack>\n              </LegacyStack>\n              <LegacyStack distribution=\"fillEvenly\">\n                <LegacyStack vertical>\n                  <Heading>\n                    <h3 style={{ fontSize: '20px', fontWeight: 'bold', marginTop: '5px' }}>\n                      {upCartBenefitsMap[1].thankYouPage}\n                    </h3>\n                  </Heading>\n                  <LegacyStack vertical>\n                    <CheckmarkBenefit benefit=\"Product recommendations & storewide discount popup\" />\n                    <CheckmarkBenefit benefit=\"FAQs & reviews\" />\n                    <CheckmarkBenefit benefit=\"Images and videos\" />\n                  </LegacyStack>\n                </LegacyStack>\n                <div className={styles.contentImage}>\n                  <img src={upCartBenefitsMap[1].thankYouPageImage} />\n                </div>\n              </LegacyStack>\n              <LegacyStack distribution=",
                "filename": "web/src/@templates/AfterSellAd/AfterSellAd.tsx",
                "start_index": 2946,
                "end_index": 5780,
                "start_line": 79,
                "end_line": 139,
                "max_line": 163,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "onst YOUR_PLAN_TABLE = {\n  plans: [\n    {\n      title: 'BASIC',\n      subtitle: 'Free',\n    },\n    {\n      title: 'GROWTH',\n      subtitle: '$14.99/month',\n    },\n  ],\n  rows: [\n    {\n      feature: 'Design Settings',\n      basic: true,\n      growth: true,\n    },\n    {\n      feature: 'Announcements Module',\n      basic: true,\n      growth: true,\n    },\n    {\n      feature: 'Upsells Module',\n      basic: false,\n      growth: true,\n    },\n    {\n      feature: 'Rewards Module',\n      basic: false,\n      growth: true,\n    },\n    {\n      feature: 'Add-ons Module',\n      basic: false,\n      growth: true,\n    },\n    {\n      feature: 'Priority support',\n      basic: false,\n      growth: true,\n    },\n    {\n      feature: 'Custom HTML and CSS',\n      basic: false,\n      growth: true,\n    },\n    {\n      feature: 'Sticky Cart Button',\n      basic: false,\n      growth: true,\n    },\n  ],\n};\n\nexport const IS_UPCART_ADMIN = 'is_upcart_admin';\n\nexport const HIDE_INTERCOM_SESSION_STORAGE_KEY = 'upcart-hide-intercom';\n\nexport const SURVEY_OPTIONS = [\n  { label: '---Please Select---', value: 'please_select' },\n  { label: 'Search Engine (Google, etc.)', value: 'search_engine' },\n  { label: 'Blog', value: 'blog' },\n  { label: 'YouTube', value: 'youtube' },\n  { label: 'TikTok', value: 'tiktok' },\n  { label: 'Facebook/Instagram', value: 'facebook_instagram' },\n  { label: 'Reddit', value: 'reddit' },\n  { label: 'Twitter', value: 'twitter' },\n  { label: 'Shopify Plus Referral', value: 'shopify_plus_referral' },\n  { label: 'Shopify App Store', value: 'app_store' },\n  { label: 'AfterSell', value: 'aftersell' },\n  { label: 'Agency Referral', value: 'agency_referral' },\n  { label: 'From a Friend', value: 'word_of_mouth' },\n  { label: 'Other', value: 'other' },\n];\n\nexport const NO_HREF = 'javascript:;';\n\ninterface RouteObject {\n  url: string;\n  secondaryUrl?: string;\n  label: string;\n  sidebar: boolean;\n}\n\ntype AppRoutes =\n  | 'HOME'\n  | 'ONBOARDING'\n  | 'STICKY_CART'\n  | 'CART_EDITOR'\n  | 'ANALYTICS'\n  | 'YOUR_PLAN'\n  | 'TUTORIALS'\n  | 'ADMIN'\n  | 'LOGOUT'\n  | 'AFTERSELL_AD';\n\nexport c",
                "filename": "web/src/@constants/index.ts",
                "start_index": 4755,
                "end_index": 6847,
                "start_line": 159,
                "end_line": 310,
                "max_line": 457,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "'Select the express payment gateways to show in cart.')}\n            </Text>\n            <Text as=\"p\" variant=\"bodyMd\" color=\"subdued\">\n              {t(`Some gateways may be hidden in the real cart if they are not enabled on your store, or if the customer is\n              not eligible for the gateway. For more information on enabling additional gateways and customer\n              eligibility criteria`)}\n              ,{' '}\n              <Link target=\"_blank\" url=\"https://help.shopify.com/en/manual/payments/accelerated-checkouts\">\n                {t(`visit Shopify's documentation`)}\n              </Link>\n              .\n            </Text>\n          </VerticalStack>\n          <LegacyStack distribution=\"fill\">\n            <Text as=\"h3\" variant=\"headingSm\">\n              Gateway\n            </Text>\n            <LegacyStack distribution=\"trailing\">\n              <Text as=\"h3\" variant=\"headingSm\">\n                Ordering\n              </Text>\n            </LegacyStack>\n          </LegacyStack>\n        </LegacyStack>\n      </LegacyCard.Section>\n      <LegacyCard.Section>\n        {enabledGatewayOptions.map((gateway, i) => (\n          <LegacyCard.Subsection key={gateway.id}>\n            <GatewayOptionRow\n              gatewayId={gateway.id}\n              gatewayDisplayName={gateway.displayName}\n              gatewayLogoSrc={gateway.logoSrc}\n              isEnabled={true}\n              onToggle={() => {\n                setFieldValue(\n                  'upcartEditorSettings.expressPayEnabledGateways',\n                  enabledGatewayKeys.filter((id) => id !== gateway.id),\n                );\n              }}\n              trailingContent={\n                <UpDownButtons\n                  upAllowed={i !== 0}\n                  downAllowed={i < enabledGatewayOptions.length - 1}\n                  onUp={() => {\n                    const newGatewayKeys = [...enabledGatewayKeys];\n                    const temp = newGatewayKeys[i];\n                    newGatewayKeys[i] = newGatewayKeys[i - 1];\n                    newGatewayKeys[i - 1] = temp;\n                    setFieldValue('upcartEditorSettings.expressPayEnabledGateways', newGatewayKeys);\n                  }}\n                  onDown={() => {\n                    const newGatewayKeys = [...enabledGatewayKeys];\n                    const temp = newGatewayKeys[i];\n                    newGatewayKeys[i] = newGatewayKeys[i + 1];\n                    newGatewayKeys[i + 1] = temp;\n                    setFieldValue('upcartEditorSettings.expressPayEnabledGateways', newGatewayKeys);\n                  }}\n                />\n              }\n            />\n          </LegacyCard.Subsection>\n        ))}\n      </LegacyCard.Section>\n      <LegacyCard.Section>\n        {disabledGatewayOptions.map((gateway) => (",
                "filename": "web/src/@templates/CartEditor/ExpressPayModule/ExpressPayModule.tsx",
                "start_index": 2989,
                "end_index": 5765,
                "start_line": 86,
                "end_line": 150,
                "max_line": 168,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "cartIsEnabled: { type: 'boolean', value: true },\n\n    // Design Settings\n    settingsModule: {\n      type: 'json',\n      value: {\n        fields: {\n          /**\n           * This field has changed to mean \"show strikethrough prices\". This means that we also show the strikethrough\n           * if there is a discount applied to an item, even if the item doesn't have a compare-at price.\n           */\n          compareAtPrice: true,\n          inheritFonts: true,\n          backgroundColor: '#FFFFFF',\n          cartAccentColor: '#f6f6f7',\n          buttonColor: '#000000',\n          buttonTextColor: '#FFFFFF',\n          buttonTextHoverColor: '#e9e9e9',\n          cartTextColor: '#000000',\n        },\n      },\n    },\n\n    // Announcements Module\n    announcementModule: { type: 'boolean', value: false },\n    announcementEditor: {\n      type: 'multi_line_text_field',\n      value: '<p>Your products are reserved for <b>{TIMER}</b> minutes!</p>',\n    },\n    announcementBackgroundColor: { type: 'single_line_text_field', value: '#CDE0E0' },\n    announcementModulePosition: { type: 'single_line_text_field', value: 'top' },\n    announcementBorderColor: { type: 'single_line_text_field', value: '#C5E6FD' },\n    announcementTimer: { type: 'single_line_text_field', value: '00:00' },\n\n    // Rewards Module\n    rewardsModule: { type: 'boolean', value: false },\n    rewardsBarBackgroundColor: { type: 'single_line_text_field', value: '#E2E2E2' },\n    rewardsBarForegroundColor: { type: 'single_line_text_field', value: '#93D3FF' },\n    rewardsBasis: { type: 'single_line_text_field', value: 'cartTotal' },\n    rewardsTargetType: { type: 'single_line_text_field', value: 'productsOrOrder' },\n    rewardsMinAmount: { type: 'single_line_text_field', value: '125' },\n    rewardsEditor: {\n      type: 'multi_line_text_field',\n      value: '<p>You\u2019re <b>{AMOUNT}</b> away from free shipping!</p>',\n    },\n    rewardsEditorAfterText: { type: 'multi_line_text_field', value: 'Free shipping unlocked!' },\n    rewardsEditorForItemCount: {\n      type: 'multi_line_text_field',\n      value: '<p>You\u2019re <b>{COUNT}</b> products away from free shipping!</p>',\n    },\n    rewardsItemCount: { type: 'single_line_text_field', value: '5' },\n    rewardsTiers: {\n      type: 'json',\n      value: { tiers: [], geoLocationPricing: [], rewardsAutoConvertCurrency: false, rewardsGeoLocationEnabled: false },\n    },\n    rewardsTierProducts: { type: 'json', value: [] },\n    rewardsShowIconWithSingleTier: { type: 'boolean', value: false },\n\n    // Upsells Module\n    upsellsModule: { type: 'boolean', value: false },\n    upsellsDirection: { type: 'single_line_text_field', value: 'horizontal' },\n    upsellsTitle: { type: 'multi_line_text_field', value: \"You'll love these\" },\n    maximumUpsellsToShow: { type: 'single_line_text_field', value: '10' },\n    upsellsShouldLimit: { type: 'boolean', value: false },\n    upsellsTrigger: { type: 'boolean', value: false },\n    sho",
                "filename": "common/defaultMetafields.ts",
                "start_index": 14968,
                "end_index": 17911,
                "start_line": 417,
                "end_line": 482,
                "max_line": 567,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "function setupLiveSettingsSyncWithUpCartAdminDashboard(/** @type {chrome.runtime.Port} */ port) {\n  if (port.name !== 'upcart') return;\n  port.onMessage.addListener((msg) => {\n    if (msg.type === 'INITIALIZE') {\n      port.postMessage({ type: 'INITIALIZE_SUCCESS' });\n    }\n    if (msg.type === 'UPDATE_UPCART_SETTINGS') {\n      // REQUIRED_PERMISSIONS: \"storage\"\n      chrome.storage.local.set({ [STORAGE_KEYS.UPCART_SETTINGS]: msg.payload }).then(() => {\n        port.postMessage({ type: 'UPDATE_UPCART_SETTINGS_SUCCESS' });\n      });\n    }\n  });\n}\n\nasync function handleCommandToggleCustomizationMode() {\n  const activeTabId = await getActiveTabId();\n  // REQUIRED_PERMISSIONS: \"storage\"\n  const storage = await chrome.storage.local.get();\n\n  /** @type {Set<number>} */\n  const customizationModeActiveTabIds = new Set(storage[STORAGE_KEYS.CUSTOMIZATION_MODE_ACTIVE_TAB_IDS] ?? []);\n  if (customizationModeActiveTabIds.has(activeTabId)) {\n    customizationModeActiveTabIds.delete(activeTabId);\n  } else {\n    customizationModeActiveTabIds.add(activeTabId);\n  }\n  // REQUIRED_PERMISSIONS: \"storage\"\n  await chrome.storage.local.set({\n    [STORAGE_KEYS.CUSTOMIZATION_MODE_ACTIVE_TAB_IDS]: Array.from(customizationModeActiveTabIds),\n  });\n\n  blockRealAppEmbedAssetsOnCustomizationActiveTabs({ customizationModeActiveTabIds });\n\n  chrome.tabs.reload(activeTabId);\n}\n\nasync function handleCommandDevRefresh() {\n  const activeTabId = await getActiveTabId();\n\n  chrome.runtime.reload();\n  chrome.tabs.reload(activeTabId);\n}\n\nfunction blockRealAppEmbedAssetsOnCustomizationActiveTabs(\n  /** @type {{ customizationModeActiveTabIds: Set<number>; }} */ { customizationModeActiveTabIds },\n) {\n  const customizationModeActiveTabIdsArray = Array.from(customizationModeActiveTabIds);\n  // REQUIRED_PERMISSIONS: \"declarativeNetRequest\", \"<all_urls>\" host permission\n  chrome.declarativeNetRequest.updateSessionRules({\n    ...(customizationModeActiveTabIdsArray.length > 0 && {\n      addRules: [\n        {\n          id: URL_BLOCK_RULE_ID,\n          action: {\n            type: /** @type {chrome.declarativeNetRequest.RuleActionType} */ ('block'),\n          },\n          condition: {\n            // Block \"upcart-bundle.js\" and \"upcart-stylesheet.css\"\n            urlFilter: 'https://cdn.shopify.com/extensions/*/assets/upcart-',\n            resourceTypes: /** @type {chrome.declarativeNetRequest.ResourceType[]} */ (['script', 'stylesheet']),\n            tabIds: customizationModeActiveTabIdsArray,\n          },\n        },\n      ],\n    }),\n    removeRuleIds: [URL_BLOCK_RULE_ID],\n  });\n}\n\n/**\n * @returns {Promise<number>}\n */\nasync function getActiveTabId() {\n  // REQUIRED_PERMISSIONS: \"activeTab\"\n  const [activeTab] = await chrome.tabs.query({ active: true, lastFocusedWindow: true });\n  if (!activeTab) {\n    throw new Error('No active tab found.');\n  }\n  if (!activeTab.id) {\n    throw new Error('Active tab has no ID.');\n  }\n  return activeTab.id;\n}",
                "filename": "chrome-extensions/cart-customization/service-worker/service-worker.js",
                "start_index": 2708,
                "end_index": 5650,
                "start_line": 75,
                "end_line": 171,
                "max_line": 178,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import PricingCard from '@components/Card/PricingCard';\nimport { PriceBreakdownModalV2 } from '@components/PriceBreakdownModalV2';\nimport Heading from '@components/common/Heading';\nimport { useAcceptBillingPlan } from '@hooks/useAcceptBillingPlan';\nimport { useTrackInstallSourceFromCookie } from '@hooks/useTrackInstallSourceFromCookie';\nimport { DefaultProviders } from '@providers/DefaultProviders';\nimport { LegacyStack } from '@shopify/polaris';\nimport mixpanel from 'mixpanel-browser';\nimport Image from 'next/image';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styles from './styles.module.scss';\n\nmixpanel.init('af3bf9a64c31a0c35841de17efd8c433');\n\nconst IconText = ({ icon, text }) => {\n  return (\n    <div className={styles.Billing__iconText}>\n      <div className={styles.emojiText}>{icon}</div>\n      <p className={styles.Billing__iconDesc}>{text}</p>\n    </div>\n  );\n};\n\nconst UpgradeUpCartContent: React.FC = () => {\n  const { t } = useTranslation();\n\n  const [pricingModalIsOpen, setPricingModalIsOpen] = useState(false);\n  const { acceptBillingPlan, loading } = useAcceptBillingPlan();\n  useTrackInstallSourceFromCookie();\n\n  useEffect(() => {\n    mixpanel.track('Upgrade UpCart Page was loaded');\n  }, []);\n\n  return (\n    <div className={styles.Billing}>\n      <div className={styles.Billing__leftContainer}>\n        <div className={styles['Billing__leftContainer--wrapper']}>\n          <div className={styles.Billing__header}>\n            <Heading element=\"h2\" marginBottom={30}>\n              {t(`Welcome to UpCart 3.0!`)}\n            </Heading>\n            <LegacyStack wrap distribution=\"center\" alignment=\"center\" spacing=\"baseTight\">\n              <IconText icon={'\ud83e\udd1d'} text=\"4000+ Installs\" />\n              <IconText icon={'\ud83d\udcb8'} text=\"$2M+ GENERATED\" />\n            </LegacyStack>\n            <p style={{ marginTop: '20px', color: '#4d506a' }}>\n              {' '}\n              {t(`Maximize your conversion rate and boost AOV with our new features:`)}\n            </p>\n          </div>\n          <div className={styles.Billing__body} style={{ marginTop: '-60px' }}>\n            <LegacyStack spacing=\"extraLoose\" alignment=\"center\" distribution=\"center\">",
                "filename": "web/src/@templates/UpgradeUpCart/UpgradeUpCart.tsx",
                "start_index": 0,
                "end_index": 2241,
                "start_line": 1,
                "end_line": 54,
                "max_line": 111,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "***********************\n   *** Express Pay Buttons ***\n   ***************************/\n  'upcart-express-pay-buttons-container',\n  'upcart-express-pay-buttons-row',\n  'upcart-express-pay-button',\n  'upcart-express-pay-button-shop-pay',\n  'upcart-express-pay-button-google-pay',\n  'upcart-express-pay-button-paypal',\n  'upcart-express-pay-button-apple-pay',\n  'upcart-express-pay-button-amazon-pay',\n  'upcart-express-pay-button-meta-pay',\n\n  /********************\n   *** Trust Badges ***\n   ********************/\n  'upcart-trust-badge',\n  'upcart-trust-badge-image',\n\n  /****************************\n   *** Out of Stock Warning ***\n   ****************************/\n  'upcart-quantity-warning',\n  'upcart-quantity-warning-text',\n\n  /********************\n   *** Integrations ***\n   ********************/\n  'upcart-integration-zapiet-pickup',\n];",
                "filename": "web/src/@constants/index.ts",
                "start_index": 10859,
                "end_index": 11701,
                "start_line": 421,
                "end_line": 457,
                "max_line": 457,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "async changeCartItem({ settings, item, ...args }: ChangeCartItemParams): Promise<Cart> {\n    const shouldUseLineIndex = settings.upcartSettings?.updateItemIdentifier === ('line' as ItemIdentifier);\n\n    return await this.changeExistingCartItem({\n      ...args,\n      key: item.key,\n      ...(shouldUseLineIndex ? { lineIdxFrom1: item.lineIdxFrom1 } : {}),\n    });\n  }\n\n  async updateCartFields({\n    fields,\n  }: {\n    fields: Partial<CartUpdateableFields>;\n  }): Promise<Cart<CartItemWithoutCompareAtPrice>> {\n    return fetchQd(this.ajaxMutationCartQ, getShopifyRoutesRoot() + 'cart/update.js', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(fields),\n    }).then((res) => res.json());\n  }\n\n  setVisibleCartItemCount({ count }: { count: number }) {\n    // Dawn theme\n    if (window.Shopify.theme.theme_store_id === 887) {\n      switch (getShopifyDomain()) {\n        case 'alevrenl.myshopify.com':\n          alevrenlShopHandler();\n          break;\n        default:\n          defaultDawnHandler(count);\n      }\n    }\n\n    // Debut theme\n    if (window.Shopify.theme.theme_store_id === 796) {\n      const cartElement: HTMLElement | null = document.querySelector('div#CartCount[data-cart-count-bubble]');\n      if (cartElement && count !== 0) {\n        cartElement.classList.remove('hide');\n      }\n\n      if (cartElement && count === 0) {\n        cartElement.classList.add('hide');\n      }\n    }\n\n    if (getShopifyDomain() === 'mooivoormij.myshopify.com' && window.Shopify.theme.theme_store_id === 857) {\n      impulseHandler(count);\n    }\n\n    for (let { selector, content, onCountZero, onCountNonZero } of CART_COUNT_SELECTORS) {\n      // NOTE: we use querySelectorAll here instead of querySelector because\n      // some themes have two different quantity icons (one for mobile, one for desktop)\n      const matchingElements = document.querySelectorAll<HTMLElement>(selector);\n\n      matchingElements.forEach((cartElement) => {\n        if (cartElement) {\n          if (content.type === 'innerHtml') {\n            // - improve this so that we don't accidentally delete child elements\n            // - could go through children until we reach leaf node and set innerText instead\n            cartElement.innerHTML = String(count);\n          } else if (content.type === 'dataAttribute') {\n            cartElement.setAttribute(content.attributeName, String(count));\n          } else if (content.type === 'noContent') {\n            // do nothing\n          }\n\n          if (onCountZero && count === 0) {\n            onCountZero({ el: cartElement });\n          }\n\n          if (onCountNonZero && count !== 0) {\n            onCountNonZero({ el: cartElement });\n          }\n        }\n      });\n    }\n  }",
                "filename": "web/storefront/src/platform/online-store/cart/cart.ts",
                "start_index": 6646,
                "end_index": 9414,
                "start_line": 158,
                "end_line": 588,
                "max_line": 589,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "t translations. */\n  translations: Array<Translation>;\n};\n\n\n/** A resource that has translatable fields. */\nexport type TranslatableResourceTranslationsArgs = {\n  locale: Scalars['String'];\n  marketId?: InputMaybe<Scalars['ID']>;\n  outdated?: InputMaybe<Scalars['Boolean']>;\n};\n\n/**\n * An auto-generated type for paginating through multiple TranslatableResources.\n *\n */\nexport type TranslatableResourceConnection = {\n  __typename?: 'TranslatableResourceConnection';\n  /** A list of edges. */\n  edges: Array<TranslatableResourceEdge>;\n  /** A list of the nodes contained in TranslatableResourceEdge. */\n  nodes: Array<TranslatableResource>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/**\n * An auto-generated type which holds one TranslatableResource and a cursor during pagination.\n *\n */\nexport type TranslatableResourceEdge = {\n  __typename?: 'TranslatableResourceEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of TranslatableResourceEdge. */\n  node: TranslatableResource;\n};\n\n/** Specifies the type of resources that are translatable. */\nexport enum TranslatableResourceType {\n  /** A product collection. Translatable fields: `title`, `body_html`, `meta_title`, `meta_description`. */\n  Collection = 'COLLECTION',\n  /**\n   * The delivery method definition. For example, \"Standard\"",
                "filename": "web/server/modules/shopify/graphql/generated/index.ts",
                "start_index": 1698694,
                "end_index": 1700060,
                "start_line": 42597,
                "end_line": 42640,
                "max_line": 44153,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "function addUpCartStylesheetCss(/** @type {{ assetUrls: Record<string, string> }} */ { assetUrls }) {\n    const link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.href = /** @type {string} */ (assetUrls.upcartStylesheetCss);\n    document.head.appendChild(link);\n  }\n\n  function addSettings(/** @type {{ settings: any }} */ { settings }) {\n    if (!settings) return;\n\n    /** @type {any} */ (window).upcartSettings = settings;\n  }\n\n  function addPreloadedCart() {\n    /** @type {any} */ (window).upcartPreloadedCart = {\n      note: null,\n      attributes: {},\n      original_total_price: 0,\n      total_price: 0,\n      total_discount: 0,\n      total_weight: 0.0,\n      item_count: 0,\n      items: [],\n      requires_shipping: false,\n      currency: 'USD',\n      items_subtotal_price: 0,\n      cart_level_discount_applications: [],\n    };\n  }\n\n  function addMoneyFormat() {\n    /** @type {any} */ (window).upcartMoneyFormat = '<span class=\"money\">${{amount}}</span>';\n  }\n\n  function addCartRenderElement() {\n    const root = document.createElement('div');\n    root.id = 'upCart';\n    document.body.appendChild(root);\n  }\n\n  function addStickyCartRenderElement() {\n    const root = document.createElement('div');\n    root.id = 'upCartStickyButton';\n    document.body.appendChild(root);\n  }\n\n  function addCustomCSS(/** @type {{ settings: any }} */ { settings }) {\n    /** @type { string | null } */\n    const customCSS = settings?.upcartSettings.customCSS;\n    if (!customCSS) return;\n\n    const cssEl = document.createElement('style');\n    cssEl.id = 'upCart-customCSS';\n    cssEl.innerHTML = customCSS;\n    document.body.appendChild(cssEl);\n  }\n\n  function addActiveStatusOverlay(/** @type {{ assetUrls: Record<string, string> }} */ { assetUrls }) {\n    const overlay = document.createElement('img');\n    overlay.style.position = 'fixed';\n    overlay.style.bottom = '20px';\n    overlay.style.left = '20px';\n    overlay.style.width = '90px';\n    overlay.style.height = '90px';\n    overlay.style.borderRadius = '20%';\n    overlay.style.zIndex = '9999';\n    overlay.style.boxShadow = [\n      'rgba(0, 157, 157, 0.4) -5px 5px',\n      'rgba(0, 157, 157, 0.3) -10px 10px',\n      'rgba(0, 157, 157, 0.2) -15px 15px',\n    ].join(',');\n    overlay.src = /** @type {string} */ (assetUrls.upcartIcon);\n    document.body.appendChild(overlay);\n  }\n\n  // TODO: figure out imports to allow us to share these constants with the Storefront Content Script\n  const META_TAGS = {\n    SERIALIZED_SETTINGS: 'upcart-chrome-extension-serialized-settings',\n    SERIALIZED_ASSET_URLS: 'upcart-chrome-extension-serialized-asset-urls',\n  };\n\n  main();\n}",
                "filename": "chrome-extensions/cart-customization/window/fake-app-block.js",
                "start_index": 3412,
                "end_index": 6063,
                "start_line": 86,
                "end_line": 168,
                "max_line": 168,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n    design: t('Design'),\n    announcements: t('Announcements'),\n    rewards: t('Rewards'),\n    upsells: t('Upsells'),\n    addOns: t('Add-ons'),\n    notes: t('Notes'),\n    discounts: t('Discount Codes'),\n    subscriptionUpgrades: t('Subscription Upgrades'),\n    badges: t('Trust Badges'),\n    expressPay: t('Express Payments'),\n    integrations: t('Integrations'),\n    settings: t('Settings'),\n  };\n\n  useEffect(() => {\n    setNonMetafieldFormValuesState({\n      shippingProtectionProduct: shippingProtectionProductData?.productByHandle\n        ? {\n            editableFields: {\n              title: shippingProtectionProductData.productByHandle.title,\n              description: shippingProtectionProductData.productByHandle.bodyHtml,\n              price: shippingProtectionProductData.productByHandle.variants.edges[0].node.price,\n              currencyCode: shopData?.shop.currencyCode || 'USD',\n            },\n            existingProduct: {\n              id: shippingProtectionProductData.productByHandle.id,\n              handle: shippingProtectionProductData.productByHandle.handle,\n            },\n          }\n        : null,\n    });\n  }, [shopData, shippingProtectionProductData]);\n\n  const initialValues = useMemo<CartEditorFormValues>(\n    () => ({\n      upcartEditorSettings: editorSettingsState,\n      upcartSettings: settingsState,\n      nonMetafieldFormValues: nonMetafieldFormValuesState,\n    }),\n    [editorSettingsState, settingsState, nonMetafieldFormValuesState],\n  );\n\n  const syncShippingProtectionProductIfRequired = useCallback",
                "filename": "web/src/@templates/CartEditor/CartEditor.tsx",
                "start_index": 21297,
                "end_index": 22847,
                "start_line": 3,
                "end_line": 656,
                "max_line": 1109,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "wUpsellItemsAlreadyInCart: { type: 'boolean', value: false },\n    upsellsItems: {\n      type: 'json',\n      value: [\n        {\n          _id: '',\n          trigger: null,\n          upsell: null,\n        },\n      ],\n    },\n    upsellsModulePosition: { type: 'single_line_text_field', value: 'bottom' },\n    recommendedUpsells: { type: 'boolean', value: false },\n    upsellRecommendationIntent: { type: 'single_line_text_field', value: 'related' as UpsellRecommendationIntent },\n\n    // Addons Module\n    addonsModule: { type: 'boolean', value: false },\n    addonsField: {\n      type: 'json',\n      value: {\n        shippingProtection: {\n          active: false,\n          productHandle: null,\n          defaultBehavior: false,\n        },\n        productAddon: {\n          active: false,\n          productHandle: null,\n          product: null,\n          defaultBehavior: false,\n        },\n      },\n    },\n    addonsShouldBeCounted: { type: 'boolean', value: false },\n\n    // Notes Module\n    notesModule: { type: 'boolean', value: false },\n    notesTitle: { type: 'multi_line_text_field', value: '<p>Add special instructions</p>' },\n    notesPlaceholder: { type: 'single_line_text_field', value: 'Special instructions for your order' },\n    notesPlacement: { type: 'single_line_text_field', value: 'bottomOfCart' as NotesPlacement },\n\n    trustBadgesModule: { type: 'boolean', value: false },\n    trustBadges: {\n      type: 'json',\n      value: {\n        url: '',\n        position: 'bottom',\n      },\n    },\n\n    // Discount Code Module\n    discountCodeModule: { type: 'boolean', value: false },\n    discountCodePlaceholder: { type: 'single_line_text_field', value: 'Discount code' },\n    discountCodeButtonText: { type: 'single_line_text_field', value: 'Apply' },\n\n    // Subscription Upgrades Module\n    subscriptionUpgradesModule: { type: 'boolean', value: false },\n    subscriptionUpgradesPreventDowngrades: { type: 'boolean', value: false },\n    subscriptionUpgradesButtonText: { type: 'single_line_text_field', value: 'Upgrade to {{selling_plan_group_name}}' },\n\n    // Express Pay Buttons Module\n    expressPayModule: { type: 'boolean', value: false },\n    expressPayEnabledGateways: { type: 'json', value: [] },\n  },\n\n  sti",
                "filename": "common/defaultMetafields.ts",
                "start_index": 17911,
                "end_index": 20140,
                "start_line": 482,
                "end_line": 555,
                "max_line": 567,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "initial_doc_snippets": [
            {
                "code": "# Specification: Subscription Upgrades\n\n## Editor\n\nThere should be a module in the editor with:\n\n- Name: \"Subscription Upgrades\"\n- Icon: Repeat Order\n- Default status: disabled\n- Settings:\n  - \"Prevent downgrades\"\n    - Help text: \"If enabled, customers will not be allowed to downgrade from a subscription to one-time purchase. Caution: this may increase cart abandonment.\"\n    - Type: checkbox\n    - Default: disabled\n\n## Cart\n\n> If the subscription upgrades module is disabled in the editor, the cart should skip all subscription upgrade functionality.\n>\n> The following cart specification is applicable only if the subscription upgrades module has been enabled in the editor.\n\n### Behaviour\n\nThe cart frontend for subscription upgrades should be isolated to an area below each line item. This area can include content, or can be omitted if there is nothing to show. If the area includes content, then the area should have:\n\n- Public CSS class: `.upcart-subscription-upgrade-section`\n- Styling: full-width of line item\n\nThe content of each subscription upgrade area should be independent of the content for the subscription areas for any other line items.\n\nThe content of the subscription upgrade area should be as follows:\n\nA. For **one-time purchase** line items:\n\n- If the item cannot be sold as a subscription, nothing should be shown.\n- If the item can be sold as a subscription:\n  - There should be a button with:\n    - Content: \"Upgrade to \\_\\_\\_\\_\", where \\_\\_\\_\\_ is the name of the first selling plan group for the item\n    - When clicked:\n      1. Show a loading spinner instead of text, and disable the button\n      2. Change the item to be a subscription with the first selling plan of the first selling plan group. The line item should have the property `__upcartSubscriptionUpgrade: \"true\"`\n    - Styling: full width of area, match to other buttons in cart\n    - Public CSS class: `.upcart-subscription-upgrade-button`\n\nB. For **subscription** line items:\n\n- There should be a dropdown with:\n  - Content: the name of the current selling plan\n  - Options:\n    - (OPTIONAL) A group with:\n      - Title: \"Full price\"\n      - Options:\n        - \"One-time purchase\"\n      - Condition: this group should be included if the \"Prevent downgrades\" setting is disabled AND the item does not _require_ a selling plan (i.e., it can be sold as a one-time purchase)\n    - A group for each possible selling plan group for the item with:\n      - Title: the name of the selling plan group\n      - Options: the names of the possible selling plans in the group for the item\n  - When selected:\n    1. Show a loading spinner overlayed on the dropdown and disable the dropdown\n    2. Change the selling plan of the item to the selected selling plan. If \"One-time only\" was selected, then remove the selling plan from the item to change it to a one-time purchase. The line item should have the property `__upcartSubscriptionEdit: \"true\"`\n  - Styling: full width of area, match to other dropdowns in cart\n  - Public CSS class: `.upcart-subscription-upgrade-dropdown`\n\nWhen the current purchase option for a line item changes, the content of the subscription upgrade area should be updated to match the new purchase option.\n\n### Edge Cases and Clarifications\n\n- The content of the subscription upgrade area does not depend on _how_ the purchase option was selected. For example, the subscription upgrade area content for an item that was added to the cart as a subscription should be the same as the content for an item that was upgraded from a one-time purchase to a subscription in-cart.\n- When selling plans are being loaded for a product, there should be no content in the subscription upgrade area. Before the selling plans are loaded, we can't fully decide what content to show so it's fine to show nothing.\n- When the selling plan of an item is changed, the quantity of the item should remain constant. If you don't provide a quantity to the AJAX API when changing a line item, then the quantity of the line item will be set to 1 which should be avoided.\n- Selling plans that do not apply to the selected variant for a line item should be ignored. It is possible to have selling plans that apply only to specific variants of a product. In cases where none of the selling plans from a selling plan group apply to the variant for the line item, the selling plan group should be ignored. An ignored group should not be listed in the dropdown (because it would be an empty section) and it should not be used for text of the upgrade button (because it would have no selling plan to select).",
                "filename": "docs/subscription-upgrades.md",
                "start_index": 0,
                "end_index": 4584,
                "start_line": 1,
                "end_line": 71,
                "max_line": 71,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# UpCart 3.0\n\n## Setup\n\nView setup instructions on Notion: https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 133,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "---\nid: 3vst4bcr\ntitle: Discount Codes Module\nfile_version: 1.1.3\napp_version: 1.18.31\n---\n\n# Required background information\n\n## Discount types\n\nThere are two types of discounts: **automatic discounts** and **discount codes**.\n\n- **Automatic discounts** are applied to a cart or checkout automatically when the discount criteria are met.\n\n- **Discount codes** must be manually typed in by the customer. They stay active until the customer either removes the code, enters a different conflicting discount code, or changes their cart/checkout so that the discount is not longer applicable.\n\nThis module is specifically for **discount codes**. We do not have to worry about **automatic discounts** because they will work in the cart by default and they do not require any user interaction.\n\n## Discount targets\n\nA discount can be used to reduce the cost of **product(s)**, **order**, or **shipping**.\n\n- **Product discounts** reduce the price of one or more products and are shown as a reduction on individual line items.\n\n- **Order discounts** reduce the price of the order as a whole and are shown as a reduction on the overal price.\n\n- **Shipping discounts** reduce the price of shipping.\n\n# Read and write discount codes\n\n## Read discount codes\n\nWe read discount codes using the `cart.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:78:24:26:`    const cart: Cart&lt;CartItemWithoutCompareAtPrice&gt; = await fetch(getShopifyRoutesRoot() + &#39;cart.js&#39;).then((res) =&gt;`\"/> Ajax API endpoint.\n\nAn applied discount code will be returned from the API as part of either the `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> or the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/>. The `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> are for order discounts and the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/> are for product discounts.\n\nThese discount applications will include both **automatic discounts** and **discount codes**. We can distinguish between these using the `type`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:460:1:1:`  type: &#39;discount_code&#39; | &#39;&#39;;`\"/> field of the `DiscountApplication`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:446:4:4:`export interface DiscountApplication {`\"/>.\n\n## Apply a discount code\n\n<br/>\n\nWe apply a discount code by making a request from the storefront to the route `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/>.\n\nThe `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/> route is intended by Shopify to be used for [shareable discount links](https://help.shopify.com/en/manual/discounts/managing-discount-codes#promote-a-discount-using-a-shareable-link). Normally a customer would navigate to the link directly in their browser and would be redirected to the storefront. We are using it in a non-standard way by making a background network request.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n23         await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);\n```\n\n<br/>\n\nAfter applying a discount code, we refetch the cart to check if the discount was successfully applied and to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/DiscountCodeModule/DiscountCodeModule.tsx\n\n```tsx\n23           await platform.discounts.attemptApplyDiscountCode({ discountCode: discountCodeToApply });\n24           const updatedCart = await refetchCart();\n25\n26           const discountApplications = getAllUniqueDiscountApplications(updatedCart);\n27           const isValid = discountApplications.some(\n28             (discountApplication) => discountApplication.title === discountCodeToApply,\n29           );\n```\n\n<br/>\n\n## Remove a discount code\n\n<br/>\n\nWe remove a discount code by applying a fake invalid discount code.\n\nThere is no native way to remove discount codes so this is a workaround.\n\nThis behaviour relies on the fact that there can only be one discount code applied in the cart. We are replacing the one allowed discount code with an invalid code.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n14       async removeDiscountCode(): Promise<void> {\n15         const FAKE_INVALID_DISCOUNT_CODE = '~!~!UPCART_REMOVE_DISCOUNT!~!~';\n16         await this.UNSAFE_POSSIBLE_NO_OP_applyDiscountCodeAndSetShopifyCookie({ discountCode: FAKE_INVALID_DISCOUNT_CODE });\n17       }\n```\n\n<br/>\n\nAfter removing a discount code, we refetch the cart to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/components/DiscountCodeBadge/DiscountCodeBadge.tsx\n\n```tsx\n18         await platform.discounts.removeDiscountCode();\n19         await refetchCart();\n```\n\n<br/>\n\n> \u26a0\ufe0f After we apply or remove a discount code, the `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> of discounted line items will change. If we did not refetch the cart then we would have an outdated `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> value which would cause errors if we tried to call `cart/update.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:191:17:21:`    return fetchQd(this.ajaxMutationCartQ, getShopifyRoutesRoot() + &#39;cart/update.js&#39;, {`\"/> or `cart/change.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:153:8:12:`      getShopifyRoutesRoot() + `cart/change.js?${query.toString()}`,`\"/>.\n\n# Limitations\n\n## **Multiple** discount codes are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n50                     Multiple discount codes are not supported.\n```\n\n<br/>\n\n### Why are multiple discount codes not supported?\n\nWe cannot apply multiple discount codes because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support multiple codes. This is the only way that we know of to apply a discount code from the storefront. We will have to wait for Shopify to add support for multiple codes or to find a different way to apply codes which does support multiple.\n\nIf a customer applies two discount codes back to back, the first discount code will be discarded and only use the most recently applied code will affect the cart.\n\n## Free shipping discounts are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n58                   Free shipping discounts are not supported.\n```\n\n<br/>\n\n### Why are free shipping discounts not supported?\n\nWe cannot apply free shipping discounts because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support them.\n\n## Shopify Plus stores using checkout.liquid are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n64                   Shopify Plus stores using checkout.liquid are not supported.\n```\n\n<br/>\n\n### Why are Shopify Plus stores using checkout.liquid not supported?\n\nHistorically, the Ajax API only included automatic discounts and did not include discount codes. Shopify changed this behaviour and started including discounts from discount codes in Ajax API responses. There are still some stores which do not include discount codes in Ajax API responses. The discount codes module does not work on these stores.\n\n### How can we tell if a store is eligible?\n\nThe Ajax API will include discount codes in responses only if the store is on Shopify's new checkout.\n\n<br/>\n\nWe can identify wether or not a store is on Shopify's new checkout by looking at the cart token. If the cart token is 32 characters long and only includes hex digits (0123456789abcdef) then the store is on Shopify's old checkout, otherwise it is on Shopify's new checkout and the Ajax API will include discount codes in responses.\n\nStores that are on Shopify's new checkout may have different token formats. The following are examples that we've seen:\n\n- c1-d3f024e3af037f40bfe1b016b5b76f05\n- Z2NwLXVzLWNlbnRyYWwxOjAxSEZFMjFIV1FZUFc0SlQ3Q00ySFFSSjgy\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart({ cart }: { cart: Cart<CartItem> }): boolean {\n6          if (!cart.token) return false;\n7          const isLegacyCartToken = cart.token.match(/^[0-9a-f]{32}$/) !== null;\n8          return !isLegacyCartToken;\n9        }\n```\n\n<br/>\n\n### What happens if a store is not eligible?\n\n<br/>\n\nIf a store is not eligible then the discount code module will not be shown.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/Cart.tsx\n\n```tsx\n499                      {platform.discounts.getStoreCanApplyDiscountCodesInCart({ cart }) &&\n500                        settings.upcartEditorSettings.discountCodeModule && (\n501                          <DiscountCodeModule platform={platform} refetchCart={refetchCart} />\n502                        )}\n```\n\n<br/>\n\nIn the preview we will show the discount code module even for stores that are not eligible. We do this because it would require a lot of work to check eligibility when not on the storefront.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/platform/preview/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart(args: { cart: Cart<CartItem> }): boolean {\n6          return true;\n7        }\n```\n\n<br/>\n\nThis file was generated by Swimm. [Click here to view it in the app](https://app.swimm.io/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr).",
                "filename": ".swm/discount-codes-module.3vst4bcr.sw.md",
                "start_index": 0,
                "end_index": 11446,
                "start_line": 1,
                "end_line": 231,
                "max_line": 231,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>UpCart Loading...</title>\n    <script>\n      /*\n       * Constants\n       */\n      const INSTALL_SOURCE_QUERY_PARAM = 'via';\n      const COOKIE_LIFETIME_MS = 3 * 24 * 60 * 60 * 1000; // 3 days\n      const COOKIE_NAME = 'upcart_install_source';\n\n      /*\n       * 1. Get the ?via= query for the following steps\n       */\n      const installSource = encodeURIComponent(\n        new URLSearchParams(window.location.search).get(INSTALL_SOURCE_QUERY_PARAM),\n      );\n\n      /*\n       * 2. Set a cookie with the install source for 3 days so we can read it when they install the app\n       */\n      const cookieDomain = '.' + window.location.hostname;\n      const cookieExpiresDate = new Date();\n      cookieExpiresDate.setTime(cookieExpiresDate.getTime() + COOKIE_LIFETIME_MS);\n      const cookieExpires = cookieExpiresDate.toGMTString();\n      document.cookie = `${COOKIE_NAME}=${installSource}; expires=${cookieExpires}; domain=${cookieDomain}; path=/; SameSite=None; Secure`;\n\n      /*\n       * 3. Redirect to the app store, including the install source as a query param for App Store Google Analytics\n       */\n      window.location.replace(`https://apps.shopify.com/upcart-cart-builder?join-via=${installSource}`);\n    </script>\n  </head>\n  <body></body>\n</html>",
                "filename": "web/public/join.html",
                "start_index": 0,
                "end_index": 1304,
                "start_line": 1,
                "end_line": 36,
                "max_line": 36,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Security Policy\n\n## Supported versions\n\n### New features\n\nNew features will only be added to the master branch and will not be made available in point releases.\n\n### Bug fixes\n\nOnly the latest release series will receive bug fixes. When enough bugs are fixed and its deemed worthy to release a new gem, this is the branch it happens from.\n\n### Security issues\n\nOnly the latest release series will receive patches and new versions in case of a security issue.\n\n### Severe security issues\n\nFor severe security issues we will provide new versions as above, and also the last major release series will receive patches and new versions. The classification of the security issue is judged by the core team.\n\n### Unsupported Release Series\n\nWhen a release series is no longer supported, it's your own responsibility to deal with bugs and security issues. If you are not comfortable maintaining your own versions, you should upgrade to a supported version.\n\n## Reporting a bug\n\nAll security bugs in shopify repositories should be reported to [our hackerone program](https://hackerone.com/shopify)\nShopify's whitehat program is our way to reward security researchers for finding serious security vulnerabilities in the In Scope properties listed at the bottom of this page, including our core application (all functionality associated with a Shopify store, particularly your-store.myshopify.com/admin) and certain ancillary applications.\n\n## Disclosure Policy\n\nWe look forward to working with all security researchers and strive to be respectful, always assume the best and treat others as peers. We expect the same in return from all participants. To achieve this, our team strives to:\n\n- Reply to all reports within one business day and triage within two business days (if applicable)\n- Be as transparent as possible, answering all inquires about our report decisions and adding hackers to duplicate HackerOne reports\n- Award bounties within a week of resolution (excluding extenuating circumstances)\n- Only close reports as N/A when the issue reported is included in Known Issues, Ineligible Vulnerabilities Types or lacks evidence of a vulnerability\n\n**The following rules must be followed in order for any rewards to be paid:**\n\n- You may only test against shops you have created which include your HackerOne YOURHANDLE @ wearehackerone.com registered email address.\n- You must not attempt to gain access to, or interact with, any shops other than those created by you.\n- The use of commercial scanners is prohibited (e.g., Nessus).\n- Rules for reporting must be followed.\n- Do not disclose any issues publicly before they have been resolved.\n- Shopify reserves the right to modify the rules for this program or deem any submissions invalid at any time. Shopify may cancel the whitehat program without notice at any time.\n- Contacting Shopify Support over chat, email or phone about your HackerOne report is not allowed. We may disqualify you from receiving a reward, or from participating in the program altogether.\n- You are not an employee of Shopify; employees should report bugs to the internal bug bounty program.\n- You hereby represent, warrant and covenant that any content you submit to Shopify is an original work of authorship and that you are legally entitled to grant the rights and privileges conveyed by these terms. You further represent, warrant and covenant that the consent of no other person or entity is or will be necessary for Shopify to use the submitted content.\n- By submitting content to Shopify, you irrevocably waive all moral rights which you may have in the content.\n- All content submitted by you to Shopify under this program is licensed under the MIT License.\n- You must report any discovered vulnerability to Shopify as soon as you have validated the vulnerability.\n- Failure to follow any of the foregoing rules will disqualify you from participating in this program.\n\n** Please see our [Hackerone Profile](https://hackerone.com/shopify) for full details\n\n## Receiving Security Updates\n\nTo recieve all general updates to vulnerabilities, please subscribe to our hackerone [Hacktivity](https://hackerone.com/shopify/hacktivity)",
                "filename": "SECURITY.md",
                "start_index": 0,
                "end_index": 4160,
                "start_line": 1,
                "end_line": 59,
                "max_line": 59,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "The starting point for this repository was created using the Shopify CLI, commit\nf5d560da33aafae0b552de72a90f1320d1023524. Some boilerplate code from the CLI\nremains and is licensed as follows:\n\"\"\"\nMIT License\n\nCopyright (c) 2018 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\"",
                "filename": "LICENSE.md",
                "start_index": 0,
                "end_index": 1265,
                "start_line": 1,
                "end_line": 26,
                "max_line": 26,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.\\\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can\u2019t go back!**\n\nIf you aren\u2019t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you\u2019re on your own.\n\nYou don\u2019t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn\u2019t feel obligated to use this feature. However we understand that this tool wouldn\u2019t be useful if you couldn\u2019t customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n\n### Code Splitting\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\n\n### Analyzing the Bundle Size\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\n\n### Making a Progressive Web App\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\n\n### Advanced Configuration\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\n\n### Deployment\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\n\n### `npm run build` fails to minify\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)",
                "filename": "web/storefront/README.md",
                "start_index": 0,
                "end_index": 3354,
                "start_line": 1,
                "end_line": 70,
                "max_line": 70,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "MIT License\n\nCopyright (c) 2021 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
                "filename": "extensions/theme-app-extension/LICENSE.md",
                "start_index": 0,
                "end_index": 1063,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# [[[ --- STAGE: BASE ENVIRONMENT SETUP --- ]]]\n# see https://github.com/moby/moby/issues/37345#issuecomment-400250849\nFROM node:18.16.1-alpine as base\n# Accept command line '--build-arg' arguments\nARG PORT=8081\nARG HOST\nARG SHOPIFY_API_KEY\nARG INTERCOM_APP_ID\nARG SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY\n\n# Copy command line args to env to use during build and for final image runtime\nENV PORT=${PORT} \\\n    HOST=${HOST} \\\n    SHOPIFY_API_KEY=${SHOPIFY_API_KEY} \\\n    INTERCOM_APP_ID=${INTERCOM_APP_ID}\n    # ^^^^^ WARNING ^^^^^ do not include trailing \"\\\" on the last line above, you will get a syntax error with a terrible error message\n    #\n    # SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY is intentionally not included here since it is only for building and shouldn't be available at runtime\n\n# [[[ --- STAGE: BUILD --- ]]]\nFROM base AS build\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nCOPY web/patches ./web/patches\nRUN yarn install --cwd web --frozen-lockfile --production=false\nCOPY . .\n# NOTE: we need Sentry API token to upload source maps to Sentry during build, see withSentryConfig in next.config.js\nRUN echo \"[auth]\\ntoken=${SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY}\" > ./web/.sentryclirc\nRUN yarn web:build\n\n# [[[ --- STAGE: LICENSES WEB --- ]]]\nFROM base AS licenses-web\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web > ./web/public/licenses/web.txt\n\n# [[[ --- STAGE: LICENSES STOREFRONT --- ]]]\nFROM base AS licenses-storefront\nWORKDIR /app\nCOPY web/storefront/package.json web/storefront/yarn.lock ./web/storefront/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web/storefront > ./web/public/licenses/storefront.txt\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM base\nWORKDIR /app\nCOPY --from=build /app .\nCOPY package.json ./package.json\nRUN yarn install --frozen-lockfile --production=true\nCOPY --from=licenses-web /app/web/public/licenses/web.txt ./web/public/licenses/web.txt\nCOPY --from=licenses-storefront /app/web/public/licenses/storefront.txt ./web/public/licenses/storefront.txt\nCMD [\"yarn\", \"web:start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2181,
                "start_line": 1,
                "end_line": 53,
                "max_line": 53,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "## Dev Setup\n\nFollow the [instructions in this Notion document](https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7?pvs=4) to setup the development environment for the Chrome extension.",
                "filename": "chrome-extensions/cart-customization/README.md",
                "start_index": 0,
                "end_index": 208,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { Shop, ShopModel } from '../modules/shops/shops.model';\nimport { RequestWithShop } from '../types/express.types';\nimport Shopify from '@shopify/shopify-api';\n\nexport const getShopDocFromRequest = async (req: RequestWithShop): Promise<Shop> => {\n  if (req.shopDoc) {\n    return req.shopDoc;\n  }\n\n  const shop = Shopify.Utils.sanitizeShop(req.query.shop as string);\n  const shopDoc = await ShopModel.findOne({ domain: shop }).lean();\n  req.shopDoc = shopDoc;\n  return shopDoc;\n};",
                "filename": "web/server/helpers/getShopDocFromRequest.ts",
                "start_index": 0,
                "end_index": 485,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<html></html>",
                "filename": "web/storefront/public/index.html",
                "start_index": 0,
                "end_index": 13,
                "start_line": 1,
                "end_line": 1,
                "max_line": 1,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "intial_documentation_sources": {
            "shopify": {
                "collection": "shopify_documentation",
                "reason_for_relevance": "The issue involves the removal of automatic translations from a dashboard which could be part of a Shopify store. Understanding Shopify's templating and API could provide insights into how translations were implemented and how to properly remove or modify them without causing further issues."
            }
        },
        "external_documentation_snippets": {
            "external_shopify": [
                {
                    "code": "Deciding extension placement\n Localizing UI extensions\n Overview\n Getting started\n Testing UI extensions\n UX guidelines\n Selling strategies\n Online store\n Admin\n Flow\n Distribution\n Billing\n App Store\n Localizing customer UI extensions\n Merchants can expand their business to a global audience by creating shopping experiences in local languages and currencies. You can translate customer account UI extensions into multiple languages for international merchants and customers. Shopify provides a set of JavaScript APIs for accessing translations and provides localized formatting utilities for your customer account UI extension.\n What is localization?\n Localization is the process of adapting content to meet the language and cultural requirements of a specific country or region. Shopify localizes customer account UI extensions by resolving customer and shop locales against the extensions' translation data.\n The following diagram shows customers in France and Canada that are interacting with a store in Germany. The customers receive localized experiences based on the translation data that's supplied by an app extension.\n How it works\n You supply translation data for your extension's strings in .json-formatted locale files, which are stored in the extension's locales folder.\n \u2514\u2500\u2500 my-app\n   \u2514\u2500\u2500 extensions\n         \u2514\u2500\u2500 my-customer-account-ui-extension\n             \u251c\u2500\u2500 src\n             \u2502   \u2514\u2500\u2500 CustomerAccount.jsx OR CustomerAccount.js // The index page of the customer account UI extension\n             \u251c\u2500\u2500 locales\n             \u2502   \u251c\u2500\u2500 en.default.json // The default locale for the customer account UI extension\n             \u2502   \u2514\u2500\u2500 fr.json // The locale file for non-regional French translations\n             \u251c\u2500\u2500 shopify.extension.toml // The config file for the customer account UI extension\n             \u2514\u2500\u2500 package.json\n The customer account UI extension queries the locale files for a match against locale data and translates the extension UI.\n To choose a translation, Shopify evaluates locale data in the following order of precedence:\n The customer locale. Example: de-DE.\n The non-regional customer locale. Example: de.\n The shop locale. Example: fr-FR.\n The non-regional shop locale. Example: fr.\n The extension's default locale.\n Locale files\n Locale files are UTF-8-encoded JSON files that contain a set of translations for your UI extension's strings. You can create non-regional, regional, and default locales.\n Translations consist of key/value pairs. You can supply singular and plural translations.\n Non-regional locale\n Use an IETF BCP 47 language tag:\n Non-regional locale\n 1 en.json\n Regional locale\n Insert an ISO 3166-1 region code after the language tag:\n Regional locale\n 1 en-CA.json\n Default locale\n Insert .default between the locale and the .json file extension:\n Default locale\n 1 en-CA.default.json\n Pluralization\n The implementation of plural translation keys follows the language plural rules included in the Common Locale Data Repository. You can specify any pluralization key that Intl.PluralRules.select() supports and that's appropriate for the locale.\n The following are additional details for localizing pluralized content:\n The call to translate() must have a single count option.\n Shopify uses count to determine a plural key for the given locale.\n The translation must define all possible plural keys for the given locale. For example:\n locales/en.json\n locales/ar.json\n 1 {\n 2\n    \"youHaveMessages\": {\n 3\n      \"one\": \"you have one message\",\n 4\n      \"other\": \"you have {{count}} messages\",\n 5\n    }\n 6 }\n Limitations\n Merchants can't override or add translations for extensions.\n Complex pluralization, like for dynamic numeric ranges, isn't supported. For example, you can't localize a phrase that lists a numeric range of items left in stock. This is because the range will change as items are sold, and for some languages, the localizer would need to update the grammar as well.\n Translations can't contain HTML.\n Use our i18n functions to localize content. However, if you need to use Intl functions for more advanced formatting, only the following are supported:\n Intl.NumberFormat\n Intl.DateTimeFormat\n Intl.PluralRules\n Note\n Some older browsers don't support Intl. In these cases, Shopify polyfills a small portion of the object.\n Get started\n Localization\n Get started localizing customer account UI extensions.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n What is localization?\n How it works\n Pluralization\n Limitations\n Get started\n Updates & News\n Developer changelog\n Partner blog\n Engineering blog",
                    "filename": "docs/apps/customer-accounts/best-practices/localizing-ui-extensions/content.txt",
                    "start_index": 0,
                    "end_index": 4570,
                    "start_line": 1,
                    "end_line": 95,
                    "max_line": 95,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "API exploration\n Products and collections\n Search and discovery\n Markets\n Overview\n International pricing\n Multiple languages\n Cart\n Customers\n Prioritizing data in your query\n Release notes\n Storefront API reference\n Building with the Customer Account API\n Additional SDKs\n Support multiple languages on storefronts\n You can use the Storefront API to support multiple languages on a storefront. This guide explains how to retrieve translated content and create a checkout in the customer's language with the Storefront API.\n Requirements\n You've completed the Getting started with the Storefront API guide.\n You're familiar with querying products and collections.\n You've created resources that can be translated in your store.\n You've created translated content using the GraphQL Admin API.\n You're using API version 2022-04 or higher.\n Step 1: Retrieve available languages\n For each country context, the languages available are configured within the shop\u2019s Markets settings. The following example shows how to access the list of available languages with the Localization object.\n POST https://{shop}.myshopify.com/api/{api_version}/graphql.json\n GraphQL query\n 1 query Localization @inContext(country: US, language: ES) {\n 2\n    localization {\n 3\n      # for the current country\n 4\n      availableLanguages {\n 5\n        isoCode\n 6\n        endonymName\n 7\n      }\n 8\n 9\n      # and for non-current countries\n 10\n      availableCountries {\n 11\n        isoCode\n 12\n        name\n 13\n        availableLanguages {\n 14\n          isoCode\n 15\n          endonymName\n 16\n 19 }\n JSON response\n 1 {\n 2\n    \"data\": {\n 3\n      \"localization\": {\n 4\n        \"availableLanguages\": [\n 5\n          {\n 6\n            \"isoCode\": \"EN\",\n 7\n            \"endonymName\": \"English\"\n 8\n          },\n 9\n          {\n 10\n            \"isoCode\": \"ES\",\n 11\n            \"endonymName\": \"Espa\u00f1ol\"\n 12\n          }\n 13\n        ],\n 14\n        \"availableCountries\": [\n 15\n          {\n 16\n            \"isoCode\": \"CA\",\n 17\n            \"name\": \"Canad\u00e1\",\n 18\n            \"availableLanguages\": [\n 19\n              {\n 20\n                \"isoCode\": \"EN\",\n 21\n                \"endonymName\": \"English\"\n 22\n              },\n 23\n              {\n 24\n                \"isoCode\": \"FR\",\n 25\n                \"endonymName\": \"fran\u00e7ais\"\n 26\n              }\n 27\n            ]\n 28\n          },\n 29\n          {\n 30\n            \"isoCode\": \"US\",\n 31\n            \"name\": \"Estados Unidos\",\n 32\n            \"availableLanguages\": [\n 33\n              {\n 34\n                \"isoCode\": \"EN\",\n 35\n                \"endonymName\": \"English\"\n 36\n              },\n 37\n              {\n 38\n                \"isoCode\": \"ES\",\n 39\n                \"endonymName\": \"Espa\u00f1ol\"\n 40\n              }\n 41\n            ]\n 42\n          }\n 43\n        ]\n 44\n      }\n 45\n    },\n 46\n    \"extensions\": {\n 47\n      \"context\": {\n 48\n        \"country\": \"US\",\n 49\n        \"language\": \"ES\"\n 50\n      }\n 51\n    }\n 52 }\n Step 2: Retrieve translations\n To query translatable resources and return translated content, use the @inContext directive to contextualize any query in one of the shop\u2019s available languages.\n The following example returns the Spanish translations for a product's title, description, and options.\n POST https://{shop}.myshopify.com/api/{api_version}/graphql.json\n GraphQL query\n 1 query productDetails @inContext(language: ES) {\n 2\n    product(handle: \"white-t-shirt\") {\n 3\n      title\n 4\n      description\n 5\n      descriptionHtml\n 6\n      options {\n 7\n        name\n 8\n        values\n 9\n      }\n 10\n    }\n 11 }\n JSON response\n 4\n        \"title\": \"Camiseta blanca\",\n 5\n        \"description\": \"Hecho de algod\u00f3n fino\",\n 6\n        \"descriptionHtml\": \"<p>Hecho de algod\u00f3n fino</p>\",\n 7\n        \"options\": [\n 8\n          {\n 9\n            \"name\": \"Talla\",\n 10\n            \"values\": [\n 11\n              \"Peque\u00f1a\",\n 12\n              \"Mediana\",\n 13\n              \"Grande\"\n 14\n            ]\n 15\n          }\n 16\n        ]\n 17\n      }\n 18\n    },\n 19\n    \"extensions\": {\n 20\n      \"context\": {\n 21\n        \"country\": \"US\",\n 22\n        \"language\": \"ES\"\n 23\n      }\n 24\n    }\n 25 }\n Step 3: Create a checkout in the customer\u2019s language\n The @inContext directive can also be used with the checkoutCreate mutation to set the checkout locale.\n The following example creates a checkout that will load in Spanish when you redirect the customer to its webUrl.\n POST https://{shop}.myshopify.com/api/{api_version}/graphql.json\n GraphQL mutation\n 1 mutation createCheckout @inContext(language: ES) {\n 2\n    checkoutCreate(\n 3\n      input: {\n 4\n        lineItems: [\n 5\n          { quantity: 1, variantId: \"gid://shopify/ProductVariant/38615086082\" }\n 6\n        ]\n 7\n      }\n 8\n    ) {\n 9\n      checkout {\n 10\n        webUrl  # loads in Spanish\n 11\n      }\n 12\n    }\n 13 }\n Next steps\n Learn how to query international prices for products and orders, and explicitly set the context of a cart and checkout.\n Learn how to create and update a cart in Shopify with the Storefront API.\n Retrieve metafields with the Storefront API to access additional information from different types of resources.\n Learn how to manage customer accounts with the Storefront API.\n Learn about the different tools that you can use to create unique buying experiences anywhere your customers are, including websites, apps, and video games.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Requirements\n Step 1: Retrieve available languages\n Step 2: Retrieve translations\n Step 3: Create a checkout in the customer\u2019s language",
                    "filename": "docs/custom-storefronts/building-with-the-storefront-api/markets/multiple-languages/content.txt",
                    "start_index": 0,
                    "end_index": 5486,
                    "start_line": 1,
                    "end_line": 270,
                    "max_line": 270,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Overview\n Performance\n Accessibility\n Internationalization\n Overview\n Getting started\n Embedding\n Mobile\n Deceptive code\n Design guidelines\n Deployment\n Distribution\n Billing\n App Store\n Getting started with internationalizing your app\n You're ready to start internationalizing your app. You want to begin the planning process and prepare strings for localization.\n In this tutorial, you'll begin internationalizing your app by externalizing, formatting, and translating strings.\n Tip\n You can speed up internationalizing new and existing apps by using i18n-ally, an open source Visual Studio Code extension that makes it easier to externalize strings, view and navigate to translation strings from code, and perform machine translation.\n What you'll learn\n In this tutorial, you'll learn how to do the following tasks:\n Externalize strings so that they're available for localization\n Format strings, including names and lists to support regional variation\n Translate strings and test your user interface (UI)\n Requirements\n You've created a Partner account and a development store.\n You understand how apps fit into Shopify and the different ways of distributing your app.\n Step 1: Externalize strings\n Translation is foundational to localization. The first step of translation involves externalizing any hard-coded strings from your app into translation files.\n When your app renders its UI, it looks up the corresponding strings from the translation file that's associated with the requested locale.\n Source files\n The following example shows a hard-coded greeting string from an app:\n Hard-coded string\n 1 function greeting(casual_name) {\n 2\n    return `Hello ${casual_name}`;\n 3 }\n The following example shows how to externalize the hard-coded greeting string in a translation file:\n translations/en.json\n 1 {\n 2\n    \"greeting\": \"Hello {casual_name}\"\n 3 }\n Looking up externalized string\n 1 function greeting(casual_name) {\n 2\n    return i18n.translate(\"greeting\", { casual_name: casual_name });\n 3 }\n Tip\n Even if you don't intend to initially translate your app, you should still externalize strings in your app during initial development. It can be difficult to externalize strings in an existing app that wasn't originally structured with externalized strings.\n Graphics\n Text within graphics and images should also be externalized for translation.\n Instead of having flat graphics that include text, externalize the text and overlay it on the graphic. Alternatively, you can generate flat graphics for each locale, and switch between them based on the requested locale.\n Step 2: Get access to the user's locale\n Depending on the audience, the lookup of a translation string uses the preferred locale of either an app user or a buyer.\n The mechanism for receiving the locale depends on the type of app or app extension being developed.\n For example, embedded apps receive the app user's chosen locale in the locale request parameter in Shopify's GET requests to the app.\n Refer to the documentation for your type of app extension for more information.\n Step 3: Format strings\n Beyond language translation, parts of your app's strings should adapt dynamically to different locales.\n For example, dates and times, names, numbers, prices, and lists are elements that should be formatted differently based not on language, but on the user's region or preferences.\n Remove these elements from your app's strings, use a localization library to generate the formatted versions, and inject the formatted versions dynamically using string interpolation. The following sections describe how to format the following parts of strings:\n Dates and times\n Numbers\n Prices\n Lists\n Names\n Format dates and times\n The format of dates and times varies by region, not by language. As a result, dates and times, such as the following examples, don't belong in translation strings:\n Locale Formatted datetime\n en-US 12/19/2020, 10:23 PM\n en-GB 19/12/2020, 22:23\n en-CA 2020-12-19, 10:23 p.m.\n Use an API or library to format dates and times. For example, you can use Intl.DateTimeFormat and inject the formatted dates and times into your translations using string interpolation:\n Non-localized en.json\n 1 {\n 2\n    \"last_sale_day\": \"All orders must be placed by 2022-10-30\"\n 3 }\n Localized en.json\n 1 {\n 2\n    \"last_sale_day\": \"All orders must be placed by {date}\" // 2022-10-30, 10/30/2022, 30/10/2022\n 3 }\n Format numbers\n The format of numbers varies by region, not by language. As a result, numbers, such as the following examples, don't belong in translation strings:\n Locale Formatted number\n en-US 123,000\n en-NL 123.000\n en-IN 1,23,000\n Use an API or library to format numbers. For example, you can use Intl.NumberFormat and inject the formatted numbers into your translations using string interpolation:\n Non-localized en.json\n 1 {\n 2\n    \"congrats\": \"Congratulations on 100,000 orders\"\n 3 }\n Localized en.json\n 1 {\n 2\n    \"congrats\": \"Congratulations on {formatted_number} orders\" // 100,000, 100.000, 1,00,000\n 3 }\n Note\n If the number is a variable, then you should also make use of pluralization features to make sure that the correct grammar can be used for each number.\n Format prices\n The format of prices varies by currency and region, not by language. As a result, prices, such as the following examples, don't belong in translation strings:\n Locale Currency Formatted price\n en-US USD $123,456.00\n en-CH USD US$ 123\u2019456.00\n en-IN USD $1,23,456.00\n Use an API or library to format prices. For example, you can use Intl.NumberFormat and inject the formatted prices into your translations using string interpolation:\n Non-localized en.json\n 1 {\n 2\n    \"order_total\": \"Your total order is ${price}\"\n 3 }\n Localized en.json\n 1 {\n 2\n    \"order_total\": \"Your total order is {formatted_price}\", // $15.50, USD 15.5, 15,50 $US\n 3 }\n Format lists\n The way that items are combined into lists varies by region, not by language. As a result, lists, such as the following examples, don't belong in translation strings:\n Locale Formatted list\n en-US User, Product, or Variant\n en-GB User, Product or Variant\n Use an API or library to format lists of items. For example, you can use Intl.ListFormat and inject the formatted lists into your translations using string interpolation:\n en.json\n 1 {\n 2\n    \"prompt\": \"Please select one of: {nouns}\",\n 3\n    \"nouns\": {\n 4\n      \"user\": \"User\",\n 5\n      \"product\": \"Product\",\n 6\n      \"variant\": \"Variant\",\n 7\n      ...\n 8\n    }\n 9 }\n File\n 1 function selection_prompt() {\n 2\n    nouns = fetch_nouns().map(function (noun) {\n 3\n      return i18n.translate(`nouns.${noun}`);\n 4\n    });\n 5\n    return i18n.translate(\"prompt\", {\n 6\n      nouns: new Intl.ListFormat(locale, {\n 7\n        style: \"long\",\n 8\n        type: \"disjunction\",\n 9\n      }).format(nouns),\n 10\n    });\n 11 }\n Format names\n The way that you address a person varies by context and region.\n For example, for a person with the given name \"Quinn\" and surname \"Ishida\" might be addressed in the following ways:\n Locale Formatted full name Formatted casual name\n en-US Quinn Ishida Quinn\n en-JP IshidaQuinn-sama Ishida-sama\n Don't encode the name formatting conventions of North American English. Instead, use an API or library to format a person's name based on the context, and inject the formatted name into your translations using string interpolation:\n Non-localized en.json\n 1 {\n 2\n    \"greeting\": \"Hello {first_name} {last_name}\",\n 3\n    \"casual_greeting\": \"Hey {first_name}!\"\n 4 }\n Localized en.json\n 1 {\n 2\n    \"greeting\": \"Hello {full_name}\", // Quinn Ishida, IshidaQuinn-sama\n 3\n    \"casual_greeting\": \"Hey {casual_name}!\" // Quinn, Ishida-sama\n 4 }\n Step 4: Translate strings\n Translating strings involves accounting for text expansion in different languages, and providing your source strings to someone that can translate the content.\n Step 4A: Use pseudolocalization (Optional)\n When interfaces are localized, the content often expands in length. In most languages, text is up to 50% longer on average than English. Some non-Latin languages, such as Japanese, take up more vertical space. For character-based languages, text wrapping and line breaking can\u2019t always rely on spaces to separate words. Your interface needs to be flexible enough to accommodate language formatting and text expansion without changing its context of use.\n The Polaris i18n documentation has more information about, and examples of, text expansion issues.\n You can use pseudolocalization tools (example) to simulate text expansion before translation is completed. This enables you to test your app's UI for common text expansion issues. For example, you might want to test for overflowing strings or word wrapping.\n Step 4B: Choose the languages to translate into\n The Shopify admin can be used in any of the supported languages.\n Shopify also translates some buyer-facing strings (first-party themes, checkout, and system messages) into additional languages (for example, refer to the language list in the Dawn theme).\n When deciding on which languages to translate into, consider starting with those most common in the regions or markets that your app supports.\n Step 4C: Translate content\n Translating content involves providing your source strings to someone that can translate the content into each language.\n Note\n Because you'll need to make changes to translations as you develop new features, you should expect the relationship with the provider of your translations to be a continuous partnership.\n There are several options for getting translations. The options vary on cost, turn-around time, and quality.\n Third party translation service\n The highest quality, but often most costly, option is to engage a third party translation service to manage the work of providing translations for your app.\n Translation providers manage the relationships with the translators so that you can have confidence in the quality and turnaround time of the translations.\n Shopify recommends using one of the following translation providers:\n Blend\n Crowdin\n TranslateCI\n Machine translation\n Machine translation, such as Google Translate, is artificial intelligence software that can generate translations on-demand.\n Machine translation can be quick and cost-effective, but the quality of the translations can vary because strings are often translated without context about your app or business.\n Crowdsourced translation\n If your app already has a large community, then sometimes community members are willing to contribute translations.\n This method relies on managing and engaging your app's community in an ongoing manner, which can be time-consuming. Depending on the diversity of your community, it might be difficult to find enough people with fluency in the languages that you're translating your content into.\n Do it yourself\n If you or an acquaintance knows another language, then translations for that language can be manually provided.\n Tips for high-quality translation\n Provide your translators with all the context that they need.\n Concatenate strings mindfully.\n Next steps\n Learn how to translate your app listing.\n Step 1: Externalize strings\n Step 2: Get access to the user's locale\n Step 3: Format strings\n Step 4: Translate strings\n Next steps",
                    "filename": "docs/apps/best-practices/internationalization/getting-started/content.txt",
                    "start_index": 0,
                    "end_index": 11243,
                    "start_line": 1,
                    "end_line": 225,
                    "max_line": 225,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Overview\n Catalogs\n Translate content\n Locally required order data\n B2B\n Deployment\n Distribution\n Billing\n App Store\n Manage translations of merchant-provided content\n You can create and retrieve translated content for Shopify resources, as well as metaobjects and metafields. For example, you might add translations of product information and email notification templates using the GraphQL Admin API so a merchant can send email notifications to their customers in multiple languages. Those translations can then be retrieved by either the GraphQL Admin API or the Storefront API.\n This guide shows you how to use the GraphQL Admin API to enable the es (Spanish) locale on your store, retrieve a product, translate the product's title, publish the new locale, and view the translated content on your store.\n Requirements\n Your app can make authenticated requests to the GraphQL Admin API.\n Your app has the read_products, write_translations, and write_locales access scopes. Learn how to configure your access scopes using Shopify CLI.\n You've created at least one product in your Shopify store.\n Limitations\n If you need to change a store's primary locale, then you need to make the change in the Shopify admin. You can't change the primary locale using the GraphQL Admin API.\n A resource's tags field can't be translated. For example, you can't translate a product's tags.\n The translation response that's returned for menu links and email and SMS notification templates doesn't include the handle field.\n If the merchant changes a product's handle, then URL redirects for that product won't be supported for language-specific URLs.\n You can translate metafields only if they are publicly accessible.\n App proxies don't support translations.\n Step 1: Enable a locale\n The ShopLocale object provides the list of primary and alternate locales that have been enabled on a Shopify store. Each locale has the following attributes:\n Primary: Whether the locale is the default locale for the store. You can only have one primary locale.\n Published: Whether the locale is visible to buyers. A store can have multiple locales in published or unpublished states.\n You can use the shopLocaleEnable mutation to enable a locale on your store. Shopify accepts locales in the following formats:\n Language subtag only: For example, en (English).\n Language subtag + region subtag: For example, en-UK (English as spoken in the United Kingdom).\n In the shopLocale response, include the locale, name, and published fields to verify that the locale has been successfully enabled.\n Note\n By default, newly enabled locales aren't published. Shops are limited to 20 enabled locales.\n POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json\n GraphQL mutation\n 1 mutation enableLocale($locale: String!) {\n 2\n    shopLocaleEnable(locale: $locale) {\n 3\n      shopLocale {\n 4\n        locale\n 5\n        name\n 6\n        published\n 7\n      }\n 8\n    }\n 9 }\n Variables\n 1 {\n 2\n    \"locale\": \"es\"\n 3 }\n JSON response\n 1 {\n 2\n    \"data\": {\n 3\n      \"shopLocaleEnable\": {\n 4\n        \"shopLocale\": {\n 5\n          \"locale\": \"es\",\n 6\n          \"name\": \"Spanish\",\n 7\n          \"published\": false\n    }\n 11 }\n Step 2: Retrieve a translatable product\n To retrieve the first product eligible for translation, use the translatableResources query with the parameters first: 1 and resourceType: PRODUCT.\n In the translatableContent response, include the key, value, digest, and locale fields. You need their response values to write the translation in the next step.\n POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json\n GraphQL query\n 1 {\n 2\n    translatableResources(first: 1, resourceType: PRODUCT) {\n          resourceId\n 6\n          translatableContent {\n 7\n            key\n 8\n            value\n 9\n            digest\n 10\n            locale\n 11\n          }\n 12\n        }\n      \"translatableResources\": {\n 4\n        \"edges\": [\n 5\n          {\n 6\n            \"node\": {\n 7\n              \"resourceId\": \"gid://shopify/Product/1973887860758\",\n 8\n              \"translatableContent\": [\n 9\n                {\n 10\n                  \"key\": \"title\",\n 11\n                  \"value\": \"Great shirt\",\n 12\n                  \"digest\": \"dcf8d211f6633dac78dbd15c219a81b8931e4141204d18fba8c477afd19b75f9\",\n 13\n                  \"locale\": \"en\"\n 14\n                },\n 15\n                {\n 16\n                  \"key\": \"body_html\",\n 17\n                  \"value\": \"This is one fine shirt.\",\n 18\n                  \"digest\": \"8e48350042b4ca04a7a4568774af71f921e7c9b561d9fac7860041e566218d25\",\n 19\n                  \"locale\": \"en\"\n 20\n                }\n 21\n              ]\n 22\n            }\n 23\n          }\n 24\n        ]\n 25\n      }\n 26\n    }\n 27 }\n Step 3: Write a translation\n You can use the translationsRegister mutation to create a new translation for a translatable resource.\n When you create a translation, you need to include the translatable content's digest value in the translatableContentDigest field. A unique digest is returned from the translatableResources query for each translatableContent entry.\n POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json\n GraphQL mutation\n 1 mutation CreateTranslation($id: ID!, $translations: [TranslationInput!]!) {\n 2\n    translationsRegister(resourceId: $id, translations: $translations) {\n 3\n      userErrors {\n 4\n        message\n 5\n        field\n 6\n      }\n 7\n      translations {\n 8\n        locale\n 9\n        key\n 10\n        value\n 11\n      }\n 12\n    }\n 13 }\n Variables\n 1 {\n 2\n    // Replace the value of `id` with the value of `resourceId` from the product that you queried in step 2.\n 3\n    \"id\": \"gid://shopify/Product/GID\",\n 4\n    \"translations\": [\n 5\n      {\n 6\n        \"key\": \"title\",\n 7\n        \"value\": \"Camiseta buena\",\n 8\n        \"locale\": \"es\",\n 9\n        \"translatableContentDigest\": \"dcf8d211f6633dac78dbd15c219a81b8931e4141204d18fba8c477afd19b75f9\"\n 10\n      }\n 11\n    ]\n 12 }\n      \"translationsRegister\": {\n 4\n        \"userErrors\": [],\n 5\n        \"translations\": [\n 6\n          {\n 7\n            \"locale\": \"es\",\n 8\n            \"key\": \"title\",\n 9\n            \"value\": \"Camiseta buena\"\n 10\n          }\n 11\n        ]\n 12\n      }\n 13\n    }\n 14 }\n Step 4: Publish the locale\n You can use the shopLocaleUpdate mutation to publish a locale to a Shopify store. Publishing a locale makes it available for translation. Shops are limited to 20 published locales.\n POST https://{shop}.myshopify.com/admin/api/{api_version}/graphql.json\n GraphQL mutation\n 1 mutation updateLocale {\n 2\n    shopLocaleUpdate(locale: \"es\", shopLocale: {published: true}) {\n 3\n      userErrors {\n 4\n        message\n 5\n        field\n 6\n      }\n 7\n      shopLocale {\n 8\n        name\n 9\n        locale\n 10\n        primary\n 11\n        published\n 12\n      }\n 13\n    }\n 14 }\n JSON response\n 1 {\n 2\n    \"data\": {\n 3\n      \"shopLocaleUpdate\": {\n 4\n        \"userErrors\": [],\n 5\n        \"shopLocale\": {\n 6\n          \"name\": \"Spanish\",\n 7\n          \"locale\": \"en\",\n 8\n          \"primary\": false,\n 9\n          \"published\": true\n    }\n 13 }\n Step 5: Visit your online store\n To view the translation on your online store, complete the following steps:\n Navigate to the product's page on your online store.\n Add an es to your URL. For example, myshopifystore.com/es/products/great-shirt.\n Webhooks\n Your app can subscribe to webhooks for event notifications related to locales. The following examples show the JSON responses from each of the available webhooks.\n To learn how to set up and consume webhooks, refer to Webhooks configuration overview.\n Example webhook responses\n locales/create\n locales/update\n 1 // Occurs whenever a shop locale is enabled\n 2 {\n 3\n    \"locale\": \"fr-CA\",\n 4\n    \"published\": true\n 5 }\n Next steps\n Use the Storefront API to retrieve translated content.\n Explore an example for retrieving a list of shop locales with the GraphQL Admin API.\n Explore examples for retrieving translatable resources with the GraphQL Admin API.\n Learn how to support multiple currencies and languages in your theme.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Requirements\n Limitations\n Step 1: Enable a locale\n Step 2: Retrieve a translatable product\n Step 3: Write a translation\n Step 4: Publish the locale\n Step 5: Visit your online store\n Webhooks",
                    "filename": "docs/apps/selling-strategies/markets/translate-content/content.txt",
                    "start_index": 0,
                    "end_index": 8272,
                    "start_line": 1,
                    "end_line": 300,
                    "max_line": 300,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "API exploration\n Products and collections\n Search and discovery\n Markets\n Overview\n International pricing\n Multiple languages\n Cart\n Customers\n Prioritizing data in your query\n Release notes\n Storefront API reference\n Building with the Customer Account API\n Additional SDKs\n Building localized experiences with the Storefront API and Shopify Markets\n Shopify helps merchants expand their business to a global audience, sell to multiple countries, and scale internationally. This means that many merchants need to sell in multiple languages and currencies.\n This guide introduces the ways that you can configure localized experiences for merchants and customers using the GraphQL Storefront API.\n How it works\n You can use the Storefront API to complete the following tasks related to internationalization:\n Query international prices for products and orders, and explicitly set the context of a cart and checkout.\n Support multiple languages on a storefront.\n International pricing\n Users can configure the prices of products on a per country basis in their Shopify admin. For example, a storefront might have default prices for products set in USD, and price adjustments configured for Canada (CAD), Australia (AUD), and France (EUR).\n To learn how to query international prices for products and orders, and explicitly set the context of a cart and checkout, refer to Support international pricing on storefronts.\n The following diagram shows the different prices of the same product based on customer location:\n Multiple languages\n You can use the Storefront API to support multiple languages on a storefront. For example, you might want to retrieve the available languages for a Shopify store, retrieve translations, and create a checkout in the customer's language.\n Translatable resources\n The following resources include translatable properties that can be retrieved by using the Storefront API:\n Type Description Fields\n Collection A grouping of products that a shop owner can create to organize them or make their shops easier to browse. title, descriptionHtml, description\n Metafield Custom metadata attached to a resource. Metafields can be sorted into namespaces and are comprised of keys, values, and value types. value\n Article An article in an online store blog. title, content, contentHtml, excerpt, excerptHtml\n Blog An online store blog. title\n Page A custom page on the online store. title, body\n Product An individual item for sale in a Shopify store. title, descriptionHtml, description\n ProductOption Product property names like \"Size\", \"Color\", and \"Material\" that the customers can select. Variants are selected based on permutations of these options. 255 characters limit each. name, values\n ProductVariant A different version of a product, such as differing sizes or differing colors. title, selectedOptions\n ShopPolicy A policy that a merchant has configured for their store, such as their refund or privacy policy. body\n Developer resources\n Get familiar with the Storefront API by exploring guides that cover common use cases, and the complete reference for the GraphQL Storefront API.\n Support international pricing on storefronts\n Learn how to support international pricing with the Storefront API.\n Support multiple languages on storefronts\n Learn how to support multiple languages with the Storefront API.\n GraphQL Storefront API reference\n Consult the complete reference for the GraphQL Storefront API.\n Next steps\n Learn how to query international prices for products and orders, and explicitly set the context of a cart and checkout.\n Support multiple languages on a storefront with the Storefront API.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n How it works\n International pricing\n Multiple languages\n Developer resources\n Next steps\n Updates & News\n Developer changelog",
                    "filename": "docs/custom-storefronts/building-with-the-storefront-api/markets/content.txt",
                    "start_index": 0,
                    "end_index": 3812,
                    "start_line": 1,
                    "end_line": 60,
                    "max_line": 60,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Functions\n Overview\n Input and output\n Language support\n Testing and debugging\n Localization\n Deployment\n Distribution\n Billing\n App Store\n Localization practices for Shopify Functions\n Functions availability\n Some Function APIs are available only in developer preview.\n Users that have checkout.liquid customizations need to upgrade to Checkout Extensibility to use Function APIs.\n Public apps that are distributed through the Shopify App Store and contain functions can be used by stores on any plan. Only stores on a Shopify Plus plan can use custom apps that contain Shopify Function APIs.\n This guide describes specific localization practices that you can use when creating Shopify Functions.\n Localizing title and description\n The function name and description properties in the shopify.extension.toml display to merchants in the Shopify admin. To create the best experience for merchants, it's important to localize the values of name and description.\n Use the following process to provide translations for the name and description properties:\n In shopify.extension.toml, replace the values for name and description with values prefixed with t:. The prefix indicates the translation key that Shopify uses when displaying the properties. The following example shows how define the properties:\n shopify.extension.toml\n 1 name = \"t:name\"\n 2 description = \"t:description\"\n Create a locales folder within your function extension to contain translation resources.\n Create a JSON file for the default language and translations for these fields.\n The name of the file should follow the format <language-iso>.default.json. Shopify uses these translations for the language in the file name, and for any languages which you don't provide. The keys in the JSON document should match the translation keys used in your shopify.extension.toml. The following example shows how to set up a JSON file:\n en.default.json\n 1 {\n 2\n    \"name\": \"The English function name\",\n 3\n    \"description\": \"The English function description\"\n 4 }\n Create JSON translation resources for additional languages.\n The name of these files should follow the format <language-iso>.json. Shopify uses these translations for the language in the file name. The keys in the JSON document should match the translation keys used in your shopify.extension.toml. The following example shows how to create JSON translation resources in French:\n fr.json\n 1 {\n 2\n    \"name\": \"Le nom de la fonction en fran\u00e7ais\",\n 3\n    \"description\": \"La description de la fonction en fran\u00e7ais\"\n 4 }\n Providing translated content\n Shopify provides the current locale to function input queries as part of the Localization object. For example, the Order Discount API returns Localization from the localization field on its Input root. Your function should use this locale to provide translated content in function output for any messages that display to customers.\n Shopify recommends using language-native libraries to embed translated content in your function WebAssembly module.\n Converting money values\n When selling to multiple markets, you need to be aware of the currency displayed to the customer at checkout. Function input queries provide monetary values in the customer's displayed currency. Likewise, monetary values output from functions must be in the customer's currency.\n You can use the function input's presentment_currency_rate property for the conversion rate between the store currency and the currency displayed to the customer. You must multiply any merchant-configured amounts by the presentment_currency_rate when comparing monetary values with the cart, or when outputting value discounts.\n For example, if your app allows merchants to configure a fixed amount for a discount function, then you can use a numeric metafield and populate the metafield with the value in the store currency. When your function executes, it must multiply the configured value by the presentment_currency_rate input to compare the configured subtotal to the customer's cart subtotal in the customer's display currency.\n The following example shows how to apply the presentment_currency_rate on a value discount:\n 1 fn function(input: input::Input) -> Result<FunctionResult, Box<dyn std::error::Error>> {\n 2\n      let config: input::Configuration = input.configuration();\n 3\n      let cart_lines = input.cart.lines;\n 4\n      let rate = input.presentment_currency_rate.parse::<f64>()?;\n 5\n 6\n      ...\n 7\n 8\n      let value: api::Value = Value::FixedAmount(FixedAmount {\n 9\n          amount: config.amount * rate,\n 10\n          applies_to_each_item: Some(true),\n 11\n      });\n 12\n 13\n      Ok(FunctionResult {\n 14\n          discounts: vec![Discount {\n 15\n              message: None,\n 16\n              conditions: None,\n 17\n              targets,\n 18\n              value,\n 19\n          }],\n 20\n          discount_application_strategy: DiscountApplicationStrategy::First,\n 21\n      })\n 22 }\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Localizing title and description\n Providing translated content\n Converting money values",
                    "filename": "docs/apps/functions/localization/content.txt",
                    "start_index": 0,
                    "end_index": 5062,
                    "start_line": 1,
                    "end_line": 95,
                    "max_line": 95,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Config\n Locales\n Overview\n Schema locale files\n Storefront locale files\n Storefront locale files\n Storefront locale files are JSON files with a .json file extension. They host translation strings for content displayed on the storefront throughout the theme. These translations can be accessed by merchants through the Shopify Language Editor.\n Note\n Shopify provides checkout and system message translations through the Shopify Language Editor. However, this data is stored by Shopify outside of storefront locale files.\n Rather than hard-coded text strings, theme layouts, templates, snippets, and Liquid assets can reference these translations with the Liquid translation filter (t filter). This returns the appropriate translated string from the locale file for the active language.\n When using the t filter, you can interpolate and pluralize translations, as well as localize any dates and times.\n Location\n Storefront locale files are located in the locales directory of the theme:\n 1 \u2514\u2500\u2500 theme\n 2\n      ...\n 3\n      \u251c\u2500\u2500 config\n 4\n      \u2514\u2500\u2500 locales\n 5\n        \u251c\u2500\u2500 en.default.json\n 6\n        ...\n Schema\n Storefront locale files need to follow a specific naming structure. They also follow a basic organizational structure:\n Category: The top-level category of your translations.\n Group: The second level grouping of translations within a category.\n Description: The third level, which represents the individual translations.\n Example\n 1 {\n 2\n    \"my_category\": {\n 3\n      \"my_group\": {\n 4\n        \"my_description\": \"translation text\",\n 5\n        ...\n 6\n      },\n 7\n      ...\n 8\n    },\n 9\n    ...\n 10 }\n Tip\n When naming translation descriptions, try to be descriptive enough to give the translation context. For example, blogs.article_comment.submit_button_text gives more context than blogs.article_comment.submit.\n Name structure\n Locale file naming must follow the standard IETF language tag nomenclature, where the first lowercase letter code represents the language, and the second uppercase letter code represents the region.\n For example:\n Language Format\n English - Great Britain en-GB.json\n Spanish - Spain es-ES.json\n French - Canada fr-CA.json\n If a language isn\u2019t region specific, you can use the 2-letter lowercase language representation.\n For example:\n Language Format\n Finnish - All regions fi.json\n Additionally, you must designate a default locale file.\n The default locale file\n You must designate a default locale file in the format of *.default.json, where * is your selected language. This file contains the translations for the default language of the theme. Only one default file is permitted.\n Most themes use en.default.json, which sets the default locale of the theme to English.\n Content\n To ensure that translations are mapped correctly, and to keep the process as simple as possible for merchants, you should organize your key structure to reflect your theme structure.\n For example, the first two levels of the structure might look like this:\n 1st level 2nd level\n general 404, breadcrumbs, search (results page and blank slates), pagination\n blogs article, article comments, blog sidebar\n cart cart contents, updates, notes, link to checkout\n collection collection, collection loop\n products product, product loop, related products\n layout general field titles and identifiers\n customer account, orders (list and details), account activation, addresses, login, password, registration\n contact contact form, form errors\n home_page blank slate, featured, help\n gift_cards title, usage terms\n Note\n If you use translations in snippets, then you should group them with the category most related to the snippet's role. For example, if you have a related-products.liquid snippet, then any associated translations should be included in the products group.\n Usage\n When working with storefront locale files, be aware of the following:\n referencing storefront translations\n interpolation\n preventing translations from being escaped\n pluralizing translations\n date and time localization\n checkout and system messages\n Reference storefront translations\n To reference translations from the storefront locale file for your theme's active language, you can use translation keys and the Liquid translation filter (t filter).\n For example, let's assume you have locale files for English, French, and Spanish. In this case, you might have the following in each associated locale file:\n /locales/en.default.json (English)\n 1 {\n 2\n    \"blog\": {\n 3\n      \"comment\": {\n 4\n        \"email\": \"Your email\"\n /locales/fr.json (French)\n 1 {\n 2\n    \"blog\": {\n 3\n      \"comment\": {\n 4\n        \"email\": \"Votre adresse courriel\"\n 5\n      }\n 6\n    }\n 7 }\n /locales/es-ES.json (Spanish)\n 1 {\n 2\n    \"blog\": {\n 3\n      \"comment\": {\n 4\n        \"email\": \"Su correo electr\u00f3nico\"\n 5\n      }\n 6\n    }\n 7 }\n To reference this translation, you might use something like the following:\n 1 <span>{{ 'blog.comment.email' | t }}</span>\n Tip\n When referencing translation keys in Liquid, they must be wrapped in single quotes (').\n The output is customized based on the settings in each locale file:\n Output\n 1 // English\n 2 <span>Your email</span>\n 3\n 4 // French\n 5 <span>Votre adresse courriel</span>\n 6\n 7 // Spanish\n 8 <span>Su correo electr\u00f3nico</span>\n Interpolation\n Translation strings can be interpolated, meaning you can include variables in your strings to be dynamically populated when the string is referenced in Liquid. For example, you can include following in your locale file:\n /locales/en.default.json\n 1 {\n 2\n    \"layout\": {\n 3\n      \"header\": {\n 4\n        \"hello_user\": \"Hello {{ name }}!\"\n When you reference that translation in your theme, you can specify a value for the name variable:\n /layout/theme.liquid\n 1 {% if customer %}\n 2\n    <h1>{{ 'layout.header.hello_user' | t: name: customer.first_name }}</h1>\n 3 {% endif %}\n In the case of a customer named \"Jane\", this code outputs the following:\n Output\n 1 <h1>Hello Jane!</h1>\n Pass multiple arguments\n With interpolation, it's possible to pass multiple arguments, separated by a comma (,). For example, if you want to extend the example above to show the customer's first and last name, then you can adjust your translation string and theme reference to the following:\n /locales/en.default.json\n 1 {\n 2\n    \"layout\": {\n 3\n      \"header\": {\n 4\n        \"hello_user\": \"Hello {{ first_name }} {{ last_name }}!\"\n 5\n      }\n 6\n    }\n 7 }\n /layout/theme.liquid\n 1 {% if customer %}\n 2\n    <h1>\n 3\n      {{ 'layout.header.hello_user' | t: first_name: customer.first_name, last_name: customer.last_name }}\n 4\n    </h1>\n 5 {% endif %}\n In the case of a customer named \"Jane Doe\", this code outputs the following:\n Output\n 1 <h1>Hello Jane Doe!</h1>\n Prevent translations from being escaped\n Translated content is escaped by default, meaning any HTML character is converted into its entity equivalent.\n You can add the suffix _html to the description level of your translation key to prevent translated content from being escaped. For example, the content output by the following translation would be escaped, causing the <strong> tags to show as plain text:\n /locales/en.default.json\n 1 {\n 2\n    \"layout\": {\n 3\n      \"header\": {\n 4\n        \"announcement_bar_text\": \"Spend $50 and get <strong>FREE</strong> shipping\",\n 5\n      }\n 6\n    }\n 7 }\n Adding the _html suffix prevents the output content from being escaped, allowing the <strong> tags to render as proper HTML:\n /locales/en.default.json\n 1 {\n 2\n    \"layout\": {\n 3\n      \"header\": {\n 4\n        \"announcement_bar_text_html\": \"Spend $50 and get <strong>FREE</strong> shipping\",\n 5\n      }\n 6\n    }\n 7 }\n Tip\n The _html suffix is useful for cases like including HTML characters in translations, or using translations in JavaScript as part of a <script> tag or js.liquid asset file.\n Pluralize translations\n You can apply locale-aware pluralizations to translations by passing a count attribute to the translation filter (t filter).\n The following pluralization keys, defined by the Unicode Consortium's CLDR, are supported:\n few\n many\n one\n other\n two\n zero\n For example, the following translation and translation reference returns the following output:\n /locales/en.default.json\n 1 {\n 2\n    \"customers\": {\n 3\n      \"orders\": {\n 4\n        \"order_count\": {\n 5\n          \"one\": \"You've made {{ count }} order with us\",\n 6\n          \"other\": \"You've made {{ count }} orders with us\"\n    }\n 10 }\n /layout/theme.liquid\n 1 {% if customer %}\n 2\n    <h1>{{ 'customers.order.order_count' | t: count: customer.orders_count }}</h1>\n 3 {% endif %}\n Output\n 1 // count == 1\n 2 <h1>You've made 1 order with us</h1>\n 3\n 4 // count == 12\n 5 <h1>You've made 12 orders with us</h1>\n For more information about pluralization rules in different languages, refer to the Unicode language plural rules tables.\n Date and time localization\n Dates and times can be rendered with the date and time_tag Liquid filters. Each has default format options that will display in the appropriate format for the store's active language:\n date filter default format options\n time_tag filter default format options\n For example, the following Liquid generates the following output:\n Input\n 1 {{ order.created_at | date: format: 'abbreviated_date' }}\n Output\n 1 Dec 31, 2018\n Custom formats\n You can include custom formats in locale files by adding a date_formats object:\n locales/en.json\n 1 {\n 2\n    \"date_formats\": {\n 3\n      \"month_and_year\": \"%B %Y\"\n 4\n    }\n 5 }\n These formats must use the same parameters as Ruby's strftime method. You can find a list of these parameters in Ruby's documentation, or use a site like strfti.me.\n Caution\n Ensure that custom formats are included in all locale files. If a custom format is missing in the locale file of the active language, then a Liquid error is rendered.\n Using the custom format above, the following Liquid generates the following output:\n Input\n 1 {{ order.created_at | date: format: 'month_and_year' }}\n Output\n 1 December 2018\n Checkout and system messages\n Shopify provides checkout and system messages in the following languages:\n Bulgarian (Bulgaria)\n Chinese (Simplified)\n Chinese (Traditional)\n Croatian (Croatia)\n Czech\n Danish\n Dutch\n English\n Finnish\n French\n German\n Greek\n Hindi\n Hungarian\n Indonesian\n Italian\n Japanese\n Korean\n Lithunian (Lithuania)\n Malay\n Norwegian (Bokm\u00e5l)\n Polish\n Portuguese (Brazil)\n Portuguese (Portugal)\n Romania (Romanian)\n Russian\n Slovak\n Slovenian\n Spanish\n Swedish\n Thai\n Turkish\n Note\n If you're using a language that's not in the list above, then you'll need to manually enter translations for checkout and system messages through the Shopify Language Editor.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Location\n Schema\n Content\n Usage",
                    "filename": "docs/themes/architecture/locales/storefront-locale-files/content.txt",
                    "start_index": 0,
                    "end_index": 10715,
                    "start_line": 1,
                    "end_line": 325,
                    "max_line": 325,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "APIs\n Collapse sidebar\n Partner API\n Unstable\n 2024-07 release candidate\n Overview\n Authentication\n Endpoints and queries\n Rate limits\n Status and error codes\n Translations\n App events\n Common objects\n Jobs\n Transactions\n GraphQL Types\n GraphQL Partner API\n The Partner API provides access to data in the Partners Dashboard. Data includes transactions that impact your earnings, app events, and for participating partners, Experts Marketplace opportunities. With this information, you can effectively scale your business by automating front and back-office operations, freeing up time to focus on solutions for Shopify merchants.\n Authentication\n There are two pieces of information that you must include to successfully authenticate requests to a Partner API endpoint:\n Your organization ID. You can find this in the URL of the Partners Dashboard when you're logged in. For example: https://partners.shopify.com/organization-id/api/2021-04/graphql.json\n A Partner API client access token. The API client access token must belong to the organization that you're querying. You can create a new API client for your organization through the Partner Dashboard. For example: X-Shopify-Access-Token:\n curl\n 1\n 2\n curl -X POST \\\n https://partners.shopify.com/{organization_id}/api/2021-07/graphql.json \\\n -H 'Content-Type: application/json' \\\n -H 'X-Shopify-Access-Token: {partner_access_token}' \\\n -d '{\n \"query\": \"{your_query}\"\n }'\n Endpoints and queries\n Use GraphiQL explorer through your Partners Dashboard to query the Partner API. The GraphiQL explorer uses your Partner API client to retrieve the requested information from your Partner account.\n From your Partners Dashboard, navigate to Settings > Partner API clients. Next to the Partner API client that you want to explore, click View GraphiQL explorer.\n You can also use the GraphiQL explorer to work with the schema and build queries.\n Queries begin with one of the objects listed under QueryRoot. The QueryRoot is the schema\u2019s entry-point for queries. Queries are equivalent to making a GET request in REST.\n POST\n https://partners.shopify.com/{org_id}/api/2024-04/graphql.json\n You can use cURL or an HTTP client such as Postman or Insomnia to query the Partner API. This example is a basic request using cURL. Replace {organization-id} with the ID for the organization you are querying, and replace {partner-access-token} with your client access token. This request retrieves the last 20 active Experts Marketplace conversations with unread messages.\n The Partner API is versioned. To keep your app stable, make sure you specify a supported version in the URL.\n Create a Partner API client\n You must be an organization owner to create and manage your API client through the Partners Dashboard. Each API client has access only to the data belonging to the organization in which it is created. You need to create an API client for each organization that you want to access using the API. From the Partners Dashboard, navigate to Settings > Partner API clients, and then click Manage Partner API clients.\n The following permissions can be granted for each API client:\n View financials: This permission is required to access Transaction resources. These resources represent all of the transactions that impact your Partner earnings.\n Manage apps: This permission is required to access App resources, including all app-related events such as installs, uninstalls, and charges. This resource represents all of the public and private apps managed by your organization.\n Manage themes: This permission is required to access the Theme resource. This resource represents all of the Shopify themes managed by your organization.\n Manage jobs: This permission is required to access Conversation and Job resources. These resources represent Experts Marketplace conversations and jobs owned by your organization.\n Secure your data by rotating your access token\n Your access token secures your organization's data. It should be kept secret at all times. If you need to replace your access token, you can generate a secondary token from your Partners Dashboard, Navigate to Settings > Partner API clients, and then click Manage Partner API clients.\n Usage limitations\n Transaction information is for analytics purposes only. This information shouldn't be used for accounting or financial reporting.\n All apps and services connecting to the Partner API are subject to Shopify\u2019s API Terms of Service. Only organization owners can create and manage Partner API clients.\n POST\n https://partners.shopify.com/{org_id}/api/2024-04/graphql.json\n curl\n 1\n 2\n 3\n 4\n 20\n 21\n 22\n 23\n # Get the ID and user name of your 20 most recent unread messages\n curl -X POST \"https://partners.shopify.com/{org_id}/api/2021-07/graphql.json\" \\\n -H \"Content-Type: application/json\" \\\n -H \"X-Shopify-Access-Token: {partner-access-token}\" \\\n -d '{\n \"query\": \"{\n conversations(\n first: 20,\n unreadOnly: true,\n statuses: [ACTIVE]\n ) {\n edges {\n node {\n id\n merchantUser {\n name\n }\n }\n }\n }\n }\"\n }'\n Rate limits\n The Partner API has a rate limit of four requests per second per Partner API client. After the limit is exceeded, all requests are throttled and return an {\"errors\": [{\"message\": \"Too many requests\"}]} error.\n {}\n Request\n 1 HTTP/1.1 429 Too Many Requests\n {}\n Response\n JSON\n 1 HTTP/1.1 429 Too Many Requests\n 2\n    {\n 3\n      \"errors\": [{\n 4\n        \"message\": \"Too many requests\",\n 5\n        \"extensions\": {\n 6\n          \"code\": \"429\"\n 7\n        }\n 8\n      }]\n 9\n    }\n Status and error codes\n All API queries return HTTP status codes that contain more information about the response.\n 200 OK\n The GraphQL Partner API can return a 200 OK response code in cases that would typically produce 4xx errors in REST.\n 200 response codes can return different formats including both strings and objects.\n Error handling\n The response for the errors object contains additional detail to help you debug your operation.\n The response for mutations contains additional detail to help debug your query. To access this, you must request userErrors.\n Properties\n errors\n array\n A list of all errors returned\n Show error item properties\n {}\n Sample 200 error responses\n Throttled\n Internal\n 1 {\n 2\n    \"errors\": [\n 3\n      {\n 4\n        \"message\": \"Too many requests\",\n 5\n        \"extensions\": {\n 6\n          \"code\": \"429\"\n 7\n        }\n 8\n      }\n 9\n    ]\n 10 }\n 4xx and 5xx status codes\n The 4xx and 5xx errors occur infrequently. They are often related to network communications, your account, or an issue with Shopify\u2019s services.\n Many errors that would typically return a 4xx or 5xx status code, return an HTTP 200 errors response instead. Refer to the 200 OK section above for details.\n 400 Bad Request\n The server will not process the request.\n 401 Unauthorized\n A call was made with an invalid API client (for example, using tokens that don't exist) or against an invalid Organization (for example, one that's been disabled).\n 404 Not Found\n The resource isn\u2019t available. This is often caused by querying for something that\u2019s been deleted.\n 429 Too Many Requests\n Too many requests were sent in a given time period.\n Didn\u2019t find the status code you\u2019re looking for? View the complete list of API status response and error codes.\n {}\n Sample error codes\n 400\n 401\n 404\n 429\n 1 {\n 2\n    \"errors\": [{\n 3\n      \"message\": \"Maximum query length is 50000 characters\",\n 4\n      \"extensions\": {\n 5\n        \"code\": \"400\"\n 6\n      }\n 7\n    }]\n 8 }\n Translations\n To receive translated error messages when using the Partner API, you need to specify a locale in the Accept-Language HTTP request header when sending queries. This example shows a header that enables error messages to be returned in Spanish when using the Partner API.\n If the locale is missing or unsupported, then the API returns error messages in English.\n {}\n Sample request header for locale\n json\n 1 Accept-Language: es",
                    "filename": "docs/api/partner/content.txt",
                    "start_index": 0,
                    "end_index": 7894,
                    "start_line": 1,
                    "end_line": 185,
                    "max_line": 185,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Terminal\n npm\n Yarn\n pnpm\n $ npm run deploy\n Releasing an app version replaces the current active version that's served to stores that have your app installed. It might take several minutes for app users to be upgraded to the new version.\n Tip\n If you want to create a version, but avoid releasing it to users, then run the deploy command with a --no-release flag.\n You can release the unreleased app version using the CLI release command, or through the Partner Dashboard.\n Next steps\n Review the APIs\n Use JavaScript APIs to access translations for localizing customer account UI extensions.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n What you'll learn\n Requirements\n Sample code\n Step 1: Create a UI extension\n Step 2: Define translations\n Step 3: Localize the currency\n Step 4: Localize numbers\n Step 5: Translate the balance remaining message\n Step 6: Translate the loyalty points message with plural values\n Step 7: Deploy the UI extension\n Next steps\n Updates & News\n Developer changelog\n Partner blog",
                    "filename": "docs/apps/customer-accounts/best-practices/localizing-ui-extensions/getting-started/content.txt",
                    "start_index": 12324,
                    "end_index": 13338,
                    "start_line": 139,
                    "end_line": 370,
                    "max_line": 370,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Overview\n Performance\n Accessibility\n Internationalization\n Overview\n Getting started\n Embedding\n Mobile\n Deceptive code\n Design guidelines\n Deployment\n Distribution\n Billing\n App Store\n Internationalization\n Shopify helps merchants expand their business to a global audience, sell to multiple countries, and scale internationally. This means that many merchants need to sell in multiple languages and currencies.\n This guide describes the process of internationalizing your app, offers definitions associated with the concept of internationalization, and provides a list of use cases for internationalization.\n How it works\n Internationalization helps merchants expand their business to a global audience by creating shopping experiences in local languages and currencies.\n Tip\n You can speed up internationalizing new and existing apps by using i18n-ally, an open source Visual Studio Code extension that makes it easier to externalize strings, view and navigate to translation strings from code, and perform machine translation.\n The following diagram illustrates the different stages in the process of internationalizing your app:\n Prepare strings: The first stage in internationalizing your app includes preparing localized strings. This involves externalizing strings, getting access to the user's locale, formatting strings, and translating strings in your app.\n Manage your App Store listing: After you've prepared localized strings, you can promote your app to a global audience by writing an app listing and translating the app listing.\n Definitions\n The following definitions provide a starting point for understanding key terms associated with internationalizing your app:\n Term Definition\n Internationalization Building your app and interface so it can be used in different locales. This includes creating flexible interfaces that allow for text expansion and changes to word order.\n Localization Adapting your app and interface for different locales to make them a good cultural fit. This includes adapting features, changing visuals, and translating text.\n Translation Converting text from one language to another. Not to be confused with localization, translation is just one part of localizing a product.\n Use cases\n The app user is going global as their addressable market is growing, and their buyers live in different parts of the world.\n The app user has staff that use the Shopify admin in multiple languages.\n You want to promote your app in the Shopify community. Shopify promotes localized apps in the App Store over apps that aren\u2019t localized.\n You want to sell your app cross-border in other markets.\n Next steps\n Learn how to get started with internationalizing your app.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n How it works\n Definitions\n Use cases\n Next steps\n Updates & News",
                    "filename": "docs/apps/best-practices/internationalization/content.txt",
                    "start_index": 0,
                    "end_index": 2813,
                    "start_line": 1,
                    "end_line": 45,
                    "max_line": 45,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                }
            ]
        },
        "mmr_code_snippets_initial": [
            {
                "code": "{\n  upcartSettings: {\n    cartPosition: { type: 'single_line_text_field', value: 'right' },\n    disableSticky: { type: 'boolean', value: false },\n    openOnAddToCart: { type: 'boolean', value: true },\n    redirectToCart: { type: 'boolean', value: false },\n    translations: {\n      type: 'json',\n      value: {\n        cartTitle: 'Cart \u2022 {{cart_quantity}}',\n        checkout: 'Checkout \u2022 {{total_price}}',\n        addText: 'Add',\n        emptyCart: 'Your cart is empty',\n        discountSavings: 'Save',\n        continueShopping: 'Or continue shopping',\n        /** This was changed from being overall savings to only the savings from discounts. (ignore compare-at prices) */\n        totalSavings: 'Discounts',\n      },\n    },\n    htmlFields: {\n      type: 'json',\n      value: {\n        aboveFooter: '',\n        aboveHeader: '',\n        belowHeader: '',\n        betweenLineItems: '',\n        aboveCheckoutButton: '',\n        belowCheckoutButton: '',\n        bottomOfCart: '',\n        onEmptyCart: '',\n        scriptsBeforeLoad: '',\n      },\n    },\n    /** This field has been changed to mean \"show savings below price for products\". This includes compare-at prices */\n    automaticDiscount: { type: 'boolean', value: true },\n    basePriceForDiscount: { type: 'boolean', value: false },\n    hideSingleUnderscoredProperties: { type: 'boolean', value: false },\n    showContinueShoppingButton: { type: 'boolean', value: false },\n    ajaxRaceConditionPrevention: { type: 'boolean', value: false },\n    htmlFieldForceReRender: { type: 'boolean', value: false },\n    updateItemIdentifier: { type: 'single_line_text_field', value: 'key' as ItemIdentifier },\n    customCSS: { type: 'multi_line_text_field', value: '*{}' },\n    customStickyCartCSS: { type: 'multi_line_text_field', value: '*{}' },\n    integrationZapietEnabled: { type: 'boolean', value: false },\n    integrationYmqEnabled: { type: 'boolean', value: false },\n  },",
                "filename": "common/defaultMetafields.ts",
                "start_index": 13016,
                "end_index": 14936,
                "start_line": 1,
                "end_line": 556,
                "max_line": 567,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "t translations. */\n  translations: Array<Translation>;\n};\n\n\n/** A resource that has translatable fields. */\nexport type TranslatableResourceTranslationsArgs = {\n  locale: Scalars['String'];\n  marketId?: InputMaybe<Scalars['ID']>;\n  outdated?: InputMaybe<Scalars['Boolean']>;\n};\n\n/**\n * An auto-generated type for paginating through multiple TranslatableResources.\n *\n */\nexport type TranslatableResourceConnection = {\n  __typename?: 'TranslatableResourceConnection';\n  /** A list of edges. */\n  edges: Array<TranslatableResourceEdge>;\n  /** A list of the nodes contained in TranslatableResourceEdge. */\n  nodes: Array<TranslatableResource>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/**\n * An auto-generated type which holds one TranslatableResource and a cursor during pagination.\n *\n */\nexport type TranslatableResourceEdge = {\n  __typename?: 'TranslatableResourceEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of TranslatableResourceEdge. */\n  node: TranslatableResource;\n};\n\n/** Specifies the type of resources that are translatable. */\nexport enum TranslatableResourceType {\n  /** A product collection. Translatable fields: `title`, `body_html`, `meta_title`, `meta_description`. */\n  Collection = 'COLLECTION',\n  /**\n   * The delivery method definition. For example, \"Standard\"",
                "filename": "web/server/modules/shopify/graphql/generated/index.ts",
                "start_index": 1698694,
                "end_index": 1700060,
                "start_line": 42597,
                "end_line": 42640,
                "max_line": 44153,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<LegacyCard title={t('Have questions?')}>\n          <LegacyCard.Section>\n            {t('Reach out to our support team who can answer questions about UpCart!')}\n          </LegacyCard.Section>\n          <LegacyCard.Section subdued>\n            <Button fullWidth onClick={() => showNewMessages()}>\n              {t('Contact Support')}\n            </Button>\n          </LegacyCard.Section>\n        </LegacyCard>\n        <LegacyCard title={t('Public API')}>\n          <LegacyCard.Section>\n            {' '}\n            {t(`Learn about all of the currently available variables and functions in the UpCart public API. These are\n            designed to be used by developers for custom integrations.`)}\n          </LegacyCard.Section>\n          <LegacyCard.Section subdued>\n            <Button\n              fullWidth\n              onClick={() =>\n                window.open(\n                  'https://aftersell.notion.site/UpCart-Public-API-7a0f6d75cb044871bdb6da5d99cfc755',\n                  '_blank',\n                )\n              }\n            >\n              {t(`Public API`)}\n            </Button>\n          </LegacyCard.Section>\n        </LegacyCard>\n        <LegacyCard title={t('Privacy Policy')}>\n          <LegacyCard.Section>{t(`UpCart's privacy policy.`)}</LegacyCard.Section>\n          <LegacyCard.Section subdued>\n            <Button fullWidth onClick={() => window.open('https://upcart.app/privacy', '_blank')}>\n              {t(`Privacy Policy`)}\n            </Button>\n          </LegacyCard.Section>\n        </LegacyCard>\n        <LegacyCard title={t('Acknowledgements')}>\n          <LegacyCard.Section>\n            {t(`Licenses for open source software included in UpCart's dashboard.`)}\n          </LegacyCard.Section>\n          <LegacyCard.Section subdued>\n            <Button fullWidth onClick={() => window.open('https://slide.upcart.app/licenses/web.txt', '_blank')}>\n              {t(`Acknowledgements`)}\n            </Button>\n          </LegacyCard.Section>\n        </LegacyCard>\n      </Layout.Section>\n    </Layout>\n  );\n};\n\nexport default TutorialsWithDefaultLayout;",
                "filename": "web/src/@templates/Tutorials/Tutorials.tsx",
                "start_index": 2974,
                "end_index": 5067,
                "start_line": 86,
                "end_line": 139,
                "max_line": 139,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { InputField } from '@components/common/FormField';\nimport { useCurrentShop } from '@providers/shopContext';\nimport { Collapsible, LegacyStack } from '@shopify/polaris';\nimport { Field } from 'formik';\nimport get from 'lodash/get';\nimport { useMemo } from 'react';\n\nconst TranslationsSettings = ({ open }) => {\n  const { shop: shopDb } = useCurrentShop();\n  const upsellModuleIsEnabled = useMemo(() => get(shopDb, 'shop.featureFlags.upsellModuleIsEnabled', null), [shopDb]);\n\n  return (\n    <Collapsible\n      open={open}\n      id=\"basic-collapsible\"\n      transition={{ duration: '500ms', timingFunction: 'ease-in-out' }}\n      expandOnPrint\n    >\n      <LegacyStack vertical spacing=\"tight\">\n        <Field\n          id=\"upcartSettings.translations.cartTitle\"\n          name=\"upcartSettings.translations.cartTitle\"\n          label=\"Cart title\"\n          helpText={'Use {{cart_quantity}} for the # of items in cart'}\n          component={InputField}\n        />\n        <Field\n          id=\"upcartSettings.translations.checkout\"\n          name=\"upcartSettings.translations.checkout\"\n          label=\"Checkout\"\n          helpText={'Use {{total_price}} to display the total price'}\n          component={InputField}\n        />\n        {upsellModuleIsEnabled && (\n          <Field\n            id=\"upcartSettings.translations.addText\"\n            name=\"upcartSettings.translations.addText\"\n            label=\"Add text (Upsells Module)\"\n            component={InputField}\n          />\n        )}\n        <Field\n          id=\"upcartSettings.translations.emptyCart\"\n          name=\"upcartSettings.translations.emptyCart\"\n          label=\"Your cart is empty\"\n          component={InputField}\n        />\n        <Field\n          id=\"upcartSettings.translations.discountSavings\"\n          name=\"upcartSettings.translations.discountSavings\"\n          label=\"Automatic discount savings\"\n          component={InputField}\n        />\n        <Field\n          id=\"upcartSettings.translations.totalSavings\"\n          name=\"upcartSettings.translations.totalSavings\"\n          label=\"Total discount savings\"\n          component={InputField}\n        />\n        <Field\n          id=\"upcartSettings.translations.continueShopping\"\n          name=\"upcartSettings.translations.continueShopping\"\n          label=\"Continue shopping\"\n          component={InputField}\n        />\n      </LegacyStack>\n    </Collapsible>\n  );\n};\n\nexport default TranslationsSettings;",
                "filename": "web/src/@templates/CartEditor/Settings/TranslationsSettings.tsx",
                "start_index": 0,
                "end_index": 2441,
                "start_line": 1,
                "end_line": 71,
                "max_line": 71,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n                    title: t('Activate UpCart'),\n                    description: t(`Activate the UpCart app embed block in your Theme editor. Find it in Theme settings > App embeds. Don't forget to press save.`), // prettier-ignore\n                    badge: {\n                      children: themeData?.theme && !themeData.theme.embedEnabled ? t('Required') : t('Completed'),\n                      status: themeData?.theme && !themeData.theme.embedEnabled ? t('critical') : t('success'),\n                    },\n                    action: {\n                      content: t('Open Theme Settings'),\n                      onAction: () => {\n                        window.open(themeEditorDeepLink, '_blank').focus();\n                      },\n                    },\n                  },\n                  {\n                    title: t('Match your brand design'),\n                    badge: designChanged\n                      ? {\n                          children: t('Completed'),\n                          status: t('success'),\n                        }\n                      : undefined,\n                    description: t('UpCart comes with great defaults but every brand is different. Hop into the cart editor and use the design options to match your brand.'), // prettier-ignore\n                    action: {\n                      content: t('Open Cart Editor'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=design`);\n                      },\n                    },\n                  },\n                  {\n                    title: t('Add Upsells'),\n                    badge: {\n                      children: editorData.upsellsModule ? t('Completed') : t('Recommended'),\n                      status: editorData.upsellsModule ? t('success') : t('info'),\n                    },\n                    description: t(\"Boost your AOV by using UpCart's high converting upsell offers. Head over to the cart editor to add upsells to your cart drawer.\"), // prettier-ignore\n                    action: {\n                      content: t('Add Upsells'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=upsells`);\n                      },\n                    },\n                  },",
                "filename": "web/src/@templates/Home/Home.tsx",
                "start_index": 5120,
                "end_index": 7444,
                "start_line": 1,
                "end_line": 222,
                "max_line": 260,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const PARTNER_APPS: Omit<IHomePageApps, 'maxWidth'>[] = [\n  {\n    key: '1',\n    status: false,\n    description: 'The #1 Shopify reviews app to double your conversation, manage reviews, and more.',\n    title: 'Trustoo.io Product Reviews',\n    setupTime: '5 min setup time',\n    image: '/images/Trustoo Logo.png',\n    review: '',\n    url:\n      'https://apps.shopify.com/sealapps-product-review?from=BEAM&utm_campaign=crossPromote&utm_medium=inapp&utm_source=BEAM',\n  },\n  {\n    key: '2',\n    status: false,\n    description: `Make much more profits with the power of WideBundle's offers ! Boost your CR and AOV (+30%).`,\n    title: 'Wide Bundles \u2011 Quantity Breaks',\n    setupTime: '5 min setup time',\n    image: '/images/wide bundle.png',\n    review: '',\n    url: 'https://apps.shopify.com/widebundle?from=BEAM&utm_campaign=crossPromote&utm_medium=inapp&utm_source=BEAM',\n  },\n  {\n    key: '3',\n    status: false,\n    description: `Set up predetermined discounts and capture motivated shoppers' strong purchase intent, so you never again let pricing turn away a buyer.`,\n    title: '60 seconds',\n    setupTime: '5 min setup time',\n    image: '/images/60s-honey.png',\n    review: '',\n    url: 'https://apps.shopify.com/60seconds?from=BEAM&utm_campaign=crossPromote&utm_medium=inapp&utm_source=BEAM',\n  },\n  {\n    key: '4',\n    status: false,\n    description: `Unleash your advertising potential with Lebesgue. Make smarter data-driven decisions, and boost your profit and marketing ROI.`,\n    title: 'Lebesgue: Marketing & LTV',\n    setupTime: '5 min setup time',\n    image: '/images/lebesgue.png',\n    review: '',\n    url:\n      'https://apps.shopify.com/advertising-insights?from=BEAM&utm_campaign=crossPromote&utm_medium=inapp&utm_source=BEAM',\n  },\n];\n\nexport const INTERCOM_MESSAGES = {\n  customizing: 'Hi! I would like help customizing UpCart',\n  features: \"Hi! Please add me to the beta for UpCart's new features!\",\n  error: 'Hi! I have an error in the module',\n  expert: \"Hi! I'm looking for an expert to help design my UpCart!\",\n  sticky_plan: \"Hi! I'm looking for a sticky cart only plan!\",\n};\n\nexport const CREATE_RECURRING_CHARGE_VARIABLES = {\n  lineItems: [\n    {\n      plan: {\n        appRecurringPricingDetails: {\n          price: {\n            amount: 14.99,\n            currencyCode: 'USD',\n          },\n          interval: 'EVERY_30_DAYS',\n        },\n      },\n    },\n  ],\n  name: 'GROWTH',\n};\n\nexport c",
                "filename": "web/src/@constants/index.ts",
                "start_index": 2338,
                "end_index": 4755,
                "start_line": 89,
                "end_line": 310,
                "max_line": 457,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "function setupLiveSettingsSyncWithUpCartAdminDashboard(/** @type {chrome.runtime.Port} */ port) {\n  if (port.name !== 'upcart') return;\n  port.onMessage.addListener((msg) => {\n    if (msg.type === 'INITIALIZE') {\n      port.postMessage({ type: 'INITIALIZE_SUCCESS' });\n    }\n    if (msg.type === 'UPDATE_UPCART_SETTINGS') {\n      // REQUIRED_PERMISSIONS: \"storage\"\n      chrome.storage.local.set({ [STORAGE_KEYS.UPCART_SETTINGS]: msg.payload }).then(() => {\n        port.postMessage({ type: 'UPDATE_UPCART_SETTINGS_SUCCESS' });\n      });\n    }\n  });\n}\n\nasync function handleCommandToggleCustomizationMode() {\n  const activeTabId = await getActiveTabId();\n  // REQUIRED_PERMISSIONS: \"storage\"\n  const storage = await chrome.storage.local.get();\n\n  /** @type {Set<number>} */\n  const customizationModeActiveTabIds = new Set(storage[STORAGE_KEYS.CUSTOMIZATION_MODE_ACTIVE_TAB_IDS] ?? []);\n  if (customizationModeActiveTabIds.has(activeTabId)) {\n    customizationModeActiveTabIds.delete(activeTabId);\n  } else {\n    customizationModeActiveTabIds.add(activeTabId);\n  }\n  // REQUIRED_PERMISSIONS: \"storage\"\n  await chrome.storage.local.set({\n    [STORAGE_KEYS.CUSTOMIZATION_MODE_ACTIVE_TAB_IDS]: Array.from(customizationModeActiveTabIds),\n  });\n\n  blockRealAppEmbedAssetsOnCustomizationActiveTabs({ customizationModeActiveTabIds });\n\n  chrome.tabs.reload(activeTabId);\n}\n\nasync function handleCommandDevRefresh() {\n  const activeTabId = await getActiveTabId();\n\n  chrome.runtime.reload();\n  chrome.tabs.reload(activeTabId);\n}\n\nfunction blockRealAppEmbedAssetsOnCustomizationActiveTabs(\n  /** @type {{ customizationModeActiveTabIds: Set<number>; }} */ { customizationModeActiveTabIds },\n) {\n  const customizationModeActiveTabIdsArray = Array.from(customizationModeActiveTabIds);\n  // REQUIRED_PERMISSIONS: \"declarativeNetRequest\", \"<all_urls>\" host permission\n  chrome.declarativeNetRequest.updateSessionRules({\n    ...(customizationModeActiveTabIdsArray.length > 0 && {\n      addRules: [\n        {\n          id: URL_BLOCK_RULE_ID,\n          action: {\n            type: /** @type {chrome.declarativeNetRequest.RuleActionType} */ ('block'),\n          },\n          condition: {\n            // Block \"upcart-bundle.js\" and \"upcart-stylesheet.css\"\n            urlFilter: 'https://cdn.shopify.com/extensions/*/assets/upcart-',\n            resourceTypes: /** @type {chrome.declarativeNetRequest.ResourceType[]} */ (['script', 'stylesheet']),\n            tabIds: customizationModeActiveTabIdsArray,\n          },\n        },\n      ],\n    }),\n    removeRuleIds: [URL_BLOCK_RULE_ID],\n  });\n}\n\n/**\n * @returns {Promise<number>}\n */\nasync function getActiveTabId() {\n  // REQUIRED_PERMISSIONS: \"activeTab\"\n  const [activeTab] = await chrome.tabs.query({ active: true, lastFocusedWindow: true });\n  if (!activeTab) {\n    throw new Error('No active tab found.');\n  }\n  if (!activeTab.id) {\n    throw new Error('Active tab has no ID.');\n  }\n  return activeTab.id;\n}",
                "filename": "chrome-extensions/cart-customization/service-worker/service-worker.js",
                "start_index": 2708,
                "end_index": 5650,
                "start_line": 75,
                "end_line": 171,
                "max_line": 178,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "'Select the express payment gateways to show in cart.')}\n            </Text>\n            <Text as=\"p\" variant=\"bodyMd\" color=\"subdued\">\n              {t(`Some gateways may be hidden in the real cart if they are not enabled on your store, or if the customer is\n              not eligible for the gateway. For more information on enabling additional gateways and customer\n              eligibility criteria`)}\n              ,{' '}\n              <Link target=\"_blank\" url=\"https://help.shopify.com/en/manual/payments/accelerated-checkouts\">\n                {t(`visit Shopify's documentation`)}\n              </Link>\n              .\n            </Text>\n          </VerticalStack>\n          <LegacyStack distribution=\"fill\">\n            <Text as=\"h3\" variant=\"headingSm\">\n              Gateway\n            </Text>\n            <LegacyStack distribution=\"trailing\">\n              <Text as=\"h3\" variant=\"headingSm\">\n                Ordering\n              </Text>\n            </LegacyStack>\n          </LegacyStack>\n        </LegacyStack>\n      </LegacyCard.Section>\n      <LegacyCard.Section>\n        {enabledGatewayOptions.map((gateway, i) => (\n          <LegacyCard.Subsection key={gateway.id}>\n            <GatewayOptionRow\n              gatewayId={gateway.id}\n              gatewayDisplayName={gateway.displayName}\n              gatewayLogoSrc={gateway.logoSrc}\n              isEnabled={true}\n              onToggle={() => {\n                setFieldValue(\n                  'upcartEditorSettings.expressPayEnabledGateways',\n                  enabledGatewayKeys.filter((id) => id !== gateway.id),\n                );\n              }}\n              trailingContent={\n                <UpDownButtons\n                  upAllowed={i !== 0}\n                  downAllowed={i < enabledGatewayOptions.length - 1}\n                  onUp={() => {\n                    const newGatewayKeys = [...enabledGatewayKeys];\n                    const temp = newGatewayKeys[i];\n                    newGatewayKeys[i] = newGatewayKeys[i - 1];\n                    newGatewayKeys[i - 1] = temp;\n                    setFieldValue('upcartEditorSettings.expressPayEnabledGateways', newGatewayKeys);\n                  }}\n                  onDown={() => {\n                    const newGatewayKeys = [...enabledGatewayKeys];\n                    const temp = newGatewayKeys[i];\n                    newGatewayKeys[i] = newGatewayKeys[i + 1];\n                    newGatewayKeys[i + 1] = temp;\n                    setFieldValue('upcartEditorSettings.expressPayEnabledGateways', newGatewayKeys);\n                  }}\n                />\n              }\n            />\n          </LegacyCard.Subsection>\n        ))}\n      </LegacyCard.Section>\n      <LegacyCard.Section>\n        {disabledGatewayOptions.map((gateway) => (",
                "filename": "web/src/@templates/CartEditor/ExpressPayModule/ExpressPayModule.tsx",
                "start_index": 2989,
                "end_index": 5765,
                "start_line": 86,
                "end_line": 150,
                "max_line": 168,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n      BASIC_FREE: {\n        heading: {\n          title: 'BASIC',\n          subtitle: 'Free',\n        },\n        features: ['Design Settings', 'Announcements Module'],\n        button: {\n          id: 'BASIC',\n          active: acceptedUpcartPlanId === 'BASIC_FREE',\n          onClick: () => acceptBillingPlan('BASIC_FREE'),\n          loading: loading,\n          activateText: 'Downgrade',\n        },\n      },\n      GROWTH_FLAT_1499_NO_USAGE: {\n        heading: {\n          title: 'BASIC',\n          subtitle: '$14.99/month',\n        },\n        features: [\n          'Design Settings',\n          'Announcements Module',\n          'Upsells Module',\n          'Rewards Module',\n          'Add-ons Module',\n          'Custom HTML and CSS',\n          'Sticky Cart Button',\n        ],\n        button: {\n          id: 'GROWTH',\n          active: acceptedUpcartPlanId === 'GROWTH_FLAT_1499_NO_USAGE',\n          onClick: () => acceptBillingPlan('GROWTH_FLAT_1499_NO_USAGE'),\n          loading: loading,\n          activateText: activeSubscriptionName === 'ENTERPRISE' ? 'Select' : 'Upgrade',\n          activateIsPrimary: true,\n        },\n      },\n      GROWTH_FLAT_1499_PLUS_USAGE_TO_9999: {\n        heading: {\n          title: 'GET STARTED FROM',\n          subtitle: '$14.99/month',\n          subheaderLink: {\n            content: 'See full pricing breakdown',\n            onClick: () => {\n              setPricingModalIsOpenV1(true);\n            },\n          },\n        },\n        features: [\n          'Design Settings',\n          'Announcements Module',\n          'Upsells Module',\n          'Rewards Module',\n          'Add-ons Module',\n          'Custom HTML and CSS',\n          'Sticky Cart Button',\n        ],\n        button: {\n          id: 'GROWTH',\n          active: acceptedUpcartPlanId === 'GROWTH_FLAT_1499_PLUS_USAGE_TO_9999',\n          onClick: () => acceptBillingPlan('GROWTH_FLAT_1499_PLUS_USAGE_TO_9999'),\n          loading: loading,\n          activateText: activeSubscriptionName === 'ENTERPRISE' ? t('Select') : t('Upgrade'),\n          activateIsPrimary: true,\n        },\n      },",
                "filename": "web/src/@templates/YourPlan/YourPlan.tsx",
                "start_index": 2846,
                "end_index": 4938,
                "start_line": 1,
                "end_line": 178,
                "max_line": 286,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n    design: t('Design'),\n    announcements: t('Announcements'),\n    rewards: t('Rewards'),\n    upsells: t('Upsells'),\n    addOns: t('Add-ons'),\n    notes: t('Notes'),\n    discounts: t('Discount Codes'),\n    subscriptionUpgrades: t('Subscription Upgrades'),\n    badges: t('Trust Badges'),\n    expressPay: t('Express Payments'),\n    integrations: t('Integrations'),\n    settings: t('Settings'),\n  };\n\n  useEffect(() => {\n    setNonMetafieldFormValuesState({\n      shippingProtectionProduct: shippingProtectionProductData?.productByHandle\n        ? {\n            editableFields: {\n              title: shippingProtectionProductData.productByHandle.title,\n              description: shippingProtectionProductData.productByHandle.bodyHtml,\n              price: shippingProtectionProductData.productByHandle.variants.edges[0].node.price,\n              currencyCode: shopData?.shop.currencyCode || 'USD',\n            },\n            existingProduct: {\n              id: shippingProtectionProductData.productByHandle.id,\n              handle: shippingProtectionProductData.productByHandle.handle,\n            },\n          }\n        : null,\n    });\n  }, [shopData, shippingProtectionProductData]);\n\n  const initialValues = useMemo<CartEditorFormValues>(\n    () => ({\n      upcartEditorSettings: editorSettingsState,\n      upcartSettings: settingsState,\n      nonMetafieldFormValues: nonMetafieldFormValuesState,\n    }),\n    [editorSettingsState, settingsState, nonMetafieldFormValuesState],\n  );\n\n  const syncShippingProtectionProductIfRequired = useCallback",
                "filename": "web/src/@templates/CartEditor/CartEditor.tsx",
                "start_index": 21297,
                "end_index": 22847,
                "start_line": 3,
                "end_line": 656,
                "max_line": 1109,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "reranked_doc_snippets_initial": [
            {
                "code": "# Specification: Subscription Upgrades\n\n## Editor\n\nThere should be a module in the editor with:\n\n- Name: \"Subscription Upgrades\"\n- Icon: Repeat Order\n- Default status: disabled\n- Settings:\n  - \"Prevent downgrades\"\n    - Help text: \"If enabled, customers will not be allowed to downgrade from a subscription to one-time purchase. Caution: this may increase cart abandonment.\"\n    - Type: checkbox\n    - Default: disabled\n\n## Cart\n\n> If the subscription upgrades module is disabled in the editor, the cart should skip all subscription upgrade functionality.\n>\n> The following cart specification is applicable only if the subscription upgrades module has been enabled in the editor.\n\n### Behaviour\n\nThe cart frontend for subscription upgrades should be isolated to an area below each line item. This area can include content, or can be omitted if there is nothing to show. If the area includes content, then the area should have:\n\n- Public CSS class: `.upcart-subscription-upgrade-section`\n- Styling: full-width of line item\n\nThe content of each subscription upgrade area should be independent of the content for the subscription areas for any other line items.\n\nThe content of the subscription upgrade area should be as follows:\n\nA. For **one-time purchase** line items:\n\n- If the item cannot be sold as a subscription, nothing should be shown.\n- If the item can be sold as a subscription:\n  - There should be a button with:\n    - Content: \"Upgrade to \\_\\_\\_\\_\", where \\_\\_\\_\\_ is the name of the first selling plan group for the item\n    - When clicked:\n      1. Show a loading spinner instead of text, and disable the button\n      2. Change the item to be a subscription with the first selling plan of the first selling plan group. The line item should have the property `__upcartSubscriptionUpgrade: \"true\"`\n    - Styling: full width of area, match to other buttons in cart\n    - Public CSS class: `.upcart-subscription-upgrade-button`\n\nB. For **subscription** line items:\n\n- There should be a dropdown with:\n  - Content: the name of the current selling plan\n  - Options:\n    - (OPTIONAL) A group with:\n      - Title: \"Full price\"\n      - Options:\n        - \"One-time purchase\"\n      - Condition: this group should be included if the \"Prevent downgrades\" setting is disabled AND the item does not _require_ a selling plan (i.e., it can be sold as a one-time purchase)\n    - A group for each possible selling plan group for the item with:\n      - Title: the name of the selling plan group\n      - Options: the names of the possible selling plans in the group for the item\n  - When selected:\n    1. Show a loading spinner overlayed on the dropdown and disable the dropdown\n    2. Change the selling plan of the item to the selected selling plan. If \"One-time only\" was selected, then remove the selling plan from the item to change it to a one-time purchase. The line item should have the property `__upcartSubscriptionEdit: \"true\"`\n  - Styling: full width of area, match to other dropdowns in cart\n  - Public CSS class: `.upcart-subscription-upgrade-dropdown`\n\nWhen the current purchase option for a line item changes, the content of the subscription upgrade area should be updated to match the new purchase option.\n\n### Edge Cases and Clarifications\n\n- The content of the subscription upgrade area does not depend on _how_ the purchase option was selected. For example, the subscription upgrade area content for an item that was added to the cart as a subscription should be the same as the content for an item that was upgraded from a one-time purchase to a subscription in-cart.\n- When selling plans are being loaded for a product, there should be no content in the subscription upgrade area. Before the selling plans are loaded, we can't fully decide what content to show so it's fine to show nothing.\n- When the selling plan of an item is changed, the quantity of the item should remain constant. If you don't provide a quantity to the AJAX API when changing a line item, then the quantity of the line item will be set to 1 which should be avoided.\n- Selling plans that do not apply to the selected variant for a line item should be ignored. It is possible to have selling plans that apply only to specific variants of a product. In cases where none of the selling plans from a selling plan group apply to the variant for the line item, the selling plan group should be ignored. An ignored group should not be listed in the dropdown (because it would be an empty section) and it should not be used for text of the upgrade button (because it would have no selling plan to select).",
                "filename": "docs/subscription-upgrades.md",
                "start_index": 0,
                "end_index": 4584,
                "start_line": 1,
                "end_line": 71,
                "max_line": 71,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# UpCart 3.0\n\n## Setup\n\nView setup instructions on Notion: https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 133,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "---\nid: 3vst4bcr\ntitle: Discount Codes Module\nfile_version: 1.1.3\napp_version: 1.18.31\n---\n\n# Required background information\n\n## Discount types\n\nThere are two types of discounts: **automatic discounts** and **discount codes**.\n\n- **Automatic discounts** are applied to a cart or checkout automatically when the discount criteria are met.\n\n- **Discount codes** must be manually typed in by the customer. They stay active until the customer either removes the code, enters a different conflicting discount code, or changes their cart/checkout so that the discount is not longer applicable.\n\nThis module is specifically for **discount codes**. We do not have to worry about **automatic discounts** because they will work in the cart by default and they do not require any user interaction.\n\n## Discount targets\n\nA discount can be used to reduce the cost of **product(s)**, **order**, or **shipping**.\n\n- **Product discounts** reduce the price of one or more products and are shown as a reduction on individual line items.\n\n- **Order discounts** reduce the price of the order as a whole and are shown as a reduction on the overal price.\n\n- **Shipping discounts** reduce the price of shipping.\n\n# Read and write discount codes\n\n## Read discount codes\n\nWe read discount codes using the `cart.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:78:24:26:`    const cart: Cart&lt;CartItemWithoutCompareAtPrice&gt; = await fetch(getShopifyRoutesRoot() + &#39;cart.js&#39;).then((res) =&gt;`\"/> Ajax API endpoint.\n\nAn applied discount code will be returned from the API as part of either the `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> or the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/>. The `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> are for order discounts and the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/> are for product discounts.\n\nThese discount applications will include both **automatic discounts** and **discount codes**. We can distinguish between these using the `type`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:460:1:1:`  type: &#39;discount_code&#39; | &#39;&#39;;`\"/> field of the `DiscountApplication`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:446:4:4:`export interface DiscountApplication {`\"/>.\n\n## Apply a discount code\n\n<br/>\n\nWe apply a discount code by making a request from the storefront to the route `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/>.\n\nThe `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/> route is intended by Shopify to be used for [shareable discount links](https://help.shopify.com/en/manual/discounts/managing-discount-codes#promote-a-discount-using-a-shareable-link). Normally a customer would navigate to the link directly in their browser and would be redirected to the storefront. We are using it in a non-standard way by making a background network request.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n23         await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);\n```\n\n<br/>\n\nAfter applying a discount code, we refetch the cart to check if the discount was successfully applied and to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/DiscountCodeModule/DiscountCodeModule.tsx\n\n```tsx\n23           await platform.discounts.attemptApplyDiscountCode({ discountCode: discountCodeToApply });\n24           const updatedCart = await refetchCart();\n25\n26           const discountApplications = getAllUniqueDiscountApplications(updatedCart);\n27           const isValid = discountApplications.some(\n28             (discountApplication) => discountApplication.title === discountCodeToApply,\n29           );\n```\n\n<br/>\n\n## Remove a discount code\n\n<br/>\n\nWe remove a discount code by applying a fake invalid discount code.\n\nThere is no native way to remove discount codes so this is a workaround.\n\nThis behaviour relies on the fact that there can only be one discount code applied in the cart. We are replacing the one allowed discount code with an invalid code.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n14       async removeDiscountCode(): Promise<void> {\n15         const FAKE_INVALID_DISCOUNT_CODE = '~!~!UPCART_REMOVE_DISCOUNT!~!~';\n16         await this.UNSAFE_POSSIBLE_NO_OP_applyDiscountCodeAndSetShopifyCookie({ discountCode: FAKE_INVALID_DISCOUNT_CODE });\n17       }\n```\n\n<br/>\n\nAfter removing a discount code, we refetch the cart to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/components/DiscountCodeBadge/DiscountCodeBadge.tsx\n\n```tsx\n18         await platform.discounts.removeDiscountCode();\n19         await refetchCart();\n```\n\n<br/>\n\n> \u26a0\ufe0f After we apply or remove a discount code, the `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> of discounted line items will change. If we did not refetch the cart then we would have an outdated `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> value which would cause errors if we tried to call `cart/update.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:191:17:21:`    return fetchQd(this.ajaxMutationCartQ, getShopifyRoutesRoot() + &#39;cart/update.js&#39;, {`\"/> or `cart/change.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:153:8:12:`      getShopifyRoutesRoot() + `cart/change.js?${query.toString()}`,`\"/>.\n\n# Limitations\n\n## **Multiple** discount codes are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n50                     Multiple discount codes are not supported.\n```\n\n<br/>\n\n### Why are multiple discount codes not supported?\n\nWe cannot apply multiple discount codes because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support multiple codes. This is the only way that we know of to apply a discount code from the storefront. We will have to wait for Shopify to add support for multiple codes or to find a different way to apply codes which does support multiple.\n\nIf a customer applies two discount codes back to back, the first discount code will be discarded and only use the most recently applied code will affect the cart.\n\n## Free shipping discounts are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n58                   Free shipping discounts are not supported.\n```\n\n<br/>\n\n### Why are free shipping discounts not supported?\n\nWe cannot apply free shipping discounts because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support them.\n\n## Shopify Plus stores using checkout.liquid are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n64                   Shopify Plus stores using checkout.liquid are not supported.\n```\n\n<br/>\n\n### Why are Shopify Plus stores using checkout.liquid not supported?\n\nHistorically, the Ajax API only included automatic discounts and did not include discount codes. Shopify changed this behaviour and started including discounts from discount codes in Ajax API responses. There are still some stores which do not include discount codes in Ajax API responses. The discount codes module does not work on these stores.\n\n### How can we tell if a store is eligible?\n\nThe Ajax API will include discount codes in responses only if the store is on Shopify's new checkout.\n\n<br/>\n\nWe can identify wether or not a store is on Shopify's new checkout by looking at the cart token. If the cart token is 32 characters long and only includes hex digits (0123456789abcdef) then the store is on Shopify's old checkout, otherwise it is on Shopify's new checkout and the Ajax API will include discount codes in responses.\n\nStores that are on Shopify's new checkout may have different token formats. The following are examples that we've seen:\n\n- c1-d3f024e3af037f40bfe1b016b5b76f05\n- Z2NwLXVzLWNlbnRyYWwxOjAxSEZFMjFIV1FZUFc0SlQ3Q00ySFFSSjgy\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart({ cart }: { cart: Cart<CartItem> }): boolean {\n6          if (!cart.token) return false;\n7          const isLegacyCartToken = cart.token.match(/^[0-9a-f]{32}$/) !== null;\n8          return !isLegacyCartToken;\n9        }\n```\n\n<br/>\n\n### What happens if a store is not eligible?\n\n<br/>\n\nIf a store is not eligible then the discount code module will not be shown.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/Cart.tsx\n\n```tsx\n499                      {platform.discounts.getStoreCanApplyDiscountCodesInCart({ cart }) &&\n500                        settings.upcartEditorSettings.discountCodeModule && (\n501                          <DiscountCodeModule platform={platform} refetchCart={refetchCart} />\n502                        )}\n```\n\n<br/>\n\nIn the preview we will show the discount code module even for stores that are not eligible. We do this because it would require a lot of work to check eligibility when not on the storefront.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/platform/preview/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart(args: { cart: Cart<CartItem> }): boolean {\n6          return true;\n7        }\n```\n\n<br/>\n\nThis file was generated by Swimm. [Click here to view it in the app](https://app.swimm.io/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr).",
                "filename": ".swm/discount-codes-module.3vst4bcr.sw.md",
                "start_index": 0,
                "end_index": 11446,
                "start_line": 1,
                "end_line": 231,
                "max_line": 231,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>UpCart Loading...</title>\n    <script>\n      /*\n       * Constants\n       */\n      const INSTALL_SOURCE_QUERY_PARAM = 'via';\n      const COOKIE_LIFETIME_MS = 3 * 24 * 60 * 60 * 1000; // 3 days\n      const COOKIE_NAME = 'upcart_install_source';\n\n      /*\n       * 1. Get the ?via= query for the following steps\n       */\n      const installSource = encodeURIComponent(\n        new URLSearchParams(window.location.search).get(INSTALL_SOURCE_QUERY_PARAM),\n      );\n\n      /*\n       * 2. Set a cookie with the install source for 3 days so we can read it when they install the app\n       */\n      const cookieDomain = '.' + window.location.hostname;\n      const cookieExpiresDate = new Date();\n      cookieExpiresDate.setTime(cookieExpiresDate.getTime() + COOKIE_LIFETIME_MS);\n      const cookieExpires = cookieExpiresDate.toGMTString();\n      document.cookie = `${COOKIE_NAME}=${installSource}; expires=${cookieExpires}; domain=${cookieDomain}; path=/; SameSite=None; Secure`;\n\n      /*\n       * 3. Redirect to the app store, including the install source as a query param for App Store Google Analytics\n       */\n      window.location.replace(`https://apps.shopify.com/upcart-cart-builder?join-via=${installSource}`);\n    </script>\n  </head>\n  <body></body>\n</html>",
                "filename": "web/public/join.html",
                "start_index": 0,
                "end_index": 1304,
                "start_line": 1,
                "end_line": 36,
                "max_line": 36,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Security Policy\n\n## Supported versions\n\n### New features\n\nNew features will only be added to the master branch and will not be made available in point releases.\n\n### Bug fixes\n\nOnly the latest release series will receive bug fixes. When enough bugs are fixed and its deemed worthy to release a new gem, this is the branch it happens from.\n\n### Security issues\n\nOnly the latest release series will receive patches and new versions in case of a security issue.\n\n### Severe security issues\n\nFor severe security issues we will provide new versions as above, and also the last major release series will receive patches and new versions. The classification of the security issue is judged by the core team.\n\n### Unsupported Release Series\n\nWhen a release series is no longer supported, it's your own responsibility to deal with bugs and security issues. If you are not comfortable maintaining your own versions, you should upgrade to a supported version.\n\n## Reporting a bug\n\nAll security bugs in shopify repositories should be reported to [our hackerone program](https://hackerone.com/shopify)\nShopify's whitehat program is our way to reward security researchers for finding serious security vulnerabilities in the In Scope properties listed at the bottom of this page, including our core application (all functionality associated with a Shopify store, particularly your-store.myshopify.com/admin) and certain ancillary applications.\n\n## Disclosure Policy\n\nWe look forward to working with all security researchers and strive to be respectful, always assume the best and treat others as peers. We expect the same in return from all participants. To achieve this, our team strives to:\n\n- Reply to all reports within one business day and triage within two business days (if applicable)\n- Be as transparent as possible, answering all inquires about our report decisions and adding hackers to duplicate HackerOne reports\n- Award bounties within a week of resolution (excluding extenuating circumstances)\n- Only close reports as N/A when the issue reported is included in Known Issues, Ineligible Vulnerabilities Types or lacks evidence of a vulnerability\n\n**The following rules must be followed in order for any rewards to be paid:**\n\n- You may only test against shops you have created which include your HackerOne YOURHANDLE @ wearehackerone.com registered email address.\n- You must not attempt to gain access to, or interact with, any shops other than those created by you.\n- The use of commercial scanners is prohibited (e.g., Nessus).\n- Rules for reporting must be followed.\n- Do not disclose any issues publicly before they have been resolved.\n- Shopify reserves the right to modify the rules for this program or deem any submissions invalid at any time. Shopify may cancel the whitehat program without notice at any time.\n- Contacting Shopify Support over chat, email or phone about your HackerOne report is not allowed. We may disqualify you from receiving a reward, or from participating in the program altogether.\n- You are not an employee of Shopify; employees should report bugs to the internal bug bounty program.\n- You hereby represent, warrant and covenant that any content you submit to Shopify is an original work of authorship and that you are legally entitled to grant the rights and privileges conveyed by these terms. You further represent, warrant and covenant that the consent of no other person or entity is or will be necessary for Shopify to use the submitted content.\n- By submitting content to Shopify, you irrevocably waive all moral rights which you may have in the content.\n- All content submitted by you to Shopify under this program is licensed under the MIT License.\n- You must report any discovered vulnerability to Shopify as soon as you have validated the vulnerability.\n- Failure to follow any of the foregoing rules will disqualify you from participating in this program.\n\n** Please see our [Hackerone Profile](https://hackerone.com/shopify) for full details\n\n## Receiving Security Updates\n\nTo recieve all general updates to vulnerabilities, please subscribe to our hackerone [Hacktivity](https://hackerone.com/shopify/hacktivity)",
                "filename": "SECURITY.md",
                "start_index": 0,
                "end_index": 4160,
                "start_line": 1,
                "end_line": 59,
                "max_line": 59,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "The starting point for this repository was created using the Shopify CLI, commit\nf5d560da33aafae0b552de72a90f1320d1023524. Some boilerplate code from the CLI\nremains and is licensed as follows:\n\"\"\"\nMIT License\n\nCopyright (c) 2018 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\"",
                "filename": "LICENSE.md",
                "start_index": 0,
                "end_index": 1265,
                "start_line": 1,
                "end_line": 26,
                "max_line": 26,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "MIT License\n\nCopyright (c) 2021 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
                "filename": "extensions/theme-app-extension/LICENSE.md",
                "start_index": 0,
                "end_index": 1063,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# [[[ --- STAGE: BASE ENVIRONMENT SETUP --- ]]]\n# see https://github.com/moby/moby/issues/37345#issuecomment-400250849\nFROM node:18.16.1-alpine as base\n# Accept command line '--build-arg' arguments\nARG PORT=8081\nARG HOST\nARG SHOPIFY_API_KEY\nARG INTERCOM_APP_ID\nARG SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY\n\n# Copy command line args to env to use during build and for final image runtime\nENV PORT=${PORT} \\\n    HOST=${HOST} \\\n    SHOPIFY_API_KEY=${SHOPIFY_API_KEY} \\\n    INTERCOM_APP_ID=${INTERCOM_APP_ID}\n    # ^^^^^ WARNING ^^^^^ do not include trailing \"\\\" on the last line above, you will get a syntax error with a terrible error message\n    #\n    # SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY is intentionally not included here since it is only for building and shouldn't be available at runtime\n\n# [[[ --- STAGE: BUILD --- ]]]\nFROM base AS build\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nCOPY web/patches ./web/patches\nRUN yarn install --cwd web --frozen-lockfile --production=false\nCOPY . .\n# NOTE: we need Sentry API token to upload source maps to Sentry during build, see withSentryConfig in next.config.js\nRUN echo \"[auth]\\ntoken=${SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY}\" > ./web/.sentryclirc\nRUN yarn web:build\n\n# [[[ --- STAGE: LICENSES WEB --- ]]]\nFROM base AS licenses-web\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web > ./web/public/licenses/web.txt\n\n# [[[ --- STAGE: LICENSES STOREFRONT --- ]]]\nFROM base AS licenses-storefront\nWORKDIR /app\nCOPY web/storefront/package.json web/storefront/yarn.lock ./web/storefront/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web/storefront > ./web/public/licenses/storefront.txt\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM base\nWORKDIR /app\nCOPY --from=build /app .\nCOPY package.json ./package.json\nRUN yarn install --frozen-lockfile --production=true\nCOPY --from=licenses-web /app/web/public/licenses/web.txt ./web/public/licenses/web.txt\nCOPY --from=licenses-storefront /app/web/public/licenses/storefront.txt ./web/public/licenses/storefront.txt\nCMD [\"yarn\", \"web:start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2181,
                "start_line": 1,
                "end_line": 53,
                "max_line": 53,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "## Dev Setup\n\nFollow the [instructions in this Notion document](https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7?pvs=4) to setup the development environment for the Chrome extension.",
                "filename": "chrome-extensions/cart-customization/README.md",
                "start_index": 0,
                "end_index": 208,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { Shop, ShopModel } from '../modules/shops/shops.model';\nimport { RequestWithShop } from '../types/express.types';\nimport Shopify from '@shopify/shopify-api';\n\nexport const getShopDocFromRequest = async (req: RequestWithShop): Promise<Shop> => {\n  if (req.shopDoc) {\n    return req.shopDoc;\n  }\n\n  const shop = Shopify.Utils.sanitizeShop(req.query.shop as string);\n  const shopDoc = await ShopModel.findOne({ domain: shop }).lean();\n  req.shopDoc = shopDoc;\n  return shopDoc;\n};",
                "filename": "web/server/helpers/getShopDocFromRequest.ts",
                "start_index": 0,
                "end_index": 485,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<html></html>",
                "filename": "web/storefront/public/index.html",
                "start_index": 0,
                "end_index": 13,
                "start_line": 1,
                "end_line": 1,
                "max_line": 1,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "solution_task": {
            "structured_resp": "Clarify:\nThe issue involves removing inaccurate translations from the UpCart 3.0 Shopify app dashboard content. The translations have been removed, and the app will always be in English now. There is also a mention of PayPal not appearing on the site despite authorization, which seems unrelated to the translation issue.\n\nHypothesize:\n- The inaccurate translations might have been removed from the codebase, but there could be lingering references or configurations that still expect translations to be present.\n- The `t()` function and language picker have been removed, which could lead to missing function errors if there are still calls to `t()` in the code.\n- The PayPal issue seems unrelated to the translation issue and might require a separate investigation.\n\nExperiment:\n- Review the provided code snippets and documentation to identify any remaining references to the `t()` function or language picker.\n- Check if there are any configurations or settings that still expect translations to be available.\n- Look for any error messages or logs that could provide more information about the PayPal issue.\n\nAnalyze:\n- The provided code snippets do not show any direct references to the `t()` function or language picker.\n- The external Shopify documentation provides information on how to handle translations, which is no longer relevant since the app will always be in English.\n- The PayPal issue is not addressed in the provided snippets or documentation.\n\nResolve:\n- Search the entire codebase for any remaining calls to the `t()` function or references to the language picker and remove them.\n- Ensure that all user-facing strings are hardcoded in English or retrieved from English-only locale files.\n- Update any documentation that references translations to reflect the new English-only policy.\n- For the PayPal issue, check the app's payment gateway configuration and logs to diagnose the problem. This may involve checking for correct API credentials, payment gateway settings in Shopify, and ensuring that the PayPal authorization process is correctly implemented.",
            "response": "To ensure a seamless user experience for the UpCart 3.0 Shopify app, it's essential to finalize the transition to an English-only interface and resolve any payment gateway issues. The recent removal of inaccurate translations and the decision to operate exclusively in English necessitates a thorough review of the app's codebase and settings. Additionally, the separate concern regarding PayPal not appearing on the site, despite authorization, requires attention to the app's payment configuration.\n\n- Conduct a comprehensive search through the app's codebase to identify and eliminate any residual calls to the `t()` function or any remnants of the language picker feature.\n- Confirm that all text presented to the user is now hardcoded in English or sourced from locale files that are exclusively in English, ensuring consistency across the app.\n- Revise any existing documentation or help resources to accurately represent the app's English-only presentation, avoiding any confusion for users and developers.\n- Investigate the PayPal issue by reviewing the app's payment gateway settings, checking for accurate API credentials, and verifying that the PayPal authorization process is correctly integrated within the app's payment system."
        },
        "snippet_processor_task": {
            "web/src/@templates/CartEditor/Settings/TranslationsSettings.tsx": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "The snippet provides the code for the TranslationsSettings component, which is likely where the translations for the dashboard content are managed. It includes fields for different translation keys like cart title, checkout, empty cart, discount savings, and more.",
                        "snippet": {
                            "code": "import { InputField } from '@components/common/FormField';\nimport { useCurrentShop } from '@providers/shopContext';\nimport { Collapsible, LegacyStack } from '@shopify/polaris';\nimport { Field } from 'formik';\nimport get from 'lodash/get';\nimport { useMemo } from 'react';\n\nconst TranslationsSettings = ({ open }) => {\n  const { shop: shopDb } = useCurrentShop();\n  const upsellModuleIsEnabled = useMemo(() => get(shopDb, 'shop.featureFlags.upsellModuleIsEnabled', null), [shopDb]);\n\n  return (\n    <Collapsible\n      open={open}\n      id=\"basic-collapsible\"\n      transition={{ duration: '500ms', timingFunction: 'ease-in-out' }}\n      expandOnPrint\n    >\n      <LegacyStack vertical spacing=\"tight\">\n        <Field\n          id=\"upcartSettings.translations.cartTitle\"\n          name=\"upcartSettings.translations.cartTitle\"\n          label=\"Cart title\"\n          helpText={'Use {{cart_quantity}} for the # of items in cart'}\n          component={InputField}\n        />\n        <Field\n          id=\"upcartSettings.translations.checkout\"\n          name=\"upcartSettings.translations.checkout\"\n          label=\"Checkout\"\n          helpText={'Use {{total_price}} to display the total price'}\n          component={InputField}\n        />\n        {upsellModuleIsEnabled && (\n          <Field\n            id=\"upcartSettings.translations.addText\"\n            name=\"upcartSettings.translations.addText\"\n            label=\"Add text (Upsells Module)\"\n            component={InputField}\n          />\n        )}\n        <Field\n          id=\"upcartSettings.translations.emptyCart\"\n          name=\"upcartSettings.translations.emptyCart\"\n          label=\"Your cart is empty\"\n          component={InputField}\n        />\n        <Field\n          id=\"upcartSettings.translations.discountSavings\"\n          name=\"upcartSettings.translations.discountSavings\"\n          label=\"Automatic discount savings\"\n          component={InputField}\n        />\n        <Field\n          id=\"upcartSettings.translations.totalSavings\"\n          name=\"upcartSettings.translations.totalSavings\"\n          label=\"Total discount savings\"\n          component={InputField}\n        />\n        <Field\n          id=\"upcartSettings.translations.continueShopping\"\n          name=\"upcartSettings.translations.continueShopping\"\n          label=\"Continue shopping\"\n          component={InputField}\n        />\n      </LegacyStack>\n    </Collapsible>\n  );\n};\n\nexport default TranslationsSettings;",
                            "filename": "web/src/@templates/CartEditor/Settings/TranslationsSettings.tsx",
                            "start_index": 0,
                            "end_index": 2441,
                            "start_line": 1,
                            "end_line": 71,
                            "max_line": 71,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "The snippet likely contains the code for managing dashboard translations, which is directly related to the issue of removing translations."
                }
            ],
            "common/defaultMetafields.ts": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "The snippet provides details about the structure of the 'upcartSettings' object in the 'common/defaultMetafields.ts' file, including translations, HTML fields, and various boolean values. This can be relevant for understanding how translations were managed and potentially locating where the inaccurate translations were defined.",
                        "snippet": {
                            "code": "{\n  upcartSettings: {\n    cartPosition: { type: 'single_line_text_field', value: 'right' },\n    disableSticky: { type: 'boolean', value: false },\n    openOnAddToCart: { type: 'boolean', value: true },\n    redirectToCart: { type: 'boolean', value: false },\n    translations: {\n      type: 'json',\n      value: {\n        cartTitle: 'Cart \u2022 {{cart_quantity}}',\n        checkout: 'Checkout \u2022 {{total_price}}',\n        addText: 'Add',\n        emptyCart: 'Your cart is empty',\n        discountSavings: 'Save',\n        continueShopping: 'Or continue shopping',\n        /** This was changed from being overall savings to only the savings from discounts. (ignore compare-at prices) */\n        totalSavings: 'Discounts',\n      },\n    },\n    htmlFields: {\n      type: 'json',\n      value: {\n        aboveFooter: '',\n        aboveHeader: '',\n        belowHeader: '',\n        betweenLineItems: '',\n        aboveCheckoutButton: '',\n        belowCheckoutButton: '',\n        bottomOfCart: '',\n        onEmptyCart: '',\n        scriptsBeforeLoad: '',\n      },\n    },\n    /** This field has been changed to mean \"show savings below price for products\". This includes compare-at prices */\n    automaticDiscount: { type: 'boolean', value: true },\n    basePriceForDiscount: { type: 'boolean', value: false },\n    hideSingleUnderscoredProperties: { type: 'boolean', value: false },\n    showContinueShoppingButton: { type: 'boolean', value: false },\n    ajaxRaceConditionPrevention: { type: 'boolean', value: false },\n    htmlFieldForceReRender: { type: 'boolean', value: false },\n    updateItemIdentifier: { type: 'single_line_text_field', value: 'key' as ItemIdentifier },\n    customCSS: { type: 'multi_line_text_field', value: '*{}' },\n    customStickyCartCSS: { type: 'multi_line_text_field', value: '*{}' },\n    integrationZapietEnabled: { type: 'boolean', value: false },\n    integrationYmqEnabled: { type: 'boolean', value: false },\n  },",
                            "filename": "common/defaultMetafields.ts",
                            "start_index": 13016,
                            "end_index": 14936,
                            "start_line": 1,
                            "end_line": 556,
                            "max_line": 567,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet is relevant for understanding how translations were managed and potentially locating where the inaccurate translations were defined."
                }
            ],
            "web/src/@templates/Tutorials/Tutorials.tsx": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "The code snippet provides examples of how translations are used in the UpCart app, specifically for titles, descriptions, and buttons. It showcases the usage of the `t()` function for language translations within LegacyCard components.",
                        "snippet": {
                            "code": "<LegacyCard title={t('Have questions?')}>\n          <LegacyCard.Section>\n            {t('Reach out to our support team who can answer questions about UpCart!')}\n          </LegacyCard.Section>\n          <LegacyCard.Section subdued>\n            <Button fullWidth onClick={() => showNewMessages()}>\n              {t('Contact Support')}\n            </Button>\n          </LegacyCard.Section>\n        </LegacyCard>\n        <LegacyCard title={t('Public API')}>\n          <LegacyCard.Section>\n            {' '}\n            {t(`Learn about all of the currently available variables and functions in the UpCart public API. These are\n            designed to be used by developers for custom integrations.`)}\n          </LegacyCard.Section>\n          <LegacyCard.Section subdued>\n            <Button\n              fullWidth\n              onClick={() =>\n                window.open(\n                  'https://aftersell.notion.site/UpCart-Public-API-7a0f6d75cb044871bdb6da5d99cfc755',\n                  '_blank',\n                )\n              }\n            >\n              {t(`Public API`)}\n            </Button>\n          </LegacyCard.Section>\n        </LegacyCard>\n        <LegacyCard title={t('Privacy Policy')}>\n          <LegacyCard.Section>{t(`UpCart's privacy policy.`)}</LegacyCard.Section>\n          <LegacyCard.Section subdued>\n            <Button fullWidth onClick={() => window.open('https://upcart.app/privacy', '_blank')}>\n              {t(`Privacy Policy`)}\n            </Button>\n          </LegacyCard.Section>\n        </LegacyCard>\n        <LegacyCard title={t('Acknowledgements')}>\n          <LegacyCard.Section>\n            {t(`Licenses for open source software included in UpCart's dashboard.`)}\n          </LegacyCard.Section>\n          <LegacyCard.Section subdued>\n            <Button fullWidth onClick={() => window.open('https://slide.upcart.app/licenses/web.txt', '_blank')}>\n              {t(`Acknowledgements`)}\n            </Button>\n          </LegacyCard.Section>\n        </LegacyCard>\n      </Layout.Section>\n    </Layout>\n  );\n};\n\nexport default TutorialsWithDefaultLayout;",
                            "filename": "web/src/@templates/Tutorials/Tutorials.tsx",
                            "start_index": 2974,
                            "end_index": 5067,
                            "start_line": 86,
                            "end_line": 139,
                            "max_line": 139,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "It showcases the usage of the removed `t()` function for language translations, which is relevant to the issue."
                }
            ],
            "web/src/@templates/Home/Home.tsx": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "The snippet provides information about the usage of the 't()' function for translations and how it is integrated into the Home template for displaying content related to rewards and compatibility checks.",
                        "snippet": {
                            "code": "{\n                    title: t('Add Rewards'),\n                    badge: editorData.rewardsModule\n                      ? {\n                          children: t('Completed'),\n                          status: t('success'),\n                        }\n                      : undefined,\n                    description: t('Add a rewards module to offer urge customers to shop more. Create a free shipping bar, offer a free gift, or other rewards.'), // prettier-ignore\n                    action: {\n                      content: t('Add Rewards'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=rewards`);\n                      },\n                    },\n                  },\n                  {\n                    title: t('Confirm UpCart Compatibility'),\n                    description: t(\"Although UpCart uses standard Shopify technologies, not all apps do. Ensure any other apps you're using function as expected.\"), // prettier-ignore\n                  },\n                  // {\n                  //   title: t('Sell more with AfterSell \ud83d\udcb8'),\n                  //   description: t(\"AfterSell enables checkout and post-purchase upsells. It's a great way to increase your AOV and sell more. Learn more about AfterSell and get a free trial.\"), // prettier-ignore\n                  //   action: {\n                  //     content: t('Boost my Sales'),\n                  //     onAction: () => {\n                  //       navigate(ROUTE_OBJECTS.AFTERSELL_AD.url);\n                  //     },\n                  //   },\n                  // },\n                ]}",
                            "filename": "web/src/@templates/Home/Home.tsx",
                            "start_index": 7463,
                            "end_index": 9094,
                            "start_line": 1,
                            "end_line": 233,
                            "max_line": 260,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "Provides information about the integration of the `t()` function into the Home template, which is relevant due to the removal of the translation function."
                }
            ],
            "web/server/modules/shopify/graphql/generated/index.ts": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Defines types and structures related to translations and translatable resources, useful for understanding how translations are handled in the GraphQL schema.",
                        "snippet": {
                            "code": "t translations. */\n  translations: Array<Translation>;\n};\n\n\n/** A resource that has translatable fields. */\nexport type TranslatableResourceTranslationsArgs = {\n  locale: Scalars['String'];\n  marketId?: InputMaybe<Scalars['ID']>;\n  outdated?: InputMaybe<Scalars['Boolean']>;\n};\n\n/**\n * An auto-generated type for paginating through multiple TranslatableResources.\n *\n */\nexport type TranslatableResourceConnection = {\n  __typename?: 'TranslatableResourceConnection';\n  /** A list of edges. */\n  edges: Array<TranslatableResourceEdge>;\n  /** A list of the nodes contained in TranslatableResourceEdge. */\n  nodes: Array<TranslatableResource>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/**\n * An auto-generated type which holds one TranslatableResource and a cursor during pagination.\n *\n */\nexport type TranslatableResourceEdge = {\n  __typename?: 'TranslatableResourceEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of TranslatableResourceEdge. */\n  node: TranslatableResource;\n};\n\n/** Specifies the type of resources that are translatable. */\nexport enum TranslatableResourceType {\n  /** A product collection. Translatable fields: `title`, `body_html`, `meta_title`, `meta_description`. */\n  Collection = 'COLLECTION',\n  /**\n   * The delivery method definition. For example, \"Standard\"",
                            "filename": "web/server/modules/shopify/graphql/generated/index.ts",
                            "start_index": 1698694,
                            "end_index": 1700060,
                            "start_line": 42597,
                            "end_line": 42640,
                            "max_line": 44153,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "Useful for understanding how translations are handled in the GraphQL schema, which is relevant to the issue of removing translations."
                }
            ],
            "web/src/@templates/CartEditor/CartEditor.tsx": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Code snippet includes translations for various components in the CartEditor template and sets initial values for form fields based on data retrieved.",
                        "snippet": {
                            "code": "{\n    design: t('Design'),\n    announcements: t('Announcements'),\n    rewards: t('Rewards'),\n    upsells: t('Upsells'),\n    addOns: t('Add-ons'),\n    notes: t('Notes'),\n    discounts: t('Discount Codes'),\n    subscriptionUpgrades: t('Subscription Upgrades'),\n    badges: t('Trust Badges'),\n    expressPay: t('Express Payments'),\n    integrations: t('Integrations'),\n    settings: t('Settings'),\n  };\n\n  useEffect(() => {\n    setNonMetafieldFormValuesState({\n      shippingProtectionProduct: shippingProtectionProductData?.productByHandle\n        ? {\n            editableFields: {\n              title: shippingProtectionProductData.productByHandle.title,\n              description: shippingProtectionProductData.productByHandle.bodyHtml,\n              price: shippingProtectionProductData.productByHandle.variants.edges[0].node.price,\n              currencyCode: shopData?.shop.currencyCode || 'USD',\n            },\n            existingProduct: {\n              id: shippingProtectionProductData.productByHandle.id,\n              handle: shippingProtectionProductData.productByHandle.handle,\n            },\n          }\n        : null,\n    });\n  }, [shopData, shippingProtectionProductData]);\n\n  const initialValues = useMemo<CartEditorFormValues>(\n    () => ({\n      upcartEditorSettings: editorSettingsState,\n      upcartSettings: settingsState,\n      nonMetafieldFormValues: nonMetafieldFormValuesState,\n    }),\n    [editorSettingsState, settingsState, nonMetafieldFormValuesState],\n  );\n\n  const syncShippingProtectionProductIfRequired = useCallback",
                            "filename": "web/src/@templates/CartEditor/CartEditor.tsx",
                            "start_index": 21297,
                            "end_index": 22847,
                            "start_line": 3,
                            "end_line": 656,
                            "max_line": 1109,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "Includes translations for components in the CartEditor template, which is relevant to the issue of removing translations."
                }
            ]
        },
        "bouncer_response": {
            "score": 4,
            "criteria": "The RESPONSE must provide actionable, relevant guidance to more parts of the PROMPT's described issue to score higher. RESPONSES that offer some actionable advice but are incomplete or partially relevant should score between 4 and 6.",
            "supporting_evidence": "The RESPONSE provides a series of steps that are relevant to ensuring the UpCart app's transition to an English-only interface, which is in line with the PROMPT's description of removing inaccurate translations. It also addresses the separate PayPal issue, which is mentioned in the PROMPT. However, the RESPONSE includes a section with code snippets and GitHub links that are not actually accessible or verifiable, as they appear to be placeholders or examples rather than real references. This diminishes the utility of the RESPONSE because it suggests actions based on resources that do not exist, which cannot be acted upon. The RESPONSE does not fully address the entire context of the PROMPT, such as the need to communicate changes to users or the handling of support tickets due to missing translations, which were mentioned in the glossary.",
            "clarification_questions": "NONE"
        },
        "end_time": 1714390498.760709,
        "result": "Doesn't seem like we have fully grasped all the specifics of this ticket \ud83d\ude10.                   But we've outlined some ideas that might help you get started:\n\nTo ensure a seamless user experience for the UpCart 3.0 Shopify app, it's essential to finalize the transition to an English-only interface and resolve any payment gateway issues. The recent removal of inaccurate translations and the decision to operate exclusively in English necessitates a thorough review of the app's codebase and settings. Additionally, the separate concern regarding PayPal not appearing on the site, despite authorization, requires attention to the app's payment configuration.\n\n- Conduct a comprehensive search through the app's codebase to identify and eliminate any residual calls to the `t()` function or any remnants of the language picker feature.\n- Confirm that all text presented to the user is now hardcoded in English or sourced from locale files that are exclusively in English, ensuring consistency across the app.\n- Revise any existing documentation or help resources to accurately represent the app's English-only presentation, avoiding any confusion for users and developers.\n- Investigate the PayPal issue by reviewing the app's payment gateway settings, checking for accurate API credentials, and verifying that the PayPal authorization process is correctly integrated within the app's payment system.\n\n### Code snippets to check\n\n-  \u2192 [web](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web) \u2192 [src](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src) \u2192 [@templates](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates) \u2192 [CartEditor](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/CartEditor) \u2192 [Settings](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/CartEditor/Settings)- [Lines 1 - 71](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/CartEditor/Settings/TranslationsSettings.tsx#L1-L71)\n\n The snippet likely contains the code for managing dashboard translations, which is directly related to the issue of removing translations.\n-  \u2192 [common](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/common)- [Lines 1 - 556](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/common/defaultMetafields.ts#L1-L556)\n\n This snippet is relevant for understanding how translations were managed and potentially locating where the inaccurate translations were defined.\n-  \u2192 [web](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web) \u2192 [src](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src) \u2192 [@templates](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates) \u2192 [Tutorials](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/Tutorials)- [Lines 86 - 139](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/Tutorials/Tutorials.tsx#L86-L139)\n\n It showcases the usage of the removed `t()` function for language translations, which is relevant to the issue.\n-  \u2192 [web](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web) \u2192 [src](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src) \u2192 [@templates](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates) \u2192 [Home](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/Home)- [Lines 1 - 233](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/Home/Home.tsx#L1-L233)\n\n Provides information about the integration of the `t()` function into the Home template, which is relevant due to the removal of the translation function.\n-  \u2192 [web](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web) \u2192 [server](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/server) \u2192 [modules](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/server/modules) \u2192 [shopify](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/server/modules/shopify) \u2192 [graphql](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/server/modules/shopify/graphql) \u2192 [generated](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/server/modules/shopify/graphql/generated)- [Lines 42597 - 42640](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/server/modules/shopify/graphql/generated/index.ts#L42597-L42640)\n\n Useful for understanding how translations are handled in the GraphQL schema, which is relevant to the issue of removing translations.\n-  \u2192 [web](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web) \u2192 [src](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src) \u2192 [@templates](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates) \u2192 [CartEditor](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/CartEditor)- [Lines 3 - 656](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/CartEditor/CartEditor.tsx#L3-L656)\n\n Includes translations for components in the CartEditor template, which is relevant to the issue of removing translations."
    }
}