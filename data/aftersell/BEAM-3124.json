{
    "id": "BEAM-3124",
    "repo_name": "testbed/aftersell",
    "title": "Fix notes widget editing UX",
    "body": "\n[IMG_1]\n\n[IMG_2]\n\n* There should be no \"Active\" vs \"Inactive\" state of a note. If someone doesn't want a note, they should delete it. We can remove the checkbox beside \"Add a gift message?\" in the edit modal\n* Add a title above the text box in the edit modal: \"Checkbox title\"\n* Reword \"Define text box placeholder\" to \"Text box placeholder\"\n* Change defaults:\n  * Checkbox title from \"Planning to gift this? Let us know!\" to \"Add a gift message\"\n  * Text box placeholder from \"Write your note here!\" to \"Write your note here\u2026\"\n---\nGlossary:\ngithub_pr_1: The first image (IMG_1) is a screenshot of the current notes widget editing interface. It shows a modal dialog with a checkbox labeled \"Add a gift message?\" followed by a text box. The checkbox is checked, indicating the \"Active\" state of a note. The text box contains placeholder text that reads \"Write your note here!\" Above the text box, there is no title, and the placeholder text is not labeled as such.\n\nThe second image (IMG_2) is a mockup of the proposed changes to the notes widget editing interface. It displays the same modal dialog, but the checkbox next to \"Add a gift message?\" has been removed, indicating that the \"Active\" vs \"Inactive\" state concept has been eliminated. Instead of the checkbox, there is a title above the text box that reads \"Checkbox title,\" which is a placeholder for the actual title to be added. The placeholder text within the text box has been changed to \"Write your note here\u2026\" with an ellipsis at the end. Additionally, the label for the placeholder text has been updated to read \"Text box placeholder\" instead of \"Define text box placeholder.\"\nimage_2: The image displays a user interface section titled \"Content\" with a downward-pointing arrow next to it, suggesting it can be expanded or collapsed. Below this title, there is a subsection labeled \"Notes\" in a larger font. Directly underneath, there is a toggle switch labeled \"Add a gift message?\" with the word \"active\" displayed in a green pill-shaped badge to the right of the text, indicating the toggle is in the active state. To the far right of the image, there are two buttons: one labeled \"Reorder\" and another labeled \"Add note,\" both styled with a grey outline. Additionally, there are two icons aligned to the right within the same horizontal space as the toggle switch. The first icon resembles a pencil, suggesting an edit function, and the second is a trash can, indicating a delete function. The overall layout is clean with a light background, and the elements are enclosed within a rounded-corner container that has a subtle shadow, giving it a floating appearance over the background.\nimage_3: The image displays a user interface for an \"Edit Note\" modal. At the top of the modal, there is a header that reads \"Edit Note\" with a close button symbolized by an \"X\" on the top right corner. Below the header, there are two options, each with a checkbox to the left of the text. The first option is checked and reads \"Add a gift message?\" The second option is also checked and reads \"Show text box when selected.\"\n\nBelow these options, there is a label that says \"Define text box placeholder\" followed by a text box. Inside the text box, there is a placeholder text that reads \"Write your note here!\" The modal also includes two buttons at the bottom; the left button reads \"Cancel\" and the right button reads \"Confirm,\" with the \"Confirm\" button being more prominent. The overall layout is clean with a simple monochrome color scheme, and all elements are within a contained window with a drop shadow giving the appearance of being above the background.\n\n",
    "classification": "bug",
    "state": "closed",
    "repo_link": "https://github.com/testbed/aftersell.git",
    "requested_commit": null,
    "issue_tracker_identifier": "",
    "ai_cost": {
        "issue_classifier": 0.0005535,
        "issue_summarizer": 0.01777,
        "search_embedding": 0.000104,
        "documentation_agent": 0.00793,
        "repo_summary": 0.09766349999999999,
        "issue_star_solver": 0.128692,
        "snippet_processor": 0.02452,
        "bouncer": 0.0422
    },
    "attachments": [
        {
            "title": "Beam 3124/fix notes widget editing ux",
            "url": "https://github.com/beam-commerce/aftersell/pull/1107",
            "content": "",
            "placeholder_tag": "github_pr_1",
            "content_type": "ExternalAssetsType.GITHUB_PR"
        }
    ],
    "inline_assets": [
        {
            "title": "",
            "url": "https://uploads.linear.app/a4f50fbf-738c-4ae7-b7ca-dc198278934f/05960260-e422-41e8-8d15-d13852cebcdf/a6487e8a-d104-4029-947c-22549f96bb48",
            "content": "",
            "placeholder_tag": "image_2",
            "content_type": "ExternalAssetsType.IMAGE"
        },
        {
            "title": "",
            "url": "https://uploads.linear.app/a4f50fbf-738c-4ae7-b7ca-dc198278934f/17f9d32d-9dbf-4c71-aefb-f3c26f8a2e21/c66a78fd-4568-482a-bafc-7fb2ffba4ad5",
            "content": "",
            "placeholder_tag": "image_3",
            "content_type": "ExternalAssetsType.IMAGE"
        }
    ],
    "linked_issue_ids": [],
    "comments": [],
    "issue_summary": "Error Messages: None provided.\n\nFunction and Variable Names:\n- Notes widget editing interface\n- Modal dialog\n- Checkbox: \"Add a gift message?\"\n- Text box placeholder\n- Title above text box\n- Buttons: \"Reorder\", \"Add note\", \"Cancel\", \"Confirm\"\n- Icons: Pencil (edit function), Trash can (delete function)\n- Toggle switch: \"Add a gift message?\"\n- Badge: \"active\" state indicator\n- Header: \"Edit Note\"\n\nTechnical Descriptions:\n- Remove the concept of \"Active\" vs \"Inactive\" state for a note.\n- Remove the checkbox beside \"Add a gift message?\" in the edit modal.\n- Add a title above the text box in the edit modal: \"Checkbox title\".\n- Reword label from \"Define text box placeholder\" to \"Text box placeholder\".\n- Change default values:\n  - Checkbox title from \"Planning to gift this? Let us know!\" to \"Add a gift message\".\n  - Text box placeholder from \"Write your note here!\" to \"Write your note here\u2026\".\n\nOutput Format:\n- Remove checkbox for note activation.\n- Implement title for text box.\n- Update text box placeholder label and default value.\n- Update checkbox title default value.",
    "repo_summary": "The software project is a complex web application with multiple directories and components. It includes a backend server written in TypeScript using Express.js, Mongoose for MongoDB interactions, and GraphQL for API queries. The frontend is built using React with various Shopify UI extensions and components.\n\nKey components:\n1. **web/server**: Contains the backend server code with models like `Note` and `CheckoutWidgets`.\n2. **web/client**: Houses the frontend React application with components like `NoteWidget` and `TimerWidget`.\n3. **extensions-web-common**: Shared code for checkout widgets like `Note.tsx`.\n4. **extensions/post-purchase**: Checkout extension for post-purchase functionality.\n\nThe issue at hand involves modifying the notes widget editing interface. Changes include removing the \"Active\" vs \"Inactive\" state concept, adding a title above the text box, rewording placeholders, and updating default values.\n\nThe ticket outlines specific UI changes to the notes widget editing interface, such as removing a checkbox, adding a title, and updating default values for checkbox titles and text box placeholders. The goal is to simplify the user experience and streamline the editing process for notes.",
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1714258478.231338,
        "classification": "bug",
        "initial_code_snippets": [
            {
                "code": "import { default as ReactGlobal } from 'react';\nimport {\n    NoteRemoveChange,\n    NoteUpdateChange,\n} from '@shopify/ui-extensions/build/ts/surfaces/checkout/api/checkout/checkout';\nimport {\n    NoteWidgetConfig,\n    Note as NoteTypeV1,\n} from '../../../web/server/src/modules/checkout-widgets/checkout-widgets.model';\nimport { NotesContentType, NoteType as NoteTypeV2 } from '../../../web/server/src/modules/checkout-v2/checkout-v2.dtos';\nimport { parseTextToString } from '../utils/parseDifferentVersions';\nimport { CheckoutWidgetProps } from '../types';\n\ntype RenderNoteType = NoteWidgetConfig['notes'][0] & {\n    name: string;\n    isSelected: boolean;\n    textBoxValue: string;\n    fromInitialCart: false;\n};\n\nconst stringifyNote = (notes: [string, string][]): string => {\n    return notes.map(([key, value]) => (value ? `${key} : ${value}` : key)).join(' \\n ');\n};\n\nconst parseNote = (notes: string, keys: string[]): { [key: string]: string } => {\n    if (!notes) return {};\n\n    const noteArray = notes.split(' \\n ');\n    const noteEntries = noteArray.map((note) => {\n        const [key, value] = note.split(' : ');\n        return keys.includes(key || '') ? [key, value || ''] : [note, ''];\n    });\n\n    return Object.fromEntries(noteEntries);\n};\n\ntype NoteWidgetType = NoteWidgetConfig | NotesContentType;\ntype NoteType = NoteTypeV1 | NoteTypeV2;\n\ntype CurrentNote = {\n    fromInitialCart: boolean;\n    name: string;\n    textBoxValue: string;\n    isSelected: boolean;\n} & Partial<NoteType>;\n\nexport const NoteWidget: ReactGlobal.FC<CheckoutWidgetProps<NoteWidgetType>> = ({ globals }) => {\n    const {\n        React,\n        components: { BlockStack, Checkbox, TextField },\n        hooks: { useNote, useApplyNoteChange },\n        widget: { notes: notesFromDb = [] },\n    } = globals;\n\n    const checkedNotesFromDb = React.useMemo(\n        () =>\n            (notesFromDb as NoteType[])\n                .filter((note) => Boolean(note.checked))\n                .map(({ text, ...note }) => ({ ...note, text: parseTextToString(text) })),\n        [notesFromDb]\n    );\n    const checkedNotesText = React.useMemo(() => checkedNotesFromDb.map(({ text }) => text), [checkedNotesFromDb]);\n\n    const [loading, setLoading] = React.useState(false);\n    const [error, setError] = React.useState('');\n\n    const notesFromCart = useNote() || '';\n    const applyNoteChange = useApplyNoteChange();\n\n    const parsedNotesFromCart = React.useMemo(() => {\n        let preparedParsedNotes: { [name: string]: string } = parseNote(notesFromCart, checkedNotesText);\n\n        return preparedParsedNotes;\n    }, [notesFromCart, checkedNotesText]);",
                "filename": "extensions-web-common/checkout/widgets/note.tsx",
                "start_index": 0,
                "end_index": 2628,
                "start_line": 1,
                "end_line": 74,
                "max_line": 191,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { Button, HorizontalStack, InlineError, Text, VerticalStack } from '@shopify/polaris';\nimport { notEmpty, useDynamicList, useField, useForm } from '@shopify/react-form';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport useCheckoutFormState from '../../../../../hooks/useCheckoutFormState';\nimport { NoteWidgetConfig, WidgetSettingsProps } from '../../../../../types';\nimport Triggers from '../triggers';\nimport { Note } from './note';\n\nexport type NoteType = NoteWidgetConfig['notes'][0];\nconst defaultNoteValues = {\n    checked: false,\n    text: '',\n    showTextBox: false,\n    textBoxPlaceholder: 'Write your note here!',\n};\n\nconst emptyNoteFactory = (): NoteType => ({\n    ...defaultNoteValues,\n    id: Date.now(),\n});\n\nexport const NoteSettings = ({\n    widgetData,\n    handleConfigChange,\n    handleChange,\n    hasChanges,\n}: WidgetSettingsProps<NoteWidgetConfig>) => {\n    const initialWidgetValues = useMemo(() => widgetData, []);\n\n    const {\n        fields: notesList,\n        dirty,\n        addItem,\n        removeItem,\n        value,\n    } = useDynamicList<NoteType>(\n        {\n            list: initialWidgetValues.notes.map((note) => ({\n                ...defaultNoteValues,\n                ...note,\n            })),\n            validates: {\n                text: [notEmpty('Note text is required')],\n            },\n        },\n        emptyNoteFactory\n    );\n\n    const {\n        fields: { notes, triggers },\n        dirty: formDirty,\n    } = useForm({\n        fields: {\n            notes: notesList,\n            triggers: useField(initialWidgetValues.triggers),\n        },\n    });\n\n    const commonDirty = useMemo(() => hasChanges || dirty || formDirty, [hasChanges, dirty, formDirty]);\n    const [noteLengthError, setNoteLengthError] = useState(false);\n    const notesErrors = notesList.reduce((errors, note) => {\n        return [\n            ...errors,\n            ...Object.values(note)\n                .map((field) => field?.error)\n                .filter(Boolean),\n        ] as string[];\n    }, [] as string[]);\n\n    const [commonErrors, setCommonErrors] = useState(!!triggers.error || !!notesErrors.length);\n\n    useCheckoutFormState(handleChange, commonDirty, commonErrors);\n\n    //handle change nested config options in redux\n    const handleNotesChange = useCallback(handleConfigChange('notes'), [handleConfigChange]);",
                "filename": "web/client/src/pages/checkout/checkout-editor/components/widget-list/components/note-settings/note-settings.tsx",
                "start_index": 0,
                "end_index": 2380,
                "start_line": 1,
                "end_line": 75,
                "max_line": 123,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { asChoiceField, Field, useDynamicList } from '@shopify/react-form';\nimport {\n    Badge,\n    Box,\n    Button,\n    Card,\n    Checkbox,\n    Divider,\n    HorizontalStack,\n    IconSource,\n    Modal,\n    ResourceItem,\n    ResourceList,\n    Text,\n    TextField,\n    Tooltip,\n    VerticalStack,\n} from '@shopify/polaris';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { DynamicList } from '@shopify/react-form/build/ts/hooks/list/dynamiclist';\nimport { NotesContentType, NoteType } from '../../../../../../server/src/modules/checkout-v2/checkout-v2.dtos';\nimport { usePrevious } from 'src/hooks/usePrevious';\nimport { EmptyStateDashedWithButton } from './empty-state-dashed-with-button';\nimport { LineItemWrapper, LineItemWrapperProps, PriorityModal } from './priority-modal';\nimport { DeleteMajor, EditMajor } from '@shopify/polaris-icons';\nimport styles from './styles.module.scss';\n\nexport const NotesContentEditor = ({ content }: { content: Field<NotesContentType> }) => {\n    const [editingItem, setEditingItem] = useState<null | number>(null);\n    const [priorityModal, setPriorityModal] = useState(false);\n\n    const contentValue = useMemo(() => content.value.notes, [content.value.notes]);\n    const list = useDynamicList(contentValue, () => ({\n        id: uuidv4(),\n        checked: false,\n        text: { text: 'Planning to gift this? Let us know!' },\n        showTextBox: false,\n        textBoxPlaceholder: 'Write your note here!',\n    }));\n    const previousList = usePrevious<DynamicList<NoteType>['value']>(list.value);\n\n    const handleListItemChange = () => {\n        content.onChange({\n            ...content.value,\n            notes: list.value,\n        });\n    };\n\n    const onSave = () => {\n        handleListItemChange();\n    };\n\n    useEffect(() => {\n        if (!previousList) return; //initial render\n        if (list.value.length === previousList?.length) {\n            const changedPriority = previousList.some((value, index) => value.id !== list.value?.[index]?.id);\n            if (changedPriority) {\n                return;\n            }\n        }\n        handleListItemChange();\n    }, [list.value]);\n\n    return (\n        <>\n            <VerticalStack gap=\"3\">\n                {list.value.length === 0 ? (\n                    <EmptyStateDashedWithButton buttonText=\"Add note\" onClick={() => list.addItem()} />\n                ) : (\n                    <Card padding=\"0\">\n                        <Box padding=\"4\" background=\"bg-subdued\">\n                            <HorizontalStack align=\"space-between\" blockAlign=\"center\">\n                                <Text as=\"h4\" variant=\"headingMd\">\n                                    Notes\n                                </Text>\n                                <HorizontalStack gap=\"2\">\n                                    <Button onClick={() => setPriorityModal(true)}>Reorder</Button>\n                                    <Button onClick=",
                "filename": "web/client/src/pages/checkout/checkout-editor-v2/components/notes-content-editor.tsx",
                "start_index": 0,
                "end_index": 2974,
                "start_line": 1,
                "end_line": 79,
                "max_line": 219,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<VerticalStack align=\"space-between\">\n            <WidgetHeading {...title}>Edit text widget</WidgetHeading>\n            <Box paddingInlineStart=\"3\" paddingInlineEnd=\"3\" paddingBlockEnd=\"4\" paddingBlockStart=\"2\">\n                <VerticalStack gap=\"3\">\n                    <Text variant=\"bodyMd\" as=\"p\">\n                        Heading\n                    </Text>\n                    <RichTextEditor\n                        isMultiProduct={isMultiProduct}\n                        editorState={fields.heading.value}\n                        offerVersion={offerVersion}\n                        onChange={getHandleChangeRichTextEditor('heading')}\n                        isPostPurchase\n                    />\n                    <Text variant=\"bodyMd\" as=\"p\">\n                        Body text\n                    </Text>\n                    <RichTextEditor\n                        isMultiProduct={isMultiProduct}\n                        editorState={fields.text.value}\n                        offerVersion={offerVersion}\n                        onChange={getHandleChangeRichTextEditor('text')}\n                        isPostPurchase\n                    />\n                    {offerVersion === 'v2' && (\n                        <>\n                            <RangeSlider\n                                onChange={(val: number) => {\n                                    onChangeConfig({ topPadding: val });\n                                }}\n                                output\n                                step={2}\n                                value={config.topPadding ?? 0}\n                                label=\"Top padding\"\n                                min={0}\n                                max={10}\n                                prefix={<p>0</p>}\n                                suffix={<p>10</p>}\n                            />\n                            <RangeSlider\n                                onChange={(val: number) => {\n                                    onChangeConfig({ bottomPadding: val });\n                                }}\n                                output\n                                step={2}\n                                value={config.bottomPadding ?? 0}\n                                label=\"Bottom padding\"\n                                min={0}\n                                max={10}\n                                prefix={<p>0</p>}\n                                suffix={<p>10</p>}\n                            />\n                        </>\n                    )}\n                </VerticalStack>\n            </Box>\n            <Box paddingInlineStart=\"3\" paddingInlineEnd=\"3\" paddingBlockEnd=\"4\" paddingBlockStart=\"2\">\n                <Button\n                    size=\"large\"\n                    fullWidth\n                    outline\n                    destructive\n                    icon={DeleteMinor as IconSource}\n                    onClick={title.onDelete}\n                >\n                    Delete Widget\n                <",
                "filename": "web/client/src/pages/funnels/components/text-widget-settings.tsx",
                "start_index": 1991,
                "end_index": 4985,
                "start_line": 55,
                "end_line": 121,
                "max_line": 125,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "\"Write your note here\"\n                                        label=\"\"\n                                        value={text.value.text}\n                                        onChange={(val) => text.onChange({ ...text.value, text: val })}\n                                        autoComplete=\"off\"\n                                    />\n                                </div>\n                            </HorizontalStack>\n                            <VerticalStack gap=\"2\">\n                                <Checkbox label=\"Show text box when selected\" {...asChoiceField(showTextBox)} />\n                                {!!showTextBox.value && (\n                                    <TextField\n                                        label=\"Define text box placeholder\"\n                                        {...textBoxPlaceholder}\n                                        autoComplete=\"off\"\n                                    />\n                                )}\n                            </VerticalStack>\n                        </VerticalStack>\n                    );\n                })()}\n            </Modal>\n            <PriorityModal\n                open={priorityModal}\n                onClose={() => {\n                    list.reset();\n                    setPriorityModal(false);\n                }}\n                dynamicList={list}\n                onSave={() => {\n                    onSave();\n                    setPriorityModal(false);\n                }}\n                Item={({ item, index, ...props }: LineItemWrapperProps & { item: NoteType; index: number }) => {\n                    return (\n                        <LineItemWrapper {...props}>\n                            <HorizontalStack wrap={false} gap=\"2\" blockAlign={'center'}>\n                                <Text as=\"span\">{item.text.text}</Text>\n                                <Text as=\"span\" fontWeight=\"bold\">\n                                    {index}\n                                </Text>\n                            </HorizontalStack>\n                        </LineItemWrapper>\n                    );\n                }}\n            />\n        </>\n    );\n};",
                "filename": "web/client/src/pages/checkout/checkout-editor-v2/components/notes-content-editor.tsx",
                "start_index": 8117,
                "end_index": 10267,
                "start_line": 171,
                "end_line": 219,
                "max_line": 219,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "[\n                {\n                    appId: 'addTextWidget',\n                    uuId: uuidv4(),\n                    active: true,\n                    sortOrder: 0,\n                    config: {\n                        heading: {\n                            value: '<p style=\"text-align:center;\"><a href=\"undefined\" class=\"wysiwyg-mention\" data-mention data-value=\"first-name}\"><span style=\"font-size: 24px;\"><strong>{first-name}</strong></span></a><span style=\"font-size: 24px;\"><strong>, before you go!</strong></span></p>',\n                        },\n                        text: {\n                            value: '',\n                        },\n                        topPadding: 4,\n                        bottomPadding: 0,\n                    },\n                },\n                {\n                    appId: 'timer',\n                    uuId: uuidv4(),\n                    active: true,\n                    sortOrder: 1,\n                    config: {\n                        minutes: '5',\n                        heading: `<p style=\"text-align:center;\"><span style=\"color: var(--x-pp-default-color-text,inherit);background-color: var(--x-pp-color-surface-secondary);font-size: 18px;font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'\", sans-serif;\">Your order is confirmed but you can still add the following for a limited time</span><span style=\"font-size: 18px;\"> </span><a href=\"undefined\" class=\"wysiwyg-mention\" data-mention data-value=\"timer}\"><span style=\"font-size: 18px;\"><strong>{timer}</strong></span></a><span style=\"font-size: 18px;\"><strong> </strong></span></p>`,\n                        text: '',\n                        textColor: 'Black',\n                        backgroundColor: 'Yellow',\n                        topPadding: 4,\n                        bottomPadding: 0,\n                    },\n                },",
                "filename": "web/client/src/pages/funnels/utils/upsellMachinePresets.ts",
                "start_index": 24366,
                "end_index": 26314,
                "start_line": 29,
                "end_line": 965,
                "max_line": 970,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "\"Delete note\">\n                                                    <div onClick={(e) => e.stopPropagation()}>\n                                                        <Button\n                                                            icon={DeleteMajor as IconSource}\n                                                            destructive\n                                                            outline\n                                                            onClick={() => list.removeItem(index)}\n                                                        />\n                                                    </div>\n                                                </Tooltip>\n                                            </HorizontalStack>\n                                        </HorizontalStack>\n                                    </ResourceItem>\n                                );\n                            }}\n                        />\n                    </Card>\n                )}\n            </VerticalStack>\n\n            <Modal\n                title=\"Edit Note\"\n                open={editingItem !== null}\n                onClose={() => setEditingItem(null)}\n                primaryAction={{\n                    content: 'Confirm',\n                    onAction: () => {\n                        onSave();\n                        setEditingItem(null);\n                    },\n                }}\n                secondaryActions={[\n                    {\n                        content: 'Cancel',\n                        onAction: () => {\n                            list.reset();\n                            setEditingItem(null);\n                        },\n                    },\n                ]}\n                sectioned\n            >\n                {(() => {\n                    if (editingItem === null || !list.fields[editingItem]) return null;\n\n                    const { text, checked, showTextBox, textBoxPlaceholder } = list.fields[editingItem];\n\n                    return (\n                        <VerticalStack gap=\"2\">\n                            <HorizontalStack gap=\"1\" blockAlign=\"start\">\n                                <Checkbox label=\"\" {...asChoiceField(checked)} />\n                                <div className={styles.flexStretch}>\n                                    <TextField\n                                        placeholder=",
                "filename": "web/client/src/pages/checkout/checkout-editor-v2/components/notes-content-editor.tsx",
                "start_index": 5742,
                "end_index": 8117,
                "start_line": 118,
                "end_line": 171,
                "max_line": 219,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<Banner\n                                            status=\"warning\"\n                                            title={'\ud83d\ude80 Faster, Smoother, & Better Checkout Editor'}\n                                            action={{\n                                                content: 'Update Now',\n                                                loading: updateVersionLoading,\n                                                onAction: () => {\n                                                    updateCheckoutVersion('V2');\n                                                },\n                                            }}\n                                        >\n                                            <Text variant=\"bodyLg\" as=\"p\">\n                                                Explore our upgraded checkout editor. Discover new triggers, AI upsells,\n                                                multiple widget configurations, split testing and other customization\n                                                features. Upgrading is fully reversible and will automatically transfer\n                                                your current setup.\n                                            </Text>\n                                        </Banner>\n                                    )}\n                                    {currentSplitTestTab === 'A' || !currentSplitTestTab\n                                        ? widgetsVersionA\n                                        : widgetsVersionB}\n                                </VerticalStack>\n                            )}\n                        </div>\n                        <div className={styles.preview}>\n                            <div>\n                                <Preview widget={selectedWidgetData} widgetType={previewSelection?.type} />\n                                {selectedTab === 'rewardsWidget' && (\n                                    <div style={{ marginTop: '20px' }}>\n                                        <Banner title=\"\" status=\"info\">\n                                            The rewards bar widget is intended to be used with one or more upsell\n                                            widgets. If a customer sees that they're $10 away from free shipping, they\n                                            might want to accept one of your upsell products to get there!\n                                        </Banner>\n                                        <Banner\n                                            title=\"Create discount\"\n                                            action={{\n                                                content: 'Create discount',",
                "filename": "web/client/src/pages/checkout/checkout-editor/checkout-editor.tsx",
                "start_index": 10154,
                "end_index": 12821,
                "start_line": 236,
                "end_line": 274,
                "max_line": 306,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{list.addItem}>Add note</Button>\n                                </HorizontalStack>\n                            </HorizontalStack>\n                        </Box>\n                        <Divider />\n                        <ResourceList\n                            alternateTool={<></>}\n                            resourceName={{ singular: 'note', plural: 'notes' }}\n                            items={list.fields}\n                            showHeader={false}\n                            renderItem={(item, id, index) => {\n                                const isActive = item.checked.value;\n                                return (\n                                    <ResourceItem id={id} onClick={() => setEditingItem(index)}>\n                                        <HorizontalStack align=\"space-between\" blockAlign=\"center\">\n                                            <HorizontalStack gap=\"2\">\n                                                <VerticalStack gap=\"0\">\n                                                    <Text as=\"span\" fontWeight=\"bold\">\n                                                        {/*todo: validation?*/}\n                                                        {/*<InlineError*/}\n                                                        {/*  message={'Active notes length should be less than 5000 symbols because of Shopify limitations!'}*/}\n                                                        {/*  fieldID={''}*/}\n                                                        {/*/>*/}\n                                                        {item.text.value.text}\n                                                    </Text>\n                                                </VerticalStack>\n                                                <Badge status={isActive ? 'success' : 'attention'}>\n                                                    {isActive ? 'active' : 'inactive'}\n                                                </Badge>\n                                            </HorizontalStack>\n                                            <HorizontalStack gap=\"2\">\n                                                <Tooltip content=\"Edit note\">\n                                                    <div onClick={(e) => e.stopPropagation()}>\n                                                        <Button\n                                                            icon={EditMajor as IconSource}\n                                                            onClick={() => setEditingItem(index)}\n                                                        />\n                                                    </div>\n                                                </Tooltip>\n                                                <Tooltip content=",
                "filename": "web/client/src/pages/checkout/checkout-editor-v2/components/notes-content-editor.tsx",
                "start_index": 2974,
                "end_index": 5742,
                "start_line": 79,
                "end_line": 118,
                "max_line": 219,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { Button, Checkbox, Text, TextField, VerticalStack, HorizontalStack } from '@shopify/polaris';\nimport { asChoiceField, FieldDictionary } from '@shopify/react-form';\nimport React, { FC, useEffect } from 'react';\nimport type { NoteType } from './note-settings';\nimport styles from './styles.module.scss';\n\ninterface NoteSettingsProps {\n    fields: FieldDictionary<NoteType>;\n    index: number;\n    removeBadge(index: number): void;\n}\n\nexport const Note: FC<NoteSettingsProps> = ({ fields, removeBadge, index }) => {\n    const { text, checked, showTextBox, textBoxPlaceholder } = fields;\n\n    useEffect(() => {\n        text.runValidation();\n    }, []);\n\n    return (\n        <VerticalStack gap=\"2\">\n            <HorizontalStack blockAlign=\"center\" align=\"space-between\">\n                <Text variant=\"headingXs\" as=\"h3\">{`Note ${index + 1}`}</Text>\n                <Button plain destructive onClick={() => removeBadge(index)}>\n                    Remove note\n                </Button>\n            </HorizontalStack>\n            <HorizontalStack gap=\"1\" blockAlign=\"start\">\n                <Checkbox label=\"\" {...asChoiceField(checked)} />\n                <div className={styles.flexStretch}>\n                    <TextField placeholder=\"Write your note here\" label=\"\" {...text} autoComplete=\"off\" />\n                </div>\n            </HorizontalStack>\n            <VerticalStack gap=\"2\">\n                <Checkbox label=\"Show text box when selected\" {...asChoiceField(showTextBox)} />\n                {!!showTextBox.value && (\n                    <TextField label=\"Define text box placeholder\" {...textBoxPlaceholder} autoComplete=\"off\" />\n                )}\n            </VerticalStack>\n        </VerticalStack>\n    );\n};",
                "filename": "web/client/src/pages/checkout/checkout-editor/components/widget-list/components/note-settings/note.tsx",
                "start_index": 0,
                "end_index": 1728,
                "start_line": 1,
                "end_line": 42,
                "max_line": 42,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "[\n                {\n                    appId: 'addTextWidget',\n                    uuId: uuidv4(),\n                    active: true,\n                    sortOrder: 0,\n                    config: {\n                        heading: {\n                            value: '<p style=\"text-align:center;\"><a href=\"undefined\" class=\"wysiwyg-mention\" data-mention data-value=\"first-name}\"><span style=\"font-size: 24px;\"><strong>{first-name}</strong></span></a><span style=\"font-size: 24px;\"><strong>, last chance!</strong></span></p>',\n                        },\n                        text: {\n                            value: '',\n                        },\n                        topPadding: 4,\n                        bottomPadding: 0,\n                    },\n                },\n                {\n                    appId: 'timer',\n                    uuId: uuidv4(),\n                    active: true,\n                    sortOrder: 1,\n                    config: {\n                        minutes: '5',\n                        heading: `<p style=\"text-align:center;\"><span style=\"color: var(--x-pp-default-color-text,inherit);background-color: var(--x-pp-color-surface-secondary);font-size: 18px;font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'\", sans-serif;\">Offer expires in:</span><span style=\"font-size: 18px;\"> </span><a href=\"undefined\" class=\"wysiwyg-mention\" data-mention data-value=\"timer}\"><span style=\"font-size: 18px;\"><strong>{timer}</strong></span></a><span style=\"font-size: 18px;\"><strong> </strong></span></p>`,\n                        text: '',\n                        textColor: 'Black',\n                        backgroundColor: 'Red',\n                        topPadding: 4,\n                        bottomPadding: 0,\n                    },\n                },",
                "filename": "web/client/src/pages/funnels/utils/upsellMachinePresets.ts",
                "start_index": 41395,
                "end_index": 43277,
                "start_line": 29,
                "end_line": 965,
                "max_line": 970,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "const currentNotes = React.useMemo(() => {\n        const parsedNotesArray = Object.entries(parsedNotesFromCart);\n        const res: CurrentNote[] = checkedNotesFromDb.map(({ text, ...note }) => {\n            const isSelected = parsedNotesArray.find(([name]) => name === text);\n\n            return {\n                ...note,\n                name: text,\n                isSelected: !!isSelected,\n                textBoxValue: isSelected?.[1] || '',\n                fromInitialCart: false,\n            };\n        });\n\n        const noteFromCart = parsedNotesArray.find(([noteName]) =>\n            checkedNotesFromDb.every((note) => note.text !== noteName)\n        );\n\n        if (noteFromCart) {\n            res.push({ fromInitialCart: true, name: noteFromCart[0], textBoxValue: '', isSelected: true });\n        }\n\n        return res;\n    }, [parsedNotesFromCart, checkedNotesFromDb]);\n\n    const applyUpdates = React.useCallback(\n        (currentNotes: CurrentNote[]) => {\n            const updatedNotesObj = currentNotes\n                .filter((note) => note.isSelected)\n                .map((note) => [note.name, note.textBoxValue] as [string, string]);\n\n            const updatedNotes = stringifyNote(updatedNotesObj);\n\n            let changes: NoteRemoveChange | NoteUpdateChange;\n            if (updatedNotes) {\n                changes = { type: 'updateNote', note: updatedNotes };\n            } else {\n                changes = { type: 'removeNote' };\n            }\n\n            if (notesFromCart === updatedNotes) return;\n\n            setLoading(true);\n\n            applyNoteChange(changes)\n                .then((res) => {\n                    if (res.type === 'error' && res.message) {\n                        setError(res.message);\n                        return;\n                    }\n                })\n                .finally(() => setLoading(false));\n        },\n        [applyNoteChange]\n    );\n\n    const handleUpdateCheckbox = React.useCallback(\n        (id: number) => (isSelected: boolean) => {\n            const handledNote = currentNotes.find((note) => note.id === id);\n            if (!handledNote) return;\n\n            handledNote.isSelected = isSelected;\n\n            applyUpdates(currentNotes);\n        },\n        [currentNotes]\n    );\n\n    const handleUpdateTextBox = React.useCallback(\n        (id: number) => (newText: string) => {\n            const handledNote = currentNotes.find((note) => note.id === id);\n            if (!handledNote) return;\n\n            handledNote.textBoxValue = newText;\n            applyUpdates(currentNotes);\n        },\n        [currentNotes, parsedNotesFromCart]\n    );\n\n    const notesForRender = React.useMemo(\n        () => currentNotes.filter((note) => !note.fromInitialCart) as RenderNoteType[],\n        [currentNotes]\n    );\n\n    return (\n        <BlockStack>\n            {notesForRender.map(\n                ({ id, name, showTextBox = false, textBoxPlaceholder = '', isSelected, textBoxValue }) => {",
                "filename": "extensions-web-common/checkout/widgets/note.tsx",
                "start_index": 2634,
                "end_index": 5594,
                "start_line": 76,
                "end_line": 163,
                "max_line": 191,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "[\n                {\n                    appId: 'addTextWidget',\n                    uuId: uuidv4(),\n                    active: true,\n                    sortOrder: 0,\n                    config: {\n                        text: {\n                            config: {\n                                fontSize: 'medium',\n                                appearance: '',\n                            },\n                            value: '',\n                        },\n                        heading: {\n                            config: {\n                                fontSize: 'xlarge',\n                                appearance: '',\n                            },\n                            value: textStringUpsellDefault,\n                        },\n                        topPadding: 4,\n                        bottomPadding: 0,\n                    },\n                },\n                {\n                    appId: 'timer',\n                    uuId: uuidv4(),\n                    active: true,\n                    sortOrder: 1,\n                    config: {\n                        minutes: '5',\n                        heading: `<p style=\"text-align:center;\"><span style=\"font-size: 18px;\">Offer expires in: </span><a href=\"undefined\" class=\"wysiwyg-mention\" data-mention data-value=\"timer}\"><span style=\"font-size: 18px;\"><strong>{timer}</strong></span></a>&nbsp;</p>`,\n                        text: '',\n                        textColor: 'Black',\n                        backgroundColor: 'Yellow',\n                        topPadding: 4,\n                        bottomPadding: 0,\n                    },\n                },",
                "filename": "web/client/src/pages/funnels/utils/upsellMachinePresets.ts",
                "start_index": 5241,
                "end_index": 6873,
                "start_line": 29,
                "end_line": 965,
                "max_line": 970,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "[\n                {\n                    appId: 'addTextWidget',\n                    uuId: uuidv4(),\n                    active: true,\n                    sortOrder: 0,\n                    config: {\n                        heading: {\n                            value: `<p style=\"text-align:center;\"><span style=\"font-size: 24px;\"><strong>Don't miss out on these </strong></span><a href=\"undefined\" class=\"wysiwyg-mention\" data-mention data-value=\"first-name}\"><span style=\"font-size: 24px;\"><strong>{first-name}</strong></span></a><span style=\"font-size: 24px;\"><strong>! </strong></span></p>`,\n                        },\n                        text: {\n                            value: '',\n                        },\n                        topPadding: 4,\n                        bottomPadding: 0,\n                    },\n                },\n                {\n                    appId: 'timer',\n                    uuId: uuidv4(),\n                    active: true,\n                    sortOrder: 1,\n                    config: {\n                        minutes: '5',\n                        heading: `<p style=\"text-align:center;\"><span style=\"color: var(--x-pp-default-color-text,inherit);background-color: var(--x-pp-color-surface-secondary);font-size: 18px;\">Add any 1 of the following 4 products! <strong>Limited time offer:</strong></span><strong> </strong><a href=\"https://c9da132488ea.ngrok.io/funnels/single/62f46c743e93b55e47cce44d/editor/undefined\" class=\"wysiwyg-mention\" data-mention data-value=\"timer}\"><span style=\"font-size: 18px;\"><strong>{timer}</strong></span></a><strong> </strong></p>`,\n                        text: '',\n                        textColor: 'Black',\n                        backgroundColor: 'Blue',\n                        topPadding: 4,\n                        bottomPadding: 0,\n                    },\n                },",
                "filename": "web/client/src/pages/funnels/utils/upsellMachinePresets.ts",
                "start_index": 10259,
                "end_index": 12117,
                "start_line": 29,
                "end_line": 965,
                "max_line": 970,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "[\n                {\n                    appId: 'addTextWidget',\n                    uuId: uuidv4(),\n                    active: true,\n                    sortOrder: 0,\n                    config: {\n                        heading: {\n                            value: `<p style=\"text-align:center;\"><span style=\"font-size: 24px;\"><strong>Don't miss out on these </strong></span><a href=\"undefined\" class=\"wysiwyg-mention\" data-mention data-value=\"first-name}\"><span style=\"font-size: 24px;\"><strong>{first-name}</strong></span></a><span style=\"font-size: 24px;\"><strong>! </strong></span></p>`,\n                        },\n                        text: {\n                            value: '',\n                        },\n                        topPadding: 4,\n                        bottomPadding: 0,\n                    },\n                },\n                {\n                    appId: 'timer',\n                    uuId: uuidv4(),\n                    active: true,\n                    sortOrder: 1,\n                    config: {\n                        minutes: '5',\n                        heading: `<p style=\"text-align:center;\"><span style=\"color: var(--x-pp-default-color-text,inherit);background-color: var(--x-pp-color-surface-secondary);font-size: 18px;\">Add any 1 of the following 4 products! <strong>Limited time offer:</strong></span><strong> </strong><a href=\"https://c9da132488ea.ngrok.io/funnels/single/62f46c743e93b55e47cce44d/editor/undefined\" class=\"wysiwyg-mention\" data-mention data-value=\"timer}\"><span style=\"font-size: 18px;\"><strong>{timer}</strong></span></a><strong> </strong></p>`,\n                        text: '',\n                        textColor: 'Black',\n                        backgroundColor: 'Blue',\n                        topPadding: 4,\n                        bottomPadding: 0,\n                    },\n                },",
                "filename": "web/client/src/pages/funnels/utils/upsellMachinePresets.ts",
                "start_index": 10259,
                "end_index": 12117,
                "start_line": 29,
                "end_line": 965,
                "max_line": 970,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "[\n                {\n                    appId: 'addTextWidget',\n                    uuId: uuidv4(),\n                    active: true,\n                    sortOrder: 0,\n                    config: {\n                        text: {\n                            config: {\n                                fontSize: 'medium',\n                                appearance: '',\n                            },\n                            value: '',\n                        },\n                        heading: {\n                            config: {\n                                fontSize: 'xlarge',\n                                appearance: '',\n                            },\n                            value: textStringDownsell,\n                        },\n                        topPadding: 4,\n                        bottomPadding: 0,\n                    },\n                },\n                {\n                    appId: 'timer',\n                    uuId: uuidv4(),\n                    active: true,\n                    sortOrder: 1,\n                    config: {\n                        minutes: '5',\n                        heading: `<p style=\"text-align:center;\"><span style=\"font-size: 18px;\">Offer expires in: </span><a href=\"undefined\" class=\"wysiwyg-mention\" data-mention data-value=\"timer}\"><span style=\"font-size: 18px;\"><strong>{timer}</strong></span></a>&nbsp;</p>`,\n                        text: '',\n                        textColor: 'Black',\n                        backgroundColor: 'Red',\n                        topPadding: 4,\n                        bottomPadding: 0,\n                    },\n                },",
                "filename": "web/client/src/pages/funnels/utils/upsellMachinePresets.ts",
                "start_index": 18188,
                "end_index": 19812,
                "start_line": 29,
                "end_line": 965,
                "max_line": 970,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "=\"Show style settings\">\n                    <VerticalStack gap=\"2\">\n                        <Checkbox\n                            label=\"Show border around upsells\"\n                            checked={content.value.bordered}\n                            onChange={(val) => {\n                                content.onChange({\n                                    ...content.value,\n                                    bordered: val,\n                                });\n                            }}\n                        />\n                        <Checkbox\n                            label=\"Use outlined button\"\n                            checked={content.value.buttonStyle === 'secondary'}\n                            onChange={(val) => {\n                                content.onChange({\n                                    ...content.value,\n                                    buttonStyle: val ? 'secondary' : 'primary',\n                                });\n                            }}\n                        />\n\n                        {content.value.upsellType === 'single' && (\n                            <Checkbox\n                                label={'Use full width button?'}\n                                checked={content.value.fullWidthButton}\n                                onChange={(val) => {\n                                    content.onChange({\n                                        ...content.value,\n                                        fullWidthButton: val,\n                                    });\n                                }}\n                            />\n                        )}\n                        {content.value.upsellType === 'multi' && (\n                            <Select\n                                label=\"Layout Direction\"\n                                options={[\n                                    { label: 'Horizontal (Scrollable)', value: 'horizontal' },\n                                    { label: 'Vertical', value: 'vertical' },\n                                ]}\n                                value={content.value.direction}\n                                onChange={(val: 'horizontal' | 'vertical') => {\n                                    content.onChange({\n                                        ...content.value,\n                                        direction: val,\n                                    });\n                                }}\n                            />\n                        )}\n                    </VerticalStack>\n                </ShowAdvanced>\n            </VerticalStack>\n\n            <Modal\n                title=\"Edit Upsell Product\"\n                open={editingItem !== null}\n                onClose={() => setEditingItem(null)}\n                primaryAction={{\n                    content: 'Confirm',\n                    onAction: ()",
                "filename": "web/client/src/pages/checkout/checkout-editor-v2/components/upsell-content-editor.tsx",
                "start_index": 22668,
                "end_index": 25517,
                "start_line": 517,
                "end_line": 586,
                "max_line": 742,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "if (isTextImageWidget(template)) {\n                    const config = template.config;\n                    const heading = config.heading;\n                    config.heading = {\n                        config: {\n                            fontSize: heading?.config?.fontSize ?? UPSELL_TEXT_SIZES[4].value,\n                            appearance: heading?.config?.appearance ?? COLOR_OPTIONS[0].value,\n                        },\n                        value: heading?.value ?? '',\n                    };\n\n                    const text = config.text;\n                    config.text = {\n                        config: {\n                            fontSize: text?.config?.fontSize ?? UPSELL_TEXT_SIZES[2].value,\n                            appearance: text?.config?.appearance ?? COLOR_OPTIONS[0].value,\n                        },\n                        value: text?.value ?? '',\n                    };\n\n                    config.position = config.position || ('left' as Alignment);\n                    config.verticalAlignment = config.verticalAlignment || ('leading' as VerticalAlignment);\n                    config.imageSize = setDefaultNumberValue(config.imageSize, 350);\n                    config.topPadding = setDefaultNumberValue(config.topPadding, 2);\n                    config.bottomPadding = setDefaultNumberValue(config.bottomPadding, 2);\n                }\n\n                if (isTimerWidget(template)) {\n                    const config = template.config;\n                    config.topPadding = setDefaultNumberValue(config.topPadding, 2);\n                    config.bottomPadding = setDefaultNumberValue(config.bottomPadding, 2);\n                    config.minutes = config.minutes ?? 10;\n                    config.heading =\n                        config.heading ??\n                        `<p style=\"text-align:center;\"><span style=\"color: var(--x-pp-default-color-text,inherit);background-color: var(--x-pp-color-surface-secondary);font-size: 18px;font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'\", sans-serif;\">Your order is confirmed but you can still add the following for a limited time</span><span style=\"font-size: 18px;\"> </span><a href=\"undefined\" class=\"wysiwyg-mention\" data-mention data-value=\"timer}\"><span style=\"font-size: 18px;\"><strong>{timer}</strong></span></a><span style=\"font-size: 18px;\"><strong> </strong></span></p>`;\n                    config.text = config.text ?? '';\n                    config.textColor = config.textColor ?? UPSELL_COLOR_NAMES.BLACK;\n                    config.backgroundColor = config.backgroundColor ?? UPSELL_COLOR_NAMES.RED;\n                    config.hideBanner = config.hideBanner ?? false;\n                }\n\n                return template;\n            }",
                "filename": "web/client/src/pages/funnels/hooks/useFilledWithDefaultValuesTemplates.ts",
                "start_index": 12701,
                "end_index": 15540,
                "start_line": 225,
                "end_line": 267,
                "max_line": 270,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "@modelOptions({ schemaOptions: { _id: false } })\nexport class Note {\n    @prop({ required: true })\n    id!: number;\n\n    @prop({ required: true })\n    checked!: boolean;\n\n    @prop({ required: true })\n    text!: string;\n\n    @prop({ required: true, default: false })\n    showTextBox!: boolean;\n\n    @prop({ required: true, default: '' })\n    textBoxPlaceholder!: string;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nexport class NoteWidgetConfig {\n    @prop({ required: true, type: Note })\n    notes!: Note[];\n\n    @prop({ required: false })\n    triggers?: CheckoutTriggers;\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~models~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@modelOptions({ schemaOptions: { versionKey: false, discriminatorKey: 'type' } })\nexport class CheckoutWidgets {\n    _id!: string; // For TS, not for Mongo. This is stored as an ObjectID in Mongo.\n\n    @prop({ required: true })\n    type!: string;\n\n    @prop({ required: true })\n    shop!: string;\n\n    @prop({ required: true, default: false })\n    status!: boolean;\n\n    /** legacy field. Didn't used nowhere */\n    @prop({ required: false })\n    hasSplitTest?: boolean;\n\n    @prop({ required: true, default: new Date() })\n    createdAt!: Date;\n\n    @prop({ required: false, enum: SplitTestEnum, default: null, addNullToEnum: true })\n    splitTestVersion?: SplitTestEnum;\n\n    config!: { [key: string]: any };\n}\n\nexport class UpsellCheckoutWidget extends CheckoutWidgets {\n    @prop({ required: true })\n    declare config: UpsellWidgetConfig;\n}\n\nexport type IUpsellCheckoutWidget = InstanceType<typeof UpsellCheckoutWidget>;\n\nexport class UpsellCheckoutWidgetOne extends UpsellCheckoutWidget {\n    declare type: CHECKOUT_WIDGETS_TYPES.UPSELL_WIDGET_ONE;\n}\n\nexport class UpsellCheckoutWidgetTwo extends UpsellCheckoutWidget {\n    declare type: CHECKOUT_WIDGETS_TYPES.UPSELL_WIDGET_TWO;\n}\n\nexport class UpsellCheckoutWidgetThree extends UpsellCheckoutWidget {\n    declare type: CHECKOUT_WIDGETS_TYPES.UPSELL_WIDGET_THREE;\n}\n\nexport class TrustBadgeCheckoutWidget extends CheckoutWidgets {\n    declare type: CHECKOUT_WIDGETS_TYPES.TRUST_BADGES_WIDGET;\n\n    @prop({ required: true })\n    declare config: TrustBadgeWidgetConfig;\n}\n\nexport class TimerCheckoutWidget extends CheckoutWidgets {\n    declare type: CHECKOUT_WIDGETS_TYPES.TIMER_WIDGET;\n\n    @prop({ required: true })\n    declare config: TimerWidgetConfig;\n}\n\nexport class RewardsCheckoutWidget extends CheckoutWidgets {\n    declare type: CHECKOUT_WIDGETS_TYPES.REWARDS_WIDGET;\n\n    @prop({ required: true })\n    declare config: RewardsWidgetConfig;\n}\n\nexport class TestimonialsCheckoutWidget extends CheckoutWidgets {\n    declare type: CHECKOUT_WIDGETS_TYPES.TESTIMONIALS_WIDGET;\n\n    @prop({ required: true })\n    declare config: TestimonialWidgetConfig;\n}\n\nexport class FAQCheckoutWidget extends CheckoutWidgets {\n    declare type: CHECKOUT_WIDGETS_TYPES.FAQ_WIDGET;\n\n    // @prop({ required: true })\n    // config!: null;\n}",
                "filename": "web/server/src/modules/checkout-widgets/checkout-widgets.model.ts",
                "start_index": 8689,
                "end_index": 11617,
                "start_line": 73,
                "end_line": 498,
                "max_line": 565,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<Layout>\n                            <Layout.Section fullWidth>\n                                <AdditionalScopesBanner\n                                    requiredAdditionalScopes={['write_checkout_branding_settings']}\n                                />\n                            </Layout.Section>\n                            <StickyLayoutSection oneThird>\n                                <Card padding=\"1\">\n                                    <VerticalStack>\n                                        <Box\n                                            paddingInlineStart=\"4\"\n                                            paddingInlineEnd=\"4\"\n                                            paddingBlockStart=\"3\"\n                                            paddingBlockEnd=\"3\"\n                                        >\n                                            <VerticalStack gap=\"2\" align=\"start\" inlineAlign=\"start\">\n                                                <HorizontalStack blockAlign=\"center\" align=\"space-between\">\n                                                    <Text variant=\"headingMd\" as=\"h6\">\n                                                        Edit branding\n                                                    </Text>\n                                                </HorizontalStack>\n                                                <HorizontalStack gap=\"2\" blockAlign=\"center\">\n                                                    {currentCheckoutProfile?.isPublished ? (\n                                                        <Badge status=\"success\" progress=\"complete\" size=\"small\">\n                                                            Live\n                                                        </Badge>\n                                                    ) : (\n                                                        <Badge status=\"info\" progress=\"complete\" size=\"small\">\n                                                            Draft\n                                                        </Badge>\n                                                    )}\n                                                    <ButtonSelect\n                                                        plain\n                                                        value={currentCheckoutProfile?.id}\n                                                        onChange={(value) => {\n                                                            setCurrentCheckoutProfile(\n                                                                checkoutProfiles.find(\n                                                                    (profile) => profile?.id === value\n                                                                )\n                                                            );\n                                                        }",
                "filename": "web/client/src/pages/checkout/checkout-branding.page.tsx",
                "start_index": 6634,
                "end_index": 9487,
                "start_line": 176,
                "end_line": 299,
                "max_line": 320,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "initial_doc_snippets": [
            {
                "code": "<div class=\"hidden\">\n                            <span class=\"visually-hidden\" id=\"forwarding-external-new-window-message\">\n                                Opens external website in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-new-window-message\">\n                                Opens in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-external-message\">\n                                Opens external website.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"checkout-context-step-one\">\n                                Customer information - Checkout\n                            </span>\n                        </div>\n                    </main>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 322226,
                "end_index": 323078,
                "start_line": 6265,
                "end_line": 6282,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<span class=\"order-summary-toggle__inner\">\n                        <span class=\"order-summary-toggle__icon-wrapper\">\n                            <svg\n                                width=\"20\"\n                                height=\"19\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__icon\"\n                            >\n                                <path\n                                    d=\"M17.178 13.088H5.453c-.454 0-.91-.364-.91-.818L3.727 1.818H0V0h4.544c.455 0 .91.364.91.818l.09 1.272h13.45c.274 0 .547.09.73.364.18.182.27.454.18.727l-1.817 9.18c-.09.455-.455.728-.91.728zM6.27 11.27h10.09l1.454-7.362H5.634l.637 7.362zm.092 7.715c1.004 0 1.818-.813 1.818-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817zm9.18 0c1.004 0 1.817-.813 1.817-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--show\">\n                            <span>Show order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"6\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M.504 1.813l4.358 3.845.496.438.496-.438 4.642-4.096L9.504.438 4.862 4.534h.992L1.496.69.504 1.812z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--hide\">\n                            <span>Hide order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"7\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M6.138.876L5.642.438l-.496.438L.504 4.972l.992 1.124L6.138 2l-.496.436 3.862 3.408.992-1.122L6.138.876z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span\n                            class=\"order-summary-toggle__total-recap total-recap\"\n                            data-order-summary-section=\"toggle-total-recap\"\n                        >\n                            <span class=\"total-recap__final-price\" data-checkout-payment-due-target=\"5073\">$50.73</span>\n                        </span>\n                    </span>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 242214,
                "end_index": 245205,
                "start_line": 6097,
                "end_line": 6446,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"step__sections\">\n                                <div class=\"section\">\n                                    <div class=\"section__header os-header\">\n                                        <svg\n                                            width=\"56\"\n                                            height=\"56\"\n                                            viewBox=\"0 0 56 56\"\n                                            fill=\"none\"\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                            <circle cx=\"28\" cy=\"28\" r=\"26\" stroke=\"#E5E5E5\" stroke-width=\"2.29412\" />\n                                            <path\n                                                fill-rule=\"evenodd\"\n                                                clip-rule=\"evenodd\"\n                                                d=\"M22.4811 37.3603L16.3636 31.3947C15.5663 30.6172 15.5663 29.3605 16.3636 28.583C17.1609 27.8055 18.4497 27.8055 19.247 28.583L23.8066 33.0293L36.6493 18.7538C37.3834 17.9186 38.6701 17.8231 39.5225 18.537C40.379 19.2529 40.4789 20.5056 39.7448 21.3388L25.4706 37.2469C25.1015 37.6685 24.5672 37.9191 24.0003 37.9409C23.3825 37.9429 22.8625 37.7341 22.4811 37.3603Z\"\n                                                fill=\"#008060\"\n                                                stroke=\"#E5E5E5\"\n                                                stroke-width=\"0.764706\"\n                                            />\n                                        </svg>\n                                        <div class=\"os-header__heading\">\n                                            <span class=\"os-order-number\"> Order #1001 </span>\n                                            <h2 class=\"os-header__title\" id=\"main-header\" tabindex=\"-1\">\n                                                Thank you {{Customer Name}}!\n                                            </h2>\n                                        </div>\n                                    </div>\n                                </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245858,
                "end_index": 247957,
                "start_line": 6161,
                "end_line": 6451,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"section__content\">\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Contact information</h3>\n\n                                                            <p class=\"as-dummy-line\"></p>\n\n                                                            <h3 class=\"heading-3\">Shipping address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n\n                                                            <h3 class=\"heading-3\">Shipping method</h3>\n                                                            <p class=\"as-dummy-line as-w40\"></p>\n                                                        </div>\n                                                    </div>\n\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Payment method</h3>\n                                                            <ul class=\"payment-method-list\">\n                                                                <li class=\"payment-method-list__item\">\n                                                                    <p class=\"as-dummy-line as-w80\"></p>\n                                                                </li>\n                                                            </ul>\n\n                                                            <h3 class=\"heading-3\">Billing address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n                                                        </div>\n                                                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318877,
                "end_index": 321837,
                "start_line": 6191,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<html\n    lang=\"en\"\n    dir=\"ltr\"\n    class=\"js desktop page--no-banner page--logo-main page--show page--show card-fields cors svg opacity placeholder no-touchevents displaytable display-table generatedcontent cssanimations flexbox no-flexboxtweener anyflexbox shopemoji floating-labels\"\n>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 0,
                "end_index": 289,
                "start_line": 1,
                "end_line": 6518,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box\">\n                                            <div class=\"content-box__row content-box__row--no-border\">\n                                                <h2>Customer information</h2>\n                                            </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318496,
                "end_index": 318753,
                "start_line": 6192,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<aside class=\"sidebar\" role=\"complementary\">\n                    <div class=\"sidebar__header\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323196,
                "end_index": 323511,
                "start_line": 6285,
                "end_line": 6493,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box__row content-box__row--no-padding\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 248190,
                "end_index": 248249,
                "start_line": 6193,
                "end_line": 6193,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<body class=\"aftersell-preview\">\n        <a href=\"#main-header\" class=\"skip-to-content\"> Skip to content </a>\n\n        <header class=\"banner\" data-header=\"\" role=\"banner\">\n            <div class=\"wrap\">\n                <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n            </div>\n        </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241387,
                "end_index": 241804,
                "start_line": 6077,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/server` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 999,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 248120,
                "end_index": 248145,
                "start_line": 6192,
                "end_line": 6210,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box__row\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318798,
                "end_index": 318828,
                "start_line": 6214,
                "end_line": 6214,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <meta charset=\"utf-8\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n        <meta\n            id=\"thankyoupage_viewport_meta\"\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, user-scalable=0\"\n        />\n        <meta name=\"referrer\" content=\"origin\" />\n\n        <title>Thank you! - Checkout</title>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 294,
                "end_index": 717,
                "start_line": 6,
                "end_line": 16,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"main\">\n                    <header class=\"main__header\" role=\"banner\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245397,
                "end_index": 245703,
                "start_line": 6153,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box__row text-container\">\n                                                <h2 class=\"heading-2 os-step__title\" id=\"main-header\" tabindex=\"-1\">\n                                                    Your order is confirmed\n                                                </h2>\n                                                <p class=\"os-step__description\">\n                                                    You\u2019ll receive an email when your order is ready.\n                                                </p>\n                                            </div>\n                                        </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 317828,
                "end_index": 318454,
                "start_line": 6200,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<th class=\"product__description\" scope=\"row\">\n                                                        <span class=\"product__description__name order-summary__emphasis\"\n                                                            >Product Name</span\n                                                        >\n                                                        <span\n                                                            class=\"product__description__variant order-summary__small-text\"\n                                                            >Variant Name</span\n                                                        >\n                                                    </th>\n                                                    <td class=\"product__quantity visually-hidden\">1</td>\n                                                    <td class=\"product__price\">\n                                                        <span class=\"order-summary__emphasis\">$42.99</span>\n                                                    </td>\n                                                </tr>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 331038,
                "end_index": 332129,
                "start_line": 6363,
                "end_line": 6376,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<span class=\"product-thumbnail__quantity\" aria-hidden=\"true\"\n                                                                >1</span\n                                                            >\n                                                        </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 330669,
                "end_index": 330927,
                "start_line": 6358,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script>\n            !(function (f, b, e, v, n, t, s) {\n                if (f.fbq) return;\n                n = f.fbq = function () {\n                    n.callMethod ? n.callMethod.apply(n, arguments) : n.queue.push(arguments);\n                };\n                if (!f._fbq) f._fbq = n;\n                n.push = n;\n                n.loaded = !0;\n                n.version = '2.0';\n                n.queue = [];\n                t = b.createElement(e);\n                t.async = !0;\n                t.src = v;\n                s = b.getElementsByTagName(e)[0];\n                s.parentNode.insertBefore(t, s);\n            })(window, document, 'script', 'https://connect.facebook.net/en_US/fbevents.js');\n            fbq('init', '895262111044943');\n            fbq('track', 'PageView');\n        </script>\n        <!-- End Facebook Pixel Code -->\n        <!-- Reddit Pixel -->\n        <script>\n            !(function (w, d) {\n                if (!w.rdt) {\n                    var p = (w.rdt = function () {\n                        p.sendEvent ? p.sendEvent.apply(p, arguments) : p.callQueue.push(arguments);\n                    });\n                    p.callQueue = [];\n                    var t = d.createElement('script');\n                    (t.src = 'https://www.redditstatic.com/ads/pixel.js'), (t.async = !0);\n                    var s = d.getElementsByTagName('script')[0];\n                    s.parentNode.insertBefore(t, s);\n                }\n            })(window, document);\n            rdt('init', 't2_dp3wj8bg');\n            rdt('track', 'PageVisit');\n        </script>\n        <!-- End Reddit Pixel -->\n\n        <!-- Dev HMR [START] -->\n        <script type=\"module\">\n            if (!import.meta.env || !import.meta.env.PROD) {\n                // For embedded development, the iframe loads an HTML file from the server. Normally for\n                // development, the HTML file is served by the dev server, which injects the HMR script.\n                // This script adds the HMR script to the iframe to allow HMR in embedded development.\n                const script = document.createElement('script');\n                script.setAttribute('type', 'module');\n                script.setAttribute('src', './src/dev-hmr.ts');\n                document.getElementsByTagName('head')[0].append(script);\n            }\n        </script>\n        <!-- Dev HMR [END] -->\n\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com/\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" crossorigin=\"anonymous\" />\n        <link\n            href=\"https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap\"\n        />\n    </head>",
                "filename": "web/client/index.html",
                "start_index": 6232,
                "end_index": 8924,
                "start_line": 7,
                "end_line": 178,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "intial_documentation_sources": {
            "shopify": {
                "collection": "shopify_documentation",
                "reason_for_relevance": "The issue involves changes to a widget editing interface, which may be part of a Shopify store. The Shopify API reference and templating documentation could provide necessary information on how to implement these interface changes within the Shopify platform."
            }
        },
        "external_documentation_snippets": {
            "external_shopify": [
                {
                    "code": "Deciding extension placement\n Localizing UI extensions\n Testing UI extensions\n UX guidelines\n Selling strategies\n App Store\n UX guidelines\n Customer accounts offer a secure and flexible way for customers to manage their information and orders. Accounts empower customers with greater control over post-purchase surfaces and create opportunities for merchants to drive more sales with features like offers, wishlists, product offers, and loyalty programs.\n All apps should follow the general guidance provided by the App Design Guidelines. This guide provides additional guidance for designing customer account UI extensions.\n Merchant-to-customer content\n When you write UI content for your customer account app, you\u2019re writing directly to a merchant\u2019s customers. The content that you write should represent the merchant, not your app, and should optimize the customer\u2019s online experience.\n Consult Polaris for more guidelines on voice, tone, and vocabulary to consider for merchant-to-customer content.\n Principles\n Enable self-service: Self-service options help customers resolve issues faster and reduce merchant support interactions.\n Design for consistency: Merchants can use different apps to enhance their customer account interface. Because your app operates alongside other apps, it's important to ensure a familiar user experience. Avoid introducing unfamiliar UX patterns, terms, or navigation paradigms that deviate from our guidelines. Aim to integrate your app seamlessly into the existing customer account experience.\n Personalize when possible: Customer account extensions benefit from authenticated access to customer data. Use this data to personalize the customer experience and create delightful moments. For example, offer complementary products, birthday discounts, or personalize content with the customer's name. Be creative, but respect privacy.\n Don't expose your brand to the customer: Enhance the merchant's brand subtly and effectively. At all times, aim to create a seamless and consistent experience that makes customers feel like they're interacting directly with the merchant.\n Build for scale: Design your app to support merchants of all sizes, from small startups to large enterprises. Ensure that your app effectively handles both low and high order volumes.\n Responsive design\n Design interfaces that adapt to different screen sizes. Your app should offer a good UX across mobile, tablet, and desktop devices. Test the extension on various screen sizes to ensure content adjusts appropriately for each device.\n Grid layouts\n Grid layouts enable responsive design for different screen sizes, and streamline development while enhancing the overall aesthetics of the customer experience. Grid layouts also ensure that elements are spaced, aligned, and positioned consistently.\n Customer account pages are made up of columns, gutters, and margins. The design is based on a 12-column grid.\n The following are the grid breakpoints per device type:\n Mobile: 375 dp breakpoint, six column grid, one column content\n Tablet: 750 dp breakpoint, six column grid, one column content\n Small laptop: 1000 dp breakpoint, six column grid, two column content\n When you design your page layout, you should generally space the content evenly across the grid columns. For example, in a three-column layout, each column of content would span four columns of the grid. However, to create a layout similar to the Order status page, the first column of content should span seven columns and the second should span five columns.\n Fulfillment statuses\n Conditional logic based on status\n Design your apps so that merchants have the flexibility to determine where an action displays.\n For example, for order actions that only become relevant once the customer has received the order, like requesting a return or writing a review, ideally customer's can\u2019t take action until the order is marked as delivered. However, when merchants don't provide a tracking number for a fulfilled order, it can be difficult for Shopify to know when the order has been delivered. In these instances, customer wouldn't have access to actions that depend on an order's delivered status. Be mindful of situations like this, and enable merchants to configure your app to suit their fulfillment processes.\n Content guidelines\n Status names\n Aim for one to three words.\n Use sentence case.\n Test different fulfillment scenarios\n We recommend testing your Order status page extensions across different fulfillment states. The following are some examples:\n Different delivery statuses, such as confirmed, on its way, and delivered.\n Partial fulfillments\n Multiple fulfillments\n Local pickup\n Gift cards\n Digital products\n Returns\n Payment statuses\n Depending on the payment status of an order, a payment card will display above the order summary. For example, when a customer has made a purchase with Net 90 payment terms, they have 90 days to submit payment. In this scenario, the payment card displays the amount due, the due date, and a Pay now button.\n Test different payment scenarios\n We recommend testing your Order status page extensions across different payment statuses. The following are some example statuses:\n Payment terms\n Partial payment\n Refund\n Paid\n User feedback and informational banners\n Error messages\n Error messages should help the customer understand what went wrong and how they can resolve the error.\n Create error messages using a Banner component with the alert or critical status prop.\n Don't use toasts for error messages. Since toasts disappear, customers lose access to the information that they need to move forward.\n Learn more about error handling.\n Informational banners\n Create informational banners using a Banner component with the info status prop.\n To build a more neutral banner, without the icons and colors that are associated with the different props, the following are some examples of components that you can use:\n Card: Customer account\n Heading: Heading 2\n Text: Default\n Button: Secondary\n These components adopt the merchant's branding by default, which helps your banner align with the overall look and feel of the merchant's shop.\n Next steps\n Figma UI kit\n Everything you need to start designing with customer account and checkout components.\n Figma: Account screens\n Explore all the customer account screens to design your extensions.\n Customer account components\n Learn about the components that you can use to build customer account UI extensions.\n Checkout components\n Learn about the checkout components that you can also use to build customer account UI extensions.\n Merchant-to-customer content guidelines\n Learn how to write UI content that represents merchants and optimizes the customer experience.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Merchant-to-customer content\n Principles\n Responsive design\n Grid layouts\n Fulfillment statuses\n Payment statuses\n User feedback and informational banners\n Next steps\n Updates & News",
                    "filename": "docs/apps/customer-accounts/best-practices/ux-guidelines/content.txt",
                    "start_index": 0,
                    "end_index": 6978,
                    "start_line": 1,
                    "end_line": 90,
                    "max_line": 90,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Delivery and shipping\n Product offers\n Payments\n Thank you and Order status\n Overview\n Add a survey\n UX guidelines\n Localized UI extensions\n Test UI extensions\n Best practices\n Distribution\n Billing\n App Store\n UX guidelines for Thank you and Order status customizations\n This guide introduces UX guidelines for Thank you and Order status customizations.\n Choosing placement\n Before getting started, you first need to decide whether you want your extension to show up at a static target, or a dynamic target. Read the target framework to learn more. Choosing the right target approach is key to providing a great customer experience.\n In the example above, purchase.thank-you.block.render is a dynamic extension point, which a merchant can place wherever they want. In this instance, the extension adds a post-checkout survey extension in OrderStatus1 above the customer information, because the survey feedback should be captured directly after the buying experience.\n Choosing components\n To understand the complete list of components needed to create a Thank you and Order status extension, you should first understand the extension's possible states.\n An extension has four possible states:\n Loading state. Learn more about requesting network access scope.\n Loaded (default) state\n Processing state\n Submitted state\n Note\n The submitted state doesn't need a success banner because the addition of the survey to the page indicates that the extension was rendered.\n Component list\n To create the four possible states of a post-checkout survey extension, you need all the components listed in the following chart.\n Component Preview Tips\n SkeletonText Try to reflect the actual content's dimensions to keep placement from shifting when the content loads.\n View View is a generic container component. Its contents will always be the same size, so this component can be useful in layout components like Grid, BlockStack, and InlineStack that would otherwise stretch their children to fit.\n Heading Allow merchants to customize the header content and make it configurable from the checkout editor.\n Text Allow merchants to customize the text content and make it configurable from the checkout editor.\n ChoiceList Use choice lists to present a list of choices where customers can make a single selection or multiple selections. If possible, enable merchants to customize the `OptionList` content.\n Button Use secondary buttons here, reserving the primary button for the main call to actions (such as \"Continue shopping\").\n Banner Use secondary buttons here, reserving the primary button for the main call to actions (such as \"Continue shopping\").\n Choosing a layout\n When using a nested layout, you need only the following structural component:\n Component Preview Tips\n BlockStack BlockStack components can be nested with themselves or with other components.\n Use the BlockStack component to vertically stack elements on top of each other.\n Nesting BlockStack\n Spacing between the heading and content should be set to base to keep it consistent with nested components. To address different spacing values, you can nest a BlockStock inside of another BlockStack component, as shown in the following image:\n Post-checkout survey UX guidelines\n To help merchants gain customer trust and to provide a great post-checkout experience, follow these guidelines when designing a post-checkout survey app extension.\n Display only one survey per session\n Limit content so that customers aren't overwhelmed with information after they've completed their order.\n Give merchants control over survey content\n Merchants know their customers best and should have the flexibility to create surveys that relate to the shopping journey of their customers.\n Next steps\n Use a Checkout UI extension to add a post-checkout survey to the Thank you and Order status pages.\n Explore UX guidelines for the entire checkout experience.\n For general best practices for developing apps, refer to Best practices for building Shopify apps.\n For practical guidance on how to design a user interface for the Shopify admin, refer to Shopify's App Design Guidelines.\n Get familiar with Polaris accessibility and content guidelines.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Choosing placement\n Choosing components\n Choosing a layout\n Post-checkout survey UX guidelines\n Next steps\n Updates & News",
                    "filename": "docs/apps/checkout/thank-you-order-status/ux-guidelines/content.txt",
                    "start_index": 0,
                    "end_index": 4363,
                    "start_line": 1,
                    "end_line": 65,
                    "max_line": 65,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Overview\n Banners\n Fields\n Overview\n Add a field\n UX guidelines\n Delivery and shipping\n Product offers\n Payments\n Thank you and Order status\n App Store\n UX guidelines for custom fields\n Shopify Plus\n Checkout UI extensions that render on the information and shipping and payment steps in checkout are available only to stores on a Shopify Plus plan.\n This guide introduces UX guidelines for adding custom fields to checkout.\n Placement\n A static target lets you define the placement for the extension. Depending on your use case, you might also define multiple static targets to place your extension. For example, you might want to give the option to place the delivery instructions extension either before or after the shipping methods section.\n src/Checkout.jsx\n src/Checkout.js\n 1 ...\n 2 // Set multiple entry points for the extension.\n 3 // Add all targets to your configuration file.\n 4 const shippingRenderBefore = reactExtension(\"purchase.checkout.shipping-option-list.render-before\", () => <App />);\n 5 export shippingRenderBefore;\n 6\n 7 const shippingRenderAfter= reactExtension(\"purchase.checkout.shipping-option-list.render-after\", () => <App />);\n 8 export shippingRenderAfter;\n 9\n 10 function App() {\n 11\n    ...\n 12 }\n Place the delivery instructions extension in close proximity to the checkout step that it's related to. In this case, the static targets purchase.checkout.shipping-option-list.render-before or purchase.checkout.shipping-option-list.render-after are the best locations for this extension type because it concerns delivery instructions.\n Note\n In some cases, extensions might not render if the static target being used is tied to an area that isn\u2019t rendered for the customer. For example, extensions using purchase.checkout.shipping-option-list.render-after won't show in a checkout with only digital products, since they will not be shipped.\n Components\n The components to create a custom field to capture delivery instructions depend on the extension's possible states.\n The delivery instructions use case can have the following states:\n Checkbox is unchecked\n Checkbox checked, TextField then becomes visible\n TextField with value\n Components list for the custom field to capture delivery instructions use case\n Component Preview Tips\n Checkbox N/A\n TextField Only show this component when the customer has expressed interest in adding delivery instructions.\n Layout\n You can stack the Checkbox and TextField components in the BlockStack component.\n Components list for the delivery instructions use case\n Component Preview\n BlockStack\n BlockStack\n In the following example, base is the spacing value between the Checkbox and TextField components, which is typically the default option. It prevents the extension from being too cramped or too spacious.\n UX guidelines\n Adhere to the following guidelines when you're designing a delivery instructions use case for checkout UI extensions, so that you can help merchants gain customer trust and provide a great checkout experience:\n Reveal information progressively and strategically\n Show a simplified state of the extension by default. In the following example, the customer can choose to add delivery instructions to an order. If the customer chooses to add delivery instructions, then the TextField is displayed. It doesn't display otherwise.\n Capture and remember customer inputs\n Preserve inputs through the experience. For example, if the customer writes their delivery instructions in the TextField component, then unchecks the Checkbox component and checks it again, the instructions should still display rather than having the customer type them again.\n Next steps\n Explore UX guidelines for the entire checkout experience.\n For general best practices for developing apps, refer to Best practices for building Shopify apps.\n For practical guidance on how to design a user interface for the Shopify admin, refer to Shopify's App Design Guidelines.\n Get familiar with Polaris accessibility and content guidelines.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Placement\n Components\n Layout\n UX guidelines",
                    "filename": "docs/apps/checkout/custom/fields/ux-guidelines/content.txt",
                    "start_index": 0,
                    "end_index": 4096,
                    "start_line": 1,
                    "end_line": 70,
                    "max_line": 70,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Layouts\n Overview\n checkout.liquid\n Overview\n Customize checkout.liquid\n Checkout CSS\n Templates\n Sections\n Blocks\n Section groups\n Config\n Locales\n Settings\n Developer tools\n Best practices\n Integrating apps\n Product merchandising\n Pricing and payments\n Delivery and fulfillment\n Customer engagement\n Troubleshooting\n Theme Store\n Best practices for editing checkout.liquid\n Deprecated\n checkout.liquid is deprecated. It will be sunset for the Information, Shipping, and Payment checkout steps on August 13, 2024, and for the Thank you and Order status pages on August 28, 2025. Additional scripts and script tags will also be sunset for the Order status page on August 28, 2025.\n Stores that currently use checkout.liquid need to upgrade to Checkout Extensibility before these dates. Access to checkout.liquid won't be provided to new stores, with the exception of expansion stores. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n Learn how to build checkout extensions that extend the functionality of Shopify checkout.\n Caution\n Before you make changes to your checkout, it's recommended that you back up the current version of the code in your checkout.liquid file. To learn more about backing up your theme, refer to Downloading themes or Duplicating themes.\n If you're on Shopify Plus, then you can get access to the checkout.liquid layout. However, if you make changes to this layout, then you'll need to manually upgrade it whenever Shopify releases an upgrade.\n Document Object Model (DOM) dependency\n One of the biggest considerations to make when implementing checkout modifications is how DOM-dependent your code is. As Shopify releases checkout upgrades, the content output by the Liquid drops in checkout.liquid, and in some cases by the checkout.liquid content itself, is updated. This means that if your customizations depend on that content, then they could break with new upgrades. It\u2019s always best to minimize DOM dependency to reduce future support debt for your team.\n Tip\n Other than adding content only outside of the Liquid drops, the most DOM-independent method for accessing elements is to reference data and name attributes, as these are less likely to be changed across upgrades.\n Add custom code\n When making changes, you should keep all of the relevant code for a specific customization in a single snippet. This reduces the risk of conflict with other code, and generally makes the code easier to read.\n Also, any time that a change is made, it's recommended that you place a comment at the beginning of the change noting who made it, and when.\n Example\n 1 {% comment %} Added by Name from Company on September 21 2018 {% endcomment %}\n Add killswitches\n When customizing checkout.liquid, you're more likely to run into issues or conflicts in the checkout, possibly preventing sales, so it's a good idea to wrap your customizations in a killswitch (a theme setting). This allows you to temporarily disable the customization to get the checkout functioning quickly, which gives you time to troubleshoot issues.\n General customization approach\n In general, the approach for making customizations is the following:\n Create a killswitch theme setting\n Create a snippet to host your customization\n Include your snippet, wrapped in your killswitch, in checkout.liquid\n The following examples show a killswitch theme setting and a snippet inclusion wrapped in a conditional based on the killswitch:\n config/settings_schema.json\n 1 {\n 2\n    \"type\": \"checkbox\",\n 3\n    \"id\": \"checkout_customization\",\n 4\n    \"label\": \"Enables a checkout customization\"\n 5 },\n layout/checkout.liquid\n 1 {% comment %}Added by Name at Company on September 21, 2018{% endcomment %}\n 2 {% if settings.checkout_customization %}\n 3\n    {% render 'checkout-customization' %}\n 4 {% endif %}\n In your snippet, you can do the following:\n Use the checkout's version of jQuery\n Watch for the page:load and page:change events to set up your customization\n Scope your customization to the appropriate step or page by referencing the following objects:\n Shopify.Checkout.step\n Shopify.Checkout.page\n Shopify.Checkout.OrderStatus\n 1 (function($) {\n 2\n    $(document).on(\"page:load page:change\", function() {\n 3\n      if (Shopify.Checkout.step === \"contact_information\") {\n 4\n        // Add content\n 5\n      }\n 6\n    });\n 7 })(Checkout.$);\n Form submit\n Many checkout customizations require validating data before allowing the customer to move to the next step. Due to the functionality around the main form submit button, the easiest approach is watch for the click event on this button, rather than the submit field on the form. You should also watch for the use of the enter key and re-route that functionality into a click event on the submit button.\n Caution\n All selectors used in the snippet below are placeholders. You'll need to decide on the selector you want to use. Try to avoid DOM dependency.\n 1 (function($) {\n 2\n    $(document).on(\"page:load page:change\", function() {\n 3\n      if (Shopify.Checkout.step === \"contact_information\") {\n 4\n        $(\"DEFINE_YOUR_SUBMIT_BUTTON_SELECTOR\").on(\"click\", function(e) {\n 5\n          e.preventDefault();\n 6\n 7\n          if (data is valid) {\n 8\n            $(\"DEFINE_YOUR_MAIN_FORM_SELECTOR\").submit();\n 9\n          } else {\n 10\n            // Show an error\n 11\n          }\n 12\n        });\n 13\n 14\n        $(\"DEFINE_YOUR_MAIN_FORM_SELECTOR\").on(\"keyup\", function(e) {\n 15\n          if (e.keycode === 13) {\n 16\n            e.preventDefault();\n 17\n            $(\"DEFINE_YOUR_SUBMIT_BUTTON_SELECTOR\").trigger(\"click\");\n 18\n          }\n 19\n        });\n 20\n      }\n 21\n    });\n 22 })(Checkout.$);\n Common customizations\n The following examples are commonly requested customizations. They all use the general customization approach as a starting point.\n Block the use of specific characters in address fields\n To block the use of specific characters in address fields, you need to consider the following cases:\n Updates to the associated address fields, such as the blur event.\n The form submit event.\n For each of these cases, execute your validation. For example, you could compare any field values with a Regular Expression (Regex). If the data isn't valid, you can show an error and prevent the default functionality.\n Limit the number of characters in address fields\n To limit the number of characters in address fields, add a maxlength attribute to any associated fields, as shown in the following example.\n Note\n The selector used below is a placeholder. You'll need to decide on the selector you want to use. Try to avoid DOM dependency.\n 1 $(\"DEFINE_YOUR_FIELD_SELECTOR\").attr(\"maxlength\", your_value);\n The maxlength attribute only prevents additional characters from being entered. To ensure a good user experience, you should add a message that appears when a customer hits the character limit.\n Add a required Terms of Service checkbox\n To add a required checkbox for agreeing to Terms of Service, create a checkbox on the page, then follow the form submit event to check whether the checkbox has been checked before allowing the customer to proceed. It's also a good idea to use a checkout attribute to save the value of the checkbox.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Document Object Model (DOM) dependency\n Add custom code\n Add killswitches\n General customization approach\n Form submit\n Common customizations\n Updates & News",
                    "filename": "docs/themes/architecture/layouts/checkout-liquid/customize-checkout/content.txt",
                    "start_index": 0,
                    "end_index": 7438,
                    "start_line": 1,
                    "end_line": 150,
                    "max_line": 150,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product recommendations reference\n Web pixel app extensions\n Marketing activities app extensions\n Product subscription app extensions\n TextField\n Use a text field to allow merchants to enter or edit text. If you want to specify the kind of input, then use a formatted text field.\n NewTextFieldProps\n Name Type Description\n disabled boolean? Whether the field can be modified.\n error string? Indicate an error to the user. The field will be given a specific stylistic treatment to communicate problems that have to be resolved immediately.\n label label? Content to use as the field label.\n onBlur () => void? Callback when focus is removed.\n onChange (value: string) => void? Callback when the user has finished editing a field.\n onFocus () => void? Callback when input is focused.\n onInput (value: string) => void? Callback when the user makes any changes in the field. As noted in the documentation for onChange, you must not use this to update value \u2014 use the onChange callback for that purpose. Use the onInput prop when you need to do something as soon as the user makes a change, like clearing validation errors that apply to the field as soon as the user begins making the necessary adjustments.\n placeholder string? A short hint that describes the expected value of the field.\n required boolean? Whether the field needs a value.\n value string? The current value for the field. If omitted, the field will be empty. You should update this value in response to the onChange callback.\n helpText string? Label under the text field which provides guidance or instructions that assist users.\n action InputAction? A button under the text field to provide extra funtionality.\n InputAction\n Name Type Description\n label string The text displayed in the button.\n disabled boolean? Whether the button can be pressed.\n onPress () => void A callback to be performed.\n Note\n This TextField component will only support NewTextFieldProps in version 2.0.0. Please migrate to using NewTextFieldProps as soon as possible if you are using the props below.\n Props\n Name Type Description\n title string? The text displayed as the text field title.\n subtitle string? The text displayed underneath the text field.\n initialValue string? The initial text value in the text field.\n placeholder string? The hint text to display when no text is input.\n isValid boolean? Whether the input is a valid option.\n errorMessage string? The text displayed when an error is detected on merchant input. Displayed beneath the field.\n onChangeText ((value: string) => void)? A callback containing the new string when the text field\u2019s value changes.\n rightElementStyle EmbeddedElementProps? Use this value to change the type of the text field.\n EmbeddedElementProps\n A text field can take one of the following forms:\n ActionProps: Tells the merchant to perform an action, like submitting an order.\n InfoProps: Displays information to the merchant.\n PasswordProps: Prompts the merchant to input a password.\n SuccessProps: Displays a success message to the merchant.\n ActionProps\n Name Type Description\n type 'action' Indicates that the text field is an action type.\n message string The text displayed in the text field.\n onPress (value: string) => void A callback to be performed when the text field is pressed.\n InfoProps\n Name Type Description\n type 'info' Indicates that the text field is an info type.\n message string The text displayed in the text field.\n alwaysShow boolean? Whether the text field is always displayed.\n SuccessProps\n Name Type Description\n type 'success' Indicates that the text field is a success type.\n message string? The text displayed in the text field.\n Password\n Name Type Description\n type 'password' Indicates that the text field is a password type.\n onPress (value: string) => void A callback to be performed when the text field is pressed.\n Guidelines\n When a merchant opens a new form, the first text field should be in a focused state.\n If the merchant is actively focused in a text field, then the keyboard should come up and the label should move to the top of the field.\n If focus goes away from the text field, then the keyboard should hide.\n Text fields always take up the full screen width.\n Text fields don\u2019t change height. If text entered is longer than the width of the text field, then the oldest text on the left should be hidden to make room.\n When it makes sense, provide autocomplete options (for example, entering an address).\n Content guidelines\n If a text field is required, then it should indicate \"Required\".\n Label titles should be brief and written in sentence case.\n Use the same terms for similar label titles throughout the app.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n NewTextFieldProps\n Props\n EmbeddedElementProps\n Guidelines\n Content guidelines",
                    "filename": "docs/api/pos-extensions/ui-extensions-reference/components/text-field/content.txt",
                    "start_index": 0,
                    "end_index": 4778,
                    "start_line": 1,
                    "end_line": 80,
                    "max_line": 80,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product recommendations\n Media and images\n Overview\n Support product media\n Product media UX guidelines\n Theme Store\n Product media UX guidelines\n The following are the main user experience (UX), and user interface (UI), aspects to consider with product media:\n Badges and buttons\n 3D model viewers\n Video players\n Slideshows\n Badges and buttons\n Both video and 3D model media displays should have the following included in their display, with each associated element, respectively:\n A play or 3D icon badge on the media thumbnail\n A play or 3D icon button control on the featured media\n 3D model media displays should also include a View in your space button.\n For example:\n When adding these badges and buttons you should consider the following:\n The icons to use\n Their placement and sizing\n Their styling\n The 'View in your space' button\n When including the View in your space button, you should consider the following:\n If the button is being placed on top of the media display, then you need to ensure that video and 3D controls aren't obstructed.\n Only show the button for devices that support AR. Supporting devices will run iOS version 13 or higher, or Android version 9 or higher.\n If a product's media includes a 3D model, and that media should be displayed, then the button should be visible regardless of the currently displayed media type. Additionally, if the product has more than one 3D model, then the button should open the currently visible model, or the first model if none are currently visible.\n The button should include the 3D icon.\n The button should only be placed below the featured media. For example:\n Tip\n To learn more about how to create a View in your space button, refer to Support product media.\n Icons\n Click the button below to download an asset library that includes icons for video and 3D model displays. You should use the icons from this library, rather than create custom icons as they're industry standards that will help customers more easily identify the available interaction.\n Download product media assets\n The icons come in two different styles:\n Rounded\n Angular\n You should only use one style, and it should match your theme's style.\n Badge placement and sizing\n The placement, and sizing, of the display varies depending whether it's for a thumbnail badge, or a featured button control.\n Thumbnail badge\n Thumbnail badges should adhere to the following guidelines:\n They shouldn't occupy more than 1/9th of the thumbnail display, or 1/6th for landscape thumbnails, and shouldn't be smaller than 20px x 20px. For example:\n They can be aligned in any corner of the thumbnail, however should be uniformly aligned. For example:\n Featured button control\n Featured button controls should be a minimum of 60px x 60px, and maximum of 90px x 90px.\n Styling\n The styling of the badges and buttons should adhere to the following guidelines:\n You should maintain the whitespace around the badge and button icons, as well as their proportions. For example:\n The background of both badges, and buttons, can be modified to match your theme style. For example, a circle, rounded corners, etc. For example:\n You should use existing colour settings to style the badges and buttons. There should be a high contrast between the background and the icon, as well as the media and the background, so settings for \"Main background\", \"Heading\", or \"Text\" generally give the best results. For example:\n The opacity of the badge elements should vary depending on the element. Refer to Thumbnail badge opacity and Featured button control opacity to learn more.\n In addition to the above, the View in your space button should either have no background color, or a very neutral color, so that it doesn't compete with primary and secondary calls to action. For example:\n Thumbnail badge opacity\n The thumbnail badge elements should adhere to the following opacity guidelines:\n The icon opacity should be 60%.\n The badge background opacity should be 100%.\n The badge background should have a border that is at least 5% opacity of the icon's colour.\n For example:\n Featured button control opacity\n The featured badge elements should adhere to the following opacity guidelines:\n The icon opacity should be 100%.\n The icon should persist on hover to maintain visibility.\n The badge background opacity should be a minimum of 75%.\n The badge background should have a border that is at least 5% opacity of the icon's colour.\n For example:\n 3D model viewers\n There are the following aspects to consider with 3D model viewers:\n The general behavior\n Accessibility\n The display elements\n Focus order\n Accessibility\n You should consider the following accessibility guidelines:\n 3D model content should default to inactive on page load as it can be unexpected, overwhelming, and distracting when defaulted to active.\n 3D models should allow for panning with only the keyboard, in addition to mouse and swipe gestures.\n Add dedicated button controls, with appropriate labels, to control the model positioning.\n Ensure keyboard focus states are visible for sighted keyboard-only or voice dictation users.\n Refrain from shifting keyboard focus when interacting with a button control so customers can navigate away when they're ready.\n Allow for text descriptions of models for each stage view.\n Announce the current state of the model via ARIA live status element when button controls are interacted with.\n Test your implementation with a variety of assistive technologies. For example, keyboard alone, and multiple screen readers.\n Display elements\n 3D model viewers should have the following display elements:\n 3D model viewer controls\n 3D model viewer progress bar\n 3D model viewer controls\n These controls should follow the badge and button styling suggestions, however the icons can be set to a minimum of 55% opacity. For example:\n These controls should be placed in the bottom right corner of the media element, either with even, or no padding:\n You should keep visual consistency among all UI elements, so the corners of the control display shouldn't be rounded unless the icons and buttons in the theme are also rounded. For example:\n 3D model viewer progress bar\n The progress bar is to show the load progress of the model. Similar to the controls, the progress bar should following the badge and button styling practices, however it should have 100% opacity, and should be placed at the top of the media element.\n For example:\n Focus order\n In order to facilitate keyboard interaction, 3D model viewers should have a specific focus order on the related elements. There are two main states to consider:\n Inactive\n Active\n Inactive\n When the viewer is inactive, the focus order should be as follows:\n Viewer controls\n Active\n When the viewer is active, the focus order should be as follows:\n Viewer container\n Zoom in\n Zoom out\n Fullscreen\n Video players\n There are the following aspects to consider with video players:\n The general behavior\n Accessibility\n Styling and placement\n Accessibility\n Video content should default to paused on page load as it can be unexpected, overwhelming, and distracting when defaulted to playing.\n If a video plays on page load, it should be muted by default.\n Test your implementation with a variety of assistive technologies. For example, keyboard alone, and multiple screen readers.\n Styling and placement\n In addition to the badge and button styling suggestions, video players should adhere to the following:\n They should be placed at the bottom of the featured media, either with even, or no padding:\n If the theme uses custom focus states, then you should maintain consistency. Otherwise, the default browser focus state should be used.\n You should keep visual consistency among all UI elements, so the corners of the control display shouldn't be rounded unless the icons and buttons in the theme are also rounded. For example:\n General behavior\n Note\n The following uses the terms \"active\" and \"inactive\". In the context of videos, this would be equivalent to \"playing\" and \"paused\".\n In general, video players and 3D model viewers should be set to inactive while advancing through media galleries as videos and models that aren't visible shouldn't be active.\n If more than one media element is displaying at a time, then all media should be inactive by default, requiring the customer to initiate activity. If only one media element is visible at once, then you should adhere to the following:\n Desktop - The first media element on page load should be set to inactive, however as the media changes, the current media should automatically be set to active.\n Tablet/Mobile - All media elements should default to inactive, requiring the customer to initiate activity.\n Slideshows\n If your theme uses a slideshow media gallery, then you shouldn't rely solely on swipe gestures for navigation as video players and 3D model viewers can interfere. For example:\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Badges and buttons\n 3D model viewers\n Video players\n General behavior\n Slideshows\n Updates & News\n Developer changelog\n Partner blog",
                    "filename": "docs/themes/product-merchandising/media/media-ux/content.txt",
                    "start_index": 0,
                    "end_index": 9092,
                    "start_line": 1,
                    "end_line": 140,
                    "max_line": 140,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Overview\n Getting started\n Create a subscription\n UX guidelines\n Overview\n Upsell\n Subscriptions\n Payments\n Thank you and Order status\n Localized UI extensions\n UX guidelines for post-purchase upsells\n Beta\n Post-purchase checkout extensions are in beta and can be used without restrictions in a development store. To use post-purchase extensions on a live store, you need to request access.\n When you design a post-purchase upsell, a great customer-facing user experience (UX) and merchant experience are important to the success of our merchants. The post-purchase upsell page should represent the merchant well and protect their brand\u2019s trust.\n User experience\n To provide a great post-purchase experience and to help the merchant gain trust from customers, implement the following UX principles in your post-purchase checkout extension:\n Be transparent about all the costs involved in a purchase.\n Present clear options to accept or refuse upsell offers without pressuring customers.\n Display a maximum of two consecutive upsell offers.\n Present relevant products by tailoring upsell offers to the shopping behaviors and preferences of customers.\n Provide default copy that addresses customers directly using a voice that's appropriate for any store, regardless of brand personality.\n Header and footer\n The styling of the header and footer is consistent across every post-purchase page:\n Header: Confirms the payment of the initial purchase of the order. Customers can also directly access their full order confirmation (and bypass the upsell offer pages) using the View order confirmation button.\n Footer: Contains links to the privacy policy, terms of service, and refund policy.\n Note\n You can't adjust the header and footer components.\n Required components\n App Bridge Checkout provides many powerful UI components that a rendering extension can use to build an interface. The App Bridge Checkout UI components are rendered natively by Shopify, so you can depend on them to be performant, accessible, and functional in all of the checkout\u2019s supported browsers.\n Before you integrate your post-purchase app into checkout, familiarize yourself with the UI guidelines and best practices for the following required components:\n Callout banner\n Product title and price\n Product image\n Price breakdown\n Call to action buttons\n Callout banner\n A callout banner encourages customers to take action on a post-purchase upsell. Use the App Bridge Checkout CalloutBanner to implement this component:\n Place a callout banner near the top of the page to let the customer know what the upsell offer is. Provide strong default copy in your app to encourage merchants to be explicit about the upsell offer.\n Do Don't\n Lead with clear text that explains what a customer can add to the order they've placed. For example: It\u2019s not too late to add to your order.\n Include the product name and the discount associated with it.\n Use exclamation points. For example: \"Wait! Before time runs out!\n Use misleading language that makes the upsell offer feel compulsory or introduces doubt about the status of the order.\n Product title and price\n The product must have the same title and price that it has on the merchant\u2019s store. Keep this consistent to maintain a customer\u2019s trust if they compare. Place the price of the product directly below the product title.\n If the post-purchase product is an upsell offer at a discounted price, then do the following:\n Strike out the original price of the product.\n Display the discounted price next to the original price so that the relationship is clear.\n Product image\n The product image represents the product being offered to the customer in the post-purchase upsell offer. Use the App Bridge Checkout Image component to add an image:\n ADDING MULTIPLE IMAGES\n If the upsell offer includes multiple images, then the images need to be easy to navigate and provide additional context to the customer. Images can be presented using different angles or sizes.\n Note\n There isn't an App Bridge Checkout component available for a carousel feature.\n Do Don't\n Use 48px previous and next arrow buttons.\n Give customers options to swipe between images, navigate using the keyboard, or click on a thumbnail to navigate to the next image.\n Make additional images responsive across screen sizes.\n Implement auto-scrolling through the images, as this might overwhelm customers.\n Price breakdown\n The post-purchase price breakdown shows the total cost of the upsell offer that the customer is accepting. The breakdown needs to be placed under the variant and quantity pickers. The breakdown also needs to dynamically update to reflect price changes if the customer adjusts the product's quantity or variants.\n STRUCTURE OF THE PRICE BREAKDOWN\n The price breakdown needs to include the following:\n Money line: An individual breakdown of costs.\n Subtotal: The total before shipping and taxes have been included.\n Shipping: The total shipping cost for the item(s).\n Taxes: The added cost of goods or services.\n Money summary: The combined total of the subtotal, shipping, and taxes.\n If your product description is long enough that a customer can't see the price breakdown without scrolling, then you need to include a copy of the price breakdown at the end of your product description.\n Call to action buttons\n A call to action button allows a customer to accept or decline an upsell offer. Use the App Bridge Checkout Button component to implement call to action buttons.\n ACCEPT BUTTON\n The accept button is the primary action on the post-purchase upsell page.\n Use the following text for the accept button:\n [Pay now \u2022 Product total price]\n If the product you are offering is free, then use the following text:\n [Add now \u2022 Free] or [Add now \u2022 $0]\n Note\n Don't give merchants the option to change the button text. However, you can translate the button text to any language that you want to support.\n CONFIRMING ACCEPTED UPSELL OFFERS\n Use the App Bridge Checkout Banner component to display a confirmation message when a customer accepts an upsell offer. For example: [Your order has been updated].\n Customers might not expect the accept button to generate a payment immediately because the convention is for \"buy now\" actions to trigger an additional confirmation step. To clarify that there is no additional confirmation step, do the following:\n Add a summary modal to confirm whether the customer wants to proceed.\n Add additional help text directly under the accept button informing the customer that they'll be charged immediately.\n DECLINE BUTTON\n The decline button needs to be placed under the accept button and should be less visually prominent than the accept button. However, despite being less visually prominent, the decline button should still be easy to see so that the merchant can easily decline the upsell offer. The decline button must contain the text [Decline upsell offer].\n Optional components\n In addition to the required components, you can add the following optional components to the post-purchase page:\n Product description\n Variant picker\n Quantity picker\n Product description\n The product description provides a summary of the key features of the product being displayed in the product image (or images).\n Use the TextBlock, TextContainer and Text App Bridge Checkout components to implement a product description.\n All upsell offers should have a product description that accurately summarizes the product features. Encourage merchants using your app to keep the product description as short as possible.\n LENGTHY PRODUCT DESCRIPTIONS\n If the product description is so long that it pushes the rest of the components down (variant picker, quantity picker, price breakdown, and buttons, then divide it into the following two parts:\n A summary description that reveals all other components without scrolling\n A longer, more detailed description below the other components\n Variant picker\n If the product has several variants (for example, size or color), then the page needs to include a variant picker under the product description. Use the App Bridge Checkout Select component to implement a variant picker.\n Label the picker with the name of the variant and the variant values. For example, Size: S, M, L, XL. If your product has several sizes, then consider linking to a size chart.\n Quantity picker\n The quantity picker should be placed below the product description to allow customers to adjust the quantity of a product.\n The quantity picker needs to be a number stepper that's set to 1 as a default. Use the label [Quantity].\n Post-purchase app selector\n Merchants need to enable their post-purchase app in the Shopify admin checkout settings. If there are multiple post-purchase apps installed, then they can also use the checkout settings to select which post-purchase app they want to enable on the post-purchase page.\n We recommend that you let merchants know that they might need to manually select your app to be active in the checkout settings. You could explain this in installation instructions or in your help pages.\n Your can check whether or not it is currently selected, using the following GraphQL Query:\n 1 {\n 2\n    app  {\n 3\n        isPostPurchaseAppInUse\n 4\n    }\n 5 }\n Suggested merchant-facing content for your app:\n You could use the following copy as the basis for a merchant-facing message about multiple post-purchase extensions:\n \"If you already have a post-purchase app installed, you must manually select to make [app-name] active. You can do this in the Shopify admin checkout settings. This option only shows if you already have a post-purchase app installed.\"\n Performance consideration\n To guarantee a good experience for both merchants and customers, we strongly recommend that you prioritize performance when building your extensions. You can depend on App Bridge Checkout UI components to be performant, accessible, and functional in all of the checkout's supported browsers. Keep the following guidelines in mind when building your app:\n Network calls must complete in two seconds or less.\n Network calls that occur before an interface presents to the customer must happen in the ShouldRender handler.\n Render must not require a network call before an interface presents to the customer. Ensure the extension caches required data beforehand using the storage API from ShouldRender.\n Next steps\n Learn how to create a post-purchase upsell.\n Explore UX guidelines for the entire checkout experience.\n For general best practices for developing apps, refer to Best practices for building Shopify apps.\n For practical guidance on how to design a user interface for the Shopify admin, refer to Shopify's App Design Guidelines.\n Get familiar with Polaris accessibility and content guidelines.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n User experience\n Post-purchase app selector\n Performance consideration\n Next steps\n Updates & News\n Developer changelog",
                    "filename": "docs/apps/checkout/product-offers/post-purchase/ux-guidelines/upsell/content.txt",
                    "start_index": 0,
                    "end_index": 10936,
                    "start_line": 1,
                    "end_line": 140,
                    "max_line": 140,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Delivery and shipping\n Product offers\n Overview\n Pre-purchase\n Overview\n Build a pre-purchase offer\n UX guidelines\n Post-purchase\n Payments\n Thank you and Order status\n App Store\n UX guidelines for pre-purchase product offers\n Shopify Plus\n Checkout UI extensions that render on the information and shipping and payment steps in checkout are available only to stores on a Shopify Plus plan.\n This guide introduces UX guidelines for adding pre-purchase product offers to checkout.\n Placement\n Choosing the right target is key to providing a good experience.\n Before you start building, decide whether you want your product offer to render at a static target, a dynamic target, or whether you'll support both. To learn more about target types, refer to the target API reference.\n This product offer example uses the Checkout::Dynamic::Render[OrderSummary4] target for the following reasons:\n The target keeps the line items, discounts, and money lines together, which makes it easy for customers to scan their order summary.\n A product offer is considered secondary content, and should therefore be placed outside of the order summary.\n Note\n On mobile, the order summary area is collapsed by default. The UI won't display the product offer until the customer expands the order summary.\n Components\n The components to create a product offer depends on the extension's possible states.\n The product offer use case can have the following states:\n Loading\n Loaded (default)\n Adding\n Added\n Note\n Added doesn't need a success banner. The addition of the item to the order summary is confirmation that the item was successfully added to the order.\n You can use the following components to create the states:\n Components list for the product offer use case\n Component Preview Tips\n Divider Because the product offer will likely display in a core checkout feature such as contact information or order summary line items, include divider lines to help separate the product offer from the order summary.\n SkeletonText To keep placement from shifting when the content loads, try to reflect the actual content\u2019s dimensions.\n SkeletonImage\n Image Keep the thumbnail size the same as the thumbnail in the order summary to keep the layout consistent.\n Heading If possible, allow merchants to customize the heading content.\n Text\n Text\n Button Use secondary buttons here, reserving the primary button for the main call to actions like Pay now and Next step.\n Banner Use banners to communicate error states.\n Layout\n When you use a nested layout, you'll need only the following structural components:\n Components list for the product offer use case\n Component Preview Tips\n BlockStack You can nest BlockStack components either with themselves or with other components.\n InlineLayout You can nest Inline components with themselves or with other components.\n BlockStack\n Use the BlockStack component to stack elements on top of each other vertically.\n Nesting BlockStack\n Note\n BlockStack and BlockLayout components are similar to each other. BlockLayout enables you to specify different row sizes. With BlockStack, you don't need to do that.\n Set spacing between the divider and the content to loose, for consistency with the rest of checkout\u2019s spacing. Set the spacing between the heading and the line item content to base.\n To address different spacing values, you can nest a BlockStack inside of another BlockStack component.\n InlineLayout\n To display products horizontally, use InlineLayout, and set the spacing between elements to base.\n UX guidelines\n Adhere to the following guidelines when you're designing a product offer checkout UI extension, so that you can help merchants gain customer trust and provide a great checkout experience:\n Only show two product offers at a time\n Adding more than two offers can overwhelm customers, making it difficult for them to choose a product.\n Let merchants personalize product offers\n Customers are more likely to respond positively to offers that relate to their shopping journey or to the items in their cart.\n Only show necessary information\n Make it easy for customers to process offer information by only showing what's most relevant. For example, if supporting information like a product description is required, then progressively reveal it to customers at strategic moments.\n Next steps\n Learn how to offer customers additional products at checkout that they can add to their order.\n Explore UX guidelines for the entire checkout experience.\n For general best practices for developing apps, refer to Best practices for building Shopify apps.\n For practical guidance on how to design a user interface for the Shopify admin, refer to Shopify's App Design Guidelines.\n Get familiar with Polaris accessibility and content guidelines.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Placement\n Components\n Layout\n UX guidelines",
                    "filename": "docs/apps/checkout/product-offers/pre-purchase/ux-guidelines/content.txt",
                    "start_index": 0,
                    "end_index": 4860,
                    "start_line": 1,
                    "end_line": 80,
                    "max_line": 80,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "TextField\n Thumbnail\n Modal\n Modals are overlays that prevent merchants from interacting with the rest of the application until a specific action is taken.\n Modals are disruptive by design, requiring merchants to take an action before they can continue, so use them thoughtfully and sparingly.\n JavaScript\n React\n 1 import {extend, Modal} from '@shopify/admin-ui-extensions';\n 2\n 3 extend('Playground', (root) => {\n 4\n    const modal = root.createComponent(Modal, {\n 5\n      title: 'The best modal',\n 6\n      onClose: () => console.log('modal closed!'),\n 7\n      open: true,\n 8\n    });\n 9\n 10\n    modal.appendChild('This is the content of the modal.');\n 11\n    root.appendChild(modal);\n 12\n 13\n    root.mount();\n 14 });\n Props\n optional = ?\n Name Type Description\n open boolean Whether the modal is open.\n title string Title content for the modal, when rendered.\n primaryAction? DestructableAction Modal's primary action, ie 'Save' or 'Accept'.\n secondaryActions? DestructableAction[] Modal's secondary action(s), ie 'Cancel'.\n onClose () => void Callback when the modal is closed.\n DestructableAction\n Name Type Description\n content string Action label text.\n onAction? () => void Callback for the action.\n destructive? boolean Indicates a dangerous or potentially negative action.\n Guidelines\n \u2705 Do \ud83d\uded1 Don't\n Use modals thoughtfully and sparingly Avoid overly complex or multi-step content\n Use modals with a small and simple set of actions to complete\n For more guidelines, refer to Polaris' Modal best practices.\n Was this section helpful?\n YesNo\n ON THIS PAGE",
                    "filename": "docs/api/product-subscription-extensions/components/modal/content.txt",
                    "start_index": 0,
                    "end_index": 1563,
                    "start_line": 1,
                    "end_line": 50,
                    "max_line": 50,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Deployment\n Distribution\n Billing\n App Store\n UX guidelines for discounts\n A great buyer-facing user experience (UX) for discounts is important to the success of app users. This guide explains important considerations for implementing discounts in user interfaces (UIs).\n User interface guidelines\n Apps should consider how discounted products appear in multiple places on the online store, such as product pages, collection pages, search results, featured product sections on the home page, and quick view modals on product cards. Surfacing potential savings in these areas can further encourage customers to purchase.\n Discounts information is displayed in the following components of the online store:\n Product forms\n Cart items\n Order details\n When building your discount types, first decide if your discount will apply to specific products in an order, to the order as a whole, or to the shipping for the order. If your discount could belong to multiple categories, then you should create separate discount types for each.\n Note\n The class of the discount type that you create is set as a static value in a .toml file when your discount script is uploaded. The class can\u2019t be changed later.\n Whether a discount is a product, order, or shipping discount determines what options users have for allowing it to combine with other discounts at checkout.\n Navigation\n The discount details page has a breadcrumb button (the arrow \u2190 next to the page title). The breadcrumb button must always go back to the page that the user came from. For example, when the details page is reached using the Discounts page of the Shopify admin, the breadcrumb button must return the user to the Discounts page.\n If you choose to link to your discount details page from somewhere else, such as a page in your app, then the breadcrumb button should return the user to that page.\n Discount page\n Use the provided template and React component library to build the details page (create/edit page) for your discount type.\n The discount details page has a number of standard cards:\n Method\n Minimum purchase requirements\n Customer eligibility\n Maximum uses\n Combinations\n Active dates\n Best practices\n Implement everything in the provided template, only removing elements when they don\u2019t make logical sense for your discount type. For example, it doesn\u2019t make sense for a Buy X Get Y discount to have the minimum purchase requirements card, because \u201cbuy x\u201d already defines the minimums. You still need to submit data for any required fields in the Shopify API, so submit a value that makes sense for your discount.\n The card immediately below the Method card typically contains the fields that will differ between discount types. Often this card\u2019s title is Value, which refers to the discount amount that the customer will get. You can also choose a title that makes sense for your discount type.\n As described in Shopify functions, store any custom data used by your discount type using metafields.\n Always provide validations for your discount type\u2019s custom fields that are stored as metafields. If users enter invalid data, then they\u2019ll get helpful feedback.\n Error validation\n You'll get errors back from bad data passed to API calls, but validating the data client-side before firing off a network request makes for a faster UI experience.\n If you choose to validate on the client, then take extra care with free-form entry, such as text fields. Run your validation check only after focus moves away from the field and there's at least one character in the field. This helps avoid marking the field with an error before users have committed a value.\n You might choose not to validate client-side in some cases, such as when validation on a given field takes longer than 1000 ms and validation performance can\u2019t be improved.\n If you get any validation errors, then display them on the specific fields that contain the invalid data, including a message explaining what went wrong and how to fix it. Polaris form components have an error property that you can use for this purpose.\n If there are multiple invalid fields, then provide an error banner at the top of the page, and focus the banner on submit. The banner should include a list of the fields with problems. Link each item in the banner to the corresponding field on the page, enabling the user to jump to that field.\n If there is only a single field with an error, then move focus to that field instead.\n Learn more about form validation.\n Responsive layouts\n Make any custom layout responsive, whether it\u2019s the fields in the Value card, or any other custom UI.\n Ensure that the layout is fluid down to 320 px wide.\n Ensure that key functionality remains available on a touchscreen device. Avoid conveying essential information using tooltips or hover states.\n Avoid truncating text whenever possible.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n User interface guidelines\n Navigation\n Discount page\n Error validation\n Responsive layouts\n Updates & News",
                    "filename": "docs/apps/selling-strategies/discounts/experience/ux-guidelines/content.txt",
                    "start_index": 0,
                    "end_index": 4995,
                    "start_line": 1,
                    "end_line": 55,
                    "max_line": 55,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                }
            ]
        },
        "mmr_code_snippets_initial": [
            {
                "code": "import { default as ReactGlobal } from 'react';\nimport {\n    NoteRemoveChange,\n    NoteUpdateChange,\n} from '@shopify/ui-extensions/build/ts/surfaces/checkout/api/checkout/checkout';\nimport {\n    NoteWidgetConfig,\n    Note as NoteTypeV1,\n} from '../../../web/server/src/modules/checkout-widgets/checkout-widgets.model';\nimport { NotesContentType, NoteType as NoteTypeV2 } from '../../../web/server/src/modules/checkout-v2/checkout-v2.dtos';\nimport { parseTextToString } from '../utils/parseDifferentVersions';\nimport { CheckoutWidgetProps } from '../types';\n\ntype RenderNoteType = NoteWidgetConfig['notes'][0] & {\n    name: string;\n    isSelected: boolean;\n    textBoxValue: string;\n    fromInitialCart: false;\n};\n\nconst stringifyNote = (notes: [string, string][]): string => {\n    return notes.map(([key, value]) => (value ? `${key} : ${value}` : key)).join(' \\n ');\n};\n\nconst parseNote = (notes: string, keys: string[]): { [key: string]: string } => {\n    if (!notes) return {};\n\n    const noteArray = notes.split(' \\n ');\n    const noteEntries = noteArray.map((note) => {\n        const [key, value] = note.split(' : ');\n        return keys.includes(key || '') ? [key, value || ''] : [note, ''];\n    });\n\n    return Object.fromEntries(noteEntries);\n};\n\ntype NoteWidgetType = NoteWidgetConfig | NotesContentType;\ntype NoteType = NoteTypeV1 | NoteTypeV2;\n\ntype CurrentNote = {\n    fromInitialCart: boolean;\n    name: string;\n    textBoxValue: string;\n    isSelected: boolean;\n} & Partial<NoteType>;\n\nexport const NoteWidget: ReactGlobal.FC<CheckoutWidgetProps<NoteWidgetType>> = ({ globals }) => {\n    const {\n        React,\n        components: { BlockStack, Checkbox, TextField },\n        hooks: { useNote, useApplyNoteChange },\n        widget: { notes: notesFromDb = [] },\n    } = globals;\n\n    const checkedNotesFromDb = React.useMemo(\n        () =>\n            (notesFromDb as NoteType[])\n                .filter((note) => Boolean(note.checked))\n                .map(({ text, ...note }) => ({ ...note, text: parseTextToString(text) })),\n        [notesFromDb]\n    );\n    const checkedNotesText = React.useMemo(() => checkedNotesFromDb.map(({ text }) => text), [checkedNotesFromDb]);\n\n    const [loading, setLoading] = React.useState(false);\n    const [error, setError] = React.useState('');\n\n    const notesFromCart = useNote() || '';\n    const applyNoteChange = useApplyNoteChange();\n\n    const parsedNotesFromCart = React.useMemo(() => {\n        let preparedParsedNotes: { [name: string]: string } = parseNote(notesFromCart, checkedNotesText);\n\n        return preparedParsedNotes;\n    }, [notesFromCart, checkedNotesText]);",
                "filename": "extensions-web-common/checkout/widgets/note.tsx",
                "start_index": 0,
                "end_index": 2628,
                "start_line": 1,
                "end_line": 74,
                "max_line": 191,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "[\n                {\n                    appId: 'addTextWidget',\n                    uuId: uuidv4(),\n                    active: true,\n                    sortOrder: 0,\n                    config: {\n                        heading: {\n                            value: '<p style=\"text-align:center;\"><a href=\"undefined\" class=\"wysiwyg-mention\" data-mention data-value=\"first-name}\"><span style=\"font-size: 24px;\"><strong>{first-name}</strong></span></a><span style=\"font-size: 24px;\"><strong>, last chance!</strong></span></p>',\n                        },\n                        text: {\n                            value: '',\n                        },\n                        topPadding: 4,\n                        bottomPadding: 0,\n                    },\n                },\n                {\n                    appId: 'timer',\n                    uuId: uuidv4(),\n                    active: true,\n                    sortOrder: 1,\n                    config: {\n                        minutes: '5',\n                        heading: `<p style=\"text-align:center;\"><span style=\"color: var(--x-pp-default-color-text,inherit);background-color: var(--x-pp-color-surface-secondary);font-size: 18px;font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'\", sans-serif;\">Offer expires in:</span><span style=\"font-size: 18px;\"> </span><a href=\"undefined\" class=\"wysiwyg-mention\" data-mention data-value=\"timer}\"><span style=\"font-size: 18px;\"><strong>{timer}</strong></span></a><span style=\"font-size: 18px;\"><strong> </strong></span></p>`,\n                        text: '',\n                        textColor: 'Black',\n                        backgroundColor: 'Red',\n                        topPadding: 4,\n                        bottomPadding: 0,\n                    },\n                },",
                "filename": "web/client/src/pages/funnels/utils/upsellMachinePresets.ts",
                "start_index": 41395,
                "end_index": 43277,
                "start_line": 29,
                "end_line": 965,
                "max_line": 970,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "=\"Show style settings\">\n                    <VerticalStack gap=\"2\">\n                        <Checkbox\n                            label=\"Show border around upsells\"\n                            checked={content.value.bordered}\n                            onChange={(val) => {\n                                content.onChange({\n                                    ...content.value,\n                                    bordered: val,\n                                });\n                            }}\n                        />\n                        <Checkbox\n                            label=\"Use outlined button\"\n                            checked={content.value.buttonStyle === 'secondary'}\n                            onChange={(val) => {\n                                content.onChange({\n                                    ...content.value,\n                                    buttonStyle: val ? 'secondary' : 'primary',\n                                });\n                            }}\n                        />\n\n                        {content.value.upsellType === 'single' && (\n                            <Checkbox\n                                label={'Use full width button?'}\n                                checked={content.value.fullWidthButton}\n                                onChange={(val) => {\n                                    content.onChange({\n                                        ...content.value,\n                                        fullWidthButton: val,\n                                    });\n                                }}\n                            />\n                        )}\n                        {content.value.upsellType === 'multi' && (\n                            <Select\n                                label=\"Layout Direction\"\n                                options={[\n                                    { label: 'Horizontal (Scrollable)', value: 'horizontal' },\n                                    { label: 'Vertical', value: 'vertical' },\n                                ]}\n                                value={content.value.direction}\n                                onChange={(val: 'horizontal' | 'vertical') => {\n                                    content.onChange({\n                                        ...content.value,\n                                        direction: val,\n                                    });\n                                }}\n                            />\n                        )}\n                    </VerticalStack>\n                </ShowAdvanced>\n            </VerticalStack>\n\n            <Modal\n                title=\"Edit Upsell Product\"\n                open={editingItem !== null}\n                onClose={() => setEditingItem(null)}\n                primaryAction={{\n                    content: 'Confirm',\n                    onAction: ()",
                "filename": "web/client/src/pages/checkout/checkout-editor-v2/components/upsell-content-editor.tsx",
                "start_index": 22668,
                "end_index": 25517,
                "start_line": 517,
                "end_line": 586,
                "max_line": 742,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{list.addItem}>Add note</Button>\n                                </HorizontalStack>\n                            </HorizontalStack>\n                        </Box>\n                        <Divider />\n                        <ResourceList\n                            alternateTool={<></>}\n                            resourceName={{ singular: 'note', plural: 'notes' }}\n                            items={list.fields}\n                            showHeader={false}\n                            renderItem={(item, id, index) => {\n                                const isActive = item.checked.value;\n                                return (\n                                    <ResourceItem id={id} onClick={() => setEditingItem(index)}>\n                                        <HorizontalStack align=\"space-between\" blockAlign=\"center\">\n                                            <HorizontalStack gap=\"2\">\n                                                <VerticalStack gap=\"0\">\n                                                    <Text as=\"span\" fontWeight=\"bold\">\n                                                        {/*todo: validation?*/}\n                                                        {/*<InlineError*/}\n                                                        {/*  message={'Active notes length should be less than 5000 symbols because of Shopify limitations!'}*/}\n                                                        {/*  fieldID={''}*/}\n                                                        {/*/>*/}\n                                                        {item.text.value.text}\n                                                    </Text>\n                                                </VerticalStack>\n                                                <Badge status={isActive ? 'success' : 'attention'}>\n                                                    {isActive ? 'active' : 'inactive'}\n                                                </Badge>\n                                            </HorizontalStack>\n                                            <HorizontalStack gap=\"2\">\n                                                <Tooltip content=\"Edit note\">\n                                                    <div onClick={(e) => e.stopPropagation()}>\n                                                        <Button\n                                                            icon={EditMajor as IconSource}\n                                                            onClick={() => setEditingItem(index)}\n                                                        />\n                                                    </div>\n                                                </Tooltip>\n                                                <Tooltip content=",
                "filename": "web/client/src/pages/checkout/checkout-editor-v2/components/notes-content-editor.tsx",
                "start_index": 2974,
                "end_index": 5742,
                "start_line": 79,
                "end_line": 118,
                "max_line": 219,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<VerticalStack align=\"space-between\">\n            <WidgetHeading {...title}>Edit text widget</WidgetHeading>\n            <Box paddingInlineStart=\"3\" paddingInlineEnd=\"3\" paddingBlockEnd=\"4\" paddingBlockStart=\"2\">\n                <VerticalStack gap=\"3\">\n                    <Text variant=\"bodyMd\" as=\"p\">\n                        Heading\n                    </Text>\n                    <RichTextEditor\n                        isMultiProduct={isMultiProduct}\n                        editorState={fields.heading.value}\n                        offerVersion={offerVersion}\n                        onChange={getHandleChangeRichTextEditor('heading')}\n                        isPostPurchase\n                    />\n                    <Text variant=\"bodyMd\" as=\"p\">\n                        Body text\n                    </Text>\n                    <RichTextEditor\n                        isMultiProduct={isMultiProduct}\n                        editorState={fields.text.value}\n                        offerVersion={offerVersion}\n                        onChange={getHandleChangeRichTextEditor('text')}\n                        isPostPurchase\n                    />\n                    {offerVersion === 'v2' && (\n                        <>\n                            <RangeSlider\n                                onChange={(val: number) => {\n                                    onChangeConfig({ topPadding: val });\n                                }}\n                                output\n                                step={2}\n                                value={config.topPadding ?? 0}\n                                label=\"Top padding\"\n                                min={0}\n                                max={10}\n                                prefix={<p>0</p>}\n                                suffix={<p>10</p>}\n                            />\n                            <RangeSlider\n                                onChange={(val: number) => {\n                                    onChangeConfig({ bottomPadding: val });\n                                }}\n                                output\n                                step={2}\n                                value={config.bottomPadding ?? 0}\n                                label=\"Bottom padding\"\n                                min={0}\n                                max={10}\n                                prefix={<p>0</p>}\n                                suffix={<p>10</p>}\n                            />\n                        </>\n                    )}\n                </VerticalStack>\n            </Box>\n            <Box paddingInlineStart=\"3\" paddingInlineEnd=\"3\" paddingBlockEnd=\"4\" paddingBlockStart=\"2\">\n                <Button\n                    size=\"large\"\n                    fullWidth\n                    outline\n                    destructive\n                    icon={DeleteMinor as IconSource}\n                    onClick={title.onDelete}\n                >\n                    Delete Widget\n                <",
                "filename": "web/client/src/pages/funnels/components/text-widget-settings.tsx",
                "start_index": 1991,
                "end_index": 4985,
                "start_line": 55,
                "end_line": 121,
                "max_line": 125,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<Banner\n                                            status=\"warning\"\n                                            title={'\ud83d\ude80 Faster, Smoother, & Better Checkout Editor'}\n                                            action={{\n                                                content: 'Update Now',\n                                                loading: updateVersionLoading,\n                                                onAction: () => {\n                                                    updateCheckoutVersion('V2');\n                                                },\n                                            }}\n                                        >\n                                            <Text variant=\"bodyLg\" as=\"p\">\n                                                Explore our upgraded checkout editor. Discover new triggers, AI upsells,\n                                                multiple widget configurations, split testing and other customization\n                                                features. Upgrading is fully reversible and will automatically transfer\n                                                your current setup.\n                                            </Text>\n                                        </Banner>\n                                    )}\n                                    {currentSplitTestTab === 'A' || !currentSplitTestTab\n                                        ? widgetsVersionA\n                                        : widgetsVersionB}\n                                </VerticalStack>\n                            )}\n                        </div>\n                        <div className={styles.preview}>\n                            <div>\n                                <Preview widget={selectedWidgetData} widgetType={previewSelection?.type} />\n                                {selectedTab === 'rewardsWidget' && (\n                                    <div style={{ marginTop: '20px' }}>\n                                        <Banner title=\"\" status=\"info\">\n                                            The rewards bar widget is intended to be used with one or more upsell\n                                            widgets. If a customer sees that they're $10 away from free shipping, they\n                                            might want to accept one of your upsell products to get there!\n                                        </Banner>\n                                        <Banner\n                                            title=\"Create discount\"\n                                            action={{\n                                                content: 'Create discount',",
                "filename": "web/client/src/pages/checkout/checkout-editor/checkout-editor.tsx",
                "start_index": 10154,
                "end_index": 12821,
                "start_line": 236,
                "end_line": 274,
                "max_line": 306,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "@modelOptions({ schemaOptions: { _id: false } })\nexport class Note {\n    @prop({ required: true })\n    id!: number;\n\n    @prop({ required: true })\n    checked!: boolean;\n\n    @prop({ required: true })\n    text!: string;\n\n    @prop({ required: true, default: false })\n    showTextBox!: boolean;\n\n    @prop({ required: true, default: '' })\n    textBoxPlaceholder!: string;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nexport class NoteWidgetConfig {\n    @prop({ required: true, type: Note })\n    notes!: Note[];\n\n    @prop({ required: false })\n    triggers?: CheckoutTriggers;\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~models~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@modelOptions({ schemaOptions: { versionKey: false, discriminatorKey: 'type' } })\nexport class CheckoutWidgets {\n    _id!: string; // For TS, not for Mongo. This is stored as an ObjectID in Mongo.\n\n    @prop({ required: true })\n    type!: string;\n\n    @prop({ required: true })\n    shop!: string;\n\n    @prop({ required: true, default: false })\n    status!: boolean;\n\n    /** legacy field. Didn't used nowhere */\n    @prop({ required: false })\n    hasSplitTest?: boolean;\n\n    @prop({ required: true, default: new Date() })\n    createdAt!: Date;\n\n    @prop({ required: false, enum: SplitTestEnum, default: null, addNullToEnum: true })\n    splitTestVersion?: SplitTestEnum;\n\n    config!: { [key: string]: any };\n}\n\nexport class UpsellCheckoutWidget extends CheckoutWidgets {\n    @prop({ required: true })\n    declare config: UpsellWidgetConfig;\n}\n\nexport type IUpsellCheckoutWidget = InstanceType<typeof UpsellCheckoutWidget>;\n\nexport class UpsellCheckoutWidgetOne extends UpsellCheckoutWidget {\n    declare type: CHECKOUT_WIDGETS_TYPES.UPSELL_WIDGET_ONE;\n}\n\nexport class UpsellCheckoutWidgetTwo extends UpsellCheckoutWidget {\n    declare type: CHECKOUT_WIDGETS_TYPES.UPSELL_WIDGET_TWO;\n}\n\nexport class UpsellCheckoutWidgetThree extends UpsellCheckoutWidget {\n    declare type: CHECKOUT_WIDGETS_TYPES.UPSELL_WIDGET_THREE;\n}\n\nexport class TrustBadgeCheckoutWidget extends CheckoutWidgets {\n    declare type: CHECKOUT_WIDGETS_TYPES.TRUST_BADGES_WIDGET;\n\n    @prop({ required: true })\n    declare config: TrustBadgeWidgetConfig;\n}\n\nexport class TimerCheckoutWidget extends CheckoutWidgets {\n    declare type: CHECKOUT_WIDGETS_TYPES.TIMER_WIDGET;\n\n    @prop({ required: true })\n    declare config: TimerWidgetConfig;\n}\n\nexport class RewardsCheckoutWidget extends CheckoutWidgets {\n    declare type: CHECKOUT_WIDGETS_TYPES.REWARDS_WIDGET;\n\n    @prop({ required: true })\n    declare config: RewardsWidgetConfig;\n}\n\nexport class TestimonialsCheckoutWidget extends CheckoutWidgets {\n    declare type: CHECKOUT_WIDGETS_TYPES.TESTIMONIALS_WIDGET;\n\n    @prop({ required: true })\n    declare config: TestimonialWidgetConfig;\n}\n\nexport class FAQCheckoutWidget extends CheckoutWidgets {\n    declare type: CHECKOUT_WIDGETS_TYPES.FAQ_WIDGET;\n\n    // @prop({ required: true })\n    // config!: null;\n}",
                "filename": "web/server/src/modules/checkout-widgets/checkout-widgets.model.ts",
                "start_index": 8689,
                "end_index": 11617,
                "start_line": 73,
                "end_line": 498,
                "max_line": 565,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { asChoiceField, Field, useDynamicList } from '@shopify/react-form';\nimport {\n    Badge,\n    Box,\n    Button,\n    Card,\n    Checkbox,\n    Divider,\n    HorizontalStack,\n    IconSource,\n    Modal,\n    ResourceItem,\n    ResourceList,\n    Text,\n    TextField,\n    Tooltip,\n    VerticalStack,\n} from '@shopify/polaris';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { DynamicList } from '@shopify/react-form/build/ts/hooks/list/dynamiclist';\nimport { NotesContentType, NoteType } from '../../../../../../server/src/modules/checkout-v2/checkout-v2.dtos';\nimport { usePrevious } from 'src/hooks/usePrevious';\nimport { EmptyStateDashedWithButton } from './empty-state-dashed-with-button';\nimport { LineItemWrapper, LineItemWrapperProps, PriorityModal } from './priority-modal';\nimport { DeleteMajor, EditMajor } from '@shopify/polaris-icons';\nimport styles from './styles.module.scss';\n\nexport const NotesContentEditor = ({ content }: { content: Field<NotesContentType> }) => {\n    const [editingItem, setEditingItem] = useState<null | number>(null);\n    const [priorityModal, setPriorityModal] = useState(false);\n\n    const contentValue = useMemo(() => content.value.notes, [content.value.notes]);\n    const list = useDynamicList(contentValue, () => ({\n        id: uuidv4(),\n        checked: false,\n        text: { text: 'Planning to gift this? Let us know!' },\n        showTextBox: false,\n        textBoxPlaceholder: 'Write your note here!',\n    }));\n    const previousList = usePrevious<DynamicList<NoteType>['value']>(list.value);\n\n    const handleListItemChange = () => {\n        content.onChange({\n            ...content.value,\n            notes: list.value,\n        });\n    };\n\n    const onSave = () => {\n        handleListItemChange();\n    };\n\n    useEffect(() => {\n        if (!previousList) return; //initial render\n        if (list.value.length === previousList?.length) {\n            const changedPriority = previousList.some((value, index) => value.id !== list.value?.[index]?.id);\n            if (changedPriority) {\n                return;\n            }\n        }\n        handleListItemChange();\n    }, [list.value]);\n\n    return (\n        <>\n            <VerticalStack gap=\"3\">\n                {list.value.length === 0 ? (\n                    <EmptyStateDashedWithButton buttonText=\"Add note\" onClick={() => list.addItem()} />\n                ) : (\n                    <Card padding=\"0\">\n                        <Box padding=\"4\" background=\"bg-subdued\">\n                            <HorizontalStack align=\"space-between\" blockAlign=\"center\">\n                                <Text as=\"h4\" variant=\"headingMd\">\n                                    Notes\n                                </Text>\n                                <HorizontalStack gap=\"2\">\n                                    <Button onClick={() => setPriorityModal(true)}>Reorder</Button>\n                                    <Button onClick=",
                "filename": "web/client/src/pages/checkout/checkout-editor-v2/components/notes-content-editor.tsx",
                "start_index": 0,
                "end_index": 2974,
                "start_line": 1,
                "end_line": 79,
                "max_line": 219,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<Layout>\n                            <Layout.Section fullWidth>\n                                <AdditionalScopesBanner\n                                    requiredAdditionalScopes={['write_checkout_branding_settings']}\n                                />\n                            </Layout.Section>\n                            <StickyLayoutSection oneThird>\n                                <Card padding=\"1\">\n                                    <VerticalStack>\n                                        <Box\n                                            paddingInlineStart=\"4\"\n                                            paddingInlineEnd=\"4\"\n                                            paddingBlockStart=\"3\"\n                                            paddingBlockEnd=\"3\"\n                                        >\n                                            <VerticalStack gap=\"2\" align=\"start\" inlineAlign=\"start\">\n                                                <HorizontalStack blockAlign=\"center\" align=\"space-between\">\n                                                    <Text variant=\"headingMd\" as=\"h6\">\n                                                        Edit branding\n                                                    </Text>\n                                                </HorizontalStack>\n                                                <HorizontalStack gap=\"2\" blockAlign=\"center\">\n                                                    {currentCheckoutProfile?.isPublished ? (\n                                                        <Badge status=\"success\" progress=\"complete\" size=\"small\">\n                                                            Live\n                                                        </Badge>\n                                                    ) : (\n                                                        <Badge status=\"info\" progress=\"complete\" size=\"small\">\n                                                            Draft\n                                                        </Badge>\n                                                    )}\n                                                    <ButtonSelect\n                                                        plain\n                                                        value={currentCheckoutProfile?.id}\n                                                        onChange={(value) => {\n                                                            setCurrentCheckoutProfile(\n                                                                checkoutProfiles.find(\n                                                                    (profile) => profile?.id === value\n                                                                )\n                                                            );\n                                                        }",
                "filename": "web/client/src/pages/checkout/checkout-branding.page.tsx",
                "start_index": 6634,
                "end_index": 9487,
                "start_line": 176,
                "end_line": 299,
                "max_line": 320,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "if (isTextImageWidget(template)) {\n                    const config = template.config;\n                    const heading = config.heading;\n                    config.heading = {\n                        config: {\n                            fontSize: heading?.config?.fontSize ?? UPSELL_TEXT_SIZES[4].value,\n                            appearance: heading?.config?.appearance ?? COLOR_OPTIONS[0].value,\n                        },\n                        value: heading?.value ?? '',\n                    };\n\n                    const text = config.text;\n                    config.text = {\n                        config: {\n                            fontSize: text?.config?.fontSize ?? UPSELL_TEXT_SIZES[2].value,\n                            appearance: text?.config?.appearance ?? COLOR_OPTIONS[0].value,\n                        },\n                        value: text?.value ?? '',\n                    };\n\n                    config.position = config.position || ('left' as Alignment);\n                    config.verticalAlignment = config.verticalAlignment || ('leading' as VerticalAlignment);\n                    config.imageSize = setDefaultNumberValue(config.imageSize, 350);\n                    config.topPadding = setDefaultNumberValue(config.topPadding, 2);\n                    config.bottomPadding = setDefaultNumberValue(config.bottomPadding, 2);\n                }\n\n                if (isTimerWidget(template)) {\n                    const config = template.config;\n                    config.topPadding = setDefaultNumberValue(config.topPadding, 2);\n                    config.bottomPadding = setDefaultNumberValue(config.bottomPadding, 2);\n                    config.minutes = config.minutes ?? 10;\n                    config.heading =\n                        config.heading ??\n                        `<p style=\"text-align:center;\"><span style=\"color: var(--x-pp-default-color-text,inherit);background-color: var(--x-pp-color-surface-secondary);font-size: 18px;font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'\", sans-serif;\">Your order is confirmed but you can still add the following for a limited time</span><span style=\"font-size: 18px;\"> </span><a href=\"undefined\" class=\"wysiwyg-mention\" data-mention data-value=\"timer}\"><span style=\"font-size: 18px;\"><strong>{timer}</strong></span></a><span style=\"font-size: 18px;\"><strong> </strong></span></p>`;\n                    config.text = config.text ?? '';\n                    config.textColor = config.textColor ?? UPSELL_COLOR_NAMES.BLACK;\n                    config.backgroundColor = config.backgroundColor ?? UPSELL_COLOR_NAMES.RED;\n                    config.hideBanner = config.hideBanner ?? false;\n                }\n\n                return template;\n            }",
                "filename": "web/client/src/pages/funnels/hooks/useFilledWithDefaultValuesTemplates.ts",
                "start_index": 12701,
                "end_index": 15540,
                "start_line": 225,
                "end_line": 267,
                "max_line": 270,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "reranked_doc_snippets_initial": [
            {
                "code": "<div class=\"hidden\">\n                            <span class=\"visually-hidden\" id=\"forwarding-external-new-window-message\">\n                                Opens external website in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-new-window-message\">\n                                Opens in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-external-message\">\n                                Opens external website.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"checkout-context-step-one\">\n                                Customer information - Checkout\n                            </span>\n                        </div>\n                    </main>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 322226,
                "end_index": 323078,
                "start_line": 6265,
                "end_line": 6282,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<span class=\"order-summary-toggle__inner\">\n                        <span class=\"order-summary-toggle__icon-wrapper\">\n                            <svg\n                                width=\"20\"\n                                height=\"19\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__icon\"\n                            >\n                                <path\n                                    d=\"M17.178 13.088H5.453c-.454 0-.91-.364-.91-.818L3.727 1.818H0V0h4.544c.455 0 .91.364.91.818l.09 1.272h13.45c.274 0 .547.09.73.364.18.182.27.454.18.727l-1.817 9.18c-.09.455-.455.728-.91.728zM6.27 11.27h10.09l1.454-7.362H5.634l.637 7.362zm.092 7.715c1.004 0 1.818-.813 1.818-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817zm9.18 0c1.004 0 1.817-.813 1.817-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--show\">\n                            <span>Show order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"6\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M.504 1.813l4.358 3.845.496.438.496-.438 4.642-4.096L9.504.438 4.862 4.534h.992L1.496.69.504 1.812z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--hide\">\n                            <span>Hide order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"7\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M6.138.876L5.642.438l-.496.438L.504 4.972l.992 1.124L6.138 2l-.496.436 3.862 3.408.992-1.122L6.138.876z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span\n                            class=\"order-summary-toggle__total-recap total-recap\"\n                            data-order-summary-section=\"toggle-total-recap\"\n                        >\n                            <span class=\"total-recap__final-price\" data-checkout-payment-due-target=\"5073\">$50.73</span>\n                        </span>\n                    </span>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 242214,
                "end_index": 245205,
                "start_line": 6097,
                "end_line": 6446,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"step__sections\">\n                                <div class=\"section\">\n                                    <div class=\"section__header os-header\">\n                                        <svg\n                                            width=\"56\"\n                                            height=\"56\"\n                                            viewBox=\"0 0 56 56\"\n                                            fill=\"none\"\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                            <circle cx=\"28\" cy=\"28\" r=\"26\" stroke=\"#E5E5E5\" stroke-width=\"2.29412\" />\n                                            <path\n                                                fill-rule=\"evenodd\"\n                                                clip-rule=\"evenodd\"\n                                                d=\"M22.4811 37.3603L16.3636 31.3947C15.5663 30.6172 15.5663 29.3605 16.3636 28.583C17.1609 27.8055 18.4497 27.8055 19.247 28.583L23.8066 33.0293L36.6493 18.7538C37.3834 17.9186 38.6701 17.8231 39.5225 18.537C40.379 19.2529 40.4789 20.5056 39.7448 21.3388L25.4706 37.2469C25.1015 37.6685 24.5672 37.9191 24.0003 37.9409C23.3825 37.9429 22.8625 37.7341 22.4811 37.3603Z\"\n                                                fill=\"#008060\"\n                                                stroke=\"#E5E5E5\"\n                                                stroke-width=\"0.764706\"\n                                            />\n                                        </svg>\n                                        <div class=\"os-header__heading\">\n                                            <span class=\"os-order-number\"> Order #1001 </span>\n                                            <h2 class=\"os-header__title\" id=\"main-header\" tabindex=\"-1\">\n                                                Thank you {{Customer Name}}!\n                                            </h2>\n                                        </div>\n                                    </div>\n                                </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245858,
                "end_index": 247957,
                "start_line": 6161,
                "end_line": 6451,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"section__content\">\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Contact information</h3>\n\n                                                            <p class=\"as-dummy-line\"></p>\n\n                                                            <h3 class=\"heading-3\">Shipping address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n\n                                                            <h3 class=\"heading-3\">Shipping method</h3>\n                                                            <p class=\"as-dummy-line as-w40\"></p>\n                                                        </div>\n                                                    </div>\n\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Payment method</h3>\n                                                            <ul class=\"payment-method-list\">\n                                                                <li class=\"payment-method-list__item\">\n                                                                    <p class=\"as-dummy-line as-w80\"></p>\n                                                                </li>\n                                                            </ul>\n\n                                                            <h3 class=\"heading-3\">Billing address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n                                                        </div>\n                                                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318877,
                "end_index": 321837,
                "start_line": 6191,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<html\n    lang=\"en\"\n    dir=\"ltr\"\n    class=\"js desktop page--no-banner page--logo-main page--show page--show card-fields cors svg opacity placeholder no-touchevents displaytable display-table generatedcontent cssanimations flexbox no-flexboxtweener anyflexbox shopemoji floating-labels\"\n>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 0,
                "end_index": 289,
                "start_line": 1,
                "end_line": 6518,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box\">\n                                            <div class=\"content-box__row content-box__row--no-border\">\n                                                <h2>Customer information</h2>\n                                            </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318496,
                "end_index": 318753,
                "start_line": 6192,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<aside class=\"sidebar\" role=\"complementary\">\n                    <div class=\"sidebar__header\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323196,
                "end_index": 323511,
                "start_line": 6285,
                "end_line": 6493,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box__row content-box__row--no-padding\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 248190,
                "end_index": 248249,
                "start_line": 6193,
                "end_line": 6193,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<body class=\"aftersell-preview\">\n        <a href=\"#main-header\" class=\"skip-to-content\"> Skip to content </a>\n\n        <header class=\"banner\" data-header=\"\" role=\"banner\">\n            <div class=\"wrap\">\n                <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n            </div>\n        </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241387,
                "end_index": 241804,
                "start_line": 6077,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/server` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 999,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 248120,
                "end_index": 248145,
                "start_line": 6192,
                "end_line": 6210,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box__row\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318798,
                "end_index": 318828,
                "start_line": 6214,
                "end_line": 6214,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <meta charset=\"utf-8\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n        <meta\n            id=\"thankyoupage_viewport_meta\"\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, user-scalable=0\"\n        />\n        <meta name=\"referrer\" content=\"origin\" />\n\n        <title>Thank you! - Checkout</title>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 294,
                "end_index": 717,
                "start_line": 6,
                "end_line": 16,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"main\">\n                    <header class=\"main__header\" role=\"banner\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245397,
                "end_index": 245703,
                "start_line": 6153,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box__row text-container\">\n                                                <h2 class=\"heading-2 os-step__title\" id=\"main-header\" tabindex=\"-1\">\n                                                    Your order is confirmed\n                                                </h2>\n                                                <p class=\"os-step__description\">\n                                                    You\u2019ll receive an email when your order is ready.\n                                                </p>\n                                            </div>\n                                        </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 317828,
                "end_index": 318454,
                "start_line": 6200,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<th class=\"product__description\" scope=\"row\">\n                                                        <span class=\"product__description__name order-summary__emphasis\"\n                                                            >Product Name</span\n                                                        >\n                                                        <span\n                                                            class=\"product__description__variant order-summary__small-text\"\n                                                            >Variant Name</span\n                                                        >\n                                                    </th>\n                                                    <td class=\"product__quantity visually-hidden\">1</td>\n                                                    <td class=\"product__price\">\n                                                        <span class=\"order-summary__emphasis\">$42.99</span>\n                                                    </td>\n                                                </tr>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 331038,
                "end_index": 332129,
                "start_line": 6363,
                "end_line": 6376,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<span class=\"product-thumbnail__quantity\" aria-hidden=\"true\"\n                                                                >1</span\n                                                            >\n                                                        </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 330669,
                "end_index": 330927,
                "start_line": 6358,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script>\n            !(function (f, b, e, v, n, t, s) {\n                if (f.fbq) return;\n                n = f.fbq = function () {\n                    n.callMethod ? n.callMethod.apply(n, arguments) : n.queue.push(arguments);\n                };\n                if (!f._fbq) f._fbq = n;\n                n.push = n;\n                n.loaded = !0;\n                n.version = '2.0';\n                n.queue = [];\n                t = b.createElement(e);\n                t.async = !0;\n                t.src = v;\n                s = b.getElementsByTagName(e)[0];\n                s.parentNode.insertBefore(t, s);\n            })(window, document, 'script', 'https://connect.facebook.net/en_US/fbevents.js');\n            fbq('init', '895262111044943');\n            fbq('track', 'PageView');\n        </script>\n        <!-- End Facebook Pixel Code -->\n        <!-- Reddit Pixel -->\n        <script>\n            !(function (w, d) {\n                if (!w.rdt) {\n                    var p = (w.rdt = function () {\n                        p.sendEvent ? p.sendEvent.apply(p, arguments) : p.callQueue.push(arguments);\n                    });\n                    p.callQueue = [];\n                    var t = d.createElement('script');\n                    (t.src = 'https://www.redditstatic.com/ads/pixel.js'), (t.async = !0);\n                    var s = d.getElementsByTagName('script')[0];\n                    s.parentNode.insertBefore(t, s);\n                }\n            })(window, document);\n            rdt('init', 't2_dp3wj8bg');\n            rdt('track', 'PageVisit');\n        </script>\n        <!-- End Reddit Pixel -->\n\n        <!-- Dev HMR [START] -->\n        <script type=\"module\">\n            if (!import.meta.env || !import.meta.env.PROD) {\n                // For embedded development, the iframe loads an HTML file from the server. Normally for\n                // development, the HTML file is served by the dev server, which injects the HMR script.\n                // This script adds the HMR script to the iframe to allow HMR in embedded development.\n                const script = document.createElement('script');\n                script.setAttribute('type', 'module');\n                script.setAttribute('src', './src/dev-hmr.ts');\n                document.getElementsByTagName('head')[0].append(script);\n            }\n        </script>\n        <!-- Dev HMR [END] -->\n\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com/\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" crossorigin=\"anonymous\" />\n        <link\n            href=\"https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap\"\n        />\n    </head>",
                "filename": "web/client/index.html",
                "start_index": 6232,
                "end_index": 8924,
                "start_line": 7,
                "end_line": 178,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "solution_task": {
            "structured_resp": "Clarify:\nThe task is to modify the notes widget editing interface by:\n- Removing the \"Active\" vs \"Inactive\" state concept.\n- Removing the checkbox beside \"Add a gift message?\" in the edit modal.\n- Adding a title above the text box in the edit modal: \"Checkbox title\".\n- Rewording the label from \"Define text box placeholder\" to \"Text box placeholder\".\n- Changing default values for the checkbox title and text box placeholder.\n\nHypothesize:\n- The checkbox for \"Active\" vs \"Inactive\" state needs to be removed from the UI.\n- The title needs to be added above the text box.\n- Labels and default values need to be updated in the component's code.\n\nExperiment:\n- Review the provided code snippets to locate the relevant components and fields that need to be modified.\n- Identify the parts of the code that handle the checkbox, title, labels, and default values.\n\nAnalyze:\n- The relevant code snippets for this task are likely to be found in the files related to the notes widget editing interface, such as `note-settings.tsx`, `notes-content-editor.tsx`, and `note.tsx`.\n- The `extensions-web-common/checkout/widgets/note.tsx` file may contain shared code that affects the notes widget across different parts of the application.\n\nResolve:\n1. In `note-settings.tsx` or `notes-content-editor.tsx`:\n   - Remove the Checkbox component related to the \"Active\" vs \"Inactive\" state.\n   - Add a Text component above the TextField to serve as the title.\n   - Update the TextField's placeholder prop to the new default value.\n   - Update the Checkbox's text prop to the new default value.\n\n2. In `note.tsx`:\n   - Remove the Checkbox component if it represents the \"Active\" vs \"Inactive\" state.\n   - Update the TextField's label prop from \"Define text box placeholder\" to \"Text box placeholder\".\n   - Update the default values for `textBoxPlaceholder` and the checkbox title in the state or props where they are defined.\n\n3. In `extensions-web-common/checkout/widgets/note.tsx`:\n   - If this file contains shared code that affects the notes widget, make sure to apply the same changes as above to maintain consistency across the application.\n\n4. Ensure that all changes are consistent with the project's coding standards and practices, and test the modifications to confirm that they behave as expected.",
            "response": "To enhance the user experience and streamline the notes widget editing interface, certain modifications are necessary. These changes involve simplifying the interface by removing the concept of \"Active\" vs \"Inactive\" states, updating labels, and setting new default values. The following actions should be taken to implement these improvements:\n\n- Locate and remove the checkbox component that toggles between \"Active\" and \"Inactive\" states in the relevant `.tsx` files.\n- Introduce a new title above the text box input field by adding a Text component in the editing modal.\n- Change the label associated with the text box placeholder to \"Text box placeholder\" for clarity.\n- Adjust the default values for both the checkbox title and the text box placeholder to align with the updated interface requirements.\n- Review any shared code in `extensions-web-common/checkout/widgets/note.tsx` to ensure consistency across the application.\n- After making these changes, thoroughly test the updated interface to ensure that it functions correctly and meets the desired user experience standards."
        },
        "snippet_processor_task": {
            "web/client/src/pages/checkout/checkout-editor/components/widget-list/components/note-settings/note.tsx": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "The snippet provides the React component 'Note' responsible for rendering the note settings in the UI. It includes fields for text, checkbox, and text box placeholders, which need to be modified as per the ticket requirements.",
                        "snippet": {
                            "code": "import { Button, Checkbox, Text, TextField, VerticalStack, HorizontalStack } from '@shopify/polaris';\nimport { asChoiceField, FieldDictionary } from '@shopify/react-form';\nimport React, { FC, useEffect } from 'react';\nimport type { NoteType } from './note-settings';\nimport styles from './styles.module.scss';\n\ninterface NoteSettingsProps {\n    fields: FieldDictionary<NoteType>;\n    index: number;\n    removeBadge(index: number): void;\n}\n\nexport const Note: FC<NoteSettingsProps> = ({ fields, removeBadge, index }) => {\n    const { text, checked, showTextBox, textBoxPlaceholder } = fields;\n\n    useEffect(() => {\n        text.runValidation();\n    }, []);\n\n    return (\n        <VerticalStack gap=\"2\">\n            <HorizontalStack blockAlign=\"center\" align=\"space-between\">\n                <Text variant=\"headingXs\" as=\"h3\">{`Note ${index + 1}`}</Text>\n                <Button plain destructive onClick={() => removeBadge(index)}>\n                    Remove note\n                </Button>\n            </HorizontalStack>\n            <HorizontalStack gap=\"1\" blockAlign=\"start\">\n                <Checkbox label=\"\" {...asChoiceField(checked)} />\n                <div className={styles.flexStretch}>\n                    <TextField placeholder=\"Write your note here\" label=\"\" {...text} autoComplete=\"off\" />\n                </div>\n            </HorizontalStack>\n            <VerticalStack gap=\"2\">\n                <Checkbox label=\"Show text box when selected\" {...asChoiceField(showTextBox)} />\n                {!!showTextBox.value && (\n                    <TextField label=\"Define text box placeholder\" {...textBoxPlaceholder} autoComplete=\"off\" />\n                )}\n            </VerticalStack>\n        </VerticalStack>\n    );\n};",
                            "filename": "web/client/src/pages/checkout/checkout-editor/components/widget-list/components/note-settings/note.tsx",
                            "start_index": 0,
                            "end_index": 1728,
                            "start_line": 1,
                            "end_line": 42,
                            "max_line": 42,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet includes fields for text, checkbox, and text box placeholders, which are directly related to the modifications required to remove the checkbox and update the text box placeholder as specified."
                }
            ],
            "web/client/src/pages/checkout/checkout-editor-v2/components/notes-content-editor.tsx": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Code snippet related to the notes widget editing interface in the checkout editor component, including text box placeholders and checkbox functionality.",
                        "snippet": {
                            "code": "\"Write your note here\"\n                                        label=\"\"\n                                        value={text.value.text}\n                                        onChange={(val) => text.onChange({ ...text.value, text: val })}\n                                        autoComplete=\"off\"\n                                    />\n                                </div>\n                            </HorizontalStack>\n                            <VerticalStack gap=\"2\">\n                                <Checkbox label=\"Show text box when selected\" {...asChoiceField(showTextBox)} />\n                                {!!showTextBox.value && (\n                                    <TextField\n                                        label=\"Define text box placeholder\"\n                                        {...textBoxPlaceholder}\n                                        autoComplete=\"off\"\n                                    />\n                                )}\n                            </VerticalStack>\n                        </VerticalStack>\n                    );\n                })()}\n            </Modal>\n            <PriorityModal\n                open={priorityModal}\n                onClose={() => {\n                    list.reset();\n                    setPriorityModal(false);\n                }}\n                dynamicList={list}\n                onSave={() => {\n                    onSave();\n                    setPriorityModal(false);\n                }}\n                Item={({ item, index, ...props }: LineItemWrapperProps & { item: NoteType; index: number }) => {\n                    return (\n                        <LineItemWrapper {...props}>\n                            <HorizontalStack wrap={false} gap=\"2\" blockAlign={'center'}>\n                                <Text as=\"span\">{item.text.text}</Text>\n                                <Text as=\"span\" fontWeight=\"bold\">\n                                    {index}\n                                </Text>\n                            </HorizontalStack>\n                        </LineItemWrapper>\n                    );\n                }}\n            />\n        </>\n    );\n};",
                            "filename": "web/client/src/pages/checkout/checkout-editor-v2/components/notes-content-editor.tsx",
                            "start_index": 8117,
                            "end_index": 10267,
                            "start_line": 171,
                            "end_line": 219,
                            "max_line": 219,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "It is related to the notes widget editing interface, including text box placeholders and checkbox functionality, which are elements that need to be updated according to the modifications requested."
                },
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Code snippet showing UI components for editing notes in a modal dialog, including buttons, icons, and text fields.",
                        "snippet": {
                            "code": "\"Delete note\">\n                                                    <div onClick={(e) => e.stopPropagation()}>\n                                                        <Button\n                                                            icon={DeleteMajor as IconSource}\n                                                            destructive\n                                                            outline\n                                                            onClick={() => list.removeItem(index)}\n                                                        />\n                                                    </div>\n                                                </Tooltip>\n                                            </HorizontalStack>\n                                        </HorizontalStack>\n                                    </ResourceItem>\n                                );\n                            }}\n                        />\n                    </Card>\n                )}\n            </VerticalStack>\n\n            <Modal\n                title=\"Edit Note\"\n                open={editingItem !== null}\n                onClose={() => setEditingItem(null)}\n                primaryAction={{\n                    content: 'Confirm',\n                    onAction: () => {\n                        onSave();\n                        setEditingItem(null);\n                    },\n                }}\n                secondaryActions={[\n                    {\n                        content: 'Cancel',\n                        onAction: () => {\n                            list.reset();\n                            setEditingItem(null);\n                        },\n                    },\n                ]}\n                sectioned\n            >\n                {(() => {\n                    if (editingItem === null || !list.fields[editingItem]) return null;\n\n                    const { text, checked, showTextBox, textBoxPlaceholder } = list.fields[editingItem];\n\n                    return (\n                        <VerticalStack gap=\"2\">\n                            <HorizontalStack gap=\"1\" blockAlign=\"start\">\n                                <Checkbox label=\"\" {...asChoiceField(checked)} />\n                                <div className={styles.flexStretch}>\n                                    <TextField\n                                        placeholder=",
                            "filename": "web/client/src/pages/checkout/checkout-editor-v2/components/notes-content-editor.tsx",
                            "start_index": 5742,
                            "end_index": 8117,
                            "start_line": 118,
                            "end_line": 171,
                            "max_line": 219,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet shows UI components for editing notes in a modal dialog, which is relevant for implementing the title for the text box and updating the UI elements as per the requirements."
                },
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Code snippet provides a glimpse into the rendering of notes in the UI, including the display of text, active/inactive status, and edit functionality.",
                        "snippet": {
                            "code": "{list.addItem}>Add note</Button>\n                                </HorizontalStack>\n                            </HorizontalStack>\n                        </Box>\n                        <Divider />\n                        <ResourceList\n                            alternateTool={<></>}\n                            resourceName={{ singular: 'note', plural: 'notes' }}\n                            items={list.fields}\n                            showHeader={false}\n                            renderItem={(item, id, index) => {\n                                const isActive = item.checked.value;\n                                return (\n                                    <ResourceItem id={id} onClick={() => setEditingItem(index)}>\n                                        <HorizontalStack align=\"space-between\" blockAlign=\"center\">\n                                            <HorizontalStack gap=\"2\">\n                                                <VerticalStack gap=\"0\">\n                                                    <Text as=\"span\" fontWeight=\"bold\">\n                                                        {/*todo: validation?*/}\n                                                        {/*<InlineError*/}\n                                                        {/*  message={'Active notes length should be less than 5000 symbols because of Shopify limitations!'}*/}\n                                                        {/*  fieldID={''}*/}\n                                                        {/*/>*/}\n                                                        {item.text.value.text}\n                                                    </Text>\n                                                </VerticalStack>\n                                                <Badge status={isActive ? 'success' : 'attention'}>\n                                                    {isActive ? 'active' : 'inactive'}\n                                                </Badge>\n                                            </HorizontalStack>\n                                            <HorizontalStack gap=\"2\">\n                                                <Tooltip content=\"Edit note\">\n                                                    <div onClick={(e) => e.stopPropagation()}>\n                                                        <Button\n                                                            icon={EditMajor as IconSource}\n                                                            onClick={() => setEditingItem(index)}\n                                                        />\n                                                    </div>\n                                                </Tooltip>\n                                                <Tooltip content=",
                            "filename": "web/client/src/pages/checkout/checkout-editor-v2/components/notes-content-editor.tsx",
                            "start_index": 2974,
                            "end_index": 5742,
                            "start_line": 79,
                            "end_line": 118,
                            "max_line": 219,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "It provides insight into how notes are rendered in the UI, including the active/inactive status that needs to be removed, and edit functionality that may need to be updated."
                }
            ],
            "web/client/src/pages/funnels/hooks/useFilledWithDefaultValuesTemplates.ts": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "The snippet shows how default values are set for different configurations in text and timer widgets, which can be useful for understanding how to update default values for the notes widget.",
                        "snippet": {
                            "code": "if (isTextImageWidget(template)) {\n                    const config = template.config;\n                    const heading = config.heading;\n                    config.heading = {\n                        config: {\n                            fontSize: heading?.config?.fontSize ?? UPSELL_TEXT_SIZES[4].value,\n                            appearance: heading?.config?.appearance ?? COLOR_OPTIONS[0].value,\n                        },\n                        value: heading?.value ?? '',\n                    };\n\n                    const text = config.text;\n                    config.text = {\n                        config: {\n                            fontSize: text?.config?.fontSize ?? UPSELL_TEXT_SIZES[2].value,\n                            appearance: text?.config?.appearance ?? COLOR_OPTIONS[0].value,\n                        },\n                        value: text?.value ?? '',\n                    };\n\n                    config.position = config.position || ('left' as Alignment);\n                    config.verticalAlignment = config.verticalAlignment || ('leading' as VerticalAlignment);\n                    config.imageSize = setDefaultNumberValue(config.imageSize, 350);\n                    config.topPadding = setDefaultNumberValue(config.topPadding, 2);\n                    config.bottomPadding = setDefaultNumberValue(config.bottomPadding, 2);\n                }\n\n                if (isTimerWidget(template)) {\n                    const config = template.config;\n                    config.topPadding = setDefaultNumberValue(config.topPadding, 2);\n                    config.bottomPadding = setDefaultNumberValue(config.bottomPadding, 2);\n                    config.minutes = config.minutes ?? 10;\n                    config.heading =\n                        config.heading ??\n                        `<p style=\"text-align:center;\"><span style=\"color: var(--x-pp-default-color-text,inherit);background-color: var(--x-pp-color-surface-secondary);font-size: 18px;font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'\", sans-serif;\">Your order is confirmed but you can still add the following for a limited time</span><span style=\"font-size: 18px;\"> </span><a href=\"undefined\" class=\"wysiwyg-mention\" data-mention data-value=\"timer}\"><span style=\"font-size: 18px;\"><strong>{timer}</strong></span></a><span style=\"font-size: 18px;\"><strong> </strong></span></p>`;\n                    config.text = config.text ?? '';\n                    config.textColor = config.textColor ?? UPSELL_COLOR_NAMES.BLACK;\n                    config.backgroundColor = config.backgroundColor ?? UPSELL_COLOR_NAMES.RED;\n                    config.hideBanner = config.hideBanner ?? false;\n                }\n\n                return template;\n            }",
                            "filename": "web/client/src/pages/funnels/hooks/useFilledWithDefaultValuesTemplates.ts",
                            "start_index": 12701,
                            "end_index": 15540,
                            "start_line": 225,
                            "end_line": 267,
                            "max_line": 270,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet shows how default values are set for configurations, which is useful for understanding how to update the default values for the checkbox title and text box placeholder in the notes widget."
                }
            ],
            "web/server/src/modules/checkout-widgets/checkout-widgets.model.ts": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Defines the structure of the Note model and NoteWidgetConfig, which are likely related to the notes widget editing interface in the web application.",
                        "snippet": {
                            "code": "@modelOptions({ schemaOptions: { _id: false } })\nexport class Note {\n    @prop({ required: true })\n    id!: number;\n\n    @prop({ required: true })\n    checked!: boolean;\n\n    @prop({ required: true })\n    text!: string;\n\n    @prop({ required: true, default: false })\n    showTextBox!: boolean;\n\n    @prop({ required: true, default: '' })\n    textBoxPlaceholder!: string;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nexport class NoteWidgetConfig {\n    @prop({ required: true, type: Note })\n    notes!: Note[];\n\n    @prop({ required: false })\n    triggers?: CheckoutTriggers;\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~models~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@modelOptions({ schemaOptions: { versionKey: false, discriminatorKey: 'type' } })\nexport class CheckoutWidgets {\n    _id!: string; // For TS, not for Mongo. This is stored as an ObjectID in Mongo.\n\n    @prop({ required: true })\n    type!: string;\n\n    @prop({ required: true })\n    shop!: string;\n\n    @prop({ required: true, default: false })\n    status!: boolean;\n\n    /** legacy field. Didn't used nowhere */\n    @prop({ required: false })\n    hasSplitTest?: boolean;\n\n    @prop({ required: true, default: new Date() })\n    createdAt!: Date;\n\n    @prop({ required: false, enum: SplitTestEnum, default: null, addNullToEnum: true })\n    splitTestVersion?: SplitTestEnum;\n\n    config!: { [key: string]: any };\n}\n\nexport class UpsellCheckoutWidget extends CheckoutWidgets {\n    @prop({ required: true })\n    declare config: UpsellWidgetConfig;\n}\n\nexport type IUpsellCheckoutWidget = InstanceType<typeof UpsellCheckoutWidget>;\n\nexport class UpsellCheckoutWidgetOne extends UpsellCheckoutWidget {\n    declare type: CHECKOUT_WIDGETS_TYPES.UPSELL_WIDGET_ONE;\n}\n\nexport class UpsellCheckoutWidgetTwo extends UpsellCheckoutWidget {\n    declare type: CHECKOUT_WIDGETS_TYPES.UPSELL_WIDGET_TWO;\n}\n\nexport class UpsellCheckoutWidgetThree extends UpsellCheckoutWidget {\n    declare type: CHECKOUT_WIDGETS_TYPES.UPSELL_WIDGET_THREE;\n}\n\nexport class TrustBadgeCheckoutWidget extends CheckoutWidgets {\n    declare type: CHECKOUT_WIDGETS_TYPES.TRUST_BADGES_WIDGET;\n\n    @prop({ required: true })\n    declare config: TrustBadgeWidgetConfig;\n}\n\nexport class TimerCheckoutWidget extends CheckoutWidgets {\n    declare type: CHECKOUT_WIDGETS_TYPES.TIMER_WIDGET;\n\n    @prop({ required: true })\n    declare config: TimerWidgetConfig;\n}\n\nexport class RewardsCheckoutWidget extends CheckoutWidgets {\n    declare type: CHECKOUT_WIDGETS_TYPES.REWARDS_WIDGET;\n\n    @prop({ required: true })\n    declare config: RewardsWidgetConfig;\n}\n\nexport class TestimonialsCheckoutWidget extends CheckoutWidgets {\n    declare type: CHECKOUT_WIDGETS_TYPES.TESTIMONIALS_WIDGET;\n\n    @prop({ required: true })\n    declare config: TestimonialWidgetConfig;\n}\n\nexport class FAQCheckoutWidget extends CheckoutWidgets {\n    declare type: CHECKOUT_WIDGETS_TYPES.FAQ_WIDGET;\n\n    // @prop({ required: true })\n    // config!: null;\n}",
                            "filename": "web/server/src/modules/checkout-widgets/checkout-widgets.model.ts",
                            "start_index": 8689,
                            "end_index": 11617,
                            "start_line": 73,
                            "end_line": 498,
                            "max_line": 565,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "Defines the structure of the Note model and NoteWidgetConfig, which are likely to be affected by the removal of the active/inactive state and other changes to the notes widget editing interface."
                }
            ]
        },
        "bouncer_response": {
            "score": 6,
            "criteria": "The RESPONSE must provide actionable, relevant guidance to more parts of the PROMPT's described issue to score higher.",
            "supporting_evidence": "The RESPONSE provides a series of actionable steps to address the software bug described in the PROMPT, including removing the checkbox component, introducing a new title, changing labels, adjusting default values, and reviewing shared code for consistency. It also suggests thorough testing after making the changes. Additionally, the RESPONSE provides specific code snippets and paths to check, which are relevant to the task at hand. However, the RESPONSE does not address the rewording of \"Define text box placeholder\" to \"Text box placeholder\" and the change of defaults for the checkbox title and text box placeholder text. While the RESPONSE is on the right track, it is incomplete as it does not cover all aspects of the described bug.",
            "clarification_questions": "NONE"
        },
        "end_time": 1714258588.975317,
        "result": "To enhance the user experience and streamline the notes widget editing interface, certain modifications are necessary. These changes involve simplifying the interface by removing the concept of \"Active\" vs \"Inactive\" states, updating labels, and setting new default values. The following actions should be taken to implement these improvements:\n\n- Locate and remove the checkbox component that toggles between \"Active\" and \"Inactive\" states in the relevant `.tsx` files.\n- Introduce a new title above the text box input field by adding a Text component in the editing modal.\n- Change the label associated with the text box placeholder to \"Text box placeholder\" for clarity.\n- Adjust the default values for both the checkbox title and the text box placeholder to align with the updated interface requirements.\n- Review any shared code in `extensions-web-common/checkout/widgets/note.tsx` to ensure consistency across the application.\n- After making these changes, thoroughly test the updated interface to ensure that it functions correctly and meets the desired user experience standards.\n\n### Code snippets to check\n\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [client](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src) \u2192 [pages](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages) \u2192 [checkout](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/checkout) \u2192 [checkout-editor](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/checkout/checkout-editor) \u2192 [components](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/checkout/checkout-editor/components) \u2192 [widget-list](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/checkout/checkout-editor/components/widget-list) \u2192 [components](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/checkout/checkout-editor/components/widget-list/components) \u2192 [note-settings](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/checkout/checkout-editor/components/widget-list/components/note-settings)- [Lines 1 - 42](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/checkout/checkout-editor/components/widget-list/components/note-settings/note.tsx#L1-L42)\n\n This snippet includes fields for text, checkbox, and text box placeholders, which are directly related to the modifications required to remove the checkbox and update the text box placeholder as specified.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [client](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src) \u2192 [pages](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages) \u2192 [checkout](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/checkout) \u2192 [checkout-editor-v2](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/checkout/checkout-editor-v2) \u2192 [components](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/checkout/checkout-editor-v2/components)- [Lines 171 - 219](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/checkout/checkout-editor-v2/components/notes-content-editor.tsx#L171-L219)\n\n It is related to the notes widget editing interface, including text box placeholders and checkbox functionality, which are elements that need to be updated according to the modifications requested. \n\n\n   - [Lines 118 - 171](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/checkout/checkout-editor-v2/components/notes-content-editor.tsx#L118-L171)\n\n This snippet shows UI components for editing notes in a modal dialog, which is relevant for implementing the title for the text box and updating the UI elements as per the requirements. \n\n\n   - [Lines 79 - 118](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/checkout/checkout-editor-v2/components/notes-content-editor.tsx#L79-L118)\n\n It provides insight into how notes are rendered in the UI, including the active/inactive status that needs to be removed, and edit functionality that may need to be updated.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [client](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src) \u2192 [pages](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages) \u2192 [funnels](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/funnels) \u2192 [hooks](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/funnels/hooks)- [Lines 225 - 267](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/funnels/hooks/useFilledWithDefaultValuesTemplates.ts#L225-L267)\n\n This snippet shows how default values are set for configurations, which is useful for understanding how to update the default values for the checkbox title and text box placeholder in the notes widget.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [server](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src) \u2192 [modules](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules) \u2192 [checkout-widgets](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/checkout-widgets)- [Lines 73 - 498](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/checkout-widgets/checkout-widgets.model.ts#L73-L498)\n\n Defines the structure of the Note model and NoteWidgetConfig, which are likely to be affected by the removal of the active/inactive state and other changes to the notes widget editing interface."
    }
}