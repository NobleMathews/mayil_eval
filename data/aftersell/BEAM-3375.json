{
    "id": "BEAM-3375",
    "repo_name": "testbed/aftersell",
    "title": "Incorrect pricing plan accepted in onboarding for non-checkout stores",
    "body": "\n[EMBEDDED_LINK_1]\n\nThis was an uncaught regression from Polaris 12.\n---\nGlossary:\ntranscript_2: The video provides a walkthrough of the pricing discrepancy issue for an app listed on the Shopify App Store. The narrator explains that the app's listing page correctly states the pricing as $7.99 per month for 0 to 100 orders, with the only free plan being for development stores. However, upon installing the app and reaching the pricing page, the text incorrectly states that the plan is free for 0 to 50 orders. This old pricing information is in direct conflict with the correct pricing table, which is hidden behind a manual expandable section that is not clearly indicated as such.\n\nThe narrator continues by showing the Shopify pricing page, where, once again, the incorrect old pricing is displayed in a collapsible section that is not obviously expandable. This has led to a situation where merchants who have fewer than 50 orders have not been charged, due to the app accepting the old pricing plan.\n\nThe video raises the concern about what merchants believed they were accepting: the correct pricing from the app listing or the incorrect immediate heading in the app. The narrator emphasizes the need to decide whether merchants understood the pricing they were accepting and whether they have been incorrectly not billed, or if they believed they should not be billed for 0 to 50 orders based on the incorrect information presented.\n\nThe issue has been ongoing for a few months without being noticed, and the video concludes by highlighting the need to resolve the confusion regarding merchant experiences and billing expectations.\ngithub_pr_1: https://github.com/beam-commerce/aftersell/pull/1105\n\n",
    "classification": "bug",
    "state": "closed",
    "repo_link": "https://github.com/testbed/aftersell.git",
    "requested_commit": null,
    "issue_tracker_identifier": "",
    "ai_cost": {
        "issue_classifier": 0.0003305,
        "issue_summarizer": 0.01481,
        "search_embedding": 4.6019999999999996e-05,
        "documentation_agent": 0.00787,
        "repo_summary": 0.09810750000000001,
        "issue_star_solver": 0.2098315,
        "snippet_processor": 0.025419999999999998,
        "bouncer": 0.03301
    },
    "attachments": [
        {
            "title": "BEAM-3375: Incorrect pricing plan accepted in onboarding for non-checkout stores",
            "url": "https://github.com/beam-commerce/aftersell/pull/1105",
            "content": "",
            "placeholder_tag": "github_pr_1",
            "content_type": "ExternalAssetsType.GITHUB_PR"
        }
    ],
    "inline_assets": [
        {
            "title": "",
            "url": "https://www.loom.com/share/f7071f043df64497abe25dfd233ed1dc?sid=d7ea7287-8e1e-423e-8f71-56c533a02d41",
            "content": "Alright, so on the app listing on Shopify App Store, the pricing down here from 0 to 100 orders is $7.99 per month, the only free plan is for development stores, and if we You install this, then we'll just wait until we get to the pricing page in after sell. Here Cheers! We have the incorrect old text saying that it's free between 0 and 50 orders and then from there, but the pricing table, which you do have to expand this manually to see it, shows the correct Correct? 1 of 0 to 100 at 7.99. If we press continue the Shopify pricing page here umm. If we expand this, which is. Thank you. Not very obvious that is expandable. It shows the incorrect old one that is free between 0 and 50. So. And this is the actual one that they have accepted so anyone under 50 orders will not have. They been charged up to this point. So on the app listing it showed the correct one. On the app itself it showed the incorrect old one as the primary text. And then the table showed the correct new one. And then the accept pricing Thank you. page here shows the incorrect old one in a collapsible thing that's not obviously collapsible. Umm so it's unclear how merchants or what merchants actually thought that they were accepting whether they were taking the word from the app listing here or from the first immediate heading in the app. So that's the decision of whether we believe that merchants actually did a understand that they were accepting this and we have been incorrectly not billing them or whether the merchants would have believed that they actually should be free between 0 and 50 orders and we should not bill them. So. Thank you. That's the decision that we have and the um kind of experience that merchants have had for the past couple of months here since this issue has existed without us realizing. So. Yeah.",
            "placeholder_tag": "transcript_2",
            "content_type": "ExternalAssetsType.TRANSCRIPT"
        }
    ],
    "linked_issue_ids": [],
    "comments": [],
    "issue_summary": "Error Messages: None provided.\n\nFunction and Variable Names:\n- Polaris 12 (possible function, variable, or module name related to the regression)\n- pricing page (component or function where the incorrect text is displayed)\n- Shopify pricing page (external page, possibly related to the app's integration with Shopify)\n\nTechnical Descriptions:\n- Regression occurred from Polaris 12.\n- Incorrect pricing plan displayed as \"free for 0 to 50 orders\" instead of the correct \"$7.99 per month for 0 to 100 orders.\"\n- Correct pricing is hidden behind a manual expandable section that is not clearly indicated.\n- Incorrect old pricing displayed in a collapsible section on the Shopify pricing page.\n- Merchants with fewer than 50 orders have not been charged due to the app accepting the old pricing plan.\n- Issue has been ongoing for a few months.\n\nOutput Format:\n- Identify and fix regression from Polaris 12.\n- Correct the pricing text on the pricing page to match the app listing on the Shopify App Store.\n- Ensure the correct pricing table is visible and clearly indicated as expandable.\n- Update the Shopify pricing page to display the correct pricing information.\n- Assess the impact on merchants who have been incorrectly not billed and determine the course of action for billing corrections.\n\nRelevant Links:\n- [EMBEDDED_LINK_1] (contains the video walkthrough of the issue)\n- GitHub PR: https://github.com/beam-commerce/aftersell/pull/1105",
    "repo_summary": "The software project is a complex e-commerce application built using TypeScript and React. It consists of multiple directories such as `web`, `extensions`, `docs`, and `theme-app-extension-src`. The project uses various technologies like GraphQL, Jest, Vite, and Shopify libraries.\n\nThe issue at hand involves incorrect pricing plans being accepted during onboarding for non-checkout stores. This issue is related to discrepancies in pricing information displayed to users. The code snippets provided show functions for calculating bill amounts based on different pricing versions, handling legacy billing, accepting pricing plans, and applying discounts during checkout.\n\nThe project structure includes directories for server-side code, client-side code, post-purchase extensions, and utility functions. The project follows a modular approach with separate packages for different functionalities like billing, post-purchase services, and custom pricing components.\n\nThe documentation provided explains the implementation details of checkout upsell discounts, including the data flow, security considerations, and type definitions for various states and discount application logic. The code snippets demonstrate fetching selling plan groups for products and variants, handling subscriptions, and applying discounts based on selling plans.\n\nOverall, the project is a sophisticated e-commerce platform with a focus on checkout enhancements, post-purchase services, and custom pricing features. The issue reported relates to incorrect pricing plan acceptance during onboarding, which requires a thorough review of pricing logic and user interactions.",
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1714393441.439947,
        "classification": "bug",
        "initial_code_snippets": [
            {
                "code": "export const AcceptNoCheckout = () => {\n    const [openPricing, setOpenPricing] = useState(false);\n\n    const { mutateAsync: acceptPricingPlan, isLoading } = useAcceptPricingPlan({\n        // todo: fix callback\n        onPossibleImmediatePlanChangeWithoutRedirect: () =>\n            shopify.toast.show('Plan updated successfully!', { duration: 3000 }),\n        onErrorBeforeReload: () => console.error('Error updating pricing plan.'),\n    });\n\n    const availablePlanIds = useAvailablePlanIds();\n\n    const handleAcceptPricingPlan = async () => {\n        await acceptPricingPlan({ newAfterSellPlanId: availablePlanIds.availablePlanIds.POST_PURCHASE_ONLY });\n    };\n\n    return (\n        <Card padding=\"8\">\n            <VerticalStack gap=\"4\">\n                <Text variant=\"headingLg\" as=\"h5\">\n                    Ready to supercharge your sales? Let\u2019s get started!\n                </Text>\n                <Text variant=\"bodyLg\" as=\"p\">\n                    Your subscription starts with a <strong>30-day free trial :)</strong>\n                </Text>\n                <Text variant=\"bodyLg\" as=\"p\">\n                    After the 30-day free trial, pricing plans start from FREE (50 orders per month or less) and\n                    increase incrementally based on your order volume (up to $799/month for stores that do 25,000+\n                    orders/month).\n                </Text>\n                <Box>\n                    <Link onClick={() => setOpenPricing(!openPricing)}>\n                        <HorizontalStack gap=\"1\" blockAlign=\"center\">\n                            See pricing table\n                            <Box>\n                                <Icon\n                                    color=\"interactive\"\n                                    source={(openPricing ? ChevronUpMinor : ChevronDownMinor) as IconSource}\n                                />\n                            </Box>\n                        </HorizontalStack>\n                    </Link>\n                </Box>\n                <Collapsible\n                    open={openPricing}\n                    id=\"basic-collapsible\"\n                    transition={{ duration: '200ms', timingFunction: 'ease-in-out' }}\n                    expandOnPrint\n                >\n                    <DataTable\n                        rows={PRICING_ROWS}\n                        columnContentTypes={['text', 'text']}\n                        headings={[\n                            <Text variant=\"headingSm\" as=\"h6\">\n                                Monthly Orders\n                            </Text>,\n                            <Text variant=\"headingSm\" as=\"h6\">\n                                Monthly Price\n                            </Text>,\n                        ]}\n                    />\n                </Collapsible>\n                <HorizontalStack align=\"center\">\n                    <VerticalStack inlineAlign=\"center\" gap=\"3\">\n                        <Box>\n                            {/*todo: button does nothing*/}\n                            <Bu",
                "filename": "web/client/src/pages/onboarding/onboarding-pricing.page.tsx",
                "start_index": 14830,
                "end_index": 17856,
                "start_line": 361,
                "end_line": 427,
                "max_line": 461,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n    // todo: add TY_PAGE feature flag\n    [DefaultAfterSellPlanId.LEGACY_V1]: {\n        id: DefaultAfterSellPlanId.LEGACY_V1,\n        shopifyCharge: {\n            chargeName: DefaultShopifyChargeName['Aftersell Pricing Plan'],\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: 0,\n                paysForFeatures: [],\n                terms: 'FREE up to 50 orders per month then starts at $7.99',\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            maxMonthlyUsageAmount: 349.99,\n        },\n        monthlyUsageCharges: [\n            {\n                cappedAmount: 349.99,\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.TOTAL_STORE_ORDERS_V1,\n                paysForFeature: AfterSellPaidFeature.POST_PURCHASE,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n        ],\n        planManagementPageVersion: PlanManagementPageVersion.NO_PAGE,\n        // This was deprecated when we first released One-Click offers in August 2021.\n        // Anyone who is on the old 1.0 pricing plan should be forced to accept a new plan\n        // the next time they login to the app.\n        isDeprecated_forceUsersToAcceptNewPlanOnNextLogin: true,\n    },\n    [DefaultAfterSellPlanId.LEGACY_V2_799]: {\n        id: DefaultAfterSellPlanId.LEGACY_V2_799,\n        shopifyCharge: {\n            chargeName: DefaultShopifyChargeName['AfterSell 2.0 Pricing Plan'],\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: 0,\n                paysForFeatures: [],\n                terms: 'FREE up to 50 orders per month then starts at $7.99',\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            maxMonthlyUsageAmount: 799.99,\n        },\n        monthlyUsageCharges: [\n            {\n                cappedAmount: 799.99,\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.TOTAL_STORE_ORDERS_V2,\n                paysForFeature: AfterSellPaidFeature.POST_PURCHASE,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n        ],\n        planManagementPageVersion: PlanManagementPageVersion.NO_PAGE,\n        // This plan is explicitly NOT deprecated. We don't want to force all users that\n        // installed AfterSell before we released Checkout to have to accept a new plan.\n        isDeprecated_forceUsersToAcceptNewPlanOnNextLogin: false,\n    },",
                "filename": "web/server/src/modules/billing/billing.constants.ts",
                "start_index": 4112,
                "end_index": 6550,
                "start_line": 1,
                "end_line": 372,
                "max_line": 375,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import {\n    Badge,\n    Box,\n    Button,\n    Card,\n    Collapsible,\n    DataTable,\n    Divider,\n    HorizontalStack,\n    Icon,\n    IconSource,\n    Link,\n    Modal,\n    Page,\n    Text,\n    VerticalStack,\n} from '@shopify/polaris';\nimport {\n    BuyButtonMajor,\n    CheckoutMajor,\n    ChevronDownMinor,\n    ChevronUpMinor,\n    StatusActiveMajor,\n    TickMinor,\n} from '@shopify/polaris-icons';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport Star from '../../shared-components/star';\nimport './Onboarding.scss';\nimport { useFetchBillingPlanDetails } from 'src/hooks/useFetchBillingPlanDetails';\nimport {\n    AvailablePlanIds,\n    ENTERPRISE_PLAN_ID,\n    SelectableAfterSellPlanId,\n    useAvailablePlanIds,\n} from 'src/pages/onboarding/hooks/useAvailablePlanIds';\nimport { useIntercom } from 'src/hooks/useIntercom';\nimport { useFetchPromoPlanDetails } from 'src/hooks/useFetchPromoPlanDetails';\nimport { useFetchPendingPlanChange } from 'src/hooks/useFetchPendingPlanChange';\nimport { CustomPricing } from './components/CustomPricing';\nimport { Loader } from 'src/shared-components/loader';\nimport { getPromoCodeCookie } from 'src/utils/promo';\nimport { useAcceptPricingPlan } from 'src/hooks/useAcceptPricingPlan';\n\nconst PRICING_ROWS = [\n    ['0-100 orders', '$7.99/month'],\n    ['101-200 orders', '$14.99/month'],\n    ['201-500 orders', '$29.99/month'],\n    ['501-1000 orders', '$54.99/month'],\n    ['1001-2000 orders', '$99.99/month'],\n    ['2001-4000 orders', '$149.99/month'],\n    ['4000+ orders', '$149.99/month (+$0.03/order up to $799)'],\n];\n\nconst UsagePricingModal = ({ open, onClose }: { open: boolean; onClose: () => void }) => {\n    return (\n        <Modal title={'Post Purchase Pricing for Full Usage'} onClose={onClose} open={open}>\n            <Box padding=\"2\" paddingBlockStart=\"1\" paddingBlockEnd=\"2\">\n                <DataTable\n                    columnContentTypes={['text', 'text']}\n                    headings={['Monthly Store Orders', 'Price'].map((heading) => (\n                        <Text variant=\"headingSm\" as=\"h6\">\n                            {heading}\n                        </Text>\n                    ))}\n                    rows={PRICING_ROWS}\n                />\n            </Box>\n        </Modal>\n    );\n};\n\nconst OnboardingAcceptPricing = ({ hasCheckout }: { hasCheckout: boolean }) => {\n    const { availablePlanIds } = useAvailablePlanIds();\n\n    const promoCode = useMemo(() => getPromoCodeCookie(), []);\n    const { data: promoPlanData, isLoading: isLoadingCustomPlan } = useFetchPromoPlanDetails({ promoCode });\n    const { data: pendingPlanChangeData, isLoading: isLoadingPendingPlanChange } = useFetchPendingPlanChange();\n\n    if ((promoCode && isLoadingCustomPlan) || isLoadingPendingPlanChange) {\n        return <Loader />;\n    }",
                "filename": "web/client/src/pages/onboarding/onboarding-pricing.page.tsx",
                "start_index": 0,
                "end_index": 2798,
                "start_line": 1,
                "end_line": 375,
                "max_line": 461,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "[DefaultAfterSellPlanId.LEGACY_V2_1299]: {\n        id: DefaultAfterSellPlanId.LEGACY_V2_1299,\n        shopifyCharge: {\n            chargeName: DefaultShopifyChargeName['AfterSell 2.0 Pricing Plan'],\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: 0,\n                paysForFeatures: [],\n                terms: 'FREE up to 50 orders per month then starts at $7.99',\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            maxMonthlyUsageAmount: 1299.99, // The cap was 1299.99, but we switched our usage to only bill up to 799.99.\n        },\n        monthlyUsageCharges: [\n            {\n                cappedAmount: 799.99, // This is the actual capped amount that we use.\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.TOTAL_STORE_ORDERS_V2,\n                paysForFeature: AfterSellPaidFeature.POST_PURCHASE,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n        ],\n        planManagementPageVersion: PlanManagementPageVersion.NO_PAGE,\n        // This plan is explicitly NOT deprecated. Users from late 2021 will have\n        // this plan and don't need to accept a new plan currently. We don't use\n        // the whole 1299.99 usage charge, but that's fine.\n        isDeprecated_forceUsersToAcceptNewPlanOnNextLogin: false,\n    },\n    [DefaultAfterSellPlanId.POST_PURCHASE_ONLY_FOR_NON_CHECKOUT_USERS]: {\n        id: DefaultAfterSellPlanId.POST_PURCHASE_ONLY_FOR_NON_CHECKOUT_USERS,\n        shopifyCharge: {\n            chargeName: DefaultShopifyChargeName['AfterSell Pricing'],\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: 0,\n                paysForFeatures: [],\n                terms: 'FREE up to 50 orders per month then starts at $7.99',\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            maxMonthlyUsageAmount: 799.99,\n        },\n        monthlyUsageCharges: [\n            {\n                cappedAmount: 799.99,\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.TOTAL_STORE_ORDERS_V2,\n                paysForFeature: AfterSellPaidFeature.POST_PURCHASE,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n        ],\n        planManagementPageVersion: PlanManagementPageVersion.NO_PAGE,\n    },",
                "filename": "web/server/src/modules/billing/billing.constants.ts",
                "start_index": 6555,
                "end_index": 8891,
                "start_line": 133,
                "end_line": 372,
                "max_line": 375,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "if (isLegacyUser) {\n            // The following section handles legacy support for all users that accepted a Shopify charge before\n            // we switched billing to use AfterSell plans. This change occured with the release of checkout\n            // extensions (early October, 2022). Before this point, users fit into one of following three categories:\n            //  1. All users that installed before AfterSell 2.0 was released. These users\n            //      will have a Shopify charge with the name \"AfterSell Pricing Plan\".\n            //  2. Most users that installed after AfterSell 2.0 was released. These users\n            //      will have a Shopify charge with the name \"AfterSell 2.0 Pricing Plan\".\n            const hasValidLegacyCharge =\n                activeShopifyCharge.name === DefaultShopifyChargeName['Aftersell Pricing Plan'] ||\n                activeShopifyCharge.name === DefaultShopifyChargeName['AfterSell 2.0 Pricing Plan'];\n            if (!hasValidLegacyCharge) {\n                return {\n                    success: false,\n                    errorCode: 'no_accepted_aftersell_plan',\n                    reason: 'User does not have an accepted AfterSell plan.',\n                };\n            }\n            if (activeShopifyCharge.name === DefaultShopifyChargeName['Aftersell Pricing Plan']) {\n                acceptedAfterSellPlan = PRESET_AFTERSELL_PLANS.LEGACY_V1;\n            } else if (activeShopifyCharge.name === DefaultShopifyChargeName['AfterSell 2.0 Pricing Plan']) {\n                const V2_799_PLAN = PRESET_AFTERSELL_PLANS.LEGACY_V2_799;\n                const V2_1299_PLAN = PRESET_AFTERSELL_PLANS.LEGACY_V2_1299;\n                const activeCappedAmount = Number(activeShopifyCharge.capped_amount);\n                if (activeCappedAmount === V2_799_PLAN.shopifyCharge.maxMonthlyUsageAmount) {\n                    acceptedAfterSellPlan = V2_799_PLAN;\n                } else if (activeCappedAmount === V2_1299_PLAN.shopifyCharge.maxMonthlyUsageAmount) {\n                    acceptedAfterSellPlan = V2_1299_PLAN;\n                } else {\n                    throw new Error(\n                        'Unexpected code path. Active Shopify charge capped amount does not match any known legacy capped amounts for V2 plans.'\n                    );\n                }\n            } else {\n                throw new Error(\n                    'Unexpected code path. Active Shopify charge name does not match any known legacy custom charge name, but it should have been checked above.'\n                );\n            }\n        }",
                "filename": "web/server/src/modules/billing/legacy-billing-v2.service.ts",
                "start_index": 3593,
                "end_index": 6162,
                "start_line": 95,
                "end_line": 358,
                "max_line": 360,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "[DefaultAfterSellPlanId.POST_PURCHASE_ONLY_FOR_CHECKOUT_ELIGIBLE_USERS_AFTER_CHECKOUT_RELEASE]: {\n        id: DefaultAfterSellPlanId.POST_PURCHASE_ONLY_FOR_CHECKOUT_ELIGIBLE_USERS_AFTER_CHECKOUT_RELEASE,\n        shopifyCharge: {\n            chargeName: DefaultShopifyChargeName['AfterSell Pricing'],\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: 0,\n                paysForFeatures: [],\n                terms: 'Free up to 50 orders per month then starts at $7.99',\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            maxMonthlyUsageAmount: 799.99,\n        },\n        monthlyUsageCharges: [\n            {\n                cappedAmount: 799.99,\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.TOTAL_STORE_ORDERS_V2,\n                paysForFeature: AfterSellPaidFeature.POST_PURCHASE,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n        ],\n        planManagementPageVersion: PlanManagementPageVersion.POST_PURCHASE_AND_CHECKOUT,\n    },\n    [DefaultAfterSellPlanId.POST_PURCHASE_AND_CHECKOUT]: {\n        id: DefaultAfterSellPlanId.POST_PURCHASE_AND_CHECKOUT,\n        shopifyCharge: {\n            chargeName: DefaultShopifyChargeName['AfterSell Pricing'],\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: 99.0,\n                paysForFeatures: [AfterSellPaidFeature.CHECKOUT],\n                terms: 'Post-purchase: Free up to 50 orders per month then starts at $7.99. Checkout: Flat $99 per month.',\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            maxMonthlyUsageAmount: 799.99,\n        },\n        monthlyUsageCharges: [\n            {\n                cappedAmount: 799.99,\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.TOTAL_STORE_ORDERS_V2,\n                paysForFeature: AfterSellPaidFeature.POST_PURCHASE,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            // todo: uncomment and/or move to the proper plan\n            // {\n            //     cappedAmount: 99.99,\n            //     chargingAlgorithm: MonthlyUsageChargingAlgorithm.TOTAL_STORE_ORDERS_V2,\n            //     paysForFeature: AfterSellPaidFeature.TY_PAGE,\n            //     freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            // },\n        ],\n        planManagementPageVersion: PlanManagementPageVersion.POST_PURCHASE_AND_CHECKOUT,\n    },",
                "filename": "web/server/src/modules/billing/billing.constants.ts",
                "start_index": 13812,
                "end_index": 16278,
                "start_line": 285,
                "end_line": 372,
                "max_line": 375,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "[DefaultAfterSellPlanId.POST_PURCHASE_ONLY_EXISTING_USERS_OPTED_OUT_OF_CHECKOUT]: {\n        id: DefaultAfterSellPlanId.POST_PURCHASE_ONLY_EXISTING_USERS_OPTED_OUT_OF_CHECKOUT,\n        shopifyCharge: {\n            chargeName: DefaultShopifyChargeName['AfterSell 2.0 Pricing Plan'],\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: 0,\n                paysForFeatures: [],\n                terms: 'FREE up to 50 orders per month then starts at $7.99',\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            maxMonthlyUsageAmount: 799.99,\n        },\n        monthlyUsageCharges: [\n            {\n                cappedAmount: 799.99,\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.TOTAL_STORE_ORDERS_V2,\n                paysForFeature: AfterSellPaidFeature.POST_PURCHASE,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n        ],\n        planManagementPageVersion:\n            PlanManagementPageVersion.POST_PURCHASE_AND_CHECKOUT_FOR_USERS_INSTALLED_BEFORE_CHECKOUT_LAUNCH,\n    },\n    [DefaultAfterSellPlanId.CHECKOUT_ONLY_EXISTING_USERS_OPTED_OUT_OF_POST_PURCHASE]: {\n        id: DefaultAfterSellPlanId.CHECKOUT_ONLY_EXISTING_USERS_OPTED_OUT_OF_POST_PURCHASE,\n        shopifyCharge: {\n            chargeName: DefaultShopifyChargeName['AfterSell 2.0 Pricing Plan'],\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: 0,\n                paysForFeatures: [],\n                terms: 'FREE up to 50 orders per month then starts at $7.99',\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            maxMonthlyUsageAmount: 799.99,\n        },\n        monthlyUsageCharges: [\n            {\n                cappedAmount: 99.0,\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.FLAT_MAX_USAGE_AMOUNT,\n                paysForFeature: AfterSellPaidFeature.CHECKOUT,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n        ],\n        planManagementPageVersion:\n            PlanManagementPageVersion.POST_PURCHASE_AND_CHECKOUT_FOR_USERS_INSTALLED_BEFORE_CHECKOUT_LAUNCH,\n    },",
                "filename": "web/server/src/modules/billing/billing.constants.ts",
                "start_index": 11627,
                "end_index": 13807,
                "start_line": 239,
                "end_line": 372,
                "max_line": 375,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "[DefaultAfterSellPlanId.POST_PURCHASE_AND_CHECKOUT_EXISTING_USERS_ADDED_TO_CHECKOUT]: {\n        id: DefaultAfterSellPlanId.POST_PURCHASE_AND_CHECKOUT_EXISTING_USERS_ADDED_TO_CHECKOUT,\n        shopifyCharge: {\n            chargeName: DefaultShopifyChargeName['AfterSell 2.0 Pricing Plan'],\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: 0,\n                paysForFeatures: [],\n                terms: 'FREE up to 50 orders per month then starts at $7.99',\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            maxMonthlyUsageAmount: 799.99,\n        },\n        monthlyUsageCharges: [\n            {\n                cappedAmount: 699.99,\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.TOTAL_STORE_ORDERS_V2,\n                paysForFeature: AfterSellPaidFeature.POST_PURCHASE,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            {\n                cappedAmount: 99.0,\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.FLAT_MAX_USAGE_AMOUNT,\n                paysForFeature: AfterSellPaidFeature.CHECKOUT,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n        ],\n        planManagementPageVersion:\n            PlanManagementPageVersion.POST_PURCHASE_AND_CHECKOUT_FOR_USERS_INSTALLED_BEFORE_CHECKOUT_LAUNCH,\n    },\n    [DefaultAfterSellPlanId.INTERNAL_TESTING_SWITH_TO_USAGE_INCLUDED_STATE]: {\n        id: DefaultAfterSellPlanId.INTERNAL_TESTING_SWITH_TO_USAGE_INCLUDED_STATE,\n        shopifyCharge: {\n            chargeName: DefaultShopifyChargeName['AfterSell Pricing'],\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: 0,\n                paysForFeatures: [],\n                terms: 'FREE up to 50 orders per month then starts at $7.99',\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            maxMonthlyUsageAmount: 799.99,\n        },\n        monthlyUsageCharges: [\n            {\n                cappedAmount: 699.99,\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.TOTAL_STORE_ORDERS_V2,\n                paysForFeature: AfterSellPaidFeature.POST_PURCHASE,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            {\n                cappedAmount: 99.0,\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.FLAT_MAX_USAGE_AMOUNT,\n                paysForFeature: AfterSellPaidFeature.CHECKOUT,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n        ],\n        planManagementPageVersion:\n            PlanManagementPageVersion.POST_PURCHASE_AND_CHECKOUT_FOR_USERS_INSTALLED_BEFORE_CHECKOUT_LAUNCH,\n    },",
                "filename": "web/server/src/modules/billing/billing.constants.ts",
                "start_index": 8896,
                "end_index": 11622,
                "start_line": 181,
                "end_line": 372,
                "max_line": 375,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "const { mutateAsync: acceptPricingPlan, isLoading } = useAcceptPricingPlan({\n        // todo: fix callback\n        onPossibleImmediatePlanChangeWithoutRedirect: () =>\n            shopify.toast.show('Plan updated successfully!', { duration: 3000 }),\n        onErrorBeforeReload: () => console.error('Error updating pricing plan.'),\n    });\n    const { openChatWithPrefilledMessage } = useIntercom();\n\n    const handleAcceptPlan = useCallback(\n        async (newAfterSellPlanId: SelectableAfterSellPlanId) => {\n            if (isLoading) return;\n            if (newAfterSellPlanId === ENTERPRISE_PLAN_ID) {\n                return openChatWithPrefilledMessage(\"Hi, I'm interested in the AfterSell Enterprise Plan.\");\n            }\n            await acceptPricingPlan({ newAfterSellPlanId });\n        },\n        [acceptPricingPlan, isLoading, openChatWithPrefilledMessage]\n    );\n\n    const isSelected = useMemo(() => {\n        return billingPlanDetails?.aftersellPlanId === planId;\n    }, [planId, billingPlanDetails]);\n\n    return (\n        <Card background={recommended ? 'bg-primary' : 'bg'}>\n            <Box width=\"193px\" paddingBlockEnd=\"3\" paddingInlineStart=\"1\" paddingInlineEnd=\"1\" paddingBlockStart=\"1\">\n                <VerticalStack gap=\"4\">\n                    <VerticalStack gap=\"3\">\n                        <HorizontalStack align=\"start\" gap=\"2\">\n                            <Box>\n                                <Icon color={recommended ? 'highlight' : undefined} source={icon} />\n                            </Box>\n                            {isSelected && <Badge status=\"success\">Current</Badge>}\n                            {recommended && !isSelected && <Badge status=\"info\">Recommended</Badge>}\n                        </HorizontalStack>\n                        <Box minHeight=\"60px\">\n                            <Text color={recommended ? 'text-inverse' : undefined} variant=\"headingMd\" as=\"h6\">\n                                {planName}\n                            </Text>\n                            <Text color={recommended ? 'text-inverse' : 'subdued'} variant=\"bodyMd\" as=\"p\">\n                                {planDescription}\n                            </Text>\n                        </Box>\n                    </VerticalStack>\n                    <VerticalStack gap=\"5\">\n                        <Box minHeight=\"50px\">\n                            <Text color={recommended ? 'text-inverse' : undefined} variant=\"heading2xl\" as=\"h3\">\n                                {price}\n                            </Text>\n                            <Text color={recommended ? 'text-inverse' : 'subdued'} variant=\"bodyMd\" as=\"p\">\n                                {priceDescription}\n                            </Text>\n                            <div style={{ visibility:",
                "filename": "web/client/src/pages/onboarding/onboarding-pricing.page.tsx",
                "start_index": 5589,
                "end_index": 8374,
                "start_line": 169,
                "end_line": 221,
                "max_line": 461,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "[DefaultAfterSellPlanId.CHECKOUT_ONLY]: {\n        id: DefaultAfterSellPlanId.CHECKOUT_ONLY,\n        shopifyCharge: {\n            chargeName: DefaultShopifyChargeName['AfterSell Pricing'],\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: 99.0,\n                paysForFeatures: [AfterSellPaidFeature.CHECKOUT],\n                terms: 'Flat $99 per month.',\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            maxMonthlyUsageAmount: 799.99,\n        },\n        monthlyUsageCharges: [],\n        planManagementPageVersion: PlanManagementPageVersion.POST_PURCHASE_AND_CHECKOUT,\n    },\n    [DefaultAfterSellPlanId.POST_PURCHASE_ONLY_NO_FREE_PLAN_JAN_16_2023]: {\n        id: DefaultAfterSellPlanId.POST_PURCHASE_ONLY_NO_FREE_PLAN_JAN_16_2023,\n        shopifyCharge: {\n            chargeName: DefaultShopifyChargeName['AfterSell Pricing'],\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: 0,\n                paysForFeatures: [],\n                terms: 'Starts at $7.99/month up to 100 orders per month. Increases based on total orders.',\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            maxMonthlyUsageAmount: 799.99,\n        },\n        monthlyUsageCharges: [\n            {\n                cappedAmount: 799.99,\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.TOTAL_STORE_ORDERS_V3_NO_FREE,\n                paysForFeature: AfterSellPaidFeature.POST_PURCHASE,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n        ],\n        planManagementPageVersion: PlanManagementPageVersion.NO_PAGE,\n    },\n}",
                "filename": "web/server/src/modules/billing/billing.constants.ts",
                "start_index": 16283,
                "end_index": 17961,
                "start_line": 336,
                "end_line": 373,
                "max_line": 375,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<SingleCard\n                    icon={StatusActiveMajor as IconSource}\n                    planName=\"Checkout + Post Purchase\"\n                    planId={availablePlanIds.POST_PURCHASE_AND_CHECKOUT}\n                    planDescription=\"Unlock the full potential of AfterSell\"\n                    hasUsage\n                    price=\"$99\"\n                    buttonText=\"Try for free\"\n                    recommended\n                    priceDescription=\"+ usage up to $799/month\"\n                    openPricingModal={openPricingModal}\n                    benefits={[\n                        'Checkout and post purchase',\n                        'Unlimited funnels',\n                        'Unlimited widgets',\n                        'Precise targeting',\n                        'A/B testing',\n                        'Robust Analytics',\n                    ]}\n                />\n                <SingleCard\n                    icon={CheckoutMajor as IconSource}\n                    planName=\"Enterprise\"\n                    planId={availablePlanIds.ENTERPRISE}\n                    planDescription=\"Customize your Shopify checkout\"\n                    price=\"Custom\"\n                    buttonText=\"Contact Us\"\n                    priceDescription=\"Reach out for a quote\"\n                    openPricingModal={openPricingModal}\n                    benefits={['Checkout and post purchase', 'Custom funnel implementation', 'High priority support']}\n                />\n            </HorizontalStack>\n            <UsagePricingModal open={openPricing} onClose={() => setOpenPricing(false)",
                "filename": "web/client/src/pages/onboarding/onboarding-pricing.page.tsx",
                "start_index": 13217,
                "end_index": 14802,
                "start_line": 295,
                "end_line": 356,
                "max_line": 461,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n    /**\n     * This function will get the AfterSell plan that the user is currently on. This function\n     * will deal with all of the following thorny edge cases:\n     * - Legacy users who do not have an accepted AfterSell plan stored in the database. It will\n     *      return the correct legacy AfterSell plan for them.\n     * - Legacy users who were given custom pricing plans. It will return the correct legacy\n     *      custom AfterSell plan for them.\n     * - Users that have an accepted AfterSell plan stored in the database that does\n     *      not match the Shopify charge that they currently have accepted. This should never\n     *      happen, but it is technically possible.\n     * - Users that have an accepted AfterSell plan stored in the database, but their\n     *      Shopify charge has been cancelled. This covers all users who have uninstalled.\n     */",
                "filename": "web/server/src/modules/billing/legacy-billing-v2.service.ts",
                "start_index": 1346,
                "end_index": 2224,
                "start_line": 1,
                "end_line": 60,
                "max_line": 360,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { useAppBridge } from '@shopify/app-bridge-react';\nimport { isShopifyEmbedded } from '@shopify/app-bridge-utils';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { sentryCaptureError } from 'src/utils/utils';\n\ntype AcceptPricingPlanParams = {\n    onPossibleImmediatePlanChangeWithoutRedirect: () => void;\n    onErrorBeforeReload?: () => void;\n};\n\ntype AcceptPricingPlanMutationParams = {\n    newAfterSellPlanId: string; // todo: update type\n    promoCode?: string;\n};\n\ntype AcceptPricingPlanResponseBodyType = {\n    confirmationUrl?: string;\n    immediateTransferSuccess?: boolean;\n};\n\nexport const useAcceptPricingPlan = ({\n    onPossibleImmediatePlanChangeWithoutRedirect,\n    onErrorBeforeReload,\n}: AcceptPricingPlanParams) => {\n    const app = useAppBridge();\n    const redirect = Redirect.create(app);\n    const queryClient = useQueryClient();\n\n    return useMutation({\n        mutationFn: async ({ newAfterSellPlanId, promoCode }: AcceptPricingPlanMutationParams) => {\n            const result = await fetch(`/api/v1/plan/initiate`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ newAfterSellPlanId, promoCode }),\n            }).then((res) => res.json());\n            return result as AcceptPricingPlanResponseBodyType;\n        },\n        onSuccess: (result) => {\n            const { confirmationUrl, immediateTransferSuccess } = result;\n            const success = confirmationUrl || immediateTransferSuccess;\n            if (success) {\n                queryClient.invalidateQueries(['v1/plan/details']);\n                if (immediateTransferSuccess) {\n                    onPossibleImmediatePlanChangeWithoutRedirect();\n                } else if (confirmationUrl) {\n                    // redirect parent page instead of iframe\n                    if (isShopifyEmbedded()) {\n                        redirect.dispatch(Redirect.Action.REMOTE, confirmationUrl);\n                    } else {\n                        throw new Error('Expected app to be inside iframe.');\n                    }\n                }\n            } else {\n                shopify.toast.show('Error updating pricing plan.', { isError: true });\n                if (onErrorBeforeReload) onErrorBeforeReload();\n                window.location.reload();\n            }\n        },\n        onError: (error) => {\n            shopify.toast.show('Error updating pricing plan.', { isError: true });\n            sentryCaptureError(error);\n        },\n    });\n};",
                "filename": "web/client/src/hooks/useAcceptPricingPlan.ts",
                "start_index": 0,
                "end_index": 2646,
                "start_line": 1,
                "end_line": 67,
                "max_line": 67,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { Button, Card, Page, LegacyStack, Text, VerticalStack, Icon } from '@shopify/polaris';\nimport React from 'react';\nimport { PricingOptions } from './PricingOptions';\nimport Star from 'src/shared-components/star';\nimport { MobileAcceptMajor } from '@shopify/polaris-icons';\nimport { clearPromoCodeCookie } from 'src/utils/promo';\nimport { useAcceptPricingPlan } from 'src/hooks/useAcceptPricingPlan';\n\nexport const CustomPricing = ({ aftersellPlanId, pricingPageMessageHtml, promoCode }: CustomPricingProps) => {\n    const { isLoading: isAcceptingPlan, mutateAsync: acceptPricingPlan } = useAcceptPricingPlan({\n        onPossibleImmediatePlanChangeWithoutRedirect: () => {\n            shopify.toast.show('Plan updated successfully!', { duration: 3000 });\n            window.location.reload();\n        },\n        onErrorBeforeReload: () => {\n            // If there was an error accepting the plan, we will assume that the promo code\n            // is invalid and clear the cookie. This means the user will go through the normal\n            // non-promo pricing flow when the page reloads.\n            clearPromoCodeCookie();\n        },\n    });\n\n    return (\n        <Card>\n            <VerticalStack align=\"center\" inlineAlign=\"center\" gap={'4'}>\n                <Text as=\"h5\" variant=\"headingLg\">\n                    Welcome to AfterSell\n                </Text>\n                <div dangerouslySetInnerHTML={{ __html: pricingPageMessageHtml }} />\n                <PricingOptions />\n                <Button\n                    primary\n                    size=\"large\"\n                    loading={isAcceptingPlan}\n                    onClick={() => acceptPricingPlan({ newAfterSellPlanId: aftersellPlanId, promoCode })}\n                >\n                    Continue to AfterSell\n                </Button>\n                <Text as=\"h3\">AfterSell has made over $100M for 7000+ brands...now it\u2019s your turn!</Text>\n                <LegacyStack wrap distribution=\"center\" alignment=\"center\">\n                    <VerticalStack inlineAlign=\"center\">\n                        <StarGroup />\n                        <Text as=\"p\">(600+ reviews)</Text>\n                    </VerticalStack>\n\n                    <IconText\n                        icon={<Icon color=\"success\" source={MobileAcceptMajor} />}\n                        text={'500% ROI money-back guarantee'}\n                    />\n                </LegacyStack>\n            </VerticalStack>\n        </Card>\n    );\n};\nconst StarGroup = () => {\n    return (\n        <div>\n            <Star fill=\"#EEC200\" />\n            <Star fill=\"#EEC200\" />\n            <Star fill=\"#EEC200\" />\n            <Star fill=\"#EEC200\" />\n            <Star fill=\"#EEC200\" />\n        </div>\n    );\n};\nconst IconText = ({ icon, text }) => {\n    return (\n        <div>\n            <div>{icon}</div>\n            <p>{text}</p>\n        </div>\n    );\n};\n\ninterface CustomPricingProps {\n    aftersellPlanId: string;\n    pricingPageMessageHtml: string;\n    promoCode?: string;\n}",
                "filename": "web/client/src/pages/onboarding/components/CustomPricing.tsx",
                "start_index": 0,
                "end_index": 2998,
                "start_line": 1,
                "end_line": 79,
                "max_line": 79,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<>\n            <HorizontalStack gap=\"4\" wrap align=\"center\">\n                <SingleCard\n                    icon={BuyButtonMajor as IconSource}\n                    planName=\"Post Purchase Only\"\n                    planId={availablePlanIds.POST_PURCHASE_ONLY}\n                    planDescription=\"Create post purchase upsells\"\n                    price=\"Free\"\n                    buttonText=\"Try for free\"\n                    priceDescription=\"+ usage up to $799/month\"\n                    hasUsage\n                    openPricingModal={openPricingModal}\n                    benefits={[\n                        'Unlimited offer funnels',\n                        'Customize with widgets',\n                        'Precise targeting',\n                        'A/B testing',\n                        'Robust analytics',\n                    ]}\n                />\n                <SingleCard\n                    icon={CheckoutMajor as IconSource}\n                    planName=\"Checkout Only\"\n                    planId={availablePlanIds.CHECKOUT_ONLY}\n                    planDescription=\"Customize your Shopify checkout\"\n                    price=\"$99\"\n                    buttonText=\"Try for free\"\n                    priceDescription=\"per month\"\n                    openPricingModal={openPricingModal}\n                    benefits={['Unlimited checkout widgets', 'Precise targeting', 'A/B testing', 'Robust analytics']}\n                />",
                "filename": "web/client/src/pages/onboarding/onboarding-pricing.page.tsx",
                "start_index": 11765,
                "end_index": 13200,
                "start_line": 293,
                "end_line": 421,
                "max_line": 461,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "// @ts-nocheck\nfunction calculateBillAmountV1(totalStoreOrders) {\n    if (totalStoreOrders <= 50) return 0;\n    if (totalStoreOrders <= 100) return 7.99;\n    if (totalStoreOrders <= 200) return 14.99;\n    if (totalStoreOrders <= 500) return 24.99;\n    if (totalStoreOrders <= 1000) return 45.99;\n    if (totalStoreOrders <= 2000) return 89.99;\n    if (totalStoreOrders <= 2000) return 89.99;\n    if (totalStoreOrders <= 5000) return 139.99;\n    if (totalStoreOrders <= 10000) return 169.99;\n    if (totalStoreOrders <= 20000) return 214.99;\n    if (totalStoreOrders <= 50000) return 279.99;\n    if (totalStoreOrders <= 100000) return 309.99;\n    return 349.99;\n}\n\nexport const maxTotalPrice = 799.99;\n\nfunction calculateBillAmountV2(totalStoreOrders) {\n    const maxFixedPrice = 149.99;\n    const variablePriceThreshold = 4000;\n    const variablePricePerOrder = 0.03;\n\n    if (totalStoreOrders <= 50) return 0;\n    if (totalStoreOrders <= 100) return 7.99;\n    if (totalStoreOrders <= 200) return 14.99;\n    if (totalStoreOrders <= 500) return 29.99;\n    if (totalStoreOrders <= 1000) return 54.99;\n    if (totalStoreOrders <= 2000) return 99.99;\n    if (totalStoreOrders <= variablePriceThreshold) return maxFixedPrice;\n\n    const ordersAboveThreshold = totalStoreOrders - variablePriceThreshold;\n    const variablePrice = ordersAboveThreshold * variablePricePerOrder;\n    const totalPrice = maxFixedPrice + variablePrice;\n\n    return Math.min(totalPrice, maxTotalPrice);\n}\n\n/**\n * Get the total amount to charge a store based on their number of store orders\n * over the past 30 days. Values are in USD.\n * @param {number} totalStoreOrders - Total number of orders for the store over the past 30 days.\n * @param {(\"v1\"|\"v2\")} billingVersion - Version of billing accepted by the user.\n */\nexport function calculateBillAmount(totalStoreOrders, billingVersion) {\n    switch (billingVersion) {\n        case 'v1':\n            return calculateBillAmountV1(totalStoreOrders);\n        case 'v2':\n            return calculateBillAmountV2(totalStoreOrders);\n        default:\n            throw new Error(`Unknown billing version \"${billingVersion}\"`);\n    }\n}\n\n/**\n * @param {{ customPricingPlan: import(\"../../models/customPricingPlans.model\").CustomPricingPlan }}\n */\nexport function calculateBillAmountFromCustomPlan({ customPricingPlan }) {\n    switch (customPricingPlan.planType) {\n        case 'flat_rate':\n            return customPricingPlan.monthlyBillingAmount;\n        default:\n            throw new Error(`Unknown custom pricing plan type \"${customPricingPlan.planType}\"`);\n    }\n}\n\n/**\n * @param {{ hasAcceptedBillingV2: boolean }}\n */\nfunction getBillingVersion({ hasAcceptedBillingV2 }) {\n    return hasAcceptedBillingV2 ? 'v2' : 'v1';\n}\n\n/**\n * @param {{ customPricingPlan: import(\"../../models/customPricingPlans.model\").CustomPricingPlan|undefined|null|{} }}\n */\nexport function isValidCustomPricingPlan({ customPricingPlan }) {\n    return 'planType' in (customPricingPlan || {});\n}",
                "filename": "web/server/src/utils/billing/calculateBillAmount.ts",
                "start_index": 0,
                "end_index": 2990,
                "start_line": 1,
                "end_line": 93,
                "max_line": 93,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "enum DefaultAfterSellPlanId {\n    LEGACY_V1 = 'LEGACY_V1',\n    LEGACY_V2_799 = 'LEGACY_V2_799',\n    LEGACY_V2_1299 = 'LEGACY_V2_1299',\n\n    // This plan is for local dev and testing only. It is not intended for customers.\n    //\n    // To use this plan, follow these steps:\n    // 1. Accept the post-purchase only plan\n    // 2. On your user document in Mongo, set acceptedAfterSellPlanId: \"INTERNAL_TESTING_SWITH_TO_USAGE_INCLUDED_STATE\"\n    // 3. Go to the billing settings page and accept one of the plans. None of them should be your current plan. You should\n    //      have to accept a Shopify charge.\n    // 4. After accepting the charge, you will be on one of the plans for existing users who were auto-opted into checkout\n    //      These plans use usage charges to manage payment for all features (i.e. $0 recurring charge, even for checkout).\n    //\n    // This testing plan is needed because there is no way in the app to accept one of the usage-included\n    // charges, unless you are already on one of the plans and are switching between them.\n    INTERNAL_TESTING_SWITH_TO_USAGE_INCLUDED_STATE = 'INTERNAL_TESTING_SWITH_TO_USAGE_INCLUDED_STATE',\n\n    POST_PURCHASE_ONLY_FOR_NON_CHECKOUT_USERS = 'POST_PURCHASE_ONLY_FOR_NON_CHECKOUT_USERS',\n    POST_PURCHASE_AND_CHECKOUT_EXISTING_USERS_ADDED_TO_CHECKOUT = 'POST_PURCHASE_AND_CHECKOUT_EXISTING_USERS_ADDED_TO_CHECKOUT',\n    POST_PURCHASE_ONLY_EXISTING_USERS_OPTED_OUT_OF_CHECKOUT = 'POST_PURCHASE_ONLY_EXISTING_USERS_OPTED_OUT_OF_CHECKOUT',\n    CHECKOUT_ONLY_EXISTING_USERS_OPTED_OUT_OF_POST_PURCHASE = 'CHECKOUT_ONLY_EXISTING_USERS_OPTED_OUT_OF_POST_PURCHASE',\n    POST_PURCHASE_ONLY_FOR_CHECKOUT_ELIGIBLE_USERS_AFTER_CHECKOUT_RELEASE = 'POST_PURCHASE_ONLY_FOR_CHECKOUT_ELIGIBLE_USERS_AFTER_CHECKOUT_RELEASE',\n    POST_PURCHASE_AND_CHECKOUT = 'POST_PURCHASE_AND_CHECKOUT',\n    CHECKOUT_ONLY = 'CHECKOUT_ONLY',\n\n    // Added Jan 16, 2023. We are testing to see if having no free plan at all (minimum $7.99 for all users) will work better.\n    POST_PURCHASE_ONLY_NO_FREE_PLAN_JAN_16_2023 = 'POST_PURCHASE_ONLY_NO_FREE_PLAN_JAN_16_2023',\n}\n\nexport enum DefaultShopifyChargeName {\n    // NOTE: this one charge has a lowercase \"s\" in AfterSell. This is from 1.0 users that haven't\n    // accepted new pricing plans. We can't change it.\n    'Aftersell Pricing Plan' = 'Aftersell Pricing Plan',\n    'AfterSell 2.0 Pricing Plan' = 'AfterSell 2.0 Pricing Plan',\n    'AfterSell Pricing' = 'AfterSell Pricing',\n}",
                "filename": "web/server/src/modules/billing/billing.constants.ts",
                "start_index": 906,
                "end_index": 3373,
                "start_line": 28,
                "end_line": 373,
                "max_line": 375,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "static async getUserNeedsToAcceptNewAfterSellPlan({\n        shopifyService,\n    }: {\n        shopifyService: ShopifyService;\n    }): Promise<NeedsNewCharge | DoesNotNeedNewCharge> {\n        const acceptedAfterSellPlanResult = await this.getUserAcceptedAndActiveAfterSellPlan({ shopifyService });\n        if (!acceptedAfterSellPlanResult.success) {\n            return {\n                needsToAcceptNewPlan: true,\n                reason: acceptedAfterSellPlanResult.reason,\n            };\n        }\n        if (acceptedAfterSellPlanResult.data.aftersellPlan.isDeprecated_forceUsersToAcceptNewPlanOnNextLogin) {\n            return {\n                needsToAcceptNewPlan: true,\n                reason: `User is currently on a deprecated AfterSell plan. Current AfterSell plan: \"${acceptedAfterSellPlanResult.data.aftersellPlan.id}\".`,\n            };\n        }\n        const pendingPlanChange = await PendingPlanChangesService.getUserPendingPlanChange({\n            myshopifyDomain: shopifyService.shop,\n        });\n        if (pendingPlanChange) {\n            return {\n                needsToAcceptNewPlan: true,\n                reason: `User has a pending AfterSell plan change. Pending AfterSell plan change: \"${pendingPlanChange.pendingAfterSellPlanId}\".`,\n            };\n        }\n        return {\n            needsToAcceptNewPlan: false,\n        };\n    }\n\n    static getUserAccessiblePaidFeatures({\n        acceptedAfterSellPlan,\n    }: {\n        acceptedAfterSellPlan: AfterSellPlan;\n    }): AfterSellPaidFeature[] {\n        const paidFeatures: AfterSellPaidFeature[] = [];\n        for (const feature of acceptedAfterSellPlan.shopifyCharge.recurringChargeConfigOnChargeAccept.paysForFeatures) {\n            paidFeatures.push(feature);\n        }\n        for (const usageCharge of acceptedAfterSellPlan.monthlyUsageCharges) {\n            paidFeatures.push(usageCharge.paysForFeature);\n        }\n        return paidFeatures;\n    }",
                "filename": "web/server/src/modules/billing/legacy-billing-v2.service.ts",
                "start_index": 7753,
                "end_index": 9683,
                "start_line": 167,
                "end_line": 359,
                "max_line": 360,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "if (hasSellingPlan && !isSubscriptionInCheckout) {\n        // NOTE: this fetching of selling plan groups could cause bugs. The current implementation\n        // is how it was initially implemented. We haven't had any customers encounter issues with this,\n        // but it may come up in the future.\n        //\n        // Current strategy:\n        // - fetch first selling plan group from the product\n        // - fetch first selling plan groups from each variant\n        // - if a variant has a selling plan group, then we assume that it's the same selling plan group as the product\n        //\n        // This is problematic in the case where a variant has a selling plan group that is different from the first\n        // selling plan group on the product.\n        const productWithSellingPlanGroupsPromise = shopifyService.graphql\n            .GetProductSellingPlanGroups({\n                productId: `gid://shopify/Product/${product.id}`,\n            })\n            .then((res) => res.product);\n        const variantSellingPlanGroupsPromise = shopifyService.graphql.GetMultipleVariantsSellingPlanGroups({\n            variantIds: productVariantsIds.map((id) => `gid://shopify/ProductVariant/${id}`),\n        });\n\n        const productWithSellingPlanGroups = await productWithSellingPlanGroupsPromise;\n        const variantSellingPlanGroups = (await variantSellingPlanGroupsPromise).nodes.filter(Boolean);\n\n        sellingPlans = (productWithSellingPlanGroups.sellingPlanGroups.edges[0]?.node?.sellingPlans?.edges || [])\n            .map((edge) => ({\n                id: edge.node.id.split('gid://shopify/SellingPlan/')[1],\n                name: edge.node.name,\n                interval: edge.node.billingPolicy.interval,\n                intervalCount: edge.node.billingPolicy.intervalCount,\n                pricingPolicies: edge.node.pricingPolicies,\n                startCyclePricingPolicy: edge.node.pricingPolicies.length > 0 ? edge.node.pricingPolicies[0] : null,\n            }))\n            .filter((sellingPlan) => sellingPlan !== null);\n\n        preparedVariants = preparedVariants.map((variant) => {\n            const graphqlVariant = variantSellingPlanGroups.find(\n                (node) => node.legacyResourceId === String(variant.id)\n            );\n            const hasSellingPlan = Boolean(graphqlVariant?.sellingPlanGroups.edges.length > 0);\n            return {\n                ...variant,\n                hasSellingPlan,\n            };\n        });\n\n        if (requiresSellingPlan && isSubscriptionInCheckout) {\n            const isAllVariantsSubscriptions = preparedVariants.every((variant) => variant.hasSellingPlan);\n            if (isAllVariantsSubscriptions) return 'SKIP';\n        }\n        subscriptionVariants = preparedVariants.filter((variant) => variant.hasSellingPlan);\n        subscriptionOptions = getOptions(\n            fetchedProduct.options,\n            subscriptionVariants,\n            variantHasOptionV1,\n            showAllOutOfStockVariants\n        );\n    }",
                "filename": "web/server/src/modules/post-purchase-public/post-purchase-public.controller.ts",
                "start_index": 9211,
                "end_index": 12209,
                "start_line": 192,
                "end_line": 1415,
                "max_line": 1418,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "tton primary size=\"large\" onClick={() => handleAcceptPricingPlan()}>\n                                Continue to AfterSell\n                            </Button>\n                        </Box>\n                        <Text color=\"subdued\" variant=\"bodyLg\" as=\"p\">\n                            AfterSell has made <strong>over $50M for 7000+ brands</strong>...now it\u2019s your turn!\n                        </Text>\n                        <HorizontalStack gap=\"6\" blockAlign=\"center\">\n                            <HorizontalStack gap=\"2\" blockAlign=\"center\">\n                                <div className=\"starGroup\">\n                                    <Star fill=\"#EEC200\" />\n                                    <Star fill=\"#EEC200\" />\n                                    <Star fill=\"#EEC200\" />\n                                    <Star fill=\"#EEC200\" />\n                                    <Star fill=\"#EEC200\" />\n                                </div>\n                                <Text color=\"subdued\" variant=\"bodySm\" as=\"p\">\n                                    5.0 (350+ reviews)\n                                </Text>\n                            </HorizontalStack>\n                            <HorizontalStack gap=\"2\" blockAlign=\"center\">\n                                <Icon color=\"success\" source={TickMinor as IconSource} />\n                                <Text color=\"subdued\" variant=\"bodySm\" as=\"p\">\n                                    5x ROI money-back guarantee\n                                </Text>\n                            </HorizontalStack>\n                        </HorizontalStack>\n                    </VerticalStack>\n                </HorizontalStack>\n            </VerticalStack>\n        </Card>\n    );\n};\n\nexport default OnboardingAcceptPricing;",
                "filename": "web/client/src/pages/onboarding/onboarding-pricing.page.tsx",
                "start_index": 17856,
                "end_index": 19632,
                "start_line": 427,
                "end_line": 461,
                "max_line": 461,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "initial_doc_snippets": [
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<span class=\"order-summary-toggle__inner\">\n                        <span class=\"order-summary-toggle__icon-wrapper\">\n                            <svg\n                                width=\"20\"\n                                height=\"19\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__icon\"\n                            >\n                                <path\n                                    d=\"M17.178 13.088H5.453c-.454 0-.91-.364-.91-.818L3.727 1.818H0V0h4.544c.455 0 .91.364.91.818l.09 1.272h13.45c.274 0 .547.09.73.364.18.182.27.454.18.727l-1.817 9.18c-.09.455-.455.728-.91.728zM6.27 11.27h10.09l1.454-7.362H5.634l.637 7.362zm.092 7.715c1.004 0 1.818-.813 1.818-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817zm9.18 0c1.004 0 1.817-.813 1.817-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--show\">\n                            <span>Show order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"6\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M.504 1.813l4.358 3.845.496.438.496-.438 4.642-4.096L9.504.438 4.862 4.534h.992L1.496.69.504 1.812z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--hide\">\n                            <span>Hide order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"7\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M6.138.876L5.642.438l-.496.438L.504 4.972l.992 1.124L6.138 2l-.496.436 3.862 3.408.992-1.122L6.138.876z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span\n                            class=\"order-summary-toggle__total-recap total-recap\"\n                            data-order-summary-section=\"toggle-total-recap\"\n                        >\n                            <span class=\"total-recap__final-price\" data-checkout-payment-due-target=\"5073\">$50.73</span>\n                        </span>\n                    </span>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 242214,
                "end_index": 245205,
                "start_line": 6097,
                "end_line": 6446,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<tbody class=\"total-line-table__tbody\">\n                                            <tr class=\"total-line total-line--subtotal\">\n                                                <th class=\"total-line__name\" scope=\"row\">Subtotal</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-subtotal-price-target=\"4299\"\n                                                    >\n                                                        $42.99\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--shipping\">\n                                                <th class=\"total-line__name\" scope=\"row\">\n                                                    <span> Shipping </span>\n                                                </th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-shipping-target=\"0\"\n                                                    >\n                                                        Free\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--taxes\" data-checkout-taxes=\"\">\n                                                <th class=\"total-line__name\" scope=\"row\">Taxes</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-taxes-target=\"774\"\n                                                        >$7.74</span\n                                                    >\n                                                </td>\n                                            </tr>\n                                        </tbody>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 333285,
                "end_index": 335837,
                "start_line": 6396,
                "end_line": 6433,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/server` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 999,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<th class=\"product__description\" scope=\"row\">\n                                                        <span class=\"product__description__name order-summary__emphasis\"\n                                                            >Product Name</span\n                                                        >\n                                                        <span\n                                                            class=\"product__description__variant order-summary__small-text\"\n                                                            >Variant Name</span\n                                                        >\n                                                    </th>\n                                                    <td class=\"product__quantity visually-hidden\">1</td>\n                                                    <td class=\"product__price\">\n                                                        <span class=\"order-summary__emphasis\">$42.99</span>\n                                                    </td>\n                                                </tr>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 331038,
                "end_index": 332129,
                "start_line": 6363,
                "end_line": 6376,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <!-- Shopify App Bridge [START] -->\n        <meta name=\"shopify-api-key\" content=\"%SHOPIFY_API_KEY%\" />",
                "filename": "web/client/index.html",
                "start_index": 38,
                "end_index": 156,
                "start_line": 4,
                "end_line": 6,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<tfoot class=\"total-line-table__footer\">\n                                            <tr class=\"total-line\">\n                                                <th class=\"total-line__name payment-due-label\" scope=\"row\">\n                                                    <span class=\"payment-due-label__total\">Total</span>\n                                                </th>\n                                                <td class=\"total-line__price payment-due\">\n                                                    <span class=\"payment-due__currency\">USD</span>\n                                                    <span\n                                                        class=\"payment-due__price\"\n                                                        data-checkout-payment-due-target=\"5073\"\n                                                    >\n                                                        $50.73\n                                                    </span>\n                                                </td>\n                                            </tr>\n                                        </tfoot>\n                                    </table>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 335878,
                "end_index": 337054,
                "start_line": 6434,
                "end_line": 6450,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<button\n                class=\"order-summary-toggle order-summary-toggle--show shown-if-js\"\n                data-trekkie-id=\"order_summary_toggle\"\n                aria-expanded=\"false\"\n                aria-controls=\"order-summary\"\n                data-drawer-toggle=\"[data-order-summary]\"\n            >",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241855,
                "end_index": 242157,
                "start_line": 6089,
                "end_line": 6488,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<table class=\"total-line-table\">\n                                        <caption class=\"visually-hidden\">\n                                            Cost summary\n                                        </caption>\n                                        <thead>\n                                            <tr>\n                                                <th scope=\"col\"><span class=\"visually-hidden\">Description</span></th>\n                                                <th scope=\"col\"><span class=\"visually-hidden\">Price</span></th>\n                                            </tr>\n                                        </thead>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 332604,
                "end_index": 333244,
                "start_line": 6386,
                "end_line": 6395,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# AfterSell\n\n### All Docs on Notion \ud83d\udc49 [AfterSell Notion Docs](https://www.notion.so/aftersell/AfterSell-Docs-9d43566167b5426d86b5983925872953?pvs=4)",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 148,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"order-summary__section__content\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323949,
                "end_index": 323994,
                "start_line": 6297,
                "end_line": 6297,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<html\n    lang=\"en\"\n    dir=\"ltr\"\n    class=\"js desktop page--no-banner page--logo-main page--show page--show card-fields cors svg opacity placeholder no-touchevents displaytable display-table generatedcontent cssanimations flexbox no-flexboxtweener anyflexbox shopemoji floating-labels\"\n>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 0,
                "end_index": 289,
                "start_line": 1,
                "end_line": 6518,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<body class=\"aftersell-preview\">\n        <a href=\"#main-header\" class=\"skip-to-content\"> Skip to content </a>\n\n        <header class=\"banner\" data-header=\"\" role=\"banner\">\n            <div class=\"wrap\">\n                <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n            </div>\n        </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241387,
                "end_index": 241804,
                "start_line": 6077,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"hidden\">\n                            <span class=\"visually-hidden\" id=\"forwarding-external-new-window-message\">\n                                Opens external website in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-new-window-message\">\n                                Opens in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-external-message\">\n                                Opens external website.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"checkout-context-step-one\">\n                                Customer information - Checkout\n                            </span>\n                        </div>\n                    </main>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 322226,
                "end_index": 323078,
                "start_line": 6265,
                "end_line": 6282,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# [[[ --- CLIENT --- ]]]\nFROM node:18.16.1-alpine AS client\nARG SHOPIFY_API_KEY\nENV SHOPIFY_API_KEY=$SHOPIFY_API_KEY\nARG HOST\nENV HOST=$HOST\nARG NODE_ENV\nENV NODE_ENV=$NODE_ENV\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/client/package.json ./web/client/package.json\nCOPY web/client/yarn.lock ./web/client/yarn.lock\nRUN cd web/client && yarn install --frozen-lockfile --production=false\nCOPY extensions-web-common/package.json ./extensions-web-common/package.json\nCOPY extensions-web-common/yarn.lock ./extensions-web-common/yarn.lock\nRUN cd extensions-web-common && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY extensions/post-purchase ./extensions/post-purchase\nCOPY extensions-web-common/post-purchase ./extensions-web-common/post-purchase\nCOPY extensions-web-common/checkout ./extensions-web-common/checkout\nCOPY extensions-web-common/shared ./extensions-web-common/shared\nCOPY extensions-web-common/ty-page ./extensions-web-common/ty-page\nCOPY web/client ./web/client\nRUN cd web/client && yarn build\n\n# [[[ --- TY PAGE --- ]]]\nFROM node:18.16.1-alpine AS ty-page\nARG HOST\nENV HOST=$HOST\nWORKDIR /usr/src/app\nCOPY web/widgets/package.json ./web/widgets/package.json\nCOPY web/widgets/yarn.lock ./web/widgets/yarn.lock\nRUN cd web/widgets && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY web/widgets ./web/widgets\nRUN cd web/widgets && yarn build\n\n# [[[ --- SERVER --- ]]]\nFROM node:18.16.1-alpine AS server\nWORKDIR /usr/src/app\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=false\nCOPY web/server ./web/server\nCOPY web/common ./web/common\nRUN cd web/server && yarn build\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM node:18.16.1-alpine AS final\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=true\nCOPY --from=server /usr/src/app/web/server/build ./web/server/build\nCOPY --from=ty-page /usr/src/app/web/widgets/dist ./web/server/build/server/dist\nCOPY --from=client /usr/src/app/web/client/dist ./web/server/build/server/dist/client\nCOPY package.json ./package.json\nCMD [\"yarn\", \"start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2514,
                "start_line": 1,
                "end_line": 61,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<table class=\"product-table\">\n                                            <caption class=\"visually-hidden\">\n                                                Shopping cart\n                                            </caption>\n                                            <thead class=\"product-table__header\">\n                                                <tr>\n                                                    <th scope=\"col\">\n                                                        <span class=\"visually-hidden\">Product image</span>\n                                                    </th>\n                                                    <th scope=\"col\">\n                                                        <span class=\"visually-hidden\">Description</span>\n                                                    </th>\n                                                    <th scope=\"col\"><span class=\"visually-hidden\">Quantity</span></th>\n                                                    <th scope=\"col\"><span class=\"visually-hidden\">Price</span></th>\n                                                </tr>\n                                            </thead>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 324035,
                "end_index": 325202,
                "start_line": 6298,
                "end_line": 6313,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"order-summary order-summary--is-collapsed\" data-order-summary=\"\">\n                            <h2 class=\"visually-hidden\">Order summary</h2>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323587,
                "end_index": 323739,
                "start_line": 6292,
                "end_line": 6293,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"step__sections\">\n                                <div class=\"section\">\n                                    <div class=\"section__header os-header\">\n                                        <svg\n                                            width=\"56\"\n                                            height=\"56\"\n                                            viewBox=\"0 0 56 56\"\n                                            fill=\"none\"\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                            <circle cx=\"28\" cy=\"28\" r=\"26\" stroke=\"#E5E5E5\" stroke-width=\"2.29412\" />\n                                            <path\n                                                fill-rule=\"evenodd\"\n                                                clip-rule=\"evenodd\"\n                                                d=\"M22.4811 37.3603L16.3636 31.3947C15.5663 30.6172 15.5663 29.3605 16.3636 28.583C17.1609 27.8055 18.4497 27.8055 19.247 28.583L23.8066 33.0293L36.6493 18.7538C37.3834 17.9186 38.6701 17.8231 39.5225 18.537C40.379 19.2529 40.4789 20.5056 39.7448 21.3388L25.4706 37.2469C25.1015 37.6685 24.5672 37.9191 24.0003 37.9409C23.3825 37.9429 22.8625 37.7341 22.4811 37.3603Z\"\n                                                fill=\"#008060\"\n                                                stroke=\"#E5E5E5\"\n                                                stroke-width=\"0.764706\"\n                                            />\n                                        </svg>\n                                        <div class=\"os-header__heading\">\n                                            <span class=\"os-order-number\"> Order #1001 </span>\n                                            <h2 class=\"os-header__title\" id=\"main-header\" tabindex=\"-1\">\n                                                Thank you {{Customer Name}}!\n                                            </h2>\n                                        </div>\n                                    </div>\n                                </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245858,
                "end_index": 247957,
                "start_line": 6161,
                "end_line": 6451,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"order-summary__section order-summary__section--product-list\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323839,
                "end_index": 323912,
                "start_line": 6296,
                "end_line": 6296,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "intial_documentation_sources": {
            "shopify": {
                "collection": "shopify_documentation",
                "reason_for_relevance": "The documentation may contain information on how to update the Shopify pricing page and ensure correct integration with the app's pricing structure."
            }
        },
        "external_documentation_snippets": {
            "external_shopify": [
                {
                    "code": "Troubleshooting\n Theme Store\n Pricing and payments\n Being able to clearly see pricing and discounts, as well as payment options, are important factors for customers making purchases from a merchant's store.\n Some merchants might sell products in specific quantities or measurements, or as part of a selling plan. To support this, Shopify provides merchants the option to set up unit pricing, as well as Subscriptions and Pre-orders and Try before you buy.\n To help make the payment process easier, Shopify integrates with payment providers that can offer accelerated checkouts, and some merchants can utilize Shop Pay to allow customers to pay in installments.\n Was this page helpful?\n YesNo\n Updates & News\n Developer changelog",
                    "filename": "docs/themes/pricing-payments/content.txt",
                    "start_index": 0,
                    "end_index": 728,
                    "start_line": 1,
                    "end_line": 10,
                    "max_line": 10,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product description\n Cart and checkout\n Onboard merchants\n Post checkout\n Overview\n Order data\n Billing\n Billing merchants\n Caution\n The merchant-facing sales channel app referenced in this tutorial isn't compatible with Shopify CLI 3, and can't be previewed using Shopify development tools. You can use the app and these tutorials as reference material to build a CLI 3-compatible app using the same patterns.\n Merchants can sell their products on your marketplace. Now you want to set up a billing model so that you can charge merchants a sales fee.\n In this tutorial, you'll take a fixed fee for each order made in the marketplace. You'll use a capped amount of $20 and charge a $0.5 fee for each order. This provides an approachable billing structure for merchants. It's similar to a monthly subscription of $20, but the merchant doesn\u2019t pay unless your marketplace has provided them with orders.\n What you'll learn\n After finishing this tutorial, you'll know how to do the following:\n Create a usage plan for billing merchants who make sales on your marketplace\n Add a monthly subscription plan for the marketplace\n Bill merchants a usage fee\n Requirements\n You've completed the tutorial for storing order data.\n Step 1: Set up subscription handlers\n To bill merchants for selling on your marketplace, you need to create the mutation that creates subscriptions and usage charges using the Admin API.\n In server/handlers/mutations create a file called create-app-subscription.js.\n In server/handlers/mutations/create-app-subscription.js, add a method that calls the appSubscriptionCreate mutation and creates a subscription with a usage pricing plan.\n The plan requires terms that tell merchants how you will be billing them, as well as a capped amount which is the maximum amount that you can charge the merchant per month. It also requires a return URL, which redirects the merchant back to your app after accepting the subscription in the Shopify admin. The method should return the subscription ID, confirmation URL, and line item ID.\n server/handlers/mutations/create-app-subscription.js\n 1 import {callShopifyGraphqlAPI} from '../client';\n 2 import dotenv from 'dotenv';\n 3 dotenv.config();\n 4\n 5 const APP_SUBSCRIPTION_CREATE = `\n 6\n    mutation AppSubscriptionCreate(\n 7\n      $name: String!\n 8\n      $returnUrl: URL!\n 9\n      $lineItems: [AppSubscriptionLineItemInput!]!\n 10\n    ) {\n 11\n      appSubscriptionCreate(\n 12\n        name: $name\n 13\n        test: true\n 14\n        returnUrl: $returnUrl\n 15\n        lineItems: $lineItems\n 16\n      ) {\n 17\n        userErrors {\n 18\n          message\n 19\n        }\n 20\n        confirmationUrl\n 21\n        appSubscription {\n 22\n          id\n 23\n          lineItems {\n 24\n            id\n 25\n          }\n 26\n        }\n 27\n      }\n 28\n    }\n 29 `;\n 30\n 31 export const createAppSubscription = async (shop, token, appHandle) => {\n 32\n    const variables = {\n 33\n      name: 'Mockingbird Marketplace Fee',\n 34\n      returnUrl: `https://${shop}/admin/apps/${appHandle}`,\n 35\n      lineItems: [\n 36\n        {\n 37\n          plan: {\n 38\n            appUsagePricingDetails: {\n 39\n              cappedAmount: {\n 40\n                amount: 20,\n 41\n                currencyCode: 'USD',\n 42\n              },\n 43\n              terms: '$0.5 per order',\n 44\n            },\n 45\n          },\n 46\n        },\n 47\n      ],\n 48\n    };\n 49\n 50\n    const resp = await callShopifyGraphqlAPI(shop, token, {\n 51\n      query: APP_SUBSCRIPTION_CREATE,\n 52\n      variables,\n 53\n    });\n 54\n    return {\n 55\n      subscriptionId: resp.body.data.appSubscriptionCreate.appSubscription.id,\n 56\n      subscriptionConfirmationUrl:\n 57\n        resp.body.data.appSubscriptionCreate.confirmationUrl,\n 58\n      subscriptionLineItemId:\n 59\n        resp.body.data.appSubscriptionCreate.appSubscription.lineItems[0].id,\n 60\n    };\n 61 };\n In server/handlers/rest create a file called get-app-subscription.js.\n In server/handlers/rest/get-app-subscription.js, export a method that gets the recurring application charge information given a subscription ID.\n You can use this to get the app subscription details after the subscription's created using the GraphQL Admin API mutation.\n server/handlers/rest/get-app-subscription.js\n 1 import {callShopifyRestAPI, HTTP_GET_METHOD} from '../client';\n 2\n 3 export const getAppSubscription = async (shop, token, id) => {\n 4\n    const resp = await callShopifyRestAPI(\n 5\n      shop,\n 6\n      token,\n 7\n      HTTP_GET_METHOD,\n 8\n      `recurring_application_charges/${id}`,\n 9\n    );\n 10\n 11\n    return resp.body.recurring_application_charge;\n 12 };\n In server/handlers/index.js, export the newly-created method from the handler module.\n server/handlers/index.js\n 1 // ...\n 2 import {createAppSubscription} from './mutations/create-app-subscription';\n 3 import {getAppSubscription} from './rest/get-app-subscription';\n 4\n 5 export {\n 6\n   // ...\n 7\n   createAppSubscription,\n 8\n   getAppSubscription,\n 9 };\n Step 2: Add a subscription confirmation URL to the internal API\n In the channel app, you need to redirect merchants to the subscription confirmation page so that they can accept the subscription.\n The confirmation URL is returned when you create the subscription, and expires after two days if the merchant has not approved the subscription. You can check the status of the confirmation URL by fetching the app subscription status. If it's stale, then you can create a new subscription.\n You'll need to update the Shop data model to store the subscription ID and line item ID, which you can subsequently use to bill merchants usage charges.\n Create a new sequelize migration that you'll use to add subscriptionId and subscriptionLineItemId columns to your Shop data model.\n Terminal\n $ npx sequelize migration:create --name add-shop-subscription-info\n The command creates a new file in your app's /migrations folder with following name: {TIMESTAMP}-add-shop-subscription-info.js\n Update the migration file to add the columns to your Shops data table.\n migrations/{TIMESTAMP}-add-shop-subscription-info.js\n 1 'use strict';\n 2 module.exports = {\n 3\n    up: async (queryInterface, Sequelize) => {\n 4\n      await queryInterface.addColumn('Shops', 'subscriptionId', {\n 5\n        type: Sequelize.STRING,\n 6\n      });\n 7\n      await queryInterface.addColumn('Shops', 'subscriptionLineItemId', {\n 8\n        type: Sequelize.STRING,\n 9\n      });\n 10\n    },\n 11\n 12\n    down: async (queryInterface) => {\n 13\n      await queryInterface.removeColumn('Shops', 'subscriptionId');\n 14\n      await queryInterface.removeColumn('Shops', 'subscriptionLineItemId');\n 15\n    },\n 16 };\n Add the new attributes to your Shop data model.\n models/shop.js\n 1 // ...\n 2 module.exports = (sequelize, DataTypes) => {\n 3\n    // ...\n 4\n    Shop.init(\n 5\n      {\n 6\n        // ...\n 7\n        subscriptionId: DataTypes.STRING,\n 8\n        subscriptionLineItemId: DataTypes.STRING,\n 9\n      },\n 10\n      // ...\n 11\n    );\n 12\n    return Shop;\n 13 };\n Run the migration to write the changes to your database.\n Terminal\n $ npx sequelize db:migrate\n In server/helpers.js, create a new method called getNewSubscriptionConfirmationUrl that creates a new app subscription, saves the details to the database, and returns a confirmation URL.\n server/helpers.js\n 1 // ...\n 2 import {createAppSubscription, getAppHandle} from './handlers';\n 3 import db from '../models';\n 4\n 5 // ...\n 6 export async function getNewSubscriptionConfirmationUrl(shop, accessToken) {\n 7\n    const appHandle = await getAppHandle(shop, accessToken);\n 8\n    const {subscriptionId, subscriptionConfirmationUrl, subscriptionLineItemId} =\n 9\n      await createAppSubscription(shop, accessToken, appHandle);\n 10\n 11\n    await db.Shop.update(\n 12\n      {subscriptionId, subscriptionLineItemId},\n 13\n      {where: {domain: shop}},\n 14\n    );\n 15\n 16\n    return subscriptionConfirmationUrl;\n 17 }\n In server/graphql/schema.js, create a new AdminShopSubscription type that contains fields for the confirmation URL and a Boolean to indicate whether the subscription is accepted.\n server/graphql/schema.js\n 1 export const schemaString = `\n 2 type AdminShopSubscription {\n 3\n   confirmationUrl: String\n 4\n   accepted: Boolean!\n 5 }\n 6 // ...\n 7 type AdminShop {\n 8\n   // ...\n 9\n   subscription: AdminShopSubscription!\n 10 }\n 11 // ...\n 12 `;\n In server/graphql/resolvers.js, add a subscription resolver to the AdminShop type.\n The resolver returns a confirmation URL for an app subscription, and whether the app subscription is accepted. Since the adminShop resolver on the Query type returns the shop details from the database, you can get the subscriptionId from the first parameter.\n server/graphql/resolvers.js\n 1 import {parseGid} from '@shopify/admin-graphql-api-utilities';\n 2 import {getAppSubscription} from '../handlers';\n 3 import {getNewSubscriptionConfirmationUrl} from '../helpers';\n 4\n 5 export const resolvers = {\n 6\n    // ...\n 7\n    AdminShop: {\n 8\n      // ...\n 9\n      subscription: async ({domain, accessToken, subscriptionId}) => {\n 10\n        if (!subscriptionId) {\n 11\n          const confirmationUrl = await getNewSubscriptionConfirmationUrl(\n 12\n            domain,\n 13\n            accessToken,\n 14\n          );\n 15\n          return {\n 16\n            confirmationUrl,\n 17\n            accepted: false,\n 18\n          };\n 19\n        }\n 20\n        const {status, confirmation_url} = await getAppSubscription(\n 21\n          domain,\n 22\n          accessToken,\n 23\n          parseGid(subscriptionId),\n 24\n        );\n 25\n        if (status === 'pending') {\n 26\n          return {\n 27\n            confirmationUrl: confirmation_url,\n 28\n            accepted: false,\n 29\n          };\n 30\n        }\n 31\n        if (status === 'active' || status === 'accepted') {\n 32\n          return {\n 33\n            accepted: true,\n 34\n          };\n 35\n        }\n 36\n 37\n        const confirmationUrl = await getNewSubscriptionConfirmationUrl(\n 38\n          domain,\n 39\n          accessToken,\n 40\n        );\n 41\n        return {\n 42\n          confirmationUrl,\n 43\n          accepted: false,\n 44\n        };\n 45\n      },\n 46\n    },\n 47\n    // ...\n 48 };\n Step 3: Add the subscription to the channel app\n You can update the merchant onboarding page to surface information about the billing agreement that you added to the internal GraphQL API.\n If the subscription is accepted, then mark the item in the onboarding checklist as completed. Otherwise, you'll redirect the merchant to the subscriptionConfirmationUrl so that they can accept the subscription.\n In app/src/sections/Onboarding/components/OnboardingInfoCard.jsx update the OnboardingInfoCard component to include information about the billing agreement.\n app/src/sections/Onboarding/components/OnboardingInfoCard.jsx\n 1 import {BillingStatementDollarMajor} from '@shopify/polaris-icons';\n 2\n 3 const OnboardingInfoCard = ({ onboardingInfoCompleted, state }) => {\n 4\n    // ...\n 5\n    return (\n 6\n      <OnboardingCard\n 7\n        title=\"What you need to know before you start\"\n 8\n        state={state}\n 9\n      >\n 10\n        <OnboardingInfo\n 11\n          completed={onboardingInfoCompleted}\n 12\n          items={[\n 13\n            // ...\n 14\n            {\n 15\n              icon: {\n 16\n                color: 'subdued',\n 17\n                source: BillingStatementDollarMajor,\n 18\n              },\n 19\n              title: 'Every order made through Mockingbird will have a $0.50 fee',\n 20\n              content: (\n 21\n                <p>\n 22\n                  The fee will be charged each time a buyer completes a checkout\n 23\n                  initiated in the marketplace, and will not be credited for\n 24\n                  refunded orders. You will be charged every month, up to a\n 25\n                  maximum of $20.00.\n 26\n                </p>\n 27\n              ),\n 28\n            },\n 29\n          ]}\n 30\n          // ...\n 31\n        />\n 32\n     </OnboardingCard>\n 33\n    );\n 34 };\n The onboarding information card should display information about the billing agreement. The following is an example:\n In app/src/sections/Onboarding/components/OnboardingChecklistCard.jsx, update the OnboardingChecklistCard component to accept props for the subscription confirmation URL and whether the subscription is accepted.\n The component should render an item for the subscription agreement, which redirects to the confirmation URL on action.",
                    "filename": "docs/marketplaces/post-checkout/bill-merchants/content.txt",
                    "start_index": 0,
                    "end_index": 12367,
                    "start_line": 1,
                    "end_line": 449,
                    "max_line": 825,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Discounts\n Subscriptions\n Overview\n Add subscriptions to your theme\n Subscription UX guidelines\n Pre-orders and Try Before You Buy\n Shop Pay Installments\n Accelerated checkout\n B2B\n Unit pricing\n Subscription UX guidelines\n A great customer-facing user experience (UX) for purchasing a subscription is important to the success of our merchants. This guide explains the key principles of subscription needs and component-level guidelines for implementing subscription user interfaces (UIs).\n User experience principles\n To provide a good experience when purchasing subscriptions and gain trust from customers, make sure to implement the following UX principles:\n Create a visible hierarchy: Customers should be able to clearly identify the savings of a subscription plan, the selling plan options, and the terms and conditions.\n Disclose information progressively and logically: Customers should have a sense of progression in subscription selection as their decisions clearly influence subsequent choices. Adapt the information shown in the customer flow to communicate subscriptions clearly and concisely.\n Provide a seamless integration: The subscriptions UI should be integrated into the theme\u2019s existing design system.\n Work with merchants' existing workflows: Shopify provides the tooling for apps to build subscription experiences. Subscription experiences can be accessed directly from the Shopify admin. This allows merchants to access your app from the surface areas they are familiar with.\n If a resource exists in Shopify, don't duplicate it in your app: Shopify-managed resources such as customers, discounts, and products should be managed in a single place to reduce complex workflows and duplication.\n User interface guidelines\n Before you integrate your subscription app into a theme, familiarize yourself with the UI guidelines and best practices that are associated with each component.\n Apps should consider how subscription products appear in multiple places on the online store, such as product pages, collection pages, search results, featured product sections on the home page, and quick view modals on product cards. Surfacing potential subscription savings and pricing in these areas can further encourage customers to subscribe.\n Subscription information is displayed in the following components of the online store:\n Product forms\n Cart items\n Order details\n The following sections include guidance for displaying prices, styling subscription UI components, and presenting multiple subscriptions. In each section, the relevant Liquid properties needed to create each component are also referenced.\n Product forms\n The product form allows a customer to select their subscription. This is where the merchant can provide clarity and more details for a product and its available variants. Product forms are used in product pages, featured product sections on home pages, and quick view modals on product cards.\n The subcomponents of a product form include the following:\n A. Price\n B. Selling plan selection\n C. Selling plan details\n D. Main call-to-action\n Price\n Customers should be able to clearly identify the price of a subscription.\n # UI element Liquid properties and information UI guidelines\n 1 Price selling_plan_allocation.price Reflect the price details from the selected subscription.\n 2 Compare at price selling_plan_allocation.compare_at_price\n 3 Per delivery price selling_plan_allocation.per_delivery_price\n \n Displays only when the value is different from price. This occurs when the selling plan is a prepaid subscription.\n 4 Unit price selling_plan_allocation.unit_price\n \n Unit price values may differ between sellingPlanAllocations. Unit measurement information is on the variant object, as it does not change based on sellingPlan.\n 5 Subscription badge selling_plan.recurring_deliveries\n \n The badge shown when the selling plan involves recurring deliveries (subscription). Provide a contextual subscription badge or label to help differentiate against a one-time subscription.\n \n To reduce the clutter on a product page, don't display a badge when the item can only be purchased as a subscription. Rely on other ways to express this detail.\n 6 Price adjustment selling_plan.price_adjustment\n \n The object includes information on whether the adjustment is price or percentage based. This is used instead of sale price. Consider adding \"subscription savings\" details to highlight the subscription's value. For example, \"Subscription - Save $3.00\" or \"Subscription - Save 10%\".\n \n For subscriptions with a pricing policy that changes over time, express the largest savings. For example, \"Save up to 30%\". For more information, refer to Communicating changes in price over time.\n Pricing patterns\n A subscription usually comes with savings to encourage customers to purchase products. Two common patterns for displaying a subscription's pricing information are a main price component and inline pricing. These patterns can be implemented at the same time in a design, but this can be a challenge in situations where you don't have control over the codebase for both the app and the theme.\n Tip\n The inline pricing pattern is useful for subscription apps that integrate into a third-party theme codebase.\n Regardless of your approach to displaying prices to customers, the following points should guide your implementation:\n The price of a subscription is clearly visible when a customer has selected a selling plan from a product form.\n For products with unit pricing, ensure that any change to the unit price from a subscription is displayed.\n If an item is a prepaid item, then display the price per delivery. This enables customers to better compare the price difference between one-time purchases and prepaid items.\n MAIN PRICE COMPONENT\n In this approach, there is a main price component on the page that's updated when a customer interacts with a selling plan selector and product variant selection.\n To help customers understand the price of products that they purchase, do the following:\n Clearly display the subscription item's price and any applicable savings compared to the price of a one-time purchase.\n Add a subscription badge to the component to help clarify that the savings are conditional to the purchase of a subscription.\n INLINE PRICING\n In this approach, pricing information is displayed inline or close to the selling plan selection. The price updates in response to changes in selling plan and product variant selection.\n This approach makes a strong association between the effects of choosing a selling plan and the price. The positioning of the price is also preferable for mobile shopping, where smaller screen sizes mean that the main price component and price updates might not be in view.\n This approach is useful for subscription apps that integrate into the codebase of third-party themes. Because the pricing information is contained within a selling plan selector that the app controls and injects, this approach can help to avoid conflicts between the app's and the theme's respective scripts.\n Selling plan selection\n Customers should be able to clearly identify their subscription options:\n # UI element Liquid properties and information UI guidelines\n 1 subscriptions label product.requires_selling_plan\n \n product.selling_plan_groups One-time subscriptions and selling plan groups are considered different subscriptions. Use the term subscriptions in your own designs.\n 2 One-time subscription product.requires_selling_plan\n \n If the property is false, then at least 1 variant can be purchased as a one-time purchase and the one-time subscription should be presented in the UI. Group behavior\n \n On the first page load, select the one-time subscription by default. When the customer interacts with the UI, consider collapsing the unselected group to make good usage of space. Disable the selling plan group selection when it isn't available for a given variant.\n \n Group layout\n \n Prioritize displaying subscriptions in a vertically stacked list to make them readable on all devices. When displayed side-by-side, the information can be crowded on smaller screens.\n \n Group style\n \n Consider displaying subscriptions as radio inputs instead of buttons. Buttons can easily compete with the product form\u2019s call-to-action (submit button).\n 3 Selling plan group name selling_plan_group.name\n \n Always make this value visible. For more information, refer to Selling plan group name.\n 4 Inline price selling_plan_allocation.per_delivery_price\n \n Using the per_delivery_price is a more relevant comparison between prepaid subscriptions and one-time purchases. Showing the price of selling plans inline makes it easier for customers to compare subscriptions.\n \n Show \"each\" next to the price for both one-time subscriptions and selling plan groups to maintain consistency and clarity among similar text information.\n \n For subscriptions with a pricing policy that changes over time, add \"from\" before the inline pricing to clearly communicate the lowest price of the selling plan group. For example, \"from $7.00\". For more information, refer to Communicating changes in price over time.\n 5 Selling plan option name selling_plan_option.name Contextualize the type of selling plan option.\n \n Displaying selling plan options\n \n Selling plan option values are often written in a way that assumes that the option name is also visible to the customer. For example:\n \n Name: \"Delivery every\"\n Option: \"Month\"\n Option: \"Week\"\n Never hide the option names. Certain site designs will hide form labels to make a page look clean, but this can result in the values being presented with no context.\n 6 Selling plan option value selling_plan_option.value\n \n For more information, refer to Display selling plan option values. Don't express exact prices in option values, such as \"Save $5 a week\", because the values won't be accurate if the currency changes.\n \n Expressing percentages is possible because they stay consistent even if the currency changes. For more information, refer to Considerations for currency switching and price rounding.\n subscriptions label\n Show the subscriptions label when the following conditions apply:\n A one-time purchase exists and there's at least one sellingPlanGroups.\n A one-time purchase isn't an option, but there are multiple sellingPlanGroups.\n Shopify doesn't show the subscriptions label when the following conditions apply:\n There are no selling plan groups.\n The product is subscription-only and there's only 1 selling plan group. In this case, the sellingPlanGroup\u2019s name remains in its position, but without the radio input.\n Subscription-only use case\n Keep the selling group name and the inline price within the selector container. This sustains a stronger relationship between subscription selection and per_delivery_price, and maintains a consistent approach across different use cases:\n Selling plan group name\n Selling plan names should make clear the benefit of signing up for a subscription. For example, \"Subscribe and save 10%\". This incentivizes customers to make a bigger commitment in comparison to one-time subscriptions.\n Because the Selling plan API allows for multiple selling plan groups on a product, selling plan group names are used to differentiate subscriptions.\n Display selling plan option values\n It's required to display all of the option values at a glance from a group. Consider adapting the component layout to optimize readability.\n Components should adapt to the number of options being shown. When there are many options to choose from, an appropriate component should be selected to enable customers to view all options easily. Where there is a small number of options, a different component may be used. When possible, apply the appropriate layout to all values within a selling plan group for consistency:\n 4 options or less: Show each option as a radio button to allow customers to view what\u2019s available.\n More than 4 options: Use a select dropdown to emphasize the customer's selection and hide other options within the collapsed dropdown.\n UI UPDATE ON VARIANT CHANGE\n A product\u2019s variants might not all support the same subscription options. As a customer changes their variant selection, the components should update to make clear which subscription options are available and unavailable.\n When a selected option within a selling plan group is unavailable, three events should happen:\n The unavailable options become unselected and require the customer to make a new selection to successfully submit the form.\n The unavailable options for the selected variant are disabled.\n The form submission button is enabled. Disabling the button removes the ability to display an error message and instead displays the product as unavailable, which is false. Let the customer click the button but prevent them from adding the product to the cart. Then, anchor and scroll back to the faulty UI area and display a message that describes why the process can't complete and what the customer needs to do to proceed.\n Selling plan details\n Display important subscription terms and selections to customers. The subscription summary confirms a customer's selections, shows any conditions, and helps build trust in the brand.\n # UI element API properties and information UI guidelines\n 1 Recurring price line selling_plan_allocation.price_adjustments\n \n selling_plan.price_adjustments \n \n The selling_plan contains information on how a plan affects product prices, while the selling_plan_allocation describes the price for the variant to which the selling plan is applied. Express the number of payment cycles at the current price, and communicate what the price will be in the future. For example, first payment $6.00, then $9.00.\n \n Include the word \"each\" to clarify when the number of independent recurring payment cycles is greater than 1. For example, first 3 payments $7.00 each, then $9.00.\n \n Use \"free\" when the value is $0.00. This mirrors natural speech and helps customers understand the element. For example, first payment free, then $9.00.\n 2 Selling plan description selling_plan.description\n \n Merchants might use this field for promotional text. For example, they might use it for marketing terms, a call-to-action, or preemptively answering questions about cancellation policies or refunds.\n \n For more information, refer to Subscription policy link. Don't express exact prices in option values, for example, \"Save $5 a week\". For more information, refer to Considerations for currency switching and price rounding.\n \n Consider including a link to the subscription policy in the description. Merchants might have a more detailed subscription policy that needs to be accessed by customers.\n \n For subscriptions with a pricing policy that changes over time, for example, \"First month free, then save 10% on renewals\", communicate any future price changes clearly on the product page. For more information, refer to Communicating changes in price over time.\n Communicating changes in price over time\n Selling plans can have multiple price policies, which allows for the price of a subscription item to change after a certain period. A common approach is to encourage purchases with a lower initial price, for example, \"Save $10 on the first 3 deliveries.\"\n If an initial price incentive is applied to a subscription, then explain the current payment and how payments will change in the future.\n It\u2019s important to be transparent. A lack of information can cause customer mistrust and might appear misleading.",
                    "filename": "docs/themes/pricing-payments/subscriptions/subscription-ux-guidelines/content.txt",
                    "start_index": 0,
                    "end_index": 15551,
                    "start_line": 1,
                    "end_line": 164,
                    "max_line": 225,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "When a customer visits the online store, Shopify presents the currency that's determined appropriate for the customer. Online stores can offer a currency selector to customers to enable them to manually switch the currency. Shopify also offers a price rounding feature to merchants, which enables merchants to set custom rounding rules for converted prices.\n Note\n Any prices that are written in strings won't reflect currency switching or price rounding, and might be incorrect or misleading to customers.\n Price properties returned from APIs of the Online Store (Liquid or JSON) reflect the currency of the customer's session and any price rounding rules.\n Order details\n Customers logged in to the store can view the details of each past order. It's important to let the customer easily identify orders with pre-order or TBYB products.\n Example: Order details (pre-order)\n Order details\n # UI element Liquid properties and information UI guidelines\n 1 Selling plan information line_item.selling_plan_allocation.selling_plan.name\n \n Use selling_plan.name in the cart line item. This same text is used at checkout. For more information, refer to Using the selling plan name. Because the selling plan name is meant to accurately summarize the pre-order or TBYB option, don't list the individual selling plan option values alongside the selling plan name.\n 2 Price price Display the full price of the product so that the customer is reminded of the total cost of the item they\u2019re buying.\n 3 Price at checkout selling_plan.checkout_charge.value The price customers will pay at checkout.\n \n For pre-order items, this price usually represents the deposit amount.\n \n For TBYB items, the price will usually be $0 to indicate to customers that they won\u2019t need to pay anything at checkout.\n Next steps\n Create and manage pre-order and TBYB\n Getting started with a pre-order or TBYB app\n Get started with product subscription app extensions\n Was this section helpful?\n YesNo\n ON THIS PAGE\n User experience principles\n User interface guidelines\n Product forms\n Cart items\n Order details\n Next steps\n Updates & News\n Developer changelog",
                    "filename": "docs/themes/pricing-payments/preorder-tbyb/preorder-tbyb-ux-guidelines/content.txt",
                    "start_index": 14561,
                    "end_index": 16686,
                    "start_line": 168,
                    "end_line": 200,
                    "max_line": 200,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Best practices\n App Store\n App billing process\n This guide describes the app billing process and the roles taken by merchants, your app, and Shopify. You'll learn about the GraphQL Admin API resources to invoke for specific billing functions, and webhook topics to subscribe to for events.\n How it works\n A merchant starts an action that includes a charge, such as an app installation, a service plan upgrade, or an individual purchase.\n Your app creates a charge for the merchant, using either the appPurchaseOneTimeCreate or the appSubscriptionCreate mutation.\n Shopify verifies the charge and returns a confirmationUrl, which is a page that Shopify hosts for the merchant to approve charges.\n The app should redirect the merchant to the confirmationUrl, where the merchant either approves or declines the charge.\n If the merchant accepts the charge, then they're redirected to a returnUrl that your app specified when it issued the charge. If the charge is declined, then Shopify redirects the merchant to the Shopify admin, and provides a notification message about the app charge being declined.\n Note\n Subscription upgrades and downgrades, for example going from a basic tier to a premium tier, or a premium tier to a basic tier, go through this flow.\n App actions to set up purchases\n The app billing process requires your app to perform actions that set up purchases.\n Remix\n Shopify provides an app package for Remix to help you configure charges for your app and make calls to the GraphQL Admin API's billing resources. If your app isn't Remix-based, then you can use the code examples in the reference as a general guide to your app's configuration.\n Configure a pricing model\n A pricing model is how you monetize your app. Each pricing model configuration must contain an amount, a currencyCode, and an interval. You can also set the parameters that are allowed by the GraphQL Admin API's appSubscriptionCreate and appPurchaseOneTimeCreate mutations that are used for the charges.\n Remix apps can set up plans by passing in the billing configuration when shopifyApp is called.\n Learn more about pricing models.\n Gate requests\n Gating requests require merchants to pay for the app before they can access specific routes. To gate requests, you can verify whether there's an active payment and require one if there isn't. The following is an example for the process:\n Indicate which plans enable access to a specific route.\n Pass a check to determine if there's a purchase for any of the plans.\n Require a purchase if one isn't detected.\n Remix apps can use the admin.billing.require function. The function verifies that there's an active payment and requires one if there isn't. You can send multiple plans to require. It passes if there's a purchase for any of the plans and returns information on the active purchase.\n Tip\n Call the function in loaders and actions to avoid ungated requests. If you want to gate multiple routes, then refer to this example in a Remix layout.\n Request payment\n If your billing check doesn't find a purchase, then you can decide where to take the merchant. The following are examples:\n Request payment right away for one of the purchase configurations.\n Redirect the merchant to a page where they can select a plan.\n In the plan selection page, you'll need to authenticate with the GraphQL Admin API for access. Remix apps can call authenticate.admin.\n Developer tools and resources\n The GraphQL Admin API's webhookSubscriptionCreate mutation enables you to register webhooks for specific shop events.\n In addition to the mandatory webhook topics, Shopify provides the following webhook topics for billing:\n APP_PURCHASES_ONE_TIME_UPDATE: Triggered when the status of an AppPurchaseOneTime object is changed.\n APP_SUBSCRIPTIONS_UPDATE: Triggered when the status, or capped amount, of an AppSubscription object is changed, and when a subscription's status changes.\n APP_SUBSCRIPTIONS_APPROACHING_CAPPED_AMOUNT: Triggered when the balance used on an app subscription crosses 90% of the capped amount.\n The @shopify/shopify-app-remix package enables Remix apps to authenticate with Shopify and make calls to the GraphQL Admin API's billing resources.\n Get started\n Get started monetizing your app with a recurring or one-time charge pricing model.\n Subscriptions\n Use Shopify's billing resources to create subscription pricing models.\n One-time app charge\n Use Shopify's billing resources to create a one-time app charge pricing model.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n How it works\n App actions to set up purchases\n Developer tools and resources\n Get started\n Updates & News\n Developer changelog",
                    "filename": "docs/apps/billing/process/content.txt",
                    "start_index": 0,
                    "end_index": 4651,
                    "start_line": 1,
                    "end_line": 55,
                    "max_line": 55,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Discounts\n Subscriptions\n Pre-orders and Try Before You Buy\n Overview\n Add pre-orders and TBYB to your theme\n Pre-orders and TBYB UX guidelines\n Shop Pay Installments\n Accelerated checkout\n B2B\n Unit pricing\n Pre-orders and Try Before You Buy (TBYB) UX guidelines\n A great customer-facing user experience (UX) for pre-orders and TBYB is important for the success of our merchants because it enables them to offer customers a more flexible purchasing process.\n A pre-order or a TBYB is any transaction where the payment or fulfillment doesn't happen at the time of purchase.\n This guide explains the key principles and component-level guidelines for implementing pre-order and TBYB UIs. and TBYB user interfaces (UIs).\n User experience principles\n To provide a good experience with pre-order or TBYB options and gain trust from customers, make sure to implement the following UX principles:\n Be clear and up front about important information: Customers should be able to clearly identify the options and make a choice, such as try now, pay later.\n Provide clarity around money: Customers should be able to clearly identify how much they will pay at checkout, the total cost of the product, when they\u2019ll be charged a remaining balance amount (when applicable), and when their payment method will be charged.\n Offer as much clarity around delivery timelines as possible: When possible, provide exact dates or a range, if exact dates are unavailable, for when customers can expect to receive their products, or the duration of the trial period.\n Provide a seamless integration: The UI for options should be integrated into the theme\u2019s existing design system.\n Use clear language: Use language that customers can understand and that refers to the actual purchase terms. For example, use \"pre-order\", \"back-order\", and \"TBYB\".\n User interface guidelines\n Before you integrate your pre-order and TBYB options app into a theme, familiarize yourself with the UX guidelines and best practices that are associated with each component.\n Apps should consider that products with different ways of purchasing are displayed in the following places on the online store:\n Product pages\n Collection pages\n Search results\n Featured product sections on the home page\n Quick view modals on product cards\n When customers can see available ways of purchasing at relevant points in the shopping process, they're more likely to utilize them. Ensure that all relevant information is always included, such as the deposit amount and fulfillment date, estimate for pre-orders, or the trial period length for TBYB.\n Pre-order and TBYB information is displayed in the following components of the online store:\n Product forms\n Cart items\n Order details\n The following sections include guidance for displaying prices, styling UI components for pre-orders and TBYB, and presenting multiple purchasing options. In each section, the relevant Liquid properties that are required to create each component are also referenced.\n Product forms\n The product form enables a customer to select their pre-order or TBYB option. This form is where the merchant can provide clarity and more details for a product and its available variants. Product forms are used in product pages, featured product sections on home pages, and quick view modals on product cards.\n The subcomponents of a product form include the following:\n A. Price\n B. Selling plan selection\n C. Selling plan details\n D. Main call-to-action\n Example: Product form (pre-order)\n Example: Product form (TBYB)\n A. Price\n Customers should be able to clearly identify the full price of the product, and the type of purchasing option that the product is.\n Example: Price (pre-order)\n Product form: Price\n # UI element Liquid properties and information UI guidelines\n 1 Price price Reflect the price details from the selected pre-order.\n 2 Pre-order badge selling_plan_group.name\n \n Reflect the price details from the selected pre-order. Provide a contextual pre-order badge or label to help differentiate against a one-time pre-order. The badge or label will help customers quickly understand that this product can be bought as a pre-order.\n Pricing patterns\n Pre-orders and TBYB options don\u2019t usually come with savings to encourage customers to purchase products.\n Tip\n Pricing for pre-orders often requires a deposit. Don't use visual styling that suggests money saving pricing tactics, such as price strikethroughs, to represent the full price of a product in relation to the initial deposit. Instead, simply display the full price, and if the pre-order product requires a deposit, display the deposit price elsewhere on the page.\n Main price component\n The main price component should always display the total cost of an item. When a customer selects a selling plan or a product variant, the main price component should reflect their changes.\n To help customers understand what purchasing option they have selected, do the following:\n Clearly display the product's full price.\n Add the appropriate pre-order or TBYB badge to the component to help clarify to customers that they aren't buying a regular one-time product.\n Example: Main price component (pre-order)\n Example: Main price component (TBYB)\n B. Selling plan selection\n Customers should be able to clearly identify their pre-order or TBYB options.\n Example: Selling plan selection (pre-order)\n Example: Selling plan selection (TBYB)\n Selling plan selection\n # UI element Liquid properties and information UI guidelines\n 1 Purchase options product.selling_plan_groups One-time purchases and selling plan groups are considered different types of purchasing options. Use the term **Purchase options** in your own designs.\n 2 One-time purchase product.requires_selling_plan\n \n If the property is false, then at least one variant can be purchased as a one-time purchase, and the one-time purchase option should be presented in the UI. Group behavior\n \n On the first page load, select the one-time option by default. When the customer interacts with the UI, consider collapsing the unselected group to make good use of the space. Disable the selling plan group selection when it isn\u2019t available for a given variant.\n \n Group layout\n \n Prioritize displaying purchasing options in a vertically stacked list to make them readable on all devices. When displayed side-by-side, the information can be crowded on smaller screens.\n \n Group style\n \n Consider displaying purchasing options as radio inputs instead of buttons. Buttons can easily compete with the product form\u2019s call-to-action. For example, a submit button.\n 3 Selling plan group name selling_plan_group.name\n \n Always make this value visible. For more information, refer to selling_plan_group.name.\n 4 Selling plan option value selling_plan_option.value Don\u2019t express exact prices in option values, such as \u201c$50 deposit\u201d, because the values won\u2019t be accurate if the currency changes.\n \n Expressing percentages is possible because they stay consistent even if the currency changes. For more information refer to Considerations for currency switching and price rounding.\n Purchase option label\n Show the Purchase options label when the following conditions apply:\n A one-time purchase exists and there's at least one sellingPlanGroup object.\n A one-time purchase isn't available, but there are multiple sellingPlanGroup objects of different types.\n Shopify doesn't show the Purchase options label when the following conditions apply:\n There are no selling plan groups.\n The product can only be purchased with a selling plan and there's only one selling plan group. In this case, the sellingPlanGroup name remains in its position, but without the radio input.\n Selling plan group name\n Selling plan names should make clear the benefit of choosing that option. For example, \"Pre-order\".\n Because the SellingPlan object can be associated with multiple selling plan groups on a product, selling plan group names are used to differentiate purchase options.\n Display selling plan option values\n All the option values must be displayed at a glance from a group. Consider adapting the component layout to optimize readability.\n Components should adapt to the number of options being shown. When there are many options to choose from, an appropriate component should be selected to enable customers to view all options easily. When there are fewer options, a different component may be used. When possible, apply the appropriate layout to all values within a selling plan group for consistency:\n Four options or less: Show each option as a radio button to allow customers to view what\u2019s available.\n More than four options: Use a select dropdown to emphasize the customer's selection and hide other options within the collapsed dropdown.\n UI UPDATE ON VARIANT CHANGE\n A product\u2019s variants might not all support the same purchasing options. As a customer changes their variant selection, the components should update to make clear which options are available and unavailable.\n When a selected option within a selling plan group is unavailable, the following events should happen:\n The unavailable options are unselected, and the customer must make a new selection to successfully submit the form.\n The unavailable options for the selected variant are disabled.\n The form submission button is enabled. Disabling the button removes the ability to display an error message and instead displays the product as unavailable, which is false. Let the customer click the button but prevent them from adding the product to the cart. Then, anchor and scroll back to the faulty UI area and display a message that describes why the process can't complete and what the customer needs to do to proceed.\n C. Selling plan details\n Display important deferred pre-order and TBYB terms and selections to customers. The summary confirms a customer's selections, shows any conditions, and helps build trust in the brand.\n Example: Selling plan details (pre-order)\n Selling plan details\n # UI element Liquid properties and information UI guidelines\n 1 Selling plan description selling_plan.description Don't express exact prices in option values, for example, \"$100 deposit\". For more information, refer to Considerations for currency switching and price rounding.\n \n Consider including a link to the returns or billing policies in the description. Merchants might have more detailed policies that need to be accessed by customers.\n D. Main call-to-action\n Having a call-to-action (main button text) that reflects the purchasing option type helps customers differentiate between a pre-order or a TBYB and a one-time purchase, even if there's only one option available.\n Example: Shop has accelerated checkout (pre-order and TBYB)\n Example: Shop doesn\u2019t have accelerated checkout (pre-order and TBYB)\n Main call-to-action\n # UI element Liquid properties and information UI guidelines\n 1 Call-to-action On first page load, if the product requires a selling plan or one is selected, then switch the call-to-action string to something purchase option-specific that merchants can customize. Update the call-to-action label to the dynamic checkout button for a deferred purchase option, and keep the add to cart button as is.\n Cart items\n Each pre-order or TBYB option item displays the most important details to help customers understand their purchase.\n For pre-order items, make sure that the customer understands the fulfillment date and relevant payment information, such as a deposit amount and future payments.\n For TBYB items, customers should see the trial period length. The price should also match what's represented on the product page.\n A cart item includes the following subcomponents:\n Cart page\n Cart notification\n Cart page\n Customers tend to scan the cart page and review the information before proceeding to checkout, so it\u2019s important that the following elements are clearly represented.\n Example: Cart page (pre-order)\n Example: Cart page (TBYB)\n Cart page\n # UI element Liquid properties and information UI guidelines\n 1 Selling plan information line_item.selling_plan_allocation.selling_plan.name\n \n Use selling_plan.name in the cart line item. This same text is used at checkout. For more information, refer to Using the selling plan name. Because the selling plan name is meant to accurately summarize the deferred purchase option, don't list the individual selling plan option values alongside the selling plan name.\n 2 Price price Display the full price of the product so that the customer is reminded of the total cost of the item they\u2019re buying.\n 3 Price at checkout selling_plan.checkout_charge.value The price customers will pay at checkout.\n \n For pre-order items, this price usually represents the deposit amount.\n \n For TBYB items, the price will usually be $0 to indicate to customers that they won\u2019t need to pay anything at checkout.\n Cart notification\n The cart notification returns information about the item that was just added to the cart.\n Example: Cart notification (pre-order)\n Cart notification\n # UI element Liquid properties and information UI guidelines\n 1 Selling plan information line_item.selling_plan_allocation.selling_plan.name\n \n Use selling_plan.name in the cart line item. This same text is used at checkout. For more information, refer to Using the selling plan name. Because the selling plan name is meant to accurately summarize the deferred purchase option, don't list the individual selling plan option values alongside the selling plan name.\n 2 Price price Display the full price of the product so that the customer is reminded of the total cost of the item that they\u2019re buying.\n Using the selling plan name\n The selling_plan.name should be a succinct description of the selling plan that can be easily understood by customers. The text is displayed in multiple areas of the online store, such as cart line items, checkout, and past order details. The value is also displayed in the merchant\u2019s internal admin on order pages.\n Note\n The selling plan name shouldn't include any marketing text.\n Shopify doesn't control the value of the name, which means that merchants can enter any text value they want using an app.\n When creating selling plan names, implement the following recommended guidelines:\n State the type of deferred purchase option.\n Write the deposit amount and payment due date of the product in order for the customer to keep a reference of it throughout the purchase journey.\n Considerations for currency switching and price rounding\n Merchants can sell in multiple currencies on their online store.\n When a customer visits the online store, Shopify presents the currency that's determined appropriate for the customer. Online stores can offer a currency selector to customers to enable them to manually switch the currency. Shopify also offers a price rounding feature to merchants, which enables merchants to set custom rounding rules for converted prices.\n Note\n Any prices that are written in strings won't reflect currency switching or price rounding, and might be incorrect or misleading to customers.",
                    "filename": "docs/themes/pricing-payments/preorder-tbyb/preorder-tbyb-ux-guidelines/content.txt",
                    "start_index": 0,
                    "end_index": 15067,
                    "start_line": 1,
                    "end_line": 170,
                    "max_line": 200,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "A common approach is to encourage purchases with a lower initial price, for example, \"Save $10 on the first 3 deliveries.\"\n If an initial price incentive is applied to a subscription, then explain the current payment and how payments will change in the future.\n It\u2019s important to be transparent. A lack of information can cause customer mistrust and might appear misleading. Certain states and countries have laws around price clarity, which means that merchants might be subject to lawsuits.\n Subscription policy link\n In the mockup, the link to View subscription policy is part of the selling plan description and therefore in the merchant\u2019s or app\u2019s control to provide. The intention is to allow individual selling plans to provide a link out to a dedicated URL, if available.\n Theshop.subscription_policy object available in Liquid makes it possible to link to a dedicated /policies/subscription-policy page. The content of the page is editable by the merchant in the Shopify admin under Legal settings (/admin/settings/legal). The content of the subscription policy is also available at checkout.\n Main call-to-action\n Having a call-to-action that reflects the subscription type helps customers differentiate between subscription options and the one-time subscription.\n # UI element API properties and information UI guidelines\n 1 Call-to-action On first page load, if the product requires a selling plan or one is selected, then switch the call-to-action string to something subscription-specific that merchants can customize.\n \n Shopify doesn't display the dynamic checkout button on products that include selling plans. Ensure that the theme accounts for this, and that the primary call-to-action style is used for the form submission. Update the call-to-action label to Add subscription to cart for a subscription subscription.\n Cart items\n Each subscription item displays the most important subscription details to help customers understand their purchase. Customers should be able to understand a subscription\u2019s delivery frequency and, if applicable, the commitment period. The price should also match what is represented on the product page.\n The subcomponents of a cart item include the following:\n Cart page\n Cart notification\n Cart page\n Customers tend to scan the cart page and review the information before proceeding to checkout:\n # UI element API properties and information UI guidelines\n 1 Selling plan information line_item.selling_plan_allocation.selling_plan.name\n \n Use selling_plan.name in the cart line item. This same text is used at checkout. For more information, refer to Using the selling plan name. Because the selling plan name is meant to accurately summarize the subscription, don't list the individual selling plan option values alongside the selling plan name.\n Cart notification\n The cart notification returns information about the item that was just added to the cart:\n # UI element API properties and information UI guidelines\n 1 Selling plan information line_item.selling_plan_allocation.selling_plan.name\n \n This information comes from a Cart API JSON response.\n \n Use selling_plan.name in the order line item. The same text is used at checkout. For more information, refer to Using the selling plan name. Because the selling plan name is meant to accurately summarize the subscription, don't list the individual selling plan option values alongside the selling plan name.\n Using the selling plan name\n The selling_plan.name should be a succinct description of the selling plan that can be easily understood by customers. The text is displayed in multiple areas of the online store, such as cart line items, checkout, and past order details. The value is also displayed in the merchant\u2019s internal admin on order pages.\n Note\n The selling plan name shouldn't be an additional opportunity to write marketing text.\n Shopify doesn't control the value of the name, which means that merchants can enter any text value they want using an app.\n When creating selling plan names, implement the following recommended guidelines:\n State the delivery frequency and a prepaid period, if applicable.\n Don't state exact dollars amounts, for example, \"$9 a month\". Use percentages when applicable.\n Considerations for currency switching and price rounding\n Merchants can sell in multiple currencies on their online store.\n When a customer visits the online store, Shopify presents the currency that's determined appropriate for the customer. Online stores can offer a currency selector to customers to enable them to manually switch the currency. Shopify also offers a price rounding feature to merchants, which allows merchants to set custom rounding rules for converted prices.\n Apps and merchants shouldn't write any prices in the various strings that are shown to customers, for example, selling plan names that say \"$9.99 a month\" or \"Save $5\". Any prices that are written in these strings won't reflect currency switching or price rounding, and might be incorrect or misleading to customers.\n When an app or merchant wants to express savings in a text field, use percentages whenever possible. For example, \"Deliver every week (Save 20%)\".\n Note\n Price properties returned from APIs of the Online Store (Liquid or JSON) reflect the currency of the customer's session and any price rounding rules.\n Order details\n Customers logged in to the store can view the details of each past order. It's important to let the customer easily identify the subscription product.\n # UI element API properties and information UI guidelines\n 1 Selling plan information line_item.selling_plan_allocation.selling_plan.name\n \n Use selling_plan.name in the cart notification line item. The same text is used at checkout. For more information, refer to Using the selling plan name. Because the selling plan name is meant to accurately summarize the subscription, don't list the individual selling plan option values alongside the selling plan name.\n Next steps\n Create and manage selling plans: Follow a step-by-step workflow to create and manage selling plans in your subscription app.\n Getting started building a product subscription app extension: Learn how to create a new product subscription app extension with App Bridge Admin, connect the extension to Shopify, and render your working code inside Shopify's UI.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n User experience principles\n User interface guidelines\n Product forms\n Cart items\n Order details\n Next steps",
                    "filename": "docs/themes/pricing-payments/subscriptions/subscription-ux-guidelines/content.txt",
                    "start_index": 15177,
                    "end_index": 21661,
                    "start_line": 162,
                    "end_line": 225,
                    "max_line": 225,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "81\n      When a buyer chooses a different variant, we ensure that only the relevant selling plan selection box is displayed.\n 82\n      This guarantees that only the selling plan associated with the selected variant is shown.\n 83\n    */\n 84\n    handleSellingPlanFormVisibility() {\n 85\n      const sellingPlanFormForSelectedVariant = this.shopifySection.querySelector(\n 86\n        `section[data-variant-id=\"${this.variantIdInput.value}\"]`,\n 87\n      );\n 88\n      const sellingPlanFormsForUnselectedVariants =\n 89\n        this.shopifySection.querySelectorAll(\n 90\n          `.selling_plan_theme_integration:not([data-variant-id=\"${this.variantIdInput.value}\"])`,\n 91\n        );\n 92\n      this.showSellingPlanForm(sellingPlanFormForSelectedVariant);\n 93\n      this.hideSellingPlanForms(sellingPlanFormsForUnselectedVariants);\n 94\n    }\n 95\n 96\n    handleVariantChange() {\n 97\n      this.handleSellingPlanFormVisibility();\n 98\n      this.updateSellingPlanInputsValues();\n 99\n      this.listenToSellingPlanFormRadioButtonChange();\n 100\n    }\n 101\n 102\n    /*\n 103\n      The functions listenToVariantChange() and listenToAddToCartForms() are implemented to track when a product variant is altered or when the product form is updated.\n 104\n      The identification of the variant is crucial as it dictates which selling plan box should be displayed.\n 105\n    */\n 106\n    listenToVariantChange() {\n 107\n      this.listenToAddToCartForms();\n 108\n      if (this.variantIdInput.tagName === 'INPUT') {\n 109\n        const variantIdObserver = new MutationObserver((mutationList) => {\n 110\n          mutationList.forEach((mutationRecord) => {\n 111\n            this.handleVariantChange(mutationRecord.target.value);\n 112\n          });\n 113\n        });\n 114\n 115\n        variantIdObserver.observe(this.variantIdInput, {\n 116\n          attributes: true,\n 117\n        });\n 118\n      }\n 119\n    }\n 120\n 121\n    listenToAddToCartForms() {\n 122\n      this.addToCartForms.forEach((addToCartForm) => {\n 123\n        addToCartForm.addEventListener('change', () => {\n 124\n          this.handleVariantChange();\n 125\n        });\n 126\n      });\n 127\n    }\n 128\n 129\n    get regularPriceElement() {\n 130\n      return this.shopifySection.querySelector('.price__regular');\n 131\n    }\n 132\n 133\n    get salePriceElement() {\n 134\n      return this.shopifySection.querySelector('.price__sale');\n 135\n    }\n 136\n 137\n    get salePriceValue() {\n 138\n      return this.salePriceElement.querySelector('.price-item--sale');\n 139\n    }\n 140\n 141\n    get regularPriceValue() {\n 142\n      return this.salePriceElement.querySelector('.price-item--regular');\n 143\n    }\n 144\n 145\n    get sellingPlanAllocationPrice() {\n 146\n      return document.getElementById(\n 147\n        `${this.selectedPurchaseOption.dataset.sellingPlanGroupId}_allocation_price`,\n 148\n      );\n 149\n    }\n 150\n 151\n    get selectedPurchaseOptionPrice() {\n 152\n      return this.selectedPurchaseOption.dataset.variantPrice;\n 153\n    }\n 154\n 155\n    get selectedPurchaseOptionComparedAtPrice() {\n 156\n      return this.selectedPurchaseOption.dataset.variantCompareAtPrice;\n 157\n    }\n 158\n 159\n    get price() {\n 160\n      return this.sellingPlanAllocationPrices.price ?? null;\n 161\n    }\n 162\n 163\n    /*\n 164\n      We aim to ascertain whether a compared price exists, which would indicate that the currently selected input has a discount applied to it.\n 165\n      If a discount is detected, the discounted price is displayed; otherwise, the regular price is shown.\n 166\n    */\n 167\n    updatePrice() {\n 168\n      if (\n 169\n        !this.selectedPurchaseOptionComparedAtPrice ||\n 170\n        this.selectedPurchaseOptionComparedAtPrice ===\n 171\n          this.selectedPurchaseOptionPrice\n 172\n      ) {\n 173\n        this.showRegularPrice();\n 174\n        this.hideSalePrice();\n 175\n        this.priceElement.classList.remove('price--on-sale');\n 176\n      } else {\n 177\n        this.showSalePrice();\n 178\n        this.hideRegularPrice();\n 179\n        this.priceElement.classList.add('price--on-sale');\n 180\n      }\n 181\n    }\n 182\n 183\n    hideSalePrice() {\n 184\n      this.salePriceElement.style.display = 'none';\n 185\n    }\n 186\n 187\n    hideRegularPrice() {\n 188\n      this.regularPriceElement.style.display = 'none';\n 189\n    }\n 190\n 191\n    showRegularPrice() {\n 192\n      this.regularPriceElement.style.display = 'block';\n 193\n      this.shopifySection.querySelector('.price__sale').style.display = 'none';\n 194\n    }\n 195\n 196\n    showSalePrice() {\n 197\n      this.salePriceElement.style.display = 'block';\n 198\n      this.regularPriceValue.innerHTML =\n 199\n        this.selectedPurchaseOptionComparedAtPrice;\n 200\n      this.salePriceValue.innerHTML = this.selectedPurchaseOptionPrice;\n 201\n    }\n 202\n 203\n    get sellingPlanInputs() {\n 204\n      return this.shopifySection.querySelectorAll('.selected-selling-plan-id');\n 205\n    }\n 206\n 207\n    updateSellingPlanInputsValues() {\n 208\n      this.sellingPlanInputs.forEach((sellingPlanInput) => {\n 209\n        sellingPlanInput.value = this.sellingPlanInputValue;\n 210\n      });\n 211\n    }\n 212\n 213\n    get sellingPlanInputValue() {\n 214\n      return this.selectedPurchaseOption?.dataset.sellingPlanId ?? null;\n 215\n    }\n 216\n 217\n    get selectedPurchaseOption() {\n 218\n      return this.visibleSellingPlanForm?.querySelector(\n 219\n        'input[type=\"radio\"]:checked',\n 220\n      );\n 221\n    }\n 222\n 223\n    set selectedPurchaseOption(selectedPurchaseOption) {\n 224\n      this._selectedPurchaseOption = selectedPurchaseOption;\n 225\n    }\n 226\n 227\n    handleRadioButtonChange(selectedPurchaseOption) {\n 228\n      this.selectedPurchaseOption = selectedPurchaseOption;\n 229\n      this.updateSellingPlanInputsValues();\n 230\n      this.updatePrice();\n 231\n    }\n 232\n 233\n    listenToSellingPlanFormRadioButtonChange() {\n 234\n      this.visibleSellingPlanForm\n 235\n        ?.querySelectorAll('input[type=\"radio\"]')\n 236\n        .forEach((radio) => {\n 237\n          radio.addEventListener('change', (event) => {\n 238\n            this.handleRadioButtonChange(event.target);\n 239\n          });\n 240\n        });\n 241\n    }\n 242\n 243\n    enablePerformanceObserver() {\n 244\n      const performanceObserver = new PerformanceObserver((list) => {\n 245\n        list.getEntries().forEach((entry) => {\n 246\n          if (entry.initiatorType !== 'fetch') return;\n 247\n 248\n          const url = new URL(entry.name);\n 249\n          /*\n 250\n            When a buyer selects a product variant, a fetch request is initiated.\n 251\n            Upon completion of this fetch request, we update the price to reflect the correct value.\n 252\n          */\n 253\n          if (url.search.includes('variant') || url.search.includes('variants')) {\n 254\n            this.updatePrice();\n 255\n          }\n 256\n        });\n 257\n      });\n 258\n 259\n      performanceObserver.observe({entryTypes: ['resource']});\n 260\n    }\n 261 }\n 262\n 263 document\n 264\n    .querySelectorAll('.selling_plan_app_container')\n 265\n    .forEach((sellingPlansWidgetContainer) => {\n 266\n      new SellingPlansWidget(sellingPlansWidgetContainer);\n 267\n    });\n The functions listenToVariantChange() and listenToAddToCartForms() are implemented to track when a product variant is altered or when the product form is updated. The identification of the variant is crucial as it dictates which selling plan box should be displayed. For more information about how to find a variant, refer to our community post.\n The selling plan display in the cart\n If a customer selects a selling plan on the product page, then they should see that selection in the cart.\n Available selected selling plans are accessible through the selling_plan_allocation attribute of the line_item object. The following is an example:\n /customers/order.liquid\n 1 {% if line_item.selling_plan_allocation %}\n 2\n    <p class=\"selling-plan\">{{ line_item.selling_plan_allocation.selling_plan.name }}</p>\n 3 {% endif %}\n The selling plan selector\n Rather than just display the selected selling plan, you can give customers the option to add a new selling plan, or to remove or edit the current selling plan. To do this, you should implement a selling plan selector that lists out the available selling plans for the line item's variant, and reflects the currently selected selling plan.\n You can loop through the selling_plan_allocations attribute of the variant object associated with the line item (line_item.variant) to build out your selector options. You can compare the selected selling plan ID with the ID of the selling plan at the current index of the loop to make sure that the selector reflects the currently selected selling plan.\n To change the selling plan for a line item, you can use the /{locale}/cart/change.js endpoint of the Cart AJAX API.\n Example\n The following example outputs a selling plan selector:\n 1 <select name=\"selling-plan\" data-line=\"{{ forloop.index }}\" data-quantity=\"{{ line_item.quantity }}\">\n 2\n    <option value=\"\">One-time purchase</option>\n 3\n 4\n    {% for selling_plan_allocation in line_item.variant.selling_plan_allocations %}\n 5\n      <option\n 6\n        value=\"{{ selling_plan_allocation.selling_plan.id }}\"\n 7\n        {% if line_item.selling_plan_allocation.selling_plan.id == selling_plan_allocation.selling_plan.id %}selected=\"selected\"{% endif %}\n 8\n      >\n 9\n        {{ selling_plan_allocation.selling_plan.name }}\n 10\n      </option>\n 11\n    {% endfor %}\n 12 </select>\n The following example illustrates the concept of watching for a change in the selling plan selector and applying those changes through the /cart/change.js endpoint. It isn't completely functional.\n 1 const sellingPlanSelectors = document.querySelectorAll('[name=\"selling-plan\"]');\n 2\n 3 sellingPlanSelectors.forEach(function(element) {\n 4\n    element.addEventListener('change', function(event) {\n 5\n      const data = {\n 6\n        'line': event.target.dataset.line,\n 7\n        'quantity': event.target.dataset.quantity,\n 8\n        'id': event.target.value\n 9\n      }\n 10\n 11\n      fetch('/cart/change.js', {\n 12\n        method: 'POST',\n 13\n        headers: {\n 14\n          'Content-Type': 'application/json'\n 15\n        },\n 16\n        body: JSON.stringify(data)\n 17\n      })\n 18\n      .then(response => {\n 19\n        // Refresh page, or re-render cart\n 20\n        console.log(response);\n 21\n      })\n 22\n      .catch((error) => {\n 23\n        console.error('Error:', error);\n 24\n      });\n 25\n    });\n 26 });\n The checkout charge display in the cart\n Because pre-order and TBYB can change how much a customer has to pay up front, you should show them how much they'll be charged at checkout. You can calculate this amount using selling_plan.checkout_charge object.\n You can access a line item's checkout charge through its selling_plan_allocation.\n The following table outlines the types of checkout charges:\n Checkout charge type Description\n percentage A percent value representing the percentage amount of the full price that must be paid up front.\n price The price to be paid up front, in cents.\n Note\n You can't configure checkout charges for subscriptions. Because of this, subscriptions always have a value_type of percentage and value of 100.\n Example\n The following example outputs the appropriate line item price depending on whether the line item has a selling plan allocation, and what kind of selling plan it is.\n 1 {% if item.selling_plan_allocation %}\n 2\n    {%- assign checkout_charge = item.selling_plan_allocation.selling_plan.checkout_charge -%}\n 3\n 4\n    {% if checkout_charge.value_type == 'percentage' %}\n 5\n      {{ item.original_price | times: checkout_charge.value | divided_by: 100 | money }}\n 6\n    {% else %}\n 7\n      {{ checkout_charge.value | money }}\n 8\n    {% endif %}\n 9 {% else %}\n 10\n    {{ item.original_price | money }}\n 11 {% endif %}\n Customer order selling plan display\n When a customer selects a selling plan, they should see the name of that selection on the customer order page.\n The selected selling plan, if there is one, is accessible through the selling_plan_allocation attribute of the line_item object. The following is an example:\n /customers/order.liquid\n 1 {% if line_item.selling_plan_allocation %}\n 2\n    <p class=\"selling-plan\">{{ line_item.selling_plan_allocation.selling_plan.name }}</p>\n 3 {% endif %}\n Was this section helpful?",
                    "filename": "docs/themes/pricing-payments/preorder-tbyb/add-preorder-tbyb-to-your-theme/content.txt",
                    "start_index": 13337,
                    "end_index": 25629,
                    "start_line": 210,
                    "end_line": 859,
                    "max_line": 870,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Subscriptions\n Overview\n Modeling apps\n Selling plans\n Overview\n Manage selling plans\n Contracts\n Billing cycles\n Orders\n Fulfillments\n Migrate to the Subscriptions API\n Deferred purchase options\n Build a user interface\n Build a customer-facing portal\n Markets\n Selling plans\n Selling plans represent how products can be sold and purchased. For example, a product can be configured to enable it to be billed and delivered on a monthly basis at a 15% discount.\n Two common selling plan types include the \"Subscribe and save\" and \"Prepaid\" options. \"Subscribe and save\", also known as \"pay per delivery\", is a selling method where a customer pays for goods or services per delivery. \"Prepaid\" is a selling method where a customer makes a single payment upfront.\n Learn more about purchase option types and associated policies.\n Requirements\n Note\n Most Subscriptions, Pre-order and Try before you buy (TBYB) apps need to request API access through the Partner Dashboard. We give API access to apps that are designed according to our principles for Subscriptions, Pre-order and TBYB apps.\n Public apps that use Subscriptions, Pre-order or TBYB need to meet specific requirements to be published on the Shopify App Store.\n Custom apps created in the Shopify admin can't use Subscriptions, Pre-order or TBYB because these apps can't use extensions or request access to protected scopes. If you're building a solution for a single store, then build your custom app in the Partner Dashboard.\n Your app can make authenticated requests to the GraphQL Admin API.\n Your app has the write_products, read_customer_payment_methods, read_own_subscription_contracts, and write_own_subscription_contracts access scopes. Learn how to configure your access scopes using Shopify CLI.\n You've created products and product variants in your development store.\n To be eligible to use Shopify subscriptions, users need to meet the qualifying criteria.\n Selling plans\n Selling plans are organized into selling plan groups, which represent a selling method or purchase option. The following diagram shows the object relationships between selling plan groups, products, variants, selling plans, and policies.\n API object Description\n Selling plan group Represents a selling method. For example, \"Subscribe and save\" or \"Prepaid\" subscriptions.\n Products Represents the products that are associated to the selling plan group.\n Variants Represents the product variants that are associated to the selling plan group.\n Selling plans Represents an alternative way to buy a product or variant. Selling plans are organized into a selling plan group. For example, individual selling plans might be named \"Deliver weekly\" or \"Deliver monthly\".\n Policies Each selling plan is associated with the following policies:\n \n Billing policy: The billing frequency associated with the subscription. For example, bill every week, or bill every three months.\n Delivery policy: The delivery frequency associated with the subscription. For example, deliver every month, or deliver every other week.\n Inventory policy: The inventory behavior associated with the subscription. Inventory can be committed when the order is created, or when the order is fulfilled.\n Pricing policy: The type of pricing associated with the subscription. For example, a $10 or 20% discount that recurs for a limited period or that is fixed for the duration of the subscription. The two types of pricing policies are:\n \n Fixed pricing policy: A single pricing policy. For example, all billing cycles might have a flat 15% discount. An initial pricing policy is applied until a defined recurring policy kicks in.\n Recurring pricing policy: A follow up pricing policy that applies if the initial pricing policy expires. For example, the first billing cycle might have a 20% discount and the recurring cycles after might be discounted by 15%.\n Selling plans-related webhooks\n Your app can subscribe to webhooks that are related to selling plans. The following examples show the JSON responses from each of the available webhooks.\n To learn how to set up and consume webhooks, refer to the Webhook configuration overview.\n Example webhook responses\n selling_plan_groups/create\n selling_plan_groups/update\n selling_plan_groups/delete\n 1 // Occurs when a selling plan group is created. Requires the read_own_subscription_contracts scope.\n 2 {\n 3\n    \"admin_graphql_api_id\": \"gid:\\/\\/shopify\\/SellingPlanGroup\\/1039518903\",\n 4\n    \"id\": 1039518903,\n 5\n    \"name\": \"Subscribe & Save\",\n 6\n    \"merchant_code\": \"sub-n-save\",\n 7\n    \"admin_graphql_api_app\": \"gid:\\/\\/shopify\\/App\\/2525000003\",\n 8\n    \"app_id\": null,\n 9\n    \"description\": null,\n 10\n    \"options\": [\n 11\n      \"Delivery every\"\n 12\n    ],\n 13\n    \"position\": null,\n 14\n    \"summary\": \"1 delivery frequency,  discount\",\n 15\n    \"selling_plans\": [\n 16\n      {\n 17\n        \"name\": \"Pay every month deliver every month\",\n 18\n        \"options\": [\n 19\n          \"month\"\n 20\n        ],\n 21\n        \"position\": null,\n 22\n        \"description\": null,\n 23\n        \"billing_policy\": {\n 24\n          \"interval\": \"month\",\n 25\n          \"interval_count\": 1,\n 26\n          \"min_cycles\": null,\n 27\n          \"max_cycles\": null\n 28\n        },\n 29\n        \"delivery_policy\": {\n 30\n          \"interval\": \"month\",\n 31\n          \"interval_count\": 1,\n 32\n          \"anchors\": [\n 33\n 34\n          ],\n 35\n          \"cutoff\": null,\n 36\n          \"pre_anchor_behavior\": \"asap\"\n 37\n        },\n 38\n        \"pricing_policies\": [\n 39\n 40\n        ]\n 41\n      }\n 42\n    ],\n 43\n    \"product_variants\": [\n 44\n 45\n    ],\n 46\n    \"products\": [\n 47\n 48\n    ]\n 49 }\n Subscription shipping and delivery\n Note\n To manage delivery profiles on your selling plans, your app needs the read_shipping and write_shipping access scopes. Learn how to configure your access scopes using Shopify CLI.\n Customers can buy one-time purchases and subscriptions when both are offered by a merchant. Some merchants might want to offer custom shipping rules for subscription purchases. You can use the DeliveryProfile object to create shipping profiles and associate them with selling plan groups. Here are some example scenarios where delivery profiles can be useful to implement custom shipping rules for subscription purchases:\n A merchant wants to offer free or discounted shipping on subscriptions.\n A merchant wants to limit subscription purchases to certain shipping destinations.\n A merchant wants to offer local pickup for one-time purchases of a product, but requires shipping for subscription purchases.\n Delivery profiles\n By default, a product has the same shipping rate whether it's bought as a one-time purchase or as part of a subscription. To calculate subscription shipping separately from one-time purchases, you can associate a DeliveryProfile object with the selling plan group using the deliveryProfileCreate or deliveryProfileUpdate mutation.\n When one-time purchases and subscriptions are in the same delivery profile, coming from the same location, shipping for one-time purchases is calculated and combined with the subscription purchases. Subsequent subscription shipping rates are calculated separately.\n Shipping rates that are specific to a selling plan group don't display in the Shipping and delivery settings in the Shopify admin. You need to configure shipping rates for selling plan groups in your app.\n Delivery method display at checkout\n When multiple subscriptions are in the cart, shipping rates are consolidated if they share the same selling plan billing and delivery policies.\n Customers can select a shipping rate for one-time purchase products in the cart if more than one rate is available. They can also view the total cost of shipping for their subscriptions and the total cost of shipping for one-time purchases:\n Local delivery and local pickup\n Note\n Local delivery and local pickup options might not be supported on subscriptions for some merchants on the Shopify Plus plan with custom checkouts.\n When choosing local delivery or pickup methods, the chosen method applies to the entire order. Mixed delivery methods aren't supported.\n For example, if the customer has a one-time purchase and subscription on the same cart, and they select local pickup at checkout, then they can't choose shipping or local delivery for the subscription. All items would be fulfilled as local pickup.\n Updating shipping and delivery for contracts\n Shopify automatically creates subscription contracts when products with selling plans are purchased through checkout. Subscription contracts are detached from the original selling plan. Updates to the original selling plan don't modify pre-existing subscription contracts.\n To make changes to those contracts, you can update their delivery prices and delivery methods with the subscriptionDraftUpdate mutation.\n When querying a shipping rate for a subscription draft, the returned shipping rate depends on whether the subscription contract has a selling plan ID and variant ID:\n If the subscription contract doesn't have a selling plan ID, then the shipping rates from the delivery profile associated with the variant ID are displayed.\n If the subscription contract doesn't have a selling plan or variant ID, then the shipping rates from the shop's general delivery profile are displayed.\n For more information on contracts, refer to Subscription contracts.\n Anchors\n Anchors define the date when fulfillment is completed by a merchant or when delivery occurs for the customer for a given time cycle. You can also define a cutoff for which customers are eligible to enter this cycle and the desired behavior for customers who start their subscription inside the cutoff period.\n If you need to define more advanced delivery behaviors for subscriptions, then you should use anchors. Here are some example scenarios where anchors can be useful to implement advanced delivery behavior:\n A merchant starts fulfillment on a specific date every month.\n A merchant wants to bill the 1st of every quarter.\n A customer expects their delivery every Tuesday.\n Billing anchor behaviors\n If something occurs that delays a billing attempt past an anchor date, then fulfillment is also delayed to the next anchor date. You can prevent this by providing an appropriate originTime value when you create a new billing attempt.\n An example is a subscription with anchor billing and fulfillment dates for the 15th of every month. If a customer's payment fails and doesn't go through until the 16th, then their order won't be fulfilled until the 15th of the next month. Providing an originTime value on or before the 15th allows the fulfillment to take place on schedule, regardless of whether the billing attempt was successful past the anchor date.\n Delivery cutoff behaviors\n You can use the anchors, cutoff, and preAnchorBehavior properties of the recurring delivery policy on a selling plan to define the behavior for when customers are eligible to enter a delivery or fulfillment cycle:\n Property Description\n anchors Specifies the date when delivery or fulfillment is completed by a merchant.\n cutoff Specifies a buffer period before the anchor date for orders to be included in a delivery or fulfillment cycle.\n preAnchorBehavior Defines whether an order that is placed can be delivered or fulfilled immediately, or at the next anchor date. Valid values are ASAP or NEXT.\n \n When the preAnchorBehavior is ASAP, an order that is placed can be delivered or fulfilled immediately. Orders that are placed within a cutoff period can be delivered or fulfilled at the next anchor date.\n \n When the preAnchorBehavior is NEXT, an order that is placed can be delivered or fulfilled at the next anchor date. Orders that are placed within a cutoff period skip the next anchor date and can be delivered or fulfilled at the following anchor date.\n The following table shows some example scenarios of what the expected next billing and delivery dates are for a subscription with billing and delivery anchor dates at the 15th of each month, given different first billing dates (when a subscription starts), cutoff, and preAnchorBehavior values:\n First billing date cutoff preAnchorBehavior First delivery date Next billing and delivery date\n On the anchor date: 2023-01-15 0 ASAP 2023-01-15 2023-02-15\n NEXT 2023-01-15 2023-02-15\n Before the anchor date, and before the cutoff period: 2023-01-12 0 ASAP 2023-01-12 2023-01-15\n NEXT 2023-01-15 2023-02-15\n Before the anchor date, and within the cutoff period: 2023-01-12 5 ASAP 2023-01-15 2023-02-15\n NEXT 2023-02-15 2023-03-15\n For an example implementation of anchors, refer to the \"Subscribe and save\" example in the Create and manage selling plans guide.\n Next steps\n Learn how to create and manage selling plans to determine the policies under which products can be sold.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Requirements\n Selling plans\n Selling plans-related webhooks\n Subscription shipping and delivery\n Anchors\n Next steps\n Updates & News\n Developer changelog\n Partner blog",
                    "filename": "docs/apps/selling-strategies/subscriptions/selling-plans/content.txt",
                    "start_index": 0,
                    "end_index": 13015,
                    "start_line": 1,
                    "end_line": 210,
                    "max_line": 210,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Billing\n App Store\n Onboarding\n Onboarding is the process that merchants follow to set up your app. The onboarding process is crucial to merchant success.\n Purpose\n Onboarding should welcome merchants and make them eager to use your app or feature. Onboarding makes merchants comfortable and sets their expectations as soon as they start using your app.\n Merchants should feel like they know what to do in your app after they\u2019ve completed the onboarding experience. This leads to higher usage retention.\n Onboarding is about sharing your app\u2019s benefits and quickly getting merchants ready to use your app.\n Must Do\n Onboarding must be brief and direct. Provide clear instructions and guide merchants to completion.\n Guidance\n Onboarding experiences efficiently guide merchants through your app\u2019s features so that merchants don\u2019t have to discover them on on their own.\n A great onboarding experience presents the basics of your app to merchants as quickly as possible.\n Onboarding experiences can also come in the form of a selection of actions that are quick and easy for merchants to understand.\n Tip\n In some cases, complex onboarding can take longer than expected. Give merchants the option to complete the onboarding at a later time to avoid stopping their workflow.\n Tip\n While there isn\u2019t a ready-made Polaris pattern for setup guides, you can compose your own with Polaris components and look for examples across the Shopify admin. A good setup acts as a quick start, with discrete steps that are automatically marked as complete. Including a progress indicator is another good practice that provides encouraging feedback to merchants.\n Must Do\n Request information from merchants only if it\u2019s necessary.\n Do Not\n If your onboarding isn\u2019t essential, then make it dismissible using a Polaris Cancel icon.\n Do Not\n Don\u2019t have more than five steps in your onboarding process. This can lead merchants to drop off and not use your app.\n Previous\n App home page\n Next\n Marketing\n Was this page helpful?\n YesNo",
                    "filename": "docs/apps/design-guidelines/user-experience/onboarding/content.txt",
                    "start_index": 0,
                    "end_index": 2010,
                    "start_line": 1,
                    "end_line": 30,
                    "max_line": 30,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                }
            ]
        },
        "mmr_code_snippets_initial": [
            {
                "code": "export const AcceptNoCheckout = () => {\n    const [openPricing, setOpenPricing] = useState(false);\n\n    const { mutateAsync: acceptPricingPlan, isLoading } = useAcceptPricingPlan({\n        // todo: fix callback\n        onPossibleImmediatePlanChangeWithoutRedirect: () =>\n            shopify.toast.show('Plan updated successfully!', { duration: 3000 }),\n        onErrorBeforeReload: () => console.error('Error updating pricing plan.'),\n    });\n\n    const availablePlanIds = useAvailablePlanIds();\n\n    const handleAcceptPricingPlan = async () => {\n        await acceptPricingPlan({ newAfterSellPlanId: availablePlanIds.availablePlanIds.POST_PURCHASE_ONLY });\n    };\n\n    return (\n        <Card padding=\"8\">\n            <VerticalStack gap=\"4\">\n                <Text variant=\"headingLg\" as=\"h5\">\n                    Ready to supercharge your sales? Let\u2019s get started!\n                </Text>\n                <Text variant=\"bodyLg\" as=\"p\">\n                    Your subscription starts with a <strong>30-day free trial :)</strong>\n                </Text>\n                <Text variant=\"bodyLg\" as=\"p\">\n                    After the 30-day free trial, pricing plans start from FREE (50 orders per month or less) and\n                    increase incrementally based on your order volume (up to $799/month for stores that do 25,000+\n                    orders/month).\n                </Text>\n                <Box>\n                    <Link onClick={() => setOpenPricing(!openPricing)}>\n                        <HorizontalStack gap=\"1\" blockAlign=\"center\">\n                            See pricing table\n                            <Box>\n                                <Icon\n                                    color=\"interactive\"\n                                    source={(openPricing ? ChevronUpMinor : ChevronDownMinor) as IconSource}\n                                />\n                            </Box>\n                        </HorizontalStack>\n                    </Link>\n                </Box>\n                <Collapsible\n                    open={openPricing}\n                    id=\"basic-collapsible\"\n                    transition={{ duration: '200ms', timingFunction: 'ease-in-out' }}\n                    expandOnPrint\n                >\n                    <DataTable\n                        rows={PRICING_ROWS}\n                        columnContentTypes={['text', 'text']}\n                        headings={[\n                            <Text variant=\"headingSm\" as=\"h6\">\n                                Monthly Orders\n                            </Text>,\n                            <Text variant=\"headingSm\" as=\"h6\">\n                                Monthly Price\n                            </Text>,\n                        ]}\n                    />\n                </Collapsible>\n                <HorizontalStack align=\"center\">\n                    <VerticalStack inlineAlign=\"center\" gap=\"3\">\n                        <Box>\n                            {/*todo: button does nothing*/}\n                            <Bu",
                "filename": "web/client/src/pages/onboarding/onboarding-pricing.page.tsx",
                "start_index": 14830,
                "end_index": 17856,
                "start_line": 361,
                "end_line": 427,
                "max_line": 461,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n    /**\n     * This function will get the AfterSell plan that the user is currently on. This function\n     * will deal with all of the following thorny edge cases:\n     * - Legacy users who do not have an accepted AfterSell plan stored in the database. It will\n     *      return the correct legacy AfterSell plan for them.\n     * - Legacy users who were given custom pricing plans. It will return the correct legacy\n     *      custom AfterSell plan for them.\n     * - Users that have an accepted AfterSell plan stored in the database that does\n     *      not match the Shopify charge that they currently have accepted. This should never\n     *      happen, but it is technically possible.\n     * - Users that have an accepted AfterSell plan stored in the database, but their\n     *      Shopify charge has been cancelled. This covers all users who have uninstalled.\n     */",
                "filename": "web/server/src/modules/billing/legacy-billing-v2.service.ts",
                "start_index": 1346,
                "end_index": 2224,
                "start_line": 1,
                "end_line": 60,
                "max_line": 360,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "// @ts-nocheck\nfunction calculateBillAmountV1(totalStoreOrders) {\n    if (totalStoreOrders <= 50) return 0;\n    if (totalStoreOrders <= 100) return 7.99;\n    if (totalStoreOrders <= 200) return 14.99;\n    if (totalStoreOrders <= 500) return 24.99;\n    if (totalStoreOrders <= 1000) return 45.99;\n    if (totalStoreOrders <= 2000) return 89.99;\n    if (totalStoreOrders <= 2000) return 89.99;\n    if (totalStoreOrders <= 5000) return 139.99;\n    if (totalStoreOrders <= 10000) return 169.99;\n    if (totalStoreOrders <= 20000) return 214.99;\n    if (totalStoreOrders <= 50000) return 279.99;\n    if (totalStoreOrders <= 100000) return 309.99;\n    return 349.99;\n}\n\nexport const maxTotalPrice = 799.99;\n\nfunction calculateBillAmountV2(totalStoreOrders) {\n    const maxFixedPrice = 149.99;\n    const variablePriceThreshold = 4000;\n    const variablePricePerOrder = 0.03;\n\n    if (totalStoreOrders <= 50) return 0;\n    if (totalStoreOrders <= 100) return 7.99;\n    if (totalStoreOrders <= 200) return 14.99;\n    if (totalStoreOrders <= 500) return 29.99;\n    if (totalStoreOrders <= 1000) return 54.99;\n    if (totalStoreOrders <= 2000) return 99.99;\n    if (totalStoreOrders <= variablePriceThreshold) return maxFixedPrice;\n\n    const ordersAboveThreshold = totalStoreOrders - variablePriceThreshold;\n    const variablePrice = ordersAboveThreshold * variablePricePerOrder;\n    const totalPrice = maxFixedPrice + variablePrice;\n\n    return Math.min(totalPrice, maxTotalPrice);\n}\n\n/**\n * Get the total amount to charge a store based on their number of store orders\n * over the past 30 days. Values are in USD.\n * @param {number} totalStoreOrders - Total number of orders for the store over the past 30 days.\n * @param {(\"v1\"|\"v2\")} billingVersion - Version of billing accepted by the user.\n */\nexport function calculateBillAmount(totalStoreOrders, billingVersion) {\n    switch (billingVersion) {\n        case 'v1':\n            return calculateBillAmountV1(totalStoreOrders);\n        case 'v2':\n            return calculateBillAmountV2(totalStoreOrders);\n        default:\n            throw new Error(`Unknown billing version \"${billingVersion}\"`);\n    }\n}\n\n/**\n * @param {{ customPricingPlan: import(\"../../models/customPricingPlans.model\").CustomPricingPlan }}\n */\nexport function calculateBillAmountFromCustomPlan({ customPricingPlan }) {\n    switch (customPricingPlan.planType) {\n        case 'flat_rate':\n            return customPricingPlan.monthlyBillingAmount;\n        default:\n            throw new Error(`Unknown custom pricing plan type \"${customPricingPlan.planType}\"`);\n    }\n}\n\n/**\n * @param {{ hasAcceptedBillingV2: boolean }}\n */\nfunction getBillingVersion({ hasAcceptedBillingV2 }) {\n    return hasAcceptedBillingV2 ? 'v2' : 'v1';\n}\n\n/**\n * @param {{ customPricingPlan: import(\"../../models/customPricingPlans.model\").CustomPricingPlan|undefined|null|{} }}\n */\nexport function isValidCustomPricingPlan({ customPricingPlan }) {\n    return 'planType' in (customPricingPlan || {});\n}",
                "filename": "web/server/src/utils/billing/calculateBillAmount.ts",
                "start_index": 0,
                "end_index": 2990,
                "start_line": 1,
                "end_line": 93,
                "max_line": 93,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "if (hasSellingPlan && !isSubscriptionInCheckout) {\n        // NOTE: this fetching of selling plan groups could cause bugs. The current implementation\n        // is how it was initially implemented. We haven't had any customers encounter issues with this,\n        // but it may come up in the future.\n        //\n        // Current strategy:\n        // - fetch first selling plan group from the product\n        // - fetch first selling plan groups from each variant\n        // - if a variant has a selling plan group, then we assume that it's the same selling plan group as the product\n        //\n        // This is problematic in the case where a variant has a selling plan group that is different from the first\n        // selling plan group on the product.\n        const productWithSellingPlanGroupsPromise = shopifyService.graphql\n            .GetProductSellingPlanGroups({\n                productId: `gid://shopify/Product/${product.id}`,\n            })\n            .then((res) => res.product);\n        const variantSellingPlanGroupsPromise = shopifyService.graphql.GetMultipleVariantsSellingPlanGroups({\n            variantIds: productVariantsIds.map((id) => `gid://shopify/ProductVariant/${id}`),\n        });\n\n        const productWithSellingPlanGroups = await productWithSellingPlanGroupsPromise;\n        const variantSellingPlanGroups = (await variantSellingPlanGroupsPromise).nodes.filter(Boolean);\n\n        sellingPlans = (productWithSellingPlanGroups.sellingPlanGroups.edges[0]?.node?.sellingPlans?.edges || [])\n            .map((edge) => ({\n                id: edge.node.id.split('gid://shopify/SellingPlan/')[1],\n                name: edge.node.name,\n                interval: edge.node.billingPolicy.interval,\n                intervalCount: edge.node.billingPolicy.intervalCount,\n                pricingPolicies: edge.node.pricingPolicies,\n                startCyclePricingPolicy: edge.node.pricingPolicies.length > 0 ? edge.node.pricingPolicies[0] : null,\n            }))\n            .filter((sellingPlan) => sellingPlan !== null);\n\n        preparedVariants = preparedVariants.map((variant) => {\n            const graphqlVariant = variantSellingPlanGroups.find(\n                (node) => node.legacyResourceId === String(variant.id)\n            );\n            const hasSellingPlan = Boolean(graphqlVariant?.sellingPlanGroups.edges.length > 0);\n            return {\n                ...variant,\n                hasSellingPlan,\n            };\n        });\n\n        if (requiresSellingPlan && isSubscriptionInCheckout) {\n            const isAllVariantsSubscriptions = preparedVariants.every((variant) => variant.hasSellingPlan);\n            if (isAllVariantsSubscriptions) return 'SKIP';\n        }\n        subscriptionVariants = preparedVariants.filter((variant) => variant.hasSellingPlan);\n        subscriptionOptions = getOptions(\n            fetchedProduct.options,\n            subscriptionVariants,\n            variantHasOptionV1,\n            showAllOutOfStockVariants\n        );\n    }",
                "filename": "web/server/src/modules/post-purchase-public/post-purchase-public.controller.ts",
                "start_index": 9211,
                "end_index": 12209,
                "start_line": 192,
                "end_line": 1415,
                "max_line": 1418,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "[DefaultAfterSellPlanId.POST_PURCHASE_AND_CHECKOUT_EXISTING_USERS_ADDED_TO_CHECKOUT]: {\n        id: DefaultAfterSellPlanId.POST_PURCHASE_AND_CHECKOUT_EXISTING_USERS_ADDED_TO_CHECKOUT,\n        shopifyCharge: {\n            chargeName: DefaultShopifyChargeName['AfterSell 2.0 Pricing Plan'],\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: 0,\n                paysForFeatures: [],\n                terms: 'FREE up to 50 orders per month then starts at $7.99',\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            maxMonthlyUsageAmount: 799.99,\n        },\n        monthlyUsageCharges: [\n            {\n                cappedAmount: 699.99,\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.TOTAL_STORE_ORDERS_V2,\n                paysForFeature: AfterSellPaidFeature.POST_PURCHASE,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            {\n                cappedAmount: 99.0,\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.FLAT_MAX_USAGE_AMOUNT,\n                paysForFeature: AfterSellPaidFeature.CHECKOUT,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n        ],\n        planManagementPageVersion:\n            PlanManagementPageVersion.POST_PURCHASE_AND_CHECKOUT_FOR_USERS_INSTALLED_BEFORE_CHECKOUT_LAUNCH,\n    },\n    [DefaultAfterSellPlanId.INTERNAL_TESTING_SWITH_TO_USAGE_INCLUDED_STATE]: {\n        id: DefaultAfterSellPlanId.INTERNAL_TESTING_SWITH_TO_USAGE_INCLUDED_STATE,\n        shopifyCharge: {\n            chargeName: DefaultShopifyChargeName['AfterSell Pricing'],\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: 0,\n                paysForFeatures: [],\n                terms: 'FREE up to 50 orders per month then starts at $7.99',\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            maxMonthlyUsageAmount: 799.99,\n        },\n        monthlyUsageCharges: [\n            {\n                cappedAmount: 699.99,\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.TOTAL_STORE_ORDERS_V2,\n                paysForFeature: AfterSellPaidFeature.POST_PURCHASE,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            {\n                cappedAmount: 99.0,\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.FLAT_MAX_USAGE_AMOUNT,\n                paysForFeature: AfterSellPaidFeature.CHECKOUT,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n        ],\n        planManagementPageVersion:\n            PlanManagementPageVersion.POST_PURCHASE_AND_CHECKOUT_FOR_USERS_INSTALLED_BEFORE_CHECKOUT_LAUNCH,\n    },",
                "filename": "web/server/src/modules/billing/billing.constants.ts",
                "start_index": 8896,
                "end_index": 11622,
                "start_line": 181,
                "end_line": 372,
                "max_line": 375,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "static async getUserNeedsToAcceptNewAfterSellPlan({\n        shopifyService,\n    }: {\n        shopifyService: ShopifyService;\n    }): Promise<NeedsNewCharge | DoesNotNeedNewCharge> {\n        const acceptedAfterSellPlanResult = await this.getUserAcceptedAndActiveAfterSellPlan({ shopifyService });\n        if (!acceptedAfterSellPlanResult.success) {\n            return {\n                needsToAcceptNewPlan: true,\n                reason: acceptedAfterSellPlanResult.reason,\n            };\n        }\n        if (acceptedAfterSellPlanResult.data.aftersellPlan.isDeprecated_forceUsersToAcceptNewPlanOnNextLogin) {\n            return {\n                needsToAcceptNewPlan: true,\n                reason: `User is currently on a deprecated AfterSell plan. Current AfterSell plan: \"${acceptedAfterSellPlanResult.data.aftersellPlan.id}\".`,\n            };\n        }\n        const pendingPlanChange = await PendingPlanChangesService.getUserPendingPlanChange({\n            myshopifyDomain: shopifyService.shop,\n        });\n        if (pendingPlanChange) {\n            return {\n                needsToAcceptNewPlan: true,\n                reason: `User has a pending AfterSell plan change. Pending AfterSell plan change: \"${pendingPlanChange.pendingAfterSellPlanId}\".`,\n            };\n        }\n        return {\n            needsToAcceptNewPlan: false,\n        };\n    }\n\n    static getUserAccessiblePaidFeatures({\n        acceptedAfterSellPlan,\n    }: {\n        acceptedAfterSellPlan: AfterSellPlan;\n    }): AfterSellPaidFeature[] {\n        const paidFeatures: AfterSellPaidFeature[] = [];\n        for (const feature of acceptedAfterSellPlan.shopifyCharge.recurringChargeConfigOnChargeAccept.paysForFeatures) {\n            paidFeatures.push(feature);\n        }\n        for (const usageCharge of acceptedAfterSellPlan.monthlyUsageCharges) {\n            paidFeatures.push(usageCharge.paysForFeature);\n        }\n        return paidFeatures;\n    }",
                "filename": "web/server/src/modules/billing/legacy-billing-v2.service.ts",
                "start_index": 7753,
                "end_index": 9683,
                "start_line": 167,
                "end_line": 359,
                "max_line": 360,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "if (isLegacyUser) {\n            // The following section handles legacy support for all users that accepted a Shopify charge before\n            // we switched billing to use AfterSell plans. This change occured with the release of checkout\n            // extensions (early October, 2022). Before this point, users fit into one of following three categories:\n            //  1. All users that installed before AfterSell 2.0 was released. These users\n            //      will have a Shopify charge with the name \"AfterSell Pricing Plan\".\n            //  2. Most users that installed after AfterSell 2.0 was released. These users\n            //      will have a Shopify charge with the name \"AfterSell 2.0 Pricing Plan\".\n            const hasValidLegacyCharge =\n                activeShopifyCharge.name === DefaultShopifyChargeName['Aftersell Pricing Plan'] ||\n                activeShopifyCharge.name === DefaultShopifyChargeName['AfterSell 2.0 Pricing Plan'];\n            if (!hasValidLegacyCharge) {\n                return {\n                    success: false,\n                    errorCode: 'no_accepted_aftersell_plan',\n                    reason: 'User does not have an accepted AfterSell plan.',\n                };\n            }\n            if (activeShopifyCharge.name === DefaultShopifyChargeName['Aftersell Pricing Plan']) {\n                acceptedAfterSellPlan = PRESET_AFTERSELL_PLANS.LEGACY_V1;\n            } else if (activeShopifyCharge.name === DefaultShopifyChargeName['AfterSell 2.0 Pricing Plan']) {\n                const V2_799_PLAN = PRESET_AFTERSELL_PLANS.LEGACY_V2_799;\n                const V2_1299_PLAN = PRESET_AFTERSELL_PLANS.LEGACY_V2_1299;\n                const activeCappedAmount = Number(activeShopifyCharge.capped_amount);\n                if (activeCappedAmount === V2_799_PLAN.shopifyCharge.maxMonthlyUsageAmount) {\n                    acceptedAfterSellPlan = V2_799_PLAN;\n                } else if (activeCappedAmount === V2_1299_PLAN.shopifyCharge.maxMonthlyUsageAmount) {\n                    acceptedAfterSellPlan = V2_1299_PLAN;\n                } else {\n                    throw new Error(\n                        'Unexpected code path. Active Shopify charge capped amount does not match any known legacy capped amounts for V2 plans.'\n                    );\n                }\n            } else {\n                throw new Error(\n                    'Unexpected code path. Active Shopify charge name does not match any known legacy custom charge name, but it should have been checked above.'\n                );\n            }\n        }",
                "filename": "web/server/src/modules/billing/legacy-billing-v2.service.ts",
                "start_index": 3593,
                "end_index": 6162,
                "start_line": 95,
                "end_line": 358,
                "max_line": 360,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<SingleCard\n                    icon={StatusActiveMajor as IconSource}\n                    planName=\"Checkout + Post Purchase\"\n                    planId={availablePlanIds.POST_PURCHASE_AND_CHECKOUT}\n                    planDescription=\"Unlock the full potential of AfterSell\"\n                    hasUsage\n                    price=\"$99\"\n                    buttonText=\"Try for free\"\n                    recommended\n                    priceDescription=\"+ usage up to $799/month\"\n                    openPricingModal={openPricingModal}\n                    benefits={[\n                        'Checkout and post purchase',\n                        'Unlimited funnels',\n                        'Unlimited widgets',\n                        'Precise targeting',\n                        'A/B testing',\n                        'Robust Analytics',\n                    ]}\n                />\n                <SingleCard\n                    icon={CheckoutMajor as IconSource}\n                    planName=\"Enterprise\"\n                    planId={availablePlanIds.ENTERPRISE}\n                    planDescription=\"Customize your Shopify checkout\"\n                    price=\"Custom\"\n                    buttonText=\"Contact Us\"\n                    priceDescription=\"Reach out for a quote\"\n                    openPricingModal={openPricingModal}\n                    benefits={['Checkout and post purchase', 'Custom funnel implementation', 'High priority support']}\n                />\n            </HorizontalStack>\n            <UsagePricingModal open={openPricing} onClose={() => setOpenPricing(false)",
                "filename": "web/client/src/pages/onboarding/onboarding-pricing.page.tsx",
                "start_index": 13217,
                "end_index": 14802,
                "start_line": 295,
                "end_line": 356,
                "max_line": 461,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { Button, Card, Page, LegacyStack, Text, VerticalStack, Icon } from '@shopify/polaris';\nimport React from 'react';\nimport { PricingOptions } from './PricingOptions';\nimport Star from 'src/shared-components/star';\nimport { MobileAcceptMajor } from '@shopify/polaris-icons';\nimport { clearPromoCodeCookie } from 'src/utils/promo';\nimport { useAcceptPricingPlan } from 'src/hooks/useAcceptPricingPlan';\n\nexport const CustomPricing = ({ aftersellPlanId, pricingPageMessageHtml, promoCode }: CustomPricingProps) => {\n    const { isLoading: isAcceptingPlan, mutateAsync: acceptPricingPlan } = useAcceptPricingPlan({\n        onPossibleImmediatePlanChangeWithoutRedirect: () => {\n            shopify.toast.show('Plan updated successfully!', { duration: 3000 });\n            window.location.reload();\n        },\n        onErrorBeforeReload: () => {\n            // If there was an error accepting the plan, we will assume that the promo code\n            // is invalid and clear the cookie. This means the user will go through the normal\n            // non-promo pricing flow when the page reloads.\n            clearPromoCodeCookie();\n        },\n    });\n\n    return (\n        <Card>\n            <VerticalStack align=\"center\" inlineAlign=\"center\" gap={'4'}>\n                <Text as=\"h5\" variant=\"headingLg\">\n                    Welcome to AfterSell\n                </Text>\n                <div dangerouslySetInnerHTML={{ __html: pricingPageMessageHtml }} />\n                <PricingOptions />\n                <Button\n                    primary\n                    size=\"large\"\n                    loading={isAcceptingPlan}\n                    onClick={() => acceptPricingPlan({ newAfterSellPlanId: aftersellPlanId, promoCode })}\n                >\n                    Continue to AfterSell\n                </Button>\n                <Text as=\"h3\">AfterSell has made over $100M for 7000+ brands...now it\u2019s your turn!</Text>\n                <LegacyStack wrap distribution=\"center\" alignment=\"center\">\n                    <VerticalStack inlineAlign=\"center\">\n                        <StarGroup />\n                        <Text as=\"p\">(600+ reviews)</Text>\n                    </VerticalStack>\n\n                    <IconText\n                        icon={<Icon color=\"success\" source={MobileAcceptMajor} />}\n                        text={'500% ROI money-back guarantee'}\n                    />\n                </LegacyStack>\n            </VerticalStack>\n        </Card>\n    );\n};\nconst StarGroup = () => {\n    return (\n        <div>\n            <Star fill=\"#EEC200\" />\n            <Star fill=\"#EEC200\" />\n            <Star fill=\"#EEC200\" />\n            <Star fill=\"#EEC200\" />\n            <Star fill=\"#EEC200\" />\n        </div>\n    );\n};\nconst IconText = ({ icon, text }) => {\n    return (\n        <div>\n            <div>{icon}</div>\n            <p>{text}</p>\n        </div>\n    );\n};\n\ninterface CustomPricingProps {\n    aftersellPlanId: string;\n    pricingPageMessageHtml: string;\n    promoCode?: string;\n}",
                "filename": "web/client/src/pages/onboarding/components/CustomPricing.tsx",
                "start_index": 0,
                "end_index": 2998,
                "start_line": 1,
                "end_line": 79,
                "max_line": 79,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { useAppBridge } from '@shopify/app-bridge-react';\nimport { isShopifyEmbedded } from '@shopify/app-bridge-utils';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { sentryCaptureError } from 'src/utils/utils';\n\ntype AcceptPricingPlanParams = {\n    onPossibleImmediatePlanChangeWithoutRedirect: () => void;\n    onErrorBeforeReload?: () => void;\n};\n\ntype AcceptPricingPlanMutationParams = {\n    newAfterSellPlanId: string; // todo: update type\n    promoCode?: string;\n};\n\ntype AcceptPricingPlanResponseBodyType = {\n    confirmationUrl?: string;\n    immediateTransferSuccess?: boolean;\n};\n\nexport const useAcceptPricingPlan = ({\n    onPossibleImmediatePlanChangeWithoutRedirect,\n    onErrorBeforeReload,\n}: AcceptPricingPlanParams) => {\n    const app = useAppBridge();\n    const redirect = Redirect.create(app);\n    const queryClient = useQueryClient();\n\n    return useMutation({\n        mutationFn: async ({ newAfterSellPlanId, promoCode }: AcceptPricingPlanMutationParams) => {\n            const result = await fetch(`/api/v1/plan/initiate`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ newAfterSellPlanId, promoCode }),\n            }).then((res) => res.json());\n            return result as AcceptPricingPlanResponseBodyType;\n        },\n        onSuccess: (result) => {\n            const { confirmationUrl, immediateTransferSuccess } = result;\n            const success = confirmationUrl || immediateTransferSuccess;\n            if (success) {\n                queryClient.invalidateQueries(['v1/plan/details']);\n                if (immediateTransferSuccess) {\n                    onPossibleImmediatePlanChangeWithoutRedirect();\n                } else if (confirmationUrl) {\n                    // redirect parent page instead of iframe\n                    if (isShopifyEmbedded()) {\n                        redirect.dispatch(Redirect.Action.REMOTE, confirmationUrl);\n                    } else {\n                        throw new Error('Expected app to be inside iframe.');\n                    }\n                }\n            } else {\n                shopify.toast.show('Error updating pricing plan.', { isError: true });\n                if (onErrorBeforeReload) onErrorBeforeReload();\n                window.location.reload();\n            }\n        },\n        onError: (error) => {\n            shopify.toast.show('Error updating pricing plan.', { isError: true });\n            sentryCaptureError(error);\n        },\n    });\n};",
                "filename": "web/client/src/hooks/useAcceptPricingPlan.ts",
                "start_index": 0,
                "end_index": 2646,
                "start_line": 1,
                "end_line": 67,
                "max_line": 67,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "reranked_doc_snippets_initial": [
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<span class=\"order-summary-toggle__inner\">\n                        <span class=\"order-summary-toggle__icon-wrapper\">\n                            <svg\n                                width=\"20\"\n                                height=\"19\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__icon\"\n                            >\n                                <path\n                                    d=\"M17.178 13.088H5.453c-.454 0-.91-.364-.91-.818L3.727 1.818H0V0h4.544c.455 0 .91.364.91.818l.09 1.272h13.45c.274 0 .547.09.73.364.18.182.27.454.18.727l-1.817 9.18c-.09.455-.455.728-.91.728zM6.27 11.27h10.09l1.454-7.362H5.634l.637 7.362zm.092 7.715c1.004 0 1.818-.813 1.818-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817zm9.18 0c1.004 0 1.817-.813 1.817-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--show\">\n                            <span>Show order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"6\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M.504 1.813l4.358 3.845.496.438.496-.438 4.642-4.096L9.504.438 4.862 4.534h.992L1.496.69.504 1.812z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--hide\">\n                            <span>Hide order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"7\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M6.138.876L5.642.438l-.496.438L.504 4.972l.992 1.124L6.138 2l-.496.436 3.862 3.408.992-1.122L6.138.876z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span\n                            class=\"order-summary-toggle__total-recap total-recap\"\n                            data-order-summary-section=\"toggle-total-recap\"\n                        >\n                            <span class=\"total-recap__final-price\" data-checkout-payment-due-target=\"5073\">$50.73</span>\n                        </span>\n                    </span>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 242214,
                "end_index": 245205,
                "start_line": 6097,
                "end_line": 6446,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<tbody class=\"total-line-table__tbody\">\n                                            <tr class=\"total-line total-line--subtotal\">\n                                                <th class=\"total-line__name\" scope=\"row\">Subtotal</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-subtotal-price-target=\"4299\"\n                                                    >\n                                                        $42.99\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--shipping\">\n                                                <th class=\"total-line__name\" scope=\"row\">\n                                                    <span> Shipping </span>\n                                                </th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-shipping-target=\"0\"\n                                                    >\n                                                        Free\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--taxes\" data-checkout-taxes=\"\">\n                                                <th class=\"total-line__name\" scope=\"row\">Taxes</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-taxes-target=\"774\"\n                                                        >$7.74</span\n                                                    >\n                                                </td>\n                                            </tr>\n                                        </tbody>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 333285,
                "end_index": 335837,
                "start_line": 6396,
                "end_line": 6433,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/server` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 999,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<th class=\"product__description\" scope=\"row\">\n                                                        <span class=\"product__description__name order-summary__emphasis\"\n                                                            >Product Name</span\n                                                        >\n                                                        <span\n                                                            class=\"product__description__variant order-summary__small-text\"\n                                                            >Variant Name</span\n                                                        >\n                                                    </th>\n                                                    <td class=\"product__quantity visually-hidden\">1</td>\n                                                    <td class=\"product__price\">\n                                                        <span class=\"order-summary__emphasis\">$42.99</span>\n                                                    </td>\n                                                </tr>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 331038,
                "end_index": 332129,
                "start_line": 6363,
                "end_line": 6376,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <!-- Shopify App Bridge [START] -->\n        <meta name=\"shopify-api-key\" content=\"%SHOPIFY_API_KEY%\" />",
                "filename": "web/client/index.html",
                "start_index": 38,
                "end_index": 156,
                "start_line": 4,
                "end_line": 6,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<tfoot class=\"total-line-table__footer\">\n                                            <tr class=\"total-line\">\n                                                <th class=\"total-line__name payment-due-label\" scope=\"row\">\n                                                    <span class=\"payment-due-label__total\">Total</span>\n                                                </th>\n                                                <td class=\"total-line__price payment-due\">\n                                                    <span class=\"payment-due__currency\">USD</span>\n                                                    <span\n                                                        class=\"payment-due__price\"\n                                                        data-checkout-payment-due-target=\"5073\"\n                                                    >\n                                                        $50.73\n                                                    </span>\n                                                </td>\n                                            </tr>\n                                        </tfoot>\n                                    </table>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 335878,
                "end_index": 337054,
                "start_line": 6434,
                "end_line": 6450,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<button\n                class=\"order-summary-toggle order-summary-toggle--show shown-if-js\"\n                data-trekkie-id=\"order_summary_toggle\"\n                aria-expanded=\"false\"\n                aria-controls=\"order-summary\"\n                data-drawer-toggle=\"[data-order-summary]\"\n            >",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241855,
                "end_index": 242157,
                "start_line": 6089,
                "end_line": 6488,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<table class=\"total-line-table\">\n                                        <caption class=\"visually-hidden\">\n                                            Cost summary\n                                        </caption>\n                                        <thead>\n                                            <tr>\n                                                <th scope=\"col\"><span class=\"visually-hidden\">Description</span></th>\n                                                <th scope=\"col\"><span class=\"visually-hidden\">Price</span></th>\n                                            </tr>\n                                        </thead>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 332604,
                "end_index": 333244,
                "start_line": 6386,
                "end_line": 6395,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# AfterSell\n\n### All Docs on Notion \ud83d\udc49 [AfterSell Notion Docs](https://www.notion.so/aftersell/AfterSell-Docs-9d43566167b5426d86b5983925872953?pvs=4)",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 148,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"order-summary__section__content\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323949,
                "end_index": 323994,
                "start_line": 6297,
                "end_line": 6297,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<html\n    lang=\"en\"\n    dir=\"ltr\"\n    class=\"js desktop page--no-banner page--logo-main page--show page--show card-fields cors svg opacity placeholder no-touchevents displaytable display-table generatedcontent cssanimations flexbox no-flexboxtweener anyflexbox shopemoji floating-labels\"\n>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 0,
                "end_index": 289,
                "start_line": 1,
                "end_line": 6518,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<body class=\"aftersell-preview\">\n        <a href=\"#main-header\" class=\"skip-to-content\"> Skip to content </a>\n\n        <header class=\"banner\" data-header=\"\" role=\"banner\">\n            <div class=\"wrap\">\n                <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n            </div>\n        </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241387,
                "end_index": 241804,
                "start_line": 6077,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"hidden\">\n                            <span class=\"visually-hidden\" id=\"forwarding-external-new-window-message\">\n                                Opens external website in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-new-window-message\">\n                                Opens in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-external-message\">\n                                Opens external website.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"checkout-context-step-one\">\n                                Customer information - Checkout\n                            </span>\n                        </div>\n                    </main>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 322226,
                "end_index": 323078,
                "start_line": 6265,
                "end_line": 6282,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# [[[ --- CLIENT --- ]]]\nFROM node:18.16.1-alpine AS client\nARG SHOPIFY_API_KEY\nENV SHOPIFY_API_KEY=$SHOPIFY_API_KEY\nARG HOST\nENV HOST=$HOST\nARG NODE_ENV\nENV NODE_ENV=$NODE_ENV\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/client/package.json ./web/client/package.json\nCOPY web/client/yarn.lock ./web/client/yarn.lock\nRUN cd web/client && yarn install --frozen-lockfile --production=false\nCOPY extensions-web-common/package.json ./extensions-web-common/package.json\nCOPY extensions-web-common/yarn.lock ./extensions-web-common/yarn.lock\nRUN cd extensions-web-common && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY extensions/post-purchase ./extensions/post-purchase\nCOPY extensions-web-common/post-purchase ./extensions-web-common/post-purchase\nCOPY extensions-web-common/checkout ./extensions-web-common/checkout\nCOPY extensions-web-common/shared ./extensions-web-common/shared\nCOPY extensions-web-common/ty-page ./extensions-web-common/ty-page\nCOPY web/client ./web/client\nRUN cd web/client && yarn build\n\n# [[[ --- TY PAGE --- ]]]\nFROM node:18.16.1-alpine AS ty-page\nARG HOST\nENV HOST=$HOST\nWORKDIR /usr/src/app\nCOPY web/widgets/package.json ./web/widgets/package.json\nCOPY web/widgets/yarn.lock ./web/widgets/yarn.lock\nRUN cd web/widgets && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY web/widgets ./web/widgets\nRUN cd web/widgets && yarn build\n\n# [[[ --- SERVER --- ]]]\nFROM node:18.16.1-alpine AS server\nWORKDIR /usr/src/app\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=false\nCOPY web/server ./web/server\nCOPY web/common ./web/common\nRUN cd web/server && yarn build\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM node:18.16.1-alpine AS final\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=true\nCOPY --from=server /usr/src/app/web/server/build ./web/server/build\nCOPY --from=ty-page /usr/src/app/web/widgets/dist ./web/server/build/server/dist\nCOPY --from=client /usr/src/app/web/client/dist ./web/server/build/server/dist/client\nCOPY package.json ./package.json\nCMD [\"yarn\", \"start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2514,
                "start_line": 1,
                "end_line": 61,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<table class=\"product-table\">\n                                            <caption class=\"visually-hidden\">\n                                                Shopping cart\n                                            </caption>\n                                            <thead class=\"product-table__header\">\n                                                <tr>\n                                                    <th scope=\"col\">\n                                                        <span class=\"visually-hidden\">Product image</span>\n                                                    </th>\n                                                    <th scope=\"col\">\n                                                        <span class=\"visually-hidden\">Description</span>\n                                                    </th>\n                                                    <th scope=\"col\"><span class=\"visually-hidden\">Quantity</span></th>\n                                                    <th scope=\"col\"><span class=\"visually-hidden\">Price</span></th>\n                                                </tr>\n                                            </thead>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 324035,
                "end_index": 325202,
                "start_line": 6298,
                "end_line": 6313,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"order-summary order-summary--is-collapsed\" data-order-summary=\"\">\n                            <h2 class=\"visually-hidden\">Order summary</h2>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323587,
                "end_index": 323739,
                "start_line": 6292,
                "end_line": 6293,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"step__sections\">\n                                <div class=\"section\">\n                                    <div class=\"section__header os-header\">\n                                        <svg\n                                            width=\"56\"\n                                            height=\"56\"\n                                            viewBox=\"0 0 56 56\"\n                                            fill=\"none\"\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                            <circle cx=\"28\" cy=\"28\" r=\"26\" stroke=\"#E5E5E5\" stroke-width=\"2.29412\" />\n                                            <path\n                                                fill-rule=\"evenodd\"\n                                                clip-rule=\"evenodd\"\n                                                d=\"M22.4811 37.3603L16.3636 31.3947C15.5663 30.6172 15.5663 29.3605 16.3636 28.583C17.1609 27.8055 18.4497 27.8055 19.247 28.583L23.8066 33.0293L36.6493 18.7538C37.3834 17.9186 38.6701 17.8231 39.5225 18.537C40.379 19.2529 40.4789 20.5056 39.7448 21.3388L25.4706 37.2469C25.1015 37.6685 24.5672 37.9191 24.0003 37.9409C23.3825 37.9429 22.8625 37.7341 22.4811 37.3603Z\"\n                                                fill=\"#008060\"\n                                                stroke=\"#E5E5E5\"\n                                                stroke-width=\"0.764706\"\n                                            />\n                                        </svg>\n                                        <div class=\"os-header__heading\">\n                                            <span class=\"os-order-number\"> Order #1001 </span>\n                                            <h2 class=\"os-header__title\" id=\"main-header\" tabindex=\"-1\">\n                                                Thank you {{Customer Name}}!\n                                            </h2>\n                                        </div>\n                                    </div>\n                                </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245858,
                "end_index": 247957,
                "start_line": 6161,
                "end_line": 6451,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"order-summary__section order-summary__section--product-list\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323839,
                "end_index": 323912,
                "start_line": 6296,
                "end_line": 6296,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "solution_task": {
            "structured_resp": "Clarify:\nThe issue is that non-checkout stores are being accepted with incorrect pricing plans during onboarding. The incorrect plan displayed is \"free for 0 to 50 orders\" instead of the correct \"$7.99 per month for 0 to 100 orders.\" The correct pricing is hidden behind a manual expandable section that is not clearly indicated, and incorrect old pricing is displayed in a collapsible section on the Shopify pricing page. Merchants with fewer than 50 orders have not been charged due to the app accepting the old pricing plan. The issue has been ongoing for a few months.\n\nHypothesize:\n- The regression from Polaris 12 may have introduced a bug in the pricing logic or display components.\n- The billing constants or billing service logic may not be updated to reflect the new pricing plans.\n- The onboarding pricing page may not be displaying the correct pricing information due to outdated data or incorrect logic.\n- The logic for accepting pricing plans may be defaulting to an old plan or not correctly validating the new plan details.\n\nExperiment:\n- Review the code snippets provided, especially those related to billing constants, billing services, and onboarding pricing pages.\n- Check if the pricing plan details are correctly set in the billing constants and if the billing service logic is correctly determining the plan based on the store's order count.\n- Verify that the onboarding pricing page is using the correct data to display pricing plans and that the logic for accepting pricing plans is correctly handling the new plan details.\n\nAnalyze:\n- The provided code snippets from `billing.constants.ts` show different plan IDs with terms that include \"FREE up to 50 orders per month then starts at $7.99,\" which matches the incorrect plan being accepted.\n- The `onboarding-pricing.page.tsx` file contains the pricing rows and logic for displaying and accepting pricing plans during onboarding.\n- The `legacy-billing-v2.service.ts` file contains logic for handling legacy users and determining the accepted AfterSell plan, which may be relevant to the issue.\n\nResolve:\n- Update the `billing.constants.ts` file to reflect the correct new pricing plan details, ensuring that the terms match \"$7.99 per month for 0 to 100 orders\" and that the correct capped amounts and charging algorithms are set.\n- In the `onboarding-pricing.page.tsx` file, ensure that the `PRICING_ROWS` constant and any other displayed pricing information are updated to reflect the new pricing plan details.\n- Modify the `legacy-billing-v2.service.ts` logic to ensure that new users are not being defaulted to a legacy plan and that the correct plan is being determined based on the store's order count.\n- Ensure that the onboarding pricing page components, such as `CustomPricing` and `OnboardingAcceptPricing`, are using the updated pricing plan details when displaying information and accepting plans.\n- Review and test the changes to confirm that the correct pricing plan is displayed and accepted during onboarding for non-checkout stores.\n- Communicate with the team to assess the impact on merchants who have been incorrectly not billed and determine the course of action for billing corrections, which may involve reaching out to affected merchants and adjusting their billing accordingly.",
            "response": "To address the issue of non-checkout stores being onboarded with incorrect pricing plans, it's essential to ensure that the pricing information displayed during the onboarding process is accurate and that the billing logic correctly reflects the updated pricing structure. The current discrepancy, where merchants are seeing \"free for 0 to 50 orders\" instead of the correct \"$7.99 per month for 0 to 100 orders,\" needs to be resolved to prevent further confusion and potential revenue loss.\n\n- Revise the `billing.constants.ts` file to accurately represent the new pricing plan, confirming that the terms and conditions align with the \"$7.99 per month for 0 to 100 orders\" structure.\n- Update the `onboarding-pricing.page.tsx` file to ensure that the displayed pricing information, particularly within the `PRICING_ROWS` constant, is consistent with the updated pricing plan.\n- Adjust the logic within `legacy-billing-v2.service.ts` to prevent new users from being incorrectly assigned to legacy plans and to correctly identify the appropriate plan based on the store's order volume.\n- Verify that the components on the onboarding pricing page, such as `CustomPricing` and `OnboardingAcceptPricing`, utilize the revised pricing details for both display and plan acceptance purposes.\n- Conduct thorough testing of the modified code to confirm that the onboarding process now correctly displays and accepts the updated pricing plan for non-checkout stores.\n- Coordinate with the team to evaluate the impact on merchants who were not billed due to the error and develop a strategy for billing adjustments, which may include contacting affected merchants to rectify their billing status."
        },
        "snippet_processor_task": {
            "web/server/src/modules/billing/billing.constants.ts": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "Defines different billing plans with pricing details, including terms and charging algorithms. Indicates the deprecation of old plans and the need to force users to accept new plans on login.",
                        "snippet": {
                            "code": "{\n    // todo: add TY_PAGE feature flag\n    [DefaultAfterSellPlanId.LEGACY_V1]: {\n        id: DefaultAfterSellPlanId.LEGACY_V1,\n        shopifyCharge: {\n            chargeName: DefaultShopifyChargeName['Aftersell Pricing Plan'],\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: 0,\n                paysForFeatures: [],\n                terms: 'FREE up to 50 orders per month then starts at $7.99',\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            maxMonthlyUsageAmount: 349.99,\n        },\n        monthlyUsageCharges: [\n            {\n                cappedAmount: 349.99,\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.TOTAL_STORE_ORDERS_V1,\n                paysForFeature: AfterSellPaidFeature.POST_PURCHASE,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n        ],\n        planManagementPageVersion: PlanManagementPageVersion.NO_PAGE,\n        // This was deprecated when we first released One-Click offers in August 2021.\n        // Anyone who is on the old 1.0 pricing plan should be forced to accept a new plan\n        // the next time they login to the app.\n        isDeprecated_forceUsersToAcceptNewPlanOnNextLogin: true,\n    },\n    [DefaultAfterSellPlanId.LEGACY_V2_799]: {\n        id: DefaultAfterSellPlanId.LEGACY_V2_799,\n        shopifyCharge: {\n            chargeName: DefaultShopifyChargeName['AfterSell 2.0 Pricing Plan'],\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: 0,\n                paysForFeatures: [],\n                terms: 'FREE up to 50 orders per month then starts at $7.99',\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            maxMonthlyUsageAmount: 799.99,\n        },\n        monthlyUsageCharges: [\n            {\n                cappedAmount: 799.99,\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.TOTAL_STORE_ORDERS_V2,\n                paysForFeature: AfterSellPaidFeature.POST_PURCHASE,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n        ],\n        planManagementPageVersion: PlanManagementPageVersion.NO_PAGE,\n        // This plan is explicitly NOT deprecated. We don't want to force all users that\n        // installed AfterSell before we released Checkout to have to accept a new plan.\n        isDeprecated_forceUsersToAcceptNewPlanOnNextLogin: false,\n    },",
                            "filename": "web/server/src/modules/billing/billing.constants.ts",
                            "start_index": 4112,
                            "end_index": 6550,
                            "start_line": 1,
                            "end_line": 372,
                            "max_line": 375,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet defines different billing plans with pricing details and indicates the need to force users to accept new plans, which is directly related to correcting the pricing text and ensuring users are on the correct billing plan."
                },
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "Defines billing constants for different pricing plans including terms, charges, and usage details. Relevant for understanding how pricing plans are structured and managed in the application.",
                        "snippet": {
                            "code": "[DefaultAfterSellPlanId.LEGACY_V2_1299]: {\n        id: DefaultAfterSellPlanId.LEGACY_V2_1299,\n        shopifyCharge: {\n            chargeName: DefaultShopifyChargeName['AfterSell 2.0 Pricing Plan'],\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: 0,\n                paysForFeatures: [],\n                terms: 'FREE up to 50 orders per month then starts at $7.99',\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            maxMonthlyUsageAmount: 1299.99, // The cap was 1299.99, but we switched our usage to only bill up to 799.99.\n        },\n        monthlyUsageCharges: [\n            {\n                cappedAmount: 799.99, // This is the actual capped amount that we use.\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.TOTAL_STORE_ORDERS_V2,\n                paysForFeature: AfterSellPaidFeature.POST_PURCHASE,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n        ],\n        planManagementPageVersion: PlanManagementPageVersion.NO_PAGE,\n        // This plan is explicitly NOT deprecated. Users from late 2021 will have\n        // this plan and don't need to accept a new plan currently. We don't use\n        // the whole 1299.99 usage charge, but that's fine.\n        isDeprecated_forceUsersToAcceptNewPlanOnNextLogin: false,\n    },\n    [DefaultAfterSellPlanId.POST_PURCHASE_ONLY_FOR_NON_CHECKOUT_USERS]: {\n        id: DefaultAfterSellPlanId.POST_PURCHASE_ONLY_FOR_NON_CHECKOUT_USERS,\n        shopifyCharge: {\n            chargeName: DefaultShopifyChargeName['AfterSell Pricing'],\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: 0,\n                paysForFeatures: [],\n                terms: 'FREE up to 50 orders per month then starts at $7.99',\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n            maxMonthlyUsageAmount: 799.99,\n        },\n        monthlyUsageCharges: [\n            {\n                cappedAmount: 799.99,\n                chargingAlgorithm: MonthlyUsageChargingAlgorithm.TOTAL_STORE_ORDERS_V2,\n                paysForFeature: AfterSellPaidFeature.POST_PURCHASE,\n                freeTrialDaysFromDateFeaturesFirstEnabled: 30,\n            },\n        ],\n        planManagementPageVersion: PlanManagementPageVersion.NO_PAGE,\n    },",
                            "filename": "web/server/src/modules/billing/billing.constants.ts",
                            "start_index": 6555,
                            "end_index": 8891,
                            "start_line": 133,
                            "end_line": 372,
                            "max_line": 375,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet defines billing constants for different pricing plans, which is essential for understanding how pricing plans are structured and managed in the application, and is necessary for updating the pricing information."
                }
            ],
            "web/server/src/modules/billing/legacy-billing-v2.service.ts": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "Snippet provides detailed logic for handling legacy billing plans and identifying legacy charges based on specific criteria and plan names.",
                        "snippet": {
                            "code": "if (isLegacyUser) {\n            // The following section handles legacy support for all users that accepted a Shopify charge before\n            // we switched billing to use AfterSell plans. This change occured with the release of checkout\n            // extensions (early October, 2022). Before this point, users fit into one of following three categories:\n            //  1. All users that installed before AfterSell 2.0 was released. These users\n            //      will have a Shopify charge with the name \"AfterSell Pricing Plan\".\n            //  2. Most users that installed after AfterSell 2.0 was released. These users\n            //      will have a Shopify charge with the name \"AfterSell 2.0 Pricing Plan\".\n            const hasValidLegacyCharge =\n                activeShopifyCharge.name === DefaultShopifyChargeName['Aftersell Pricing Plan'] ||\n                activeShopifyCharge.name === DefaultShopifyChargeName['AfterSell 2.0 Pricing Plan'];\n            if (!hasValidLegacyCharge) {\n                return {\n                    success: false,\n                    errorCode: 'no_accepted_aftersell_plan',\n                    reason: 'User does not have an accepted AfterSell plan.',\n                };\n            }\n            if (activeShopifyCharge.name === DefaultShopifyChargeName['Aftersell Pricing Plan']) {\n                acceptedAfterSellPlan = PRESET_AFTERSELL_PLANS.LEGACY_V1;\n            } else if (activeShopifyCharge.name === DefaultShopifyChargeName['AfterSell 2.0 Pricing Plan']) {\n                const V2_799_PLAN = PRESET_AFTERSELL_PLANS.LEGACY_V2_799;\n                const V2_1299_PLAN = PRESET_AFTERSELL_PLANS.LEGACY_V2_1299;\n                const activeCappedAmount = Number(activeShopifyCharge.capped_amount);\n                if (activeCappedAmount === V2_799_PLAN.shopifyCharge.maxMonthlyUsageAmount) {\n                    acceptedAfterSellPlan = V2_799_PLAN;\n                } else if (activeCappedAmount === V2_1299_PLAN.shopifyCharge.maxMonthlyUsageAmount) {\n                    acceptedAfterSellPlan = V2_1299_PLAN;\n                } else {\n                    throw new Error(\n                        'Unexpected code path. Active Shopify charge capped amount does not match any known legacy capped amounts for V2 plans.'\n                    );\n                }\n            } else {\n                throw new Error(\n                    'Unexpected code path. Active Shopify charge name does not match any known legacy custom charge name, but it should have been checked above.'\n                );\n            }\n        }",
                            "filename": "web/server/src/modules/billing/legacy-billing-v2.service.ts",
                            "start_index": 3593,
                            "end_index": 6162,
                            "start_line": 95,
                            "end_line": 358,
                            "max_line": 360,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet provides logic for handling legacy billing plans, which is relevant for identifying and resolving issues with legacy charges and ensuring merchants are billed correctly."
                }
            ],
            "web/client/src/pages/onboarding/onboarding-pricing.page.tsx": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Code snippet shows the component 'AcceptNoCheckout' responsible for handling pricing plan acceptance and display. It includes functions for accepting pricing plans, toggling pricing table visibility, and displaying pricing information.",
                        "snippet": {
                            "code": "export const AcceptNoCheckout = () => {\n    const [openPricing, setOpenPricing] = useState(false);\n\n    const { mutateAsync: acceptPricingPlan, isLoading } = useAcceptPricingPlan({\n        // todo: fix callback\n        onPossibleImmediatePlanChangeWithoutRedirect: () =>\n            shopify.toast.show('Plan updated successfully!', { duration: 3000 }),\n        onErrorBeforeReload: () => console.error('Error updating pricing plan.'),\n    });\n\n    const availablePlanIds = useAvailablePlanIds();\n\n    const handleAcceptPricingPlan = async () => {\n        await acceptPricingPlan({ newAfterSellPlanId: availablePlanIds.availablePlanIds.POST_PURCHASE_ONLY });\n    };\n\n    return (\n        <Card padding=\"8\">\n            <VerticalStack gap=\"4\">\n                <Text variant=\"headingLg\" as=\"h5\">\n                    Ready to supercharge your sales? Let\u2019s get started!\n                </Text>\n                <Text variant=\"bodyLg\" as=\"p\">\n                    Your subscription starts with a <strong>30-day free trial :)</strong>\n                </Text>\n                <Text variant=\"bodyLg\" as=\"p\">\n                    After the 30-day free trial, pricing plans start from FREE (50 orders per month or less) and\n                    increase incrementally based on your order volume (up to $799/month for stores that do 25,000+\n                    orders/month).\n                </Text>\n                <Box>\n                    <Link onClick={() => setOpenPricing(!openPricing)}>\n                        <HorizontalStack gap=\"1\" blockAlign=\"center\">\n                            See pricing table\n                            <Box>\n                                <Icon\n                                    color=\"interactive\"\n                                    source={(openPricing ? ChevronUpMinor : ChevronDownMinor) as IconSource}\n                                />\n                            </Box>\n                        </HorizontalStack>\n                    </Link>\n                </Box>\n                <Collapsible\n                    open={openPricing}\n                    id=\"basic-collapsible\"\n                    transition={{ duration: '200ms', timingFunction: 'ease-in-out' }}\n                    expandOnPrint\n                >\n                    <DataTable\n                        rows={PRICING_ROWS}\n                        columnContentTypes={['text', 'text']}\n                        headings={[\n                            <Text variant=\"headingSm\" as=\"h6\">\n                                Monthly Orders\n                            </Text>,\n                            <Text variant=\"headingSm\" as=\"h6\">\n                                Monthly Price\n                            </Text>,\n                        ]}\n                    />\n                </Collapsible>\n                <HorizontalStack align=\"center\">\n                    <VerticalStack inlineAlign=\"center\" gap=\"3\">\n                        <Box>\n                            {/*todo: button does nothing*/}\n                            <Bu",
                            "filename": "web/client/src/pages/onboarding/onboarding-pricing.page.tsx",
                            "start_index": 14830,
                            "end_index": 17856,
                            "start_line": 361,
                            "end_line": 427,
                            "max_line": 461,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet shows the component responsible for handling pricing plan acceptance and display, including toggling pricing table visibility, which is necessary for making the correct pricing table visible and clearly indicated as expandable."
                },
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Code snippet shows the pricing details for different plans in the onboarding process, including plan names, descriptions, prices, and benefits. Relevant for understanding how pricing information is displayed and handled in the application.",
                        "snippet": {
                            "code": "<>\n            <HorizontalStack gap=\"4\" wrap align=\"center\">\n                <SingleCard\n                    icon={BuyButtonMajor as IconSource}\n                    planName=\"Post Purchase Only\"\n                    planId={availablePlanIds.POST_PURCHASE_ONLY}\n                    planDescription=\"Create post purchase upsells\"\n                    price=\"Free\"\n                    buttonText=\"Try for free\"\n                    priceDescription=\"+ usage up to $799/month\"\n                    hasUsage\n                    openPricingModal={openPricingModal}\n                    benefits={[\n                        'Unlimited offer funnels',\n                        'Customize with widgets',\n                        'Precise targeting',\n                        'A/B testing',\n                        'Robust analytics',\n                    ]}\n                />\n                <SingleCard\n                    icon={CheckoutMajor as IconSource}\n                    planName=\"Checkout Only\"\n                    planId={availablePlanIds.CHECKOUT_ONLY}\n                    planDescription=\"Customize your Shopify checkout\"\n                    price=\"$99\"\n                    buttonText=\"Try for free\"\n                    priceDescription=\"per month\"\n                    openPricingModal={openPricingModal}\n                    benefits={['Unlimited checkout widgets', 'Precise targeting', 'A/B testing', 'Robust analytics']}\n                />",
                            "filename": "web/client/src/pages/onboarding/onboarding-pricing.page.tsx",
                            "start_index": 11765,
                            "end_index": 13200,
                            "start_line": 293,
                            "end_line": 421,
                            "max_line": 461,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet shows the pricing details for different plans in the onboarding process, which is relevant for understanding how pricing information is displayed and handled in the application, and is necessary for correcting the pricing text on the pricing page."
                }
            ]
        },
        "bouncer_response": {
            "score": 8,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a detailed action plan to address the incorrect pricing plan issue, including specific file names and constants to be revised, which is highly relevant to the bug described in the PROMPT. It also suggests verifying the components on the onboarding pricing page and conducting thorough testing, which are crucial steps in ensuring the bug is resolved. Additionally, the RESPONSE addresses the need to evaluate the impact on merchants and develop a strategy for billing adjustments, which is an important aspect of the issue. The code snippets provided are relevant and would likely be part of the solution. However, the RESPONSE does not directly address the embedded link provided in the PROMPT, which might contain critical information for resolving the issue, and it assumes the existence of certain files and constants without explicit confirmation from the PROMPT, which prevents it from scoring a perfect 10.",
            "clarification_questions": "NONE"
        },
        "end_time": 1714393641.938255,
        "result": "To address the issue of non-checkout stores being onboarded with incorrect pricing plans, it's essential to ensure that the pricing information displayed during the onboarding process is accurate and that the billing logic correctly reflects the updated pricing structure. The current discrepancy, where merchants are seeing \"free for 0 to 50 orders\" instead of the correct \"$7.99 per month for 0 to 100 orders,\" needs to be resolved to prevent further confusion and potential revenue loss.\n\n- Revise the `billing.constants.ts` file to accurately represent the new pricing plan, confirming that the terms and conditions align with the \"$7.99 per month for 0 to 100 orders\" structure.\n- Update the `onboarding-pricing.page.tsx` file to ensure that the displayed pricing information, particularly within the `PRICING_ROWS` constant, is consistent with the updated pricing plan.\n- Adjust the logic within `legacy-billing-v2.service.ts` to prevent new users from being incorrectly assigned to legacy plans and to correctly identify the appropriate plan based on the store's order volume.\n- Verify that the components on the onboarding pricing page, such as `CustomPricing` and `OnboardingAcceptPricing`, utilize the revised pricing details for both display and plan acceptance purposes.\n- Conduct thorough testing of the modified code to confirm that the onboarding process now correctly displays and accepts the updated pricing plan for non-checkout stores.\n- Coordinate with the team to evaluate the impact on merchants who were not billed due to the error and develop a strategy for billing adjustments, which may include contacting affected merchants to rectify their billing status.\n\n### Code snippets to check\n\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [server](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src) \u2192 [modules](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules) \u2192 [billing](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/billing)- [Lines 1 - 372](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/billing/billing.constants.ts#L1-L372)\n\n This snippet defines different billing plans with pricing details and indicates the need to force users to accept new plans, which is directly related to correcting the pricing text and ensuring users are on the correct billing plan. \n\n\n   - [Lines 133 - 372](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/billing/billing.constants.ts#L133-L372)\n\n This snippet defines billing constants for different pricing plans, which is essential for understanding how pricing plans are structured and managed in the application, and is necessary for updating the pricing information.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [server](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src) \u2192 [modules](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules) \u2192 [billing](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/billing)- [Lines 95 - 358](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/billing/legacy-billing-v2.service.ts#L95-L358)\n\n This snippet provides logic for handling legacy billing plans, which is relevant for identifying and resolving issues with legacy charges and ensuring merchants are billed correctly.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [client](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src) \u2192 [pages](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages) \u2192 [onboarding](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/onboarding)- [Lines 361 - 427](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/onboarding/onboarding-pricing.page.tsx#L361-L427)\n\n This snippet shows the component responsible for handling pricing plan acceptance and display, including toggling pricing table visibility, which is necessary for making the correct pricing table visible and clearly indicated as expandable. \n\n\n   - [Lines 293 - 421](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/onboarding/onboarding-pricing.page.tsx#L293-L421)\n\n This snippet shows the pricing details for different plans in the onboarding process, which is relevant for understanding how pricing information is displayed and handled in the application, and is necessary for correcting the pricing text on the pricing page."
    }
}