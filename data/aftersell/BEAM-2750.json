{
    "id": "BEAM-2750",
    "repo_name": "testbed/UpCart-2.0",
    "title": "Add-on product select modal with multiple variants can break module",
    "body": "\n@landon said in [EMBEDDED_LINK_1]:\n\n> I replied to the Intercom conversation with the following:\n>\n> > Hi there!\n> >\n> > **Upsells**\n> >\n> > I am seeing the upsells on every market (including Danish/SEK). Is the issue still happening for you? If so, would you mind providing the following so that we can reproduce the issue on our end? Thanks!\n> >\n> > **1\\.** Starting from scratch, what steps are needed to reproduce the issue?\n> >\n> > **2\\.** Is it reproducible on both desktop and mobile? Or only one?\n> >\n> > **3\\.** Which browser was used?\n> >\n> > **Add-ons**\n> >\n> > The issue was due to how our product selection modal works. I've created a ticket for us to fix this going forwards, but for now the following workaround is functional. The add-on should be showing in your cart now!\n> >\n> > Does not work (clicking on product and no variants):\n> >\n> > [IMG_1]\n> >\n> > Does work (clicking on specific variant):\n> >\n> > [IMG_2]\n\nFor products with multiple variants, you must select the specific variant currently. However, merchants sometimes select the top-level product which means that the add-on is not shown. This makes merchants think the module is broken and is generally a bad experience.\n\nIf you select the top-level product when selecting an add-on item, it should select the first variant.\n\nNote that selecting the top-level product in other cases (e.g., upsells module) should select all variants.\n---\nGlossary:\nimage_2: The image displays a modal titled \"Select Product Add-on\" with a search bar at the top. Below the search bar, there is a list of product variants for a product named \"Digitalt Presentkort.\" Each variant is listed with a checkbox to the left, the variant name in the middle, and the price in SEK to the right. The first variant is checked, indicating selection, and is labeled \"Digitalt Presentkort SEK 200.00.\" Below this are seven more variants with unchecked boxes, with increasing prices from \"SEK 200.00\" up to \"SEK 1,500.00.\"\n\nAt the bottom of the modal, there is a toggle switch labeled \"Offer is accepted by default,\" which is currently in the off position, indicated by the toggle being on the left side. At the very bottom of the modal, there are two buttons aligned to the right: \"Cancel\" and \"Save,\" suggesting possible actions to be taken.\nimage_3: The image displays a modal titled \"Select Product Add-on\" with a search bar at the top. Below the search bar, there is a list of product variants for a product named \"Digitalt Presentkort.\" Each variant is listed with a checkbox to the left, the variant name, and the price in SEK to the right. The first variant, priced at \"SEK 200.00,\" is checked. Other variants listed are \"SEK 300.00,\" \"SEK 400.00,\" \"SEK 500.00,\" \"SEK 750.00,\" \"SEK 1,000.00,\" and \"SEK 1,500.00,\" all unchecked.\n\nAt the bottom of the modal, there is a toggle switch labeled \"Offer is accepted by default,\" which is in the off position. Two buttons are present at the bottom right corner: \"Cancel\" and \"Save.\" The overall layout is clean, with a clear distinction between the selectable variants.\nlinear_issue_2: The attachment labeled \"linear_issue_2\" contains two images that illustrate the issue with the add-on product selection modal.\n\nImage 1 shows the product selection modal when a top-level product is clicked without selecting a specific variant. The modal appears to be inactive or non-responsive, with no variants listed or highlighted, suggesting that the user's action does not lead to any outcome. This is the scenario that does not work and is causing confusion among merchants.\n\nImage 2 depicts the modal when a specific variant is clicked. In this case, the modal is active, and a particular variant is clearly selected and highlighted, indicating that the user's action has successfully resulted in the selection of an add-on. This is the scenario that functions correctly.\n\nThe critical issue is that when merchants select the top-level product, the system should automatically select the first variant to prevent the impression that the module is broken. This automatic selection does not currently occur, leading to a poor user experience. Conversely, for other modules like upsells, selecting the top-level product should continue to select all variants, as this is the intended behavior in those cases.\n\n",
    "classification": "bug",
    "state": "closed",
    "repo_link": "https://github.com/testbed/UpCart-2.0.git",
    "requested_commit": null,
    "issue_tracker_identifier": "",
    "ai_cost": {
        "issue_classifier": 0.0006525,
        "issue_summarizer": 0.02101,
        "search_embedding": 0.00012974,
        "documentation_agent": 0.00895,
        "repo_summary": 0.068337,
        "issue_star_solver": 0.2166165,
        "snippet_processor": 0.02623,
        "bouncer": 0.04467
    },
    "attachments": [],
    "inline_assets": [
        {
            "title": "",
            "url": "https://uploads.linear.app/a4f50fbf-738c-4ae7-b7ca-dc198278934f/b5e40218-ed6a-481a-aae4-ecd428b08f8c/954cf674-06f3-4aa9-a81e-9e7081a350ea",
            "content": "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BRRQIH8CMYR+K5p27Ngxf6u0ZgUUUEABBRRQQAEFFFBAAQWSAjGEfiua1tbWJgs5rYACCiiggAIKKKCAAgoooED+BGII/VY0bdGiRf5Wac0KKKCAAgoooIACCiiggAIKJAViCP1WNE2WcFoBBRRQQAEFFFBAAQUUUECBwggYTQvj7FoUUEABBRRQQAEFFFBAAQXqFPgmmi5cuLDOUr6hgAIKKKCAAgoooIACCiigQB4EQhT9OpqaS/MgbJUKKKCAAgoooIACCiiggAJLFiCQLoqm5tIlU1lCAQUUUEABBRRQQAEFFFAgbwLV5tK82VqxAgoooIACCiiggAIKKKBATgLf3GuaU3ELKaCAAgoooIACCiiggAIKKNDcAkbT5ha1PgUUUEABBRRQQAEFFFBAgQYKGE0bCGZxBRRQQAEFFFBAAQUUUECB5hYwmja3qPUpoIACCiiggAIKKKCAAgo0UMBo2kAwiyuggAIKKKCAAgoooIACCjS3QE1zV9iY+j7//PMFCxassMIKjVm4jmXuu+++xx9/nDeXW265008/vY5Szm6AAIM5n3zyyWGBfffdd5NNNmnAwmVU9M9//vOoUaPYoe9+97sHHnhgLns2cuTIK664IpT81a9+1bVr11yWsowCCiiggAIKKKCAApUjULRoOnPmzJtuuumdd9557733Jk+ejHiHDh2+853vrLnmmj/84Q87duzYxGMwevToV155hUpWXHHFJlZVgMXvuuuup59+OmzwRhttFNfYsmVLYkzfvn232Wabdu3axfnFmghbyNq33nrrYm1DU9b729/+dsqUKezFaqutdsopp/Tr168Rtb377rtvvPEGCy677LI5Lh5WGgrPmjUrx6UspoACCiiggAIKKKBA5QgUJ5qOGTPmtNNO++ijj5LQU6dOfW3x3xNPPPHHP/6RmJp8t4SmaR8jirDBG2644bbbbpvLlscgTeEY/5ILXn755WeffXYytSbfrYRpmsHfeust9rRbt26HH354I3Z5+PDhjz32WFjwww8/vPfeexsXTRuxahdRQAEFFFBAAQUUUECB+gW+udeU7pr1F22udwkYRxxxRMylNAyuvviPibCKzz777Oijjx46dGhzrbHA9ZB//rv4L0SpZlk7TW2nnnrqiy++2Cy1lWIlfB6C6lNPPdW47X/44YeTC1LP7Nmzk3OcVkABBRRQ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gXwLEH8IQfleS3nUX9BoOnv27NatW5cHnHuhgAIKKKCAAgoooIACCtQvQPwhBNVfxneDQEGj6cKFC6uqqqRXQAEFFFBAAQUUUEABBSpBgPhDCKqEPW36PhY0mjZ9c61BAQUUUEABBRRQQAEFFFCg/ASMpuV3TN0jBRRQQAEFFFBAAQUUUKDEBIymJXbA3FwFFFBAAQUUUEABBRRQoPwEjKbld0zdIwUUUEABBRRQQAEFFFCgxASMpiV2wNxcBRRQQAEFFFBAAQUUUKD8BMozms6YMWPcuHFffPFF8oC9//77H330UXJOQ6ebXkND12h5BRRQQAEFFFBAAQUUUKASBMozmt5zzz077bTTCSecEA/hCy+8sO+++w4ePPiNN96IMxs00fQaGrQ6CyuggAIKKKCAAgoooIAClSNQntE08/jRiBpmxonMMvXPiQvGCcrPnz+frMsf7bT1L+67CiiggAIKKKCAAgoooIACdQnU1PVGmc3fZZddvvrqq5qamm222aZxu5a1hqlTpx566KFUeOONN6699tqNq9mlFFBAAQUUUEABBRRQQIEKF6iUaFpbW3v44Yc35WA3vYamrN1lFVBAAQUUUEABBRRQQIEyFqiUDr1lfAjdNQUUUEABBRRQQAEFFFCg1AVKvtX0tddeu/nmm0eOHMltn2usscY+++yz2WabZR6ViRMnnn322cz/4x//2KZNm2SBl19++dZbb/3ggw/mzZsXath8882fffbZO++8c5VVVoljKaVq+PDDDy+//PI5c+aEqi6++OKOHTsyfdJJJ/Xs2TPWT+WPPPIIm8cdqquvvvqaa6654447fuc734kFnFBAAQUUUEABBRRQQAEFFCjtaPrf//73jDPOiEdx9OjRTz755H777derV684M0zMnDnziSeeYHru3LnJaHrbbbeFyBqKjRkz5qmnnjrwwANXWmklyq+77rqxnlQN3LkaKgwFhgwZEiaOOOKIMMGKzj///Ntvvz3WQDp9/vnnCdIXXHAB6TfOd0IBBRRQQAEFFFBAAQUUqHCBEo6mb7/99u9//3uO36abbrr77rsPGDCA544+9thjt9xyS58+fXI5rgTF8847j5KDBg1ilKP+/fuPGDHimWeeYUyjZCjNWhUFeETN5MmTDzroIApcdNFFoS20e/fuofx9991HLq2urj722GM33njjbt260YLKzBdffPFnP/vZQw89tNxyy2Wt2ZkKKKCAAgoooIACCiigQKUJlHA0/fnPf05/2n79+l166aUtW7bkyC2//PL05mW8ItLpEg/kggULTjvtNLoBswjBkgzJIl27duVlly5drrjiivprYC0rr7xyhw4dQrEVVliBl8lFSM4bbbTR9ttvv/fee4f5pN8tttiCOWw2raxMJMs7rYACCiiggAIKKKCAAgpUrECpDoP06aefhueL0h035NJ4CE8++WS648aXdU1wc+mUKVOqqqq4+zTk0liSTrl9+/aNLxs3QU/jq666KubSUEmnTp223HJLpocOHdq4al1KAQUUUEABBRRQQAEFFCg/gVKNpu+99x4HY9lll02OORQODw8vXWeddZZ4qGjVpAyLd+7cObPweuutlzmziXNopyUMc88q9YR/m1ihiyuggAIKKKCAAgoooIAC5SFQqh163333XQ5A7969sx4G5j/88MNZ34ozQ7itq4Yc71aNtWWdoGn30UcfHTZsGFvLsEkzZsxYuHBh1pLOVEABBRRQQAEFFFBAAQUqWaBUo+n06dM5bG3bts168Nq1a5d1fnIm4xLxkkfCJGfG6QkTJsTpxk0wxtKpp546depUFqcfL8Mj8XQZ7k1lmKXGVehSCiiggAIKKKCAAgoooEC5CpRqNA2tmtwvmvXA8BzRrPOTM0OnX4bkpZ9t6l5Tir3zzjvJwg2dnjZt2vHHH88YSwx9xJNRGV0p1sCtrcknysT5TiiggAIKKKCAAgoooIACFStQqvearrnmmhyzsWPHZr1pk6fILPGIrrXWWoyBNHv2bB5tmipMLn3llVdSM+t/meqp+9JLL5FLeYDqKaecksylVJJLbK5/Xb6rgAIKKKCAAgoooIACCpSZQKlG09VXX53HtxAIL7/88tQh4fbOt956KzUz8yV9a/faay/mX3DBBSxCkmSaChkeiQbPefPmZS6SOYchl8LMjz76KPkud5bykv7GpNPkfEYVfvPNN5NznFZAAQUUUEABBRRQQAEFFCjVaEomPPHEEzl+N99884033hhuPSVPPvfcc2eeeWZd96CmjjfPNd14440JpbRtDhw48Cc/+cl222134IEHtm/f/thjj00VzvqSktxBylv3339/8rbVTTbZhJlffPHFddddN3fu3LAsgyEddthh9B/OWpUzFVBAAQUUUEABBRRQQIGKFSjVaMoB22+//fbcc08mLrzwwkGDBhEp+fe4445bbbXVCJm5HNEWLVqw7M4778wE4fbll18mTG6//fZXXnklAxflUgNltt12W/5l0KMddthh1113DX2JeSYN9TD/iiuuYKvYHl7uv//+q6yyStjmHCu3mAIKKKCAAgoooIACCihQCQKlOgxSODa/+tWvaLe84447uOOUjrgkzL333pt0+sADD+R48FiccYl++ctffvLJJzSfrrrqqiGUhrZNbkZdYj003rZs2ZI18sxS7n2NPYHPPffclVde+a677iLuEnpp5iVL0xh76aWXLrFOCyiggAIKKKCAAgoooIACFSVQddJJJ7HDYRSfiy++OK87z12ddJ1t9lXMmTOHJ4iSCXv16kVKbJb6ofjXv/5F0D399NNzrJB2VxjJuqnyn332GW/RXsrNsam3fKmAAgoooIACCiiggALlLZCnEFROaNxoye6UdqtpOB5EPlo7G3psiJGHHHLI6NGjub+U1tfk4jzU9L///S9zNttss+T8+qfrephqjx496l/QdxVQQAEFFFBAAQUUUECBChcoh2jauENIZ93dd9+d3rw8PGbq1KmMh8TjZOgYzOi+119//Zdffkkb7Pe+973GVe5SCiiggAIKKKCAAgoooIACuQtUbjTFaPDgwTzl5eqrr35w8V9SbdNNNz3vvPPqaghNlnRaAQUUUEABBRRQQAEFFFCgiQIVHU0ZNumII47Yeuutn3766VGjRjESUrdu3fr27UvzKdG0urqEhy9u4sfCxRVQQAEFFFBAAQUUUECBQgpUdDQN0Gss/iskuutSQAEFFFBAAQUUUEABBRRIChS0YZDbO8NQwMktcFoBBRRQQAEFFFBAAQUUKEsB4k8uD6Qsy31v6E4VNJq2atVq1qxZDd1EyyuggAIKKKCAAgoooIACpShA/CEEleKWF36bCxpNO3XqNGnSpMLvpGtUQAEFFFBAAQUUUEABBQovQPwhBBV+vaW4xoJG0+7du48bN64UmdxmBRRQQAEFFFBAAQUUUKChAsQfQlBDl6rM8gWNpiuvvPLHH39cmdDutQIKKKCAAgoooIACClSaAPGHEFRpe924/S1oNO3du/fIkSNnzpzZuG11KQUUUEABBRRQQAEFFFCgVAQIPsQfQlCpbHBxt7Og0bS2trZfv35Dhw4t7j67dgUUUEAB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FFBAAQUUUEABBRTIScBomhOThRRQQAEFFFBAAQUUUEABBfInYDTNn601K6CAAgoooIACCiiggAIK5CRgNM2JyUIKKKCAAgoooIACCiiggAL5EzCa5s/WmhVQQAEFFFBAAQUUUEABBXISMJrmxGQhBRRQQAEFFFBAAQUUUECB/AkYTfNna80KKKCAAgoooIACCiiggAI5CRhNc2KykAIKKKCAAgoooIACCiigQP4EjKb5s7VmBRRQQAEFFFBAAQUUUECBnASMpjkxWUgBBRRQQAEFFFBAAQUUUCB/AkbT/NlaswIKKKCAAgoooIACCiigQE4CRtOcmCykgAIKKKCAAgoooIACCiiQPwGjaf5srVkBBRRQQAEFFFBAAQUUUCAnAaNpTkwWUkABBRRQQAEFFFBAAQUUyJ+A0TR/ttasgAIKKKCAAgoooIACCiiQk4DRNCcmCymggAIKKKCAAgoooIACCuRPwGiaP1trVkABBRRQQAEFFFBAAQUUyEnAaJoTk4UUUEABBRRQQAEFFFBAAQXyJ1Azd+7chQsXsoLwb/7WZM0KKKCAAgoooIACCiiggAIKZBWw1TQrizMVUEABBRRQQAEFFFBAAQUKJ1DTvn171maTaeHIXZMCCiiggAIKKKCAAgoooMC3BWq+/dJXClSiwBdffHHzzTez59tuu+2aa65ZiQTuswIKKKCAAgoooIACRRUwmhaVv4JXfs4554wePRqADh06BIbq6uoVV1yxd+/ea6+9dq9evQppM3v27HfeeYc1brjhhoVcr+tSQAEFFFBAAQXqF/jwww+vvPLKqVOnLrvssmeddRbnS/WX910FSlfAaFq6x660t3z69OlhB/iqjXsyefLk4cOH33fffQcddNAmm2wS55fTxF133fXss8+yR4Tzli1bltOuuS8KKKCAAgoo0OwCL730UjhZ+uqrr959912u4Df7KpaSCi+66KLPPvtslVVWOf7445eSTXIzCixgNC0wuKtLCxx11FFh1owZM8aMGUNsmzNnzr/+9S8uCn7ve99Lly7914yJzZ6W/n64BwoooIACCiiQd4H58+cPGTIkrubll18u42g6a9YszpH4N+6vE5UmYDSttCO+dO3vd77znfXWWy+5Td///vfPPvts0unjjz9eltE0ubNOK6CAAgoooIAC9Qi8/fbbdDSrqqraaqutODUaOnQo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0DiBko+mjMfbuD3PZam8Vp7LBlRgmbnz5tUzDFLPnt3uuvvJKVNnLFNV9e6Ij3lqy0orLj912kygamtb333vQ7NmzwtoW2y23hqrr3LdDfdWLe5tS/vqXy477ZJLb3j51berq1ts0P87r7w6vHPHNpf/6Zf77P9LwvB6635n/X69Xxv6zt6Dt77sin+vsvIKe++1ddUyLeYvmH/p5TfXE1A7LOrQy+NuzKfZP62jRo2qqalZZZVVsr+dw9ym15B1JbNnz540aVKLFi26du2atYAzGy0wderUGTNmtGnTpmPHjo2uxAUVUEABBRRQoNIESj6aNu45MTke5rxWnuM2VFoxWizr6Y47f+48ciAmNTUtBm65wfx58z/8eNxXk6Ywp02bln369CLYfvjRpzNnzqaf7fTp08muoQ2WAFldtfCd4aNYeMGCeeRS2kUPPmiPhx5+YeuBGz725KudOrWbPGX68PdGH37oYHJsu3at73/wuXeGf9R//T4/PnyPv13zn7oORPu2dOgt/1w6fPjwiRMnJhGwXXbZZcl1yy+/fHV19lsDXnnllZ///Ocs9Ze//GXddddNLp7jdNNrqGtFL7/88hlnnMH233HHHXWVWeL8zz77jHref//9jTfeOBaura1dc801O1XwU4X+8Y9/oLrddtshHFmcUEABBSpEYPz48fxojhgx4sMPP1xhhRX4ReCvV69embv/4osv1n+qucYaa6y44ophwfBD3L179z59+mRW9eWXX7799tvMpzxLZRbInDNu3Lg333zzrbfeYoCVtddeu1+/fmxnXT/oLM7uPPLII5988glXnNmdXXbZpVu3bpnVxjlUe++997IUFyu5Qj1w4EDWEt/NZaLwa8xlqyyTV4GSj6Z51bHywgssHgZpUfjM+vfZ+C9/uP+uH348dszYCfPmzu/WvcuYsROnTF3UNbe2tuW7730yZ87Xj7Tt2LH91GnTYt9gEi9tONUtqpkINa++2oqvvz6cprNDD9mTaEp2XWft3ptt3v+SP91EAR4JM3Hiom7AH3306Vm/PbqeaNqxU5vyD6bLLHPLLbc8+eSTgS71L+luhx122HPPPTN/ovh5DoWZaFw0zVoDvb75haZmfn05rKntacrLKVOm8KPLD3OOP58vvfTSJZdcwhr59U2ul9zOz/b3v//9ww47rJ6f+eQiJTfdUKt87+DS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g1T/56iuW8j8UobgbrnllhWJS8OhUhQFUiyF1/XB2zgFFFBAAQUUUEABBRSokIChaYUgZ9diWPeISLKL43izeBRIsRSe/ckUBRRQQAEFFFBAAQUUaD4BQ9PmO6e5HhHL8bLuUTWqpFgKr0bJltkcAp9++umHH344adKk5jgcj0IBBRRQQAEFFJjNBZxrOpv/B9DVwyd6ZDXdrpZSaH/WQHrssccK/TKbpn3xxRdvvvnmv9s+c8455+qrr77GGmt8/etfL8Lx0EMPPfLII++99x7Td+mI3nnnnZnBWyQ/5d99993MHKb8pZdemvz9+vUrkj/7U541HnrooQz5/tnPfrbLLrtkW2KKAgoooIACNRH44IMPXnzxxVdeeeXtt99ebLHF/q/tw1U12xgumtOmTcumx5Tll19+ySWXDF8p8+OPP6bAlVZaKWaIGzyuZSYUX5daaqkSX8L3n//859lnn+W2YsyYMautthr3FbS0e/d2e63KvUmg2FtvvZW9eIg8YMAA5mqtuuqqscGlbORfYymtMk9VBQxNq8rb/IXz/tJy3xNTIgrFlvty1BJLbsRsU6dOPf744x988MHY+Ntvv53tww8//MADD4yJcWPixInHHHPME088EVPIf8UVV5x55plrr712TExunH/++ddddx0BcEy88sorjzrqqL333jumFNnIv8YijfEnBRRQQAEFaiLApfPiiy9OXkxDM3bbbTeu4zz5TbaKp6u85iCZktr+4Q9/GK/C11xzzX333bfTTjudcsopqWzjx48/5JBDCOSIY6+66qrUrwW/Xn755b/5zW/iT7wcge1NN9307LPPnnvuuWN63Cj3JuGee+45/fTTuTeIJdD+7bffnsaXeN+Yf42xqW7UUMDQtIb4Vq1ASQL8Zf/+97/PSsh0fvJnnfe+fvbZZ7yw54EHHrjkkkt4KnncccclCyKk/8EPfvDkk0/ONddc++yzD/l5zkrYOXLkyKOPPpoAlaewyfxsU861117LxnbbbbfZZptNnz79rrvuevTRR88999x55pmH7tNU/tTX/GtMNcCvCiiggAIK1FaAN7SfeOKJ9957L82gE5IxZQSKTDx56aWXuJ7ecsstr7322m9/+9tevXql2rnMMsssvPDCqcTwddFFFy2Ynkyk35WLO3EphVx66aULLbRQ8tfs9pdffvnLX/6SuwJCxB13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zCjrWFtaWhZt+/Tv33/gwIFl7WtmBRRQQAEFFFBAAQUUaHQBQ9NGP4N10f7PP//8mWeeee655/r27bvsssuuueaac8wxR1ktmzlzJoW89dZbFDJo0CBKWGCBBcoqwcwKKKCAAgoooIACCijQuAKGpo177uql5YSUDz/88DvvvDN06NAVV1yxK83aYIMNXn311eHDh0+ePHnw4MFGp13BdF8FFFBAAQUUUEABBRpIwNC0gU5WnTaV/lLi0j322IMu0643keB2wQUXvPnmm3v27DlkyJCuF2gJCiiggAIKKKCAAgooUP8CLoNU/+eorlvI/FKG4G655ZYViUvDoVIUBVIshdf1wds4BRRQQAEFFFBAAQUUqJCAoWmFIGfXYlj3iEiyi+N4s3gUSLEUnv3JFAUUUEABBRRQQAEFFGg+AUPT5junuR4Ry/Gy7lE1qqRYCq9GyZbZNAKffvrphx9+OGnSpKY5Ig9EAQUUUEABBRSYbQWcazrbnvrKHDjRI6vpVqas/y2FNZAee+yx/03z2yyBp59+euzYsXzv16/fyiuvPOuH/9166KGHHnnkkffee48ZvPRF77zzzkzi/d8s//PtzTffvPvuu5k8POeccy699NLkp/z/ydHRlzxrPPTQQxn1/bOf/WyXXXbpqF3+roACCiigQNUFpk2b9tJLL7Gm48svvzxlyhQu0CuttNKqq67aq1evVN3vv//+a6+9lkpMfuW9eptssklImThx4uOPP842i0TOPffcyWxh+8knnxw/fny3bt022mgjruDZDEVSvvjiiwceeODLL78kD7cKiy++eMHM06dPv/POO1944YWPP/54iSWWWGuttbbaaitqLJg5JJZ7S5AqKv8aUw3wa/4Chqb5mzdVjby/tNz3xJR4/BRb7stRSyy5CbI9//zz3/ve97iWcCzbbbfdL37xi+xBcRk75phjnnjiifjT7bfffsUVV5x55plrr712TExunH/++dddd10oNqRfeeWVRx111N57753M1t52/jW21xLTFVBAAQUUyF9g1KhRP/jBD3jIG6vmpQNsM0fpvPPOI0CN6WzwdgOuyMmU1HafPn0efPDBkEhPwLHHHss2j48XW2yxVM5bb731tNNOI/Hoo48uNy5lr2uuueaiiy4KZf70pz/dddddU+XzlQfB3FRwgPEnVqy86qqr2HGRRRaJiXGj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FFBAAQUUUECBxhQwNG3M82arFVBAAQUUUEABBRRQQIEmEjA0baKT6aEooIACCiiggAIKKKCAAo0pYGjamOfNViuggAIKKKCAAgoooIACTSRgaNpEJ9NDUUABBRRQQAEFFFBAAQUaU8DQtDHPm61WQAEFFFBAAQUUUEABBZpIwNC0iU6mh6KAAgoooIACCiiggAIKNKaAoWljnjdbrYACCiiggAIKKKCAAgo0kYChaROdTA9FAQUUUEABBRRQQAEFFGhMAUPTxjxvtloBBRRQQAEFFFBAAQUUaCIBQ9MmOpkeigIKKKCAAgoooIACCijQmAKGpo153my1AgoooIACCiiggAIKKNBEAoamTXQyPRQFFFBAAQUUUEABBRRQoDEFDE0b87zZagUUUEABBRRQQAEFFFCgiQQMTZvoZHooCiiggAIKKKCAAgoooEBjChiaNuZ5s9UKKKCAAgoooIACCiigQBMJGJo20cn0UBRQQAEFFFBAAQUUUECBxhQwNG3M82arFVBAAQUUUEABBRRQQIEmEjA0baKT6aEooIACCiiggAIKKKCAAo0pYGjamOfNViuggAIKKKCAAgoooIACTSRgaNpEJ9NDUUABBRRQQAEFFFBAAQUaU6Alz2b36tFa3ejRo/Os1LoUUEABBRRQQAEFFFBAAQU6IRAiuE7s2Ild7DXtBJq7KKCAAgoooIACCiiggAIKVFIg117TiVNm0PYBS/ar5BFYlgIKKKCAAgoooIACCiigQBUERo76kFIXrkLJ2SLtNc2amKKAAgoooIACCiiggAIKKJCrgKFprtxWpoACCiiggAIKKKCAAgookBUwNM2amKKAAgoooIACCiiggAIKKJCrgKFprtxWpoACCiiggAIKKKCAAgookBUwNM2amKKAAgoooIACCiiggAIKKJCrgKFprtxWpoACCiiggAIKKKCAAgookBUwNM2amKKAAgoooIACCiiggAIKKJCrgKFprtxWpoACCiiggAIKKKCAAgookBUwNM2amKKAAgoooIACCiiggAIKKJCrgKFprtxWpoACCiiggAIKKKCAAgookBUwNM2amKKAAgoooIACCiiggAIKKJCrgKFprtxWpoACCiiggAIKKKCAAgookBUwNM2amKKAAgoooIACCiiggAIKKJCrgKFprtxWpoACCiiggAIKKKCAAgookBUwNM2amKKAAgoooIACCiiggAIKKJCrgKFprtxWpoACCiiggAIKKKCAAgookBUwNM2amKKAAgoooIACCiiggAIKKJCrgKFprtxWpoACCiiggAIKKKCAAgookBUwNM2amKKAAgoooIACCiiggAIKKJCrgKFprtxWpoACCiiggAIKKKCAAgookBUwNM2amKKAAgoooIACCiiggAIKKJCrgKFprtxWpoACCiiggAIKKKCAAgookBUwNM2amKKAAgoooIACCiiggAIKKJCrgKFprtxWpoACCiiggAIKKKCAAgookBUwNM2amKKAAgoooIACCiiggAIKKJCrgKFprtxWpoACCiiggAIKKKCAAgookBUwNM2amKKAAgoooIACCiiggAIKKJCrgKFprtxWpoACCiiggAIKKKCAAgookBUwNM2amKKAAgoooIACCiiggAIKKJCrgKFprtxWpoACCiiggAIKKKCAAgookBUwNM2amKKAAgoooIACCiiggAIKKJCrQEuutVlZUwu88cYb77777kdtnxkzZpR1rC0tLYu2ffr37z9w4MCy9jWzAgoooIACCiiggAIKNLqAoWmjn8G6aP/nn3/+zDPPPPfcc3379l122WXXXHPNOeaYo6yWzZw5k0LeeustChk0aBAlLLDAAmWVYGYFFFBAAQUUUEABBRRoXAFD08Y9d/XSckLKhx9++J133hk6dOiKK67YlWZtsMEGr7766vDhwydPnjx48GCj065guq8CCiiggAIKKKCAAg0kYGjaQCerTptKfylx6R577EGXadebSHC74IIL3nzzzT179hwyZEjXC7QEBRRQQAEFFFBAAQUUqH8Bl0Gq/3NU1y1kfilDcLfccsuKxKXhUCmKAimWwuv64G2cAgoooIACCiiggAIKVEjA0LRCkLNrMax7RCTZxXG8WTwKpFgKz/5kigIKKKCAAgoooIACCjSfwKzQ9Lbbbmu+w/OIqi3Acryse1SNWiiWwqtRsmU2h8DUqVM//PDDjz/+uDkOx6NQQAEFFFBAAQVmc4Gv5pq+9tprY8aMmc0tPPxOCBA9sppuJ3bscBfWQHrsscc6zDabZHjqqafGjRvX3sEuv/zySy65ZPbXN9988+6772Ym8Jxzzrn00kvvvPPO/fr1y2aLKfwRuPXWW9lr0qRJAwYMYFj1qquuGn8tZSPPGll869hjj6V3/e9//3spbTOPAgoooIACOQh88MEHL7744iuvvPL2228vtthi/9f24SqcqnrixImPP/54KjH1dd111+3du3dIpEyexlLgSiutlMrG108//ZSZUGwstdRSHb6Er3M3FeXeJEyfPv3OO+984YUXaPYSSyyx1lprbbXVVt26dcs2vr2U/GtsryWm5ybwVWj68ssv51alFTWTAO8vLfc9MSUePsWW+3LUEktuxGynn376yJEj22v5j3/84z333DP16/nnn3/dddd98cUXMf3KK6886qij9t5775iS3LjnnnuohStlTLzmmmu23377U045pcRTnH+NsaluKKCAAgooUA8CXGovvvji5MU3tGq33XY7/vjjeVIcG8nDfR6wxq8FN2666SaePoefuCjfd999O+20E9flVObx48cfcsghPB3mOfVVV12V+jX7tRM3FeXeJLBcyDHHHDNq1KhYOytc0raLLrpokUUWiYlFNvKvsUhj/Ck3ga9C0yIdMrk1xYoUUKA9gdGjR/PT+uuvX/BxY7Yv9JJLLrn22mvZZbvttttss814cnnXXXc9+uij55577jzzzEP3aaoieiBPOukk3i5LN+muu+7ap08fuqzpQWUvajzttNNS+bNf868x2wZTFFBAAQUUqJUA19ATTzzx3nvvpQGrrbYaY8oIFJl48tJLL3H9veWWWxii+Nvf/rZXr16pFq6++upzzTVXKjF85ZJdMD2ZOG3atKOPPpq4dOGFF7700ksXWmih5K8Ft8u9qSj3JoGjPuyww6iFKPQ73/kODq+//vrVV19NT/Lhhx9O9J5FSLUz/xpTDfBrrQS+Ck2zT3dq1SDrVUCBlACTKunM5PrEJS31U8GvI0aMuOKKK/jpgAMOOOKII0Ie+j/pXGXs63nnnbf55pvPN998cV96p3mAyjWV6+jll1/evXvrFHTe3LPCCiucccYZjMbZYYcd1ltvvZg/u5F/jdk2mKKAAgoooEANBXiYG+LSE044gTfqJVty//33E7UytPVvf/sb3afJn9j+xS9+wTDdVGKJX7mBpzpe4zfvvPNyk8C42Q53LPemohM3CRdeeCFxKY+5b7zxRt4ISJM23XRT7j2+9a1v0ZtK3ykBapF25l9jkcb4U84Cs5ZByrliq1NAgRIFmEBCzhIHwJDzD3/4A9cqLgbDhg1LVsFoXp7LEuVef/31yXSCTx5wksJj1xCXhl/pPg1rXP3ud79L5s9u519jtg2mKKCAAgooUEMB4k9qZ2JpKi4lcYsttgjjlW6//fbKtvDMM8+k3h49evz6179ebrnlSim83JuKcm8SeL0CA49pCTchIS4NraJ5u+yyC9s33HDDhAkTijQ1/xqLNMafchYwNM0Z3OoUKFug3KvI008/TR0HHXRQaiAQD2XD9TJkiO0IX+kmTS16RJh65JFHko2VFehTjfmzG/nXmG1DTHn++eeZ3/L/2bsTuDum+/Hj/6wSIogkQjZEBFWxFCVK7bUvLap2te/7Xv3Zt6ItpYpaigqlKGqJJVq72tqmoXaxJoTYIov8P8nxG/Obuc997n3unXnu3OdzX155zZ0595wz74mc+c5Zhk9YEIL9Y8eO5SvNNts80mboMn3Ixx9/fPQTNxRQQAEFFKhR4MMPPySHZZddtmQ+NMqsyLDbbrvNmjWrZII27LzkkksYJ9y1a9dzzz2XIcQV5tC2m4rKbxKeeeYZno+zSGF6bQsmxM4111w8Ih8/fnyZ2lZ7W1J7iWUq46GcBQxNcwa3OAWqFqiqFWGgTnjpzsorr5wuKexkzd74obDAUpn0xKVvvvlm/Cfx7fxLjJee2Ga4FPNbHnjgARrpkSNHhqNUnj2Md2K01dFHH82fb7/9driHSPzcrwoooIACCrRNICyc++STT5ZcxJEpoIxo5VNyzYg2lHjTTTcxs5SHyEzJWX311SvPoaqbCrKt9iYhpKcVTk+gBWHxxRcnz8R9SKLy+ZeYqIBf21HA0LQd8S1agYoEQivC8gZsnH/++YyHWXPNNffdd18WEnj55ZcTWTCQJjyRLTlxZZFFFiE9+cRX4g1tQMn09LuGWakhTaKs8DX/EktWg50srE9cyptviD933XXXRDIaQtZz4raAtQ1Zu/jQQw9NJPCrAgoooIACbRbgRS/8lhfGsMoDLWOb86nkhzxvZYYqKZlouuGGG1bykyhNVTcV/Kram4Qy6ckt3IeUualolxIjHDfaXeDrZZDavR5WQAEFWhIIrQir7O68885094VkrKDLhyemLDaw2mqrRb8NTyKJJxOjeUOC0CSwTTLmw7AxefLksEB3dCjKKvrJxx9/THrWMEgcCl/zL7FkNXgDVohLGa/LLNl0Gl6PxjqBzKdNH3KPAgoooIACNQow5HWnnXZieXzeVrrFFlvQibrGGmswfoclBnv27Fkmc2aaxNcmjFIutNBC8fY92s/4VdY1ZNAs03DSiypFyVraqOqmog03CeGuoMxNBRULaUrWMP8SS1bDne0lYGjaXvKWq0ClAqEVYZk7hsHQa8o8FoYD8b5sVjNiXiW9f7y4hTdZh+zKP60MvaAh1AyhafTksmSvKXnSurDae5lWJP8S03DUkG5kuoJPPvlk5pGmE7CHt7My1afkIXcqoIACCihQuwDrGrBmIcv8vPPOOzRMfMiTuJS3uPEut1GjRsXXGoyK4xFztB3fYJhuOjRlhaEHH3yQF8aQkh5amuChQ4fGf9XqdhtuKsizwpsEAuYwA6hMenJr9aYizxJbFTNBngKGpnlqW5YCbREIrQgvNWUhH1Y7CFkwgOd73/se/YQs9sP6B9Giu6GzdOrUqS2VFA5FfarRBvtLvmfsiy++IKsoWTrb/EtM1IE3xRGX8sLxs846a/31108cjb7y1vKSJxglcEMBBRRQQIEaBeg43XHHHVnI56677nr22Wd5uRrNKO+M4cOMEtqpbt26JYogcC3ZrUqzlUjJV3LjQ2fpI488wkCqI4888uqrr2aF3nTKlva04aaCrCq8SSD2pjKM82rpPoTKk1urNxV5ltgSlPvbRcDQtF3YLVSBKgRYJpcV2AcPHhzFpeHH/MtOm0QTSGxGh2GIu8LTU57XliyABolVizi02GKLhQRDhgyhD5bpqfyk5Hu6wxDiKH062/xLjNfh/fff33vvvekHZudSSy0VP5TYZlXAxB6/KqCAAgooUHcBWtXvzPmQM83T3/72Nx4f04PKBFGmhvJ28USJRx11VEt9jImU4SvvoWGReZZXYL1fXhPKG8hZSaFkypI7q7qpaMNNAncF1K2l+5BWbyryL7GkkjvbS8BlkNpL3nIVqFSAf+WXWWYZXl2d/gFTWYhIGT8TvSglBIrEnyVXoA1NBUNbBw0aFHLj6SazWdgOrUW6iPCTkG36KHvyLzFRjfAIlp2MbWYNpMRRvyqggAIKKNBeAkwi3XTTTa+55pqNN96YOhCdxpchbEOt6HT92c9+xg+Z3RNWT+AtoKzWW3lWVd1UtOEmIdwVtPmmIv8SK6czZQ4ChqY5IFuEAlkJMHImhKzhhTEUw9TQsFx7yVbhrbfeIs3AgQPjHbBlWpGol3XRRRdt6RzyLzFRkwsvvPDWW2/FgfWKTzzxxMRRvyqggAIKKNC+AjTW4T3hPErmJWe1VIY5q9GE1R122IHBwOR29tlnh3mtteTMb9M3Feys9iYh3DCUvAkht3AfUuamol1KpFA/DSJgaNogF8JqKFBagGaMhXlZcpYVj9IpiEjfffdd9g8YMCAcpV1h6C/bRGvp9GFnokkIX3nsSlmJn4T0dMyyrkPiUPQ1/xKjotmgYryRlfE/jGiiJvfdd9/ll18eT+C2AgoooIACWQtMmDDhJ3M+EydOLFlW9EQ4vOCtZJo27OR1aDwgZlUkJviw5kKrOVR7U0GG1d4khPS83zU9ppc7mbAAUkjTUm3zL7Glmrg/fwFD0/zNLVGBKgQIt/g3mnUURo8enf7Zbbfdxk5Cx+WXXz46Gl5x9uc//zlafTccYjn7Rx99lO3EO9DCV7ocQ25RPrxthVen8nWDDTaIdpbcyL/EqBrRu8tZFGqfffZh/0UXXfTwww9HCdxQQAEFFFAgawGmyTCVhq5LluctWRbLILGfNn3YsGElE7RtZ+/evc8880ziXnojGejbatzb5puKym8SWFWYWhEt8/qAxEnxlgH2cFczYsSI+KGwYES0p9rbkjaUGJXlRqMJGJo22hWxPgokBZimwq4777zzvPPOizo22eB1MoRhHGIhhPjifttvvz2twsyZM3kfdzSnZdKkSWHpBZqEH/zgB/EyVlhhhfCicHKL3hJOo8IAoU8//ZRpLXvssUeUnmWHzpnzoZWKdmZaYlRKqxvUk/UPkWGdibB4fas/MYECCiiggAJ1EWB1IvK56qqrzjjjjHgH5owZMy699NLwhpj11luvf//+ieJYJYHGuuQnavQTP4l/5e2mBx98MHvGjh175ZVXxg+V3K72pqKqmwRK5HE5CzSywX3LQw89FNWBmxaWLObrXnvtRYQc9nOCDA1bZ511mJsTpcy0xKgUNxpToBP3cNTs97//PX+GkYHZVfT1CbNHHg4d9PXIw+wKMufcBHgAxrSH8iujtq0y48eP5xEjC9u07edN9ite4U2rxr/gLKjA+0gJF3nj9pQpUzhN3tXJK2QS5/vEE08ccMABrN7et29fwk7iTLpMaSkJWekI5f2oifQMQKJt4F8Alh/gLTW9evUifx7B0ifJQFkucZSe16lxUdjPq9XiK/pmV2JUdGLj/vvvP/zww2nj77777ugQTTsL99PJzGNp1tMPy9Oz/gTv16FjOXQCR4ndUEABBRRQoF4ChKC01Ndeey0ZEnoxzpb5NTwXZggrzTE76Qxk/G20XDxvJf3hD39YvnQGTEWvkGEhX1rezTffnEzSv6JppoGm3EsuuYTlgdMJ4nuqvamo/CYhlMLD8YMOOojX2/CVytCl/OKLL44bN46vvPaG5YWjyrB/u+224yt3FGPGjIn2Z1diVIQblQvkE8GFmLQLo+CoGbeh/HnEEUdUXss2pPx4yqf8av7evdrwW3/SmALEAAQzYXJjfWvIeuj8U86zwPpmW9DcRo4cSeP073//m3+s6Q9kpC4Dh+j/5KUy8S7N6OxY6IifMLKI8BJJ2j+i0xVXXJGO0CWWWCJKFm3wjJOlFEhMXyiNKE0FcSzN6s9//vPEaF5aPqJchuIQykY/ZyO7EuOlxLf5u3fPPfdQc2LRaD9LQK266qrMm2UWLkq85pQomsktjGRmOm54pB0ldkMBBRRQQIF6CRAWrr766sOHD+eNboxQ5fExE1BZLZ/Hyrwbhvaa6aDRjFMKnTx58g033FC+9G222SZ6CkxcSmtO+8v4oPSvKJoHtbTdBISsBlzmxaH8ttqbispvEkLFoKAjlPXzuQ8Bgc4G7l7IhP5SQtZoJg6J+/TpwysGaLJ33XVX7lKi88quxKgINyoXyCeCY7kQqmSvaeXXxZQlBPhrxDT3MHKjxOEadtHTxT/l6667bg15NOFPaeRY3I9Hswx34R/08mdIc0irQKhJW0hPKe1l+fQcJTHRKX2PYXH59JvBeVh7yy23MISY1iWdWxYlpktxjwIKKKCAAo0swBhdngvzCJWHvASTjHhqzNpWdVPBKbR6k5A4TTqNCdSZCsTza0bYMXQrkSB85Wl71JmcSJBRiYlS/FpeIM9e067lq+JRBcoLsDIqj7t4HlbfMb1kyD9kdH+VL70DHiUcXWuttSo8cR5bMvqXT4XpSUZPLJ8y6WkkOMqSAyXTZFFiyYLcqYACCiigQMMK0GlJzySfhq1hqFhVNxX8ZM49wqKVnxSzivi0mr6luDS7ElutkgnaS+DrWcjcULZXDSy30AJ0xPEvL9MDiCTrdSJkRYZkW0kvX70KNZ8KBXgGzJJL8QWBK/yhyRRQQAEFFFBAAQUUKCPwdUTaUg97mV96SIEgwNwAnqIxX4KuztpNyISsyDA+5aD2bM2hLgJMnuHDkgbpgb51yd9MFFBAAQUUUEABBTqswNcDepdZZpmwjlaHhfDE2yywwAILjBo1ip40Vgl/6qmnWBmVPV26dKkqQxZzYz0AZjnSZUp/KXEpmVSVg4lzEGB9BRYY5JNDWRahgAIKKKCAAgoo0KEEvg5NmaId1nTuUCfvydZLgDCS9YqYd8pbMRnw+dhjj7FOT1WZs07PQgstxLpHzC91HG9VdHkmZv13Xu2dZ4mWpYACCiiggAIKKNBBBL5ZBmmrrbbqIOfsaWYkQEhpVJmRrdkqoIACCiiggAIKKNDcAq5+1NzX17NTQAEFFFBAAQUUUEABBQogYGhagItkFRVQQAEFFFBAAQUUUECB5hYwNG3u6+vZKaCAAgoooIACCiiggAIFEDA0LcBFsooKKKCAAgoooIACCiigQHMLGJo29/X17BRQQAEFFFBAAQUUUECBAggYmhbgIllFBRRQQAEFFFBAAQUUUKC5BQxNm/v6enYKKKCAAgoooIACCiigQAEEDE0LcJGsogIKKKCAAgoooIACCijQ3AKGps19fT07BRRQQAEFFFBAAQUUUKAAAoamBbhIVlEBBRRQQAEFFFBAAQUUaG4BQ9Pmvr6enQIKKKCAAgoooIACCihQAAFD0wJcJKuogAIKKKCAAgoooIACCjS3gKFpc19fz04BBRRQQAEFFFBAAQUUKICAoWkBLpJVVEABBRRQQAEFFFBAAQWaW8DQtLmvr2engAIKKKCAAgoooIACChRAwNC0ABfJKiqggAIKKKCAAgoooIACzS1gaNrc19ezU0ABBRRQQAEFFFBAAQUKIGBoWoCLZBUVUEABBRRQQAEFFFBAgeYWMDRt7uvr2SmggAIKKKCAAgoooIACBRAwNC3ARbKKCiiggAIKKKCAAgoooEBzCxiaNvf19ewUUEABBRRQQAEFFFBAgQIIGJoW4CJZRQUUUEABBRRQQAEFFFCguQUMTZv7+np2CiiggAIKKKCAAgoooEABBAxNC3CRrKICCiiggAIKKKCAAgoo0NwChqbNfX09OwUUUEABBRRQQAEFFFCgAAKGpgW4SFZRAQUUUEABBRRQQAEFFGhuAUPT5r6+np0CCiiggAIKKKCAAgooUAABQ9MCXCSrqIACCiiggAIKKKCAAgo0t4ChaXNfX89OAQUUUEABBRRQQAEFFCiAgKFpAS6SVVRAAQUUUEABBRRQQAEFmlvA0LS5r69np4ACCiiggAIKKKCAAgoUQKBrnnWcp8fs4iZNmpRnoZalgAIKKKCAAgoooIACCijQBoEQwbXhh234ib2mbUDzJwoooIACCiiggAIKKKCAAvUUyLXX9LOpM6j70EED6nkG5qWAAgoooIACCiiggAIKKJCBwOsT3iXXvhnknM7SXtO0iXsUUEABBRRQQAEFFFBAAQVyFTA0zZXbwhRQQAEFFFBAAQUUUEABBdIChqZpE/cooIACCiiggAIKKKCAAgrkKmBomiu3hSmggAIKKKCAAgoooIACCqQFDE3TJu5RQAEFFFBAAQUUUEABBRTIVcDQNFduC1NAAQUUUEABBRRQQAEFFEgLGJqmTdyjgAIKKKCAAgoooIACCiiQq4Chaa7cFqaAAgoooIACCiiggAIKKJAWMDRNm7hHAQUUUEABBRRQQAEFFFAgVwFD01y5LUwBBRRQQAEFFFBAAQUUUCAtYGiaNnGPAgoooIACCiiggAIKKKBArgKGprlyW5gCCiiggAIKKKCAAgoooEBawNA0beIeBRRQQAEFFFBAAQUUUECBXAUMTXPltjAFFFBAAQUUUEABBRRQQIG0gKFp2sQ9CiiggAIKKKCAAgoooIACuQoYmubKbWEKKKCAAgoooIACCiiggAJpAUPTtIl7FFBAAQUUUEABBRRQQAEFchUwNM2V28IUUEABBRRQQAEFFFBAAQXSAoamaRP3KKCAAgoooIACCiiggAIK5CpgaJort4UpoIACCiiggAIKKKCAAgqkBQxN0ybuUUABBRRQQAEFFFBAAQUUyFXA0DRXbgtTQAEFFFBAAQUUUEABBRRICxiapk3co4ACCiiggAIKKKCAAgookKuAoWmu3BamgAIKKKCAAgoooIACCiiQFjA0TZu4RwEFFFBAAQUUUEABBRRQIFcBQ9NcuS1MAQUUUEABBRRQQAEFFFAgLWBomjZxjwIKKKCAAgoooIACCiigQK4Chqa5cluYAgoooIACCiiggAIKKKBAWsDQNG3iHgUUUEABBRRQQAEFFFBAgVwFDE1z5bYwBRRQQAEFFFBAAQUUUECBtIChadrEPQoooIACCiiggAIKKKCAArkKdM21NAtraoH//ve/b7zxxntzPjNmzKjqXLt27brQnM+QIUOGDx9e1W9NrIACCiiggAIKKKCAAkUXMDQt+hVsiPpPnjz56aeffu655/r37z9s2LAVV1yxS5cuVdVs5syZZPLyyy+TyciRI8lhgQUWqCoHEyuggAIKKKCAAgoooEBxBQxNi3vtGqXmhJQPP/zwa6+9tvHGGy+11FK1VGu11VYbP378mDFjvvjii1GjRhmd1oLpbxVQQAEFFFBAAQUUKJCAoWmBLlaDVpX+UuLSbbfdli7T2qtIcNunT58bbrihZ8+e6667bu0ZmoMCCiiggAIKKKCAAgo0voDLIDX+NWroGjK/lCG46623Xl3i0nCqZEWGZEvmDX3yVk4BBRRQQAEFFFBAAQXqJGBoWifIjpoN6x4RSdY4jjeNR4ZkS+bpQ+5RQAEFFFBAAQUUUECB5hMwNG2+a5rrGbEcL+seZVEk2ZJ5FjmbZ9EFvvzyy3fffff9998v+olYfwUUUEABBRRQQIFIwLmmEYUbbREgemQ13bb8srXfsAbSY4891lqq5j/OVN6PPvqo/Hkus8wyAwYMCGleeumlMr3N9EUvu+yy6dymT59+++23//Of/yTeGzhw4EorrbT++ut36tQpnbKlPVTy5ptvpvTPP/986NChDMn+9re/3VJi9tdSIstuHX744ZzL3XffXaYIDymggAIKKNAuAi+++OK4ceNY2ZEHqUssscTSSy+93HLL9evXL1GZzz777PHHH0/sTHxdZZVVevXqFXb+/e9/nzZtWrzRjyeObgBof9NlRSm9r4go3GhAAUPTBrwoRaoS7y+t9j0xFZ4e2Vb7ctQKcy5WsgsuuODZZ58tX+fTTjuN5ZFDmuuvv/6mm25qKT0R4znnnJM4ypzeww47bMKECdF+lqG68sorf/WrX5Vp26LEbNx1112nnnoqTWy08+qrr95kk01OOumkkn89ai8xKsgNBRRQQAEFGkeAVwyceOKJvGsgqtLYsWPZ7t69+zHHHLPVVltF+9ng+T5PWuN70tujR49ecsklw35y5rUIJ5988mabbZZI+Z///GfPPfekIV5rzidxNP7V+4q4htuNJmBo2mhXxPoo8H8E6ORkseL/syv2hY7lWbNmxcO/SZMmcZwHtPPPP38s4debUfMWHeKB7n777ceviEJ32WWXQYMG8az3qquuopHbf//9r7jiinnmmSdKXHKDPswTTjiBN9PymHbrrbeed955qRU9qHfccQf9rqecckriV7WXmMjQrwoooIACCjSCACOPDjjgAB6/du7cmQgxvHSAtxg88cQT7CSkpG097rjj0lVdfvnliV3T+9kz99xzl9wf38nD5QMPPJC4lEFPZ599dvyuIJ4sbHtfkTZxT+MIGJo2zrWwJgqUECjzPPXROR/G+ay++urRLz/88EO2f/aznxGdRjvLbPzyl78kLiWepLuV1/aQktZ07bXX/vGPf0w7St8pAWqZn9OzTX8pcSnjui+99FIaYxLz1p8RI0bQl8sg4U033XTVVVeN51BjifGs3FZAAQUUUKBxBC688EKaTh4Nn3vuufHpTl999dXFF1982WWX3XjjjT/5yU8WXXTRRJ1PP/30hRdeOLGzwq+0+zxi/uCDD2j3Ge7UUogb5eZ9RUThRgMKuAxSA14Uq6RARQK0c6TbcccdCSyjH4Re0woH4jIr9d577+W3u+++e4hLQz5MjAmDjv74xz9++umnUebpDYJPekHZf8ghh4S4NKSh+zSsj/W73/0u/qvaS4zn5rYCCiiggAKNI3D//fdTmS222CIel7KH9pHokbaV7dtuu62OFWZ9B/pp33zzTVZ5+M1vftPqQKfyRXtfUd7HozkIGJrmgGwRCtRf4G9/+xurFhGU7rDDDvHceW5KExiPM+NHE9vPPPMMj3JZT4iHuIlD++yzz1xzzcXoIFZxSByKf/3HP/7BV7pJE4seUQcGF3GI99PSpxr9pPYSo6zSG88//zyTZvlQaDjKDB++Mq+Gr/fccw8Dj5kBe/zxx6d/6x4FFFBAAQVqEWD1eAJFcii53CAzXM4888zzzjtvjTXWqKWU+G8ZuHTEEUcwSHihhRb67W9/y/qR8aPVbntfUa2Y6bMQMDTNQtU8FchWgPml0aPNaOE+iqSHk7X7FlxwwXgHZpmqvP766xxl2cD0+B8yWXzxxTnKJJlWc1h55ZXTacJO4lKe5kZHay8xyiqxQaDOM+kHHniA0xk5cmQ4StHsYTVCJr4effTR/Pn222+HMc+Jn/tVAQUUUECBWgR4nrvYYouRA7NtSubDYCLmyyQ6VEumrGQndwI///nPKYvxw8Sl0UL9lfw2ncb7irSJe9pFwLmm7cJuoQrUJEC4xVPS3r17p7tMybdv374EqCxExKghlkYYPHgwS8+vttpq/JkoNQSKLc1vWWSRRSglpEn8MPpaJgdWbphvvvk+/vhj0kTzasqkJ89KSoyKjm/861//Ii7lcTXxJ7Nk44fYJrpmNSZuCL7//e8znqprV//dSwj5VQEFFFCgDgK0s6+88grtLwNrf/rTn9II1iHTFrI4//zz77zzTgpiHG/UyLaQtvXd3le0bmSKXAS8RcuF2UIUqJ8AjzZ5Pkp+zDJNzCphNC/7GeXLKFYWzg1l8mo1PixotO++++61117xioQeUQLC+M5oO+wv02vKEvZTpkwhfZkcCE3JgaWVQrY1lhjVLb7B2YW4lPG6zHGNHwrbvHOVxYeZDZs+5B4FFFBAAQXqJXDQQQexyj1Ddf7whz9cd9113/3udwlWGcjDnJfyo5mYclIyjmWkLk+W09Ujfz7sp7nnNafpBFXt8b6iKi4TZypgaJopr5krUH8BFi5iAUDasPQE0RCaskg9R4899ljaMyadMvGSB6uMZWUMMMONCNJCnZhlGobaluk1JWWZ0DTqUC2TA/2uUQ61l5jWJH9CbubEsig/80jTCdjDMvq87a3kIXcqoIACCihQLwFe9sYivUwo5XXfTLHhGXF4TMxopg033JBGqqXF81m7vmQdWIE/HZpSxMSJE0N63kPOSvjpWTklc2tpp/cVLcm4P38BQ9P8zS1RgbYLEN211GVKpiE0ZVkjHqbyZyiGho0Po39ZbvfXv/71D3/4wzA9lSe4PXr0mD59+tSpU0tWiPeGs7/MG9WiQ+SQ6L8NGSZyqL3ERD1feOEF4tJPPvnkrLPOWn/99RNHo6+8zbVk9aIEbiiggAIKKFAXAaJTFts78sgjGSJ73333sQ4C69izeP61cz4HH3zwrrvumi6I+SYl32Gefhs5v+XtqTxyZcDw73//e9rBM844g0mn6Twr3ON9RYVQJstHwNA0H2dLUaA+An/9619fffVVOkW33377dI7rrbceiwDRUxrFpVEaFvFj6im9i88++2y0PCBrzTNL85133omSxTdYMYivYVGH+P5oe8iQISw5yEAgcmDZpGh/tJHOocYSo5zZoG3ee++9GTDMNq81jx9KbNNXnNjjVwUUUEABBbIToBuTblI+FMGiD4SpV111FY+Pee8oD4XTayIcddRRLY0/KllJYtHNNtuMh86/+MUvbrnlluWXX5431pRM2epO7ytaJTJBngKu0JuntmUpUJMAq91ecsklZLHzzjuX7AZkyBBzTkou00ePJU0Xv2UOTFQJAkW2QwAZ7Yw2Qsga0kQ74xu0r0yDYU/lOdRYYrx0tkOvLBuHHnpoWLI/kcCvCiiggAIKtK/AoEGDdtpppz//+c/hUS/za2qsD/NXiUvJhKUQ6W5lg45T5ri2IVvvK9qA5k8yFTA0zZTXzBWop8Bf/vIXZofSZZp+4FpJMeGNZ++9916UOKzp11Jg+dZbb5Gy/Lp/ZUJNHg/zkrdEDrWXGFWeDebb3HrrrSz79PLLL5944onxQ24roIACCijQOAI0VQzBpT4skRAaxzbXjcml0W9POukkViIkQ8ZGMbs12l/hhvcVFUKZLDcBQ9PcqC1IgZoEeLP2pZdeShasYxRN8kzkePrpp7NELasCJvaHrwzlZSPepxoCxSeffDI9pvf5558PyxeVD03D0dtvv53JKolCCRrZQ+9uv379okO1lxhlRba8OpVBxaeddhp9wkzpufzyy6OjbiiggAIKKJCnAKvssjxhmdXgw6vLaC6ZC1OvijGm98wzzyRnnlxXO+PU+4p6XQXzqaOAoWkdMc1KgQwFmExC9yZv1t5uu+1aKmbZZZdlJuo111zDEJ1EGsbxMt2FndFEU7ZZ949WjZeg8la0RHpemMYeIskRI0YkDsW/hok0dFoykTW+n/e1XHHFFezZYIMN4vtrLzHKLWrav/e97+2zzz7sv+iii8JaiFEaNxRQQAEFFMhHYMUVV2RRorFjxz7yyCMlS2RWJ/sZbVTjgrqJzHkzDasrsfP+++8Pb5RJJGjpa4PcV4Q1I6JKtuN9RVQHN9pRwNC0HfEtWoFKBYgeL7vsMlKX6TLl6Lrrrsv8T7pAec9n/N/6Z555hpetkYDIcIUVVohKpUuTl6PylbfLPPTQQ9H+66+/PnSx8h5UOiSj/Szwe8455zz44IPRHnJj0gtfCQvfeOONsJ/ann322Yws6tat2x577BElZqPaEuO/LbNNKWuvvTaPonllTngjTpnEHlJAAQUUUKDuAiz3EB7+sqYRzWj8GTEtMmv2ErVSaPrFb+xkuQTWKSz5SQ9KStecpjxMOmWZJVr8dIL0nka4r+DUWDtjnXXWYXpOVMMGua+I6uNGzgKu0JszeLMVxxiS+D++dTw9sg1DX+qYZ3Gzuvnmm5kjymTRMl2mnB2BH9Hj4YcfzqtN6a5kSSSWKeK9pqxcz1He/R36QuMOu+++O1Eoj3h55vqd73yH1RpYSmHcuHGk+dGPfrTRRhtFiQk1Q0doWE4p2n/qqafStFAEdaMI3kxDu8g8VXo1wxyYKGXYqLzExA/LfKWsU045hXUm6DRmSaSrr766pTHPZTLxkAIKKKCAArUIsOrBcccdRxPMK81ocJlywoL5PLelTWQ1ex710tRus8026SJocNM7w57Ro0eXfIVMIj0NLutQ8Gz66KOPJjBmrf5EgsTXRriveOmll3i5DhWj//aAAw6IatgI9xVRZdzIWeCb/pCcC7a45hAg8pk8eXIW50K2YfXXLDIvVp4sbxBmUdJlWvK9Z/HTYfolgRnDe5hDQsx59913EzTyKJc5qDxMTb9GhXejsfQ8D3F5EPDUU0/RPBCXEuLuv//+9EDGcw5TT2lZQzdpdIg5n0yCXXPNNXm7KR2qzDulDWZVBvpX45FtlL7yEqOfVLJBnXnLOX+GJZG4CajkV6ZRQAEFFFCgXgK8R+3iiy/ec889aXbpliT04skvs2l4frrEEktccMEFPMmtV1mJfJieQzxMUz5x4kSa7/J9rQ1yXzF8+HCeaDPAKvE+vAa5r0gI+zUfgU7h7jPcxrH2dKalvj5hdtfN0EEDMi3FzPMUYO0ZHtGFQaH1LZcJk7zjixGq9c224+TGi1X+/e9/09fKm04HDx7c6onzQnAmyfCy0IEDB/KaUBq5xE9Y7/6EE04g6CX0TRwKX4ldCQsZj8REGjpsaWxKJot2tlpilNINBRRQQAEFiiXw4YcfhlZ12LBhxGDpR8PFOh1qW/f7iiBAnNwSjvcVDfKXJJ8ILsSkDuhtkIte1GowWIXxouPHjyeYqeM5kCEx0qqrrlrHPDtaVvSvMkC38rPmES+fMulDrymzVVtKw5pJfFo6mt7faonpn7hHAQUUUECBQggwpLZMi1mIU0hUsu73FSH/luJSjs65rVg0UY0yX72vKINTlEMO6C3KlWrQevIgcOTIkWPGjCGSrFcVyYoMyZbM65Wn+dQuwDROMmmyhrZ2FnNQQAEFFFBAAQUUqIuAoWldGDt0JqyWzmOtG264ga7O2iHIhKzIkGxrz80c6ijw+uuvs8QRA3rrmKdZKaCAAgoooIACCigQBBzQ69+EWgVYNnbUqFEM8+AFJKyjw5wK9rDUTVX5sh4v6x4xU5EuU/pLiUvJpKocTJy1wNJLL/2DH/yg2iubda3MXwEFFFBAAQUUUKA5BAxNm+M6tvNZEEayXhHzTlkhnWGfjz32GMvDVlUn1pRjPV7WPWJ+qeN4q6LLLfHJJ5+cW1kWpIACCiiggAIKKNDRBAxNO9oVz/B8CSmNKjP0NWsFFFBAAQUUUEABBZpXwLmmzXttPTMFFFBAAQUUUEABBRRQoCAChqYFuVBWUwEFFFBAAQUUUEABBRRoXgFD0+a9tp6ZAgoooIACCiiggAIKKFAQAUPTglwoq6mAAgoooIACCiiggAIKNK+AoWnzXlvPTAEFFFBAAQUUUEABBRQoiIChaUEulNVUQAEFFFBAAQUUUEABBZpXwNC0ea+tZ6aAAgoooIACCiiggAIKFETA0LQgF8pqKqCAAgoooIACCiiggALNK2Bo2rzX1jNTQAEFFFBAAQUUUEABBQoiYGhakAtlNRVQQAEFFFBAAQUUUECB5hUwNG3ea+uZKaCAAgoooIACCiiggAIFETA0LciFspoKKKCAAgoooIACCiigQPMKGJo277X1zBRQQAEFFFBAAQUUUECBgggYmhbkQllNBRRQQAEFFFBAAQUUUKB5BZ2gLnwAAEAASURBVAxNm/faemYKKKCAAgoooIACCiigQEEEDE0LcqGspgIKKKCAAgoooIACCijQvAKGps17bT0zBRRQQAEFFFBAAQUUUKAgAoamBblQVlMBBRRQQAEFFFBAAQUUaF4BQ9PmvbaemQIKKKCAAgoooIACCihQEAFD04JcKKupgAIKKKCAAgoooIACCjSvgKFp815bz0wBBRRQQAEFFFBAAQUUKIiAoWlBLpTVVEABBRRQQAEFFFBAAQWaV8DQtHmvrWemgAIKKKCAAgoooIACChREwNC0IBfKaiqggAIKKKCAAgoooIACzStgaNq819YzU0ABBRRQQAEFFFBAAQUKImBoWpALZTUVUEABBRRQQAEFFFBAgeYVMDRt3mvrmSmggAIKKKCAAgoooIACBREwNC3IhbKaCiiggAIKKKCAAgoooEDzChiaNu+19cwUUEABBRRQQAEFFFBAgYIIGJoW5EJZTQUUUEABBRRQQAEFFFCgeQUMTZv32npmCiiggAIKKKCAAgoooEBBBLrmWc95eswubtKkSXkWalkKKKCAAgoooIACCiiggAJtEAgRXBt+2Iaf2GvaBjR/ooACCiiggAIKKKCAAgooUE+BXHtNP5s6g7oPHTSgnmdgXgoooIACCiiggAIKKKCAAhkIvD7hXXLtm0HO6SztNU2buEcBBRRQQAEFFFBAAQUUUCBXAUPTXLktTAEFFFBAAQUUUEABBRRQIC1gaJo2cY8CCiiggAIKKKCAAgoooECuAoamuXJbmAIKKKCAAgoooIACCiigQFrA0DRt4h4FFFBAAQUUUEABBRRQQIFcBQxNc+W2MAUUUEABBRRQQAEFFFBAgbSAoWnaxD0KKKCAAgoooIACCiiggAK5Chia5sptYQoooIACCiiggAIKKKCAAmkBQ9O0iXsUUEABBRRQQAEFFFBAAQVyFTA0zZXbwhRQQAEFFFBAAQUUUEABBdIChqZpE/cooIACCiiggAIKKKCAAgrkKmBomiu3hSmggAIKKKCAAgoooIACCqQFDE3TJu5RQAEFFFBAAQUUUEABBRTIVcDQNFduC1NAAQUUUEABBRRQQAEFFEgLGJqmTdyjgAIKKKCAAgoooIACCiiQq4Chaa7cFqaAAgoooIACCiiggAIKKJAWMDRNm7hHAQUUUEABBRRQQAEFFFAgVwFD01y5LUwBBRRQQAEFFFBAAQUUUCAtYGiaNnGPAgoooIACCiiggAIKKKBArgKGprlyW5gCCiiggAIKKKCAAgoooEBawNA0beIeBRRQQAEFFFBAAQUUUECBXAUMTXPltjAFFFBAAQUUUEABBRRQQIG0gKFp2sQ9CiiggAIKKKCAAgoooIACuQoYmubKbWEKKKCAAgoooIACCiiggAJpgW9C0y+//DJ92D0KKKCAAgoooIACCiiggAIKZC3wdWg6a9asjz76KOvCzF8BBRRQQAEFFFBAAQUUUECBtMDXoSldpp07f9ODmk7nHgUUUEABBRRQQAEFFFBAAQUyEvg6HJ0yZUr37t0zKsNsFVBAAQUUUEABBRRQQAEFFCgjMDs0nTZtGl2mhqZlmDykgAIKKKCAAgoooIACCiiQncDs0PSLL77o1q2boWl2yuasgAIKKKCAAgoooIACCihQRqAzCyCFXtMuXbqUSechBRRQQAEFFFBAAQUUUEABBTIS6DpjxgxG83bt2jWjAsy24wj897//feONN96b8+HvVVUnzt/AheZ8hgwZMnz48Kp+a2IFFFBAAQUUUEABBRQoukDX6dOn01/q8rxFv5DtW//Jkyc//fTTzz33XP/+/YcNG7biiitW2wk/c+ZMMnn55ZfJZOTIkeSwwAILtO9JWboCCiiggAIKKKCAAgrkJtCVkIDCqg0kcqufBTW+ACHlww8//Nprr2288cZLLbVULRVebbXVxo8fP2bMGOY/jxo1yui0Fkx/q4ACCiiggAIKKKBAgQS6fvXVV1TXXtMCXbNGqyr9pcSl2267LV2mtdeN4LZPnz433HBDz54911133dozNAcFFFBAAQUUUEABBRRofIHZyyBRy06dOjV+Xa1hAwowv5QhuOutt15d4tJwgmRFhmRL5g14ylZJAQUUUEABBRRQQAEF6i5gaFp30o6VIeseEUnWOI43TUaGZEvm6UPuUUABBRRQQAEFFFBAgeYT6Gx/afNd1DzPiOV4WfcoixLJlsyzyNk8O7gAsxjenfMJM+07uIanr4ACCiiggAIKNIhAV0LTMKa3QSpkNYolQPTIarpZ1Jk1kB577LEsci50nv/85z8nTpzYq1evVVZZpfIT+eijj26++eaXXnrp888/Hzp0KOOlv/3tb5f5OQt333777ZT1/vvvDxw4cKWVVlp//fXLP8b6+9///sgjj7z55ptMFabTe8stt2S2cJkiEofyLPHTTz/daKONqMBtt902ePDgRE38qoACCiigQKsCL7744rhx41i7kUedSyyxxNJLL73ccsv169cv8cPPPvvs8ccfT+xMfKVBp1kPO2lMp02btswyywwYMCCRjK+042FAGY14uqx0+rCnDXcOFHTnnXeykki3bt0WW2wx2vSS9YlKzOE2IyorbORfYqICfs1IoNN+++1HaDrffPNRwBlnnJFRMSHb1ye8y8bQQSX+Z8u0XDPPTuCcc87hH6ws3kTKRNNbbrnlyCOPzK7yxcqZtur888+//vrrqfaIESPCRiWncNddd5166qm0jvHEm2yyyUknnVRyaW7kDzvssAkTJsTT0+j+6le/KtkQkjPpn3jiiXj6vn378u/Jd77znfjOlrZzLnHKlClrrbUWlTE0bemKuF8BBRRQoCUBXiJw4okn8jaBRILu3bsfc8wxW221VXz/K6+88sMf/jC+J709evToJZdcMuxfZ511ePHBySefvNlmmyVS/uc//9lzzz1pc2nCzj333JIteOInbbtzOO+886699tqwTmrIkFM7+OCDf/KTnyTyD1+zvs1IF5p/iek6dKg9+URwxx57LKpdO5Ss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oIACCrS3gKFpe18By1dAAQUUUEABBRRQQAEFOrxA51mzZnV4BAEUUEABBRRQQAEFFFBAAQXaU6DzV1991Z7lW7YCCiiggAIKKKCAAgoooECHF/i619S+0w7/N0EABRRQQAEFFFBAAQUUUKDdBDp36tSJwg1N2+0KWLACCiiggAIKKKCAAgoo0OEFOnfp0gUEh/V2+L8JAiiggAIKKKCAAgoooIAC7Sbwda/pzJkz260KFqyAAgoooIACCiiggAIKKNCxBTp37dqVuNRe047918CzV0ABBRRQQAEFFFBAAQXaU6Bzt27dpk2bNmPGjPashWUroIACCiiggAIKKKCAAgp0YIHOfIhO6TV1TG8H/mvgqSuggAIKKKCAAgoooIAC7SkwOzTt0aPH1KlT6Tttz4pYtgIKKKCAAgoooIACCiigQEcVmL0MEr2m06dPNzTtqH8HPG8FFFBAAQUUUEABBRRQoJ0FOlM+74/p3bv3559/3s51sXgFFFBAAQUUUEABBRRQQIEOKTA7NGWR3u7du7sSUof8C+BJK6CAAgoooIACCiiggALtLzA7NOVDx+n8888ftv1TAQUUUEABBRRQQAEFFFBAgTwFuobC6Djlk2fBlqWAAgoooIACCiiggAIKKKDAhRf9EYSve03DYkiiKKCAAgoooIACCiiggAIKKJC/wNehKQXba5q/viUqoIACCiiggAIKKKCAAgog8E1oKocCCiiggAIKKKCAAgoooIAC7SJgaNou7BaqgAIKKKCAAgoooIACCijwjYCh6TcWbimggAIKKKCAAgoooIACCrSLgKFpu7BbqAIKKKCAAgoooIACCiigwDcChqbfWLilgAIKKKCAAgoooIACCijQLgKGpu3CbqEKKKCAAgoooIACCiiggALfCHT9ZvP//b8JEybEv7qtgAIKKKCAAgoooIACCiigQA4C9prmgGwRCiiggAIKKKCAAgoooIAC5QT+T6/poEGDyqX1mAIKKKCAAgoooIACCiiggAIZCNhrmgGqWSqggAIKKKCAAgoooIACClQjYGhajZZpFVBAAQUUUEABBRRQQAEFMhAwNM0A1SwVUEABBRRQQAEFFFBAAQWqETA0rUbLtAoooIACCiiggAIKKKCAAhkIGJpmgGqWCiiggAIKKKCAAgoooIAC1QgYmlajZVoFFFBAAQUUUEABBRRQQIEM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",
            "placeholder_tag": "image_2",
            "content_type": "ExternalAssetsType.IMAGE"
        },
        {
            "title": "",
            "url": "https://uploads.linear.app/a4f50fbf-738c-4ae7-b7ca-dc198278934f/5751ffb0-4293-4cc5-80fc-9f0c3c388c03/596242ac-708e-4d52-a9fd-d745e39cc6bf",
            "content": "",
            "placeholder_tag": "image_3",
            "content_type": "ExternalAssetsType.IMAGE"
        },
        {
            "title": "",
            "url": "https://linear.app/beam-commerce/issue/BEAM-2725/upsell-not-displaying-in-danish-market#comment-5910cd9e",
            "content": "",
            "placeholder_tag": "linear_issue_2",
            "content_type": "ExternalAssetsType.LINEAR_ISSUE"
        }
    ],
    "linked_issue_ids": [],
    "comments": [],
    "issue_summary": "Error Messages:\n- No explicit error messages provided.\n\nFunction and Variable Names:\n- product selection modal\n- top-level product\n- specific variant\n- add-on item\n- upsells module\n- \"Offer is accepted by default\" toggle\n- \"Cancel\" button\n- \"Save\" button\n\nTechnical Descriptions:\n- Issue with product selection modal not showing add-on in cart when top-level product is selected without a specific variant.\n- Workaround: Selecting a specific variant makes the add-on appear in the cart.\n- Expected behavior: Selecting top-level product should automatically select the first variant for add-ons.\n- Current behavior: Selecting top-level product does not select any variants, leading to confusion.\n- For upsells, selecting top-level product should select all variants.\n\nOutput Format:\n- Image_2: \"Select Product Add-on\" modal, search bar, list of product variants for \"Digitalt Presentkort,\" checkboxes, variant names, prices in SEK, \"Offer is accepted by default\" toggle (off position), \"Cancel\" and \"Save\" buttons.\n- Image_3: Similar to Image_2 with the first variant priced at \"SEK 200.00\" checked.\n- Linear_issue_2: Attachment containing images illustrating the issue with the add-on product selection modal. Image 1 shows an inactive modal when top-level product is clicked. Image 2 shows an active modal with a specific variant selected.",
    "repo_summary": "The software project is a Shopify app developed using Node.js and TypeScript. The project consists of multiple directories such as `web`, `common`, `chrome-extensions`, and `extensions-src`. The `web` directory contains the main app code, while `common` holds shared modules. The project uses Shopify CLI for various tasks like building, deploying, and generating code. The `web` directory contains the main app code, and the `storefront` directory contains code related to the storefront.\n\nThe project uses Docker for containerization, with a Dockerfile defining multiple stages for building, generating license disclaimers, and setting up the final runtime environment. The project also includes documentation on subscription upgrades, discount codes module, and various constants and interfaces related to upsells, reward tiers, and geolocation pricing.\n\nThe issue at hand involves a product selection modal where selecting the top-level product without choosing a specific variant does not show the add-on, leading to confusion among merchants. The solution involves automatically selecting the first variant when the top-level product is chosen to prevent the module from appearing broken.",
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1714259567.038295,
        "classification": "bug",
        "initial_code_snippets": [
            {
                "code": ": addonSettings is ProductAddonSettings {\n  return 'product' in addonSettings;\n}\ntype ProductAddonSettings = Extract<\n  UpcartSettings<'values'>['upcartEditorSettings']['addonsField']['productAddon'],\n  { active: boolean }\n>;\ntype ShippingProtectionAddonSettings = Extract<\n  UpcartSettings<'values'>['upcartEditorSettings']['addonsField']['shippingProtection'],\n  { active: boolean }\n>;\ntype AddonSettings = ProductAddonSettings | ShippingProtectionAddonSettings;\n\ninterface FetchedAddonProduct {\n  product: Product;\n  variant: Product['variants'][number];\n}\n\ntype AddonStateMachine =\n  | { state: AddonState.DISABLED; data: {}; actions: { handleEnable: () => void } }\n  | { state: AddonState.ENABLED; data: {}; actions: { handleDisable: () => void } }\n  | { state: AddonState.LOADING; data: { willBe: 'enabled' | 'disabled' | 'unknown' }; actions: {} };\n\n// NOTE: attributes_after_line_change\n//\n// The cart attributes are updated AFTER the cart change is applied. This is to avoid\n// a bug caused by other apps (e.g., Elevar) which try to update cart attributes after\n// we update cart attributes. If another app tries to update cart attributes when we are\n// changing line items, the line item change may not be applied (Shopify Ajax API limitation).\n// By doing the cart attribute update second, we avoid this race condition.\n//\n// The ultimate solution would be to enable our global fetch queue to prevent race conditions,\n// related to the setting `ajaxRaceConditionPrevention`. However, this is a risky change to\n// make for all stores. Instead, we can use this workaround for now.\n\nexport const AddonsModule = withErrorBoundary(UnsafeAddonsModule);",
                "filename": "web/storefront/src/modules/CartPopup/AddonsModule/AddonsModule.tsx",
                "start_index": 13420,
                "end_index": 15077,
                "start_line": 373,
                "end_line": 408,
                "max_line": 408,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import CustomButton from '@components/common/CustomButton';\nimport ProductSelectModal from '@components/common/ProductSelectModal';\nimport ConfigureUpsellsModal from '@components/ConfigureUpsellsModal';\nimport { Checkbox, LegacyStack, Link } from '@shopify/polaris';\nimport { convertUpsellsToV2 } from '@storefront/src/modules/CartPopup/UpsellsModule/helper';\nimport { Field, useFormikContext } from 'formik';\nimport { random } from 'lodash';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Collection, Product } from 'server/modules/shopify/graphql/generated';\nimport {\n  UpsellRecommendationIntent,\n  UpsellV2Item,\n  UpsellV2Product,\n  UpsellV2ResourceType,\n  UpsellV2SelectedCollection,\n  UpsellV2SelectedProducts,\n} from '../../../../../common/defaultMetafields';\nimport { CartEditorFormValues } from '../types';\nimport styles from './styles.module.scss';\nimport { useTranslation } from 'react-i18next';\nimport { SelectField } from '@components/common/FormField';\n\nexport enum ActionType {\n  ADD = 'ADD',\n  DELETE = 'DELETE',\n  EDIT = 'EDIT',\n  ALL = 'ALL', //Use all products\n}\n\nexport enum ProductType {\n  TRIGGER = 'trigger',\n  UPSELL = 'upsell',\n}\n\nexport type onActionParams = {\n  productType?: ProductType;\n  id?: string;\n  action: ActionType;\n};\n\n/**\n * This component and its children have a lot of case handling around the type \"UpsellItem\"\n * After the multi-product updates we're handling the upsell and trigger as an array instead of an object.\n * Which makes the already loaded UpsellItem interface/type more complicated to deal with but this is necessary so that old upsells can be loaded and edited\n */\nconst SelectProducts = () => {\n  const { values, setFieldValue, handleSubmit, isSubmitting } = useFormikContext<CartEditorFormValues>();\n  const [productType, setProductType] = useState<ProductType>(null);\n  const [currentId, setCurrentId] = useState(null);\n  const addTriggerRef = useRef(null);\n  const [activeModal, setActiveModal] = useState(false); //The main modal\n  const [showResourcePickerModal, setShowResourcePickerModal] = useState(false); //Secondary resource picker modal\n  const [upsellItems, setUpsellItems] = useState<Array<UpsellV2Item>>([]);\n  const { t } = useTranslation();\n\n  /**\n   * Convert all upsell items to V2 format (if necessary)\n   */\n  useEffect(() => {\n    const upsellItemsV2 = convertUpsellsToV2({ upsellItemsV1orV2: values.upcartEditorSettings.upsellsItems });\n    setUpsellItems(upsellItemsV2);\n  }, [values.upcartEditorSettings.upsellsItems]);\n\n  //Handle actions from the list of upsells",
                "filename": "web/src/@templates/CartEditor/UpsellsModule/SelectProducts.tsx",
                "start_index": 0,
                "end_index": 2583,
                "start_line": 1,
                "end_line": 64,
                "max_line": 320,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "\"upcartEditorSettings.upsellRecommendationIntent\"\n            name=\"upcartEditorSettings.upsellRecommendationIntent\"\n            options={[\n              { label: 'Related', value: 'related' as UpsellRecommendationIntent },\n              { label: 'Complementary', value: 'complementary' as UpsellRecommendationIntent },\n            ]}\n            label={t('Recommendation Algorithm')}\n            sublabel={\n              values.upcartEditorSettings.upsellRecommendationIntent === 'complementary' && (\n                <>\n                  Complementary upsells must be configured.{' '}\n                  <Link\n                    url=\"https://shopify.dev/docs/themes/product-merchandising/recommendations#recommendation-intents\"\n                    target=\"_blank\"\n                  >\n                    Learn more\n                  </Link>\n                </>\n              )\n            }\n            component={SelectField}\n          />\n        )}\n        <div className={styles.UpsellsModule__configureButtonWrapper} ref={addTriggerRef}>\n          <CustomButton\n            onClick={() => setActiveModal((prevState) => !prevState)}\n            disabled={values.upcartEditorSettings.recommendedUpsells}\n            loading={isSubmitting}\n            primary\n            fullWidth\n          >\n            {t(`Configure Manual Upsells`)}\n          </CustomButton>\n          <ConfigureUpsellsModal\n            items={upsellItems}\n            active={activeModal}\n            handleClose={() => setActiveModal(false)}\n            onAction={onAction}\n            handleUpdate={handleUpdate}\n            handleReorder={(updatedItems) => setUpsellItems(updatedItems)}\n          />\n          <ProductSelectModal\n            isOpen={showResourcePickerModal}\n            initialType={'Product'}\n            onSave={onSave}\n            onClose={() => {\n              setShowResourcePickerModal(false);\n              setActiveModal(true);\n            }}\n            selectedProducts={defaultSelectedProducts}\n            initialCollection={defaultCollection}\n          />\n        </div>\n      </LegacyStack>\n    </div>\n  );\n};\n\nexport default SelectProducts;",
                "filename": "web/src/@templates/CartEditor/UpsellsModule/SelectProducts.tsx",
                "start_index": 8389,
                "end_index": 10539,
                "start_line": 262,
                "end_line": 320,
                "max_line": 320,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "(\n    () => {\n      const addonLineItem = cart.items.find(\n        (item) => isBeamAddon(item, platform.settings) && item.variant_id === variantId,\n      );\n      if (addonLineItem) {\n        setAddonState({ type: AddonState.ENABLED, lineItemKey: addonLineItem.key });\n      } else {\n        /**\n         * Two different cases which need to deal with automatically adding add-ons:\n         * 1. Desired state is stored in attributes already.\n         *    One of the following must have happened previously:\n         *          - The customer has clicked the toggle to enable the add-on, OR\n         *          - We automatically added an add-on that was accepted by default\n         *    In both cases we want to re-add the add-on. This case can occur if the\n         *    cart was cleared and then the customer added a new item.\n         * 2. Attribute does not exist. This means that the customer hasn't clicked the toggle\n         *    so we should use the setting from the merchant in UpCart to decide if the add-on\n         *    should be automatically added or not.\n         */\n        const shouldAddAutomatically =\n          desiredAttrKey({ variantId }) in cart.attributes\n            ? cart.attributes[desiredAttrKey({ variantId })] === DESIRED_ATTR_VALUE_ADDED\n            : acceptedByDefault;\n        if (shouldAddAutomatically) {\n          // TODO: refactor this to make default acceptance more clear.\n          //       It's not obvious that this hook will auto-add. However,\n          //       it needs to be part of state initialization.\n          handleEnable();\n        } else {\n          setAddonState({ type: AddonState.DISABLED });\n        }\n      }\n    },\n    { cart, hasFetchedCart },\n  )",
                "filename": "web/storefront/src/modules/CartPopup/AddonsModule/AddonsModule.tsx",
                "start_index": 10408,
                "end_index": 12120,
                "start_line": 14,
                "end_line": 334,
                "max_line": 408,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const handleSelection = async ({\n    selection,\n    isVariant,\n    parent,\n  }: {\n    selection: any;\n    parent?: any;\n    isVariant: boolean;\n  }) => {\n    if (isVariant) {\n      const parentItem = selectedItems.find((item: GqlProduct) => item.id === parent.id);\n      if (parentItem) {\n        // If the parent exists, add/remove it from the variant array.\n        let newItem = deepCopy(parentItem);\n\n        newItem.variants.edges = [\n          ...removeOrAddItem({ arr: newItem.variants.edges, item: selection, isVariant: true, isMulti: multiProduct }),\n        ];\n        if (newItem.variants.edges.length === 0) {\n          // If we just deselected the last variant, we also want to deselect the parent\n          setSelectedItems([...removeOrAddItem({ arr: selectedItems, item: parentItem, isMulti: multiProduct })]);\n        } else {\n          // In the normal case where we selected/deslected a single variant and we still\n          // have at least one selected, we only want to change the selected state of\n          // the variant, not the parent.\n\n          const newArray = replaceItem(selectedItems, parentItem, newItem);\n          setSelectedItems([...newArray]);\n        }\n      } else {\n        // If the parent does not exist, add the parent and remove all other variants\n        let parentCopy = deepCopy(parent);\n        parentCopy.variants.edges = [{ node: selection }];\n        setSelectedItems([...removeOrAddItem({ arr: selectedItems, item: parentCopy, isMulti: multiProduct })]);\n      }\n    } else {\n      // Not a variant, selection on top-level item\n\n      // Fetch all variants for the product\n      let productWithVariants = await fetchAllVariants(selection.id);\n      selection.variants = productWithVariants.variants;\n\n      if (multiProduct) {\n        //Select all variants\n        setSelectedItems([...removeOrAddItem({ arr: selectedItems, item: selection, isMulti: multiProduct })]);\n      } else {\n        //Single product - select only the first variant\n        let selectionCopy = deepCopy(selection);\n        const firstVariant = selectionCopy.variants.edges?.[0];\n        selectionCopy.variants.edges = firstVariant ? [firstVariant] : [];\n        setSelectedItems([...removeOrAddItem({ arr: selectedItems, item: selectionCopy, isMulti: multiProduct })]);\n      }\n    }\n  };\n\n  const statusBadge = (status) => {\n    if (status !== ProductStatus.Active) {\n      return (\n        <LegacyStack.Item>\n          <Badge status=\"warning\">{status}</Badge>\n        </LegacyStack.Item>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  const outOfStockBadge = (totalInventory) => {\n    if (totalInventory <= 0) {\n      return (\n        <LegacyStack.Item>\n          <Badge status=\"attention\">{'Out of Stock'}</Badge>\n        </LegacyStack.Item>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  const renderProductItem = (item: GqlProduct) => {",
                "filename": "web/src/@components/common/ProductSelectModal/ProductSelectModal.tsx",
                "start_index": 8382,
                "end_index": 11266,
                "start_line": 263,
                "end_line": 342,
                "max_line": 702,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n        //skip empty upsells\n        if (\n          (upsellItem.upsell.type === 'Product' && upsellItem.upsell?.products?.length === 0) ||\n          (upsellItem.upsell.type === 'Collection' && !upsellItem.upsell.collection)\n        )\n          return;\n\n        let atLeastOneTrigger = false;\n\n        if (upsellItem.trigger.on === 'all' || preview) {\n          atLeastOneTrigger = true;\n        } else {\n          //2.1 Search through every trigger to see if there is a match\n\n          if (upsellItem.trigger.selection.type === 'Product') {\n            upsellItem.trigger.selection.products.forEach((trigger) => {\n              const isTriggered = cartItems.some((cartItem) => {\n                let triggerId = trigger.id?.split('/')[4];\n                if (Number(cartItem.product_id) === Number(triggerId)) {\n                  // When the variants array is missing, we trigger on any variant for the product\n                  if (!trigger.variants) {\n                    return true;\n                    // when variants array is present, we trigger only on the variants specified\n                  } else if (\n                    //We need to check for both productId syntax since our storage is mixed\n                    trigger.variants.includes('gid://shopify/ProductVariant/' + cartItem.variant_id.toString()) ||\n                    trigger.variants.includes(cartItem.variant_id.toString())\n                  ) {\n                    return true;\n                  }\n                }\n                return false;\n              });\n              if (isTriggered) {\n                atLeastOneTrigger = true;\n              }\n            });\n          } else if (upsellItem.trigger.selection.type === 'Collection') {\n            const products = await platform.products.getProductByCollection({\n              handle: upsellItem.trigger.selection.collection.handle,\n            });\n\n            products.forEach((trigger: any) => {\n              const isTriggered = cartItems.some((cartItem) => {\n                let triggerId = trigger.id?.toString().replace('gid://shopify/Product/', '');\n                if (Number(cartItem.product_id) === Number(triggerId)) {\n                  return true;\n                }\n                return false;\n              });\n              if (isTriggered) {\n                atLeastOneTrigger = true;\n              }\n            });\n          }\n        }\n\n        //2.2 Expand each upsell product into seperate upsells",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 2117,
                "end_index": 4576,
                "start_line": 3,
                "end_line": 115,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<LegacyCard sectioned>\n              <LegacyStack wrap={false} distribution=\"center\">\n                <LegacyStack.Item>\n                  <Thumbnail source={initialValue.product.image} size=\"large\" alt={initialValue.product.title} />\n                </LegacyStack.Item>\n                <LegacyStack.Item fill>\n                  <LegacyStack spacing=\"extraTight\" vertical>\n                    <Text variant=\"bodyMd\" as=\"span\" fontWeight=\"semibold\">\n                      {initialValue.product.title}\n                    </Text>\n                    <Text variant=\"bodyMd\" as=\"span\" color=\"subdued\">\n                      {initialValue.product.bodyHtml}\n                    </Text>\n                  </LegacyStack>\n                </LegacyStack.Item>\n                <LegacyStack.Item>\n                  <Text variant=\"bodyMd\" as=\"span\" fontWeight=\"semibold\">\n                    <span\n                      dangerouslySetInnerHTML={{ __html: formatMoney(initialValue.product.price, currencyFormat) }}\n                    />\n                  </Text>\n                </LegacyStack.Item>\n              </LegacyStack>\n            </LegacyCard>\n          </div>\n        )}\n        <Button fullWidth primary onClick={() => setModalIsOpen(true)}>\n          {initialValue.product ? t('Change Product') : t('Select Product')}\n        </Button>\n      </LegacyStack>\n      <Formik initialValues={initialValue} onSubmit={saveProducts} enableReinitialize={true}>\n        {({ submitForm, values, setFieldValue: handleFieldChange }) => (\n          <Modal\n            noScroll={true}\n            open={modalIsOpen}\n            onClose={() => setModalIsOpen(false)}\n            title={t('Select Product Add-on')}\n            footer={\n              <Field\n                id=\"defaultBehavior\"\n                name=\"defaultBehavior\"\n                component={SwitchField}\n                text={t('Offer is accepted by default')}\n              />\n            }\n            primaryAction={{\n              content: t('Save'),\n              onAction: () => {\n                setModalIsOpen(false);\n                submitForm();\n              },\n              disabled: !values?.product?.id,\n            }}\n            secondaryActions={[\n              {\n                content: t('Cancel'),\n                onAction: () => setModalIsOpen(false),\n              },\n            ]}\n          >\n            <Modal.Section>\n              <div>\n                <LegacyStack vertical>\n                  <ProductsTable\n                    productsCallback={(products) => handleFieldChange('product', products)}\n                    onlyOneVariant\n                    defaultSelectedResource={initialSelectedProducts}\n                  />\n                </LegacyStack>\n              </div>\n            </Modal.Section>\n          </Modal>\n        )}\n      </Formik>\n    </div>\n  );\n};",
                "filename": "web/src/@templates/CartEditor/AddonsModule/components/ProductAddonSettings/ProductAddonSettings.tsx",
                "start_index": 2724,
                "end_index": 5576,
                "start_line": 74,
                "end_line": 150,
                "max_line": 150,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "wUpsellItemsAlreadyInCart: { type: 'boolean', value: false },\n    upsellsItems: {\n      type: 'json',\n      value: [\n        {\n          _id: '',\n          trigger: null,\n          upsell: null,\n        },\n      ],\n    },\n    upsellsModulePosition: { type: 'single_line_text_field', value: 'bottom' },\n    recommendedUpsells: { type: 'boolean', value: false },\n    upsellRecommendationIntent: { type: 'single_line_text_field', value: 'related' as UpsellRecommendationIntent },\n\n    // Addons Module\n    addonsModule: { type: 'boolean', value: false },\n    addonsField: {\n      type: 'json',\n      value: {\n        shippingProtection: {\n          active: false,\n          productHandle: null,\n          defaultBehavior: false,\n        },\n        productAddon: {\n          active: false,\n          productHandle: null,\n          product: null,\n          defaultBehavior: false,\n        },\n      },\n    },\n    addonsShouldBeCounted: { type: 'boolean', value: false },\n\n    // Notes Module\n    notesModule: { type: 'boolean', value: false },\n    notesTitle: { type: 'multi_line_text_field', value: '<p>Add special instructions</p>' },\n    notesPlaceholder: { type: 'single_line_text_field', value: 'Special instructions for your order' },\n    notesPlacement: { type: 'single_line_text_field', value: 'bottomOfCart' as NotesPlacement },\n\n    trustBadgesModule: { type: 'boolean', value: false },\n    trustBadges: {\n      type: 'json',\n      value: {\n        url: '',\n        position: 'bottom',\n      },\n    },\n\n    // Discount Code Module\n    discountCodeModule: { type: 'boolean', value: false },\n    discountCodePlaceholder: { type: 'single_line_text_field', value: 'Discount code' },\n    discountCodeButtonText: { type: 'single_line_text_field', value: 'Apply' },\n\n    // Subscription Upgrades Module\n    subscriptionUpgradesModule: { type: 'boolean', value: false },\n    subscriptionUpgradesPreventDowngrades: { type: 'boolean', value: false },\n    subscriptionUpgradesButtonText: { type: 'single_line_text_field', value: 'Upgrade to {{selling_plan_group_name}}' },\n\n    // Express Pay Buttons Module\n    expressPayModule: { type: 'boolean', value: false },\n    expressPayEnabledGateways: { type: 'json', value: [] },\n  },\n\n  sti",
                "filename": "common/defaultMetafields.ts",
                "start_index": 17911,
                "end_index": 20140,
                "start_line": 482,
                "end_line": 555,
                "max_line": 567,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const defaultSelectedProducts = useMemo(() => {\n    let defaultSelectedProducts: any = [];\n\n    let row = upsellItems.find((row) => row.id == currentId);\n    if (row) {\n      let productSelection: UpsellV2SelectedProducts | null;\n      if (productType === ProductType.TRIGGER) {\n        productSelection =\n          row.trigger.on === 'specific' && row.trigger.selection.type === 'Product' ? row.trigger.selection : null;\n      } else {\n        productSelection = row.upsell.type === 'Product' ? row.upsell : null;\n      }\n      //The row should always exist\n      if (productSelection) {\n        productSelection.products.forEach((product) => {\n          //Create the variant resource array\n          let variants = product?.variants?.map((variantId) => {\n            return {\n              id: 'gid://shopify/ProductVariant/' + variantId,\n            };\n          });\n\n          defaultSelectedProducts.push({\n            ...product,\n            variants: {\n              edges: variants?.map((variant) => {\n                return {\n                  node: variant,\n                };\n              }),\n            },\n          });\n        });\n      }\n    }\n    return defaultSelectedProducts;\n  }, [upsellItems, currentId, productType]);\n\n  const defaultCollection = useMemo(() => {\n    let row = upsellItems.find((row) => row.id == currentId);\n\n    if (row) {\n      return row[productType + 'Collection'];\n    }\n  }, [upsellItems, currentId, productType]);\n\n  const onSave = ({\n    products,\n    collection,\n    type,\n  }: {\n    products?: Product[];\n    collection?: Collection;\n    type: UpsellV2ResourceType;\n  }) => {\n    if (type === 'Product') {\n      let mappedProducts: Array<UpsellV2Product> = products?.map((product) => {\n        let item: UpsellV2Product = {\n          id: product.id,\n          shortId: product.id?.split('gid://shopify/Product/')[1],\n          variants: product.variants?.edges?.map(\n            (variant) => variant.node.id?.split('gid://shopify/ProductVariant/')[1],\n          ), //This may need to be the shortId\n          handle: product.handle,\n          title: product.title,\n          image: product.featuredImage?.url,\n        };\n        return item;\n      });\n      setProductField(mappedProducts);\n    } else if (type === 'Collection') {\n      setCollectionField(collection);\n    }\n\n    setShowResourcePickerModal(false);\n    setActiveModal(true);\n  };\n\n  return (\n    <div className={styles.UpsellsModule}>\n      <LegacyStack vertical spacing=\"baseTight\">\n        <Checkbox\n          label={t('Use AI Recommended upsells')}\n          checked={values.upcartEditorSettings.recommendedUpsells}\n          onChange={() => setRecommendedUpsells(values.upcartEditorSettings.recommendedUpsells)}\n        />\n        {values.upcartEditorSettings.recommendedUpsells && (\n          <Field\n            id=",
                "filename": "web/src/@templates/CartEditor/UpsellsModule/SelectProducts.tsx",
                "start_index": 5553,
                "end_index": 8389,
                "start_line": 174,
                "end_line": 262,
                "max_line": 320,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const addProductToCart = useCallback(\n    (id: number | string, properties: ItemToAddToCart['properties']) => {\n      platform.cart\n        .addItemToCart(\n          { variantId: Number(id), quantity: 1, properties: { ...properties, __upcartUpsell: id } },\n          { opensCart: AddToCartOpensCart.NEVER },\n        )\n        .then(() => {\n          platform.publicApi.upcartOnAddUpsell(String(id));\n          refetchCart();\n        })\n        .catch((e) => console.error(e));\n    },\n    [refetchCart, platform],\n  );\n\n  const upsellsToShow = useMemo(() => {\n    // Allow custom modification of upsells before display. This can include\n    // changing properties of the upsell products, or removing/adding products.\n    let finalUpsells = upsells;\n    try {\n      const modifiedUpsells = platform.publicApi.upcartModifyListOfUpsells(upsells);\n      if (Array.isArray(modifiedUpsells)) {\n        finalUpsells = modifiedUpsells;\n      }\n    } catch (e) {\n      console.error(e);\n      sentryCaptureException(e);\n    }\n\n    if (upsellsShouldLimit && Number(maximumUpsellsToShow) > 0) {\n      finalUpsells = finalUpsells.splice(0, Number(maximumUpsellsToShow));\n    }\n\n    return finalUpsells;\n  }, [platform, upsells, upsellsShouldLimit, maximumUpsellsToShow]);\n\n  return (\n    <div>\n      {upsellsToShow.length !== 0 && (\n        <PreviewCarousel\n          platform={platform}\n          items={upsellsToShow}\n          onAddProduct={addProductToCart}\n          cartIsLoading={cartIsLoading}\n        />\n      )}\n    </div>\n  );\n}",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 14865,
                "end_index": 16391,
                "start_line": 359,
                "end_line": 408,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "((product) => {\n          const triggeredUpsellProductsWithThisHandle: FetchedProductWithUpsellId[] = [];\n\n          /**\n           *  Remove products that can not be added to the cart\n           *\n           * \"available\" appears to do a few things\n           * 1. Checks the product status is \"active\"\n           * 2. Checks if the product is tracking inventory and if it is verify there is at least one product\n           *    OR \"continue selling when out of stock\" is true\n           */\n          if (!product?.available) return [];\n\n          //product.available does not check variants so we have to filter them seperately otherwise\n          //out of stock variants could potentially show\n          product.variants = product.variants.filter((p) => p.available);\n\n          // ---- START window.upcartOnRenderUpsell\n          // We need quotes \"\" around the handle because it might start with a number which would\n          // cause an invalid selector error when using document.querySelector if they weren't in quotes\n          const itemQuerySelector = `[href*=\"${handle}\"]`;\n          // Wrap in try/catch in case the query selector is invalid for some reason. We still want to render\n          // the upsell even if we can't find the element\n          try {\n            const handleALink = document.querySelector(itemQuerySelector);\n            const el = handleALink?.closest('li.slide');\n            platform.publicApi.upcartOnRenderUpsell(product, el);\n          } catch (err) {\n            console.log(`Unable to find product with querySelector(\"${itemQuerySelector}\"):`, err);\n            sentryCaptureException(err);\n          }\n          // ---- END window.upcartOnRenderUpsell\n\n          for (let upsellItem of triggeredUpsells) {\n            let upsell = upsellItem.upsell.products[0] || null;\n            if (upsell?.handle === handle) {\n              if (upsell.variants) {\n                // when variants array is present, we trigger only on the variants specified\n                const productWithOnlyTriggeredVariants = {\n                  ...product,\n                  variants: product.variants.filter((variant) => upsell.variants!.includes(String(variant.id))),\n                };\n                triggeredUpsellProductsWithThisHandle.push({\n                  upsellId: upsellItem.id,\n                  fetchedProduct: productWithOnlyTriggeredVariants,\n                });\n              } else {\n                // when the variants array is missing, we trigger on any variant for the product\n                triggeredUpsellProductsWithThisHandle.push({ upsellId: upsellItem.id, fetchedProduct: product });\n              }\n            }\n          }\n\n          // only include products that have at least one variant to show\n          const productsWithVariants = triggeredUpsellProductsWithThisHandle.filter(\n            ({ fetchedProduct }) => fetchedProduct.variants.length > 0,\n          );\n\n          return productsWithVariants;\n        })",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 7906,
                "end_index": 10880,
                "start_line": 195,
                "end_line": 369,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "useEffect(() => {\n    /**\n     * Remove the add-on product if all other products in the cart are removed.\n     *\n     * Similar logic used to be handled in the empty cart component, but this caused the cart\n     * to incorrectly empty when going back in the browser due to HTML caching of the Liquid-rendered\n     * upcartPreloadedCart.\n     */\n    if (!hasFetchedCart) return; // prevent clearing cart based on stale cart\n    const isEmptyCartWithLeftoverAddonProduct = cartIsVisuallyEmpty && hiddenCartItems.length > 0;\n    if (isEmptyCartWithLeftoverAddonProduct) {\n      platform.cart.clearCart().then(() => {\n        refetchCart();\n      });\n    }\n  }, [platform, refetchCart, cartIsVisuallyEmpty, hiddenCartItems, hasFetchedCart]);\n\n  useEffect(() => {\n    if (cartIsVisuallyEmpty) {\n      sessionStorageEngine.unset(['announcement_module_time']);\n    }\n  }, [cartIsVisuallyEmpty]);\n\n  const announcementModuleIfActive = useMemo(() => {\n    if (!settings.upcartEditorSettings.announcementModule) return null;\n    return <AnnouncementModule platform={platform} />;\n  }, [settings, platform]);\n\n  const upsellModuleMarkupIfActive = useMemo(() => {\n    if (!settings.upcartEditorSettings.upsellsModule) return null;\n    return (\n      <UpsellsModule\n        preview={preview || false}\n        platform={platform}\n        cart={cartToShow}\n        cartIsLoading={cartIsLoading}\n        refetchCart={refetchCart}\n      />\n    );\n  }, [settings, cartToShow, cartIsLoading, refetchCart, platform, preview]);\n\n  const { totalAfterAllDiscounts } = useCartTotal({ cart });\n\n  return (\n    <>\n      <GlobalStyles platform={platform} />\n      <div\n        id=\"CartPopup\"\n        className={`upcart-cart ${styles.CartPreview} ${styles['CartPreview__' + settings.upcartSettings.cartPosition]}\n      ${styles['CartPreview__position-' + styling.position]}\n        UpcartDesignSettings__backgroundColor ${platform.options.forceAlwaysOpen ? styles.active : ''}`}\n        style={\n          settings.upcartSettings.disableSticky\n            ? { overflowY: 'auto', height: styling.height }\n            : { height: styling.height }\n        }\n        // This is needed to allow the cart to scroll on mobile for some themes.\n        // See Linear issue BEAM-1504 for more details.\n        data-scrollable\n      >\n        {cartIsVisuallyEmpty ? (\n          <EmptyCart\n            refetchCart={refetchCart}\n            platform={platform}\n            cart={cartToShow}\n            closePopup={platform.eventHandlers.onCloseClick}\n            isAddingItemThatCausedCartToOpen={isAddingItemThatCausedCartToOpen}\n          />\n        ) : (\n          <div\n            className={clx(styles.CartPreview__card, {\n              [styles.CartPreview__card_nonSticky]: settings.upcartSettings.disableSticky,\n            })}\n          >",
                "filename": "web/storefront/src/modules/CartPopup/Cart.tsx",
                "start_index": 12884,
                "end_index": 15689,
                "start_line": 107,
                "end_line": 477,
                "max_line": 521,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "if (atLeastOneTrigger) {\n          if (upsellItem.upsell.type === 'Product') {\n            upsellItem.upsell.products.forEach((upsell) => {\n              // Skip upsell if product is already in cart, unless the merchant wants to show it anyway\n              const productIsInCart = cartItems.some((cartItem) => cartItem.handle === upsell.handle);\n              if (upsell.handle && (!productIsInCart || showUpsellItemsAlreadyInCart)) {\n                triggeredUpsellItems.push({\n                  ...upsellItem,\n                  upsell: {\n                    type: 'Product',\n                    products: [upsell],\n                  },\n                });\n              }\n            });\n          } else if (upsellItem.upsell.type === 'Collection') {\n            //Fetch all products in the collection - put each product into its own upsell\n            const products = await platform.products.getProductByCollection({\n              handle: upsellItem.upsell.collection.handle,\n            });\n\n            products.forEach((upsell: any) => {\n              const productIsInCart = cartItems.some((cartItem) => cartItem.handle === upsell.handle);\n              if (upsell.handle && (!productIsInCart || showUpsellItemsAlreadyInCart)) {\n                const upsellItemProduct: UpsellV2Product = {\n                  id: `gid://shopify/Product/${upsell.id}`,\n                  shortId: String(upsell.id),\n                  handle: upsell.handle,\n                  variants: undefined, // show all variants\n                  // The following fields aren't needed for this step since we will fetch the full\n                  // product details anyways\n                  image: '',\n                  title: '',\n                };\n                triggeredUpsellItems.push({\n                  ...upsellItem,\n                  upsell: {\n                    type: 'Product',\n                    products: [upsellItemProduct],\n                  },\n                });\n              }\n            });\n          }\n        }\n      }",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 4585,
                "end_index": 6608,
                "start_line": 116,
                "end_line": 383,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "export const CART_BUTTON_SELECTORS = [\n  PRIMARY_CART_BUTTON_SELECTOR,\n  'a[data-cart-toggle]',\n  \"#sticky-app-client div[data-cl='sticky-button']\",\n  'button.minicart-open',\n  '#cart-icon-bubble',\n  '.slide-menu-cart',\n\n  /**\n   * These two selectors have :not(svg) because these class names are sometimes used for\n   * SVG icons in other parts of the theme. See Linear issue BEAM-1362 for example.\n   *\n   * In general the actual cart opening icon is a div, span, li, or similar. It is not usually\n   * an SVG.\n   *\n   * If there is a case where the cart opening icon is an SVG and it has one of these class names,\n   * we should find a different unique selector for that case. Do not remove :not(svg) from these\n   * selectors.\n   */\n  '.icon-cart:not(svg)',\n  '.cart-icon:not(svg)',\n\n  /**\n   * DO NOT add this selector `.cart-button`. It will incorrectly select ATC buttons on some themes.\n   * This would prevent customers from adding items to the cart.\n   *\n   * See Linear issue BEAM-1447 for more details.\n   */\n  // '.cart-button', <--- BAD SELECTOR, BAD\n\n  '.cart-link:not(div.header-icons):not(ul)',\n  'button.header-cart-toggle',\n  'div.minicart__button',\n  'button.js-cart-button',\n  '.mini-cart-trigger',\n  \".shopping-cart a[href*='#cart']\",\n  '.header-menu-cart-drawer',\n  '.js-mini-cart-trigger',\n  '#CartButton-Desktop',\n  '#CartButton',\n];\n\nexport const ATC_FORM_SELECTOR = 'form[action*=\"/cart/add\"]';\n\n// for the add to cart buttons\nexport const ADD_TO_CART_BUTTON = [ATC_FORM_SELECTOR];\n\nexport const ADD_TO_CART_BUTTON_EXCEPTION = [\n  \"button[id*='so-btn-add-to-cart']\",\n  `${ATC_FORM_SELECTOR} input[data-btn-addtocart]`,\n  `${ATC_FORM_SELECTOR} input[id='product-add-to-cart']`,\n  `${ATC_FORM_SELECTOR} button[data-product-id]:not([data-checkout=\"checkout\"])`,\n  `${ATC_FORM_SELECTOR} button[data-checkout=\"cart\"]`,\n  `${ATC_FORM_SELECTOR} button[type='submit'][name='add']`,\n  `${ATC_FORM_SELECTOR} button[id='pre_order_custom']`,\n  `${ATC_FORM_SELECTOR} button[class='btn-addtocart']`,\n  `${ATC_FORM_SELECTOR} button[class='addtocart-js']`,\n  `${ATC_FORM_SELECTOR} div[class='addCart']`,\n  `${ATC_FORM_SELECTOR} button[class*='add-to-cart']`,\n  `${ATC_FORM_SELECTOR} button[class*='textboxAddToCartBtn']`,\n];\n\n// for ajax requests\nexport const CART_ADDED_ITEM_URLS = ['/cart/add'];\nexport const CART_UPDATE_WITHOUT_ADDING_URLS = ['/cart/change'];\n\nexport const CART_POPUP = 'CartPopup';\n\ninterface PriceFormat {\n  decimalSeparator: string | null;\n  thousandsSeparator: string;\n}\n\nexport const PRICE_FORMAT_TYPES: PriceFormat[] = [\n  { decimalSeparator: '.', thousandsSeparator: ',' },\n  { decimalSeparator: ',', thousandsSeparator: '.' },\n  { decimalSeparator: '.', thousandsSeparator: `'` },\n  { decimalSeparator: null, thousandsSeparator: '.' },\n  { decimalSeparator: null, thousandsSeparator: ',' },\n];\n\nexport const ADDON_ITEM_PROPERTY_KEY = '__upcartAddon';\nexport const AFTERSELL_UPSELL_PROPERTY_KEY = '__as_offer_id';",
                "filename": "web/storefront/src/constants/index.ts",
                "start_index": 3205,
                "end_index": 6156,
                "start_line": 75,
                "end_line": 157,
                "max_line": 163,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<Modal.Section>\n            <Layout>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={GiftCardMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Rewards Module\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Show rewards in the cart such as a free shipping bar!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={CheckoutMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Upsells Module\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Add seamless in-cart upsells to boost your sales!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={AddProductMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Add-ons Module\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Show an add-on such as shipping protection or another product!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={PaintBrushMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Customizations\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Our team will help you customize with trust badges and more!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneHalf>\n                <LegacyCard title=\"See previews below (click arrows to scroll)\" sectioned>\n                  <Carousel\n                    showArrows={true}\n                    showThumbs={false}\n                    showStatus={false}\n                    showIndicators={true}\n                    autoPlay={true}\n                    interval={7500}\n                    infiniteLoop={true}\n                    renderIndicator={(onClickHandler, isSelected, index, label) => {\n                      if (isSelected) {\n                        return (\n                          <li",
                "filename": "web/src/@components/common/ModuleUnlock/ModuleUnlock.tsx",
                "start_index": 2934,
                "end_index": 5930,
                "start_line": 91,
                "end_line": 166,
                "max_line": 295,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "export interface UpsellV2SelectedCollection {\n  type: 'Collection';\n  collection: UpsellV2Collection;\n}\n\n/**\n * This can represent either a single collection or a list of products.\n * The `type` field determines which one is used..\n */\nexport type UpsellV2SelectedResources = UpsellV2SelectedProducts | UpsellV2SelectedCollection;\n\nexport type UpsellV2ResourceType = UpsellV2SelectedProducts['type'] | UpsellV2SelectedCollection['type'];\n\ninterface UpsellV2TriggerAll {\n  on: 'all';\n}\n\ninterface UpsellV2TriggerSpecific<TriggerResourceType extends UpsellV2SelectedResources = UpsellV2SelectedResources> {\n  on: 'specific';\n  selection: TriggerResourceType;\n}\n\nexport type UpsellV2Trigger<TriggerResourceType extends UpsellV2SelectedResources = UpsellV2SelectedResources> =\n  | UpsellV2TriggerAll\n  | UpsellV2TriggerSpecific<TriggerResourceType>;\nexport type UpsellV2TriggerOn = UpsellV2TriggerAll['on'] | UpsellV2TriggerSpecific['on'];\n\nexport interface UpsellV2Item<\n  TriggerResourceType extends UpsellV2SelectedResources = UpsellV2SelectedResources,\n  UpsellType extends UpsellV2SelectedResources = UpsellV2SelectedResources,\n> {\n  id: string;\n  v: 2;\n  trigger: UpsellV2Trigger<TriggerResourceType>;\n  upsell: UpsellType;\n}\n\nexport type RewardTierProduct = Pick<Product, 'id' | 'featuredImage' | 'title' | 'priceRangeV2' | 'variants'>;\n\nexport interface GeolocationPricing {\n  id: string;\n  countryCodes: Array<string>;\n  exclude: boolean;\n  tiers: Array<string>;\n}\n\nexport interface RewardTier {\n  targetType: RewardsTargetType;\n  minAmount: string;\n  itemCount: string;\n  textBeforeReachingForCartTotal: string;\n  textBeforeReachingForItemCount: string;\n  rewardDescription: string;\n  products: RewardTierProduct[];\n}\n\nexport type TrustBadgePosition = 'bottom' | 'top';\n\ninterface TrustBadges {\n  url: string;\n  position: TrustBadgePosition;\n}\n\nexport interface TieredRewards {\n  tiers: Array<RewardTier>;\n  geoLocationPricing: GeolocationPricing[];\n  rewardsAutoConvertCurrency: boolean;\n  rewardsGeoLocationEnabled: boolean;\n}\n\ninterface AddonsField {\n  shippingProtection:\n    | {\n        active: boolean;\n        productHandle: string | null;\n        defaultBehavior: boolean;\n      }\n    | false; // false is the old default value\n  productAddon:\n    | {\n        active: boolean;\n        productHandle: string | null;\n        product?: {\n          /**\n           * If null, the first variant should be used.\n           * If an array, it should have one item which is the selected variant ID.\n           */\n          variants: string[] | null;\n\n          /**\n           * Editor settings\n           */\n          handle: string;\n          shortId: string;\n          id: string;\n          title: string;\n          bodyHtml: string | null;\n          price: string;\n          image: string | null;\n        };\n        defaultBehavior: boolean;\n      }\n    | false; // false is the old default value\n}",
                "filename": "common/defaultMetafields.ts",
                "start_index": 2914,
                "end_index": 5819,
                "start_line": 121,
                "end_line": 563,
                "max_line": 567,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "cartIsEnabled: { type: 'boolean', value: true },\n\n    // Design Settings\n    settingsModule: {\n      type: 'json',\n      value: {\n        fields: {\n          /**\n           * This field has changed to mean \"show strikethrough prices\". This means that we also show the strikethrough\n           * if there is a discount applied to an item, even if the item doesn't have a compare-at price.\n           */\n          compareAtPrice: true,\n          inheritFonts: true,\n          backgroundColor: '#FFFFFF',\n          cartAccentColor: '#f6f6f7',\n          buttonColor: '#000000',\n          buttonTextColor: '#FFFFFF',\n          buttonTextHoverColor: '#e9e9e9',\n          cartTextColor: '#000000',\n        },\n      },\n    },\n\n    // Announcements Module\n    announcementModule: { type: 'boolean', value: false },\n    announcementEditor: {\n      type: 'multi_line_text_field',\n      value: '<p>Your products are reserved for <b>{TIMER}</b> minutes!</p>',\n    },\n    announcementBackgroundColor: { type: 'single_line_text_field', value: '#CDE0E0' },\n    announcementModulePosition: { type: 'single_line_text_field', value: 'top' },\n    announcementBorderColor: { type: 'single_line_text_field', value: '#C5E6FD' },\n    announcementTimer: { type: 'single_line_text_field', value: '00:00' },\n\n    // Rewards Module\n    rewardsModule: { type: 'boolean', value: false },\n    rewardsBarBackgroundColor: { type: 'single_line_text_field', value: '#E2E2E2' },\n    rewardsBarForegroundColor: { type: 'single_line_text_field', value: '#93D3FF' },\n    rewardsBasis: { type: 'single_line_text_field', value: 'cartTotal' },\n    rewardsTargetType: { type: 'single_line_text_field', value: 'productsOrOrder' },\n    rewardsMinAmount: { type: 'single_line_text_field', value: '125' },\n    rewardsEditor: {\n      type: 'multi_line_text_field',\n      value: '<p>You\u2019re <b>{AMOUNT}</b> away from free shipping!</p>',\n    },\n    rewardsEditorAfterText: { type: 'multi_line_text_field', value: 'Free shipping unlocked!' },\n    rewardsEditorForItemCount: {\n      type: 'multi_line_text_field',\n      value: '<p>You\u2019re <b>{COUNT}</b> products away from free shipping!</p>',\n    },\n    rewardsItemCount: { type: 'single_line_text_field', value: '5' },\n    rewardsTiers: {\n      type: 'json',\n      value: { tiers: [], geoLocationPricing: [], rewardsAutoConvertCurrency: false, rewardsGeoLocationEnabled: false },\n    },\n    rewardsTierProducts: { type: 'json', value: [] },\n    rewardsShowIconWithSingleTier: { type: 'boolean', value: false },\n\n    // Upsells Module\n    upsellsModule: { type: 'boolean', value: false },\n    upsellsDirection: { type: 'single_line_text_field', value: 'horizontal' },\n    upsellsTitle: { type: 'multi_line_text_field', value: \"You'll love these\" },\n    maximumUpsellsToShow: { type: 'single_line_text_field', value: '10' },\n    upsellsShouldLimit: { type: 'boolean', value: false },\n    upsellsTrigger: { type: 'boolean', value: false },\n    sho",
                "filename": "common/defaultMetafields.ts",
                "start_index": 14968,
                "end_index": 17911,
                "start_line": 417,
                "end_line": 482,
                "max_line": 567,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{onClickHandler}\n                          ></Button>\n                        </div>\n                      )\n                    }\n                  >\n                    <div>\n                      <p className={styles.captionWrapper}>Rewards module preview</p>\n                      <img src=\"https://firebasestorage.googleapis.com/v0/b/dhruv-41f3f.appspot.com/o/ezgif-4-ecad58ffc6.gif?alt=media&token=b79d3e34-e2d5-4d0f-9c2a-8810319573a6\" />\n                    </div>\n                    <div>\n                      <p className={styles.captionWrapper}>Upsell module preview</p>\n                      <img src=\"https://firebasestorage.googleapis.com/v0/b/dhruv-41f3f.appspot.com/o/ezgif-1-9068104da6.gif?alt=media&token=06edd6d8-0d46-4c9a-873a-4b1465546500\" />\n                    </div>\n                    <div>\n                      <p className={styles.captionWrapper}>Add-ons module preview</p>\n                      <img src=\"https://firebasestorage.googleapis.com/v0/b/dhruv-41f3f.appspot.com/o/upcart-3.gif?alt=media&token=86c70680-89a8-4eca-b9af-4a0e96b11a37\" />\n                    </div>\n                    <div>\n                      <p className={styles.captionWrapper}>Customizations preview</p>\n                      <img src=\"https://firebasestorage.googleapis.com/v0/b/dhruv-41f3f.appspot.com/o/upcart-4.gif?alt=media&token=d061bcbe-7f9e-45f3-bcb3-fcebf528e077\" />\n                    </div>\n                  </Carousel>\n                </LegacyCard>\n              </Layout.Section>\n            </Layout>\n          </Modal.Section>\n        </Modal>\n      )}\n      {stickyModal && (\n        <Modal\n          open={active}\n          onClose={() => {\n            setActive(false);\n          }}\n          title=\"Upgrade to unlock sticky cart\"\n          primaryAction={{\n            content: 'Start your 7 day free trial',\n            loading: acceptBillingLoading,\n            onAction: () => acceptBillingPlan('GROWTH_FLAT_1499_PLUS_USAGE_TO_19999'),\n          }}\n        >\n          <Modal.Section>\n            <Layout>\n              <Layout.Section oneHalf>\n                <LegacyCard title=\"Here's the sticky cart button in action (see bottom right)\" sectioned>\n                  <div>\n                    <img\n                      className={styles.ModalImg}\n                      src=\"https://firebasestorage.googleapis.com/v0/b/upcart-ce87f.appspot.com/o/Sticky%20Cart%20Button%20Demo.gif?alt=media&token=4cd99b51-dc1d-427e-94a0-629cd31716e0\"\n                      alt=\"StickyCartGif\"\n                    />\n                  </div>\n                </LegacyCard>\n              </Layout.Section>\n            </Layout>\n          </Modal.Section>\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default ModuleUnlock;",
                "filename": "web/src/@components/common/ModuleUnlock/ModuleUnlock.tsx",
                "start_index": 8694,
                "end_index": 11440,
                "start_line": 188,
                "end_line": 295,
                "max_line": 295,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n                    title: t('Activate UpCart'),\n                    description: t(`Activate the UpCart app embed block in your Theme editor. Find it in Theme settings > App embeds. Don't forget to press save.`), // prettier-ignore\n                    badge: {\n                      children: themeData?.theme && !themeData.theme.embedEnabled ? t('Required') : t('Completed'),\n                      status: themeData?.theme && !themeData.theme.embedEnabled ? t('critical') : t('success'),\n                    },\n                    action: {\n                      content: t('Open Theme Settings'),\n                      onAction: () => {\n                        window.open(themeEditorDeepLink, '_blank').focus();\n                      },\n                    },\n                  },\n                  {\n                    title: t('Match your brand design'),\n                    badge: designChanged\n                      ? {\n                          children: t('Completed'),\n                          status: t('success'),\n                        }\n                      : undefined,\n                    description: t('UpCart comes with great defaults but every brand is different. Hop into the cart editor and use the design options to match your brand.'), // prettier-ignore\n                    action: {\n                      content: t('Open Cart Editor'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=design`);\n                      },\n                    },\n                  },\n                  {\n                    title: t('Add Upsells'),\n                    badge: {\n                      children: editorData.upsellsModule ? t('Completed') : t('Recommended'),\n                      status: editorData.upsellsModule ? t('success') : t('info'),\n                    },\n                    description: t(\"Boost your AOV by using UpCart's high converting upsell offers. Head over to the cart editor to add upsells to your cart drawer.\"), // prettier-ignore\n                    action: {\n                      content: t('Add Upsells'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=upsells`);\n                      },\n                    },\n                  },",
                "filename": "web/src/@templates/Home/Home.tsx",
                "start_index": 5120,
                "end_index": 7444,
                "start_line": 1,
                "end_line": 222,
                "max_line": 260,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "if (recommendedUpsells) {\n      Promise.all(\n        cartItemsId.map((id) =>\n          platform.products.getRecommendedProducts({\n            productIdToRecommendFrom: id,\n            limit: 8,\n            intent: upsellRecommendationIntent,\n          }),\n        ),\n      ).then((products) => {\n        if (cancelled.isCancelled) return;\n\n        const recommendedProduct = (uniqBy(\n          reduce(products, (acc: any, productArray: any) => [...acc, ...productArray], []),\n          'id',\n        ) as unknown) as Product[];\n        const filteredRecommendedProduct = showUpsellItemsAlreadyInCart\n          ? [...recommendedProduct]\n          : recommendedProduct.filter((item) => !cartItemsId.includes((item as any).id));\n\n        //Remove products that can not be added to the cart\n        const availableProducts = filteredRecommendedProduct.filter((product: any) => {\n          if (!product?.available) return false;\n\n          //product.available does not check variants so we have to filter them seperately otherwise\n          //out of stock variants could potentially show\n          product.variants = product.variants.filter((p: any) => p.available);\n\n          return true;\n        });\n\n        setUpsells(availableProducts);\n      });\n    }",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 11335,
                "end_index": 12588,
                "start_line": 268,
                "end_line": 391,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "initial_doc_snippets": [
            {
                "code": "# Specification: Subscription Upgrades\n\n## Editor\n\nThere should be a module in the editor with:\n\n- Name: \"Subscription Upgrades\"\n- Icon: Repeat Order\n- Default status: disabled\n- Settings:\n  - \"Prevent downgrades\"\n    - Help text: \"If enabled, customers will not be allowed to downgrade from a subscription to one-time purchase. Caution: this may increase cart abandonment.\"\n    - Type: checkbox\n    - Default: disabled\n\n## Cart\n\n> If the subscription upgrades module is disabled in the editor, the cart should skip all subscription upgrade functionality.\n>\n> The following cart specification is applicable only if the subscription upgrades module has been enabled in the editor.\n\n### Behaviour\n\nThe cart frontend for subscription upgrades should be isolated to an area below each line item. This area can include content, or can be omitted if there is nothing to show. If the area includes content, then the area should have:\n\n- Public CSS class: `.upcart-subscription-upgrade-section`\n- Styling: full-width of line item\n\nThe content of each subscription upgrade area should be independent of the content for the subscription areas for any other line items.\n\nThe content of the subscription upgrade area should be as follows:\n\nA. For **one-time purchase** line items:\n\n- If the item cannot be sold as a subscription, nothing should be shown.\n- If the item can be sold as a subscription:\n  - There should be a button with:\n    - Content: \"Upgrade to \\_\\_\\_\\_\", where \\_\\_\\_\\_ is the name of the first selling plan group for the item\n    - When clicked:\n      1. Show a loading spinner instead of text, and disable the button\n      2. Change the item to be a subscription with the first selling plan of the first selling plan group. The line item should have the property `__upcartSubscriptionUpgrade: \"true\"`\n    - Styling: full width of area, match to other buttons in cart\n    - Public CSS class: `.upcart-subscription-upgrade-button`\n\nB. For **subscription** line items:\n\n- There should be a dropdown with:\n  - Content: the name of the current selling plan\n  - Options:\n    - (OPTIONAL) A group with:\n      - Title: \"Full price\"\n      - Options:\n        - \"One-time purchase\"\n      - Condition: this group should be included if the \"Prevent downgrades\" setting is disabled AND the item does not _require_ a selling plan (i.e., it can be sold as a one-time purchase)\n    - A group for each possible selling plan group for the item with:\n      - Title: the name of the selling plan group\n      - Options: the names of the possible selling plans in the group for the item\n  - When selected:\n    1. Show a loading spinner overlayed on the dropdown and disable the dropdown\n    2. Change the selling plan of the item to the selected selling plan. If \"One-time only\" was selected, then remove the selling plan from the item to change it to a one-time purchase. The line item should have the property `__upcartSubscriptionEdit: \"true\"`\n  - Styling: full width of area, match to other dropdowns in cart\n  - Public CSS class: `.upcart-subscription-upgrade-dropdown`\n\nWhen the current purchase option for a line item changes, the content of the subscription upgrade area should be updated to match the new purchase option.\n\n### Edge Cases and Clarifications\n\n- The content of the subscription upgrade area does not depend on _how_ the purchase option was selected. For example, the subscription upgrade area content for an item that was added to the cart as a subscription should be the same as the content for an item that was upgraded from a one-time purchase to a subscription in-cart.\n- When selling plans are being loaded for a product, there should be no content in the subscription upgrade area. Before the selling plans are loaded, we can't fully decide what content to show so it's fine to show nothing.\n- When the selling plan of an item is changed, the quantity of the item should remain constant. If you don't provide a quantity to the AJAX API when changing a line item, then the quantity of the line item will be set to 1 which should be avoided.\n- Selling plans that do not apply to the selected variant for a line item should be ignored. It is possible to have selling plans that apply only to specific variants of a product. In cases where none of the selling plans from a selling plan group apply to the variant for the line item, the selling plan group should be ignored. An ignored group should not be listed in the dropdown (because it would be an empty section) and it should not be used for text of the upgrade button (because it would have no selling plan to select).",
                "filename": "docs/subscription-upgrades.md",
                "start_index": 0,
                "end_index": 4584,
                "start_line": 1,
                "end_line": 71,
                "max_line": 71,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "---\nid: 3vst4bcr\ntitle: Discount Codes Module\nfile_version: 1.1.3\napp_version: 1.18.31\n---\n\n# Required background information\n\n## Discount types\n\nThere are two types of discounts: **automatic discounts** and **discount codes**.\n\n- **Automatic discounts** are applied to a cart or checkout automatically when the discount criteria are met.\n\n- **Discount codes** must be manually typed in by the customer. They stay active until the customer either removes the code, enters a different conflicting discount code, or changes their cart/checkout so that the discount is not longer applicable.\n\nThis module is specifically for **discount codes**. We do not have to worry about **automatic discounts** because they will work in the cart by default and they do not require any user interaction.\n\n## Discount targets\n\nA discount can be used to reduce the cost of **product(s)**, **order**, or **shipping**.\n\n- **Product discounts** reduce the price of one or more products and are shown as a reduction on individual line items.\n\n- **Order discounts** reduce the price of the order as a whole and are shown as a reduction on the overal price.\n\n- **Shipping discounts** reduce the price of shipping.\n\n# Read and write discount codes\n\n## Read discount codes\n\nWe read discount codes using the `cart.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:78:24:26:`    const cart: Cart&lt;CartItemWithoutCompareAtPrice&gt; = await fetch(getShopifyRoutesRoot() + &#39;cart.js&#39;).then((res) =&gt;`\"/> Ajax API endpoint.\n\nAn applied discount code will be returned from the API as part of either the `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> or the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/>. The `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> are for order discounts and the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/> are for product discounts.\n\nThese discount applications will include both **automatic discounts** and **discount codes**. We can distinguish between these using the `type`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:460:1:1:`  type: &#39;discount_code&#39; | &#39;&#39;;`\"/> field of the `DiscountApplication`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:446:4:4:`export interface DiscountApplication {`\"/>.\n\n## Apply a discount code\n\n<br/>\n\nWe apply a discount code by making a request from the storefront to the route `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/>.\n\nThe `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/> route is intended by Shopify to be used for [shareable discount links](https://help.shopify.com/en/manual/discounts/managing-discount-codes#promote-a-discount-using-a-shareable-link). Normally a customer would navigate to the link directly in their browser and would be redirected to the storefront. We are using it in a non-standard way by making a background network request.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n23         await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);\n```\n\n<br/>\n\nAfter applying a discount code, we refetch the cart to check if the discount was successfully applied and to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/DiscountCodeModule/DiscountCodeModule.tsx\n\n```tsx\n23           await platform.discounts.attemptApplyDiscountCode({ discountCode: discountCodeToApply });\n24           const updatedCart = await refetchCart();\n25\n26           const discountApplications = getAllUniqueDiscountApplications(updatedCart);\n27           const isValid = discountApplications.some(\n28             (discountApplication) => discountApplication.title === discountCodeToApply,\n29           );\n```\n\n<br/>\n\n## Remove a discount code\n\n<br/>\n\nWe remove a discount code by applying a fake invalid discount code.\n\nThere is no native way to remove discount codes so this is a workaround.\n\nThis behaviour relies on the fact that there can only be one discount code applied in the cart. We are replacing the one allowed discount code with an invalid code.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n14       async removeDiscountCode(): Promise<void> {\n15         const FAKE_INVALID_DISCOUNT_CODE = '~!~!UPCART_REMOVE_DISCOUNT!~!~';\n16         await this.UNSAFE_POSSIBLE_NO_OP_applyDiscountCodeAndSetShopifyCookie({ discountCode: FAKE_INVALID_DISCOUNT_CODE });\n17       }\n```\n\n<br/>\n\nAfter removing a discount code, we refetch the cart to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/components/DiscountCodeBadge/DiscountCodeBadge.tsx\n\n```tsx\n18         await platform.discounts.removeDiscountCode();\n19         await refetchCart();\n```\n\n<br/>\n\n> \u26a0\ufe0f After we apply or remove a discount code, the `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> of discounted line items will change. If we did not refetch the cart then we would have an outdated `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> value which would cause errors if we tried to call `cart/update.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:191:17:21:`    return fetchQd(this.ajaxMutationCartQ, getShopifyRoutesRoot() + &#39;cart/update.js&#39;, {`\"/> or `cart/change.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:153:8:12:`      getShopifyRoutesRoot() + `cart/change.js?${query.toString()}`,`\"/>.\n\n# Limitations\n\n## **Multiple** discount codes are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n50                     Multiple discount codes are not supported.\n```\n\n<br/>\n\n### Why are multiple discount codes not supported?\n\nWe cannot apply multiple discount codes because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support multiple codes. This is the only way that we know of to apply a discount code from the storefront. We will have to wait for Shopify to add support for multiple codes or to find a different way to apply codes which does support multiple.\n\nIf a customer applies two discount codes back to back, the first discount code will be discarded and only use the most recently applied code will affect the cart.\n\n## Free shipping discounts are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n58                   Free shipping discounts are not supported.\n```\n\n<br/>\n\n### Why are free shipping discounts not supported?\n\nWe cannot apply free shipping discounts because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support them.\n\n## Shopify Plus stores using checkout.liquid are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n64                   Shopify Plus stores using checkout.liquid are not supported.\n```\n\n<br/>\n\n### Why are Shopify Plus stores using checkout.liquid not supported?\n\nHistorically, the Ajax API only included automatic discounts and did not include discount codes. Shopify changed this behaviour and started including discounts from discount codes in Ajax API responses. There are still some stores which do not include discount codes in Ajax API responses. The discount codes module does not work on these stores.\n\n### How can we tell if a store is eligible?\n\nThe Ajax API will include discount codes in responses only if the store is on Shopify's new checkout.\n\n<br/>\n\nWe can identify wether or not a store is on Shopify's new checkout by looking at the cart token. If the cart token is 32 characters long and only includes hex digits (0123456789abcdef) then the store is on Shopify's old checkout, otherwise it is on Shopify's new checkout and the Ajax API will include discount codes in responses.\n\nStores that are on Shopify's new checkout may have different token formats. The following are examples that we've seen:\n\n- c1-d3f024e3af037f40bfe1b016b5b76f05\n- Z2NwLXVzLWNlbnRyYWwxOjAxSEZFMjFIV1FZUFc0SlQ3Q00ySFFSSjgy\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart({ cart }: { cart: Cart<CartItem> }): boolean {\n6          if (!cart.token) return false;\n7          const isLegacyCartToken = cart.token.match(/^[0-9a-f]{32}$/) !== null;\n8          return !isLegacyCartToken;\n9        }\n```\n\n<br/>\n\n### What happens if a store is not eligible?\n\n<br/>\n\nIf a store is not eligible then the discount code module will not be shown.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/Cart.tsx\n\n```tsx\n499                      {platform.discounts.getStoreCanApplyDiscountCodesInCart({ cart }) &&\n500                        settings.upcartEditorSettings.discountCodeModule && (\n501                          <DiscountCodeModule platform={platform} refetchCart={refetchCart} />\n502                        )}\n```\n\n<br/>\n\nIn the preview we will show the discount code module even for stores that are not eligible. We do this because it would require a lot of work to check eligibility when not on the storefront.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/platform/preview/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart(args: { cart: Cart<CartItem> }): boolean {\n6          return true;\n7        }\n```\n\n<br/>\n\nThis file was generated by Swimm. [Click here to view it in the app](https://app.swimm.io/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr).",
                "filename": ".swm/discount-codes-module.3vst4bcr.sw.md",
                "start_index": 0,
                "end_index": 11446,
                "start_line": 1,
                "end_line": 231,
                "max_line": 231,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>UpCart Loading...</title>\n    <script>\n      /*\n       * Constants\n       */\n      const INSTALL_SOURCE_QUERY_PARAM = 'via';\n      const COOKIE_LIFETIME_MS = 3 * 24 * 60 * 60 * 1000; // 3 days\n      const COOKIE_NAME = 'upcart_install_source';\n\n      /*\n       * 1. Get the ?via= query for the following steps\n       */\n      const installSource = encodeURIComponent(\n        new URLSearchParams(window.location.search).get(INSTALL_SOURCE_QUERY_PARAM),\n      );\n\n      /*\n       * 2. Set a cookie with the install source for 3 days so we can read it when they install the app\n       */\n      const cookieDomain = '.' + window.location.hostname;\n      const cookieExpiresDate = new Date();\n      cookieExpiresDate.setTime(cookieExpiresDate.getTime() + COOKIE_LIFETIME_MS);\n      const cookieExpires = cookieExpiresDate.toGMTString();\n      document.cookie = `${COOKIE_NAME}=${installSource}; expires=${cookieExpires}; domain=${cookieDomain}; path=/; SameSite=None; Secure`;\n\n      /*\n       * 3. Redirect to the app store, including the install source as a query param for App Store Google Analytics\n       */\n      window.location.replace(`https://apps.shopify.com/upcart-cart-builder?join-via=${installSource}`);\n    </script>\n  </head>\n  <body></body>\n</html>",
                "filename": "web/public/join.html",
                "start_index": 0,
                "end_index": 1304,
                "start_line": 1,
                "end_line": 36,
                "max_line": 36,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# UpCart 3.0\n\n## Setup\n\nView setup instructions on Notion: https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 133,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Security Policy\n\n## Supported versions\n\n### New features\n\nNew features will only be added to the master branch and will not be made available in point releases.\n\n### Bug fixes\n\nOnly the latest release series will receive bug fixes. When enough bugs are fixed and its deemed worthy to release a new gem, this is the branch it happens from.\n\n### Security issues\n\nOnly the latest release series will receive patches and new versions in case of a security issue.\n\n### Severe security issues\n\nFor severe security issues we will provide new versions as above, and also the last major release series will receive patches and new versions. The classification of the security issue is judged by the core team.\n\n### Unsupported Release Series\n\nWhen a release series is no longer supported, it's your own responsibility to deal with bugs and security issues. If you are not comfortable maintaining your own versions, you should upgrade to a supported version.\n\n## Reporting a bug\n\nAll security bugs in shopify repositories should be reported to [our hackerone program](https://hackerone.com/shopify)\nShopify's whitehat program is our way to reward security researchers for finding serious security vulnerabilities in the In Scope properties listed at the bottom of this page, including our core application (all functionality associated with a Shopify store, particularly your-store.myshopify.com/admin) and certain ancillary applications.\n\n## Disclosure Policy\n\nWe look forward to working with all security researchers and strive to be respectful, always assume the best and treat others as peers. We expect the same in return from all participants. To achieve this, our team strives to:\n\n- Reply to all reports within one business day and triage within two business days (if applicable)\n- Be as transparent as possible, answering all inquires about our report decisions and adding hackers to duplicate HackerOne reports\n- Award bounties within a week of resolution (excluding extenuating circumstances)\n- Only close reports as N/A when the issue reported is included in Known Issues, Ineligible Vulnerabilities Types or lacks evidence of a vulnerability\n\n**The following rules must be followed in order for any rewards to be paid:**\n\n- You may only test against shops you have created which include your HackerOne YOURHANDLE @ wearehackerone.com registered email address.\n- You must not attempt to gain access to, or interact with, any shops other than those created by you.\n- The use of commercial scanners is prohibited (e.g., Nessus).\n- Rules for reporting must be followed.\n- Do not disclose any issues publicly before they have been resolved.\n- Shopify reserves the right to modify the rules for this program or deem any submissions invalid at any time. Shopify may cancel the whitehat program without notice at any time.\n- Contacting Shopify Support over chat, email or phone about your HackerOne report is not allowed. We may disqualify you from receiving a reward, or from participating in the program altogether.\n- You are not an employee of Shopify; employees should report bugs to the internal bug bounty program.\n- You hereby represent, warrant and covenant that any content you submit to Shopify is an original work of authorship and that you are legally entitled to grant the rights and privileges conveyed by these terms. You further represent, warrant and covenant that the consent of no other person or entity is or will be necessary for Shopify to use the submitted content.\n- By submitting content to Shopify, you irrevocably waive all moral rights which you may have in the content.\n- All content submitted by you to Shopify under this program is licensed under the MIT License.\n- You must report any discovered vulnerability to Shopify as soon as you have validated the vulnerability.\n- Failure to follow any of the foregoing rules will disqualify you from participating in this program.\n\n** Please see our [Hackerone Profile](https://hackerone.com/shopify) for full details\n\n## Receiving Security Updates\n\nTo recieve all general updates to vulnerabilities, please subscribe to our hackerone [Hacktivity](https://hackerone.com/shopify/hacktivity)",
                "filename": "SECURITY.md",
                "start_index": 0,
                "end_index": 4160,
                "start_line": 1,
                "end_line": 59,
                "max_line": 59,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "## Dev Setup\n\nFollow the [instructions in this Notion document](https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7?pvs=4) to setup the development environment for the Chrome extension.",
                "filename": "chrome-extensions/cart-customization/README.md",
                "start_index": 0,
                "end_index": 208,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "MIT License\n\nCopyright (c) 2021 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
                "filename": "extensions/theme-app-extension/LICENSE.md",
                "start_index": 0,
                "end_index": 1063,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# [[[ --- STAGE: BASE ENVIRONMENT SETUP --- ]]]\n# see https://github.com/moby/moby/issues/37345#issuecomment-400250849\nFROM node:18.16.1-alpine as base\n# Accept command line '--build-arg' arguments\nARG PORT=8081\nARG HOST\nARG SHOPIFY_API_KEY\nARG INTERCOM_APP_ID\nARG SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY\n\n# Copy command line args to env to use during build and for final image runtime\nENV PORT=${PORT} \\\n    HOST=${HOST} \\\n    SHOPIFY_API_KEY=${SHOPIFY_API_KEY} \\\n    INTERCOM_APP_ID=${INTERCOM_APP_ID}\n    # ^^^^^ WARNING ^^^^^ do not include trailing \"\\\" on the last line above, you will get a syntax error with a terrible error message\n    #\n    # SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY is intentionally not included here since it is only for building and shouldn't be available at runtime\n\n# [[[ --- STAGE: BUILD --- ]]]\nFROM base AS build\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nCOPY web/patches ./web/patches\nRUN yarn install --cwd web --frozen-lockfile --production=false\nCOPY . .\n# NOTE: we need Sentry API token to upload source maps to Sentry during build, see withSentryConfig in next.config.js\nRUN echo \"[auth]\\ntoken=${SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY}\" > ./web/.sentryclirc\nRUN yarn web:build\n\n# [[[ --- STAGE: LICENSES WEB --- ]]]\nFROM base AS licenses-web\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web > ./web/public/licenses/web.txt\n\n# [[[ --- STAGE: LICENSES STOREFRONT --- ]]]\nFROM base AS licenses-storefront\nWORKDIR /app\nCOPY web/storefront/package.json web/storefront/yarn.lock ./web/storefront/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web/storefront > ./web/public/licenses/storefront.txt\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM base\nWORKDIR /app\nCOPY --from=build /app .\nCOPY package.json ./package.json\nRUN yarn install --frozen-lockfile --production=true\nCOPY --from=licenses-web /app/web/public/licenses/web.txt ./web/public/licenses/web.txt\nCOPY --from=licenses-storefront /app/web/public/licenses/storefront.txt ./web/public/licenses/storefront.txt\nCMD [\"yarn\", \"web:start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2181,
                "start_line": 1,
                "end_line": 53,
                "max_line": 53,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { Shop, ShopModel } from '../modules/shops/shops.model';\nimport { RequestWithShop } from '../types/express.types';\nimport Shopify from '@shopify/shopify-api';\n\nexport const getShopDocFromRequest = async (req: RequestWithShop): Promise<Shop> => {\n  if (req.shopDoc) {\n    return req.shopDoc;\n  }\n\n  const shop = Shopify.Utils.sanitizeShop(req.query.shop as string);\n  const shopDoc = await ShopModel.findOne({ domain: shop }).lean();\n  req.shopDoc = shopDoc;\n  return shopDoc;\n};",
                "filename": "web/server/helpers/getShopDocFromRequest.ts",
                "start_index": 0,
                "end_index": 485,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "The starting point for this repository was created using the Shopify CLI, commit\nf5d560da33aafae0b552de72a90f1320d1023524. Some boilerplate code from the CLI\nremains and is licensed as follows:\n\"\"\"\nMIT License\n\nCopyright (c) 2018 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\"",
                "filename": "LICENSE.md",
                "start_index": 0,
                "end_index": 1265,
                "start_line": 1,
                "end_line": 26,
                "max_line": 26,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<html></html>",
                "filename": "web/storefront/public/index.html",
                "start_index": 0,
                "end_index": 13,
                "start_line": 1,
                "end_line": 1,
                "max_line": 1,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.\\\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can\u2019t go back!**\n\nIf you aren\u2019t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you\u2019re on your own.\n\nYou don\u2019t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn\u2019t feel obligated to use this feature. However we understand that this tool wouldn\u2019t be useful if you couldn\u2019t customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n\n### Code Splitting\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\n\n### Analyzing the Bundle Size\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\n\n### Making a Progressive Web App\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\n\n### Advanced Configuration\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\n\n### Deployment\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\n\n### `npm run build` fails to minify\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)",
                "filename": "web/storefront/README.md",
                "start_index": 0,
                "end_index": 3354,
                "start_line": 1,
                "end_line": 70,
                "max_line": 70,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "intial_documentation_sources": {
            "shopify": {
                "collection": "shopify_documentation",
                "reason_for_relevance": "The issue involves a product selection modal which is likely part of a Shopify store's user interface. Shopify's API reference and templating documentation may contain necessary information on how product variants are handled, how modals interact with cart functionality, and guidance on expected behavior for product selections, which is relevant to solving the issue."
            }
        },
        "external_documentation_snippets": {
            "external_shopify": [
                {
                    "code": "Overview\n Combined listings\n Product recommendations\n Media and images\n Gift cards\n Support product variants\n Products can be broken up into a maximum of three options, and a single combination of those options is a variant. For example, if a t-shirt comes in sizes S, M, and L, and colors Black, White, and Red, then S/Black would be a variant of that product.\n In this tutorial, you'll learn how to support product variants in your theme.\n Resources\n To support product variants, you'll use the following:\n The product object\n The variant object\n Implementing product variants\n To support variants in your theme, you need to implement the following components:\n Variant deep link handling: A variant can be linked to directly, so you should ensure that the product information is updated for the \"selected\" variant when a variant is referenced in a product link.\n Variant selectors: You should build a variant selector to allow customers to easily browse the available variants of a product. Selecting a variant should update the page with variant-specific information.\n You might want to add these components to a section that can be included in a JSON product template, or a Liquid product template.\n Variant deep link handling\n Variant deep links are product links that contain a ?variant=[variant-id] query parameter, where [variant-id] is the ID of the associated variant. This allows you to link directly to a variant. You can add this functionality to a section that can be included in a JSON product template, or a Liquid product template.\n When variants are deep-linked, you can access which variant is linked through the selected_variant attribute of the product object. However, a product link won't always contain a deep-linked variant. In these cases, you can default to the selected, first available, or first variant through the selected_or_first_available_variant attribute.\n After you identify the variant that you want to display, you need to ensure that the following product elements reflect it:\n Product media\n Product price\n Variant selector\n Example\n The following example assigns a default variant using product.selected_or_first_available_variant, populates a basic media and price display based on that variant, and selects that variant in a basic variant selector.\n 1 {% assign current_variant = product.selected_or_first_available_variant %}\n 2\n 3 <!-- Product media -->\n 4 {% assign featured_media = current_variant.featured_media %}\n 5\n 6 {% case featured_media.media_type %}\n 7\n    {% when 'image' %}\n 8\n      <div class=\"product-single__media\"\n 9\n        style=\"padding-top: {{ 1 | divided_by: featured_media.aspect_ratio | times: 100}}%;\"\n 10\n        data-media-id=\"{{ featured_media.id }}\"\n 11\n      >\n 12\n        {{ featured_media | image_url: width: 2048 | image_tag }}\n 13\n      </div>\n 14\n    {% when 'external_video' %}\n 15\n      <div class=\"product-single__media\"\n 16\n        style=\"padding-top: {{ 1 | divided_by: featured_media.aspect_ratio | times: 100}}%;\"\n 17\n        data-media-id=\"{{ featured_media.id }}\"\n 18\n      >\n 19\n        {{ featured_media | external_video_tag }}\n 20\n      </div>\n 21\n    {% when 'video' %}\n 22\n      <div class=\"product-single__media\" data-media-id=\"{{ featured_media.id }}\">\n 23\n        {{ featured_media | video_tag: controls: true }}\n 24\n      </div>\n 25\n    {% when 'model' %}\n 26\n      <div class=\"product-single__media\"\n 27\n        style=\"padding-top: 100%\"\n 28\n        data-media-id=\"{{ featured_media.id }}\"\n 29\n      >\n 30\n        {{ featured_media | model_viewer_tag }}\n 31\n      </div>\n 32\n    {% else %}\n 33\n      <div class=\"product-single__media\"\n 34\n        style=\"padding-top: 100%;\"\n 35\n        data-media-id=\"{{ featured_media.id }}\"\n 36\n      >\n 37\n        {{ featured_media | media_tag }}\n 38\n      </div>\n 39 {% endcase %}\n 40\n 41 <!-- Product price -->\n 42 <div class=\"price\">\n 43\n    <span class=\"price-reg\">{{ current_variant.price | money }}</span>\n 44\n 45\n    {% if current_variant.compare_at_price > current_variant.price %}\n 46\n      <span class=\"price-sale\"><s>{{ current_variant.compare_at_price | money }}</s></span>\n 47\n    {% endif %}\n 48 </div>\n 49\n 50 <!-- Variant selector -->\n 51 <select name=\"id\">\n 52\n    {% for variant in product.variants %}\n 53\n      <option value=\"{{ variant.id }}\"\n 54\n        {% if variant == current_variant %}selected=\"selected\"{% endif %}\n 55\n      >\n 56\n        {{ variant.title }} - {{ variant.price | money }}\n 57\n      </option>\n 58\n    {% endfor %}\n 59 </select>\n Variant selectors\n You can use a single variant selector where each option represents a variant. However, products may have more than one option. For a better buyer experience and to avoid future compatibility issues, we recommend that you present each of these options separately in the UI. To achieve this, you can use the product.options_with_values object to generate a selector for each option. You can then use JavaScript to update the state when a new option value is selected.\n Note\n Regardless of the approach you use for variant selection, you need to ensure that when a new variant is selected, the product media and price are updated to reflect the selected variant.\n Variant selectors should be added to a section that can be included in a JSON product template, or a Liquid product template. They can also be included in product grid or product quick view snippets to allow customers to view variants on other pages, like collections.\n Tip\n Refer to the following files in Dawn for an example implementation:\n product-variant-picker.liquid section\n global.js asset\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Resources\n Implementing product variants\n Variant deep link handling\n Variant selectors\n Updates & News",
                    "filename": "docs/themes/product-merchandising/variants/content.txt",
                    "start_index": 0,
                    "end_index": 5739,
                    "start_line": 1,
                    "end_line": 145,
                    "max_line": 145,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "We recommend selecting a default variant by redirecting to a variant from the loader:\n File\n routes/products.$handle.jsx\n 1 import {\n 2\n    VariantSelector,\n 3\n    getSelectedProductOptions,\n 4\n    CartForm,\n 5 } from \"@shopify/hydrogen\";\n 6\n 7 export async function loader({ request, params }) {\n 8\n    const selectedOptions = getSelectedProductOptions(request);\n 9\n 10\n    const { product } = await context.storefront.query(PRODUCT_QUERY, {\n 11\n      variables: {\n 12\n        handle: params.productHandle,\n 13\n        selectedOptions,\n 14\n      },\n 15\n    });\n 16\n 17\n    if (!product.selectedVariant) {\n 18\n      const searchParams = new URLSearchParams(new URL(request.url).search);\n 19\n      const firstVariant = product.variants.nodes[0];\n 20\n 21\n      for (const option of firstVariant.selectedOptions) {\n 22\n        searchParams.set(option.name, option.value);\n 23\n      }\n 24\n 25\n      throw redirect(\n 26\n        `/products/${product!.handle}?${searchParams.toString()}`,\n 27\n        302, // Make sure to use a 302, because the first variant is subject to change\n 28\n      );\n 29\n    }\n 30\n 31\n    return json({ product });\n 32 }\n 33\n 34 const ProductForm = ({ product }) => {\n 35\n    return (\n 36\n      <>\n 37\n        <VariantSelector\n 38\n          options={product.options}\n 39\n          variants={product.variants}\n 40\n        >\n 41\n          {({ option }) => (\n 42\n            <>\n 43\n              <div>{option.name}</div>\n 44\n              <div>\n 45\n                {option.values.map(({ value, isAvailable, to, isActive }) => (\n 46\n                  <Link\n 47\n                    to={to}\n 48\n                    prefetch=\"intent\"\n 49\n                    className={\n 50\n                      isActive ? \"active\" : isAvailable ? \"\" : \"opacity-80\"\n 51\n                    }\n 52\n                  >\n 53\n                    {value}\n 54\n                  </Link>\n 55\n                ))}\n 56\n              </div>\n 57\n            </>\n 58\n          )}\n 59\n        </VariantSelector>\n 60\n        <CartForm\n 61\n          route=\"/cart\"\n 62\n          action={CartForm.ACTIONS.LinesAdd}\n 63\n          lines={[\n 64\n            {\n 65\n              merchandiseId: product.selectedVariant?.id,\n 66\n            },\n 67\n          ]}\n 68\n        >\n 69\n          <button\n 70\n            disabled={\n 71\n              !product.selectedVariant?.id ||\n 72\n              !product.selectedVariant?.availableForSale\n 73\n            }\n 74\n          >\n 75\n            Add to Cart\n 76\n          </button>\n 77\n        </CartForm>\n 78\n      </>\n 79\n    );\n 80 };\n 81\n 82 const PRODUCT_QUERY = `#graphql\n 83\n    query Product(\n 84\n      $handle: String!\n 85\n      $selectedOptions: [SelectedOptionInput!]!\n 86\n    ) {\n 87\n      product(handle: $handle) {\n 88\n        id\n 89\n        title\n 90\n        vendor\n 91\n        handle\n 92\n        descriptionHtml\n 93\n        description\n 94\n        options {\n 95\n          name\n 96\n          values\n 97\n        }\n 98\n        selectedVariant: variantBySelectedOptions(selectedOptions: $selectedOptions) {\n 99\n          ...ProductVariantFragment\n 100\n        }\n 101\n        variants(first: 10) {\n 102\n          nodes {\n 103\n            ...ProductVariantFragment\n 104\n          }\n 105\n        }\n 106\n        media(first: 7) {\n 107\n          nodes {\n 108\n            ...Media\n 109\n          }\n 110\n        }\n 111\n        seo {\n 112\n          description\n 113\n          title\n 114\n        }\n 115\n      }\n 116\n    }\n 117 `;\n Next steps\n Learn how to update metafields.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Requirements\n Selecting Variants with Links\n Query the Storefront API for Product Options\n VariantSelector component\n Calculating the selected product\n Product Variants by Availability\n Add to cart\n Automatically select a default variant\n Next steps\n Updates & News",
                    "filename": "docs/custom-storefronts/hydrogen/cart/variant-selector/content.txt",
                    "start_index": 10220,
                    "end_index": 14019,
                    "start_line": 575,
                    "end_line": 810,
                    "max_line": 810,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Discounts\n Subscriptions\n Pre-orders and Try Before You Buy\n Overview\n Add pre-orders and TBYB to your theme\n Pre-orders and TBYB UX guidelines\n Shop Pay Installments\n Accelerated checkout\n B2B\n Unit pricing\n Add pre-orders and Try Before You Buy (TBYB) to your theme\n In this tutorial, you'll learn the basics of how to support pre-orders and TBYB in your theme.\n Tip\n Refer to Pre-orders and Try Before You Buy UX guidelines to review user experience considerations that might impact your implementation.\n Requirements\n Add a product form to a template. A product form can be added to any template that can access the product object.\n Resources\n To support pre-orders or TBYB in your theme, you'll use the following resources:\n The form object.\n Objects and object properties that represent selling plan information, including the following:\n selling_plan_group: A group of selling plans that are available for the product's variants.\n selling_plan: The details of the selling plan.\n selling_plan_allocation: Information about how a particular selling plan affects a line item.\n variant.requires_selling_plan.\n The /{locale}/cart/change.js endpoint of the Cart AJAX API.\n Depending on where you're implementing your selling plan functionality, you'll access selling plan information through the following parent objects:\n Context Example template types Parent object\n Product and variant listings product variant\n Variants that have been added to a cart or are part of an order\n cart\n customers/order\n line_item\n For more information about how to present each of these objects and their attributes, refer to Pre-orders and Try Before You Buy UX guidelines.\n Implementing pre-orders or TBYB displays\n To support pre-orders or TBYB in your theme, you need to implement the following components:\n A selling plan selector on the product page: This selector enables customers to select a selling plan.\n JavaScript to update the selling plan: Use JavaScript to update the available selling plans when variants are selected, and update the hidden selling plan input as selling plan options are selected.\n A selling plan display in the cart: Indicate to customers when a selling plan has been applied to a line item. You can also implement a selling plan selector to give the option to add a new selling plan, or to remove or edit the current selling plan.\n A checkout charge in the cart: Display a checkout charge that represents the amount that customers need to pay during checkout.\n A selling plan display on the customer order pages: Indicate to customers when a selling plan has been applied to a line item.\n The selling plan selector on the product page\n You can add a selling plan selector for products wherever you can access the product form. For example, you might add a selling plan selector to the product template or a section in the template.\n Selling plan groups and individual selling plans have a similar structure to products and variants. You can view selling plan groups like products, where there are multiple options that comprise an individual selling plan, similar to variant options that comprise an individual variant.\n You can access the available selling plan options through the selling_plan_groups attribute of the product.\n Add the following to your product form:\n For each selling_plan_group, output each of its options inside the product form.\n To track the ID of the selected selling plan, add an input with an attribute of name=\"selling_plan\". The value should be the ID of the selected selling plan. If there's no selected selling plan, then the value should be empty.\n Save the product object so that it can be accessed in JavaScript.\n Example\n The following is an example of how you can display the selling plan group in your product form. Make sure to add the code inside your product form. The example is referring to the file selling-plans-integration.js. This file is covered in the JavaScript section. The following code is doing the following:\n Assigning the product and the current variant to be used inside the integration\n Looping through every selling plan group, and displaying each associated selling plan\n Adding a pre-orders or TBYB badge to display next to the product price when a buyer is selecting either a pre-order or TBYB\n Note\n This example demonstrates how to integrate selling plans into your theme. We recommend customizing this integration to suit your specific needs. The following code can also be used as a theme app block.\n /assets/selling-plans-integration.liquid\n 1 {%- assign current_variant = product.selected_or_first_available_variant | default: product.variants.first -%}\n 2\n 3 {% if product.selling_plan_groups.size > 0 %}\n 4\n    <div class=\"selling_plan_app_container\" data-section-id='{{ section.id }}'>\n 5\n      <script src=\"{{ 'selling-plans-integration.js' | asset_url }}\" defer></script>\n 6\n      <style>.selling_plan_theme_integration--hidden {display: none;}</style>\n 7\n      {% for variant in product.variants %}\n 8\n        {%liquid\n 9\n          assign variantPrice = variant.price | money_with_currency | escape\n 10\n          assign variantComparedAtPrice = variant.compare_at_price | money_with_currency | escape\n 11\n        %}\n 12\n        {% if variant.selling_plan_allocations.size > 0 %}\n 13\n          <section data-variant-id='{{ variant.id }}' class='selling_plan_theme_integration {% if variant.id != current_variant.id %}selling_plan_theme_integration--hidden{% endif %}'>\n 14\n            <fieldset>\n 15\n              <legend>\n 16\n                {{ block.settings.supporting_text_title }}\n 17\n              </legend>\n 18\n              <div>\n 19\n                {% unless product.requires_selling_plan %}\n 20\n                  <div>\n 21\n                    <label>\n 22\n                      <input\n 23\n                        aria-label='One-time purchase. Product price {{ variantPrice }}'\n 24\n                        type='radio'\n 25\n                        name=\"purchaseOption_{{ section.id }}_{{ variant.id }}\"\n 26\n                        {% if variant.available == false %}disabled{% endif %}\n 27\n                        id='{{ section.id }}_one_time_purchase'\n 28\n                        data-radio-type='one_time_purchase'\n 29\n                        data-variant-id='{{ variant.id }}'\n 30\n                        data-variant-price='{{ variantPrice }}'\n 31\n                        data-variant-compare-at-price='{{ variantComparedAtPrice }}'\n 32\n                        checked\n 33\n                      />\n 34\n                      One-time purchase\n 35\n                    </label>\n 36\n                  </div>\n 37\n                {% endunless %}\n 38\n                {% assign group_ids = variant.selling_plan_allocations | map: 'selling_plan_group_id' | uniq %}\n 39\n                {% for group_id in group_ids %}\n 40\n                  {%liquid\n 41\n                     assign group = product | map: 'selling_plan_groups' | where: 'id', group_id | first\n 42\n                     assign allocations = variant | map: 'selling_plan_allocations' | where: 'selling_plan_group_id', group_id\n 43\n 44\n                     if forloop.first\n 45\n                      assign first_selling_plan_group = true\n 46\n                    else\n 47\n                      assign first_selling_plan_group = false\n 48\n                    endif\n 49\n                  %}\n 50\n                  <div>\n 51\n                    <div>\n 52\n                      <label>{{ group.name }}</label>\n 53\n                    </div>\n 54\n                    <ul>\n 55\n                      {% for allocation in allocations %}\n 56\n 57\n                        {%liquid\n 58\n                          if forloop.first and product.requires_selling_plan and first_selling_plan_group\n 59\n                            assign plan_checked = 'checked'\n 60\n                          else\n 61\n                            assign plan_checked = nil\n 62\n                          endif\n 63\n 64\n                          assign allocationPrice = allocation.price | money_with_currency | escape\n 65\n                          assign allocationComparedAtPrice = allocation.compare_at_price | money_with_currency | escape\n 66\n                        %}\n 67\n 68\n                        <li>\n 69\n                          <label>\n 70\n                            <input\n 71\n                              type='radio'\n 72\n                              {% if variant.available == false %}disabled{% endif %}\n 73\n                              aria-label='{{ allocation.selling_plan.name }}. Product price {{ allocationPrice }}'\n 74\n                              name=\"purchaseOption_{{ section.id }}_{{ variant.id }}\"\n 75\n                              data-radio-type='selling_plan'\n 76\n                              data-selling-plan-id='{{ allocation.selling_plan.id }}'\n 77\n                              data-selling-plan-group-id='{{ section.id }}_{{ group_id }}_{{ variant.id }}'\n 78\n                              data-selling-plan-adjustment='{{ allocation.selling_plan.price_adjustments.size }}'\n 79\n                              data-variant-price='{{ allocationPrice }}'\n 80\n                              data-variant-compare-at-price='{{ allocationComparedAtPrice }}'\n 81\n                              {{ plan_checked }}>\n 82\n                            {{ allocation.selling_plan.name }}\n 83\n                          </label>\n 84\n                        </li>\n 85\n                      {% endfor %}\n 86\n                    </ul>\n 87\n                  </div>\n 88\n                {% endfor %}\n 89\n              </div>\n 90\n            </fieldset>\n 91\n          </section>\n 92\n        {% endif %}\n 93\n      {% endfor %}\n 94\n    </div>\n 95\n    <input\n 96\n      name='selling_plan'\n 97\n      class='selected-selling-plan-id'\n 98\n      type='hidden'>\n 99 {% endif %}\n JavaScript to update selling plan information\n JavaScript is used to interact with the theme integration. This makes it possible for a buyer to select a product and add the correct pre-orders or TBYB to their cart. You can create a separate file named selling-plans-integration.js inside the Assets folder of your theme. The following example illustrates how JavaScript can interact with the selling plan liquid integration:\n /assets/selling-plans-integration.js\n 1 const hiddenClass = 'selling_plan_theme_integration--hidden';\n 2\n 3 class SellingPlansWidget {\n 4\n    constructor(sellingPlansWidgetContainer) {\n 5\n      this.enablePerformanceObserver();\n 6\n      this.sellingPlansWidgetContainer = sellingPlansWidgetContainer;\n 7\n      this.appendSellingPlanInputs();\n 8\n      this.updateSellingPlanInputsValues();\n 9\n      this.listenToVariantChange();\n 10\n      this.listenToSellingPlanFormRadioButtonChange();\n 11\n      this.updatePrice();\n 12\n    }\n 13\n 14\n    get sectionId() {\n 15\n      return this.sellingPlansWidgetContainer.getAttribute('data-section-id');\n 16\n    }\n 17\n 18\n    get shopifySection() {\n 19\n      return document.querySelector(`#shopify-section-${this.sectionId}`);\n 20\n    }\n 21\n 22\n    /*\n 23\n      We are careful to target the correct form, as there are instances when we encounter an installment form that we specifically aim to avoid interacting with.\n 24\n    */\n 25\n    get variantIdInput() {\n 26\n      return (\n 27\n        this.addToCartForms[1]?.querySelector(`input[name=\"id\"]`) ||\n 28\n        this.addToCartForms[1]?.querySelector(`select[name=\"id\"]`) ||\n 29\n        this.addToCartForms[0].querySelector(`input[name=\"id\"]`) ||\n 30\n        this.addToCartForms[0].querySelector(`select[name=\"id\"]`)\n 31\n      );\n 32\n    }\n 33\n 34\n    get priceElement() {\n 35\n      return this.shopifySection.querySelector('.price');\n 36\n    }\n 37\n 38\n    get comparedAtPrice() {\n 39\n      return this.shopifySection.querySelector('.price__sale');\n 40\n    }\n 41\n 42\n    get visibleSellingPlanForm() {\n 43\n      return this.shopifySection.querySelector(\n 44\n        `section[data-variant-id^=\"${this.variantIdInput.value}\"]`,\n 45\n      );\n 46\n    }\n 47\n 48\n    get isVariantAvailable() {\n 49\n      return this.selectedPurchaseOption.getAttributeNames().includes('disabled');\n 50\n    }\n 51\n 52\n    get sellingPlanInput() {\n 53\n      return this.shopifySection.querySelector('.selected-selling-plan-id');\n 54\n    }\n 55\n 56\n    get addToCartForms() {\n 57\n      return this.shopifySection.querySelectorAll('[action*=\"/cart/add\"]');\n 58\n    }\n 59\n 60\n    /*\n 61\n      To enable the addition of a selling plan to a cart, it's necessary to include an input with the name \"selling_plan\", which will carry the selling ID as its value. When a buyer clicks on 'add to cart', the appropriate selling plan ID is added to their cart.\n 62\n    */\n 63\n    appendSellingPlanInputs() {\n 64\n      this.addToCartForms.forEach((addToCartForm) => {\n 65\n        addToCartForm.appendChild(this.sellingPlanInput.cloneNode());\n 66\n      });\n 67\n    }\n 68\n 69\n    showSellingPlanForm(sellingPlanFormForSelectedVariant) {\n 70\n      sellingPlanFormForSelectedVariant?.classList?.remove(hiddenClass);\n 71\n    }\n 72\n 73\n    hideSellingPlanForms(sellingPlanFormsForUnselectedVariants) {\n 74\n      sellingPlanFormsForUnselectedVariants.forEach((element) => {\n 75\n        element.classList.add(hiddenClass);\n 76\n      });\n 77\n    }\n 78\n 79\n    /*\n 80\n      Each product variant comes with a selling plan selection box that the buyer can interact with.",
                    "filename": "docs/themes/pricing-payments/preorder-tbyb/add-preorder-tbyb-to-your-theme/content.txt",
                    "start_index": 0,
                    "end_index": 13335,
                    "start_line": 1,
                    "end_line": 393,
                    "max_line": 870,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Bring your own stack\n Building with the Storefront API\n Building with the Customer Account API\n Additional SDKs\n Show available variants\n This guide shows you how to render a product form that includes a list of available product variants.\n Requirements\n You've completed the quickstart guide.\n You've set up a cart handler.\n Selecting Variants with Links\n Many product pages include a form where options are submitted to the server when the user adds to the cart. The most basic product form enables customers to select from available variants. For example, variants might include product size and color.\n In Hydrogen we recommend using a Link to select each variant. This automatically updates the URL when customers select a variant, which has the following benefits:\n Search engines can easily index each separate variant.\n Users can share and bookmark each separate variant.\n Variants can be prefetched on hover, which decreases the perceived load time.\n Query the Storefront API for Product Options\n First, your product query needs to include product options. Do this by adding options with the name and values properties:\n File\n routes/products.$handle.jsx\n 1 export async function loader({ request, params }) {\n 2\n    const { product } = await context.storefront.query(PRODUCT_QUERY, {\n 3\n      variables: {\n 4\n        handle: params.productHandle,\n 5\n      },\n 6\n    });\n 7\n 8\n    return json({ product });\n 9 }\n 10\n 11 const PRODUCT_QUERY = `#graphql\n 12\n    query Product(\n 13\n      $handle: String!\n 14\n    ) {\n 15\n      product(handle: $handle) {\n 16\n        id\n 17\n        title\n 18\n        vendor\n 19\n        handle\n 20\n        descriptionHtml\n 21\n        description\n 22\n        options {\n 23\n          name\n 24\n          values\n 25\n        }\n 26\n        media(first: 7) {\n 27\n          nodes {\n 28\n            ...Media\n 29\n          }\n 30\n        }\n 31\n        seo {\n 32\n          description\n 33\n          title\n 34\n        }\n 35\n      }\n 36\n    }\n 37 `;\n VariantSelector component\n Now that you've queried product options, you can use the VariantSelector component to render links for all product options:\n File\n routes/products.$handle.jsx\n 1 import { VariantSelector } from \"@shopify/hydrogen\";\n 2\n 3 const ProductForm = ({ product }) => {\n 4\n    return (\n 5\n      <VariantSelector options={product.options}>\n 6\n        {({ option }) => (\n 7\n          <>\n 8\n            <div>{option.name}</div>\n 9\n            <div>\n 10\n              {option.values.map(({ value, to, isActive }) => (\n 11\n                <Link\n 12\n                  to={to}\n 13\n                  // Including prefetch means if the user hovers over the link, then\n 14\n                  // Remix fetches the page in the background\n 15\n                  prefetch=\"intent\"\n 16\n                  className={isActive ? \"active\" : \"\"}\n 17\n                >\n 18\n                  {value}\n 19\n                </Link>\n 20\n              ))}\n 21\n            </div>\n 22\n          </>\n 23\n        )}\n 24\n      </VariantSelector>\n 25\n    );\n 26 };\n Calculating the selected product\n To calculate the selected product options based on URL parameters, update your GraphQL query to use the variantBySelectedOptions and use getSelectedProductOptions:\n File\n routes/products.$handle.jsx\n 1 import { getSelectedProductOptions } from \"@shopify/hydrogen\";\n 2\n 3 export async function loader({ request, params }) {\n 4\n    const selectedOptions = getSelectedProductOptions(request);\n 5\n 6\n    const { product } = await context.storefront.query(PRODUCT_QUERY, {\n 7\n      variables: {\n 8\n        handle: params.productHandle,\n 9\n        selectedOptions,\n 10\n      },\n 11\n    });\n 12\n 13\n    return json({ product });\n 14 }\n 15\n 16 const PRODUCT_QUERY = `#graphql\n 17\n    query Product(\n 18\n      $handle: String!\n 19\n      $selectedOptions: [SelectedOptionInput!]!\n 20\n    ) {\n 21\n      product(handle: $handle) {\n 22\n        id\n 23\n        title\n 24\n        vendor\n 25\n        handle\n 26\n        descriptionHtml\n 27\n        description\n 28\n        options {\n 29\n          name\n 30\n          values\n 31\n        }\n 32\n        selectedVariant: variantBySelectedOptions(selectedOptions: $selectedOptions) {\n 33\n          ...ProductVariantFragment\n 34\n        }\n 35\n        media(first: 7) {\n 36\n          nodes {\n 37\n            ...Media\n 38\n          }\n 39\n        }\n 40\n        seo {\n 41\n          description\n 42\n          title\n 43\n        }\n 44\n      }\n 45\n    }\n 46 `;\n Product Variants by Availability\n Sometimes you might want to render the variants differently based on product availability. You can do this by adding product variants to your Storefront API query.\n Add variants to the product query and include the availableForSale property. Because variants is a list, you have to decide how many items to query. You can include all items, but for efficiency we recommend doing this if you only have a handful to query. For example, querying all if you have one hundred variants can have a negative impact on performance.\n File\n routes/products.$handle.jsx\n 1 import {\n 2\n    VariantSelector,\n 3\n    getSelectedProductOptions,\n 4 } from \"@shopify/hydrogen\";\n 5\n 6 export async function loader({ request, params }) {\n 7\n    const selectedOptions = getSelectedProductOptions(request);\n 8\n 9\n    const { product } = await context.storefront.query(PRODUCT_QUERY, {\n 10\n      variables: {\n 11\n        handle: params.productHandle,\n 12\n        selectedOptions,\n 13\n      },\n 14\n    });\n 15\n 16\n    return json({ product });\n 17 }\n 18\n 19 const ProductForm = ({ product }) => {\n 20\n    return (\n 21\n      <VariantSelector options={product.options}>\n 22\n        {({ option }) => (\n 23\n          <>\n 24\n            <div>{option.name}</div>\n 25\n            <div>\n 26\n              {option.values.map(({ value, isAvailable, to, isActive }) => (\n 27\n                <Link\n 28\n                  to={to}\n 29\n                  prefetch=\"intent\"\n 30\n                  className={\n 31\n                    isActive ? \"active\" : isAvailable ? \"\" : \"opacity-80\"\n 32\n                  }\n 33\n                >\n 34\n                  {value}\n 35\n                </Link>\n 36\n              ))}\n 37\n            </div>\n 38\n          </>\n 39\n        )}\n 40\n      </VariantSelector>\n 41\n    );\n 42 };\n 43\n 44 const PRODUCT_QUERY = `#graphql\n 45\n    query Product(\n 46\n      $handle: String!\n 47\n      $selectedOptions: [SelectedOptionInput!]!\n 48\n    ) {\n 49\n      product(handle: $handle) {\n 50\n        id\n 51\n        title\n 52\n        vendor\n 53\n        handle\n 54\n        descriptionHtml\n 55\n        description\n 56\n        options {\n 57\n          name\n 58\n          values\n 59\n        }\n 60\n        selectedVariant: variantBySelectedOptions(selectedOptions: $selectedOptions) {\n 61\n          ...ProductVariantFragment\n 62\n        }\n 63\n        variants(first: 10) {\n 64\n          nodes {\n 65\n            ...ProductVariantFragment\n 66\n          }\n 67\n        }\n 68\n        media(first: 7) {\n 69\n          nodes {\n 70\n            ...Media\n 71\n          }\n 72\n        }\n 73\n        seo {\n 74\n          description\n 75\n          title\n 76\n        }\n 77\n      }\n 78\n    }\n 79 `;\n Add to cart\n Use the CartForm component to add the selectedVariant to the cart. You can also disable the add to cart button if the selected variant is invalid or unavailable:\n File\n routes/products.$handle.jsx\n 1 import {\n 2\n    VariantSelector,\n 3\n    getSelectedProductOptions,\n 4\n    CartForm,\n 5 } from \"@shopify/hydrogen\";\n 6\n 7 export async function loader({ request, params }) {\n 8\n    const selectedOptions = getSelectedProductOptions(request);\n 9\n 10\n    const { product } = await context.storefront.query(PRODUCT_QUERY, {\n 11\n      variables: {\n 12\n        handle: params.productHandle,\n 13\n        selectedOptions,\n 14\n      },\n 15\n    });\n 16\n 17\n    return json({ product });\n 18 }\n 19\n 20 const ProductForm = ({ product }) => {\n 21\n    return (\n 22\n      <>\n 23\n        <VariantSelector\n 24\n          options={product.options}\n 25\n          variants={product.variants}\n 26\n        >\n 27\n          {({ option }) => (\n 28\n            <>\n 29\n              <div>{option.name}</div>\n 30\n              <div>\n 31\n                {option.values.map(({ value, isAvailable, to, isActive }) => (\n 32\n                  <Link\n 33\n                    to={to}\n 34\n                    prefetch=\"intent\"\n 35\n                    className={\n 36\n                      isActive ? \"active\" : isAvailable ? \"\" : \"opacity-80\"\n 37\n                    }\n 38\n                  >\n 39\n                    {value}\n 40\n                  </Link>\n 41\n                ))}\n 42\n              </div>\n 43\n            </>\n 44\n          )}\n 45\n        </VariantSelector>\n 46\n        <CartForm\n 47\n          route=\"/cart\"\n 48\n          action={CartForm.ACTIONS.LinesAdd}\n 49\n          lines={[\n 50\n            {\n 51\n              merchandiseId: product.selectedVariant?.id,\n 52\n            },\n 53\n          ]}\n 54\n        >\n 55\n          <button\n 56\n            disabled={\n 57\n              !product.selectedVariant?.id ||\n 58\n              !product.selectedVariant?.availableForSale\n 59\n            }\n 60\n          >\n 61\n            Add to Cart\n 62\n          </button>\n 63\n        </CartForm>\n 64\n      </>\n 65\n    );\n 66 };\n 67\n 68 const PRODUCT_QUERY = `#graphql\n 69\n    query Product(\n 70\n      $handle: String!\n 71\n      $selectedOptions: [SelectedOptionInput!]!\n 72\n    ) {\n 73\n      product(handle: $handle) {\n 74\n        id\n 75\n        title\n 76\n        vendor\n 77\n        handle\n 78\n        descriptionHtml\n 79\n        description\n 80\n        options {\n 81\n          name\n 82\n          values\n 83\n        }\n 84\n        selectedVariant: variantBySelectedOptions(selectedOptions: $selectedOptions) {\n 85\n          ...ProductVariantFragment\n 86\n        }\n 87\n        variants(first: 10) {\n 88\n          nodes {\n 89\n            ...ProductVariantFragment\n 90\n          }\n 91\n        }\n 92\n        media(first: 7) {\n 93\n          nodes {\n 94\n            ...Media\n 95\n          }\n 96\n        }\n 97\n        seo {\n 98\n          description\n 99\n          title\n 100\n        }\n 101\n      }\n 102\n    }\n 103 `;\n Automatically select a default variant\n You may want to automatically have a variant selected when the page first loads.",
                    "filename": "docs/custom-storefronts/hydrogen/cart/variant-selector/content.txt",
                    "start_index": 0,
                    "end_index": 10219,
                    "start_line": 1,
                    "end_line": 575,
                    "max_line": 810,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "81\n      When a buyer chooses a different variant, we ensure that only the relevant selling plan selection box is displayed.\n 82\n      This guarantees that only the selling plan associated with the selected variant is shown.\n 83\n    */\n 84\n    handleSellingPlanFormVisibility() {\n 85\n      const sellingPlanFormForSelectedVariant = this.shopifySection.querySelector(\n 86\n        `section[data-variant-id=\"${this.variantIdInput.value}\"]`,\n 87\n      );\n 88\n      const sellingPlanFormsForUnselectedVariants =\n 89\n        this.shopifySection.querySelectorAll(\n 90\n          `.selling_plan_theme_integration:not([data-variant-id=\"${this.variantIdInput.value}\"])`,\n 91\n        );\n 92\n      this.showSellingPlanForm(sellingPlanFormForSelectedVariant);\n 93\n      this.hideSellingPlanForms(sellingPlanFormsForUnselectedVariants);\n 94\n    }\n 95\n 96\n    handleVariantChange() {\n 97\n      this.handleSellingPlanFormVisibility();\n 98\n      this.updateSellingPlanInputsValues();\n 99\n      this.listenToSellingPlanFormRadioButtonChange();\n 100\n    }\n 101\n 102\n    /*\n 103\n      The functions listenToVariantChange() and listenToAddToCartForms() are implemented to track when a product variant is altered or when the product form is updated.\n 104\n      The identification of the variant is crucial as it dictates which selling plan box should be displayed.\n 105\n    */\n 106\n    listenToVariantChange() {\n 107\n      this.listenToAddToCartForms();\n 108\n      if (this.variantIdInput.tagName === 'INPUT') {\n 109\n        const variantIdObserver = new MutationObserver((mutationList) => {\n 110\n          mutationList.forEach((mutationRecord) => {\n 111\n            this.handleVariantChange(mutationRecord.target.value);\n 112\n          });\n 113\n        });\n 114\n 115\n        variantIdObserver.observe(this.variantIdInput, {\n 116\n          attributes: true,\n 117\n        });\n 118\n      }\n 119\n    }\n 120\n 121\n    listenToAddToCartForms() {\n 122\n      this.addToCartForms.forEach((addToCartForm) => {\n 123\n        addToCartForm.addEventListener('change', () => {\n 124\n          this.handleVariantChange();\n 125\n        });\n 126\n      });\n 127\n    }\n 128\n 129\n    get regularPriceElement() {\n 130\n      return this.shopifySection.querySelector('.price__regular');\n 131\n    }\n 132\n 133\n    get salePriceElement() {\n 134\n      return this.shopifySection.querySelector('.price__sale');\n 135\n    }\n 136\n 137\n    get salePriceValue() {\n 138\n      return this.salePriceElement.querySelector('.price-item--sale');\n 139\n    }\n 140\n 141\n    get regularPriceValue() {\n 142\n      return this.salePriceElement.querySelector('.price-item--regular');\n 143\n    }\n 144\n 145\n    get sellingPlanAllocationPrice() {\n 146\n      return document.getElementById(\n 147\n        `${this.selectedPurchaseOption.dataset.sellingPlanGroupId}_allocation_price`,\n 148\n      );\n 149\n    }\n 150\n 151\n    get selectedPurchaseOptionPrice() {\n 152\n      return this.selectedPurchaseOption.dataset.variantPrice;\n 153\n    }\n 154\n 155\n    get selectedPurchaseOptionComparedAtPrice() {\n 156\n      return this.selectedPurchaseOption.dataset.variantCompareAtPrice;\n 157\n    }\n 158\n 159\n    get price() {\n 160\n      return this.sellingPlanAllocationPrices.price ?? null;\n 161\n    }\n 162\n 163\n    /*\n 164\n      We aim to ascertain whether a compared price exists, which would indicate that the currently selected input has a discount applied to it.\n 165\n      If a discount is detected, the discounted price is displayed; otherwise, the regular price is shown.\n 166\n    */\n 167\n    updatePrice() {\n 168\n      if (\n 169\n        !this.selectedPurchaseOptionComparedAtPrice ||\n 170\n        this.selectedPurchaseOptionComparedAtPrice ===\n 171\n          this.selectedPurchaseOptionPrice\n 172\n      ) {\n 173\n        this.showRegularPrice();\n 174\n        this.hideSalePrice();\n 175\n        this.priceElement.classList.remove('price--on-sale');\n 176\n      } else {\n 177\n        this.showSalePrice();\n 178\n        this.hideRegularPrice();\n 179\n        this.priceElement.classList.add('price--on-sale');\n 180\n      }\n 181\n    }\n 182\n 183\n    hideSalePrice() {\n 184\n      this.salePriceElement.style.display = 'none';\n 185\n    }\n 186\n 187\n    hideRegularPrice() {\n 188\n      this.regularPriceElement.style.display = 'none';\n 189\n    }\n 190\n 191\n    showRegularPrice() {\n 192\n      this.regularPriceElement.style.display = 'block';\n 193\n      this.shopifySection.querySelector('.price__sale').style.display = 'none';\n 194\n    }\n 195\n 196\n    showSalePrice() {\n 197\n      this.salePriceElement.style.display = 'block';\n 198\n      this.regularPriceValue.innerHTML =\n 199\n        this.selectedPurchaseOptionComparedAtPrice;\n 200\n      this.salePriceValue.innerHTML = this.selectedPurchaseOptionPrice;\n 201\n    }\n 202\n 203\n    get sellingPlanInputs() {\n 204\n      return this.shopifySection.querySelectorAll('.selected-selling-plan-id');\n 205\n    }\n 206\n 207\n    updateSellingPlanInputsValues() {\n 208\n      this.sellingPlanInputs.forEach((sellingPlanInput) => {\n 209\n        sellingPlanInput.value = this.sellingPlanInputValue;\n 210\n      });\n 211\n    }\n 212\n 213\n    get sellingPlanInputValue() {\n 214\n      return this.selectedPurchaseOption?.dataset.sellingPlanId ?? null;\n 215\n    }\n 216\n 217\n    get selectedPurchaseOption() {\n 218\n      return this.visibleSellingPlanForm?.querySelector(\n 219\n        'input[type=\"radio\"]:checked',\n 220\n      );\n 221\n    }\n 222\n 223\n    set selectedPurchaseOption(selectedPurchaseOption) {\n 224\n      this._selectedPurchaseOption = selectedPurchaseOption;\n 225\n    }\n 226\n 227\n    handleRadioButtonChange(selectedPurchaseOption) {\n 228\n      this.selectedPurchaseOption = selectedPurchaseOption;\n 229\n      this.updateSellingPlanInputsValues();\n 230\n      this.updatePrice();\n 231\n    }\n 232\n 233\n    listenToSellingPlanFormRadioButtonChange() {\n 234\n      this.visibleSellingPlanForm\n 235\n        ?.querySelectorAll('input[type=\"radio\"]')\n 236\n        .forEach((radio) => {\n 237\n          radio.addEventListener('change', (event) => {\n 238\n            this.handleRadioButtonChange(event.target);\n 239\n          });\n 240\n        });\n 241\n    }\n 242\n 243\n    enablePerformanceObserver() {\n 244\n      const performanceObserver = new PerformanceObserver((list) => {\n 245\n        list.getEntries().forEach((entry) => {\n 246\n          if (entry.initiatorType !== 'fetch') return;\n 247\n 248\n          const url = new URL(entry.name);\n 249\n          /*\n 250\n            When a buyer selects a product variant, a fetch request is initiated.\n 251\n            Upon completion of this fetch request, we update the price to reflect the correct value.\n 252\n          */\n 253\n          if (url.search.includes('variant') || url.search.includes('variants')) {\n 254\n            this.updatePrice();\n 255\n          }\n 256\n        });\n 257\n      });\n 258\n 259\n      performanceObserver.observe({entryTypes: ['resource']});\n 260\n    }\n 261 }\n 262\n 263 document\n 264\n    .querySelectorAll('.selling_plan_app_container')\n 265\n    .forEach((sellingPlansWidgetContainer) => {\n 266\n      new SellingPlansWidget(sellingPlansWidgetContainer);\n 267\n    });\n The functions listenToVariantChange() and listenToAddToCartForms() are implemented to track when a product variant is altered or when the product form is updated. The identification of the variant is crucial as it dictates which selling plan box should be displayed. For more information about how to find a variant, refer to our community post.\n The selling plan display in the cart\n If a customer selects a selling plan on the product page, then they should see that selection in the cart.\n Available selected selling plans are accessible through the selling_plan_allocation attribute of the line_item object. The following is an example:\n /customers/order.liquid\n 1 {% if line_item.selling_plan_allocation %}\n 2\n    <p class=\"selling-plan\">{{ line_item.selling_plan_allocation.selling_plan.name }}</p>\n 3 {% endif %}\n The selling plan selector\n Rather than just display the selected selling plan, you can give customers the option to add a new selling plan, or to remove or edit the current selling plan. To do this, you should implement a selling plan selector that lists out the available selling plans for the line item's variant, and reflects the currently selected selling plan.\n You can loop through the selling_plan_allocations attribute of the variant object associated with the line item (line_item.variant) to build out your selector options. You can compare the selected selling plan ID with the ID of the selling plan at the current index of the loop to make sure that the selector reflects the currently selected selling plan.\n To change the selling plan for a line item, you can use the /{locale}/cart/change.js endpoint of the Cart AJAX API.\n Example\n The following example outputs a selling plan selector:\n 1 <select name=\"selling-plan\" data-line=\"{{ forloop.index }}\" data-quantity=\"{{ line_item.quantity }}\">\n 2\n    <option value=\"\">One-time purchase</option>\n 3\n 4\n    {% for selling_plan_allocation in line_item.variant.selling_plan_allocations %}\n 5\n      <option\n 6\n        value=\"{{ selling_plan_allocation.selling_plan.id }}\"\n 7\n        {% if line_item.selling_plan_allocation.selling_plan.id == selling_plan_allocation.selling_plan.id %}selected=\"selected\"{% endif %}\n 8\n      >\n 9\n        {{ selling_plan_allocation.selling_plan.name }}\n 10\n      </option>\n 11\n    {% endfor %}\n 12 </select>\n The following example illustrates the concept of watching for a change in the selling plan selector and applying those changes through the /cart/change.js endpoint. It isn't completely functional.\n 1 const sellingPlanSelectors = document.querySelectorAll('[name=\"selling-plan\"]');\n 2\n 3 sellingPlanSelectors.forEach(function(element) {\n 4\n    element.addEventListener('change', function(event) {\n 5\n      const data = {\n 6\n        'line': event.target.dataset.line,\n 7\n        'quantity': event.target.dataset.quantity,\n 8\n        'id': event.target.value\n 9\n      }\n 10\n 11\n      fetch('/cart/change.js', {\n 12\n        method: 'POST',\n 13\n        headers: {\n 14\n          'Content-Type': 'application/json'\n 15\n        },\n 16\n        body: JSON.stringify(data)\n 17\n      })\n 18\n      .then(response => {\n 19\n        // Refresh page, or re-render cart\n 20\n        console.log(response);\n 21\n      })\n 22\n      .catch((error) => {\n 23\n        console.error('Error:', error);\n 24\n      });\n 25\n    });\n 26 });\n The checkout charge display in the cart\n Because pre-order and TBYB can change how much a customer has to pay up front, you should show them how much they'll be charged at checkout. You can calculate this amount using selling_plan.checkout_charge object.\n You can access a line item's checkout charge through its selling_plan_allocation.\n The following table outlines the types of checkout charges:\n Checkout charge type Description\n percentage A percent value representing the percentage amount of the full price that must be paid up front.\n price The price to be paid up front, in cents.\n Note\n You can't configure checkout charges for subscriptions. Because of this, subscriptions always have a value_type of percentage and value of 100.\n Example\n The following example outputs the appropriate line item price depending on whether the line item has a selling plan allocation, and what kind of selling plan it is.\n 1 {% if item.selling_plan_allocation %}\n 2\n    {%- assign checkout_charge = item.selling_plan_allocation.selling_plan.checkout_charge -%}\n 3\n 4\n    {% if checkout_charge.value_type == 'percentage' %}\n 5\n      {{ item.original_price | times: checkout_charge.value | divided_by: 100 | money }}\n 6\n    {% else %}\n 7\n      {{ checkout_charge.value | money }}\n 8\n    {% endif %}\n 9 {% else %}\n 10\n    {{ item.original_price | money }}\n 11 {% endif %}\n Customer order selling plan display\n When a customer selects a selling plan, they should see the name of that selection on the customer order page.\n The selected selling plan, if there is one, is accessible through the selling_plan_allocation attribute of the line_item object. The following is an example:\n /customers/order.liquid\n 1 {% if line_item.selling_plan_allocation %}\n 2\n    <p class=\"selling-plan\">{{ line_item.selling_plan_allocation.selling_plan.name }}</p>\n 3 {% endif %}\n Was this section helpful?",
                    "filename": "docs/themes/pricing-payments/preorder-tbyb/add-preorder-tbyb-to-your-theme/content.txt",
                    "start_index": 13337,
                    "end_index": 25629,
                    "start_line": 210,
                    "end_line": 859,
                    "max_line": 870,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Overview\n Pickup availability\n Customer engagement\n Markets\n Site navigation and search\n Show pickup availability on product pages\n Merchants can make their products available through local pickup, and you can display whether a specific product variant is available for local pickup on the product page. This allows customers to view this information without having to add the product to cart and proceed to checkout to view the shipping details.\n In this tutorial, you'll learn how to show variant pickup availability on product pages.\n Requirements\n Variant selection functionality. The pickup availability JavaScript function needs to be run when variants are selected.\n Resources\n To implement pickup availability, you'll use the following:\n The variant object\n The store_availability object\n The location object\n Implementing pickup availability\n To support pickup availability functionality in your theme, you need to implements the following components:\n The pickup availability section: Renders the display content, which contains information about each location that the current variant is stocked at.\n The pickup availability container: An empty container on the product page that hosts the section content.\n A JavaScript function: Renders the section content inside the container, and makes any updates on variant selection.\n Caution\n The examples below are only meant to illustrate basic considerations for implementing this feature. The full implementation will vary depending on your theme and what you want the display to look like. You can refer to the following files in Dawn for an example of a complete solution:\n Section\n Container\n Buy Button\n JS\n CSS\n The pickup availability section\n The pickup availability section hosts the actual content to be displayed, which has two main components:\n Availability summary\n Availability modal\n This section is rendered inside the pickup availability container by the JavaScript function.\n Availability summary\n The availability summary loops through the locations returned from the store_availabilites attribute of the current variant to find any locations that have pick_up_enabled set to true. If there are any, then the availability of the current variant at the first location is displayed, along with a button to open the availability modal.\n Example\n Availability modal\n The availability modal displays the product and variant titles, and each location that the current variant is stocked at. For each location, the current availability and address are shown.\n Example\n Example\n The following is an example of a pickup availability section with an availability summary and modal.\n Note\n You should only output the availability summary and modal if the current variant has at least one location with pickup enabled.\n sections/pickup-availability.liquid\n 1 <div class=\"pickup-availability-container\">\n 2\n    {%- assign pick_up_availabilities = product_variant.store_availabilities | where: 'pick_up_enabled', true -%}\n 3\n 4\n    {%- if pick_up_availabilities.size > 0 -%}\n 5\n      <!-- Availability summary -->\n 6\n      <div class=\"pickup-availability-information\">\n 7\n        {%- assign closest_location = pick_up_availabilities.first -%}\n 8\n 9\n        {%- if closest_location.available -%}\n 10\n          {% render 'icon-in-stock' %}\n 11\n        {%- else -%}\n 12\n          {% render 'icon-out-of-stock' %}\n 13\n        {%- endif -%}\n 14\n 15\n        <div class=\"pickup-availability-information-container\">\n 16\n          {%- if closest_location.available -%}\n 17\n            <p class=\"pickup-availability-information__title\">\n 18\n              {{ 'pickup_availability.general.pick_up_available_at_html' | t: location_name: closest_location.location.name }}\n 19\n            </p>\n 20\n            <p class=\"pickup-availability-information__stock pickup-availability-small-text\">\n 21\n              {{ closest_location.pick_up_time }}\n 22\n            </p>\n 23\n            <button\n 24\n              class=\"pickup-availability-information__button js-modal-open-pickup-availability-modal pickup-availability-small-text\"\n 25\n              data-pickup-availability-modal-open aria-haspopup=\"dialog\"\n 26\n            >\n 27\n              {%- if pick_up_availabilities.size == 1 -%}\n 28\n                {{ 'pickup_availability.general.view_store_info' | t }}\n 29\n              {%- else -%}\n 30\n                {{ 'pickup_availability.general.check_other_stores' | t }}\n 31\n              {%- endif -%}\n 32\n            </button>\n 33\n          {%- else -%}\n 34\n            <p class=\"pickup-availability-information__title\">\n 35\n              {{ 'pickup_availability.general.pick_up_unavailable_at_html' | t: location_name: closest_location.location.name }}\n 36\n            </p>\n 37\n 38\n            {%- if pick_up_availabilities.size > 1 -%}\n 39\n              <button class=\"pickup-availability-information__button js-modal-open-pickup-availability-modal pickup-availability-small-text\" data-pickup-availability-modal-open aria-haspopup=\"dialog\">\n 40\n                {{ 'pickup_availability.general.check_other_stores' | t }}\n 41\n              </button>\n 42\n            {%- endif -%}\n 43\n          {%- endif -%}\n 44\n        </div>\n 45\n      </div>\n 46\n 47\n      <!-- Availability modal -->\n 48\n      <div\n 49\n        class=\"pickup-availabilities-modal modal\"\n 50\n        id=\"PickupAvailabilityModal\"\n 51\n        role=\"dialog\"\n 52\n        aria-modal=\"true\"\n 53\n        aria-labelledby=\"PickupAvailabilitiesModalProductTitle\"\n 54\n      >\n 55\n        <div class=\"pickup-availabilities-modal__header\">\n 56\n          <div class=\"pickup-availabilities-modal__product-information\">\n 57\n            <h2\n 58\n              id=\"PickupAvailabilitiesModalProductTitle\"\n 59\n              class=\"pickup-availabilities-modal__product-title\"\n 60\n              data-pickup-availability-modal-product-title\n 61\n            >\n 62\n            </h2>\n 63\n            <p\n 64\n              class=\"pickup-availabilities-modal__variant-title pickup-availability-small-text\"\n 65\n              data-pickup-availability-modal-variant-title\n 66\n            >\n 67\n              {{ product_variant.title }}\n 68\n            </p>\n 69\n          </div>\n 70\n          <button\n 71\n            type=\"button\"\n 72\n            class=\"pickup-availabilities-modal__close js-modal-close-pickup-availability-modal text-link\"\n 73\n            aria-label=\"{{ 'general.accessibility.close_modal' | t }}\"\n 74\n          >\n 75\n            {% render 'icon-close' %}\n 76\n          </button>\n 77\n        </div>\n 78\n        <ul class=\"pickup-availabilities-list\" role=\"list\">\n 79\n          {%- for availability in pick_up_availabilities -%}\n 80\n            <li class=\"pickup-availability-list__item\">\n 81\n              <h3 class=\"pickup-availability-list__location\">\n 82\n                {{ availability.location.name }}\n 83\n              </h3>\n 84\n              <div class=\"pickup-availability-list__stock pickup-availability-small-text\">\n 85\n                {%- if availability.available -%}\n 86\n                  {% render 'icon-in-stock' %} {{ 'pickup_availability.general.pick_up_available' | t }}, {{ availability.pick_up_time | downcase }}\n 87\n                {%- else -%}\n 88\n                  {% render 'icon-out-of-stock' %} {{ 'pickup_availability.general.pick_up_currently_unavailable' | t }}\n 89\n                {%- endif -%}\n 90\n              </div>\n 91\n              {%- assign address = availability.location.address -%}\n 92\n              <address class=\"pickup-availability-list__address\">\n 93\n                {{ address | format_address }}\n 94\n              </address>\n 95\n              {%- if address.phone.size > 0 -%}\n 96\n                <p class=\"pickup-availability-list__phone pickup-availability-small-text\">\n 97\n                  {{ address.phone }}<br>\n 98\n                </p>\n 99\n              {%- endif -%}\n 100\n            </li>\n 101\n          {%- endfor -%}\n 102\n        </ul>\n 103\n      </div>\n 104\n    {%- endif -%}\n 105 </div>\n 106\n 107 {% schema %}\n 108 {\n 109\n    \"name\": {},\n 110\n    \"settings\": []\n 111 }\n 112 {% endschema %}\n The pickup availability container\n The pickup availability container is an empty <div> element that the JavaScript function will render the section contents inside of. It should be placed wherever you want the availability summary to show on the product page.\n Example\n 1 <div class=\"product-single__store-availability-container\"\n 2\n    data-store-availability-container\n 3\n    data-product-title=\"\"\n 4\n    data-has-only-default-variant=\"\"\n 5\n    data-base-url=\"\"\n 6 >\n 7 </div>\n The JavaScript function\n To add the pickup availability section content inside the pickup availability container, you need to use the section rendering API. The request needs to be prefixed with a /variants/[variant-id] parameter, where [variant-id] is the variant ID of the selected variant.\n To access the variant ID, and update the display when a variant is selected, you need to make a call to your pickup availability JavaScript function from the JavaScript responsible for updating product page elements on variant selection.\n Example\n 1 fetch(window.Shopify.routes.root + \"variants/[variant-id]/?section_id=pickup-availability\")\n 2\n    .then(response => response.text())\n 3\n    .then(text => {\n 4\n      const container = document.querySelector('[data-store-availability-container]');\n 5\n      const pickupAvailabilityHTML = new DOMParser()\n 6\n        .parseFromString(text, 'text/html')\n 7\n        .querySelector('.shopify-section');\n 8\n 9\n      container.appendChild(pickupAvailabilityHTML);\n 10\n    })\n 11\n    .catch(e => {\n 12\n      console.error(e);\n 13\n    });\n Tip\n You can't access the Liquid product object in the pickup availability section. This means that product-specific changes, like updating the title and removing the variant title if the product only has a default variant, need to be done through JavaScript. The example availability container includes data-product-title and data-has-only-default-variant attributes for this purpose.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Requirements\n Resources\n Implementing pickup availability\n The pickup availability section\n The pickup availability container\n The JavaScript function\n Updates & News\n Developer changelog",
                    "filename": "docs/themes/delivery-fulfillment/pickup-availability/content.txt",
                    "start_index": 0,
                    "end_index": 10227,
                    "start_line": 1,
                    "end_line": 310,
                    "max_line": 310,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Overview\n Combined listings\n Product recommendations\n Media and images\n Gift cards\n Combined listings\n Early Access\n The GraphQL Admin API has been updated to support the creation of combined listings. To be considered for early access to these API updates, please reach out to Partner support.\n A combined listing is modeled as a single parent product that has variants that point to one or more child products. For more information, see the combined listing help documentation or learn how to create a combined listing app.\n In this tutorial, you'll learn how to update your theme to support combined listings. You can also check out a branch of the Dawn theme that supports combined listings, which can be used as a reference.\n Shopify Plus\n Combined listings are available only to stores on a Shopify Plus plan.\n Use product.options_with_values to render options\n As a liquid object, a combined listing product inherits options from both the parent and child products, so it may have more options than the standard product option limit. To ensure all options are rendered, themes need to use product.options_with_values.\n 1 {%- for option in product.options_with_values -%}\n 2\n    {{ option.name }} / {{ option.values }}\n 3 {%- endfor -%}\n Use product_option_value to simplify option value input rendering\n The product_option.values array now returns an array of product_option_value objects instead of strings. This object has two properties that help render option value inputs:\n selected - Whether the option value is currently selected.\n variant - The variant associated with this option value combined with the other currently selected option values.\n 1 {%- for option_value in option.values -%}\n 2\n    <input\n 3\n      type=\"radio\"\n 4\n      name=\"{{ option.name }}\"\n 5\n      value=\"{{ option_value | escape }}\"\n 6\n      {% if option_value.selected %}\n 7\n        checked\n 8\n      {% endif %}\n 9\n      {% unless option_value.variant.available %}\n 10\n        class=\"disabled\"\n 11\n      {% endunless %}\n 12\n    />\n 13 {%- endfor -%}\n Pagination using selected option values\n Caution\n Products will soon support up to 2000 variants. However, to avoid negative render performance in themes, product.variants is capped to the shop's current variant limit.\n When a buyer selects an option value, themes respond by filtering all product variants for the current option selection and using those variants to update the product form. Because product.variants is capped and may not return the full set of variants, themes need a new approach.\n To avoid loading all variant information, themes can now paginate through a product's variants based on selected option values. The product_option_value.variant object enables this by providing the minimal set of variant data for the currently visible option values. After a buyer selects an option value, the Section Rendering API can be used to paginate to the next set of possible variants.\n Looking at an example, a Pants product has options waist: 30,32,34, length: 30,32,34, color: red,green,blue. The product contains 3*3*3=27 variants, but at any given time the buyer is only shown option values associated with seven of the variants. When the buyer selects an option value, the theme paginates to the next seven variants. Here's how it works:\n Example - Initial state\n On pageload, the initial option value selection depends on which variant is returned by product.selected_or_first_available_variant. For example, if the variant 30 / 30 / red is returned, then the option values waist:30, length:30, and color:red will be selected. From this state, there are six other variants that a buyer could choose next. Here they are broken down by option and option value:\n waist\n 30 - variant 30 / 30 / red (selected variant)\n 32 - variant 32 / 30 / red\n 34 - variant 34 / 30 / red\n length\n 30 - variant 30 / 30 / red (selected variant)\n 32 - variant 30 / 32 / red\n 34 - variant 30 / 34 / red\n color\n red - variant 30 / 30 / red (selected variant)\n green - variant 30 / 30 / green\n blue - variant 30 / 30 / blue\n Example - After option value selection\n A buyer selects color: green, and the theme JS calls the Section Rendering API with the selected variant to load the next state of option values and associated variants, and updates the page. The buyer is still shown seven total variants, but they have been updated to reflect the new option value selection of waist:30, length:30, color:green:\n waist\n 30 - variant 30 / 30 / green (selected variant)\n 32 - variant 32 / 30 / green\n 34 - variant 34 / 30 / green\n length\n 30 - variant 30 / 30 / green (selected variant)\n 32 - variant 30 / 32 / green\n 34 - variant 30 / 34 / green\n color\n green - variant 30 / 30 / green (selected variant)\n red - variant 30 / 30 / red\n blue - variant 30 / 30 / blue\n Option values with no associated variant\n Caution\n If the option values passed to the Section Rendering API have no associated variant, then both product.selected_or_first_available_variant and product.selected_variant will return null. Make sure your theme can handle this null case before using the Section Rendering API with option_values\n In some scenarios, a set of option values may not map to a variant. For example, a merchant may only sell length: 36 pants for color: blue, and any other color will have no associated variant for length: 36. This scenario may also occur for a combined listing if an option value for one combined listing child is not present on another.\n To enable themes to load the next variant state even if the selected option values have no associated variant, the Section Rendering API can accept the set of currently selected option value IDs when loading a product section:\n 1 GET /products/pants-green?option_values=<option_value_id_1>,...,<option_value_id_N>\n 2 or\n 3 GET /products/pants-green?option_values[]=<option_value_id_1>&...&option_values[]=<option_value_id_N>\n Adding support for combined listings\n Note\n The product and product_list theme input settings don't currently support combined listing products.\n To support combined listings, your theme should use the variant pagination approach. Additionally, your theme must contain logic to refresh product information when switching between combined listing products.\n For example, a shop has a combined listing Pants with child products Pants - red and Pants - green. If a buyer lands on the Pants product and changes the color, then the theme should be updated to display information from the corresponding child product (price, images, description, etc). This can be accomplished by using the product_option_value.product_url property as the URL when calling the Section Rendering API.\n 1 <div data-section-id=\"{{ section.id }}\">\n 2\n    <input\n 3\n      type=\"radio\"\n 4\n      id=\"option_value_1\"\n 5\n      name=\"{{ option.name }}\"\n 6\n      value=\"{{ option_value | escape }}\"\n 7\n      data-product-url=\"{{ option_value.product_url }}\"\n 8\n      data-variant-id=\"{{ option_value.variant.id }}\"\n 9\n    />\n 10 </div>\n 11\n 12 <script>\n 13 document.getElementById('option_value_1').addEventListener('click', (event) => {\n 14\n    const {productUrl, variantId} = event.target.dataset;\n 15\n    const sectionId = event.target.closest('[data-section-id]').dataset.sectionId;\n 16\n 17\n    // call the section rendering api\n 18\n    fetch(`${productUrl}?section_id=${sectionId}&variant=${variantId}`)\n 19\n      .then((response) => response.text())\n 20\n      .then((responseText) => {\n 21\n         // update product information\n 22\n      });\n 23 });\n 24 </script>\n Example\n Putting it all together, a theme can load a minimal set of variants using the product_option_value.variant object, use the Section Rendering API to paginate variants using the option value selection, and support combined listings by replacing product content when a buyer switches to a sibling product. Here's a minimal example:\n 1 <section id=\"productSection\" data-section-id=\"{{ section.id }}\">\n 2\n    <div class=\"product\" data-product-url=\"{{ product.url }}\">\n 3\n      <h2>{{ product.title }}</h2>\n 4\n      <div class=\"price\">\n 5\n        {{ product.price | money }}\n 6\n      </div>\n 7\n      <!-- ...other product info... -->\n 8\n 9\n      <div class=\"optionValueSelectors\">\n 10\n 11\n        <!-- Use options_with_values to render options -->\n 12\n        {%- for option in product.options_with_values -%}\n 13\n          <fieldset class=\"option\">\n 14\n            <legend>{{ option.name }}</legend>\n 15\n 16\n            {%- for option_value in option.values -%}\n 17\n              {%- capture input_id -%}\n 18\n                {{ section.id }}-{{ option.position }}-{{ forloop.index0 -}}\n 19\n              {%- endcapture -%}\n 20\n 21\n              <!-- Use product_option_value` fields to simplify option value input rendering and support combined listings -->\n 22\n              <input\n 23\n                type=\"radio\"\n 24\n                id=\"{{ input_id }}\"\n 25\n                name=\"{{ option.name }}\"\n 26\n                value=\"{{ option_value | escape }}\"\n 27\n                {% if option_value.selected %}\n 28\n                  checked\n 29\n                {% endif %}\n 30\n                {% unless option_value.variant.available %}\n 31\n                  class=\"disabled\"\n 32\n                {% endunless %}\n 33\n                data-product-url=\"{{ option_value.product_url }}\"\n 34\n                data-variant-id=\"{{ option_value.variant.id }}\"\n 35\n                data-option-value-id=\"{{ option_value.id }}\"\n 36\n              />\n 37\n 38\n              <label for=\"{{ input_id }}\">\n 39\n                {{ option_value -}}\n 40\n              </label>\n 41\n            {%- endfor -%}\n 42\n          </fieldset>\n 43\n        {%- endfor -%}\n 44\n      </div>\n 45\n    </div>\n 46 </section>\n 47\n 48 {% javascript %}\n 49\n    function onVariantChange({target: optionValueElement}) {\n 50\n      const productElement = this.querySelector('.product');\n 51\n      const sectionId = this.dataset.sectionId;\n 52\n      const oldProductUrl = productElement.dataset.productUrl;\n 53\n      const newProductUrl = optionValueElement.dataset.productUrl;\n 54\n      const newVariantId = optionValueElement.dataset.variantId;\n 55\n 56\n      let params = `section_id=${sectionId}&`;\n 57\n      if (newVariantId) {\n 58\n        // if the option value has a variant selection, call the section rendering api for that variant\n 59\n        params += `variant=${newVariantId}`;\n 60\n      } else {\n 61\n        // if the option value selection has no variant, call the section rendering api with the selected option value IDs instead\n 62\n        const selectedOptionValues = Array.from(this.querySelectorAll('fieldset input:checked')).map((element) => element.dataset.optionValueId).join(',');\n 63\n        params += `option_values=${selectedOptionValues}`;\n 64\n      }\n 65\n 66\n      // call the section rendering api\n 67\n      fetch(`${newProductUrl}?${params}`)\n 68\n        .then((response) => response.text())\n 69\n        .then((responseText) => {\n 70\n          const html = new DOMParser().parseFromString(responseText, 'text/html');\n 71\n 72\n          if (oldProductUrl !== newProductUrl) {\n 73\n            // (combined listings) if the product changed, replace the product section with the new product section\n 74\n            productElement.parentNode.insertBefore(html.querySelector('.product'), productElement);\n 75\n            productElement.remove();\n 76\n 77\n            // focus the input for the last clicked option value\n 78\n            this.querySelector(`#${optionValueElement.id}`).focus();\n 79\n 80\n            // ... update anything else that depends on product (url, recommended products, etc) ...\n 81\n            return;\n 82\n          }\n 83\n 84\n          this.querySelector('.optionValueSelectors').innerHTML = html.querySelector('.optionValueSelectors').innerHTML;\n 85\n          this.querySelector(`#${optionValueElement.id}`).focus();\n 86\n 87\n          const priceEl = this.querySelector('.price');\n 88\n          if (hasVariant) {\n 89\n            priceEl.innerHTML = html.querySelector('.price').innerHTML;\n 90\n            // ... update additional states ...\n 91\n          } else {\n 92\n            priceEl.innerHTML = '';\n 93\n            // ... set additional unavailable states ...\n 94\n          }\n 95\n        });\n 96\n    }\n 97\n 98\n    document.getElementById('productSection').addEventListener('change', onVariantChange);\n 99 {% endjavascript %}\n UX Considerations - Availability\n When using the approach detailed in the example, option value availability is determined in relation to the currently selected variant.\n A buyer lands on a product with variant blue/30/30 selected. The variants blue/32/30 and blue/30/32 are sold out, and are shown as struck through:\n The buyer wants pants of length:32 and waist:30, so they select length:32. This variant is sold out, so the selected color, length, and waist are struck through.\n The buyer can see that their size is available in other colors, and switches to the black pants.",
                    "filename": "docs/themes/product-merchandising/variants/combined-listings/content.txt",
                    "start_index": 0,
                    "end_index": 12947,
                    "start_line": 1,
                    "end_line": 320,
                    "max_line": 330,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "app/routes/products.$handle.jsx\n 1 <ProductOptions options={product.options} />\n 2 <div\n 3\n    className=\"prose border-t border-gray-200 pt-6 text-black text-md\"\n 4\n    dangerouslySetInnerHTML={{ __html: product.descriptionHtml }}\n 5 />\n Reload your page and click on some links. You should see the URL change, but the page doesn't reload. This is React Router taking control and loading your updated state.\n You still need to update the loader function to recognize our URL parameters and update the data, which is covered in the next section.\n Update the Loader\n As well as params and context, the loader also has access to the request object. You'll need the searchParams from the request URL.\n Remix\n Did you know that Remix uses Web Standard Request APIs? In fact, Remix makes use of many web standards so you won't need to learn a new and custom way of doing familiar work.\n Use the following code to update the loader function in your product route to pull in the request and format the options data for the Storefront API.\n app/routes/products.$handle.jsx\n 1 export async function loader({params, context, request}) {\n 2\n    const {handle} = params;\n 3\n    const searchParams = new URL(request.url).searchParams;\n 4\n    const selectedOptions = [];\n 5\n 6\n    // set selected options from the query string\n 7\n    searchParams.forEach((value, name) => {\n 8\n      selectedOptions.push({name, value});\n 9\n    });\n 10\n 11\n    const {product} = await context.storefront.query(PRODUCT_QUERY, {\n 12\n      variables: {\n 13\n        handle,\n 14\n        selectedOptions,\n 15\n      },\n 16\n    });\n 17\n 18\n    if (!product?.id) {\n 19\n      throw new Response(null, {status: 404});\n 20\n    }\n 21\n 22\n    return json({\n 23\n      product,\n 24\n    });\n 25 }\n This updated code takes the search params and creates a selectedOptions array of objects that's passed to the PRODUCT_QUERY.\n Tip\n Pay close attention to the searchParams.forEach() loop. The web standard URLSearchParams object passes the value, and then the key to the function. This code block names them as value and name as required by the Storefront API selectedOptionInput input\n Now, you can update your PRODUCT_QUERY to get a selected variant from the selectedOptions data:\n 1 const PRODUCT_QUERY = `#graphql\n 2\n    query product($handle: String!, $selectedOptions: [SelectedOptionInput!]!) {\n 3\n      product(handle: $handle) {\n 4\n        id\n 5\n        title\n 6\n        handle\n 7\n        vendor\n 8\n        description\n 9\n        descriptionHtml\n 10\n        featuredImage{\n 11\n          id\n 12\n          url\n 13\n          altText\n 14\n          width\n 15\n          height\n 16\n        }\n 17\n        options {\n 18\n          name,\n 19\n          values\n 20\n        }\n 21\n        selectedVariant: variantBySelectedOptions(selectedOptions: $selectedOptions) {\n 22\n          id\n 23\n          availableForSale\n 24\n          selectedOptions {\n 25\n            name\n 26\n            value\n 27\n          }\n 28\n          image {\n 29\n            id\n 30\n            url\n 31\n            altText\n 32\n            width\n 33\n            height\n 34\n          }\n 35\n          price {\n 36\n            amount\n 37\n            currencyCode\n 38\n          }\n 39\n          compareAtPrice {\n 40\n            amount\n 41\n            currencyCode\n 42\n          }\n 43\n          sku\n 44\n          title\n 45\n          unitPrice {\n 46\n            amount\n 47\n            currencyCode\n 48\n          }\n 49\n          product {\n 50\n            title\n 51\n            handle\n 52\n          }\n 53\n        }\n 54\n        variants(first: 1) {\n 55\n          nodes {\n 56\n            id\n 57\n            title\n 58\n            availableForSale\n 59\n            price {\n 60\n              currencyCode\n 61\n              amount\n 62\n            }\n 63\n            compareAtPrice {\n 64\n              currencyCode\n 65\n              amount\n 66\n            }\n 67\n            selectedOptions {\n 68\n              name\n 69\n              value\n 70\n            }\n 71\n          }\n 72\n        }\n 73\n      }\n 74\n    }\n 75 `;\n The variantBySelectedOptions returns the selected variant based on the option values that you retrieved from the URL. You can test the return by adding a line below <ProductOptions/> to print out the selected variant ID:\n app/routes/products.$handle.jsx\n 1 <ProductOptions options={product.options} />\n 2 {/* Delete this after verifying */}\n 3 <p>Selected Variant: {product.selectedVariant?.id}</p>\n Click on some options to see the selected variant ID change. After you have verified, you can remove the selected variant line of code.\n Right now you can't visually see which options are selected. You will fix this in the next section.\n Display the selected variant's image\n Update the product image to display the selected variant's image (if available).\n app/routes/products.$handle.jsx\n 1 <Image\n 2\n    className={`w-full h-full aspect-square object-cover`}\n 3\n    data={product.selectedVariant?.image || product.featuredImage}\n 4 />\n Update the product options UI\n URL query parameters hold your state, so you can refer to these parameters to determine the selected option. You can read these parameters with Remix's useSearchParams() hook. Update your logic so that it loops over each option to add a dark underline to selected <Link> elements.\n app/components/ProductOptions.jsx\n 1 import {Link, useLocation,useSearchParams} from '@remix-run/react';\n 2\n 3 export default function ProductOptions({options}) {\n 4\n    const {pathname, search} = useLocation();\n 5\n    const [currentSearchParams] = useSearchParams();\n 6\n 7\n    const searchParams = currentSearchParams;\n 8\n 9\n    return (\n 10\n      <div className=\"grid gap-4 mb-6\">\n 11\n        {options.map((option) => {\n 12\n          if (!option.values.length) {\n 13\n            return;\n 14\n          }\n 15\n 16\n          // get the currently selected option value\n 17\n          const currentOptionVal = searchParams.get(option.name);\n 18\n          return (\n 19\n            <div\n 20\n              key={option.name}\n 21\n              className=\"flex flex-col flex-wrap mb-4 gap-y-2 last:mb-0\"\n 22\n            >\n 23\n              <h3 className=\"whitespace-pre-wrap max-w-prose font-bold text-lead min-w-[4rem]\">\n 24\n                {option.name}\n 25\n              </h3>\n 26\n 27\n              <div className=\"flex flex-wrap items-baseline gap-4\">\n 28\n                {option.values.map((value) => {\n 29\n                  const linkParams = new URLSearchParams(searchParams);\n 30\n                  const isSelected = currentOptionVal === value;\n 31\n                  linkParams.set(option.name, value);\n 32\n                  return (\n 33\n                    <Link\n 34\n                      key={value}\n 35\n                      to={`${pathname}?${linkParams.toString()}`}\n 36\n                      preventScrollReset\n 37\n                      replace\n 38\n                      className={`leading-none py-1 border-b-[1.5px] hover:no-underline cursor-pointer transition-all duration-200 ${\n 39\n                        isSelected ? 'border-gray-500' : 'border-neutral-50'\n 40\n                      }`}\n 41\n                    >\n 42\n                      {value}\n 43\n                    </Link>\n 44\n                  );\n 45\n                })}\n 46\n              </div>\n 47\n            </div>\n 48\n          );\n 49\n        })}\n 50\n      </div>\n 51\n    );\n 52 }\n Optimistic UI\n Now you have an option selector that responds to URL changes, but the link underline doesn't update immediately.\n This delay happens because Remix is responding to the URL change, running the loader() function, and passing that data down to the React component. Even when all servers and APIs are fast, this process isn't instant. Because you know that the selection will usually be successful, you can update the UI without waiting for a server response. Remix's Optimistic UI pattern is perfect for this use case. Next you'll add the useNavigation() hook and update the logic that reads the search parameters.\n Import useNavigation at the top of your ProductOptions.jsx file:\n app/components/ProductOptions.jsx\n 1 import {\n 2\n    Link,\n 3\n    useLocation,\n 4\n    useSearchParams,\n 5\n    useNavigation,\n 6 } from '@remix-run/react';\n Insert the following code at the top of your ProductOptions function:\n app/components/ProductOptions.jsx\n 1 const navigation = useNavigation();\n Replace the searchParams value:\n app/components/ProductOptions.jsx\n 1 // Update the in-flight request data from the 'navigation' (if available)\n 2 // to create an optimistic UI that selects a link before the request completes\n 3 const searchParams = navigation.location\n 4\n    ? new URLSearchParams(navigation.location.search)\n 5\n    : currentSearchParams;\n Reload the page and make some option selections. The image changes and the underline selections are now instant, even when the loader is still working to update the data.\n Here is your complete ProductOptions component:\n app/components/ProductOptions.jsx\n 1 import {\n 2\n    Link,\n 3\n    useLocation,\n 4\n    useSearchParams,\n 5\n    useNavigation,\n 6 } from '@remix-run/react';\n 7\n 8 export default function ProductOptions({options}) {\n 9\n    const {pathname, search} = useLocation();\n 10\n    const [currentSearchParams] = useSearchParams();\n 11\n    const navigation = useNavigation();\n 12\n 13\n    // Update the in-flight request data from the 'navigation' (if available)\n 14\n    // to create an optimistic UI that selects a link before the request completes\n 15\n    const searchParams = navigation.location\n 16\n      ? new URLSearchParams(navigation.location.search)\n 17\n      : currentSearchParams;\n 18\n 19\n    return (\n 20\n      <div className=\"grid gap-4 mb-6\">\n 21\n        {options.map((option) => {\n 22\n          if (!option.values.length) {\n 23\n            return;\n 24\n          }\n 25\n 26\n          // get the currently selected option value\n 27\n          const currentOptionVal = searchParams.get(option.name);\n 28\n          return (\n 29\n            <div\n 30\n              key={option.name}\n 31\n              className=\"flex flex-col flex-wrap mb-4 gap-y-2 last:mb-0\"\n 32\n            >\n 33\n              <h3 className=\"whitespace-pre-wrap max-w-prose font-bold text-lead min-w-[4rem]\">\n 34\n                {option.name}\n 35\n              </h3>\n 36\n 37\n              <div className=\"flex flex-wrap items-baseline gap-4\">\n 38\n                {option.values.map((value) => {\n 39\n                  const linkParams = new URLSearchParams(searchParams);\n 40\n                  const isSelected = currentOptionVal === value;\n 41\n                  linkParams.set(option.name, value);\n 42\n                  return (\n 43\n                    <Link\n 44\n                      key={value}\n 45\n                      to={`${pathname}?${linkParams.toString()}`}\n 46\n                      preventScrollReset\n 47\n                      replace\n 48\n                      className={`leading-none py-1 border-b-[1.5px] cursor-pointer hover:no-underline transition-all duration-200 ${\n 49\n                        isSelected ? 'border-gray-500' : 'border-neutral-50'\n 50\n                      }`}\n 51\n                    >\n 52\n                      {value}\n 53\n                    </Link>\n 54\n                  );\n 55\n                })}\n 56\n              </div>\n 57\n            </div>\n 58\n          );\n 59\n        })}\n 60\n      </div>\n 61\n    );\n 62 }\n Step 6: Set a default variant\n You might notice that a fresh product page has no options selected. You can update your loader to use a default variant so there is always an orderable product available on the page.\n The PRODUCT_QUERY already gets the first variant for you with the variants(first: 1) query filter. You can use that data to update the logic in your loader() function. You'll need to make updates in 4 places:\n Create a new selectedVariant value in the loader\n Destructure it from useLoaderData() in your ProductHandle JSX function\n Pass the selectedVariant to the ProductOptions component\n Update the logic in ProductOptions to set the selected default value\n Update the loader\n Add the following code to the bottom of the loader function, replacing the return statement:\n app/routes/products.$handle.jsx\n 1 // Set a default variant so you always have an \"orderable\" product selected\n 2 const selectedVariant =\n 3\n    product.selectedVariant ??",
                    "filename": "docs/custom-storefronts/hydrogen/building/product-details-page/content.txt",
                    "start_index": 11385,
                    "end_index": 23644,
                    "start_line": 19,
                    "end_line": 895,
                    "max_line": 1215,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Overview\n Getting started\n Create a subscription\n UX guidelines\n Overview\n Upsell\n Subscriptions\n Payments\n Thank you and Order status\n Localized UI extensions\n UX guidelines for post-purchase upsells\n Beta\n Post-purchase checkout extensions are in beta and can be used without restrictions in a development store. To use post-purchase extensions on a live store, you need to request access.\n When you design a post-purchase upsell, a great customer-facing user experience (UX) and merchant experience are important to the success of our merchants. The post-purchase upsell page should represent the merchant well and protect their brand\u2019s trust.\n User experience\n To provide a great post-purchase experience and to help the merchant gain trust from customers, implement the following UX principles in your post-purchase checkout extension:\n Be transparent about all the costs involved in a purchase.\n Present clear options to accept or refuse upsell offers without pressuring customers.\n Display a maximum of two consecutive upsell offers.\n Present relevant products by tailoring upsell offers to the shopping behaviors and preferences of customers.\n Provide default copy that addresses customers directly using a voice that's appropriate for any store, regardless of brand personality.\n Header and footer\n The styling of the header and footer is consistent across every post-purchase page:\n Header: Confirms the payment of the initial purchase of the order. Customers can also directly access their full order confirmation (and bypass the upsell offer pages) using the View order confirmation button.\n Footer: Contains links to the privacy policy, terms of service, and refund policy.\n Note\n You can't adjust the header and footer components.\n Required components\n App Bridge Checkout provides many powerful UI components that a rendering extension can use to build an interface. The App Bridge Checkout UI components are rendered natively by Shopify, so you can depend on them to be performant, accessible, and functional in all of the checkout\u2019s supported browsers.\n Before you integrate your post-purchase app into checkout, familiarize yourself with the UI guidelines and best practices for the following required components:\n Callout banner\n Product title and price\n Product image\n Price breakdown\n Call to action buttons\n Callout banner\n A callout banner encourages customers to take action on a post-purchase upsell. Use the App Bridge Checkout CalloutBanner to implement this component:\n Place a callout banner near the top of the page to let the customer know what the upsell offer is. Provide strong default copy in your app to encourage merchants to be explicit about the upsell offer.\n Do Don't\n Lead with clear text that explains what a customer can add to the order they've placed. For example: It\u2019s not too late to add to your order.\n Include the product name and the discount associated with it.\n Use exclamation points. For example: \"Wait! Before time runs out!\n Use misleading language that makes the upsell offer feel compulsory or introduces doubt about the status of the order.\n Product title and price\n The product must have the same title and price that it has on the merchant\u2019s store. Keep this consistent to maintain a customer\u2019s trust if they compare. Place the price of the product directly below the product title.\n If the post-purchase product is an upsell offer at a discounted price, then do the following:\n Strike out the original price of the product.\n Display the discounted price next to the original price so that the relationship is clear.\n Product image\n The product image represents the product being offered to the customer in the post-purchase upsell offer. Use the App Bridge Checkout Image component to add an image:\n ADDING MULTIPLE IMAGES\n If the upsell offer includes multiple images, then the images need to be easy to navigate and provide additional context to the customer. Images can be presented using different angles or sizes.\n Note\n There isn't an App Bridge Checkout component available for a carousel feature.\n Do Don't\n Use 48px previous and next arrow buttons.\n Give customers options to swipe between images, navigate using the keyboard, or click on a thumbnail to navigate to the next image.\n Make additional images responsive across screen sizes.\n Implement auto-scrolling through the images, as this might overwhelm customers.\n Price breakdown\n The post-purchase price breakdown shows the total cost of the upsell offer that the customer is accepting. The breakdown needs to be placed under the variant and quantity pickers. The breakdown also needs to dynamically update to reflect price changes if the customer adjusts the product's quantity or variants.\n STRUCTURE OF THE PRICE BREAKDOWN\n The price breakdown needs to include the following:\n Money line: An individual breakdown of costs.\n Subtotal: The total before shipping and taxes have been included.\n Shipping: The total shipping cost for the item(s).\n Taxes: The added cost of goods or services.\n Money summary: The combined total of the subtotal, shipping, and taxes.\n If your product description is long enough that a customer can't see the price breakdown without scrolling, then you need to include a copy of the price breakdown at the end of your product description.\n Call to action buttons\n A call to action button allows a customer to accept or decline an upsell offer. Use the App Bridge Checkout Button component to implement call to action buttons.\n ACCEPT BUTTON\n The accept button is the primary action on the post-purchase upsell page.\n Use the following text for the accept button:\n [Pay now \u2022 Product total price]\n If the product you are offering is free, then use the following text:\n [Add now \u2022 Free] or [Add now \u2022 $0]\n Note\n Don't give merchants the option to change the button text. However, you can translate the button text to any language that you want to support.\n CONFIRMING ACCEPTED UPSELL OFFERS\n Use the App Bridge Checkout Banner component to display a confirmation message when a customer accepts an upsell offer. For example: [Your order has been updated].\n Customers might not expect the accept button to generate a payment immediately because the convention is for \"buy now\" actions to trigger an additional confirmation step. To clarify that there is no additional confirmation step, do the following:\n Add a summary modal to confirm whether the customer wants to proceed.\n Add additional help text directly under the accept button informing the customer that they'll be charged immediately.\n DECLINE BUTTON\n The decline button needs to be placed under the accept button and should be less visually prominent than the accept button. However, despite being less visually prominent, the decline button should still be easy to see so that the merchant can easily decline the upsell offer. The decline button must contain the text [Decline upsell offer].\n Optional components\n In addition to the required components, you can add the following optional components to the post-purchase page:\n Product description\n Variant picker\n Quantity picker\n Product description\n The product description provides a summary of the key features of the product being displayed in the product image (or images).\n Use the TextBlock, TextContainer and Text App Bridge Checkout components to implement a product description.\n All upsell offers should have a product description that accurately summarizes the product features. Encourage merchants using your app to keep the product description as short as possible.\n LENGTHY PRODUCT DESCRIPTIONS\n If the product description is so long that it pushes the rest of the components down (variant picker, quantity picker, price breakdown, and buttons, then divide it into the following two parts:\n A summary description that reveals all other components without scrolling\n A longer, more detailed description below the other components\n Variant picker\n If the product has several variants (for example, size or color), then the page needs to include a variant picker under the product description. Use the App Bridge Checkout Select component to implement a variant picker.\n Label the picker with the name of the variant and the variant values. For example, Size: S, M, L, XL. If your product has several sizes, then consider linking to a size chart.\n Quantity picker\n The quantity picker should be placed below the product description to allow customers to adjust the quantity of a product.\n The quantity picker needs to be a number stepper that's set to 1 as a default. Use the label [Quantity].\n Post-purchase app selector\n Merchants need to enable their post-purchase app in the Shopify admin checkout settings. If there are multiple post-purchase apps installed, then they can also use the checkout settings to select which post-purchase app they want to enable on the post-purchase page.\n We recommend that you let merchants know that they might need to manually select your app to be active in the checkout settings. You could explain this in installation instructions or in your help pages.\n Your can check whether or not it is currently selected, using the following GraphQL Query:\n 1 {\n 2\n    app  {\n 3\n        isPostPurchaseAppInUse\n 4\n    }\n 5 }\n Suggested merchant-facing content for your app:\n You could use the following copy as the basis for a merchant-facing message about multiple post-purchase extensions:\n \"If you already have a post-purchase app installed, you must manually select to make [app-name] active. You can do this in the Shopify admin checkout settings. This option only shows if you already have a post-purchase app installed.\"\n Performance consideration\n To guarantee a good experience for both merchants and customers, we strongly recommend that you prioritize performance when building your extensions. You can depend on App Bridge Checkout UI components to be performant, accessible, and functional in all of the checkout's supported browsers. Keep the following guidelines in mind when building your app:\n Network calls must complete in two seconds or less.\n Network calls that occur before an interface presents to the customer must happen in the ShouldRender handler.\n Render must not require a network call before an interface presents to the customer. Ensure the extension caches required data beforehand using the storage API from ShouldRender.\n Next steps\n Learn how to create a post-purchase upsell.\n Explore UX guidelines for the entire checkout experience.\n For general best practices for developing apps, refer to Best practices for building Shopify apps.\n For practical guidance on how to design a user interface for the Shopify admin, refer to Shopify's App Design Guidelines.\n Get familiar with Polaris accessibility and content guidelines.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n User experience\n Post-purchase app selector\n Performance consideration\n Next steps\n Updates & News\n Developer changelog",
                    "filename": "docs/apps/checkout/product-offers/post-purchase/ux-guidelines/upsell/content.txt",
                    "start_index": 0,
                    "end_index": 10936,
                    "start_line": 1,
                    "end_line": 140,
                    "max_line": 140,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Discounts\n Subscriptions\n Pre-orders and Try Before You Buy\n Overview\n Add pre-orders and TBYB to your theme\n Pre-orders and TBYB UX guidelines\n Shop Pay Installments\n Accelerated checkout\n B2B\n Unit pricing\n Pre-orders and Try Before You Buy (TBYB) UX guidelines\n A great customer-facing user experience (UX) for pre-orders and TBYB is important for the success of our merchants because it enables them to offer customers a more flexible purchasing process.\n A pre-order or a TBYB is any transaction where the payment or fulfillment doesn't happen at the time of purchase.\n This guide explains the key principles and component-level guidelines for implementing pre-order and TBYB UIs. and TBYB user interfaces (UIs).\n User experience principles\n To provide a good experience with pre-order or TBYB options and gain trust from customers, make sure to implement the following UX principles:\n Be clear and up front about important information: Customers should be able to clearly identify the options and make a choice, such as try now, pay later.\n Provide clarity around money: Customers should be able to clearly identify how much they will pay at checkout, the total cost of the product, when they\u2019ll be charged a remaining balance amount (when applicable), and when their payment method will be charged.\n Offer as much clarity around delivery timelines as possible: When possible, provide exact dates or a range, if exact dates are unavailable, for when customers can expect to receive their products, or the duration of the trial period.\n Provide a seamless integration: The UI for options should be integrated into the theme\u2019s existing design system.\n Use clear language: Use language that customers can understand and that refers to the actual purchase terms. For example, use \"pre-order\", \"back-order\", and \"TBYB\".\n User interface guidelines\n Before you integrate your pre-order and TBYB options app into a theme, familiarize yourself with the UX guidelines and best practices that are associated with each component.\n Apps should consider that products with different ways of purchasing are displayed in the following places on the online store:\n Product pages\n Collection pages\n Search results\n Featured product sections on the home page\n Quick view modals on product cards\n When customers can see available ways of purchasing at relevant points in the shopping process, they're more likely to utilize them. Ensure that all relevant information is always included, such as the deposit amount and fulfillment date, estimate for pre-orders, or the trial period length for TBYB.\n Pre-order and TBYB information is displayed in the following components of the online store:\n Product forms\n Cart items\n Order details\n The following sections include guidance for displaying prices, styling UI components for pre-orders and TBYB, and presenting multiple purchasing options. In each section, the relevant Liquid properties that are required to create each component are also referenced.\n Product forms\n The product form enables a customer to select their pre-order or TBYB option. This form is where the merchant can provide clarity and more details for a product and its available variants. Product forms are used in product pages, featured product sections on home pages, and quick view modals on product cards.\n The subcomponents of a product form include the following:\n A. Price\n B. Selling plan selection\n C. Selling plan details\n D. Main call-to-action\n Example: Product form (pre-order)\n Example: Product form (TBYB)\n A. Price\n Customers should be able to clearly identify the full price of the product, and the type of purchasing option that the product is.\n Example: Price (pre-order)\n Product form: Price\n # UI element Liquid properties and information UI guidelines\n 1 Price price Reflect the price details from the selected pre-order.\n 2 Pre-order badge selling_plan_group.name\n \n Reflect the price details from the selected pre-order. Provide a contextual pre-order badge or label to help differentiate against a one-time pre-order. The badge or label will help customers quickly understand that this product can be bought as a pre-order.\n Pricing patterns\n Pre-orders and TBYB options don\u2019t usually come with savings to encourage customers to purchase products.\n Tip\n Pricing for pre-orders often requires a deposit. Don't use visual styling that suggests money saving pricing tactics, such as price strikethroughs, to represent the full price of a product in relation to the initial deposit. Instead, simply display the full price, and if the pre-order product requires a deposit, display the deposit price elsewhere on the page.\n Main price component\n The main price component should always display the total cost of an item. When a customer selects a selling plan or a product variant, the main price component should reflect their changes.\n To help customers understand what purchasing option they have selected, do the following:\n Clearly display the product's full price.\n Add the appropriate pre-order or TBYB badge to the component to help clarify to customers that they aren't buying a regular one-time product.\n Example: Main price component (pre-order)\n Example: Main price component (TBYB)\n B. Selling plan selection\n Customers should be able to clearly identify their pre-order or TBYB options.\n Example: Selling plan selection (pre-order)\n Example: Selling plan selection (TBYB)\n Selling plan selection\n # UI element Liquid properties and information UI guidelines\n 1 Purchase options product.selling_plan_groups One-time purchases and selling plan groups are considered different types of purchasing options. Use the term **Purchase options** in your own designs.\n 2 One-time purchase product.requires_selling_plan\n \n If the property is false, then at least one variant can be purchased as a one-time purchase, and the one-time purchase option should be presented in the UI. Group behavior\n \n On the first page load, select the one-time option by default. When the customer interacts with the UI, consider collapsing the unselected group to make good use of the space. Disable the selling plan group selection when it isn\u2019t available for a given variant.\n \n Group layout\n \n Prioritize displaying purchasing options in a vertically stacked list to make them readable on all devices. When displayed side-by-side, the information can be crowded on smaller screens.\n \n Group style\n \n Consider displaying purchasing options as radio inputs instead of buttons. Buttons can easily compete with the product form\u2019s call-to-action. For example, a submit button.\n 3 Selling plan group name selling_plan_group.name\n \n Always make this value visible. For more information, refer to selling_plan_group.name.\n 4 Selling plan option value selling_plan_option.value Don\u2019t express exact prices in option values, such as \u201c$50 deposit\u201d, because the values won\u2019t be accurate if the currency changes.\n \n Expressing percentages is possible because they stay consistent even if the currency changes. For more information refer to Considerations for currency switching and price rounding.\n Purchase option label\n Show the Purchase options label when the following conditions apply:\n A one-time purchase exists and there's at least one sellingPlanGroup object.\n A one-time purchase isn't available, but there are multiple sellingPlanGroup objects of different types.\n Shopify doesn't show the Purchase options label when the following conditions apply:\n There are no selling plan groups.\n The product can only be purchased with a selling plan and there's only one selling plan group. In this case, the sellingPlanGroup name remains in its position, but without the radio input.\n Selling plan group name\n Selling plan names should make clear the benefit of choosing that option. For example, \"Pre-order\".\n Because the SellingPlan object can be associated with multiple selling plan groups on a product, selling plan group names are used to differentiate purchase options.\n Display selling plan option values\n All the option values must be displayed at a glance from a group. Consider adapting the component layout to optimize readability.\n Components should adapt to the number of options being shown. When there are many options to choose from, an appropriate component should be selected to enable customers to view all options easily. When there are fewer options, a different component may be used. When possible, apply the appropriate layout to all values within a selling plan group for consistency:\n Four options or less: Show each option as a radio button to allow customers to view what\u2019s available.\n More than four options: Use a select dropdown to emphasize the customer's selection and hide other options within the collapsed dropdown.\n UI UPDATE ON VARIANT CHANGE\n A product\u2019s variants might not all support the same purchasing options. As a customer changes their variant selection, the components should update to make clear which options are available and unavailable.\n When a selected option within a selling plan group is unavailable, the following events should happen:\n The unavailable options are unselected, and the customer must make a new selection to successfully submit the form.\n The unavailable options for the selected variant are disabled.\n The form submission button is enabled. Disabling the button removes the ability to display an error message and instead displays the product as unavailable, which is false. Let the customer click the button but prevent them from adding the product to the cart. Then, anchor and scroll back to the faulty UI area and display a message that describes why the process can't complete and what the customer needs to do to proceed.\n C. Selling plan details\n Display important deferred pre-order and TBYB terms and selections to customers. The summary confirms a customer's selections, shows any conditions, and helps build trust in the brand.\n Example: Selling plan details (pre-order)\n Selling plan details\n # UI element Liquid properties and information UI guidelines\n 1 Selling plan description selling_plan.description Don't express exact prices in option values, for example, \"$100 deposit\". For more information, refer to Considerations for currency switching and price rounding.\n \n Consider including a link to the returns or billing policies in the description. Merchants might have more detailed policies that need to be accessed by customers.\n D. Main call-to-action\n Having a call-to-action (main button text) that reflects the purchasing option type helps customers differentiate between a pre-order or a TBYB and a one-time purchase, even if there's only one option available.\n Example: Shop has accelerated checkout (pre-order and TBYB)\n Example: Shop doesn\u2019t have accelerated checkout (pre-order and TBYB)\n Main call-to-action\n # UI element Liquid properties and information UI guidelines\n 1 Call-to-action On first page load, if the product requires a selling plan or one is selected, then switch the call-to-action string to something purchase option-specific that merchants can customize. Update the call-to-action label to the dynamic checkout button for a deferred purchase option, and keep the add to cart button as is.\n Cart items\n Each pre-order or TBYB option item displays the most important details to help customers understand their purchase.\n For pre-order items, make sure that the customer understands the fulfillment date and relevant payment information, such as a deposit amount and future payments.\n For TBYB items, customers should see the trial period length. The price should also match what's represented on the product page.\n A cart item includes the following subcomponents:\n Cart page\n Cart notification\n Cart page\n Customers tend to scan the cart page and review the information before proceeding to checkout, so it\u2019s important that the following elements are clearly represented.\n Example: Cart page (pre-order)\n Example: Cart page (TBYB)\n Cart page\n # UI element Liquid properties and information UI guidelines\n 1 Selling plan information line_item.selling_plan_allocation.selling_plan.name\n \n Use selling_plan.name in the cart line item. This same text is used at checkout. For more information, refer to Using the selling plan name. Because the selling plan name is meant to accurately summarize the deferred purchase option, don't list the individual selling plan option values alongside the selling plan name.\n 2 Price price Display the full price of the product so that the customer is reminded of the total cost of the item they\u2019re buying.\n 3 Price at checkout selling_plan.checkout_charge.value The price customers will pay at checkout.\n \n For pre-order items, this price usually represents the deposit amount.\n \n For TBYB items, the price will usually be $0 to indicate to customers that they won\u2019t need to pay anything at checkout.\n Cart notification\n The cart notification returns information about the item that was just added to the cart.\n Example: Cart notification (pre-order)\n Cart notification\n # UI element Liquid properties and information UI guidelines\n 1 Selling plan information line_item.selling_plan_allocation.selling_plan.name\n \n Use selling_plan.name in the cart line item. This same text is used at checkout. For more information, refer to Using the selling plan name. Because the selling plan name is meant to accurately summarize the deferred purchase option, don't list the individual selling plan option values alongside the selling plan name.\n 2 Price price Display the full price of the product so that the customer is reminded of the total cost of the item that they\u2019re buying.\n Using the selling plan name\n The selling_plan.name should be a succinct description of the selling plan that can be easily understood by customers. The text is displayed in multiple areas of the online store, such as cart line items, checkout, and past order details. The value is also displayed in the merchant\u2019s internal admin on order pages.\n Note\n The selling plan name shouldn't include any marketing text.\n Shopify doesn't control the value of the name, which means that merchants can enter any text value they want using an app.\n When creating selling plan names, implement the following recommended guidelines:\n State the type of deferred purchase option.\n Write the deposit amount and payment due date of the product in order for the customer to keep a reference of it throughout the purchase journey.\n Considerations for currency switching and price rounding\n Merchants can sell in multiple currencies on their online store.\n When a customer visits the online store, Shopify presents the currency that's determined appropriate for the customer. Online stores can offer a currency selector to customers to enable them to manually switch the currency. Shopify also offers a price rounding feature to merchants, which enables merchants to set custom rounding rules for converted prices.\n Note\n Any prices that are written in strings won't reflect currency switching or price rounding, and might be incorrect or misleading to customers.",
                    "filename": "docs/themes/pricing-payments/preorder-tbyb/preorder-tbyb-ux-guidelines/content.txt",
                    "start_index": 0,
                    "end_index": 15067,
                    "start_line": 1,
                    "end_line": 170,
                    "max_line": 200,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                }
            ]
        },
        "mmr_code_snippets_initial": [
            {
                "code": ": addonSettings is ProductAddonSettings {\n  return 'product' in addonSettings;\n}\ntype ProductAddonSettings = Extract<\n  UpcartSettings<'values'>['upcartEditorSettings']['addonsField']['productAddon'],\n  { active: boolean }\n>;\ntype ShippingProtectionAddonSettings = Extract<\n  UpcartSettings<'values'>['upcartEditorSettings']['addonsField']['shippingProtection'],\n  { active: boolean }\n>;\ntype AddonSettings = ProductAddonSettings | ShippingProtectionAddonSettings;\n\ninterface FetchedAddonProduct {\n  product: Product;\n  variant: Product['variants'][number];\n}\n\ntype AddonStateMachine =\n  | { state: AddonState.DISABLED; data: {}; actions: { handleEnable: () => void } }\n  | { state: AddonState.ENABLED; data: {}; actions: { handleDisable: () => void } }\n  | { state: AddonState.LOADING; data: { willBe: 'enabled' | 'disabled' | 'unknown' }; actions: {} };\n\n// NOTE: attributes_after_line_change\n//\n// The cart attributes are updated AFTER the cart change is applied. This is to avoid\n// a bug caused by other apps (e.g., Elevar) which try to update cart attributes after\n// we update cart attributes. If another app tries to update cart attributes when we are\n// changing line items, the line item change may not be applied (Shopify Ajax API limitation).\n// By doing the cart attribute update second, we avoid this race condition.\n//\n// The ultimate solution would be to enable our global fetch queue to prevent race conditions,\n// related to the setting `ajaxRaceConditionPrevention`. However, this is a risky change to\n// make for all stores. Instead, we can use this workaround for now.\n\nexport const AddonsModule = withErrorBoundary(UnsafeAddonsModule);",
                "filename": "web/storefront/src/modules/CartPopup/AddonsModule/AddonsModule.tsx",
                "start_index": 13420,
                "end_index": 15077,
                "start_line": 373,
                "end_line": 408,
                "max_line": 408,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n        //skip empty upsells\n        if (\n          (upsellItem.upsell.type === 'Product' && upsellItem.upsell?.products?.length === 0) ||\n          (upsellItem.upsell.type === 'Collection' && !upsellItem.upsell.collection)\n        )\n          return;\n\n        let atLeastOneTrigger = false;\n\n        if (upsellItem.trigger.on === 'all' || preview) {\n          atLeastOneTrigger = true;\n        } else {\n          //2.1 Search through every trigger to see if there is a match\n\n          if (upsellItem.trigger.selection.type === 'Product') {\n            upsellItem.trigger.selection.products.forEach((trigger) => {\n              const isTriggered = cartItems.some((cartItem) => {\n                let triggerId = trigger.id?.split('/')[4];\n                if (Number(cartItem.product_id) === Number(triggerId)) {\n                  // When the variants array is missing, we trigger on any variant for the product\n                  if (!trigger.variants) {\n                    return true;\n                    // when variants array is present, we trigger only on the variants specified\n                  } else if (\n                    //We need to check for both productId syntax since our storage is mixed\n                    trigger.variants.includes('gid://shopify/ProductVariant/' + cartItem.variant_id.toString()) ||\n                    trigger.variants.includes(cartItem.variant_id.toString())\n                  ) {\n                    return true;\n                  }\n                }\n                return false;\n              });\n              if (isTriggered) {\n                atLeastOneTrigger = true;\n              }\n            });\n          } else if (upsellItem.trigger.selection.type === 'Collection') {\n            const products = await platform.products.getProductByCollection({\n              handle: upsellItem.trigger.selection.collection.handle,\n            });\n\n            products.forEach((trigger: any) => {\n              const isTriggered = cartItems.some((cartItem) => {\n                let triggerId = trigger.id?.toString().replace('gid://shopify/Product/', '');\n                if (Number(cartItem.product_id) === Number(triggerId)) {\n                  return true;\n                }\n                return false;\n              });\n              if (isTriggered) {\n                atLeastOneTrigger = true;\n              }\n            });\n          }\n        }\n\n        //2.2 Expand each upsell product into seperate upsells",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 2117,
                "end_index": 4576,
                "start_line": 3,
                "end_line": 115,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<Modal.Section>\n            <Layout>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={GiftCardMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Rewards Module\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Show rewards in the cart such as a free shipping bar!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={CheckoutMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Upsells Module\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Add seamless in-cart upsells to boost your sales!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={AddProductMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Add-ons Module\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Show an add-on such as shipping protection or another product!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneThird>\n                <LegacyCard\n                  title={\n                    <LegacyStack>\n                      <Icon color=\"highlight\" source={PaintBrushMajor as IconSource} />\n                      <Text variant=\"headingMd\" as=\"h2\">\n                        Customizations\n                      </Text>\n                    </LegacyStack>\n                  }\n                  sectioned\n                >\n                  <p>Our team will help you customize with trust badges and more!</p>\n                </LegacyCard>\n              </Layout.Section>\n              <Layout.Section oneHalf>\n                <LegacyCard title=\"See previews below (click arrows to scroll)\" sectioned>\n                  <Carousel\n                    showArrows={true}\n                    showThumbs={false}\n                    showStatus={false}\n                    showIndicators={true}\n                    autoPlay={true}\n                    interval={7500}\n                    infiniteLoop={true}\n                    renderIndicator={(onClickHandler, isSelected, index, label) => {\n                      if (isSelected) {\n                        return (\n                          <li",
                "filename": "web/src/@components/common/ModuleUnlock/ModuleUnlock.tsx",
                "start_index": 2934,
                "end_index": 5930,
                "start_line": 91,
                "end_line": 166,
                "max_line": 295,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const handleSelection = async ({\n    selection,\n    isVariant,\n    parent,\n  }: {\n    selection: any;\n    parent?: any;\n    isVariant: boolean;\n  }) => {\n    if (isVariant) {\n      const parentItem = selectedItems.find((item: GqlProduct) => item.id === parent.id);\n      if (parentItem) {\n        // If the parent exists, add/remove it from the variant array.\n        let newItem = deepCopy(parentItem);\n\n        newItem.variants.edges = [\n          ...removeOrAddItem({ arr: newItem.variants.edges, item: selection, isVariant: true, isMulti: multiProduct }),\n        ];\n        if (newItem.variants.edges.length === 0) {\n          // If we just deselected the last variant, we also want to deselect the parent\n          setSelectedItems([...removeOrAddItem({ arr: selectedItems, item: parentItem, isMulti: multiProduct })]);\n        } else {\n          // In the normal case where we selected/deslected a single variant and we still\n          // have at least one selected, we only want to change the selected state of\n          // the variant, not the parent.\n\n          const newArray = replaceItem(selectedItems, parentItem, newItem);\n          setSelectedItems([...newArray]);\n        }\n      } else {\n        // If the parent does not exist, add the parent and remove all other variants\n        let parentCopy = deepCopy(parent);\n        parentCopy.variants.edges = [{ node: selection }];\n        setSelectedItems([...removeOrAddItem({ arr: selectedItems, item: parentCopy, isMulti: multiProduct })]);\n      }\n    } else {\n      // Not a variant, selection on top-level item\n\n      // Fetch all variants for the product\n      let productWithVariants = await fetchAllVariants(selection.id);\n      selection.variants = productWithVariants.variants;\n\n      if (multiProduct) {\n        //Select all variants\n        setSelectedItems([...removeOrAddItem({ arr: selectedItems, item: selection, isMulti: multiProduct })]);\n      } else {\n        //Single product - select only the first variant\n        let selectionCopy = deepCopy(selection);\n        const firstVariant = selectionCopy.variants.edges?.[0];\n        selectionCopy.variants.edges = firstVariant ? [firstVariant] : [];\n        setSelectedItems([...removeOrAddItem({ arr: selectedItems, item: selectionCopy, isMulti: multiProduct })]);\n      }\n    }\n  };\n\n  const statusBadge = (status) => {\n    if (status !== ProductStatus.Active) {\n      return (\n        <LegacyStack.Item>\n          <Badge status=\"warning\">{status}</Badge>\n        </LegacyStack.Item>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  const outOfStockBadge = (totalInventory) => {\n    if (totalInventory <= 0) {\n      return (\n        <LegacyStack.Item>\n          <Badge status=\"attention\">{'Out of Stock'}</Badge>\n        </LegacyStack.Item>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  const renderProductItem = (item: GqlProduct) => {",
                "filename": "web/src/@components/common/ProductSelectModal/ProductSelectModal.tsx",
                "start_index": 8382,
                "end_index": 11266,
                "start_line": 263,
                "end_line": 342,
                "max_line": 702,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "export interface UpsellV2SelectedCollection {\n  type: 'Collection';\n  collection: UpsellV2Collection;\n}\n\n/**\n * This can represent either a single collection or a list of products.\n * The `type` field determines which one is used..\n */\nexport type UpsellV2SelectedResources = UpsellV2SelectedProducts | UpsellV2SelectedCollection;\n\nexport type UpsellV2ResourceType = UpsellV2SelectedProducts['type'] | UpsellV2SelectedCollection['type'];\n\ninterface UpsellV2TriggerAll {\n  on: 'all';\n}\n\ninterface UpsellV2TriggerSpecific<TriggerResourceType extends UpsellV2SelectedResources = UpsellV2SelectedResources> {\n  on: 'specific';\n  selection: TriggerResourceType;\n}\n\nexport type UpsellV2Trigger<TriggerResourceType extends UpsellV2SelectedResources = UpsellV2SelectedResources> =\n  | UpsellV2TriggerAll\n  | UpsellV2TriggerSpecific<TriggerResourceType>;\nexport type UpsellV2TriggerOn = UpsellV2TriggerAll['on'] | UpsellV2TriggerSpecific['on'];\n\nexport interface UpsellV2Item<\n  TriggerResourceType extends UpsellV2SelectedResources = UpsellV2SelectedResources,\n  UpsellType extends UpsellV2SelectedResources = UpsellV2SelectedResources,\n> {\n  id: string;\n  v: 2;\n  trigger: UpsellV2Trigger<TriggerResourceType>;\n  upsell: UpsellType;\n}\n\nexport type RewardTierProduct = Pick<Product, 'id' | 'featuredImage' | 'title' | 'priceRangeV2' | 'variants'>;\n\nexport interface GeolocationPricing {\n  id: string;\n  countryCodes: Array<string>;\n  exclude: boolean;\n  tiers: Array<string>;\n}\n\nexport interface RewardTier {\n  targetType: RewardsTargetType;\n  minAmount: string;\n  itemCount: string;\n  textBeforeReachingForCartTotal: string;\n  textBeforeReachingForItemCount: string;\n  rewardDescription: string;\n  products: RewardTierProduct[];\n}\n\nexport type TrustBadgePosition = 'bottom' | 'top';\n\ninterface TrustBadges {\n  url: string;\n  position: TrustBadgePosition;\n}\n\nexport interface TieredRewards {\n  tiers: Array<RewardTier>;\n  geoLocationPricing: GeolocationPricing[];\n  rewardsAutoConvertCurrency: boolean;\n  rewardsGeoLocationEnabled: boolean;\n}\n\ninterface AddonsField {\n  shippingProtection:\n    | {\n        active: boolean;\n        productHandle: string | null;\n        defaultBehavior: boolean;\n      }\n    | false; // false is the old default value\n  productAddon:\n    | {\n        active: boolean;\n        productHandle: string | null;\n        product?: {\n          /**\n           * If null, the first variant should be used.\n           * If an array, it should have one item which is the selected variant ID.\n           */\n          variants: string[] | null;\n\n          /**\n           * Editor settings\n           */\n          handle: string;\n          shortId: string;\n          id: string;\n          title: string;\n          bodyHtml: string | null;\n          price: string;\n          image: string | null;\n        };\n        defaultBehavior: boolean;\n      }\n    | false; // false is the old default value\n}",
                "filename": "common/defaultMetafields.ts",
                "start_index": 2914,
                "end_index": 5819,
                "start_line": 121,
                "end_line": 563,
                "max_line": 567,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "export const CART_BUTTON_SELECTORS = [\n  PRIMARY_CART_BUTTON_SELECTOR,\n  'a[data-cart-toggle]',\n  \"#sticky-app-client div[data-cl='sticky-button']\",\n  'button.minicart-open',\n  '#cart-icon-bubble',\n  '.slide-menu-cart',\n\n  /**\n   * These two selectors have :not(svg) because these class names are sometimes used for\n   * SVG icons in other parts of the theme. See Linear issue BEAM-1362 for example.\n   *\n   * In general the actual cart opening icon is a div, span, li, or similar. It is not usually\n   * an SVG.\n   *\n   * If there is a case where the cart opening icon is an SVG and it has one of these class names,\n   * we should find a different unique selector for that case. Do not remove :not(svg) from these\n   * selectors.\n   */\n  '.icon-cart:not(svg)',\n  '.cart-icon:not(svg)',\n\n  /**\n   * DO NOT add this selector `.cart-button`. It will incorrectly select ATC buttons on some themes.\n   * This would prevent customers from adding items to the cart.\n   *\n   * See Linear issue BEAM-1447 for more details.\n   */\n  // '.cart-button', <--- BAD SELECTOR, BAD\n\n  '.cart-link:not(div.header-icons):not(ul)',\n  'button.header-cart-toggle',\n  'div.minicart__button',\n  'button.js-cart-button',\n  '.mini-cart-trigger',\n  \".shopping-cart a[href*='#cart']\",\n  '.header-menu-cart-drawer',\n  '.js-mini-cart-trigger',\n  '#CartButton-Desktop',\n  '#CartButton',\n];\n\nexport const ATC_FORM_SELECTOR = 'form[action*=\"/cart/add\"]';\n\n// for the add to cart buttons\nexport const ADD_TO_CART_BUTTON = [ATC_FORM_SELECTOR];\n\nexport const ADD_TO_CART_BUTTON_EXCEPTION = [\n  \"button[id*='so-btn-add-to-cart']\",\n  `${ATC_FORM_SELECTOR} input[data-btn-addtocart]`,\n  `${ATC_FORM_SELECTOR} input[id='product-add-to-cart']`,\n  `${ATC_FORM_SELECTOR} button[data-product-id]:not([data-checkout=\"checkout\"])`,\n  `${ATC_FORM_SELECTOR} button[data-checkout=\"cart\"]`,\n  `${ATC_FORM_SELECTOR} button[type='submit'][name='add']`,\n  `${ATC_FORM_SELECTOR} button[id='pre_order_custom']`,\n  `${ATC_FORM_SELECTOR} button[class='btn-addtocart']`,\n  `${ATC_FORM_SELECTOR} button[class='addtocart-js']`,\n  `${ATC_FORM_SELECTOR} div[class='addCart']`,\n  `${ATC_FORM_SELECTOR} button[class*='add-to-cart']`,\n  `${ATC_FORM_SELECTOR} button[class*='textboxAddToCartBtn']`,\n];\n\n// for ajax requests\nexport const CART_ADDED_ITEM_URLS = ['/cart/add'];\nexport const CART_UPDATE_WITHOUT_ADDING_URLS = ['/cart/change'];\n\nexport const CART_POPUP = 'CartPopup';\n\ninterface PriceFormat {\n  decimalSeparator: string | null;\n  thousandsSeparator: string;\n}\n\nexport const PRICE_FORMAT_TYPES: PriceFormat[] = [\n  { decimalSeparator: '.', thousandsSeparator: ',' },\n  { decimalSeparator: ',', thousandsSeparator: '.' },\n  { decimalSeparator: '.', thousandsSeparator: `'` },\n  { decimalSeparator: null, thousandsSeparator: '.' },\n  { decimalSeparator: null, thousandsSeparator: ',' },\n];\n\nexport const ADDON_ITEM_PROPERTY_KEY = '__upcartAddon';\nexport const AFTERSELL_UPSELL_PROPERTY_KEY = '__as_offer_id';",
                "filename": "web/storefront/src/constants/index.ts",
                "start_index": 3205,
                "end_index": 6156,
                "start_line": 75,
                "end_line": 157,
                "max_line": 163,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n                    title: t('Activate UpCart'),\n                    description: t(`Activate the UpCart app embed block in your Theme editor. Find it in Theme settings > App embeds. Don't forget to press save.`), // prettier-ignore\n                    badge: {\n                      children: themeData?.theme && !themeData.theme.embedEnabled ? t('Required') : t('Completed'),\n                      status: themeData?.theme && !themeData.theme.embedEnabled ? t('critical') : t('success'),\n                    },\n                    action: {\n                      content: t('Open Theme Settings'),\n                      onAction: () => {\n                        window.open(themeEditorDeepLink, '_blank').focus();\n                      },\n                    },\n                  },\n                  {\n                    title: t('Match your brand design'),\n                    badge: designChanged\n                      ? {\n                          children: t('Completed'),\n                          status: t('success'),\n                        }\n                      : undefined,\n                    description: t('UpCart comes with great defaults but every brand is different. Hop into the cart editor and use the design options to match your brand.'), // prettier-ignore\n                    action: {\n                      content: t('Open Cart Editor'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=design`);\n                      },\n                    },\n                  },\n                  {\n                    title: t('Add Upsells'),\n                    badge: {\n                      children: editorData.upsellsModule ? t('Completed') : t('Recommended'),\n                      status: editorData.upsellsModule ? t('success') : t('info'),\n                    },\n                    description: t(\"Boost your AOV by using UpCart's high converting upsell offers. Head over to the cart editor to add upsells to your cart drawer.\"), // prettier-ignore\n                    action: {\n                      content: t('Add Upsells'),\n                      onAction: () => {\n                        navigate(`${ROUTE_OBJECTS.CART_EDITOR.url}?moduleName=upsells`);\n                      },\n                    },\n                  },",
                "filename": "web/src/@templates/Home/Home.tsx",
                "start_index": 5120,
                "end_index": 7444,
                "start_line": 1,
                "end_line": 222,
                "max_line": 260,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "\"upcartEditorSettings.upsellRecommendationIntent\"\n            name=\"upcartEditorSettings.upsellRecommendationIntent\"\n            options={[\n              { label: 'Related', value: 'related' as UpsellRecommendationIntent },\n              { label: 'Complementary', value: 'complementary' as UpsellRecommendationIntent },\n            ]}\n            label={t('Recommendation Algorithm')}\n            sublabel={\n              values.upcartEditorSettings.upsellRecommendationIntent === 'complementary' && (\n                <>\n                  Complementary upsells must be configured.{' '}\n                  <Link\n                    url=\"https://shopify.dev/docs/themes/product-merchandising/recommendations#recommendation-intents\"\n                    target=\"_blank\"\n                  >\n                    Learn more\n                  </Link>\n                </>\n              )\n            }\n            component={SelectField}\n          />\n        )}\n        <div className={styles.UpsellsModule__configureButtonWrapper} ref={addTriggerRef}>\n          <CustomButton\n            onClick={() => setActiveModal((prevState) => !prevState)}\n            disabled={values.upcartEditorSettings.recommendedUpsells}\n            loading={isSubmitting}\n            primary\n            fullWidth\n          >\n            {t(`Configure Manual Upsells`)}\n          </CustomButton>\n          <ConfigureUpsellsModal\n            items={upsellItems}\n            active={activeModal}\n            handleClose={() => setActiveModal(false)}\n            onAction={onAction}\n            handleUpdate={handleUpdate}\n            handleReorder={(updatedItems) => setUpsellItems(updatedItems)}\n          />\n          <ProductSelectModal\n            isOpen={showResourcePickerModal}\n            initialType={'Product'}\n            onSave={onSave}\n            onClose={() => {\n              setShowResourcePickerModal(false);\n              setActiveModal(true);\n            }}\n            selectedProducts={defaultSelectedProducts}\n            initialCollection={defaultCollection}\n          />\n        </div>\n      </LegacyStack>\n    </div>\n  );\n};\n\nexport default SelectProducts;",
                "filename": "web/src/@templates/CartEditor/UpsellsModule/SelectProducts.tsx",
                "start_index": 8389,
                "end_index": 10539,
                "start_line": 262,
                "end_line": 320,
                "max_line": 320,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "wUpsellItemsAlreadyInCart: { type: 'boolean', value: false },\n    upsellsItems: {\n      type: 'json',\n      value: [\n        {\n          _id: '',\n          trigger: null,\n          upsell: null,\n        },\n      ],\n    },\n    upsellsModulePosition: { type: 'single_line_text_field', value: 'bottom' },\n    recommendedUpsells: { type: 'boolean', value: false },\n    upsellRecommendationIntent: { type: 'single_line_text_field', value: 'related' as UpsellRecommendationIntent },\n\n    // Addons Module\n    addonsModule: { type: 'boolean', value: false },\n    addonsField: {\n      type: 'json',\n      value: {\n        shippingProtection: {\n          active: false,\n          productHandle: null,\n          defaultBehavior: false,\n        },\n        productAddon: {\n          active: false,\n          productHandle: null,\n          product: null,\n          defaultBehavior: false,\n        },\n      },\n    },\n    addonsShouldBeCounted: { type: 'boolean', value: false },\n\n    // Notes Module\n    notesModule: { type: 'boolean', value: false },\n    notesTitle: { type: 'multi_line_text_field', value: '<p>Add special instructions</p>' },\n    notesPlaceholder: { type: 'single_line_text_field', value: 'Special instructions for your order' },\n    notesPlacement: { type: 'single_line_text_field', value: 'bottomOfCart' as NotesPlacement },\n\n    trustBadgesModule: { type: 'boolean', value: false },\n    trustBadges: {\n      type: 'json',\n      value: {\n        url: '',\n        position: 'bottom',\n      },\n    },\n\n    // Discount Code Module\n    discountCodeModule: { type: 'boolean', value: false },\n    discountCodePlaceholder: { type: 'single_line_text_field', value: 'Discount code' },\n    discountCodeButtonText: { type: 'single_line_text_field', value: 'Apply' },\n\n    // Subscription Upgrades Module\n    subscriptionUpgradesModule: { type: 'boolean', value: false },\n    subscriptionUpgradesPreventDowngrades: { type: 'boolean', value: false },\n    subscriptionUpgradesButtonText: { type: 'single_line_text_field', value: 'Upgrade to {{selling_plan_group_name}}' },\n\n    // Express Pay Buttons Module\n    expressPayModule: { type: 'boolean', value: false },\n    expressPayEnabledGateways: { type: 'json', value: [] },\n  },\n\n  sti",
                "filename": "common/defaultMetafields.ts",
                "start_index": 17911,
                "end_index": 20140,
                "start_line": 482,
                "end_line": 555,
                "max_line": 567,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "useEffect(() => {\n    /**\n     * Remove the add-on product if all other products in the cart are removed.\n     *\n     * Similar logic used to be handled in the empty cart component, but this caused the cart\n     * to incorrectly empty when going back in the browser due to HTML caching of the Liquid-rendered\n     * upcartPreloadedCart.\n     */\n    if (!hasFetchedCart) return; // prevent clearing cart based on stale cart\n    const isEmptyCartWithLeftoverAddonProduct = cartIsVisuallyEmpty && hiddenCartItems.length > 0;\n    if (isEmptyCartWithLeftoverAddonProduct) {\n      platform.cart.clearCart().then(() => {\n        refetchCart();\n      });\n    }\n  }, [platform, refetchCart, cartIsVisuallyEmpty, hiddenCartItems, hasFetchedCart]);\n\n  useEffect(() => {\n    if (cartIsVisuallyEmpty) {\n      sessionStorageEngine.unset(['announcement_module_time']);\n    }\n  }, [cartIsVisuallyEmpty]);\n\n  const announcementModuleIfActive = useMemo(() => {\n    if (!settings.upcartEditorSettings.announcementModule) return null;\n    return <AnnouncementModule platform={platform} />;\n  }, [settings, platform]);\n\n  const upsellModuleMarkupIfActive = useMemo(() => {\n    if (!settings.upcartEditorSettings.upsellsModule) return null;\n    return (\n      <UpsellsModule\n        preview={preview || false}\n        platform={platform}\n        cart={cartToShow}\n        cartIsLoading={cartIsLoading}\n        refetchCart={refetchCart}\n      />\n    );\n  }, [settings, cartToShow, cartIsLoading, refetchCart, platform, preview]);\n\n  const { totalAfterAllDiscounts } = useCartTotal({ cart });\n\n  return (\n    <>\n      <GlobalStyles platform={platform} />\n      <div\n        id=\"CartPopup\"\n        className={`upcart-cart ${styles.CartPreview} ${styles['CartPreview__' + settings.upcartSettings.cartPosition]}\n      ${styles['CartPreview__position-' + styling.position]}\n        UpcartDesignSettings__backgroundColor ${platform.options.forceAlwaysOpen ? styles.active : ''}`}\n        style={\n          settings.upcartSettings.disableSticky\n            ? { overflowY: 'auto', height: styling.height }\n            : { height: styling.height }\n        }\n        // This is needed to allow the cart to scroll on mobile for some themes.\n        // See Linear issue BEAM-1504 for more details.\n        data-scrollable\n      >\n        {cartIsVisuallyEmpty ? (\n          <EmptyCart\n            refetchCart={refetchCart}\n            platform={platform}\n            cart={cartToShow}\n            closePopup={platform.eventHandlers.onCloseClick}\n            isAddingItemThatCausedCartToOpen={isAddingItemThatCausedCartToOpen}\n          />\n        ) : (\n          <div\n            className={clx(styles.CartPreview__card, {\n              [styles.CartPreview__card_nonSticky]: settings.upcartSettings.disableSticky,\n            })}\n          >",
                "filename": "web/storefront/src/modules/CartPopup/Cart.tsx",
                "start_index": 12884,
                "end_index": 15689,
                "start_line": 107,
                "end_line": 477,
                "max_line": 521,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "reranked_doc_snippets_initial": [
            {
                "code": "# Specification: Subscription Upgrades\n\n## Editor\n\nThere should be a module in the editor with:\n\n- Name: \"Subscription Upgrades\"\n- Icon: Repeat Order\n- Default status: disabled\n- Settings:\n  - \"Prevent downgrades\"\n    - Help text: \"If enabled, customers will not be allowed to downgrade from a subscription to one-time purchase. Caution: this may increase cart abandonment.\"\n    - Type: checkbox\n    - Default: disabled\n\n## Cart\n\n> If the subscription upgrades module is disabled in the editor, the cart should skip all subscription upgrade functionality.\n>\n> The following cart specification is applicable only if the subscription upgrades module has been enabled in the editor.\n\n### Behaviour\n\nThe cart frontend for subscription upgrades should be isolated to an area below each line item. This area can include content, or can be omitted if there is nothing to show. If the area includes content, then the area should have:\n\n- Public CSS class: `.upcart-subscription-upgrade-section`\n- Styling: full-width of line item\n\nThe content of each subscription upgrade area should be independent of the content for the subscription areas for any other line items.\n\nThe content of the subscription upgrade area should be as follows:\n\nA. For **one-time purchase** line items:\n\n- If the item cannot be sold as a subscription, nothing should be shown.\n- If the item can be sold as a subscription:\n  - There should be a button with:\n    - Content: \"Upgrade to \\_\\_\\_\\_\", where \\_\\_\\_\\_ is the name of the first selling plan group for the item\n    - When clicked:\n      1. Show a loading spinner instead of text, and disable the button\n      2. Change the item to be a subscription with the first selling plan of the first selling plan group. The line item should have the property `__upcartSubscriptionUpgrade: \"true\"`\n    - Styling: full width of area, match to other buttons in cart\n    - Public CSS class: `.upcart-subscription-upgrade-button`\n\nB. For **subscription** line items:\n\n- There should be a dropdown with:\n  - Content: the name of the current selling plan\n  - Options:\n    - (OPTIONAL) A group with:\n      - Title: \"Full price\"\n      - Options:\n        - \"One-time purchase\"\n      - Condition: this group should be included if the \"Prevent downgrades\" setting is disabled AND the item does not _require_ a selling plan (i.e., it can be sold as a one-time purchase)\n    - A group for each possible selling plan group for the item with:\n      - Title: the name of the selling plan group\n      - Options: the names of the possible selling plans in the group for the item\n  - When selected:\n    1. Show a loading spinner overlayed on the dropdown and disable the dropdown\n    2. Change the selling plan of the item to the selected selling plan. If \"One-time only\" was selected, then remove the selling plan from the item to change it to a one-time purchase. The line item should have the property `__upcartSubscriptionEdit: \"true\"`\n  - Styling: full width of area, match to other dropdowns in cart\n  - Public CSS class: `.upcart-subscription-upgrade-dropdown`\n\nWhen the current purchase option for a line item changes, the content of the subscription upgrade area should be updated to match the new purchase option.\n\n### Edge Cases and Clarifications\n\n- The content of the subscription upgrade area does not depend on _how_ the purchase option was selected. For example, the subscription upgrade area content for an item that was added to the cart as a subscription should be the same as the content for an item that was upgraded from a one-time purchase to a subscription in-cart.\n- When selling plans are being loaded for a product, there should be no content in the subscription upgrade area. Before the selling plans are loaded, we can't fully decide what content to show so it's fine to show nothing.\n- When the selling plan of an item is changed, the quantity of the item should remain constant. If you don't provide a quantity to the AJAX API when changing a line item, then the quantity of the line item will be set to 1 which should be avoided.\n- Selling plans that do not apply to the selected variant for a line item should be ignored. It is possible to have selling plans that apply only to specific variants of a product. In cases where none of the selling plans from a selling plan group apply to the variant for the line item, the selling plan group should be ignored. An ignored group should not be listed in the dropdown (because it would be an empty section) and it should not be used for text of the upgrade button (because it would have no selling plan to select).",
                "filename": "docs/subscription-upgrades.md",
                "start_index": 0,
                "end_index": 4584,
                "start_line": 1,
                "end_line": 71,
                "max_line": 71,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "---\nid: 3vst4bcr\ntitle: Discount Codes Module\nfile_version: 1.1.3\napp_version: 1.18.31\n---\n\n# Required background information\n\n## Discount types\n\nThere are two types of discounts: **automatic discounts** and **discount codes**.\n\n- **Automatic discounts** are applied to a cart or checkout automatically when the discount criteria are met.\n\n- **Discount codes** must be manually typed in by the customer. They stay active until the customer either removes the code, enters a different conflicting discount code, or changes their cart/checkout so that the discount is not longer applicable.\n\nThis module is specifically for **discount codes**. We do not have to worry about **automatic discounts** because they will work in the cart by default and they do not require any user interaction.\n\n## Discount targets\n\nA discount can be used to reduce the cost of **product(s)**, **order**, or **shipping**.\n\n- **Product discounts** reduce the price of one or more products and are shown as a reduction on individual line items.\n\n- **Order discounts** reduce the price of the order as a whole and are shown as a reduction on the overal price.\n\n- **Shipping discounts** reduce the price of shipping.\n\n# Read and write discount codes\n\n## Read discount codes\n\nWe read discount codes using the `cart.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:78:24:26:`    const cart: Cart&lt;CartItemWithoutCompareAtPrice&gt; = await fetch(getShopifyRoutesRoot() + &#39;cart.js&#39;).then((res) =&gt;`\"/> Ajax API endpoint.\n\nAn applied discount code will be returned from the API as part of either the `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> or the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/>. The `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> are for order discounts and the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/> are for product discounts.\n\nThese discount applications will include both **automatic discounts** and **discount codes**. We can distinguish between these using the `type`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:460:1:1:`  type: &#39;discount_code&#39; | &#39;&#39;;`\"/> field of the `DiscountApplication`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:446:4:4:`export interface DiscountApplication {`\"/>.\n\n## Apply a discount code\n\n<br/>\n\nWe apply a discount code by making a request from the storefront to the route `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/>.\n\nThe `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/> route is intended by Shopify to be used for [shareable discount links](https://help.shopify.com/en/manual/discounts/managing-discount-codes#promote-a-discount-using-a-shareable-link). Normally a customer would navigate to the link directly in their browser and would be redirected to the storefront. We are using it in a non-standard way by making a background network request.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n23         await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);\n```\n\n<br/>\n\nAfter applying a discount code, we refetch the cart to check if the discount was successfully applied and to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/DiscountCodeModule/DiscountCodeModule.tsx\n\n```tsx\n23           await platform.discounts.attemptApplyDiscountCode({ discountCode: discountCodeToApply });\n24           const updatedCart = await refetchCart();\n25\n26           const discountApplications = getAllUniqueDiscountApplications(updatedCart);\n27           const isValid = discountApplications.some(\n28             (discountApplication) => discountApplication.title === discountCodeToApply,\n29           );\n```\n\n<br/>\n\n## Remove a discount code\n\n<br/>\n\nWe remove a discount code by applying a fake invalid discount code.\n\nThere is no native way to remove discount codes so this is a workaround.\n\nThis behaviour relies on the fact that there can only be one discount code applied in the cart. We are replacing the one allowed discount code with an invalid code.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n14       async removeDiscountCode(): Promise<void> {\n15         const FAKE_INVALID_DISCOUNT_CODE = '~!~!UPCART_REMOVE_DISCOUNT!~!~';\n16         await this.UNSAFE_POSSIBLE_NO_OP_applyDiscountCodeAndSetShopifyCookie({ discountCode: FAKE_INVALID_DISCOUNT_CODE });\n17       }\n```\n\n<br/>\n\nAfter removing a discount code, we refetch the cart to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/components/DiscountCodeBadge/DiscountCodeBadge.tsx\n\n```tsx\n18         await platform.discounts.removeDiscountCode();\n19         await refetchCart();\n```\n\n<br/>\n\n> \u26a0\ufe0f After we apply or remove a discount code, the `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> of discounted line items will change. If we did not refetch the cart then we would have an outdated `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> value which would cause errors if we tried to call `cart/update.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:191:17:21:`    return fetchQd(this.ajaxMutationCartQ, getShopifyRoutesRoot() + &#39;cart/update.js&#39;, {`\"/> or `cart/change.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:153:8:12:`      getShopifyRoutesRoot() + `cart/change.js?${query.toString()}`,`\"/>.\n\n# Limitations\n\n## **Multiple** discount codes are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n50                     Multiple discount codes are not supported.\n```\n\n<br/>\n\n### Why are multiple discount codes not supported?\n\nWe cannot apply multiple discount codes because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support multiple codes. This is the only way that we know of to apply a discount code from the storefront. We will have to wait for Shopify to add support for multiple codes or to find a different way to apply codes which does support multiple.\n\nIf a customer applies two discount codes back to back, the first discount code will be discarded and only use the most recently applied code will affect the cart.\n\n## Free shipping discounts are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n58                   Free shipping discounts are not supported.\n```\n\n<br/>\n\n### Why are free shipping discounts not supported?\n\nWe cannot apply free shipping discounts because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support them.\n\n## Shopify Plus stores using checkout.liquid are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n64                   Shopify Plus stores using checkout.liquid are not supported.\n```\n\n<br/>\n\n### Why are Shopify Plus stores using checkout.liquid not supported?\n\nHistorically, the Ajax API only included automatic discounts and did not include discount codes. Shopify changed this behaviour and started including discounts from discount codes in Ajax API responses. There are still some stores which do not include discount codes in Ajax API responses. The discount codes module does not work on these stores.\n\n### How can we tell if a store is eligible?\n\nThe Ajax API will include discount codes in responses only if the store is on Shopify's new checkout.\n\n<br/>\n\nWe can identify wether or not a store is on Shopify's new checkout by looking at the cart token. If the cart token is 32 characters long and only includes hex digits (0123456789abcdef) then the store is on Shopify's old checkout, otherwise it is on Shopify's new checkout and the Ajax API will include discount codes in responses.\n\nStores that are on Shopify's new checkout may have different token formats. The following are examples that we've seen:\n\n- c1-d3f024e3af037f40bfe1b016b5b76f05\n- Z2NwLXVzLWNlbnRyYWwxOjAxSEZFMjFIV1FZUFc0SlQ3Q00ySFFSSjgy\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart({ cart }: { cart: Cart<CartItem> }): boolean {\n6          if (!cart.token) return false;\n7          const isLegacyCartToken = cart.token.match(/^[0-9a-f]{32}$/) !== null;\n8          return !isLegacyCartToken;\n9        }\n```\n\n<br/>\n\n### What happens if a store is not eligible?\n\n<br/>\n\nIf a store is not eligible then the discount code module will not be shown.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/Cart.tsx\n\n```tsx\n499                      {platform.discounts.getStoreCanApplyDiscountCodesInCart({ cart }) &&\n500                        settings.upcartEditorSettings.discountCodeModule && (\n501                          <DiscountCodeModule platform={platform} refetchCart={refetchCart} />\n502                        )}\n```\n\n<br/>\n\nIn the preview we will show the discount code module even for stores that are not eligible. We do this because it would require a lot of work to check eligibility when not on the storefront.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/platform/preview/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart(args: { cart: Cart<CartItem> }): boolean {\n6          return true;\n7        }\n```\n\n<br/>\n\nThis file was generated by Swimm. [Click here to view it in the app](https://app.swimm.io/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr).",
                "filename": ".swm/discount-codes-module.3vst4bcr.sw.md",
                "start_index": 0,
                "end_index": 11446,
                "start_line": 1,
                "end_line": 231,
                "max_line": 231,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>UpCart Loading...</title>\n    <script>\n      /*\n       * Constants\n       */\n      const INSTALL_SOURCE_QUERY_PARAM = 'via';\n      const COOKIE_LIFETIME_MS = 3 * 24 * 60 * 60 * 1000; // 3 days\n      const COOKIE_NAME = 'upcart_install_source';\n\n      /*\n       * 1. Get the ?via= query for the following steps\n       */\n      const installSource = encodeURIComponent(\n        new URLSearchParams(window.location.search).get(INSTALL_SOURCE_QUERY_PARAM),\n      );\n\n      /*\n       * 2. Set a cookie with the install source for 3 days so we can read it when they install the app\n       */\n      const cookieDomain = '.' + window.location.hostname;\n      const cookieExpiresDate = new Date();\n      cookieExpiresDate.setTime(cookieExpiresDate.getTime() + COOKIE_LIFETIME_MS);\n      const cookieExpires = cookieExpiresDate.toGMTString();\n      document.cookie = `${COOKIE_NAME}=${installSource}; expires=${cookieExpires}; domain=${cookieDomain}; path=/; SameSite=None; Secure`;\n\n      /*\n       * 3. Redirect to the app store, including the install source as a query param for App Store Google Analytics\n       */\n      window.location.replace(`https://apps.shopify.com/upcart-cart-builder?join-via=${installSource}`);\n    </script>\n  </head>\n  <body></body>\n</html>",
                "filename": "web/public/join.html",
                "start_index": 0,
                "end_index": 1304,
                "start_line": 1,
                "end_line": 36,
                "max_line": 36,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# UpCart 3.0\n\n## Setup\n\nView setup instructions on Notion: https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 133,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Security Policy\n\n## Supported versions\n\n### New features\n\nNew features will only be added to the master branch and will not be made available in point releases.\n\n### Bug fixes\n\nOnly the latest release series will receive bug fixes. When enough bugs are fixed and its deemed worthy to release a new gem, this is the branch it happens from.\n\n### Security issues\n\nOnly the latest release series will receive patches and new versions in case of a security issue.\n\n### Severe security issues\n\nFor severe security issues we will provide new versions as above, and also the last major release series will receive patches and new versions. The classification of the security issue is judged by the core team.\n\n### Unsupported Release Series\n\nWhen a release series is no longer supported, it's your own responsibility to deal with bugs and security issues. If you are not comfortable maintaining your own versions, you should upgrade to a supported version.\n\n## Reporting a bug\n\nAll security bugs in shopify repositories should be reported to [our hackerone program](https://hackerone.com/shopify)\nShopify's whitehat program is our way to reward security researchers for finding serious security vulnerabilities in the In Scope properties listed at the bottom of this page, including our core application (all functionality associated with a Shopify store, particularly your-store.myshopify.com/admin) and certain ancillary applications.\n\n## Disclosure Policy\n\nWe look forward to working with all security researchers and strive to be respectful, always assume the best and treat others as peers. We expect the same in return from all participants. To achieve this, our team strives to:\n\n- Reply to all reports within one business day and triage within two business days (if applicable)\n- Be as transparent as possible, answering all inquires about our report decisions and adding hackers to duplicate HackerOne reports\n- Award bounties within a week of resolution (excluding extenuating circumstances)\n- Only close reports as N/A when the issue reported is included in Known Issues, Ineligible Vulnerabilities Types or lacks evidence of a vulnerability\n\n**The following rules must be followed in order for any rewards to be paid:**\n\n- You may only test against shops you have created which include your HackerOne YOURHANDLE @ wearehackerone.com registered email address.\n- You must not attempt to gain access to, or interact with, any shops other than those created by you.\n- The use of commercial scanners is prohibited (e.g., Nessus).\n- Rules for reporting must be followed.\n- Do not disclose any issues publicly before they have been resolved.\n- Shopify reserves the right to modify the rules for this program or deem any submissions invalid at any time. Shopify may cancel the whitehat program without notice at any time.\n- Contacting Shopify Support over chat, email or phone about your HackerOne report is not allowed. We may disqualify you from receiving a reward, or from participating in the program altogether.\n- You are not an employee of Shopify; employees should report bugs to the internal bug bounty program.\n- You hereby represent, warrant and covenant that any content you submit to Shopify is an original work of authorship and that you are legally entitled to grant the rights and privileges conveyed by these terms. You further represent, warrant and covenant that the consent of no other person or entity is or will be necessary for Shopify to use the submitted content.\n- By submitting content to Shopify, you irrevocably waive all moral rights which you may have in the content.\n- All content submitted by you to Shopify under this program is licensed under the MIT License.\n- You must report any discovered vulnerability to Shopify as soon as you have validated the vulnerability.\n- Failure to follow any of the foregoing rules will disqualify you from participating in this program.\n\n** Please see our [Hackerone Profile](https://hackerone.com/shopify) for full details\n\n## Receiving Security Updates\n\nTo recieve all general updates to vulnerabilities, please subscribe to our hackerone [Hacktivity](https://hackerone.com/shopify/hacktivity)",
                "filename": "SECURITY.md",
                "start_index": 0,
                "end_index": 4160,
                "start_line": 1,
                "end_line": 59,
                "max_line": 59,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "## Dev Setup\n\nFollow the [instructions in this Notion document](https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7?pvs=4) to setup the development environment for the Chrome extension.",
                "filename": "chrome-extensions/cart-customization/README.md",
                "start_index": 0,
                "end_index": 208,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "MIT License\n\nCopyright (c) 2021 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
                "filename": "extensions/theme-app-extension/LICENSE.md",
                "start_index": 0,
                "end_index": 1063,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# [[[ --- STAGE: BASE ENVIRONMENT SETUP --- ]]]\n# see https://github.com/moby/moby/issues/37345#issuecomment-400250849\nFROM node:18.16.1-alpine as base\n# Accept command line '--build-arg' arguments\nARG PORT=8081\nARG HOST\nARG SHOPIFY_API_KEY\nARG INTERCOM_APP_ID\nARG SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY\n\n# Copy command line args to env to use during build and for final image runtime\nENV PORT=${PORT} \\\n    HOST=${HOST} \\\n    SHOPIFY_API_KEY=${SHOPIFY_API_KEY} \\\n    INTERCOM_APP_ID=${INTERCOM_APP_ID}\n    # ^^^^^ WARNING ^^^^^ do not include trailing \"\\\" on the last line above, you will get a syntax error with a terrible error message\n    #\n    # SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY is intentionally not included here since it is only for building and shouldn't be available at runtime\n\n# [[[ --- STAGE: BUILD --- ]]]\nFROM base AS build\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nCOPY web/patches ./web/patches\nRUN yarn install --cwd web --frozen-lockfile --production=false\nCOPY . .\n# NOTE: we need Sentry API token to upload source maps to Sentry during build, see withSentryConfig in next.config.js\nRUN echo \"[auth]\\ntoken=${SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY}\" > ./web/.sentryclirc\nRUN yarn web:build\n\n# [[[ --- STAGE: LICENSES WEB --- ]]]\nFROM base AS licenses-web\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web > ./web/public/licenses/web.txt\n\n# [[[ --- STAGE: LICENSES STOREFRONT --- ]]]\nFROM base AS licenses-storefront\nWORKDIR /app\nCOPY web/storefront/package.json web/storefront/yarn.lock ./web/storefront/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web/storefront > ./web/public/licenses/storefront.txt\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM base\nWORKDIR /app\nCOPY --from=build /app .\nCOPY package.json ./package.json\nRUN yarn install --frozen-lockfile --production=true\nCOPY --from=licenses-web /app/web/public/licenses/web.txt ./web/public/licenses/web.txt\nCOPY --from=licenses-storefront /app/web/public/licenses/storefront.txt ./web/public/licenses/storefront.txt\nCMD [\"yarn\", \"web:start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2181,
                "start_line": 1,
                "end_line": 53,
                "max_line": 53,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { Shop, ShopModel } from '../modules/shops/shops.model';\nimport { RequestWithShop } from '../types/express.types';\nimport Shopify from '@shopify/shopify-api';\n\nexport const getShopDocFromRequest = async (req: RequestWithShop): Promise<Shop> => {\n  if (req.shopDoc) {\n    return req.shopDoc;\n  }\n\n  const shop = Shopify.Utils.sanitizeShop(req.query.shop as string);\n  const shopDoc = await ShopModel.findOne({ domain: shop }).lean();\n  req.shopDoc = shopDoc;\n  return shopDoc;\n};",
                "filename": "web/server/helpers/getShopDocFromRequest.ts",
                "start_index": 0,
                "end_index": 485,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "The starting point for this repository was created using the Shopify CLI, commit\nf5d560da33aafae0b552de72a90f1320d1023524. Some boilerplate code from the CLI\nremains and is licensed as follows:\n\"\"\"\nMIT License\n\nCopyright (c) 2018 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\"",
                "filename": "LICENSE.md",
                "start_index": 0,
                "end_index": 1265,
                "start_line": 1,
                "end_line": 26,
                "max_line": 26,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<html></html>",
                "filename": "web/storefront/public/index.html",
                "start_index": 0,
                "end_index": 13,
                "start_line": 1,
                "end_line": 1,
                "max_line": 1,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.\\\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can\u2019t go back!**\n\nIf you aren\u2019t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you\u2019re on your own.\n\nYou don\u2019t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn\u2019t feel obligated to use this feature. However we understand that this tool wouldn\u2019t be useful if you couldn\u2019t customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n\n### Code Splitting\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\n\n### Analyzing the Bundle Size\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\n\n### Making a Progressive Web App\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\n\n### Advanced Configuration\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\n\n### Deployment\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\n\n### `npm run build` fails to minify\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)",
                "filename": "web/storefront/README.md",
                "start_index": 0,
                "end_index": 3354,
                "start_line": 1,
                "end_line": 70,
                "max_line": 70,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "solution_task": {
            "structured_resp": "Clarify:\nThe issue is that when a top-level product is selected in the product selection modal, the add-on does not appear in the cart because no specific variant is selected. The expected behavior is that selecting a top-level product should automatically select the first variant for add-ons.\n\nHypothesize:\nThe issue may be due to the product selection modal not handling the case where a top-level product is selected without a specific variant. The code responsible for handling product selection needs to be updated to automatically select the first variant when a top-level product is selected.\n\nExperiment:\nReview the provided code snippets and documentation to identify where the product selection logic is implemented and how it can be modified to select the first variant by default when a top-level product is selected.\n\nAnalyze:\nThe relevant code snippet appears to be in `web/src/@components/common/ProductSelectModal/ProductSelectModal.tsx`, specifically in the `handleSelection` function. This function handles the logic for selecting products and variants. It checks if the selection is a variant and updates the selected items accordingly. However, when a top-level product is selected (`isVariant` is `false`), it does not automatically select the first variant.\n\nResolve:\nTo resolve the issue, update the `handleSelection` function in `web/src/@components/common/ProductSelectModal/ProductSelectModal.tsx` to automatically select the first variant when a top-level product is selected:\n\n- Modify the `else` block that handles the case when `isVariant` is `false`.\n- Ensure that when a top-level product is selected, the first variant is automatically selected.\n- Update the `selectedItems` state with the modified selection that includes the first variant.\n\nHere is the updated code snippet:\n\n```tsx\n// ... existing code ...\n\nelse {\n  // Not a variant, selection on top-level item\n\n  // Fetch all variants for the product\n  let productWithVariants = await fetchAllVariants(selection.id);\n  selection.variants = productWithVariants.variants;\n\n  // Automatically select the first variant\n  let selectionCopy = deepCopy(selection);\n  const firstVariant = selectionCopy.variants.edges?.[0];\n  if (firstVariant) {\n    selectionCopy.variants.edges = [firstVariant];\n    setSelectedItems([...removeOrAddItem({ arr: selectedItems, item: selectionCopy, isMulti: multiProduct })]);\n  } else {\n    // Handle the case where there are no variants\n    console.error('No variants found for the selected product.');\n  }\n}\n\n// ... existing code ...\n```\n\n- Ensure that the `fetchAllVariants` function is implemented and correctly fetches all variants for the given product ID.\n- The `deepCopy` function should create a deep clone of the product object to avoid mutating the original state.\n- The `removeOrAddItem` function should be updated if necessary to handle the addition of a product with a selected variant.\n- Add error handling for the case where no variants are found for the selected product.\n- Test the updated code to ensure that the first variant is automatically selected when a top-level product is chosen and that the add-on appears in the cart as expected.",
            "response": "To enhance the user experience in our product selection modal, we are addressing an issue where selecting a top-level product does not automatically add the first variant of the product to the cart. The goal is to ensure that when a user selects a top-level product, the system will default to the first available variant, streamlining the selection process and maintaining the integrity of the cart's contents.\n\n- Update the `handleSelection` function within `ProductSelectModal.tsx` to handle top-level product selections by automatically choosing the first variant.\n- Fetch the variants for the selected product using the `fetchAllVariants` function, which should return all available variants for the given product ID.\n- Assign the first variant from the fetched list to the selection, ensuring that the `selectedItems` state reflects this update.\n- Implement error handling to manage scenarios where no variants are available for the selected product.\n- Conduct thorough testing to confirm that the first variant is now being automatically selected and added to the cart when a top-level product is chosen.\n\n```tsx\n// ... existing code ...\n\nelse {\n  // Fetch all variants for the product\n  let productWithVariants = await fetchAllVariants(selection.id);\n  selection.variants = productWithVariants.variants;\n\n  // Automatically select the first variant\n  let selectionCopy = deepCopy(selection);\n  const firstVariant = selectionCopy.variants.edges?.[0];\n  if (firstVariant) {\n    selectionCopy.variants.edges = [firstVariant];\n    setSelectedItems([...removeOrAddItem({ arr: selectedItems, item: selectionCopy, isMulti: multiProduct })]);\n  } else {\n    // No variants found\n    console.error('No variants found for the selected product.');\n  }\n}\n\n// ... existing code ...\n```\n- Verify that the `fetchAllVariants`, `deepCopy`, and `removeOrAddItem` functions are correctly implemented and handle the data as expected.\n- After implementing these changes, ensure that the functionality aligns with the intended user experience by adding the first variant of a top-level product to the cart automatically."
        },
        "snippet_processor_task": {
            "web/src/@templates/CartEditor/AddonsModule/components/ProductAddonSettings/ProductAddonSettings.tsx": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "The snippet provides the function 'handleSelection' which handles product selection logic, including selecting variants and parent items. It also includes functions for displaying status and out-of-stock badges for products.",
                        "snippet": {
                            "code": "const handleSelection = async ({\n    selection,\n    isVariant,\n    parent,\n  }: {\n    selection: any;\n    parent?: any;\n    isVariant: boolean;\n  }) => {\n    if (isVariant) {\n      const parentItem = selectedItems.find((item: GqlProduct) => item.id === parent.id);\n      if (parentItem) {\n        // If the parent exists, add/remove it from the variant array.\n        let newItem = deepCopy(parentItem);\n\n        newItem.variants.edges = [\n          ...removeOrAddItem({ arr: newItem.variants.edges, item: selection, isVariant: true, isMulti: multiProduct }),\n        ];\n        if (newItem.variants.edges.length === 0) {\n          // If we just deselected the last variant, we also want to deselect the parent\n          setSelectedItems([...removeOrAddItem({ arr: selectedItems, item: parentItem, isMulti: multiProduct })]);\n        } else {\n          // In the normal case where we selected/deslected a single variant and we still\n          // have at least one selected, we only want to change the selected state of\n          // the variant, not the parent.\n\n          const newArray = replaceItem(selectedItems, parentItem, newItem);\n          setSelectedItems([...newArray]);\n        }\n      } else {\n        // If the parent does not exist, add the parent and remove all other variants\n        let parentCopy = deepCopy(parent);\n        parentCopy.variants.edges = [{ node: selection }];\n        setSelectedItems([...removeOrAddItem({ arr: selectedItems, item: parentCopy, isMulti: multiProduct })]);\n      }\n    } else {\n      // Not a variant, selection on top-level item\n\n      // Fetch all variants for the product\n      let productWithVariants = await fetchAllVariants(selection.id);\n      selection.variants = productWithVariants.variants;\n\n      if (multiProduct) {\n        //Select all variants\n        setSelectedItems([...removeOrAddItem({ arr: selectedItems, item: selection, isMulti: multiProduct })]);\n      } else {\n        //Single product - select only the first variant\n        let selectionCopy = deepCopy(selection);\n        const firstVariant = selectionCopy.variants.edges?.[0];\n        selectionCopy.variants.edges = firstVariant ? [firstVariant] : [];\n        setSelectedItems([...removeOrAddItem({ arr: selectedItems, item: selectionCopy, isMulti: multiProduct })]);\n      }\n    }\n  };\n\n  const statusBadge = (status) => {\n    if (status !== ProductStatus.Active) {\n      return (\n        <LegacyStack.Item>\n          <Badge status=\"warning\">{status}</Badge>\n        </LegacyStack.Item>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  const outOfStockBadge = (totalInventory) => {\n    if (totalInventory <= 0) {\n      return (\n        <LegacyStack.Item>\n          <Badge status=\"attention\">{'Out of Stock'}</Badge>\n        </LegacyStack.Item>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  const renderProductItem = (item: GqlProduct) => {",
                            "filename": "web/src/@components/common/ProductSelectModal/ProductSelectModal.tsx",
                            "start_index": 8382,
                            "end_index": 11266,
                            "start_line": 263,
                            "end_line": 342,
                            "max_line": 702,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet includes the logic for setting default behavior and handling save and cancel actions in the product selection modal, which is directly related to the issue of add-ons not being added to the cart when a top-level product is selected."
                }
            ],
            "web/src/@components/common/ProductSelectModal/ProductSelectModal.tsx": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "Defines enums for ActionType and ProductType, handles state for product selection modal, converts upsell items to V2 format",
                        "snippet": {
                            "code": "import CustomButton from '@components/common/CustomButton';\nimport ProductSelectModal from '@components/common/ProductSelectModal';\nimport ConfigureUpsellsModal from '@components/ConfigureUpsellsModal';\nimport { Checkbox, LegacyStack, Link } from '@shopify/polaris';\nimport { convertUpsellsToV2 } from '@storefront/src/modules/CartPopup/UpsellsModule/helper';\nimport { Field, useFormikContext } from 'formik';\nimport { random } from 'lodash';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Collection, Product } from 'server/modules/shopify/graphql/generated';\nimport {\n  UpsellRecommendationIntent,\n  UpsellV2Item,\n  UpsellV2Product,\n  UpsellV2ResourceType,\n  UpsellV2SelectedCollection,\n  UpsellV2SelectedProducts,\n} from '../../../../../common/defaultMetafields';\nimport { CartEditorFormValues } from '../types';\nimport styles from './styles.module.scss';\nimport { useTranslation } from 'react-i18next';\nimport { SelectField } from '@components/common/FormField';\n\nexport enum ActionType {\n  ADD = 'ADD',\n  DELETE = 'DELETE',\n  EDIT = 'EDIT',\n  ALL = 'ALL', //Use all products\n}\n\nexport enum ProductType {\n  TRIGGER = 'trigger',\n  UPSELL = 'upsell',\n}\n\nexport type onActionParams = {\n  productType?: ProductType;\n  id?: string;\n  action: ActionType;\n};\n\n/**\n * This component and its children have a lot of case handling around the type \"UpsellItem\"\n * After the multi-product updates we're handling the upsell and trigger as an array instead of an object.\n * Which makes the already loaded UpsellItem interface/type more complicated to deal with but this is necessary so that old upsells can be loaded and edited\n */\nconst SelectProducts = () => {\n  const { values, setFieldValue, handleSubmit, isSubmitting } = useFormikContext<CartEditorFormValues>();\n  const [productType, setProductType] = useState<ProductType>(null);\n  const [currentId, setCurrentId] = useState(null);\n  const addTriggerRef = useRef(null);\n  const [activeModal, setActiveModal] = useState(false); //The main modal\n  const [showResourcePickerModal, setShowResourcePickerModal] = useState(false); //Secondary resource picker modal\n  const [upsellItems, setUpsellItems] = useState<Array<UpsellV2Item>>([]);\n  const { t } = useTranslation();\n\n  /**\n   * Convert all upsell items to V2 format (if necessary)\n   */\n  useEffect(() => {\n    const upsellItemsV2 = convertUpsellsToV2({ upsellItemsV1orV2: values.upcartEditorSettings.upsellsItems });\n    setUpsellItems(upsellItemsV2);\n  }, [values.upcartEditorSettings.upsellsItems]);\n\n  //Handle actions from the list of upsells",
                            "filename": "web/src/@templates/CartEditor/UpsellsModule/SelectProducts.tsx",
                            "start_index": 0,
                            "end_index": 2583,
                            "start_line": 1,
                            "end_line": 64,
                            "max_line": 320,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "The 'handleSelection' function within this snippet is responsible for the product selection logic, including selecting variants and parent items, which is essential to address the issue of automatically selecting the first variant for add-ons."
                }
            ],
            "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "The snippet provides context on how add-ons are handled in the cart, including conditions for automatically adding add-ons based on customer actions or merchant settings.",
                        "snippet": {
                            "code": "(\n    () => {\n      const addonLineItem = cart.items.find(\n        (item) => isBeamAddon(item, platform.settings) && item.variant_id === variantId,\n      );\n      if (addonLineItem) {\n        setAddonState({ type: AddonState.ENABLED, lineItemKey: addonLineItem.key });\n      } else {\n        /**\n         * Two different cases which need to deal with automatically adding add-ons:\n         * 1. Desired state is stored in attributes already.\n         *    One of the following must have happened previously:\n         *          - The customer has clicked the toggle to enable the add-on, OR\n         *          - We automatically added an add-on that was accepted by default\n         *    In both cases we want to re-add the add-on. This case can occur if the\n         *    cart was cleared and then the customer added a new item.\n         * 2. Attribute does not exist. This means that the customer hasn't clicked the toggle\n         *    so we should use the setting from the merchant in UpCart to decide if the add-on\n         *    should be automatically added or not.\n         */\n        const shouldAddAutomatically =\n          desiredAttrKey({ variantId }) in cart.attributes\n            ? cart.attributes[desiredAttrKey({ variantId })] === DESIRED_ATTR_VALUE_ADDED\n            : acceptedByDefault;\n        if (shouldAddAutomatically) {\n          // TODO: refactor this to make default acceptance more clear.\n          //       It's not obvious that this hook will auto-add. However,\n          //       it needs to be part of state initialization.\n          handleEnable();\n        } else {\n          setAddonState({ type: AddonState.DISABLED });\n        }\n      }\n    },\n    { cart, hasFetchedCart },\n  )",
                            "filename": "web/storefront/src/modules/CartPopup/AddonsModule/AddonsModule.tsx",
                            "start_index": 10408,
                            "end_index": 12120,
                            "start_line": 14,
                            "end_line": 334,
                            "max_line": 408,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet checks for triggers based on product or collection selection in the upsells module, which could be related to the issue with the product selection modal not showing add-ons correctly."
                }
            ],
            "web/src/@templates/CartEditor/UpsellsModule/SelectProducts.tsx": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "Dockerfile snippet provides insights into the multi-stage Docker setup for the project, including base environment setup, build stages, and final/runtime configurations. Key details include handling command line arguments, setting up environment variables, building the app, generating license disclaimers, and defining the runtime command.",
                        "snippet": {
                            "code": "# [[[ --- STAGE: BASE ENVIRONMENT SETUP --- ]]]\n# see https://github.com/moby/moby/issues/37345#issuecomment-400250849\nFROM node:18.16.1-alpine as base\n# Accept command line '--build-arg' arguments\nARG PORT=8081\nARG HOST\nARG SHOPIFY_API_KEY\nARG INTERCOM_APP_ID\nARG SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY\n\n# Copy command line args to env to use during build and for final image runtime\nENV PORT=${PORT} \\\n    HOST=${HOST} \\\n    SHOPIFY_API_KEY=${SHOPIFY_API_KEY} \\\n    INTERCOM_APP_ID=${INTERCOM_APP_ID}\n    # ^^^^^ WARNING ^^^^^ do not include trailing \"\\\" on the last line above, you will get a syntax error with a terrible error message\n    #\n    # SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY is intentionally not included here since it is only for building and shouldn't be available at runtime\n\n# [[[ --- STAGE: BUILD --- ]]]\nFROM base AS build\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nCOPY web/patches ./web/patches\nRUN yarn install --cwd web --frozen-lockfile --production=false\nCOPY . .\n# NOTE: we need Sentry API token to upload source maps to Sentry during build, see withSentryConfig in next.config.js\nRUN echo \"[auth]\\ntoken=${SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY}\" > ./web/.sentryclirc\nRUN yarn web:build\n\n# [[[ --- STAGE: LICENSES WEB --- ]]]\nFROM base AS licenses-web\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web > ./web/public/licenses/web.txt\n\n# [[[ --- STAGE: LICENSES STOREFRONT --- ]]]\nFROM base AS licenses-storefront\nWORKDIR /app\nCOPY web/storefront/package.json web/storefront/yarn.lock ./web/storefront/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web/storefront > ./web/public/licenses/storefront.txt\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM base\nWORKDIR /app\nCOPY --from=build /app .\nCOPY package.json ./package.json\nRUN yarn install --frozen-lockfile --production=true\nCOPY --from=licenses-web /app/web/public/licenses/web.txt ./web/public/licenses/web.txt\nCOPY --from=licenses-storefront /app/web/public/licenses/storefront.txt ./web/public/licenses/storefront.txt\nCMD [\"yarn\", \"web:start\"]",
                            "filename": "Dockerfile",
                            "start_index": 0,
                            "end_index": 2181,
                            "start_line": 1,
                            "end_line": 53,
                            "max_line": 53,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "project_documentation_snippets"
                    },
                    "reason_for_reviewing": "This snippet handles default selected products and saving functionality for upsells in the CartEditor component, which is relevant to the expected behavior of selecting the first variant for add-ons."
                }
            ],
            "common/defaultMetafields.ts": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "The code snippet provides insight into how products are added to the cart and displayed in the upsells module. It shows the logic for adding products, modifying upsells before display, and limiting the number of upsells shown.",
                        "snippet": {
                            "code": "const addProductToCart = useCallback(\n    (id: number | string, properties: ItemToAddToCart['properties']) => {\n      platform.cart\n        .addItemToCart(\n          { variantId: Number(id), quantity: 1, properties: { ...properties, __upcartUpsell: id } },\n          { opensCart: AddToCartOpensCart.NEVER },\n        )\n        .then(() => {\n          platform.publicApi.upcartOnAddUpsell(String(id));\n          refetchCart();\n        })\n        .catch((e) => console.error(e));\n    },\n    [refetchCart, platform],\n  );\n\n  const upsellsToShow = useMemo(() => {\n    // Allow custom modification of upsells before display. This can include\n    // changing properties of the upsell products, or removing/adding products.\n    let finalUpsells = upsells;\n    try {\n      const modifiedUpsells = platform.publicApi.upcartModifyListOfUpsells(upsells);\n      if (Array.isArray(modifiedUpsells)) {\n        finalUpsells = modifiedUpsells;\n      }\n    } catch (e) {\n      console.error(e);\n      sentryCaptureException(e);\n    }\n\n    if (upsellsShouldLimit && Number(maximumUpsellsToShow) > 0) {\n      finalUpsells = finalUpsells.splice(0, Number(maximumUpsellsToShow));\n    }\n\n    return finalUpsells;\n  }, [platform, upsells, upsellsShouldLimit, maximumUpsellsToShow]);\n\n  return (\n    <div>\n      {upsellsToShow.length !== 0 && (\n        <PreviewCarousel\n          platform={platform}\n          items={upsellsToShow}\n          onAddProduct={addProductToCart}\n          cartIsLoading={cartIsLoading}\n        />\n      )}\n    </div>\n  );\n}",
                            "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                            "start_index": 14865,
                            "end_index": 16391,
                            "start_line": 359,
                            "end_line": 408,
                            "max_line": 412,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "The 'productAddon' interface defined in this snippet includes settings for product variants, which may need to be reviewed to ensure the correct variant selection behavior when a top-level product is selected."
                }
            ]
        },
        "bouncer_response": {
            "score": 7,
            "criteria": "The RESPONSE provides a detailed and actionable solution to the issue described in the PROMPT. It offers a step-by-step approach to update the product selection modal's behavior to automatically select the first variant when a top-level product is selected. The RESPONSE includes code snippets and references to specific parts of the codebase that need to be reviewed or modified, which is highly relevant to the task at hand.",
            "supporting_evidence": "The RESPONSE outlines a clear plan to address the bug by updating the 'handleSelection' function and fetching the variants using the 'fetchAllVariants' function. It also includes error handling and testing instructions, which are essential for a robust solution. The inclusion of code snippets and references to the codebase provides a practical guide for developers to follow. However, the RESPONSE does not address the requirement that selecting the top-level product in other cases (e.g., upsells module) should select all variants, which is a part of the PROMPT's described issue. This omission prevents the RESPONSE from being a complete solution to the problem.",
            "clarification_questions": "NONE"
        },
        "end_time": 1714259704.6671202,
        "result": "To enhance the user experience in our product selection modal, we are addressing an issue where selecting a top-level product does not automatically add the first variant of the product to the cart. The goal is to ensure that when a user selects a top-level product, the system will default to the first available variant, streamlining the selection process and maintaining the integrity of the cart's contents.\n\n- Update the `handleSelection` function within `ProductSelectModal.tsx` to handle top-level product selections by automatically choosing the first variant.\n- Fetch the variants for the selected product using the `fetchAllVariants` function, which should return all available variants for the given product ID.\n- Assign the first variant from the fetched list to the selection, ensuring that the `selectedItems` state reflects this update.\n- Implement error handling to manage scenarios where no variants are available for the selected product.\n- Conduct thorough testing to confirm that the first variant is now being automatically selected and added to the cart when a top-level product is chosen.\n\n```tsx\n// ... existing code ...\n\nelse {\n  // Fetch all variants for the product\n  let productWithVariants = await fetchAllVariants(selection.id);\n  selection.variants = productWithVariants.variants;\n\n  // Automatically select the first variant\n  let selectionCopy = deepCopy(selection);\n  const firstVariant = selectionCopy.variants.edges?.[0];\n  if (firstVariant) {\n    selectionCopy.variants.edges = [firstVariant];\n    setSelectedItems([...removeOrAddItem({ arr: selectedItems, item: selectionCopy, isMulti: multiProduct })]);\n  } else {\n    // No variants found\n    console.error('No variants found for the selected product.');\n  }\n}\n\n// ... existing code ...\n```\n- Verify that the `fetchAllVariants`, `deepCopy`, and `removeOrAddItem` functions are correctly implemented and handle the data as expected.\n- After implementing these changes, ensure that the functionality aligns with the intended user experience by adding the first variant of a top-level product to the cart automatically.\n\n### Code snippets to check\n\n-  \u2192 [web](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web) \u2192 [src](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src) \u2192 [@components](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@components) \u2192 [common](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@components/common) \u2192 [ProductSelectModal](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@components/common/ProductSelectModal)- [Lines 263 - 342](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@components/common/ProductSelectModal/ProductSelectModal.tsx#L263-L342)\n\n This snippet includes the logic for setting default behavior and handling save and cancel actions in the product selection modal, which is directly related to the issue of add-ons not being added to the cart when a top-level product is selected.\n-  \u2192 [web](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web) \u2192 [src](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src) \u2192 [@templates](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates) \u2192 [CartEditor](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/CartEditor) \u2192 [UpsellsModule](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/CartEditor/UpsellsModule)- [Lines 1 - 64](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/CartEditor/UpsellsModule/SelectProducts.tsx#L1-L64)\n\n The 'handleSelection' function within this snippet is responsible for the product selection logic, including selecting variants and parent items, which is essential to address the issue of automatically selecting the first variant for add-ons.\n-  \u2192 [web](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web) \u2192 [storefront](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront) \u2192 [src](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src) \u2192 [modules](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules) \u2192 [CartPopup](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules/CartPopup) \u2192 [AddonsModule](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules/CartPopup/AddonsModule)- [Lines 14 - 334](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules/CartPopup/AddonsModule/AddonsModule.tsx#L14-L334)\n\n This snippet checks for triggers based on product or collection selection in the upsells module, which could be related to the issue with the product selection modal not showing add-ons correctly.\n- - [Lines 1 - 53](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/Dockerfile#L1-L53)\n\n This snippet handles default selected products and saving functionality for upsells in the CartEditor component, which is relevant to the expected behavior of selecting the first variant for add-ons.\n-  \u2192 [web](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web) \u2192 [storefront](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront) \u2192 [src](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src) \u2192 [modules](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules) \u2192 [CartPopup](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules/CartPopup) \u2192 [UpsellsModule](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules/CartPopup/UpsellsModule)- [Lines 359 - 408](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx#L359-L408)\n\n The 'productAddon' interface defined in this snippet includes settings for product variants, which may need to be reviewed to ensure the correct variant selection behavior when a top-level product is selected."
    }
}