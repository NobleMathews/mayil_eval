{
    "id": "BEAM-3449",
    "repo_name": "testbed/aftersell",
    "title": "Surface Rokt ads enablement to Intercom",
    "body": "\nWe will use the feature flag as the indication here. The logic being if someone has already tried Rokt and has the feature flag on for it, even if they disable Rokt, we likely don't want to try to sell Rokt to them again\n---\nGlossary:\ngithub_pr_1: https://github.com/beam-commerce/aftersell/pull/1119\n\n\n---\nThe ticket above is a subticket of the following ticket:\nTitle: Sync CS Sales enablement data to Intercom\nBody:\n\n",
    "classification": "feature request",
    "state": "closed",
    "repo_link": "https://github.com/testbed/aftersell.git",
    "requested_commit": null,
    "issue_tracker_identifier": "",
    "ai_cost": {
        "issue_classifier": 0.000215,
        "issue_summarizer": 0.00614,
        "search_embedding": 1.56e-05,
        "documentation_agent": 0.0047,
        "repo_summary": 0.09738750000000003,
        "issue_star_solver": 0.112234,
        "snippet_processor": 0.02191,
        "bouncer": 0.02722
    },
    "attachments": [
        {
            "title": "chore(rokt): surface Rokt enablement to Intercom [BEAM-3449]",
            "url": "https://github.com/beam-commerce/aftersell/pull/1119",
            "content": "",
            "placeholder_tag": "github_pr_1",
            "content_type": "ExternalAssetsType.GITHUB_PR"
        }
    ],
    "inline_assets": [],
    "linked_issue_ids": [
        "ENG-74"
    ],
    "comments": [],
    "issue_summary": "- Feature flag: Indication for Rokt ads enablement\n- Logic condition: If a user has the feature flag for Rokt enabled, do not sell Rokt to them again even if they disable it.\n- Related GitHub PR: `github_pr_1` (https://github.com/beam-commerce/aftersell/pull/1119)\n- Parent ticket: \"Sync CS Sales enablement data to Intercom\"",
    "repo_summary": "The software project is a complex e-commerce platform called AfterSell. It consists of multiple directories such as `web`, `extensions`, and `docs`, each serving different purposes. The project uses TypeScript extensively and has a variety of dependencies for linting, testing, and building.\n\nOne key component is the `web/server` directory, which contains the backend logic for the platform. It includes features like user models with feature flags, Rokt integration settings, and post-purchase services. The `web/widgets` directory contains frontend components related to Rokt ads tracking and display.\n\nThere are also specific modules like `rokt-accounts.model.ts` for managing Rokt accounts and `users.model.ts` for user-related data. The project uses Typegoose for MongoDB modeling.\n\nThe project also has detailed documentation in the `docs` directory, providing setup instructions and explanations for various components like checkout upsell discounts and post-purchase extensions.\n\nThe ticket raised involves enabling Rokt ads in Intercom based on feature flags and user interactions to prevent redundant ad displays to users who have already interacted with Rokt. This requires logic to check for existing Rokt interactions and feature flag settings before displaying Rokt ads in Intercom.",
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1714393257.9809868,
        "classification": "feature request",
        "initial_code_snippets": [
            {
                "code": "function trackRoktEvents(selection) {\n        selection.getPlacements().then((placement) => {\n            //If no placements are returned, then Rokt has not loaded anything\n            //This means we can load our own popup content\n            if (placement.length === 0) {\n                trackRoktNoPlacement();\n                onRoktLoadsNothing();\n            }\n        });\n\n        // Listen for when the placement becomes interactive/ready to display\n        selection.on('OFFER_ENGAGEMENT').subscribe(() => {\n            // Logic to run after Placement has become interactive\n            trackRoktPlacementEvent({ subtype: 'OFFER_ENGAGEMENT' });\n        });\n\n        // Listen for when the placement becomes interactive/ready to display\n        selection.on('POSITIVE_ENGAGEMENT').subscribe(() => {\n            // Logic to run after Placement has become interactive\n            trackRoktPlacementEvent({ subtype: 'POSITIVE_ENGAGEMENT' });\n        });\n\n        // Listen for when the placement becomes interactive/ready to display\n        selection.on('PLACEMENT_CLOSED').subscribe(() => {\n            // Logic to run after Placement has become interactive\n            trackRoktPlacementEvent({ subtype: 'PLACEMENT_CLOSED' });\n        });\n\n        // Listen for when the placement becomes interactive/ready to display\n        selection.on('PLACEMENT_INTERACTIVE').subscribe(() => {\n            // Logic to run after Placement has become interactive\n            trackRoktPlacementEvent({ subtype: 'PLACEMENT_INTERACTIVE' });\n        });\n\n        // Listen for when the placement becomes interactive/ready to display\n        selection.on('PLACEMENT_READY').subscribe(() => {\n            // Logic to run after Placement has become interactive\n            trackRoktPlacementEvent({ subtype: 'PLACEMENT_READY' });\n        });\n    }\n\n    async function initRokt(accountId, attributes, identifier) {\n        const target = document.head || document.body;\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = 'https://apps.rokt.com/wsdk/integrations/launcher.js';\n        script.fetchpriority = 'high';\n        script.crossOrigin = 'anonymous';\n        script.async = true;\n        script.id = 'rokt-launcher';\n        target.appendChild(script);\n        await new Promise((resolve) => (window.Rokt ? resolve() : script.addEventListener('load', () => resolve())));\n\n        const launcher = await window.Rokt.createLauncher({\n            accountId,\n            sandbox: isDevelopmentStore,\n        });\n\n        const selection = await launcher.selectPlacements({\n            identifier,\n            attributes,\n        });\n\n        trackRoktEvents(selection);\n    }",
                "filename": "web/widgets/src/apps/widgets/aftersell-network/index.ts",
                "start_index": 2139,
                "end_index": 4868,
                "start_line": 53,
                "end_line": 235,
                "max_line": 237,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export async function syncShopifyShopSettingsWithRokt({ shopData }: { shopData: any }): Promise<any> {\n    if (!shopData || getIsDev()) {\n        return;\n    }\n\n    const roktAccount = await RoktAccountModel.findOne({ shop: shopData.domain });\n\n    if (!roktAccount?.appInstallationId) {\n        return;\n    }\n\n    //Update rokt account\n    const body: AccountSettingsRequest = {\n        brand: shopData.name,\n        email: shopData.email,\n        websiteUrl: shopData.domain,\n        fullName: shopData.shop_owner,\n        firstName: shopData?.shop_owner.split(' ')?.[0] || '',\n        lastName: shopData?.shop_owner?.split(' ')?.[1] || '',\n        addressLine1: shopData.address1,\n        addressLine2: shopData.address2 || '',\n        city: shopData.city,\n        stateOrProvince: shopData.province || shopData.state || '',\n        postcode: shopData.zip,\n        countryCode: shopData.country_code,\n    };\n\n    await fetch(\n        `https://smb-integration.rokt.com/v1/appinstallations/${roktAccount.appInstallationId}/account-settings`,\n        {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n            body: JSON.stringify(body),\n        }\n    );\n    return;\n}\n\nexport async function getReportingDemographics({\n    appInstallationId,\n    params,\n}: {\n    appInstallationId: string;\n    params: ReportingParams;\n}): Promise<any> {\n    const queryParams = new URLSearchParams({\n        dateStartUtc: params.dateStartUtc,\n        dateEndUtc: params.dateEndUtc,\n        currency: params.currency || 'USD',\n    });\n    const res = await fetch(\n        `https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/reporting/demographics?${queryParams}`,\n        {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n        }\n    );\n    return res.json();\n}\n\nexport async function getTopAdvertisers({\n    appInstallationId,\n    params,\n}: {\n    appInstallationId: string;\n    params: ReportingParams;\n}): Promise<any> {\n    const queryParams = new URLSearchParams({\n        dateStartUtc: params.dateStartUtc,\n        dateEndUtc: params.dateEndUtc,\n    });\n    const res = await fetch(\n        `https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/reporting/top-advertisers?${queryParams}`,\n        {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n        }\n    );\n    return res.json();\n}",
                "filename": "web/server/src/modules/rokt/rokt.api.ts",
                "start_index": 5024,
                "end_index": 7754,
                "start_line": 180,
                "end_line": 522,
                "max_line": 522,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "as$.post(`${HOST}/api/v1/public/widgets?auth=${shopUrl}`, paramsToGetWidgets).then((result) => {\n                    trackEvent({\n                        type: TY_PAGE_TRACK_EVENTS.response,\n                        payload: result,\n                    });\n\n                    const { widgets = [], funnelId } = result;\n\n                    const roktWidget = widgets.find((widget) => widget.source === 'rokt' && widget.active);\n                    const storewidePopupWidget = widgets.find(\n                        (widget) => widget.source === 'aftersell' && widget.appId === 'popupTimer' && widget.active\n                    );\n                    const afterSellWidgets = widgets.filter((widget) => {\n                        if (widget.source !== 'aftersell') return false;\n                        // Filter out storewide popup widget if the rokt widget is configured to override it\n                        if (\n                            roktWidget?.active &&\n                            roktWidget.config.overrideStorewidePopup &&\n                            widget.appId === 'popupTimer'\n                        ) {\n                            trackRoktWidgetConflictEvent({ direction: 'roktOverridesStorewidePopup' });\n                            return false;\n                        }\n                        return true;\n                    });\n\n                    if (roktWidget?.active) {\n                        // if there is a storewide popup widget and the config says to favor that over rokt, do so\n                        if (!!storewidePopupWidget && !roktWidget.config.overrideStorewidePopup) {\n                            trackRoktWidgetConflictEvent({ direction: 'storewidePopupOverridesRokt' });\n                        } else {\n                            loadAfterSellNetwork({\n                                onRoktLoadsNothing: () => {\n                                    // If Rokt loads nothing, then we should render the storewide popup widget if available\n                                    if (!storewidePopupWidget) return;\n                                    if (!window.aftersell?.renderApps) return;\n                                    window.aftersell.renderApps([storewidePopupWidget], products);\n                                },\n                            });\n                        }\n                    }\n\n                    if (Array.isArray(afterSellWidgets) && afterSellWidgets.length !== 0) {\n                        if (window.aftersell && window.aftersell.renderApps) {\n                            window.aftersell.renderApps(afterSellWidgets, products);\n                            store.set('as_current_funnel_id', funnelId);\n                            sendAnalytics('impressions', { value: 1 });\n                        }\n                    }\n                });\n\n                // check for partially paid order\n                refreshPageIfPostPurchasePaymentFailure();\n            }",
                "filename": "web/widgets/src/apps/widgets/index.ts",
                "start_index": 13287,
                "end_index": 16234,
                "start_line": 281,
                "end_line": 334,
                "max_line": 354,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export const maybeDisableAftersellBranding = async ({\n    shop,\n    shopifyService: _shopifyService,\n}: AfterSellBrandingProps): Promise<void> => {\n    // Disables Aftersell branding on the Post-Purchase page if the merchant is no longer eligible for it.\n\n    // this is called within billing logic, and a try catch is used to ensure it never interferes with billing\n    try {\n        const postPurchaseAftersellBrandingEnabled = await getGlobalFeatureFlagEnabled('postPurchaseBrandingIsEnabled');\n        if (!postPurchaseAftersellBrandingEnabled) return;\n\n        const shopifyService = await getShopifyService({ shop, shopifyService: _shopifyService });\n\n        // CASE 1: Only automatically enable if the user is no longer eligible for it\n        const eligible = await isEligibleForAftersellBranding({ shop, shopifyService });\n        if (!eligible) {\n            // disable aftersell branding\n            await UserModel.findOneAndUpdate({ myshopify_domain: shop }, { postPurchaseAftersellBranding: false });\n        }\n    } catch (err) {\n        console.error(`[${shop}] Error disabling Aftersell branding: ${err}`);\n    }\n};",
                "filename": "web/server/src/modules/post-purchase/post-purchase.service.ts",
                "start_index": 2982,
                "end_index": 4115,
                "start_line": 68,
                "end_line": 90,
                "max_line": 90,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { RoktAccountModel } from '../rokt/rokt-accounts.model';\nimport { MyShopifyDomain } from '../../utils/types';\nimport UsersModel from '../users/users.model';\nimport { RoktPlaceholderWidgetType } from '../ty-script-widgets-public/ty-script-widgets-public.dtos';\nimport { FunnelsModel } from '../funnels/funnels.model';\nimport { ServerEventKeys, trackServerEvent } from '../../utils/trackServerEvent';\n\nexport const getRoktPlaceholderWidget = async ({\n    shop,\n    funnelId,\n    checkoutToken,\n}: {\n    shop: MyShopifyDomain;\n    funnelId: string;\n    checkoutToken: string;\n}): Promise<null | RoktPlaceholderWidgetType> => {\n    const isRoktEnabled = await roktEnabledOnShop({ shop });\n    if (!isRoktEnabled) return null;\n\n    const [roktAccount, funnel] = await Promise.all([\n        RoktAccountModel.findOne({ shop }),\n        FunnelsModel.findOne({ _id: funnelId, shop }),\n    ]);\n\n    if (!roktAccount || !funnel) {\n        return null;\n    }\n\n    const isActive = funnel.roktIntegrationSettings?.enabled ?? true;\n\n    trackServerEvent({\n        type: ServerEventKeys.ROKT_RENDER_INTENT,\n        myshopifyDomain: shop,\n        checkoutId: checkoutToken,\n        payload: {\n            roktEnabledOnFunnel: isActive,\n        },\n    });\n\n    return {\n        source: 'rokt',\n        active: isActive,\n        appId: 'roktPlacement',\n        config: {\n            overrideStorewidePopup: roktAccount.afterSellSettings?.overrideStorewidePopup ?? true,\n        },\n    } as RoktPlaceholderWidgetType;\n};\n\nexport const roktEnabledOnShop = async ({ shop }: { shop: MyShopifyDomain }) => {\n    const user = await UsersModel.findOne({ myshopify_domain: shop }).lean();\n\n    if (!user || user.featureFlags?.roktIntegrationIsEnabled !== true) {\n        return false;\n    }\n\n    return true;\n};\n\nexport const getRoktDefaultWidget = async ({ shop }: { shop: MyShopifyDomain }) => {\n    const isActive = await roktEnabledOnShop({ shop });\n    if (!isActive) {\n        return null;\n    }\n    return {\n        source: 'rokt',\n        active: isActive,\n        appId: 'roktPlacement',\n        config: {\n            overrideStorewidePopup: true,\n        },\n    } as RoktPlaceholderWidgetType;\n};",
                "filename": "web/server/src/modules/rokt/rokt.service.ts",
                "start_index": 0,
                "end_index": 2187,
                "start_line": 1,
                "end_line": 73,
                "max_line": 73,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "async function AftersellNetwork({ onRoktLoadsNothing })",
                "filename": "web/widgets/src/apps/widgets/aftersell-network/index.ts",
                "start_index": 178,
                "end_index": 233,
                "start_line": 4,
                "end_line": 4,
                "max_line": 237,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n        const { orderVisibilityEvents, tyPageVisibilityEvents, roktAdsVisibilityEvents } = visibilityEvents\n            .filter((event) => event.checkoutId === order.checkout_token)\n            // don't send debug logs to frontend\n            .filter(\n                (event) =>\n                    event.type !== 'postPurchase.page.debugLog' ||\n                    event.type !== ServerEventKeys.EXPANDED_PURCHASE_DATA ||\n                    event.type !== ServerEventKeys.UPDATE_EXPANDED_PURCHASE_DATA ||\n                    event.type !== 'tyPage.page.debugLog' ||\n                    event.type !== 'rokt.placement.debugLog'\n            )\n            .reduce(\n                (acc, event) => {\n                    if (event.type.includes('postPurchase')) {\n                        acc.orderVisibilityEvents.push(event);\n                    } else if (\n                        event.type.includes('tyPage') ||\n                        // include Rokt visibility event that pertains to hiding the storewide popup discount\n                        event.type === 'rokt.placement.roktWidgetConflict'\n                    ) {\n                        acc.tyPageVisibilityEvents.push(event);\n                    } else if (event.type.includes('rokt')) {\n                        acc.roktAdsVisibilityEvents.push(event);\n                    }\n\n                    return acc;\n                },\n                { orderVisibilityEvents: [], tyPageVisibilityEvents: [], roktAdsVisibilityEvents: [] }\n            );\n        const hasImpression = orderVisibilityEvents.some((event) => event.type === 'postPurchase.page.impression');\n        const offerStatus = OrderBrowser.OfferStatus.getOfferStatus({\n            visibilityEvents: orderVisibilityEvents,\n            orderIsPartiallyPaid: order.financial_status === 'partially_paid',\n        });\n        const noShowReasons = OrderBrowser.NoShowReasons.getNoShowReasons({ order, offerStatus });\n\n        const hasTYPageImpression = tyPageVisibilityEvents.some((event) => event.type === 'tyPage.page.impression');\n        const tyPageOfferStatus = OrderBrowser.OfferStatus.getTYPageOfferStatus({\n            visibilityEvents: tyPageVisibilityEvents,\n            order,\n        });\n\n        const hasRoktAdImpression = roktAdsVisibilityEvents.some(\n            (event) => event.type === 'rokt.placement.event' && event.payload.subtype === 'PLACEMENT_INTERACTIVE'\n        );\n        const roktAdOfferStatus = OrderBrowser.OfferStatus.getRoktAdOfferStatus({\n            visibilityEvents: roktAdsVisibilityEvents,\n            order,\n        });",
                "filename": "web/server/src/modules/legacy-orders/legacy-orders.controller.ts",
                "start_index": 2759,
                "end_index": 5339,
                "start_line": 2,
                "end_line": 115,
                "max_line": 139,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "SettingsRoktWithData =",
                "filename": "web/client/src/pages/settings/settings-rokt.page.tsx",
                "start_index": 3011,
                "end_index": 3033,
                "start_line": 85,
                "end_line": 85,
                "max_line": 795,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n    const orderConfirmationPageIdentifier = 'order_confirmation_page_identifier';\n    const orderStatusPageIdentifier = 'order_status_page_identifier';\n\n    const { accountId, isDevelopmentStore } = await fetch(\n        `${process.env.HOST}/api/public/rokt/profile?shop=${shopUrl}`\n    ).then((res) => res.json());\n\n    trackRoktDebugLog({ details: { isDevelopmentStore } });\n\n    function injectPlaceholders() {\n        try {\n            const sectionContent = document.querySelector('div.section__content');\n            const contentBoxes = sectionContent.querySelectorAll('div.content-box');\n\n            const PLACEHOLDERS_CONFIG = [\n                {\n                    id: 'rokt_container_before_order_confirmation',\n                    sibling: contentBoxes.item(0),\n                    injectMethod: 'insertBefore',\n                },\n                {\n                    id: 'rokt_container_after_order_confirmation',\n                    sibling: contentBoxes.item(1),\n                    injectMethod: 'insertBefore',\n                },\n                {\n                    id: 'rokt_container_before_customer_information',\n                    sibling: contentBoxes.item(contentBoxes.length - 1),\n                    injectMethod: 'insertBefore',\n                },\n                {\n                    id: 'rokt_container_after_customer_information',\n                    sibling: contentBoxes.item(contentBoxes.length - 1),\n                    injectMethod: 'appendChild',\n                },\n            ];\n\n            PLACEHOLDERS_CONFIG.forEach(({ id, sibling, injectMethod }) => {\n                const placeholder = document.createElement('div');\n                placeholder.id = id;\n                sibling.parentNode[injectMethod](placeholder, sibling);\n            });\n        } catch (err) {\n            console.error(err);\n            // Swallow all errors\n        }\n    }",
                "filename": "web/widgets/src/apps/widgets/aftersell-network/index.ts",
                "start_index": 234,
                "end_index": 2133,
                "start_line": 1,
                "end_line": 235,
                "max_line": 237,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "featureFlags: {\n            /**\n             * @deprecated\n             */\n            partiallyPaidRemovalIsAvailable: Boolean,\n            subscriptionIntegrationIsEnabled: { type: Boolean, default: true },\n            reviewStarsIsEnabled: { type: Boolean, default: true },\n            multiProductIsEnabled: { type: Boolean, default: true },\n            splitTestIsEnabled: { type: Boolean, default: true },\n            checkoutIsEnabled: { type: Boolean, default: false },\n            checkoutBetaWidgetsAreEnabled: { type: Boolean, default: false },\n            postPurchaseReplacementUpsellsAreEnabled: { type: Boolean, default: false },\n            annualBillingAgreementIsAvailable: { type: Boolean, default: false },\n            productReviewCustomizationIsEnabled: { type: Boolean, default: false },\n            improvedInventoryIsEnabled: { type: Boolean, default: false },\n            polaris12IsEnabled: { type: Boolean, default: false },\n            /**\n             * @deprecated Access is controlled by Shopify plan instead of manually here.\n             */\n            tyPageExtensibilityIsEnabled: { type: Boolean, default: false },\n            profitAnalyticsAreEnabled: { type: Boolean, default: false },\n            roktIntegrationIsEnabled: { type: Boolean, default: false },\n            tyPageOrderMerging: { type: Boolean, default: false },\n            improvedPartiallyPaidRemovalIsEnabled: { type: Boolean, default: false },\n            firstNameBlankPreventionIsEnabled: { type: Boolean, default: false },\n            mixAiWithNonAiFixIsEnabled: { type: Boolean, default: false },\n            checkoutV2IsEnabled: { type: Boolean, default: false },\n        },\n        adsNetworkIsActive: { type: Boolean },\n        adsNetworkEmail: { type: String },\n        billingEstimate: {\n            estimatedChargeUSD: { type: Number },\n            nOrdersLast30Days: { type: Number },\n        },\n        scriptsAndHooksTransactionLocked: { type: Boolean },\n        // This was added to support new billing system with Checkout launch.\n        acceptedAfterSellPlanId: { type: String, required: false },\n        postPurchaseFreeTrialStartDate: { type: Date, required: false },\n        checkoutFreeTrialStartDate: { type: Date, required: false },\n        checkoutFreeTrialEndDate: { type: Date, required: false },\n        acceptedPromo: { type: AcceptedPromoSchema, required: false },\n        shouldUseTestBilling: { type: Boolean, required: false },\n        additionalOauthScopes: { type: [String], required: false },\n        installUtmParams: {\n            utm_source: { type: String, required: false },\n            utm_medium: { type: String, required: false },\n            utm_campaign: { type: String, required: false },\n            utm_term: { type: String, required: false },\n            utm_content: { type: String, required: false },\n        },",
                "filename": "web/server/src/modules/users/users.model.ts",
                "start_index": 4649,
                "end_index": 7519,
                "start_line": 142,
                "end_line": 199,
                "max_line": 211,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export function useRoktUpdatePlacementStatus() {\n    const queryClient = useQueryClient();\n\n    return useMutation({\n        mutationFn: async (body: UpdatePlacementStatusBodyType) => {\n            const result: UpdatePlacementStatusResponseType = await fetch(`/api/v2/rokt/placement-status`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(body),\n            }).then((res) => res.json());\n            return result;\n        },\n        onSuccess: (result, variables) => {\n            if (result.success) {\n                const maybeDisclaimer = variables.enabled\n                    ? 'Enabling Rokt may take up to 30 minutes to complete.'\n                    : '';\n                shopify.toast.show(`Changes saved. ${maybeDisclaimer}`, { duration: 5000 });\n                queryClient.invalidateQueries(['v2/rokt/placement-settings']);\n            } else {\n                shopify.toast.show('Error saving changes', { isError: true, duration: 3000 });\n            }\n        },\n    });\n}\n\nexport function useRoktUpdatePlacementConfiguration() {\n    const queryClient = useQueryClient();\n\n    return useMutation({\n        mutationFn: async (body: UpdatePlacementConfigurationModifiedBodyType) => {\n            const result: UpdatePlacementConfigurationResponseType = await fetch(\n                `/api/v2/rokt/placement-configuration`,\n                {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(body),\n                }\n            ).then((res) => res.json());\n            return result;\n        },\n        onSuccess: (result) => {\n            if (result.success) {\n                shopify.toast.show('Changes saved. Updates may take up to 30 minutes to take effect.', {\n                    duration: 3000,\n                });\n                queryClient.invalidateQueries(['v2/rokt/placement-settings']);\n            } else {\n                shopify.toast.show('Error saving changes', { isError: true, duration: 3000 });\n            }\n        },\n    });\n}\n\nexport function useRoktPaymentMethod() {\n    return useQuery<GetPaymentMethodResponseType>(['v2/rokt/payment-method']);\n}",
                "filename": "web/client/src/pages/rokt/rokt.hooks.ts",
                "start_index": 2944,
                "end_index": 5297,
                "start_line": 85,
                "end_line": 169,
                "max_line": 169,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "const eventDotColor = (event: AfterSellVisibilityEvent) => {\n    if (event.type === 'server.rokt.renderIntent' && !event.payload.roktEnabledOnFunnel) {\n        return 'red';\n    }\n\n    if (event.type === 'rokt.placement.event' && event.payload?.subtype === 'PLACEMENT_CLOSED') {\n        return 'red';\n    }\n\n    if (event.type === 'rokt.placement.event' && event.payload?.subtype === 'POSITIVE_ENGAGEMENT') {\n        return 'green';\n    }\n    return 'default';\n};\n\nconst EVENT_NAMES = {\n    'server.rokt.renderIntent': 'Rokt placement eligibility',\n    'rokt.placement.roktWidgetConflict': null,\n    'rokt.placement.event': 'Placement interaction',\n    'rokt.placement.none': 'Rokt showed no placements',\n};\n\n// Depends on https://docs.rokt.com/developers/integration-guides/web/advanced/event-based-integration/#event-types\nconst ROKT_PLACEMENT_EVENT_NAMES = {\n    OFFER_ENGAGEMENT: 'Engagement on Rokt placement',\n    POSITIVE_ENGAGEMENT: 'Positive engagement with Rokt placement',\n    PLACEMENT_CLOSED: 'Closed Rokt placement',\n    PLACEMENT_INTERACTIVE: 'Rokt placement displayed',\n    PLACEMENT_READY: 'Rokt placement prepared and ready to display',\n};",
                "filename": "web/client/src/pages/order-browser/components/timeline-rokt-ads/timeline-rokt-ads.tsx",
                "start_index": 4878,
                "end_index": 6035,
                "start_line": 114,
                "end_line": 143,
                "max_line": 143,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { getModelForClass, modelOptions, prop } from '@typegoose/typegoose';\nimport { REGEX_MYSHOPIFY } from '../../utils/regexes';\n\n/**\n * Responsible for the relevant fields pertaining to how the rest of the AfterSell ecosystem interacts with Rokt.\n */\n@modelOptions({ schemaOptions: { _id: false } })\nexport class AfterSellSettings {\n    @prop({ required: false, default: true })\n    overrideStorewidePopup!: boolean;\n}\n\n/**\n * This links a shop using AfterSell with a Rokt account. All other data is stored\n * on Rokt servers and can be retrieved using the `appInstallationId`.\n */\nclass RoktAccount {\n    @prop({ required: true, unique: true, match: REGEX_MYSHOPIFY })\n    shop!: string;\n\n    @prop({ required: true })\n    appInstallationId!: string;\n\n    @prop({ required: false })\n    accountId!: string;\n\n    @prop({ required: true })\n    createdAt!: string;\n\n    @prop({ required: false, default: null })\n    updatedAt!: string;\n\n    @prop({ required: false, default: null })\n    deletedAt!: string;\n\n    @prop({ required: true, default: {} })\n    afterSellSettings!: AfterSellSettings;\n}\n\nexport const RoktAccountModel = getModelForClass(RoktAccount);",
                "filename": "web/server/src/modules/rokt/rokt-accounts.model.ts",
                "start_index": 0,
                "end_index": 1161,
                "start_line": 1,
                "end_line": 40,
                "max_line": 40,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "const didFetchCheckout = Boolean(checkout);\n    const featureFlagFirstNameBlankPreventionIsEnabled = Boolean(user.featureFlags?.firstNameBlankPreventionIsEnabled);\n    XLog.log(\n        didFetchCheckout ? XLogSeverity.INFO_200 : XLogSeverity.WARNING_400,\n        {\n            shop,\n            referenceId,\n            didFetchCheckout,\n            isRefetchingQuery,\n            featureFlagFirstNameBlankPreventionIsEnabled,\n        },\n        {\n            logLocation: 'PostPurchase::GetOffer::FetchCheckout',\n        }\n    );\n    if (!didFetchCheckout) {\n        // TODO: when we go to release this widely we cannot skip all offers where we can't get checkout data.\n        // There are cases where we might fail to fetch checkout due to a missing scope or for other reasons (e.g.,\n        // custom checkout). We need to figure out a solution for stores where we will NEVER get a checkout. We\n        // don't want to accidentally stop showing all offers for these stores.\n        if (featureFlagFirstNameBlankPreventionIsEnabled) {\n            if (isRefetchingQuery) {\n                return res.json({ upsells: null, reason: 'Unable to get checkout data.' });\n            } else {\n                return res.json({ upsells: null, reason: 'Unable to get checkout data.', shouldBeRefetched: true });\n            }\n        }\n    }\n\n    const appliedDiscountCodes =\n        checkout?.applied_discounts?.filter((discount) => discount.applicable).map((discount) => discount.title) ?? [];\n    const appliedDiscountPercentageOutOf100 = checkout\n        ? FunnelsService.calculateCheckoutDiscountPercentageOutOf100({ checkout })\n        : 0;\n    const initialPurchaseLineItemsFromCheckout =\n        checkout?.line_items\n            .filter((item) => Boolean(item.variant_id))\n            .map((item) => ({\n                key: item.key,\n                variantId: item.variant_id,\n                // We classify has having a discount if the item is involved in a discount in any way. This could\n                // include being the \"Buy X\" part of a \"Buy X Get Y\" discount, in which case the item has a discount\n                // value of $0.\n                hasDiscount: item.discount_allocations.length > 0,\n                priceShopCurrency: Number(item.line_price), // this is the unit price multiplied by quantity\n                taxAmountShopCurrency: item.tax_lines.reduce((acc, taxLine) => acc + Number(taxLine.price), 0),\n            })) ?? [];\n\n    if (!destinationCountryCode) {\n        // Only use country code from checkout if country is not present in initial purchase data.\n        // Sometimes during dev this happened. I think it's related to the handling of customers on dev.\n        destinationCountryCode = checkout?.shipping_address.country_code ?? null;\n    }\n\n    const storefrontSessionService = new StorefrontSessionService();",
                "filename": "web/server/src/modules/post-purchase-public/post-purchase-public.controller.ts",
                "start_index": 27819,
                "end_index": 30670,
                "start_line": 638,
                "end_line": 692,
                "max_line": 1418,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n    if (isProductRec(upsells.upsell_default) || isProductRec(upsells.downsell)) {\n        const productRecommendationIds = await getProductRecommendations({\n            getRecommendedProducts,\n            productIdToRecommendFrom,\n            productIdsInOriginalPurchase,\n            shop,\n            customAiRecExcludedProductIds,\n            productRecExcludedCollectionIds,\n            shopifyService,\n            nToRecommend: 30,\n        });\n        if (isProductRec(upsells.upsell_default)) {\n            const upsellProducts = get(upsells.upsell_default, 'product', []);\n            const amountOfUpsellRecommendation = (\n                Array.isArray(upsellProducts) ? upsellProducts : [upsellProducts]\n            ).filter((product) => product.isProductRecommendation).length;\n            upsells.upsell_default = getNullSafeUpsell(\n                upsells.upsell_default,\n                productRecommendationIds.slice(0, amountOfUpsellRecommendation),\n                featureFlagMixAiWithNonAiFixIsEnabled\n            );\n            if (isProductRec(upsells.downsell)) {\n                upsells.downsell = getNullSafeUpsell(\n                    upsells.downsell,\n                    productRecommendationIds.slice(amountOfUpsellRecommendation),\n                    featureFlagMixAiWithNonAiFixIsEnabled\n                );\n            }\n        } else {\n            upsells.downsell = getNullSafeUpsell(\n                upsells.downsell,\n                productRecommendationIds,\n                featureFlagMixAiWithNonAiFixIsEnabled\n            );\n        }\n    }",
                "filename": "web/server/src/modules/product-recommendations/product-recommendations.ts",
                "start_index": 11121,
                "end_index": 12699,
                "start_line": 2,
                "end_line": 350,
                "max_line": 351,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "switch (order.aftersell_rokt_ads.status) {\n        // case 'shown':\n        //     return (\n        //         <Banner title=\"\" status=\"warning\">\n        //             <Text as=\"p\">\n        //                 None of the{' '}\n        //                 <Text as=\"span\" fontWeight=\"semibold\">\n        //                     active\n        //                 </Text>{' '}\n        //                 funnels had triggers that matched this order. We recommend having one active \"show for all\"\n        //                 funnel at lowest priority to cover cases like this order.\n        //             </Text>\n        //         </Banner>\n        //     );\n        case 'accepted':\n            return (\n                <Banner title=\"The placement was accepted!\" status=\"success\">\n                    <Text as=\"p\">The customer interacted favourably with the offer placement displayed to them.</Text>\n                </Banner>\n            );\n        case 'skipped':\n            return (\n                <Banner title=\"Rokt placement was not displayed\" status=\"warning\">\n                    <Text as=\"p\">A Rokt ad was not shown. Possible reasons for this include:</Text>\n                    <List>\n                        <List.Item>Rokt ads are not enabled in the Rokt Network</List.Item>\n                        <List.Item>\n                            A thank you page popup widget was shown instead of the Rokt Ad due to this setting\n                        </List.Item>\n                        <List.Item>The funnel shown for this order has rokt ads disabled</List.Item>\n                        <List.Item>\n                            The Rokt allocation percentage is less than 100% and was chosen not to show\n                        </List.Item>\n                    </List>\n                </Banner>\n            );\n        default:\n            return null;\n    }\n};\n\nconst MaybeEventBanner = ({ event, order }: { event: AfterSellVisibilityEvent; order: Order }) => {\n    if (event.type === 'rokt.placement.event' && event.payload?.subtype === 'POSITIVE_ENGAGEMENT') {\n        return (\n            <Banner status=\"success\">\n                The customer interacted favourably with the offer placement displayed to them!\n            </Banner>\n        );\n    }\n    if (event.type === 'server.rokt.renderIntent' && !event.payload?.roktEnabledOnFunnel) {\n        return (\n            <Banner status=\"critical\">\n                Rokt was manually disabled from showing on the funnel that this purchase triggered.\n            </Banner>\n        );\n    }\n    if (event.type === 'rokt.placement.none') {\n        return (\n            <Banner status=\"info\">\n                Rokt focuses on showing highly relevant offers to customers. Sometimes, it is best to show the customer\n                nothing at all in order to keep their trust. Due to this, offers may not be shown even when enabled.\n            </Banner>\n        );\n    }\n    return null;\n};",
                "filename": "web/client/src/pages/order-browser/components/timeline-rokt-ads/timeline-rokt-ads.tsx",
                "start_index": 1937,
                "end_index": 4876,
                "start_line": 47,
                "end_line": 143,
                "max_line": 143,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "const RoktFunnelSettingsCard = ({ funnelId }: { funnelId: string }) => {\n    const navigate = useEmbeddedNavigate();\n    const { data: funnelData } = useFunnel({ id: funnelId });\n    const funnelUpdateMutation = useFunnelUpdate();\n    const roktIntegrationIsEnabled = useFeatureFlagIsEnabled('roktIntegrationIsEnabled');\n    const form = useForm({\n        fields: {\n            enabled: useField(funnelData?.item?.roktIntegrationSettings?.enabled ?? true),\n        },\n        onSubmit: async (values) => {\n            if (funnelData?.item) {\n                await funnelUpdateMutation.mutateAsync({\n                    funnel: {\n                        ...funnelData.item,\n                        roktIntegrationSettings: {\n                            enabled: values.enabled,\n                        },\n                    },\n                });\n            }\n            return { status: 'success' as const };\n        },\n        makeCleanAfterSubmit: true,\n    });\n\n    if (!roktIntegrationIsEnabled || !funnelData) {\n        return null;\n    }\n\n    return (\n        <CardForm form={form}>\n            <VerticalStack gap=\"2\">\n                <HorizontalStack align=\"space-between\" blockAlign=\"center\">\n                    <HorizontalStack gap=\"2\">\n                        {form.fields.enabled.value ? (\n                            <Icon source={CircleTickMajor as IconSource} color=\"success\" />\n                        ) : (\n                            <Icon source={AlertMinor as IconSource} color=\"critical\" />\n                        )}\n\n                        <Text variant=\"headingMd\" as=\"h6\">\n                            {form.fields.enabled.value ? 'Rokt Network is enabled' : 'Rokt Network is disabled'}\n                        </Text>\n                    </HorizontalStack>\n                    {form.fields.enabled.value ? (\n                        <Button size=\"slim\" outline destructive onClick={() => form.fields.enabled.onChange(false)}>\n                            Disable\n                        </Button>\n                    ) :",
                "filename": "web/client/src/pages/funnels/funnels-steps.page.tsx",
                "start_index": 32170,
                "end_index": 34217,
                "start_line": 811,
                "end_line": 1286,
                "max_line": 2225,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export const HEADER_SECTION_ID = 'header .main__header';\nexport const LEFT_SECTION_ID = 'main.main__content';\nexport const RIGHT_SECTION_ID = 'aside .sidebar';\nexport const displaySettings = {\n    ON_EVERY_IMPRESSION: 'onEveryImpression',\n    DISPLAY_ONCE_PER_CUSTOMER: 'oncePerCustomer',\n    ONCE_PER_ORDER: 'oncePerOrder',\n    UNTIL_PURCHASED: 'untilPurchased',\n    ON_FIRST_IMPRESSION: 'onlyOnFirst',\n    ON_SECOND_IMPRESION: 'onlyOnSecond',\n    ON_SECOND_IMPRESION_AND_AFTER: 'onlyOnSecondAndAfter',\n};\nexport const displaySettingsOld = {\n    ON_EVERY_IMPRESSION: 'On every impression',\n    DISPLAY_ONCE_PER_CUSTOMER: 'Display once per customer',\n    ONCE_PER_ORDER: 'Once per order',\n};\n\nexport const POPUP_TIMER_SAVED_DATA_SESSION_KEY = 'as-popup-timer-saved-data';\nexport const POPUP_TIMER_END_TIMESTAMP_MS_SESSION_KEY = 'as-popup-timer-end-timestamp-ms';\nexport const POPUP_TIMER_BOTTOM_BAR_IS_CLOSED_BY_CUSTOMER = 'as-popup-timer-bottom-bar-is-closed-by-customer';\n\nexport const TY_PAGE_TRACK_EVENTS = {\n    request: 'tyPage.trigger.request',\n    response: 'tyPage.trigger.response',\n    partiallyPaidReload: 'tyPage.page.partiallyPaidReload',\n    error: 'tyPage.page.error',\n    impression: 'tyPage.page.impression', //for each type of widget {widgetType: string, widgetId: string}\n    acceptUpsell: 'tyPage.page.acceptUpsell',\n    upsellTimeEnd: 'tyPage.page.upsellTimeEnd',\n    acceptDiscount: 'tyPage.page.acceptDiscount',\n    declineDiscount: 'tyPage.page.declineDiscount',\n    debugLog: 'tyPage.page.debugLog',\n};\n\nexport const TY_PAGE_WIDGET_NAMES = {\n    productRecommendation: 'productRecommendation',\n    popupTimer: 'popupTimer',\n    addVideo: 'addVideo',\n    addTextWidget: 'addTextWidget',\n    addReviews: 'addReviews',\n    addImage: 'addImage',\n    addFaq: 'addFaq',\n};\n\nexport const ROKT_EVENT_KEY = 'rokt';\nexport const ROKT_TRACK_CLIENT_EVENTS = {\n    roktWidgetConflict: `${ROKT_EVENT_KEY}.placement.roktWidgetConflict`,\n    roktPlacementEvent: `${ROKT_EVENT_KEY}.placement.event`,\n    roktDebugLog: `${ROKT_EVENT_KEY}.placement.debugLog`,\n    roktEmpty: `${ROKT_EVENT_KEY}.placement.none`,\n};",
                "filename": "web/widgets/src/utils/constants.ts",
                "start_index": 0,
                "end_index": 2120,
                "start_line": 1,
                "end_line": 52,
                "max_line": 52,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "=> {\n                                const formErrors = accountCreationForm.validate();\n                                if (formErrors.length === 0) {\n                                    roktAccountCreateMutation\n                                        .mutateAsync({\n                                            firstName: currentUser.onlineAccessAssociatedUser?.first_name || '',\n                                            lastName: currentUser.onlineAccessAssociatedUser?.last_name || '',\n                                            fullName:\n                                                currentUser.onlineAccessAssociatedUser?.last_name +\n                                                ' ' +\n                                                currentUser.onlineAccessAssociatedUser?.last_name,\n                                            primaryEmail: currentUser.email || '',\n                                            websiteUrl: currentUser.domain,\n                                            countryCode: currentUser.country_code,\n                                            brand: currentUser.name,\n                                            verticalId: Number(accountCreationForm.fields.vertical.value),\n                                            subVerticalId: Number(accountCreationForm.fields.subVertical.value),\n                                            platformIntegration: 'AfterSell',\n                                            storeIdentifier: currentUser.myshopify_domain,\n                                        })\n                                        .then(() => {\n                                            setPolling(true);\n                                        });\n                                }\n                            }}\n                        >\n                            Confirm\n                        </Button>\n                    </HorizontalStack>\n                </Layout.Section>\n            </Layout>\n            <Box minHeight=\"50px\" />\n        </Page>\n    );\n};\n\ntype PlacementOnOrderStatusPageOptions = 'confirmationOnly' | 'confirmationAndOSP';\nconst EnableDisable = ({ roktPlacementSettings }: { roktPlacementSettings: PlacementSettingsModifiedResponseType }) => {\n    const roktUpdatePlacementStatusMutation = useRoktUpdatePlacementStatus();\n    const [placementPagesStatusOpen, setPlacementPagesStatusOpen] = useState(false);\n\n    const form = useForm({\n        fields: {\n            enabled: useField(roktPlacementSettings.data.enabled),\n            showPlacementOnOrderStatusPage: useField(roktPlacementSettings.data.showPlacementOnOrderStatusPage),\n        },\n        onSubmit: async (values) => {\n            await roktUpdatePlacementStatusMutation.mutateAsync(values);\n            return { status: 'success' };\n        },\n        makeCleanAfterSubmit: true,\n    });",
                "filename": "web/client/src/pages/rokt/rokt.page.tsx",
                "start_index": 35128,
                "end_index": 37962,
                "start_line": 52,
                "end_line": 1393,
                "max_line": 1493,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "const isOrderFromAfterSell = (((window.Shopify || {}).checkout || {}).line_items || []).some(\n                (lineItem) =>\n                    lineItem.properties &&\n                    lineItem.properties[PRODUCT_RECOMMENDATION_DRAFT_ORDER_LINE_ITEM_KEY] ===\n                        PRODUCT_RECOMMENDATION_DRAFT_ORDER_LINE_ITEM_VALUE\n            );\n\n            store.set('isOrderFromAfterSell', isOrderFromAfterSell);\n\n            //  If popupwidget && checkout initiated && thankyou page OR product recommendation widget && checkout initiated && thankyou page",
                "filename": "web/widgets/src/apps/widgets/index.ts",
                "start_index": 9050,
                "end_index": 9613,
                "start_line": 189,
                "end_line": 198,
                "max_line": 354,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "initial_doc_snippets": [
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# AfterSell\n\n### All Docs on Notion \ud83d\udc49 [AfterSell Notion Docs](https://www.notion.so/aftersell/AfterSell-Docs-9d43566167b5426d86b5983925872953?pvs=4)",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 148,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script defer src=\"./thankyoupage_bundle.js?v2\"></script>\n        <script defer src=\"/apps/aftersell_sdk.bundle.min.js?v2\"></script>\n    </head>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241237,
                "end_index": 241381,
                "start_line": 6073,
                "end_line": 6075,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<body class=\"aftersell-preview\">\n        <a href=\"#main-header\" class=\"skip-to-content\"> Skip to content </a>\n\n        <header class=\"banner\" data-header=\"\" role=\"banner\">\n            <div class=\"wrap\">\n                <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n            </div>\n        </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241387,
                "end_index": 241804,
                "start_line": 6077,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/server` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 999,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"hidden\">\n                            <span class=\"visually-hidden\" id=\"forwarding-external-new-window-message\">\n                                Opens external website in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-new-window-message\">\n                                Opens in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-external-message\">\n                                Opens external website.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"checkout-context-step-one\">\n                                Customer information - Checkout\n                            </span>\n                        </div>\n                    </main>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 322226,
                "end_index": 323078,
                "start_line": 6265,
                "end_line": 6282,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script>\n            !(function (f, b, e, v, n, t, s) {\n                if (f.fbq) return;\n                n = f.fbq = function () {\n                    n.callMethod ? n.callMethod.apply(n, arguments) : n.queue.push(arguments);\n                };\n                if (!f._fbq) f._fbq = n;\n                n.push = n;\n                n.loaded = !0;\n                n.version = '2.0';\n                n.queue = [];\n                t = b.createElement(e);\n                t.async = !0;\n                t.src = v;\n                s = b.getElementsByTagName(e)[0];\n                s.parentNode.insertBefore(t, s);\n            })(window, document, 'script', 'https://connect.facebook.net/en_US/fbevents.js');\n            fbq('init', '895262111044943');\n            fbq('track', 'PageView');\n        </script>\n        <!-- End Facebook Pixel Code -->\n        <!-- Reddit Pixel -->\n        <script>\n            !(function (w, d) {\n                if (!w.rdt) {\n                    var p = (w.rdt = function () {\n                        p.sendEvent ? p.sendEvent.apply(p, arguments) : p.callQueue.push(arguments);\n                    });\n                    p.callQueue = [];\n                    var t = d.createElement('script');\n                    (t.src = 'https://www.redditstatic.com/ads/pixel.js'), (t.async = !0);\n                    var s = d.getElementsByTagName('script')[0];\n                    s.parentNode.insertBefore(t, s);\n                }\n            })(window, document);\n            rdt('init', 't2_dp3wj8bg');\n            rdt('track', 'PageVisit');\n        </script>\n        <!-- End Reddit Pixel -->\n\n        <!-- Dev HMR [START] -->\n        <script type=\"module\">\n            if (!import.meta.env || !import.meta.env.PROD) {\n                // For embedded development, the iframe loads an HTML file from the server. Normally for\n                // development, the HTML file is served by the dev server, which injects the HMR script.\n                // This script adds the HMR script to the iframe to allow HMR in embedded development.\n                const script = document.createElement('script');\n                script.setAttribute('type', 'module');\n                script.setAttribute('src', './src/dev-hmr.ts');\n                document.getElementsByTagName('head')[0].append(script);\n            }\n        </script>\n        <!-- Dev HMR [END] -->\n\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com/\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" crossorigin=\"anonymous\" />\n        <link\n            href=\"https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap\"\n        />\n    </head>",
                "filename": "web/client/index.html",
                "start_index": 6232,
                "end_index": 8924,
                "start_line": 7,
                "end_line": 178,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<html\n    lang=\"en\"\n    dir=\"ltr\"\n    class=\"js desktop page--no-banner page--logo-main page--show page--show card-fields cors svg opacity placeholder no-touchevents displaytable display-table generatedcontent cssanimations flexbox no-flexboxtweener anyflexbox shopemoji floating-labels\"\n>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 0,
                "end_index": 289,
                "start_line": 1,
                "end_line": 6518,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <!-- Shopify App Bridge [START] -->\n        <meta name=\"shopify-api-key\" content=\"%SHOPIFY_API_KEY%\" />",
                "filename": "web/client/index.html",
                "start_index": 38,
                "end_index": 156,
                "start_line": 4,
                "end_line": 6,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<aside class=\"sidebar\" role=\"complementary\">\n                    <div class=\"sidebar__header\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323196,
                "end_index": 323511,
                "start_line": 6285,
                "end_line": 6493,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<button\n                class=\"order-summary-toggle order-summary-toggle--show shown-if-js\"\n                data-trekkie-id=\"order_summary_toggle\"\n                aria-expanded=\"false\"\n                aria-controls=\"order-summary\"\n                data-drawer-toggle=\"[data-order-summary]\"\n            >",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241855,
                "end_index": 242157,
                "start_line": 6089,
                "end_line": 6488,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Shopify Function development with Rust\n\n## Dependencies\n\n-   [Install Rust](https://www.rust-lang.org/tools/install)\n    -   On Windows, Rust requires the [Microsoft C++ Build Tools](https://docs.microsoft.com/en-us/windows/dev-environment/rust/setup). Be sure to select the _Desktop development with C++_ workload when installing them.\n-   Install [`cargo-wasi`](https://bytecodealliance.github.io/cargo-wasi/)\n    -   `cargo install cargo-wasi`\n-   On Macs with Apple Silicon, you'll also need to install the Binaryen toolchain and set the `WASM_OPT` environment variable. ([related issue](https://github.com/bytecodealliance/cargo-wasi/issues/112))\n    -   `brew install binaryen`\n    -   Add `export WASM_OPT=/opt/homebrew/bin/wasm-opt` to your `.bashrc` or `.zshrc`\n\n## Building the function\n\nYou can build this individual function using `cargo wasi`.\n\n```shell\ncargo wasi build --release\n```\n\nThe Shopify CLI `build` command will also execute this, based on the configuration in `shopify.function.extension.toml`.\n\n## Testing\n\n> Requires Node v16+\n\n1. Create a temporary JSON file (e.g., `a.json`) in the following format:\n\n```json\n{\n    \"data\": {\n        \"foo\": \"bar\"\n    },\n    \"secretKey\": \"abc123\"\n}\n```\n\n2. Run the following command\n\n```\nyarn test:new-hmac < a.json\n```\n\n3. Copy the generated HMAC into the test file",
                "filename": "extensions/upsell-offer-discount-function/README.md",
                "start_index": 0,
                "end_index": 1329,
                "start_line": 1,
                "end_line": 44,
                "max_line": 44,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <meta charset=\"utf-8\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n        <meta\n            id=\"thankyoupage_viewport_meta\"\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, user-scalable=0\"\n        />\n        <meta name=\"referrer\" content=\"origin\" />\n\n        <title>Thank you! - Checkout</title>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 294,
                "end_index": 717,
                "start_line": 6,
                "end_line": 16,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"main\">\n                    <header class=\"main__header\" role=\"banner\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245397,
                "end_index": 245703,
                "start_line": 6153,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<span class=\"order-summary-toggle__inner\">\n                        <span class=\"order-summary-toggle__icon-wrapper\">\n                            <svg\n                                width=\"20\"\n                                height=\"19\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__icon\"\n                            >\n                                <path\n                                    d=\"M17.178 13.088H5.453c-.454 0-.91-.364-.91-.818L3.727 1.818H0V0h4.544c.455 0 .91.364.91.818l.09 1.272h13.45c.274 0 .547.09.73.364.18.182.27.454.18.727l-1.817 9.18c-.09.455-.455.728-.91.728zM6.27 11.27h10.09l1.454-7.362H5.634l.637 7.362zm.092 7.715c1.004 0 1.818-.813 1.818-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817zm9.18 0c1.004 0 1.817-.813 1.817-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--show\">\n                            <span>Show order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"6\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M.504 1.813l4.358 3.845.496.438.496-.438 4.642-4.096L9.504.438 4.862 4.534h.992L1.496.69.504 1.812z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--hide\">\n                            <span>Hide order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"7\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M6.138.876L5.642.438l-.496.438L.504 4.972l.992 1.124L6.138 2l-.496.436 3.862 3.408.992-1.122L6.138.876z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span\n                            class=\"order-summary-toggle__total-recap total-recap\"\n                            data-order-summary-section=\"toggle-total-recap\"\n                        >\n                            <span class=\"total-recap__final-price\" data-checkout-payment-due-target=\"5073\">$50.73</span>\n                        </span>\n                    </span>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 242214,
                "end_index": 245205,
                "start_line": 6097,
                "end_line": 6446,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<tr\n                                                    class=\"product\"\n                                                    data-product-id=\"4330495803489\"\n                                                    data-variant-id=\"31055496183905\"\n                                                    data-product-type=\"Bracelet\"\n                                                    data-customer-ready-visible=\"\"\n                                                >",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 325343,
                "end_index": 325797,
                "start_line": 6303,
                "end_line": 6444,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"step__sections\">\n                                <div class=\"section\">\n                                    <div class=\"section__header os-header\">\n                                        <svg\n                                            width=\"56\"\n                                            height=\"56\"\n                                            viewBox=\"0 0 56 56\"\n                                            fill=\"none\"\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                            <circle cx=\"28\" cy=\"28\" r=\"26\" stroke=\"#E5E5E5\" stroke-width=\"2.29412\" />\n                                            <path\n                                                fill-rule=\"evenodd\"\n                                                clip-rule=\"evenodd\"\n                                                d=\"M22.4811 37.3603L16.3636 31.3947C15.5663 30.6172 15.5663 29.3605 16.3636 28.583C17.1609 27.8055 18.4497 27.8055 19.247 28.583L23.8066 33.0293L36.6493 18.7538C37.3834 17.9186 38.6701 17.8231 39.5225 18.537C40.379 19.2529 40.4789 20.5056 39.7448 21.3388L25.4706 37.2469C25.1015 37.6685 24.5672 37.9191 24.0003 37.9409C23.3825 37.9429 22.8625 37.7341 22.4811 37.3603Z\"\n                                                fill=\"#008060\"\n                                                stroke=\"#E5E5E5\"\n                                                stroke-width=\"0.764706\"\n                                            />\n                                        </svg>\n                                        <div class=\"os-header__heading\">\n                                            <span class=\"os-order-number\"> Order #1001 </span>\n                                            <h2 class=\"os-header__title\" id=\"main-header\" tabindex=\"-1\">\n                                                Thank you {{Customer Name}}!\n                                            </h2>\n                                        </div>\n                                    </div>\n                                </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245858,
                "end_index": 247957,
                "start_line": 6161,
                "end_line": 6451,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# [[[ --- CLIENT --- ]]]\nFROM node:18.16.1-alpine AS client\nARG SHOPIFY_API_KEY\nENV SHOPIFY_API_KEY=$SHOPIFY_API_KEY\nARG HOST\nENV HOST=$HOST\nARG NODE_ENV\nENV NODE_ENV=$NODE_ENV\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/client/package.json ./web/client/package.json\nCOPY web/client/yarn.lock ./web/client/yarn.lock\nRUN cd web/client && yarn install --frozen-lockfile --production=false\nCOPY extensions-web-common/package.json ./extensions-web-common/package.json\nCOPY extensions-web-common/yarn.lock ./extensions-web-common/yarn.lock\nRUN cd extensions-web-common && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY extensions/post-purchase ./extensions/post-purchase\nCOPY extensions-web-common/post-purchase ./extensions-web-common/post-purchase\nCOPY extensions-web-common/checkout ./extensions-web-common/checkout\nCOPY extensions-web-common/shared ./extensions-web-common/shared\nCOPY extensions-web-common/ty-page ./extensions-web-common/ty-page\nCOPY web/client ./web/client\nRUN cd web/client && yarn build\n\n# [[[ --- TY PAGE --- ]]]\nFROM node:18.16.1-alpine AS ty-page\nARG HOST\nENV HOST=$HOST\nWORKDIR /usr/src/app\nCOPY web/widgets/package.json ./web/widgets/package.json\nCOPY web/widgets/yarn.lock ./web/widgets/yarn.lock\nRUN cd web/widgets && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY web/widgets ./web/widgets\nRUN cd web/widgets && yarn build\n\n# [[[ --- SERVER --- ]]]\nFROM node:18.16.1-alpine AS server\nWORKDIR /usr/src/app\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=false\nCOPY web/server ./web/server\nCOPY web/common ./web/common\nRUN cd web/server && yarn build\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM node:18.16.1-alpine AS final\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=true\nCOPY --from=server /usr/src/app/web/server/build ./web/server/build\nCOPY --from=ty-page /usr/src/app/web/widgets/dist ./web/server/build/server/dist\nCOPY --from=client /usr/src/app/web/client/dist ./web/server/build/server/dist/client\nCOPY package.json ./package.json\nCMD [\"yarn\", \"start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2514,
                "start_line": 1,
                "end_line": 61,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box__row text-container\">\n                                                <h2 class=\"heading-2 os-step__title\" id=\"main-header\" tabindex=\"-1\">\n                                                    Your order is confirmed\n                                                </h2>\n                                                <p class=\"os-step__description\">\n                                                    You\u2019ll receive an email when your order is ready.\n                                                </p>\n                                            </div>\n                                        </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 317828,
                "end_index": 318454,
                "start_line": 6200,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "intial_documentation_sources": {},
        "external_documentation_snippets": {},
        "mmr_code_snippets_initial": [
            {
                "code": "function trackRoktEvents(selection) {\n        selection.getPlacements().then((placement) => {\n            //If no placements are returned, then Rokt has not loaded anything\n            //This means we can load our own popup content\n            if (placement.length === 0) {\n                trackRoktNoPlacement();\n                onRoktLoadsNothing();\n            }\n        });\n\n        // Listen for when the placement becomes interactive/ready to display\n        selection.on('OFFER_ENGAGEMENT').subscribe(() => {\n            // Logic to run after Placement has become interactive\n            trackRoktPlacementEvent({ subtype: 'OFFER_ENGAGEMENT' });\n        });\n\n        // Listen for when the placement becomes interactive/ready to display\n        selection.on('POSITIVE_ENGAGEMENT').subscribe(() => {\n            // Logic to run after Placement has become interactive\n            trackRoktPlacementEvent({ subtype: 'POSITIVE_ENGAGEMENT' });\n        });\n\n        // Listen for when the placement becomes interactive/ready to display\n        selection.on('PLACEMENT_CLOSED').subscribe(() => {\n            // Logic to run after Placement has become interactive\n            trackRoktPlacementEvent({ subtype: 'PLACEMENT_CLOSED' });\n        });\n\n        // Listen for when the placement becomes interactive/ready to display\n        selection.on('PLACEMENT_INTERACTIVE').subscribe(() => {\n            // Logic to run after Placement has become interactive\n            trackRoktPlacementEvent({ subtype: 'PLACEMENT_INTERACTIVE' });\n        });\n\n        // Listen for when the placement becomes interactive/ready to display\n        selection.on('PLACEMENT_READY').subscribe(() => {\n            // Logic to run after Placement has become interactive\n            trackRoktPlacementEvent({ subtype: 'PLACEMENT_READY' });\n        });\n    }\n\n    async function initRokt(accountId, attributes, identifier) {\n        const target = document.head || document.body;\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = 'https://apps.rokt.com/wsdk/integrations/launcher.js';\n        script.fetchpriority = 'high';\n        script.crossOrigin = 'anonymous';\n        script.async = true;\n        script.id = 'rokt-launcher';\n        target.appendChild(script);\n        await new Promise((resolve) => (window.Rokt ? resolve() : script.addEventListener('load', () => resolve())));\n\n        const launcher = await window.Rokt.createLauncher({\n            accountId,\n            sandbox: isDevelopmentStore,\n        });\n\n        const selection = await launcher.selectPlacements({\n            identifier,\n            attributes,\n        });\n\n        trackRoktEvents(selection);\n    }",
                "filename": "web/widgets/src/apps/widgets/aftersell-network/index.ts",
                "start_index": 2139,
                "end_index": 4868,
                "start_line": 53,
                "end_line": 235,
                "max_line": 237,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "featureFlags: {\n            /**\n             * @deprecated\n             */\n            partiallyPaidRemovalIsAvailable: Boolean,\n            subscriptionIntegrationIsEnabled: { type: Boolean, default: true },\n            reviewStarsIsEnabled: { type: Boolean, default: true },\n            multiProductIsEnabled: { type: Boolean, default: true },\n            splitTestIsEnabled: { type: Boolean, default: true },\n            checkoutIsEnabled: { type: Boolean, default: false },\n            checkoutBetaWidgetsAreEnabled: { type: Boolean, default: false },\n            postPurchaseReplacementUpsellsAreEnabled: { type: Boolean, default: false },\n            annualBillingAgreementIsAvailable: { type: Boolean, default: false },\n            productReviewCustomizationIsEnabled: { type: Boolean, default: false },\n            improvedInventoryIsEnabled: { type: Boolean, default: false },\n            polaris12IsEnabled: { type: Boolean, default: false },\n            /**\n             * @deprecated Access is controlled by Shopify plan instead of manually here.\n             */\n            tyPageExtensibilityIsEnabled: { type: Boolean, default: false },\n            profitAnalyticsAreEnabled: { type: Boolean, default: false },\n            roktIntegrationIsEnabled: { type: Boolean, default: false },\n            tyPageOrderMerging: { type: Boolean, default: false },\n            improvedPartiallyPaidRemovalIsEnabled: { type: Boolean, default: false },\n            firstNameBlankPreventionIsEnabled: { type: Boolean, default: false },\n            mixAiWithNonAiFixIsEnabled: { type: Boolean, default: false },\n            checkoutV2IsEnabled: { type: Boolean, default: false },\n        },\n        adsNetworkIsActive: { type: Boolean },\n        adsNetworkEmail: { type: String },\n        billingEstimate: {\n            estimatedChargeUSD: { type: Number },\n            nOrdersLast30Days: { type: Number },\n        },\n        scriptsAndHooksTransactionLocked: { type: Boolean },\n        // This was added to support new billing system with Checkout launch.\n        acceptedAfterSellPlanId: { type: String, required: false },\n        postPurchaseFreeTrialStartDate: { type: Date, required: false },\n        checkoutFreeTrialStartDate: { type: Date, required: false },\n        checkoutFreeTrialEndDate: { type: Date, required: false },\n        acceptedPromo: { type: AcceptedPromoSchema, required: false },\n        shouldUseTestBilling: { type: Boolean, required: false },\n        additionalOauthScopes: { type: [String], required: false },\n        installUtmParams: {\n            utm_source: { type: String, required: false },\n            utm_medium: { type: String, required: false },\n            utm_campaign: { type: String, required: false },\n            utm_term: { type: String, required: false },\n            utm_content: { type: String, required: false },\n        },",
                "filename": "web/server/src/modules/users/users.model.ts",
                "start_index": 4649,
                "end_index": 7519,
                "start_line": 142,
                "end_line": 199,
                "max_line": 211,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "const isOrderFromAfterSell = (((window.Shopify || {}).checkout || {}).line_items || []).some(\n                (lineItem) =>\n                    lineItem.properties &&\n                    lineItem.properties[PRODUCT_RECOMMENDATION_DRAFT_ORDER_LINE_ITEM_KEY] ===\n                        PRODUCT_RECOMMENDATION_DRAFT_ORDER_LINE_ITEM_VALUE\n            );\n\n            store.set('isOrderFromAfterSell', isOrderFromAfterSell);\n\n            //  If popupwidget && checkout initiated && thankyou page OR product recommendation widget && checkout initiated && thankyou page",
                "filename": "web/widgets/src/apps/widgets/index.ts",
                "start_index": 9050,
                "end_index": 9613,
                "start_line": 189,
                "end_line": 198,
                "max_line": 354,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export const maybeDisableAftersellBranding = async ({\n    shop,\n    shopifyService: _shopifyService,\n}: AfterSellBrandingProps): Promise<void> => {\n    // Disables Aftersell branding on the Post-Purchase page if the merchant is no longer eligible for it.\n\n    // this is called within billing logic, and a try catch is used to ensure it never interferes with billing\n    try {\n        const postPurchaseAftersellBrandingEnabled = await getGlobalFeatureFlagEnabled('postPurchaseBrandingIsEnabled');\n        if (!postPurchaseAftersellBrandingEnabled) return;\n\n        const shopifyService = await getShopifyService({ shop, shopifyService: _shopifyService });\n\n        // CASE 1: Only automatically enable if the user is no longer eligible for it\n        const eligible = await isEligibleForAftersellBranding({ shop, shopifyService });\n        if (!eligible) {\n            // disable aftersell branding\n            await UserModel.findOneAndUpdate({ myshopify_domain: shop }, { postPurchaseAftersellBranding: false });\n        }\n    } catch (err) {\n        console.error(`[${shop}] Error disabling Aftersell branding: ${err}`);\n    }\n};",
                "filename": "web/server/src/modules/post-purchase/post-purchase.service.ts",
                "start_index": 2982,
                "end_index": 4115,
                "start_line": 68,
                "end_line": 90,
                "max_line": 90,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "SettingsRoktWithData =",
                "filename": "web/client/src/pages/settings/settings-rokt.page.tsx",
                "start_index": 3011,
                "end_index": 3033,
                "start_line": 85,
                "end_line": 85,
                "max_line": 795,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "const RoktFunnelSettingsCard = ({ funnelId }: { funnelId: string }) => {\n    const navigate = useEmbeddedNavigate();\n    const { data: funnelData } = useFunnel({ id: funnelId });\n    const funnelUpdateMutation = useFunnelUpdate();\n    const roktIntegrationIsEnabled = useFeatureFlagIsEnabled('roktIntegrationIsEnabled');\n    const form = useForm({\n        fields: {\n            enabled: useField(funnelData?.item?.roktIntegrationSettings?.enabled ?? true),\n        },\n        onSubmit: async (values) => {\n            if (funnelData?.item) {\n                await funnelUpdateMutation.mutateAsync({\n                    funnel: {\n                        ...funnelData.item,\n                        roktIntegrationSettings: {\n                            enabled: values.enabled,\n                        },\n                    },\n                });\n            }\n            return { status: 'success' as const };\n        },\n        makeCleanAfterSubmit: true,\n    });\n\n    if (!roktIntegrationIsEnabled || !funnelData) {\n        return null;\n    }\n\n    return (\n        <CardForm form={form}>\n            <VerticalStack gap=\"2\">\n                <HorizontalStack align=\"space-between\" blockAlign=\"center\">\n                    <HorizontalStack gap=\"2\">\n                        {form.fields.enabled.value ? (\n                            <Icon source={CircleTickMajor as IconSource} color=\"success\" />\n                        ) : (\n                            <Icon source={AlertMinor as IconSource} color=\"critical\" />\n                        )}\n\n                        <Text variant=\"headingMd\" as=\"h6\">\n                            {form.fields.enabled.value ? 'Rokt Network is enabled' : 'Rokt Network is disabled'}\n                        </Text>\n                    </HorizontalStack>\n                    {form.fields.enabled.value ? (\n                        <Button size=\"slim\" outline destructive onClick={() => form.fields.enabled.onChange(false)}>\n                            Disable\n                        </Button>\n                    ) :",
                "filename": "web/client/src/pages/funnels/funnels-steps.page.tsx",
                "start_index": 32170,
                "end_index": 34217,
                "start_line": 811,
                "end_line": 1286,
                "max_line": 2225,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { getModelForClass, modelOptions, prop } from '@typegoose/typegoose';\nimport { REGEX_MYSHOPIFY } from '../../utils/regexes';\n\n/**\n * Responsible for the relevant fields pertaining to how the rest of the AfterSell ecosystem interacts with Rokt.\n */\n@modelOptions({ schemaOptions: { _id: false } })\nexport class AfterSellSettings {\n    @prop({ required: false, default: true })\n    overrideStorewidePopup!: boolean;\n}\n\n/**\n * This links a shop using AfterSell with a Rokt account. All other data is stored\n * on Rokt servers and can be retrieved using the `appInstallationId`.\n */\nclass RoktAccount {\n    @prop({ required: true, unique: true, match: REGEX_MYSHOPIFY })\n    shop!: string;\n\n    @prop({ required: true })\n    appInstallationId!: string;\n\n    @prop({ required: false })\n    accountId!: string;\n\n    @prop({ required: true })\n    createdAt!: string;\n\n    @prop({ required: false, default: null })\n    updatedAt!: string;\n\n    @prop({ required: false, default: null })\n    deletedAt!: string;\n\n    @prop({ required: true, default: {} })\n    afterSellSettings!: AfterSellSettings;\n}\n\nexport const RoktAccountModel = getModelForClass(RoktAccount);",
                "filename": "web/server/src/modules/rokt/rokt-accounts.model.ts",
                "start_index": 0,
                "end_index": 1161,
                "start_line": 1,
                "end_line": 40,
                "max_line": 40,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "switch (order.aftersell_rokt_ads.status) {\n        // case 'shown':\n        //     return (\n        //         <Banner title=\"\" status=\"warning\">\n        //             <Text as=\"p\">\n        //                 None of the{' '}\n        //                 <Text as=\"span\" fontWeight=\"semibold\">\n        //                     active\n        //                 </Text>{' '}\n        //                 funnels had triggers that matched this order. We recommend having one active \"show for all\"\n        //                 funnel at lowest priority to cover cases like this order.\n        //             </Text>\n        //         </Banner>\n        //     );\n        case 'accepted':\n            return (\n                <Banner title=\"The placement was accepted!\" status=\"success\">\n                    <Text as=\"p\">The customer interacted favourably with the offer placement displayed to them.</Text>\n                </Banner>\n            );\n        case 'skipped':\n            return (\n                <Banner title=\"Rokt placement was not displayed\" status=\"warning\">\n                    <Text as=\"p\">A Rokt ad was not shown. Possible reasons for this include:</Text>\n                    <List>\n                        <List.Item>Rokt ads are not enabled in the Rokt Network</List.Item>\n                        <List.Item>\n                            A thank you page popup widget was shown instead of the Rokt Ad due to this setting\n                        </List.Item>\n                        <List.Item>The funnel shown for this order has rokt ads disabled</List.Item>\n                        <List.Item>\n                            The Rokt allocation percentage is less than 100% and was chosen not to show\n                        </List.Item>\n                    </List>\n                </Banner>\n            );\n        default:\n            return null;\n    }\n};\n\nconst MaybeEventBanner = ({ event, order }: { event: AfterSellVisibilityEvent; order: Order }) => {\n    if (event.type === 'rokt.placement.event' && event.payload?.subtype === 'POSITIVE_ENGAGEMENT') {\n        return (\n            <Banner status=\"success\">\n                The customer interacted favourably with the offer placement displayed to them!\n            </Banner>\n        );\n    }\n    if (event.type === 'server.rokt.renderIntent' && !event.payload?.roktEnabledOnFunnel) {\n        return (\n            <Banner status=\"critical\">\n                Rokt was manually disabled from showing on the funnel that this purchase triggered.\n            </Banner>\n        );\n    }\n    if (event.type === 'rokt.placement.none') {\n        return (\n            <Banner status=\"info\">\n                Rokt focuses on showing highly relevant offers to customers. Sometimes, it is best to show the customer\n                nothing at all in order to keep their trust. Due to this, offers may not be shown even when enabled.\n            </Banner>\n        );\n    }\n    return null;\n};",
                "filename": "web/client/src/pages/order-browser/components/timeline-rokt-ads/timeline-rokt-ads.tsx",
                "start_index": 1937,
                "end_index": 4876,
                "start_line": 47,
                "end_line": 143,
                "max_line": 143,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "const didFetchCheckout = Boolean(checkout);\n    const featureFlagFirstNameBlankPreventionIsEnabled = Boolean(user.featureFlags?.firstNameBlankPreventionIsEnabled);\n    XLog.log(\n        didFetchCheckout ? XLogSeverity.INFO_200 : XLogSeverity.WARNING_400,\n        {\n            shop,\n            referenceId,\n            didFetchCheckout,\n            isRefetchingQuery,\n            featureFlagFirstNameBlankPreventionIsEnabled,\n        },\n        {\n            logLocation: 'PostPurchase::GetOffer::FetchCheckout',\n        }\n    );\n    if (!didFetchCheckout) {\n        // TODO: when we go to release this widely we cannot skip all offers where we can't get checkout data.\n        // There are cases where we might fail to fetch checkout due to a missing scope or for other reasons (e.g.,\n        // custom checkout). We need to figure out a solution for stores where we will NEVER get a checkout. We\n        // don't want to accidentally stop showing all offers for these stores.\n        if (featureFlagFirstNameBlankPreventionIsEnabled) {\n            if (isRefetchingQuery) {\n                return res.json({ upsells: null, reason: 'Unable to get checkout data.' });\n            } else {\n                return res.json({ upsells: null, reason: 'Unable to get checkout data.', shouldBeRefetched: true });\n            }\n        }\n    }\n\n    const appliedDiscountCodes =\n        checkout?.applied_discounts?.filter((discount) => discount.applicable).map((discount) => discount.title) ?? [];\n    const appliedDiscountPercentageOutOf100 = checkout\n        ? FunnelsService.calculateCheckoutDiscountPercentageOutOf100({ checkout })\n        : 0;\n    const initialPurchaseLineItemsFromCheckout =\n        checkout?.line_items\n            .filter((item) => Boolean(item.variant_id))\n            .map((item) => ({\n                key: item.key,\n                variantId: item.variant_id,\n                // We classify has having a discount if the item is involved in a discount in any way. This could\n                // include being the \"Buy X\" part of a \"Buy X Get Y\" discount, in which case the item has a discount\n                // value of $0.\n                hasDiscount: item.discount_allocations.length > 0,\n                priceShopCurrency: Number(item.line_price), // this is the unit price multiplied by quantity\n                taxAmountShopCurrency: item.tax_lines.reduce((acc, taxLine) => acc + Number(taxLine.price), 0),\n            })) ?? [];\n\n    if (!destinationCountryCode) {\n        // Only use country code from checkout if country is not present in initial purchase data.\n        // Sometimes during dev this happened. I think it's related to the handling of customers on dev.\n        destinationCountryCode = checkout?.shipping_address.country_code ?? null;\n    }\n\n    const storefrontSessionService = new StorefrontSessionService();",
                "filename": "web/server/src/modules/post-purchase-public/post-purchase-public.controller.ts",
                "start_index": 27819,
                "end_index": 30670,
                "start_line": 638,
                "end_line": 692,
                "max_line": 1418,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "async function AftersellNetwork({ onRoktLoadsNothing })",
                "filename": "web/widgets/src/apps/widgets/aftersell-network/index.ts",
                "start_index": 178,
                "end_index": 233,
                "start_line": 4,
                "end_line": 4,
                "max_line": 237,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "reranked_doc_snippets_initial": [
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# AfterSell\n\n### All Docs on Notion \ud83d\udc49 [AfterSell Notion Docs](https://www.notion.so/aftersell/AfterSell-Docs-9d43566167b5426d86b5983925872953?pvs=4)",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 148,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script defer src=\"./thankyoupage_bundle.js?v2\"></script>\n        <script defer src=\"/apps/aftersell_sdk.bundle.min.js?v2\"></script>\n    </head>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241237,
                "end_index": 241381,
                "start_line": 6073,
                "end_line": 6075,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<body class=\"aftersell-preview\">\n        <a href=\"#main-header\" class=\"skip-to-content\"> Skip to content </a>\n\n        <header class=\"banner\" data-header=\"\" role=\"banner\">\n            <div class=\"wrap\">\n                <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n            </div>\n        </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241387,
                "end_index": 241804,
                "start_line": 6077,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/server` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 999,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"hidden\">\n                            <span class=\"visually-hidden\" id=\"forwarding-external-new-window-message\">\n                                Opens external website in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-new-window-message\">\n                                Opens in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-external-message\">\n                                Opens external website.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"checkout-context-step-one\">\n                                Customer information - Checkout\n                            </span>\n                        </div>\n                    </main>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 322226,
                "end_index": 323078,
                "start_line": 6265,
                "end_line": 6282,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script>\n            !(function (f, b, e, v, n, t, s) {\n                if (f.fbq) return;\n                n = f.fbq = function () {\n                    n.callMethod ? n.callMethod.apply(n, arguments) : n.queue.push(arguments);\n                };\n                if (!f._fbq) f._fbq = n;\n                n.push = n;\n                n.loaded = !0;\n                n.version = '2.0';\n                n.queue = [];\n                t = b.createElement(e);\n                t.async = !0;\n                t.src = v;\n                s = b.getElementsByTagName(e)[0];\n                s.parentNode.insertBefore(t, s);\n            })(window, document, 'script', 'https://connect.facebook.net/en_US/fbevents.js');\n            fbq('init', '895262111044943');\n            fbq('track', 'PageView');\n        </script>\n        <!-- End Facebook Pixel Code -->\n        <!-- Reddit Pixel -->\n        <script>\n            !(function (w, d) {\n                if (!w.rdt) {\n                    var p = (w.rdt = function () {\n                        p.sendEvent ? p.sendEvent.apply(p, arguments) : p.callQueue.push(arguments);\n                    });\n                    p.callQueue = [];\n                    var t = d.createElement('script');\n                    (t.src = 'https://www.redditstatic.com/ads/pixel.js'), (t.async = !0);\n                    var s = d.getElementsByTagName('script')[0];\n                    s.parentNode.insertBefore(t, s);\n                }\n            })(window, document);\n            rdt('init', 't2_dp3wj8bg');\n            rdt('track', 'PageVisit');\n        </script>\n        <!-- End Reddit Pixel -->\n\n        <!-- Dev HMR [START] -->\n        <script type=\"module\">\n            if (!import.meta.env || !import.meta.env.PROD) {\n                // For embedded development, the iframe loads an HTML file from the server. Normally for\n                // development, the HTML file is served by the dev server, which injects the HMR script.\n                // This script adds the HMR script to the iframe to allow HMR in embedded development.\n                const script = document.createElement('script');\n                script.setAttribute('type', 'module');\n                script.setAttribute('src', './src/dev-hmr.ts');\n                document.getElementsByTagName('head')[0].append(script);\n            }\n        </script>\n        <!-- Dev HMR [END] -->\n\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com/\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" crossorigin=\"anonymous\" />\n        <link\n            href=\"https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap\"\n        />\n    </head>",
                "filename": "web/client/index.html",
                "start_index": 6232,
                "end_index": 8924,
                "start_line": 7,
                "end_line": 178,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<html\n    lang=\"en\"\n    dir=\"ltr\"\n    class=\"js desktop page--no-banner page--logo-main page--show page--show card-fields cors svg opacity placeholder no-touchevents displaytable display-table generatedcontent cssanimations flexbox no-flexboxtweener anyflexbox shopemoji floating-labels\"\n>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 0,
                "end_index": 289,
                "start_line": 1,
                "end_line": 6518,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <!-- Shopify App Bridge [START] -->\n        <meta name=\"shopify-api-key\" content=\"%SHOPIFY_API_KEY%\" />",
                "filename": "web/client/index.html",
                "start_index": 38,
                "end_index": 156,
                "start_line": 4,
                "end_line": 6,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<aside class=\"sidebar\" role=\"complementary\">\n                    <div class=\"sidebar__header\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323196,
                "end_index": 323511,
                "start_line": 6285,
                "end_line": 6493,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<button\n                class=\"order-summary-toggle order-summary-toggle--show shown-if-js\"\n                data-trekkie-id=\"order_summary_toggle\"\n                aria-expanded=\"false\"\n                aria-controls=\"order-summary\"\n                data-drawer-toggle=\"[data-order-summary]\"\n            >",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241855,
                "end_index": 242157,
                "start_line": 6089,
                "end_line": 6488,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Shopify Function development with Rust\n\n## Dependencies\n\n-   [Install Rust](https://www.rust-lang.org/tools/install)\n    -   On Windows, Rust requires the [Microsoft C++ Build Tools](https://docs.microsoft.com/en-us/windows/dev-environment/rust/setup). Be sure to select the _Desktop development with C++_ workload when installing them.\n-   Install [`cargo-wasi`](https://bytecodealliance.github.io/cargo-wasi/)\n    -   `cargo install cargo-wasi`\n-   On Macs with Apple Silicon, you'll also need to install the Binaryen toolchain and set the `WASM_OPT` environment variable. ([related issue](https://github.com/bytecodealliance/cargo-wasi/issues/112))\n    -   `brew install binaryen`\n    -   Add `export WASM_OPT=/opt/homebrew/bin/wasm-opt` to your `.bashrc` or `.zshrc`\n\n## Building the function\n\nYou can build this individual function using `cargo wasi`.\n\n```shell\ncargo wasi build --release\n```\n\nThe Shopify CLI `build` command will also execute this, based on the configuration in `shopify.function.extension.toml`.\n\n## Testing\n\n> Requires Node v16+\n\n1. Create a temporary JSON file (e.g., `a.json`) in the following format:\n\n```json\n{\n    \"data\": {\n        \"foo\": \"bar\"\n    },\n    \"secretKey\": \"abc123\"\n}\n```\n\n2. Run the following command\n\n```\nyarn test:new-hmac < a.json\n```\n\n3. Copy the generated HMAC into the test file",
                "filename": "extensions/upsell-offer-discount-function/README.md",
                "start_index": 0,
                "end_index": 1329,
                "start_line": 1,
                "end_line": 44,
                "max_line": 44,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <meta charset=\"utf-8\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n        <meta\n            id=\"thankyoupage_viewport_meta\"\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, user-scalable=0\"\n        />\n        <meta name=\"referrer\" content=\"origin\" />\n\n        <title>Thank you! - Checkout</title>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 294,
                "end_index": 717,
                "start_line": 6,
                "end_line": 16,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"main\">\n                    <header class=\"main__header\" role=\"banner\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245397,
                "end_index": 245703,
                "start_line": 6153,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<tr\n                                                    class=\"product\"\n                                                    data-product-id=\"4330495803489\"\n                                                    data-variant-id=\"31055496183905\"\n                                                    data-product-type=\"Bracelet\"\n                                                    data-customer-ready-visible=\"\"\n                                                >",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 325343,
                "end_index": 325797,
                "start_line": 6303,
                "end_line": 6444,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# [[[ --- CLIENT --- ]]]\nFROM node:18.16.1-alpine AS client\nARG SHOPIFY_API_KEY\nENV SHOPIFY_API_KEY=$SHOPIFY_API_KEY\nARG HOST\nENV HOST=$HOST\nARG NODE_ENV\nENV NODE_ENV=$NODE_ENV\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/client/package.json ./web/client/package.json\nCOPY web/client/yarn.lock ./web/client/yarn.lock\nRUN cd web/client && yarn install --frozen-lockfile --production=false\nCOPY extensions-web-common/package.json ./extensions-web-common/package.json\nCOPY extensions-web-common/yarn.lock ./extensions-web-common/yarn.lock\nRUN cd extensions-web-common && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY extensions/post-purchase ./extensions/post-purchase\nCOPY extensions-web-common/post-purchase ./extensions-web-common/post-purchase\nCOPY extensions-web-common/checkout ./extensions-web-common/checkout\nCOPY extensions-web-common/shared ./extensions-web-common/shared\nCOPY extensions-web-common/ty-page ./extensions-web-common/ty-page\nCOPY web/client ./web/client\nRUN cd web/client && yarn build\n\n# [[[ --- TY PAGE --- ]]]\nFROM node:18.16.1-alpine AS ty-page\nARG HOST\nENV HOST=$HOST\nWORKDIR /usr/src/app\nCOPY web/widgets/package.json ./web/widgets/package.json\nCOPY web/widgets/yarn.lock ./web/widgets/yarn.lock\nRUN cd web/widgets && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY web/widgets ./web/widgets\nRUN cd web/widgets && yarn build\n\n# [[[ --- SERVER --- ]]]\nFROM node:18.16.1-alpine AS server\nWORKDIR /usr/src/app\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=false\nCOPY web/server ./web/server\nCOPY web/common ./web/common\nRUN cd web/server && yarn build\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM node:18.16.1-alpine AS final\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=true\nCOPY --from=server /usr/src/app/web/server/build ./web/server/build\nCOPY --from=ty-page /usr/src/app/web/widgets/dist ./web/server/build/server/dist\nCOPY --from=client /usr/src/app/web/client/dist ./web/server/build/server/dist/client\nCOPY package.json ./package.json\nCMD [\"yarn\", \"start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2514,
                "start_line": 1,
                "end_line": 61,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box__row text-container\">\n                                                <h2 class=\"heading-2 os-step__title\" id=\"main-header\" tabindex=\"-1\">\n                                                    Your order is confirmed\n                                                </h2>\n                                                <p class=\"os-step__description\">\n                                                    You\u2019ll receive an email when your order is ready.\n                                                </p>\n                                            </div>\n                                        </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 317828,
                "end_index": 318454,
                "start_line": 6200,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "solution_task": {
            "structured_resp": "Understand:\n- The feature request is to enable Rokt ads in Intercom based on feature flags and user interactions.\n- The goal is to avoid displaying Rokt ads to users who have already interacted with them, even if they later disable the feature flag.\n- The implementation should consider the existing backend logic, user models, and Rokt integration settings.\n\nPlan:\n- Add logic to check if a user has previously interacted with Rokt ads.\n- Implement a feature flag check to determine if Rokt ads should be enabled for a user.\n- Integrate the new logic with the Intercom display logic to conditionally show Rokt ads.\n- Ensure that once a user has interacted with Rokt ads, they are not shown again, regardless of the feature flag status.\n\nIdentify Tools:\n- TypeScript for implementing the new backend logic.\n- Typegoose for interacting with MongoDB models.\n- Intercom API for managing the display of Rokt ads within Intercom.\n\nImplement:\n- Update the `users.model.ts` to track user interactions with Rokt ads.\n  ```typescript\n  // Add a new property to the user model to track Rokt ad interactions\n  roktAdInteractions: { type: [Date], default: [] },\n  ```\n\n- Modify the `rokt.service.ts` to include a check for previous Rokt ad interactions.\n  ```typescript\n  export const hasInteractedWithRokt = async (userId: string): Promise<boolean> => {\n    const user = await UsersModel.findById(userId).lean();\n    return user?.roktAdInteractions.length > 0;\n  };\n  ```\n\n- Update the logic in `rokt.api.ts` or `rokt.service.ts` to incorporate the feature flag and interaction checks before displaying Rokt ads in Intercom.\n  ```typescript\n  export const shouldDisplayRoktAd = async (userId: string): Promise<boolean> => {\n    const userHasInteracted = await hasInteractedWithRokt(userId);\n    const roktEnabled = await roktEnabledOnShop({ shop: user.shop });\n    // Do not display Rokt ad if the user has interacted before or if the feature flag is disabled\n    return !userHasInteracted && roktEnabled;\n  };\n  ```\n\n- Integrate the new logic with the Intercom display logic.\n  ```typescript\n  // Pseudocode for integrating with Intercom display logic\n  const userId = getCurrentUserId();\n  const displayRoktAd = await shouldDisplayRoktAd(userId);\n  if (displayRoktAd) {\n    // Logic to display Rokt ad in Intercom\n  }\n  ```\n\n- Ensure that the Rokt ad interaction is recorded when a user interacts with the ad.\n  ```typescript\n  // Example function to call when a user interacts with a Rokt ad\n  export const recordRoktAdInteraction = async (userId: string): Promise<void> => {\n    await UsersModel.findByIdAndUpdate(userId, {\n      $push: { roktAdInteractions: new Date() },\n    });\n  };\n  ```\n\n- Update relevant documentation in the `docs` directory to reflect the new feature and its usage.",
            "response": "To enhance the user experience and manage the display of Rokt ads within Intercom, we are implementing a system that respects user interactions and feature flag settings. The goal is to ensure that users who have already interacted with Rokt ads are not repeatedly shown the same ads, even if the feature flag is later disabled. This approach takes into account the existing backend structure, user models, and the integration settings with Rokt.\n\n- Implement a check using TypeScript to determine if the feature flag for Rokt ads is enabled for a specific user.\n- Use Typegoose to interact with the MongoDB user models to track whether a user has previously interacted with Rokt ads.\n- Integrate this logic with the Intercom API to conditionally display Rokt ads, ensuring that ads are not shown to users who have already interacted with them, irrespective of the feature flag's current state."
        },
        "snippet_processor_task": {
            "web/server/src/modules/rokt/rokt.service.ts": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "Functions for checking Rokt enablement and retrieving Rokt widgets based on feature flags and user interactions.",
                        "snippet": {
                            "code": "import { RoktAccountModel } from '../rokt/rokt-accounts.model';\nimport { MyShopifyDomain } from '../../utils/types';\nimport UsersModel from '../users/users.model';\nimport { RoktPlaceholderWidgetType } from '../ty-script-widgets-public/ty-script-widgets-public.dtos';\nimport { FunnelsModel } from '../funnels/funnels.model';\nimport { ServerEventKeys, trackServerEvent } from '../../utils/trackServerEvent';\n\nexport const getRoktPlaceholderWidget = async ({\n    shop,\n    funnelId,\n    checkoutToken,\n}: {\n    shop: MyShopifyDomain;\n    funnelId: string;\n    checkoutToken: string;\n}): Promise<null | RoktPlaceholderWidgetType> => {\n    const isRoktEnabled = await roktEnabledOnShop({ shop });\n    if (!isRoktEnabled) return null;\n\n    const [roktAccount, funnel] = await Promise.all([\n        RoktAccountModel.findOne({ shop }),\n        FunnelsModel.findOne({ _id: funnelId, shop }),\n    ]);\n\n    if (!roktAccount || !funnel) {\n        return null;\n    }\n\n    const isActive = funnel.roktIntegrationSettings?.enabled ?? true;\n\n    trackServerEvent({\n        type: ServerEventKeys.ROKT_RENDER_INTENT,\n        myshopifyDomain: shop,\n        checkoutId: checkoutToken,\n        payload: {\n            roktEnabledOnFunnel: isActive,\n        },\n    });\n\n    return {\n        source: 'rokt',\n        active: isActive,\n        appId: 'roktPlacement',\n        config: {\n            overrideStorewidePopup: roktAccount.afterSellSettings?.overrideStorewidePopup ?? true,\n        },\n    } as RoktPlaceholderWidgetType;\n};\n\nexport const roktEnabledOnShop = async ({ shop }: { shop: MyShopifyDomain }) => {\n    const user = await UsersModel.findOne({ myshopify_domain: shop }).lean();\n\n    if (!user || user.featureFlags?.roktIntegrationIsEnabled !== true) {\n        return false;\n    }\n\n    return true;\n};\n\nexport const getRoktDefaultWidget = async ({ shop }: { shop: MyShopifyDomain }) => {\n    const isActive = await roktEnabledOnShop({ shop });\n    if (!isActive) {\n        return null;\n    }\n    return {\n        source: 'rokt',\n        active: isActive,\n        appId: 'roktPlacement',\n        config: {\n            overrideStorewidePopup: true,\n        },\n    } as RoktPlaceholderWidgetType;\n};",
                            "filename": "web/server/src/modules/rokt/rokt.service.ts",
                            "start_index": 0,
                            "end_index": 2187,
                            "start_line": 1,
                            "end_line": 73,
                            "max_line": 73,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet contains functions for checking Rokt enablement and retrieving Rokt widgets based on feature flags and user interactions, which is directly related to the issue of handling the logic condition for Rokt ads enablement."
                }
            ],
            "web/server/src/modules/users/users.model.ts": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "The users.model.ts file contains a 'featureFlags' object with various flags including 'roktIntegrationIsEnabled'. This flag can be used to check if Rokt integration is enabled for a user before displaying Rokt ads in Intercom.",
                        "snippet": {
                            "code": "featureFlags: {\n            /**\n             * @deprecated\n             */\n            partiallyPaidRemovalIsAvailable: Boolean,\n            subscriptionIntegrationIsEnabled: { type: Boolean, default: true },\n            reviewStarsIsEnabled: { type: Boolean, default: true },\n            multiProductIsEnabled: { type: Boolean, default: true },\n            splitTestIsEnabled: { type: Boolean, default: true },\n            checkoutIsEnabled: { type: Boolean, default: false },\n            checkoutBetaWidgetsAreEnabled: { type: Boolean, default: false },\n            postPurchaseReplacementUpsellsAreEnabled: { type: Boolean, default: false },\n            annualBillingAgreementIsAvailable: { type: Boolean, default: false },\n            productReviewCustomizationIsEnabled: { type: Boolean, default: false },\n            improvedInventoryIsEnabled: { type: Boolean, default: false },\n            polaris12IsEnabled: { type: Boolean, default: false },\n            /**\n             * @deprecated Access is controlled by Shopify plan instead of manually here.\n             */\n            tyPageExtensibilityIsEnabled: { type: Boolean, default: false },\n            profitAnalyticsAreEnabled: { type: Boolean, default: false },\n            roktIntegrationIsEnabled: { type: Boolean, default: false },\n            tyPageOrderMerging: { type: Boolean, default: false },\n            improvedPartiallyPaidRemovalIsEnabled: { type: Boolean, default: false },\n            firstNameBlankPreventionIsEnabled: { type: Boolean, default: false },\n            mixAiWithNonAiFixIsEnabled: { type: Boolean, default: false },\n            checkoutV2IsEnabled: { type: Boolean, default: false },\n        },\n        adsNetworkIsActive: { type: Boolean },\n        adsNetworkEmail: { type: String },\n        billingEstimate: {\n            estimatedChargeUSD: { type: Number },\n            nOrdersLast30Days: { type: Number },\n        },\n        scriptsAndHooksTransactionLocked: { type: Boolean },\n        // This was added to support new billing system with Checkout launch.\n        acceptedAfterSellPlanId: { type: String, required: false },\n        postPurchaseFreeTrialStartDate: { type: Date, required: false },\n        checkoutFreeTrialStartDate: { type: Date, required: false },\n        checkoutFreeTrialEndDate: { type: Date, required: false },\n        acceptedPromo: { type: AcceptedPromoSchema, required: false },\n        shouldUseTestBilling: { type: Boolean, required: false },\n        additionalOauthScopes: { type: [String], required: false },\n        installUtmParams: {\n            utm_source: { type: String, required: false },\n            utm_medium: { type: String, required: false },\n            utm_campaign: { type: String, required: false },\n            utm_term: { type: String, required: false },\n            utm_content: { type: String, required: false },\n        },",
                            "filename": "web/server/src/modules/users/users.model.ts",
                            "start_index": 4649,
                            "end_index": 7519,
                            "start_line": 142,
                            "end_line": 199,
                            "max_line": 211,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "The 'featureFlags' object in users.model.ts, which includes 'roktIntegrationIsEnabled', is crucial for implementing the logic to prevent selling Rokt to users who have already enabled it."
                }
            ],
            "web/client/src/pages/funnels/funnels-steps.page.tsx": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Code snippet shows the implementation of Rokt integration settings based on a feature flag 'roktIntegrationIsEnabled'. It includes form handling for enabling/disabling Rokt Network and conditional rendering based on the feature flag and funnel data.",
                        "snippet": {
                            "code": "const RoktFunnelSettingsCard = ({ funnelId }: { funnelId: string }) => {\n    const navigate = useEmbeddedNavigate();\n    const { data: funnelData } = useFunnel({ id: funnelId });\n    const funnelUpdateMutation = useFunnelUpdate();\n    const roktIntegrationIsEnabled = useFeatureFlagIsEnabled('roktIntegrationIsEnabled');\n    const form = useForm({\n        fields: {\n            enabled: useField(funnelData?.item?.roktIntegrationSettings?.enabled ?? true),\n        },\n        onSubmit: async (values) => {\n            if (funnelData?.item) {\n                await funnelUpdateMutation.mutateAsync({\n                    funnel: {\n                        ...funnelData.item,\n                        roktIntegrationSettings: {\n                            enabled: values.enabled,\n                        },\n                    },\n                });\n            }\n            return { status: 'success' as const };\n        },\n        makeCleanAfterSubmit: true,\n    });\n\n    if (!roktIntegrationIsEnabled || !funnelData) {\n        return null;\n    }\n\n    return (\n        <CardForm form={form}>\n            <VerticalStack gap=\"2\">\n                <HorizontalStack align=\"space-between\" blockAlign=\"center\">\n                    <HorizontalStack gap=\"2\">\n                        {form.fields.enabled.value ? (\n                            <Icon source={CircleTickMajor as IconSource} color=\"success\" />\n                        ) : (\n                            <Icon source={AlertMinor as IconSource} color=\"critical\" />\n                        )}\n\n                        <Text variant=\"headingMd\" as=\"h6\">\n                            {form.fields.enabled.value ? 'Rokt Network is enabled' : 'Rokt Network is disabled'}\n                        </Text>\n                    </HorizontalStack>\n                    {form.fields.enabled.value ? (\n                        <Button size=\"slim\" outline destructive onClick={() => form.fields.enabled.onChange(false)}>\n                            Disable\n                        </Button>\n                    ) :",
                            "filename": "web/client/src/pages/funnels/funnels-steps.page.tsx",
                            "start_index": 32170,
                            "end_index": 34217,
                            "start_line": 811,
                            "end_line": 1286,
                            "max_line": 2225,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet shows the implementation of Rokt integration settings based on the 'roktIntegrationIsEnabled' feature flag, which is necessary for modifying the form handling and conditional rendering logic as per the issue."
                }
            ]
        },
        "bouncer_response": {
            "score": 4,
            "criteria": "RESPONSES that offer some actionable advice but are incomplete or partially relevant should score between 4 and 6.",
            "supporting_evidence": "The RESPONSE provides a general approach to implementing the feature request, including the use of TypeScript, Typegoose, and the Intercom API to manage the display of Rokt ads based on user interaction and feature flag settings. It also references specific code snippets that could be relevant to the implementation. However, the RESPONSE does not address the specific context of the feature request, which is to prevent selling Rokt to users who have already tried it and have the feature flag on, even if they disable Rokt later. The RESPONSE lacks a clear explanation of how the proposed solution would specifically address this scenario. Additionally, the RESPONSE includes links to code snippets that are not accessible (the links are to a 'testbed' repository, which seems to be a placeholder), which reduces the utility of the RESPONSE.",
            "clarification_questions": "NONE"
        },
        "end_time": 1714393411.232691,
        "result": "Doesn't seem like we have fully grasped all the specifics of this ticket \ud83d\ude10.                   But we've outlined some ideas that might help you get started:\n\nTo enhance the user experience and manage the display of Rokt ads within Intercom, we are implementing a system that respects user interactions and feature flag settings. The goal is to ensure that users who have already interacted with Rokt ads are not repeatedly shown the same ads, even if the feature flag is later disabled. This approach takes into account the existing backend structure, user models, and the integration settings with Rokt.\n\n- Implement a check using TypeScript to determine if the feature flag for Rokt ads is enabled for a specific user.\n- Use Typegoose to interact with the MongoDB user models to track whether a user has previously interacted with Rokt ads.\n- Integrate this logic with the Intercom API to conditionally display Rokt ads, ensuring that ads are not shown to users who have already interacted with them, irrespective of the feature flag's current state.\n\n### Code snippets to check\n\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [server](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src) \u2192 [modules](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules) \u2192 [rokt](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/rokt)- [Lines 1 - 73](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/rokt/rokt.service.ts#L1-L73)\n\n This snippet contains functions for checking Rokt enablement and retrieving Rokt widgets based on feature flags and user interactions, which is directly related to the issue of handling the logic condition for Rokt ads enablement.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [server](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src) \u2192 [modules](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules) \u2192 [users](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/users)- [Lines 142 - 199](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/users/users.model.ts#L142-L199)\n\n The 'featureFlags' object in users.model.ts, which includes 'roktIntegrationIsEnabled', is crucial for implementing the logic to prevent selling Rokt to users who have already enabled it.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [client](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src) \u2192 [pages](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages) \u2192 [funnels](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/funnels)- [Lines 811 - 1286](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/funnels/funnels-steps.page.tsx#L811-L1286)\n\n This snippet shows the implementation of Rokt integration settings based on the 'roktIntegrationIsEnabled' feature flag, which is necessary for modifying the form handling and conditional rendering logic as per the issue."
    }
}