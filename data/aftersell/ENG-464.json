{
    "id": "ENG-464",
    "repo_name": "testbed/aftersell",
    "title": "Reduce LCP to recover Built for Shopify status on AfterSell",
    "body": "\n[IMG_1]\n\n[IMG_2]\n\nThe LCP for AfterSell is sometimes above the 2.5s threshold required for Built for Shopify status. The average went above 2.5s briefly and caused a warning that we would lose Built for Shopify if we didn't improve the LCP. This warning has gone away now, but the LCP is so close to the threshold that it will continue to happen unless we make changes.\n\nWe made changes to UpCart [EMBEDDED_LINK_1] a couple months ago to resolve the same issue.\n---\nGlossary:\nimage_2: The image is a screenshot of an email from Shopify Partners. At the top of the email, the Shopify Partners logo is displayed on the left, and on the right, there is a button that says \"Log in to Partner Dashboard.\"\n\nThe main body of the email contains a message in black text on a white background. It reads: \"AfterSell Post Purchase Upsell is no longer meeting all Built for Shopify criteria, and is at risk of losing its Built for Shopify status.\"\n\nBelow this message, it continues: \"To keep enjoying the recognition and other benefits that come from being a Built for Shopify app, review your checklist in the Partner Dashboard and fix the criteria issues identified within the next 30 days. Your app is great\u2014and there\u2019s time to take action!\"\n\nThere are two call-to-action buttons in the email. The first one, with a prominent size and blue background, says \"Go to Built for Shopify checklist.\" The second button, smaller and with a transparent background, says \"Review program criteria.\"\n\nAt the bottom of the email, in smaller grey text, there is a note that says, \"Please don't reply to this email. We've sent it from an address that can't accept replies.\"\nimage_3: The image is a graph displaying the Largest Contentful Paint (LCP) performance over time for a web application. The graph has two axes: the vertical axis on the left measures LCP time in seconds, ranging from 0 to 4 seconds, and the vertical axis on the right measures the number of loads, ranging from 0 to 1250. The horizontal axis represents dates from March 31 to April 25.\n\nThere are two types of data visualized on the graph. The first is a series of vertical bars, each representing the number of loads per day, with their height corresponding to the scale on the right. The color of the bars is a light blue, and they vary in height, indicating fluctuations in daily loads.\n\nThe second data type is a line graph with data points connected by lines, representing the LCP time in seconds for each day, corresponding to the scale on the left. The line is solid and colored dark blue, with data points clearly marked. The LCP times fluctuate around the 2.5-second mark, sometimes dipping below and occasionally spiking above.\n\nA dashed horizontal line at the 2.5-second mark spans the graph, labeled as the \"LCP 'good' threshold.\" This line serves as a reference point, indicating the target LCP time that should not be exceeded.\n\nIn the upper left corner of the image, there is a box with the text \"75th percentile\" and \"2.5 s\" with a green checkmark next to it, indicating that the 75th percentile of LCP times is at the threshold and is considered \"GOOD.\"\n\nIn the upper right corner, there is a box with the heading \"Largest contentful paint\" and a brief explanation stating, \"Largest Contentful Paint tracks how quickly your app is able to display its main content to users. A good score is less than 2.5 seconds.\" There is also a \"Learn more\" link at the end of the explanation.\n\nLastly, there is a \"Filter data\" dropdown menu option above the graph on the right side, suggesting that the data can be filtered for different views or metrics.\nlinear_issue_2: https://linear.app/beam-commerce/issue/BEAM-3363/work-to-decrease-lcp-to-below-25s-to-keep-built-for-shopify-status\n\n",
    "classification": "bug",
    "state": "closed",
    "repo_link": "https://github.com/testbed/aftersell.git",
    "requested_commit": null,
    "issue_tracker_identifier": "",
    "ai_cost": {
        "issue_classifier": 0.0005845,
        "issue_summarizer": 0.01854,
        "search_embedding": 0.00011206,
        "documentation_agent": 0.00768,
        "repo_summary": 0.09861399999999998,
        "issue_star_solver": 0.2057015,
        "snippet_processor": 0.02065,
        "bouncer": 0.038790000000000005
    },
    "attachments": [],
    "inline_assets": [
        {
            "title": "",
            "url": "https://uploads.linear.app/a4f50fbf-738c-4ae7-b7ca-dc198278934f/c8948b09-7ce8-45d1-a070-68c70f98fbd9/ad9e0606-2c73-4b89-a328-305c77cf1beb",
            "content": "",
            "placeholder_tag": "image_2",
            "content_type": "ExternalAssetsType.IMAGE"
        },
        {
            "title": "",
            "url": "https://uploads.linear.app/a4f50fbf-738c-4ae7-b7ca-dc198278934f/8712e95b-a65c-4201-8638-9140febb6707/f514f918-bbfc-4e35-b97e-c74f79a8b509",
            "content": "",
            "placeholder_tag": "image_3",
            "content_type": "ExternalAssetsType.IMAGE"
        },
        {
            "title": "",
            "url": "https://linear.app/beam-commerce/issue/BEAM-3363/work-to-decrease-lcp-to-below-25s-to-keep-built-for-shopify-status",
            "content": "",
            "placeholder_tag": "linear_issue_2",
            "content_type": "ExternalAssetsType.LINEAR_ISSUE"
        }
    ],
    "linked_issue_ids": [],
    "comments": [],
    "issue_summary": "Error Messages:\n- \"AfterSell Post Purchase Upsell is no longer meeting all Built for Shopify criteria, and is at risk of losing its Built for Shopify status.\"\n\nFunction and Variable Names:\n- Largest Contentful Paint (LCP)\n\nTechnical Descriptions:\n- LCP sometimes above the 2.5s threshold required for Built for Shopify status.\n- Average LCP went above 2.5s briefly, causing a warning.\n- Changes were made to UpCart to resolve the same LCP issue.\n- The 75th percentile of LCP times is at the 2.5s threshold and is considered \"GOOD.\"\n- LCP 'good' threshold is 2.5 seconds.\n- The graph displays LCP performance over time, with fluctuations around the 2.5-second mark.\n\nOutput Format:\n- Issue: LCP performance risk for AfterSell Post Purchase Upsell app.\n- Requirement: Maintain LCP below 2.5s for Built for Shopify status.\n- Reference: Similar issue resolved in UpCart (see linked issue BEAM-3363).\n- Data: LCP fluctuates around 2.5s, with occasional spikes above.\n- Action: Review and implement changes to reduce LCP consistently below 2.5s.",
    "repo_summary": "The software project is a Shopify app called AfterSell. It consists of multiple directories such as `web`, `extensions`, `docs`, and `theme-app-extension-src`. The project uses TypeScript for backend development and React for frontend development. It includes components like `checkout-widgets.controller.ts`, `legacy-billing-v2.service.ts`, `post-purchase-public.controller.ts`, and `shopify.service.ts` for different functionalities related to billing, checkout, and post-purchase upsells.\n\nThe issue at hand involves reducing the Largest Contentful Paint (LCP) metric to maintain the \"Built for Shopify\" status. This metric is monitored over time, and improvements are needed to keep it below the 2.5-second threshold. Changes made to another project, UpCart, successfully resolved a similar issue in the past.\n\nThe project structure includes configuration files like `package.json`, build and deployment workflows in `.github/workflows/cicd.yml`, and environment setup scripts. The project utilizes various dependencies for development, testing, and deployment, with specific scripts defined in the `package.json` files for different modules.\n\nThe code snippets provided showcase functions for handling checkout logic, billing services, post-purchase upsells, and Shopify API interactions. These functions involve processing checkout data, applying discounts, and interacting with Shopify APIs to manage themes, assets, and recurring charges.\n\nOverall, the project is a complex Shopify app with multiple modules for different functionalities, and the issue pertains to optimizing performance metrics to maintain compliance with Shopify's requirements.",
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1714411582.734296,
        "classification": "bug",
        "initial_code_snippets": [
            {
                "code": "const settings = await SettingsService.getSettings({ shop });\n    const shopGraphqlPromise = shopify.graphql(taxesIncludedQuery);\n\n    // custom country restrictions for trueclassictees-com.myshopify.com, the\n    // allowedPostPurchaseCountries will be added to the database manually for now\n    // NOTE: mongoose will provide empty array by default if the document exists without\n    // the allowedPostPurchaseCountries field\n    if (\n        Array.isArray(settings.allowedPostPurchaseCountries) &&\n        settings.allowedPostPurchaseCountries.length > 0 &&\n        !settings.allowedPostPurchaseCountries.includes(destinationCountryCode)\n    ) {\n        return res.json({\n            upsells: null,\n            code: 'disallowed_shipping_country',\n            reason: 'Customer shipping address is not one of the allowed countries for post-purchase offers on this store.',\n        });\n    }\n\n    const productRecExcludedCollectionIds = settings.productRecExcludedCollectionIds ?? [];\n\n    // Replace placeholders with actual products. This needs to go before the product recommendation\n    // logic below so that we can recommend based off of most/least expensive and collection products.\n    await FunnelsService.replacePlaceholderProducts({\n        upsells,\n        lineItems,\n        shopifyService,\n        skipPlaceholderTypes: [OfferProductType.MOST_EXPENSIVE, OfferProductType.LEAST_EXPENSIVE],\n    });\n\n    /**\n     * TODO: This should account for collection placeholders.\n     * TODO: Refactor to avoid the need for the `didSkipIndividualProductInMultiProductOffer` variable.\n     */\n    FunnelsService.skipUpsellIfAnyProductInOffer({\n        upsells,\n        lineItems,\n        didSkipIndividualProductInMultiProductOffer,\n    });\n\n    await FunnelsService.replacePlaceholderProducts({\n        upsells,\n        lineItems,\n        shopifyService,\n        skippingReplacementCollectionIds: productRecExcludedCollectionIds,\n    });\n\n    // product recommendation\n    const orderItems = convertLineItemsToOrderProducts({ lineItems });\n    const productIdToRecommendFrom = getProductToRecommendFrom({ orderItems });\n    const productIdsInOriginalPurchase = orderItems.map((orderItem) => orderItem.productId);\n    const productRecProvider = getProductRecProvider({ productRecProvider: settings.productRecProvider });\n    const productRecommender = getProductRecommender({ productRecProvider });\n    const customAiRecExcludedProductIds = settings.customAiRecExcludedProductIds || [];\n    await replaceProductRecommendationPlaceholders({\n        upsells,\n        getRecommendedProducts: productRecommender,\n        productIdToRecommendFrom,\n        productIdsInOriginalPurchase,\n        shop,\n        customAiRecExcludedProductIds,\n        productRecExcludedCollectionIds,\n        shopifyService,\n        featureFlagMixAiWithNonAiFixIsEnabled: Boolean(user.featureFlags?.mixAiWithNonAiFixIsEnabled),\n    });",
                "filename": "web/server/src/modules/post-purchase-public/post-purchase-public.controller.ts",
                "start_index": 38127,
                "end_index": 41038,
                "start_line": 872,
                "end_line": 1415,
                "max_line": 1418,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{maxDiscount / 2}% off\n                            </Text>\n                            .\n                        </List.Item>\n                        <List.Item>\n                            Upsell #2: If the customer accepts the first offer, we will automatically recommend a\n                            multi-product offer of 4 products where they can accept 1 at{' '}\n                            <Text variant=\"headingSm\" as=\"span\">\n                                {maxDiscount}% off\n                            </Text>{' '}\n                            (this uses Shopify's product recommendation API).\n                        </List.Item>\n                        <List.Item>\n                            Downsell: If the customer declines the first offer, we will give them one more chance to\n                            accept the same product except this time at a higher discount of{' '}\n                            <Text variant=\"headingSm\" as=\"span\">\n                                {maxDiscount}% off\n                            </Text>\n                            .\n                        </List.Item>\n                    </List>\n                    <Text variant=\"bodyMd\" as=\"p\">\n                        After the 1-click offers, customers are redirected to the thank you page. This is an opportunity\n                        to further generate conversions:\n                    </Text>\n                    <List spacing=\"loose\">\n                        <List.Item>\n                            Storewide Popup Discount: Offer{' '}\n                            <Text variant=\"headingSm\" as=\"span\">\n                                {maxDiscount / 2}% off\n                            </Text>{' '}\n                            your entire store's catalog for only 20 minutes.\n                        </List.Item>\n                    </List>\n                    {hasTyPageExtensibilityAccess && (\n                        <Banner title=\"Thank you page extensibility\" status=\"warning\">\n                            <Text as=\"p\">\n                                Your store is eligible to use Shopify UI extensions on the thank you page. The Storewide\n                                Popup Discount is only supported using AfterSell's script tags and will not be shown to\n                                customers if you{' '}\n                                <Link\n                                    url={`https://${myshopify_domain}/admin/settings/checkout#upgradestatus`}\n                                    target=\"_blank\"\n                                >\n                                    have thank you page extensibility enabled\n                                </Link>\n                                .\n                            </Text>\n                        </Banner>\n                    )}\n                </VerticalStack>\n            </Modal.Section>\n            <Modal.Section>\n                <HorizontalStack align=\"end\" blockAlign=\"center\" gap=\"4\">",
                "filename": "web/client/src/pages/funnels/funnels-create.page.tsx",
                "start_index": 11579,
                "end_index": 14544,
                "start_line": 255,
                "end_line": 308,
                "max_line": 345,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "static async createAfterSellPlan({\n        sanitizedNewAfterSellPlan,\n    }: {\n        sanitizedNewAfterSellPlan: AfterSellPlan;\n    }): Promise<Result> {\n        const validationResult = BillingValidationService.validateAfterSellPlanLogic({\n            sanitizedAfterSellPlan: sanitizedNewAfterSellPlan,\n        });\n        if (!validationResult.isValid) {\n            return {\n                success: false,\n                reason: validationResult.reason,\n            };\n        }\n        const createPlanResult = await AppendOnlyAfterSellPlansService.createPlan(sanitizedNewAfterSellPlan);\n        return createPlanResult;\n    }\n\n    static async getPossibleFeaturesForUser({\n        shopifyService,\n    }: {\n        shopifyService: ShopifyService;\n    }): Promise<AfterSellPaidFeature[]> {\n        const possibleFeatures: AfterSellPaidFeature[] = [AfterSellPaidFeature.POST_PURCHASE];\n        const hasCheckoutExtensibilityStoreAccess = await shopifyService.getHasCheckoutExtensibilityAccess();\n        if (hasCheckoutExtensibilityStoreAccess) {\n            possibleFeatures.push(AfterSellPaidFeature.CHECKOUT);\n        }\n        return possibleFeatures;\n    }\n\n    private static convertRestRecurringChargeToShopifyCharge(\n        recurringChargeRest: ActiveRecurringChargeRest\n    ): ShopifyChargeToValidate {\n        return {\n            chargeName: recurringChargeRest.name,\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: Number(recurringChargeRest.price),\n            },\n            maxMonthlyUsageAmount: recurringChargeRest.capped_amount ? Number(recurringChargeRest.capped_amount) : 0, // default to 0 if capped_amount is undefined\n        };\n    }\n}",
                "filename": "web/server/src/modules/billing/legacy-billing-v2.service.ts",
                "start_index": 14194,
                "end_index": 15893,
                "start_line": 318,
                "end_line": 360,
                "max_line": 360,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n    if (isProductRec(upsells.upsell_default) || isProductRec(upsells.downsell)) {\n        const productRecommendationIds = await getProductRecommendations({\n            getRecommendedProducts,\n            productIdToRecommendFrom,\n            productIdsInOriginalPurchase,\n            shop,\n            customAiRecExcludedProductIds,\n            productRecExcludedCollectionIds,\n            shopifyService,\n            nToRecommend: 30,\n        });\n        if (isProductRec(upsells.upsell_default)) {\n            const upsellProducts = get(upsells.upsell_default, 'product', []);\n            const amountOfUpsellRecommendation = (\n                Array.isArray(upsellProducts) ? upsellProducts : [upsellProducts]\n            ).filter((product) => product.isProductRecommendation).length;\n            upsells.upsell_default = getNullSafeUpsell(\n                upsells.upsell_default,\n                productRecommendationIds.slice(0, amountOfUpsellRecommendation),\n                featureFlagMixAiWithNonAiFixIsEnabled\n            );\n            if (isProductRec(upsells.downsell)) {\n                upsells.downsell = getNullSafeUpsell(\n                    upsells.downsell,\n                    productRecommendationIds.slice(amountOfUpsellRecommendation),\n                    featureFlagMixAiWithNonAiFixIsEnabled\n                );\n            }\n        } else {\n            upsells.downsell = getNullSafeUpsell(\n                upsells.downsell,\n                productRecommendationIds,\n                featureFlagMixAiWithNonAiFixIsEnabled\n            );\n        }\n    }",
                "filename": "web/server/src/modules/product-recommendations/product-recommendations.ts",
                "start_index": 11121,
                "end_index": 12699,
                "start_line": 2,
                "end_line": 350,
                "max_line": 351,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n    const user = await User.findOne({ myshopify_domain: shopifyService.shop });\n    const shouldUseImprovedInventory =\n        user.featureFlags?.improvedInventoryIsEnabled && user.additionalOauthScopes?.includes('read_inventory');\n    if (!shouldUseImprovedInventory) {\n        return;\n    }\n\n    const locationsQuery = await shopifyService.graphql.GetLocations();\n    const allowedLocationIds = locationsQuery.locations.nodes\n        // Exclude brick & mortar (physical) locations.\n        // See Linear issue BEAM-1508\n        .filter((loc) => loc.fulfillsOnlineOrders)\n        // Exclude locations that are specifically excluded by the merchant in settings.\n        // See Linear issue BEAM-1509\n        .filter((loc) => !(settings.excludedLocationIds || []).includes(loc.legacyResourceId))\n        .map((loc) => loc.legacyResourceId);\n    // This could be optimized by skipping checking inventory levels for items that do not track inventory,\n    // are already out of stock, or allow selling when out of stock. These changes would reduce the number\n    // of API calls required, but they add some complexity to the logic below so they are not implemented for now.\n    const inventoryItemIds = mut_products\n        .map((product) => product.variants.map((variant) => variant.inventory_item_id))\n        .flat();\n    // NOTE: this may end up making a LOT of API calls for offers with many products and many variants. This may cause\n    //       us to hit rate limits.\n    // NOTE: this API has pagination, but we do not use it because pagination forces sequential requests (need to wait\n    //       to get next link) which can cause very high latency (multiple seconds). Instead we chunk data such that\n    //       we keep the total result set size under 250. We would need to chunk requests anyways to avoid the 50 inventory\n    //       item id limit, so this solution is actually easier to implement since we can ignore pagination.\n    const MAX_QUERY_FILTER_SIZE = 50;\n    const MAX_PAGE_SIZE = 250;\n    assert(\n        allowedLocationIds.length <= MAX_QUERY_FILTER_SIZE,\n        `[${shopifyService.shop}] Too many locations. Expected store to have not more than ${MAX_QUERY_FILTER_SIZE} locations.`\n    );\n    const chunkedInventoryItemIds =\n        allowedLocationIds.length === 0\n            ? [] // prevent divide by 0 error\n            : chunkArray(\n                  inventoryItemIds,\n                  // create largest chunks possible, without exceeding either the max page size or the max query filter size\n                  Math.min(Math.floor(MAX_PAGE_SIZE / allowedLocationIds.length), MAX_QUERY_FILTER_SIZE)\n              );\n    const inventoryLevelPromises = [];",
                "filename": "web/server/src/modules/post-purchase-public/post-purchase-public.controller.ts",
                "start_index": 47622,
                "end_index": 50310,
                "start_line": 3,
                "end_line": 1138,
                "max_line": 1418,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "const shouldUseImprovedInventory =\n        user.featureFlags?.improvedInventoryIsEnabled && user.additionalOauthScopes?.includes('read_inventory');\n    if (shouldUseImprovedInventory) {\n        const shopifyService = new ShopifyService({ shop, accessToken: user.accessToken });\n        const settings = await SettingsService.getSettings({ shop });\n        const addChanges = validatedChanges.filter(\n            (change) => change.type === 'add_variant' || change.type === 'add_subscription'\n        );\n        assert(\n            addChanges.length === 1,\n            `[${shop}] Changeset rejected because it does not contain exactly one add_variant or add_subscription change. Checkout token: \"${referenceId}\".`\n        );\n        const variantId = addChanges[0].variantId;\n        const { variant } = await XShopify.Rest.send(\n            XShopify.Rest.prepare(XShopify.Rest.endpoints['GET /admin/api/2023-04/variants/{variant_id}.json'], {\n                params: {\n                    creds: { shop: shopifyService.shop, accessToken: shopifyService.accessToken },\n                    path: { variant_id: variantId },\n                },\n                callerLocation: 'PostPurchase::SignChangeset::CheckInventory',\n            })\n        );\n        const singleVariantProductArr = [{ variants: [variant] }];\n        await mut_correctInventoryCounts({ shopifyService, settings, mut_products: singleVariantProductArr });\n        const variantIsInStock = getVariantIsInStock(singleVariantProductArr[0].variants[0]);\n        if (!variantIsInStock) {\n            throw new Error(\n                `[${shop}] Changeset rejected because variant is out of stock at allowed locations. Variant ID: \"${variant.id}\". Checkout token: \"${referenceId}\".`\n            );\n        }\n    }\n\n    res.json({ token, shouldReplaceUpsell });\n}",
                "filename": "web/server/src/modules/post-purchase-public/post-purchase-public.controller.ts",
                "start_index": 55328,
                "end_index": 57150,
                "start_line": 1097,
                "end_line": 1418,
                "max_line": 1418,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "async function incrementCheckoutRevisionNumber({ shop, accessToken }) {\n    const { revisionNumber } = await CheckoutRevisionNumberModel.findOneAndUpdate(\n        { shop },\n        { shop, $inc: { revisionNumber: 1 } },\n        { upsert: true, new: true }\n    );\n    const appDiscountsQuery = await fetch(`https://${shop}/admin/api/2023-04/graphql.json`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-Shopify-Access-Token': accessToken,\n        },\n        body: JSON.stringify({\n            query: `{\n                automaticDiscountNodes(first: 25, query: \"status:active AND type:app\") {\n                    nodes {\n                        automaticDiscount {\n                            __typename\n                            ... on DiscountAutomaticApp {\n                                discountId\n                            }\n                        }\n                    }\n                }\n            }`,\n        }),\n    }).then((res) => res.json());\n    const ownerIds = appDiscountsQuery.data?.automaticDiscountNodes.nodes\n        .filter((node) => node.automaticDiscount.__typename === 'DiscountAutomaticApp')\n        .map((node) => node.automaticDiscount.discountId);\n    await fetch(`https://${shop}/admin/api/2023-04/graphql.json`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-Shopify-Access-Token': accessToken,\n        },\n        body: JSON.stringify({\n            query: `mutation MetafieldsSet($metafields: [MetafieldsSetInput!]!){\n                metafieldsSet(metafields: $metafields) {\n                    metafields {\n                        id\n                    }\n                }\n            }`,\n            variables: {\n                metafields: ownerIds.map((ownerId) => ({\n                    ownerId,\n                    namespace: '$app:upsell-offer-discount-function',\n                    key: 'private-checkout-revision-number',\n                    value: String(revisionNumber),\n                    type: 'integer',\n                })),\n            },\n        }),\n    }).then((res) => res.json());\n}",
                "filename": "web/server/src/modules/checkout-widgets/checkout-widgets.controller.ts",
                "start_index": 1714,
                "end_index": 3876,
                "start_line": 52,
                "end_line": 185,
                "max_line": 185,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n        const locale = window.Shopify.checkout?.customer_locale;\n        const cartTokenToRestore = getCookie('cart');\n        // Set localization cookie (e.g. \"CA\" or \"KR\") to ensure the /products/{handle}.js endpoint\n        // returns the product data in the correct currency. This cookie is automatically set when the customer\n        // goes through checkout, however the customer might not have this cookie on their device if they\n        // clicked on the order confirmation link from a different device. This is also very useful for testing\n        // when you switch between order confirmation pages with different currencies.\n        // We also need to clear the cart cookie since Shopify will use the cart currency if it exists instead of\n        // the localization cookie. We will restore the cart cookie afterwards to ensure we don't accidentally clear\n        // the customer's session.\n        // To test this functionality:\n        // - place an order in USD\n        // - view the order confirmation page and see the USD prices on product recommendation widgets\n        // - open a new tab to the storefront\n        // - change storefront currency to AFN and add item to cart\n        // - go back to the order confirmation page and refresh\n        // - check that the value of the product prices are correct (in USD, not AFN)\n        // - go back to storefront, check that the cart is still in AFN and that the item is still in the cart\n        document.cookie = `localization=${locale?.split('-').pop()};path=/;`;\n        document.cookie = 'cart=;max-age=0;path=/;';\n\n        // TODO: figure out a general solution. Currently we are assuming that the order locale will always\n        // be a value subfolder name. This might not be true for other stores since you can manually change the\n        // subfolder URLs.\n        //\n        // If you have Markets setup to use the primary domain only (no subfolders), then we don't need the subfolder path.\n        // Adding the path would cause it to break.\n        let marketsSubfolder = '';\n        if (isMulticurrency && locale && window.Shopify?.shop === 'trueclassictees-com.myshopify.com') {\n            marketsSubfolder = `/${locale}`;\n        }\n\n        fetchNeededProducts = (products || [])\n            .map((product) => product.handle)\n            .filter(Boolean)\n            .map(\n                (handle) =>\n                    new Promise((resolve) =>\n                        fetch(`${origin}${marketsSubfolder}/products/${handle}.js`)\n                            .then((res) => res.json())\n                            .catch(() => {})\n                            .then((res) => resolve(res))\n                            .catch(() => {})\n                    )\n            );\n        // We use Promise.allSettled so that we can ignore failed requests to products\n        // that no longer exist or that have a different handle now. If we used Promise.all",
                "filename": "web/widgets/src/apps/widgets/productRecommendation/templates/default/index.ts",
                "start_index": 2150,
                "end_index": 5082,
                "start_line": 5,
                "end_line": 107,
                "max_line": 444,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "ttps://apps.shopify.com/upcart-cart-builder?source=aftersell-app-upcart-landing-page\"\n                            >\n                                Learn more\n                            </Button>\n                        </VerticalStack>\n                    </CustomMediaCard>\n                </Layout.Section>\n                <Layout.Section oneThird>\n                    <FeatureDescriptionCard\n                        title=\"Rewards motivator bar\"\n                        imgSrc={RewardsModuleImage}\n                        benefits={[\n                            'Incentivize higher cart value',\n                            'Offer free shipping & discounts',\n                            'Add multiple rewards tiers',\n                            'Custom congratulations message',\n                        ]}\n                    />\n                </Layout.Section>\n                <Layout.Section oneThird>\n                    <FeatureDescriptionCard\n                        title=\"Upsells & cross-sells\"\n                        imgSrc={UpsellsModuleImage}\n                        benefits={[\n                            'Increase Average Order Value (AOV)',\n                            'Show multiple offers',\n                            'Custom trigger logic',\n                            'AI recommended offers',\n                        ]}\n                    />\n                </Layout.Section>\n                <Layout.Section oneThird>\n                    <FeatureDescriptionCard\n                        title=\"Add-ons: shipping protection and more\"\n                        imgSrc={AddonsModuleImage}\n                        benefits={[\n                            'Great for insurance, first-in-line shipping, etc.',\n                            'Pre-enabled or 1-click toggle switch',\n                            'Set custom pricing',\n                        ]}\n                    />\n                </Layout.Section>\n            </Layout>\n            <Box minHeight=\"50px\" />\n        </Page>\n    );\n};\n\nexport default UpcartAd;",
                "filename": "web/client/src/pages/upcart-ad/upcart-ad.page.tsx",
                "start_index": 6090,
                "end_index": 8128,
                "start_line": 146,
                "end_line": 194,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "build-deploy-extensions:\n        name: Deploy Extensions\n        needs: [test-and-check]\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: actions/setup-node@v3\n              with:\n                  node-version: 18.16.1\n                  cache: 'yarn'\n            - name: Install Root Dependencies\n              run: yarn install\n            - name: Create 'shopify.app.toml'\n              run: echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\n            - name: Install Post-purchase Dependencies\n              run: yarn install:post-purchase\n            - name: Create post-purchase env file\n              run: echo \"export const HOST=\\\"${{ env.HOST }}\\\";\" > extensions/post-purchase/src/env.ts\n            - name: Install Utm Triggers Dependencies\n              run: yarn install:utm-triggers\n            - name: Create utm-triggers env file\n              run: echo \"export const HOST=\\\"${{ env.HOST }}\\\";\" > theme-app-extension-src/utm-triggers/src/env.ts\n            - name: Build utm-triggers bundle\n              run: cd theme-app-extension-src/utm-triggers && yarn build\n            - name: Set up Ruby\n              uses: ruby/setup-ruby@v1\n              with:\n                  ruby-version: 3.1.2\n            - name: Install Bundler Gem\n              run: gem install bundler\n            - name: Install cargo-wasi\n              run: cargo install cargo-wasi\n            - name: Deploy\n              env:\n                  SHOPIFY_CLI_PARTNERS_TOKEN: ${{ secrets.SHOPIFY_CLI_PARTNERS_TOKEN }}\n                  SHOPIFY_API_KEY: ${{ env.SHOPIFY_API_KEY }}\n                  COMMIT_URL: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}\n              run: yarn deploy -f ${{ github.ref == 'refs/heads/production' && '--no-release' || '' }} --source-control-url \"$COMMIT_URL\"",
                "filename": ".github/workflows/cicd.yml",
                "start_index": 3741,
                "end_index": 5608,
                "start_line": 85,
                "end_line": 122,
                "max_line": 122,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "const getPageIdentifier = (shopifyObj) => {\n        const sessionName = 'aftersell-external-partner-last-order-id';\n        const shopifyOrderId = shopifyObj.checkout.order_id;\n        const checkoutStep = shopifyObj.Checkout.step;\n        const checkoutUpdatedAt = new Date(shopifyObj.checkout.updated_at);\n        try {\n            if (checkoutStep === 'thank_you') {\n                window.localStorage.setItem(sessionName, shopifyOrderId);\n                return orderConfirmationPageIdentifier;\n            }\n            const lastOrderId = window.localStorage.getItem(sessionName);\n            if (lastOrderId && lastOrderId === String(shopifyOrderId)) {\n                return orderStatusPageIdentifier;\n            } else {\n                window.localStorage.setItem(sessionName, shopifyOrderId);\n            }\n        } catch (err) {\n            // ignore if there is issue with accessing localStorage\n        }\n        const currentTime = new Date();\n        const checkoutUpdatedAtPlusOneMinute = new Date(checkoutUpdatedAt.getTime() + 1000 * 120);\n        return checkoutUpdatedAtPlusOneMinute > currentTime\n            ? orderConfirmationPageIdentifier\n            : orderStatusPageIdentifier;\n    };\n\n    async function main() {\n        injectPlaceholders();\n        if (window.Shopify && window.Shopify.checkout && window.Shopify.Checkout) {\n            const shopifyObj = window.Shopify;\n            const attributes = await getAttributes(shopifyObj);\n            const identifier = getPageIdentifier(shopifyObj);\n            initRokt(accountId, attributes, identifier);\n        }\n    }\n    main();\n}",
                "filename": "web/widgets/src/apps/widgets/aftersell-network/index.ts",
                "start_index": 7761,
                "end_index": 9378,
                "start_line": 201,
                "end_line": 237,
                "max_line": 237,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n    const discountCodes = useDiscountCodes();\n    const cartLines = useCartLines();\n    const storage = useStorage();\n\n    const _applyCartLinesChange = useApplyCartLinesChange();\n    const safeApplyCartLinesChange = useCallback(\n        async (change: CartLineChange) => {\n            const error = await storage.read(STORAGE_ERROR_KEY);\n            if (error) {\n                // This is required to prevent repeatedly re-adding an out of stock item. When an out of stock item is\n                // added to checkout, the customer gets a popup saying that the item is out of stock the next time they\n                // change anything or try to complete checkout. If we keep trying to add an out of stock item, the customer\n                // will never be able to complete the checkout.\n                //\n                // There may be other errors that could block checkout that we haven't found, in those cases we should also\n                // stop trying whatever we're doing.\n                //\n                // TODO: we should inform the customer when errors occur (e.g., banner saying gift out of stock)\n                console.error('AfterSell GWP: skipping change due to previous error', { error, change });\n                return;\n            }\n            const result = await _applyCartLinesChange(change);\n            if (result.type === 'error') {\n                console.error('AfterSell GWP: change failed', { change, result });\n                await storage.write(STORAGE_ERROR_KEY, result.message);\n            }\n        },\n        [_applyCartLinesChange, storage]\n    );\n    const registerCorrectState = useCallback(async () => {\n        const error = await storage.read(STORAGE_ERROR_KEY);\n        if (error) {\n            // We clear the error when we reach a correct state so that we can try to apply changes again\n            // later if needed. This is most useful for merchant testing so that they don't need to clear\n            // local storage if an error happens.\n            //\n            // There are many errors that happen due to race conditions with Shopify's checkout extension\n            // APIs or incorrect data provided to our extension (e.g., empty line items). If one of these\n            // incorrect errors happens, we don't want to completely shut off GWP functionality. We can't\n            // be certain whether an error was real or not.\n            console.info('AfterSell GWP: clearing error because correct state was reached', { error });\n            await storage.delete(STORAGE_ERROR_KEY);\n        }\n    }, [storage]);\n\n    const discountCodeIsApplied = useMemo(\n        () => discountCodes.some((discount) => settings.discountCodes.includes(discount.code)),\n        [discountCodes, settings]\n    );",
                "filename": "extensions/checkout-gift-with-purchase/src/index.tsx",
                "start_index": 902,
                "end_index": 3664,
                "start_line": 1,
                "end_line": 89,
                "max_line": 163,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { ShopifyService } from '../shopify/shopify.service';\nimport UserModel from '../users/users.model';\nimport { calculateShopMetrics } from '../billing/usage-charging/shop-metrics';\nimport { getGlobalFeatureFlagEnabled } from '../global-feature-flags/global-feature-flags';\n\ntype AfterSellBrandingProps = { shop: string; shopifyService?: ShopifyService };\n\nconst getShopifyService = async ({ shop, shopifyService }: AfterSellBrandingProps): Promise<ShopifyService> => {\n    if (shopifyService) {\n        return shopifyService;\n    }\n\n    const user = await UserModel.findOne({ myshopify_domain: shop }, { accessToken: 1 }).lean();\n    if (!user) throw new Error(`User not found for shop ${shop}`);\n    if (!user.accessToken) throw new Error(`No access token found for shop ${shop}`);\n\n    return new ShopifyService({ shop, accessToken: user.accessToken });\n};\n\nexport const isEligibleForAftersellBranding = async ({\n    shop,\n    shopifyService: _shopifyService,\n}: AfterSellBrandingProps): Promise<boolean> => {\n    const shopifyService = await getShopifyService({ shop, shopifyService: _shopifyService });\n    const user = await UserModel.findOne({ myshopify_domain: shop }, { plan_name: 1 }).lean();\n\n    if (!user) throw new Error(`User not found for shop ${shop}`);\n\n    // CASE 1: Only eligible if on basic shopify plan;\n    if (user.plan_name !== 'basic') return false;\n\n    // CASE 2: Only eligible if on lowest pricing tier (i.e. less than 100 orders in the past 30 days)\n    const now = new Date();\n    const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n    const shopMetrics = await calculateShopMetrics({ shopifyService, period: { start: thirtyDaysAgo, end: now } });\n    if (shopMetrics.totalOrders >= 100) return false;\n\n    return true;\n};\n\nexport const maybeEnableAftersellBranding = async ({\n    shop,\n    shopifyService: _shopifyService,\n    isNewUser,\n}: AfterSellBrandingProps & { isNewUser: boolean }): Promise<void> => {\n    // Enables Aftersell branding on the Post-Purchase page if the merchant is eligible for it.\n\n    // this is called within installing, and a try catch is used to ensure it never interferes with that\n    try {\n        // CASE 1: Only automatically enable if the user is new\n        if (!isNewUser) return;\n\n        const postPurchaseAftersellBrandingEnabled = await getGlobalFeatureFlagEnabled('postPurchaseBrandingIsEnabled');\n        if (!postPurchaseAftersellBrandingEnabled) return;\n\n        const shopifyService = await getShopifyService({ shop, shopifyService: _shopifyService });\n\n        // CASE 2: Only automatically enable if the user is eligible for it\n        const eligible = await isEligibleForAftersellBranding({ shop, shopifyService });\n        if (eligible) {\n            await UserModel.findOneAndUpdate({ myshopify_domain: shop }, { postPurchaseAftersellBranding: true });\n        }\n    } catch (err) {\n        console.error(`[${shop}] Error enabling Aftersell branding: ${err}`);\n    }\n};",
                "filename": "web/server/src/modules/post-purchase/post-purchase.service.ts",
                "start_index": 0,
                "end_index": 2980,
                "start_line": 1,
                "end_line": 90,
                "max_line": 90,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<Banner\n                                title=\"Claim your 7-day free trial\"\n                                action={{\n                                    content: 'Claim free trial',\n                                    external: true,\n                                    url: 'https://apps.shopify.com/upcart-cart-builder?source=aftersell-app-upcart-landing-page',\n                                    onAction: () => {\n                                        setShowBanner(false);\n                                    },\n                                }}\n                                onDismiss={() => setShowBanner(false)}\n                            >\n                                Get started with UpCart right away at zero risk.\n                            </Banner>\n                        </Card>\n                    )}\n                </Layout.Section>\n                <Layout.Section fullWidth>\n                    <CustomMediaCard imgSrc={BannerImage}>\n                        <VerticalStack gap=\"2\" inlineAlign=\"start\">\n                            <HorizontalStack gap=\"2\" blockAlign=\"center\">\n                                <img style={{ width: '64px', height: '100%', borderRadius: '6px' }} src={IconImage} />\n                                <VerticalStack>\n                                    <Text as=\"h4\" variant=\"headingMd\">\n                                        UpCart \u2014 Cart Drawer & Upsell\n                                    </Text>\n                                    <Text as=\"span\" variant=\"bodyMd\" color=\"subdued\">\n                                        by AfterSell\n                                    </Text>\n                                </VerticalStack>\n                            </HorizontalStack>\n                            <VerticalStack>\n                                <Reviews title={''} />\n                                <Text as=\"span\" variant=\"bodyMd\" color=\"subdued\">\n                                    5.0 (400+ Reviews)\n                                </Text>\n                            </VerticalStack>\n                            <Text as=\"p\" variant=\"bodyMd\">\n                                UpCart is a great addition to AfterSell. Create an on-brand slide cart that boosts AOV\n                                pre-purchase.\n                            </Text>\n                            <Button\n                                external\n                                url=\"h",
                "filename": "web/client/src/pages/upcart-ad/upcart-ad.page.tsx",
                "start_index": 3655,
                "end_index": 6090,
                "start_line": 103,
                "end_line": 146,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n    const { shop, accessToken } = req.session;\n    const shopifyService = new ShopifyService({ shop, accessToken });\n\n    /**\n     * Resolve the promises in parallel\n     */\n\n    //1. Get the User\n    const userPromise = User.findOne(\n        { myshopify_domain: shop },\n        {\n            _id: 0,\n            name: 1,\n            is_active: 1,\n            email: 1,\n            money_format: 1,\n            money_with_currency_format: 1,\n            currency: 1,\n            myshopify_domain: 1,\n            domain: 1,\n            shop_owner: 1,\n            appEnabled: 1,\n            currency_code: 1,\n            country_code: 1,\n            subscription_status: 1,\n            first_installed: 1,\n            last_billed_amount: 1,\n            triggerStatus: 1,\n            onboarding: 1,\n            onboarding_v2: 1,\n            onboarding_v3: 1,\n            pricing_shown: 1,\n            is_new: 1,\n            introduce_step: 1,\n            plan_name: 1,\n            expertReviewProcess: 1,\n            hasAcceptedBillingV2: 1,\n            appVersionOnFirstInstall: 1,\n            featureFlags: 1,\n            reviewRate: 1,\n            onBoardingCardClosed: 1,\n            actionBannerStep: 1,\n            adsNetworkIsActive: 1,\n            adsNetworkEmail: 1,\n            importantAccountEmail: 1,\n            industry: 1,\n            referredFrom: 1,\n            additionalOauthScopes: 1,\n            annualBillingAgreement: 1,\n            billingEstimate: 1,\n            postPurchaseAftersellBranding: 1,\n            checkoutVersion: 1,\n        }\n    );\n\n    //2. Check their plan\n    const needsNewChargeWithReasonPromise = BillingV2Service.getUserNeedsToAcceptNewAfterSellPlan({\n        shopifyService,\n    });\n\n    //3. Get Plan details\n    const possibleFeaturesPromise = BillingV2Service.getPossibleFeaturesForUser({ shopifyService });\n    const acceptedAfterSellPlanResultPromise = BillingV2Service.getUserAcceptedAndActiveAfterSellPlan({\n        shopifyService,\n    });\n\n    //4. Get post-purchase app selection status\n    const appIsPostPurchaseAppInUseQueryPromise = shopifyService.graphql.GetAppIsPostPurchaseAppInUse();\n\n    //5. Determine if user is an admin\n    const isAdminPromise = AdminStores.findOne({ shop: shop });\n\n    //6. Resolve the promises in parallel\n    let [\n        user,\n        needsNewChargeWithReason,\n        possibleFeatures,\n        acceptedAfterSellPlanResult,\n        appIsPostPurchaseAppInUseQuery,\n        isAdmin,\n    ] = await Promise.all([\n        userPromise,\n        needsNewChargeWithReasonPromise,\n        possibleFeaturesPromise,\n        acceptedAfterSellPlanResultPromise,\n        appIsPostPurchaseAppInUseQueryPromise,\n        isAdminPromise,\n    ]);\n    user = user.toObject();\n\n    //7. Prepare/format data\n    let planDetails = {\n        features: [],\n        possibleFeatures,\n        shopifyChargeName: '',\n        aftersellPlanId: '',\n        managementPage: null,\n    };",
                "filename": "web/server/src/modules/users/users.controller.ts",
                "start_index": 4439,
                "end_index": 7384,
                "start_line": 3,
                "end_line": 240,
                "max_line": 340,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n    const { funnelId, offerType } = req.params;\n    const { isSplitTest: isSplitTestQuery } = req.query;\n    const { accessToken, shop } = req.session;\n\n    const shopifyService = new ShopifyService({ shop, accessToken });\n\n    const isSplitTest = isSplitTestQuery === 'true';\n\n    let offer;\n    if (isSplitTest) {\n        // TODO: figure out how to fix offer version validation so we can remove \"lean()\"\n        // - offers without an offer version do not work if we remove \"lean()\"\n        // - the offerVersion should be set to \"v1\" by default, but it seems like this default\n        //   value isn't being used for discrimination\n        const splitTest = await SplitTestsModel.findOne({ shop, funnelId: funnelId, upsellType: offerType }).lean();\n        offer = splitTest.offers[0];\n    } else {\n        // TODO: figure out why offers are failing validation when fetching so we can remove \"lean()\"\n        const funnel = await FunnelsModel.findOne({ _id: funnelId, shop }).lean();\n        offer = funnel[offerType];\n        if (!offer) {\n            // This is likely a race condition. If you have AfterSell open in two tabs and delete the offer in one tab,\n            // the other tab will still show the offer unless you refresh the page. If you go to the editor then the offer\n            // will not exist.\n            return res.status(404).json({\n                status: 'error',\n                message: 'Offer not found. This offer was likely deleted.',\n            });\n        }\n    }\n\n    const singleProductConfig = offer.template.find((widget) => widget.appId === 'productInformation');\n    if (singleProductConfig) {\n        const offerProduct = Array.isArray(offer.product) ? offer.product[0] : offer.product;\n        singleProductConfig.productId = offerProduct.id;\n    } else {\n        const hasCollection = offer?.product?.some((product) => product.productType === OfferProductType.COLLECTION);\n\n        if (hasCollection) {\n            const shopifyService = new ShopifyService({ shop, accessToken });\n\n            await FunnelsService.replacePlaceholderProducts({\n                upsells: { [offerType]: offer },\n                shopifyService,\n                settings: {\n                    savePlaceholders: true,\n                },\n            });\n        }\n    }\n\n    const settings = await SettingsService.getSettings({ shop });\n\n    const { fetchedProducts, fetchedProductInfoList } = await prefetchOfferProducts({\n        shopifyService,\n        settings,\n        offers: [offer],\n    });\n\n    const preparedOffer = await prepareUpsell({\n        token: accessToken,\n        store: shop,\n        upsell: offer,\n        settings,\n        isSubscriptionInCheckout: false,\n        allowPlaceholders: true,\n        allowOutOfStockAndNonActive: true,\n        allowUnmatchedReplacementUpsell: true,\n        inputDataToken: '',\n        offerType,\n        fetchedProducts,\n        fetchedProductInfoList,\n    });",
                "filename": "web/server/src/modules/post-purchase/post-purchase.controller.ts",
                "start_index": 2475,
                "end_index": 5414,
                "start_line": 2,
                "end_line": 140,
                "max_line": 147,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "for (const chunkOfInventoryItemIds of chunkedInventoryItemIds) {\n        const p = XShopify.Rest.send(\n            XShopify.Rest.prepare(\n                XShopify.Rest.endpoints[\n                    'GET /admin/api/2023-04/inventory_levels.json?location_ids&inventory_item_ids&limit'\n                ],\n                {\n                    params: {\n                        creds: { shop: shopifyService.shop, accessToken: shopifyService.accessToken },\n                        query: {\n                            location_ids: allowedLocationIds.join(','),\n                            inventory_item_ids: chunkOfInventoryItemIds.join(','),\n                            limit: MAX_PAGE_SIZE,\n                        },\n                    },\n                    callerLocation: 'PostPurchase::CorrectInventoryCounts',\n                }\n            )\n        );\n        inventoryLevelPromises.push(p);\n    }\n    const inventoryLevelsResponses = await Promise.all(inventoryLevelPromises);\n    const inventoryLevels = inventoryLevelsResponses.map((response) => response.inventory_levels).flat();\n\n    for (const mut_product of mut_products) {\n        for (const mut_variant of mut_product.variants) {\n            const levels = inventoryLevels.filter((level) => level.inventory_item_id === mut_variant.inventory_item_id);\n            // There may be no levels tracked for this item if all locations in which it is stocked are excluded.\n            if (levels.length === 0) {\n                // mut\n                mut_variant.inventory_quantity = 0;\n            } else {\n                const tracksInventory = levels.every((level) => level.available !== null);\n                if (tracksInventory) {\n                    const countAtAllowedLocations = levels.reduce((acc, curr) => acc + curr.available, 0);\n\n                    // mut\n                    mut_variant.inventory_quantity = countAtAllowedLocations;\n                }\n            }\n        }\n    }\n}",
                "filename": "web/server/src/modules/post-purchase-public/post-purchase-public.controller.ts",
                "start_index": 50315,
                "end_index": 52275,
                "start_line": 1139,
                "end_line": 1418,
                "max_line": 1418,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "static async getUserNeedsToAcceptNewAfterSellPlan({\n        shopifyService,\n    }: {\n        shopifyService: ShopifyService;\n    }): Promise<NeedsNewCharge | DoesNotNeedNewCharge> {\n        const acceptedAfterSellPlanResult = await this.getUserAcceptedAndActiveAfterSellPlan({ shopifyService });\n        if (!acceptedAfterSellPlanResult.success) {\n            return {\n                needsToAcceptNewPlan: true,\n                reason: acceptedAfterSellPlanResult.reason,\n            };\n        }\n        if (acceptedAfterSellPlanResult.data.aftersellPlan.isDeprecated_forceUsersToAcceptNewPlanOnNextLogin) {\n            return {\n                needsToAcceptNewPlan: true,\n                reason: `User is currently on a deprecated AfterSell plan. Current AfterSell plan: \"${acceptedAfterSellPlanResult.data.aftersellPlan.id}\".`,\n            };\n        }\n        const pendingPlanChange = await PendingPlanChangesService.getUserPendingPlanChange({\n            myshopifyDomain: shopifyService.shop,\n        });\n        if (pendingPlanChange) {\n            return {\n                needsToAcceptNewPlan: true,\n                reason: `User has a pending AfterSell plan change. Pending AfterSell plan change: \"${pendingPlanChange.pendingAfterSellPlanId}\".`,\n            };\n        }\n        return {\n            needsToAcceptNewPlan: false,\n        };\n    }\n\n    static getUserAccessiblePaidFeatures({\n        acceptedAfterSellPlan,\n    }: {\n        acceptedAfterSellPlan: AfterSellPlan;\n    }): AfterSellPaidFeature[] {\n        const paidFeatures: AfterSellPaidFeature[] = [];\n        for (const feature of acceptedAfterSellPlan.shopifyCharge.recurringChargeConfigOnChargeAccept.paysForFeatures) {\n            paidFeatures.push(feature);\n        }\n        for (const usageCharge of acceptedAfterSellPlan.monthlyUsageCharges) {\n            paidFeatures.push(usageCharge.paysForFeature);\n        }\n        return paidFeatures;\n    }",
                "filename": "web/server/src/modules/billing/legacy-billing-v2.service.ts",
                "start_index": 7753,
                "end_index": 9683,
                "start_line": 167,
                "end_line": 359,
                "max_line": 360,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "async getAppEmbedStatus({\n        themeAppExtensionUuid,\n        appEmbedLiquidFileName,\n    }: {\n        themeAppExtensionUuid: string;\n        appEmbedLiquidFileName: string;\n    }): Promise<{ isEnabled: boolean; activationDeepLink: string }> {\n        const shopify = new Shopify.Clients.Rest(this.config.shop, this.config.accessToken);\n\n        const themesResponse = await shopify.get({\n            path: `themes`,\n        });\n        const themes = (themesResponse.body as any).themes as Theme[];\n\n        const mainTheme = themes.find((theme) => theme.role === 'main');\n        if (!mainTheme) return { isEnabled: false, activationDeepLink: '' };\n        const mainThemeId = String(mainTheme.id);\n\n        const mainThemeSettingsResponse = await shopify.get({\n            path: `themes/${mainThemeId}/assets`,\n            query: { 'asset[key]': 'config/settings_data.json' },\n        });\n        const mainThemeSettings = JSON.parse((mainThemeSettingsResponse.body as any).asset.value)\n            .current as ThemeSettings;\n\n        const appEmbedFileName = appEmbedLiquidFileName.replace('.liquid', '');\n        const appEmbedIsEnabled = Object.values(mainThemeSettings.blocks).some(\n            (block) => block.type.endsWith(`/blocks/${appEmbedFileName}/${themeAppExtensionUuid}`) && !block.disabled\n        );\n\n        const activationDeepLink = new URL(`https://${this.config.shop}/admin/themes/${mainThemeId}/editor`);\n        activationDeepLink.searchParams.append('context', 'apps');\n        activationDeepLink.searchParams.append('activateAppId', `${themeAppExtensionUuid}/${appEmbedFileName}`);\n\n        return { isEnabled: appEmbedIsEnabled, activationDeepLink: activationDeepLink.toString() };\n    }\n\n    async getActiveRecurringCharge(): Promise<ActiveRecurringChargeRest | null> {\n        const shopify = new Shopify.Clients.Rest(this.config.shop, this.config.accessToken);\n        const recurringChargesResponse = await shopify.get({\n            path: `recurring_application_charges`,\n            query: { fields: 'id,name,status,price,capped_amount' },\n        });\n        const recurringCharges = (recurringChargesResponse.body as any)\n            .recurring_application_charges as RecurringCharge[];\n        const activeRecurringCharge = recurringCharges.find((charge) => charge.status === 'active');\n        return activeRecurringCharge ?? null;\n    }\n\n    /**\n     * Gets the metafield that is added to orders when a post-purchase upsell is accepted through AfterSell.\n     * If there is no metafield, returns null.\n     *\n     * This can be used to check if an order has a post-purchase upsell from AfterSell. If the metafield is non-null then the order\n     * has a post-purchase upsell from AfterSell.\n     */",
                "filename": "web/server/src/modules/shopify/shopify.service.ts",
                "start_index": 6320,
                "end_index": 9060,
                "start_line": 134,
                "end_line": 1200,
                "max_line": 1375,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export const shopRedact = async (req, res) => {\n    res.sendStatus(200);\n\n    const shop = req.get('x-shopify-shop-domain');\n\n    await Promise.allSettled([\n        /**\n         * Merchant personal data\n         */\n        // Online sessions may include names/emails of employees in `onlineAccessInfo`\n        SessionModel.deleteMany({ shop, isOnline: true }),\n        User.updateOne(\n            { myshopify_domain: shop },\n            {\n                // Specific location data could be identifiable, so we will remove it to be safe.\n                // We do not need to remove province and country since these could not identify any individual.\n                // Note that this is supposed to be the business address, but the merchant could have entered\n                // their home address here so we will remove it just in case.\n                address1: null,\n                address2: null,\n                zip: null,\n                city: null,\n                latitude: null,\n                longitude: null,\n\n                // Note that these are supposed to be the business contacts, but they could still be personally\n                // identificable based on the format (e.g., john.doe@company.com) so we will remove them to be safe.\n                customer_email: null,\n                email: null,\n                importantAccountEmail: null,\n                adsNetworkEmail: null,\n                phone: null,\n\n                shop_owner: null,\n            }\n        ),\n\n        /**\n         * Customer personal data\n         */\n        // NOTE: this should match the list in the \"customers/redact\" webhook\n        EventsModel.deleteMany({ shop }), // customerId\n        JourneyLinkerModel.deleteMany({ shop }), // checkoutToken\n        PossibleHoldsModel.deleteMany({ shop }), // checkoutToken\n        ReplacementUpsellAttemptModel.deleteMany({ shop }), // checkoutToken\n        ScheduledHoldReleasesModel.deleteMany({ shop }), // orderId\n        ScheduledPartiallyPaidRemovalModel.deleteMany({ shop }), // orderId and other fields in orderEdit\n        StorefrontSessionModel.deleteMany({ shop }), // cartToken, checkoutToken, and customerTriggerData\n        TyImpressionDedupeModel.deleteMany({ shop }), // checkoutToken\n        VisibilityEventModel.deleteMany({ myshopifyDomain: shop }), // checkoutToken and payload in some cases\n        VisitedFunnelsModel.deleteMany({ shop }), // checkoutToken and customerId\n    ]);\n};\n\nexport const customersDataRequest = async (req, res) => {\n    res.sendStatus(200);\n    // We do not need to do anything here because there is no useful data to send to the merchant.\n    // The only customer personal data that we store are random identifiers (e.g., checkout tokens, customer\n    // ID numbers, etc). All of this data would have to be combined with other data that the store has to be\n    // useful, and the store already has that data so they will send it to the customer.\n};",
                "filename": "web/server/src/modules/webhooks/webhooks.controller.ts",
                "start_index": 13543,
                "end_index": 16483,
                "start_line": 318,
                "end_line": 378,
                "max_line": 378,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "initial_doc_snippets": [
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/server` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 999,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <!-- Shopify App Bridge [START] -->\n        <meta name=\"shopify-api-key\" content=\"%SHOPIFY_API_KEY%\" />",
                "filename": "web/client/index.html",
                "start_index": 38,
                "end_index": 156,
                "start_line": 4,
                "end_line": 6,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# [[[ --- CLIENT --- ]]]\nFROM node:18.16.1-alpine AS client\nARG SHOPIFY_API_KEY\nENV SHOPIFY_API_KEY=$SHOPIFY_API_KEY\nARG HOST\nENV HOST=$HOST\nARG NODE_ENV\nENV NODE_ENV=$NODE_ENV\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/client/package.json ./web/client/package.json\nCOPY web/client/yarn.lock ./web/client/yarn.lock\nRUN cd web/client && yarn install --frozen-lockfile --production=false\nCOPY extensions-web-common/package.json ./extensions-web-common/package.json\nCOPY extensions-web-common/yarn.lock ./extensions-web-common/yarn.lock\nRUN cd extensions-web-common && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY extensions/post-purchase ./extensions/post-purchase\nCOPY extensions-web-common/post-purchase ./extensions-web-common/post-purchase\nCOPY extensions-web-common/checkout ./extensions-web-common/checkout\nCOPY extensions-web-common/shared ./extensions-web-common/shared\nCOPY extensions-web-common/ty-page ./extensions-web-common/ty-page\nCOPY web/client ./web/client\nRUN cd web/client && yarn build\n\n# [[[ --- TY PAGE --- ]]]\nFROM node:18.16.1-alpine AS ty-page\nARG HOST\nENV HOST=$HOST\nWORKDIR /usr/src/app\nCOPY web/widgets/package.json ./web/widgets/package.json\nCOPY web/widgets/yarn.lock ./web/widgets/yarn.lock\nRUN cd web/widgets && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY web/widgets ./web/widgets\nRUN cd web/widgets && yarn build\n\n# [[[ --- SERVER --- ]]]\nFROM node:18.16.1-alpine AS server\nWORKDIR /usr/src/app\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=false\nCOPY web/server ./web/server\nCOPY web/common ./web/common\nRUN cd web/server && yarn build\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM node:18.16.1-alpine AS final\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=true\nCOPY --from=server /usr/src/app/web/server/build ./web/server/build\nCOPY --from=ty-page /usr/src/app/web/widgets/dist ./web/server/build/server/dist\nCOPY --from=client /usr/src/app/web/client/dist ./web/server/build/server/dist/client\nCOPY package.json ./package.json\nCMD [\"yarn\", \"start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2514,
                "start_line": 1,
                "end_line": 61,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script defer src=\"./thankyoupage_bundle.js?v2\"></script>\n        <script defer src=\"/apps/aftersell_sdk.bundle.min.js?v2\"></script>\n    </head>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241237,
                "end_index": 241381,
                "start_line": 6073,
                "end_line": 6075,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<body class=\"aftersell-preview\">\n        <a href=\"#main-header\" class=\"skip-to-content\"> Skip to content </a>\n\n        <header class=\"banner\" data-header=\"\" role=\"banner\">\n            <div class=\"wrap\">\n                <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n            </div>\n        </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241387,
                "end_index": 241804,
                "start_line": 6077,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# AfterSell\n\n### All Docs on Notion \ud83d\udc49 [AfterSell Notion Docs](https://www.notion.so/aftersell/AfterSell-Docs-9d43566167b5426d86b5983925872953?pvs=4)",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 148,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Shopify Function development with Rust\n\n## Dependencies\n\n-   [Install Rust](https://www.rust-lang.org/tools/install)\n    -   On Windows, Rust requires the [Microsoft C++ Build Tools](https://docs.microsoft.com/en-us/windows/dev-environment/rust/setup). Be sure to select the _Desktop development with C++_ workload when installing them.\n-   Install [`cargo-wasi`](https://bytecodealliance.github.io/cargo-wasi/)\n    -   `cargo install cargo-wasi`\n-   On Macs with Apple Silicon, you'll also need to install the Binaryen toolchain and set the `WASM_OPT` environment variable. ([related issue](https://github.com/bytecodealliance/cargo-wasi/issues/112))\n    -   `brew install binaryen`\n    -   Add `export WASM_OPT=/opt/homebrew/bin/wasm-opt` to your `.bashrc` or `.zshrc`\n\n## Building the function\n\nYou can build this individual function using `cargo wasi`.\n\n```shell\ncargo wasi build --release\n```\n\nThe Shopify CLI `build` command will also execute this, based on the configuration in `shopify.function.extension.toml`.\n\n## Testing\n\n> Requires Node v16+\n\n1. Create a temporary JSON file (e.g., `a.json`) in the following format:\n\n```json\n{\n    \"data\": {\n        \"foo\": \"bar\"\n    },\n    \"secretKey\": \"abc123\"\n}\n```\n\n2. Run the following command\n\n```\nyarn test:new-hmac < a.json\n```\n\n3. Copy the generated HMAC into the test file",
                "filename": "extensions/upsell-offer-discount-function/README.md",
                "start_index": 0,
                "end_index": 1329,
                "start_line": 1,
                "end_line": 44,
                "max_line": 44,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<html\n    lang=\"en\"\n    dir=\"ltr\"\n    class=\"js desktop page--no-banner page--logo-main page--show page--show card-fields cors svg opacity placeholder no-touchevents displaytable display-table generatedcontent cssanimations flexbox no-flexboxtweener anyflexbox shopemoji floating-labels\"\n>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 0,
                "end_index": 289,
                "start_line": 1,
                "end_line": 6518,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script>\n            !(function (f, b, e, v, n, t, s) {\n                if (f.fbq) return;\n                n = f.fbq = function () {\n                    n.callMethod ? n.callMethod.apply(n, arguments) : n.queue.push(arguments);\n                };\n                if (!f._fbq) f._fbq = n;\n                n.push = n;\n                n.loaded = !0;\n                n.version = '2.0';\n                n.queue = [];\n                t = b.createElement(e);\n                t.async = !0;\n                t.src = v;\n                s = b.getElementsByTagName(e)[0];\n                s.parentNode.insertBefore(t, s);\n            })(window, document, 'script', 'https://connect.facebook.net/en_US/fbevents.js');\n            fbq('init', '895262111044943');\n            fbq('track', 'PageView');\n        </script>\n        <!-- End Facebook Pixel Code -->\n        <!-- Reddit Pixel -->\n        <script>\n            !(function (w, d) {\n                if (!w.rdt) {\n                    var p = (w.rdt = function () {\n                        p.sendEvent ? p.sendEvent.apply(p, arguments) : p.callQueue.push(arguments);\n                    });\n                    p.callQueue = [];\n                    var t = d.createElement('script');\n                    (t.src = 'https://www.redditstatic.com/ads/pixel.js'), (t.async = !0);\n                    var s = d.getElementsByTagName('script')[0];\n                    s.parentNode.insertBefore(t, s);\n                }\n            })(window, document);\n            rdt('init', 't2_dp3wj8bg');\n            rdt('track', 'PageVisit');\n        </script>\n        <!-- End Reddit Pixel -->\n\n        <!-- Dev HMR [START] -->\n        <script type=\"module\">\n            if (!import.meta.env || !import.meta.env.PROD) {\n                // For embedded development, the iframe loads an HTML file from the server. Normally for\n                // development, the HTML file is served by the dev server, which injects the HMR script.\n                // This script adds the HMR script to the iframe to allow HMR in embedded development.\n                const script = document.createElement('script');\n                script.setAttribute('type', 'module');\n                script.setAttribute('src', './src/dev-hmr.ts');\n                document.getElementsByTagName('head')[0].append(script);\n            }\n        </script>\n        <!-- Dev HMR [END] -->\n\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com/\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" crossorigin=\"anonymous\" />\n        <link\n            href=\"https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap\"\n        />\n    </head>",
                "filename": "web/client/index.html",
                "start_index": 6232,
                "end_index": 8924,
                "start_line": 7,
                "end_line": 178,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<aside class=\"sidebar\" role=\"complementary\">\n                    <div class=\"sidebar__header\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323196,
                "end_index": 323511,
                "start_line": 6285,
                "end_line": 6493,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<span class=\"order-summary-toggle__inner\">\n                        <span class=\"order-summary-toggle__icon-wrapper\">\n                            <svg\n                                width=\"20\"\n                                height=\"19\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__icon\"\n                            >\n                                <path\n                                    d=\"M17.178 13.088H5.453c-.454 0-.91-.364-.91-.818L3.727 1.818H0V0h4.544c.455 0 .91.364.91.818l.09 1.272h13.45c.274 0 .547.09.73.364.18.182.27.454.18.727l-1.817 9.18c-.09.455-.455.728-.91.728zM6.27 11.27h10.09l1.454-7.362H5.634l.637 7.362zm.092 7.715c1.004 0 1.818-.813 1.818-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817zm9.18 0c1.004 0 1.817-.813 1.817-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--show\">\n                            <span>Show order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"6\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M.504 1.813l4.358 3.845.496.438.496-.438 4.642-4.096L9.504.438 4.862 4.534h.992L1.496.69.504 1.812z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--hide\">\n                            <span>Hide order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"7\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M6.138.876L5.642.438l-.496.438L.504 4.972l.992 1.124L6.138 2l-.496.436 3.862 3.408.992-1.122L6.138.876z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span\n                            class=\"order-summary-toggle__total-recap total-recap\"\n                            data-order-summary-section=\"toggle-total-recap\"\n                        >\n                            <span class=\"total-recap__final-price\" data-checkout-payment-due-target=\"5073\">$50.73</span>\n                        </span>\n                    </span>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 242214,
                "end_index": 245205,
                "start_line": 6097,
                "end_line": 6446,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"main\">\n                    <header class=\"main__header\" role=\"banner\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245397,
                "end_index": 245703,
                "start_line": 6153,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"step__sections\">\n                                <div class=\"section\">\n                                    <div class=\"section__header os-header\">\n                                        <svg\n                                            width=\"56\"\n                                            height=\"56\"\n                                            viewBox=\"0 0 56 56\"\n                                            fill=\"none\"\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                            <circle cx=\"28\" cy=\"28\" r=\"26\" stroke=\"#E5E5E5\" stroke-width=\"2.29412\" />\n                                            <path\n                                                fill-rule=\"evenodd\"\n                                                clip-rule=\"evenodd\"\n                                                d=\"M22.4811 37.3603L16.3636 31.3947C15.5663 30.6172 15.5663 29.3605 16.3636 28.583C17.1609 27.8055 18.4497 27.8055 19.247 28.583L23.8066 33.0293L36.6493 18.7538C37.3834 17.9186 38.6701 17.8231 39.5225 18.537C40.379 19.2529 40.4789 20.5056 39.7448 21.3388L25.4706 37.2469C25.1015 37.6685 24.5672 37.9191 24.0003 37.9409C23.3825 37.9429 22.8625 37.7341 22.4811 37.3603Z\"\n                                                fill=\"#008060\"\n                                                stroke=\"#E5E5E5\"\n                                                stroke-width=\"0.764706\"\n                                            />\n                                        </svg>\n                                        <div class=\"os-header__heading\">\n                                            <span class=\"os-order-number\"> Order #1001 </span>\n                                            <h2 class=\"os-header__title\" id=\"main-header\" tabindex=\"-1\">\n                                                Thank you {{Customer Name}}!\n                                            </h2>\n                                        </div>\n                                    </div>\n                                </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245858,
                "end_index": 247957,
                "start_line": 6161,
                "end_line": 6451,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<svg\n                                                                    class=\"product-thumbnail__image\"\n                                                                    width=\"32\"\n                                                                    height=\"32\"\n                                                                    viewBox=\"0 0 32 32\"\n                                                                    fill=\"none\"\n                                                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                                                >\n                                                                    <path\n                                                                        fill-rule=\"evenodd\"\n                                                                        clip-rule=\"evenodd\"\n                                                                        d=\"M27.2 28.8C26.3184 28.8 25.6 28.0816 25.6 27.2C25.6 26.3184 26.3184 25.6 27.2 25.6C28.0816 25.6 28.8 26.3184 28.8 27.2C28.8 28.0816 28.0816 28.8 27.2 28.8ZM6.4 27.2C6.4 28.0816 5.6816 28.8 4.8 28.8C3.9184 28.8 3.2 28.0816 3.2 27.2C3.2 26.3184 3.9184 25.6 4.8 25.6C5.6816 25.6 6.4 26.3184 6.4 27.2ZM28.2656 9.34549L26.0464 15.9999H6.4V6.61269L28.2656 9.34549ZM27.2 22.4H6.4V19.2H27.2C27.8896 19.2 28.4992 18.76 28.7184 18.1056L31.9184 8.5056C32.0688 8.0512 32.0096 7.552 31.7536 7.1472C31.4976 6.7408 31.0736 6.472 30.5984 6.4128L6.4 3.3872V1.6C6.4 0.7168 5.6832 0 4.8 0H1.6C0.7168 0 0 0.7168 0 1.6C0 2.4832 0.7168 3.2 1.6 3.2H3.2V22.6944C1.3408 23.3584 0 25.1168 0 27.2C0 29.8464 2.1536 32 4.8 32C7.4464 32 9.6 29.8464 9.6 27.2C9.6 26.6352 9.4848 26.1024 9.3056 25.6H22.6944C22.5152 26.1024 22.4 26.6352 22.4 27.2C22.4 29.8464 24.5536 32 27.2 32C29.8464 32 32 29.8464 32 27.2C32 24.5536 29.8464 22.4 27.2 22.4Z\"\n                                                                        fill=\"#637381\"\n                                                                    />",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 326131,
                "end_index": 328135,
                "start_line": 6099,
                "end_line": 6353,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <meta charset=\"utf-8\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n        <meta\n            id=\"thankyoupage_viewport_meta\"\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, user-scalable=0\"\n        />\n        <meta name=\"referrer\" content=\"origin\" />\n\n        <title>Thank you! - Checkout</title>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 294,
                "end_index": 717,
                "start_line": 6,
                "end_line": 16,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"hidden\">\n                            <span class=\"visually-hidden\" id=\"forwarding-external-new-window-message\">\n                                Opens external website in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-new-window-message\">\n                                Opens in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-external-message\">\n                                Opens external website.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"checkout-context-step-one\">\n                                Customer information - Checkout\n                            </span>\n                        </div>\n                    </main>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 322226,
                "end_index": 323078,
                "start_line": 6265,
                "end_line": 6282,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<tbody class=\"total-line-table__tbody\">\n                                            <tr class=\"total-line total-line--subtotal\">\n                                                <th class=\"total-line__name\" scope=\"row\">Subtotal</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-subtotal-price-target=\"4299\"\n                                                    >\n                                                        $42.99\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--shipping\">\n                                                <th class=\"total-line__name\" scope=\"row\">\n                                                    <span> Shipping </span>\n                                                </th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-shipping-target=\"0\"\n                                                    >\n                                                        Free\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--taxes\" data-checkout-taxes=\"\">\n                                                <th class=\"total-line__name\" scope=\"row\">Taxes</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-taxes-target=\"774\"\n                                                        >$7.74</span\n                                                    >\n                                                </td>\n                                            </tr>\n                                        </tbody>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 333285,
                "end_index": 335837,
                "start_line": 6396,
                "end_line": 6433,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<table class=\"product-table\">\n                                            <caption class=\"visually-hidden\">\n                                                Shopping cart\n                                            </caption>\n                                            <thead class=\"product-table__header\">\n                                                <tr>\n                                                    <th scope=\"col\">\n                                                        <span class=\"visually-hidden\">Product image</span>\n                                                    </th>\n                                                    <th scope=\"col\">\n                                                        <span class=\"visually-hidden\">Description</span>\n                                                    </th>\n                                                    <th scope=\"col\"><span class=\"visually-hidden\">Quantity</span></th>\n                                                    <th scope=\"col\"><span class=\"visually-hidden\">Price</span></th>\n                                                </tr>\n                                            </thead>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 324035,
                "end_index": 325202,
                "start_line": 6298,
                "end_line": 6313,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "intial_documentation_sources": {
            "shopify": {
                "collection": "shopify_documentation",
                "reason_for_relevance": "The documentation may contain guidelines and best practices for optimizing Largest Contentful Paint (LCP) performance, which is crucial for maintaining the 'Built for Shopify' status."
            }
        },
        "external_documentation_snippets": {
            "external_shopify": [
                {
                    "code": "Billing\n App Store\n Storefront performance\n You should optimize your app to minimize its impact on storefront performance. A fast storefront leads to higher conversion rates, more repeat business, and better search engine rankings.\n Testing storefront performance\n Learn how Shopify tests the impact of your app on storefront performance, and how you can run similar tests.\n How Shopify tests storefront performance\n For apps that affect storefronts directly, Shopify tests the app's effect on store performance by measuring the Lighthouse score before and after the app is installed. We calculate a weighted average of score from the following pages:\n                                                                                                               The pages that are used to calculate the performance impact of apps on the storefront, and their weights.\n Page Weight\n Home page 17%\n Most visited product page 40%\n Most visited collection page 43%\n The difference in the score before and after the app is installed indicates whether the app improves or worsens store performance. To meet Shopify App Store requirements, your app must demonstrate low or no impact on store performance consistently across actual merchant stores over time.\n Testing your app\n Use the following procedure to determine the impact of your app on storefront performance.\n Step 1: Retrieve testing URLs\n To test your store performance, you need to retrieve a testable home page URL, product page URL, and collection page URL.\n For accurate measurements, start with a clean install of a supported Shopify theme, such as Dawn, without your app or any other apps installed.\n In the Shopify admin, navigate to Online Store > Themes.\n Right click on the View your store button, and then select Copy link address from the context menu.\n This is a shareable link to your store's home page that can be accessed by PageSpeed Insights, even if your store is password-protected.\n Paste the URL into a text editor so you can use it later.\n Home page URL\n 1 https://your-store.myshopify.com/?key=f5c4757ff9e0e7b352a30856456b5a7470663ea75c1f7ddb10e385366656ecb2&preview_theme_id=\n Retrieve the path to the product page that you want to test. To find the path, navigate to the product page in your browser. Copy the segment of the URL after .myshopify.com. This will generally be something like /product/your-product-name.\n To build your testable product page link, edit the home page URL that you retrieved. Paste the path to your product page into the URL between .myshopify.com and ?key=:\n Home page URL\n 1 https://your-store.myshopify.com/?key=f5c4757ff9e0e7b352a30856456b5a7470663ea75c1f7ddb10e385366656ecb2&preview_theme_id=\n Product page URL\n 1 https://your-store.myshopify.com/product/your-product-name?key=f5c4757ff9e0e7b352a30856456b5a7470663ea75c1f7ddb10e385366656ecb2&preview_theme_id=\n Retrieve the path to the collection page that you want to test. To find the path, navigate to the collection page in your browser. Copy the segment of the URL after .myshopify.com. This will generally be something like /collection/your-collection-name.\n To build your testable collection page link, edit the home page URL that you retrieved. Paste the path to your collection page into the URL between .myshopify.com and ?key=:\n Home page URL\n 1 https://your-store.myshopify.com/?key=f5c4757ff9e0e7b352a30856456b5a7470663ea75c1f7ddb10e385366656ecb2&preview_theme_id=\n Collection page URL\n 1 https://your-store.myshopify.com/collection/your-collection-name?key=f5c4757ff9e0e7b352a30856456b5a7470663ea75c1f7ddb10e385366656ecb2&preview_theme_id=\n Step 2: Retrieve your starting performance scores\n On PageSpeed Insights, paste the home page URL that you retrieved in Retrieve testing URLs.\n Click Analyze.\n If PageSpeed Insights indicates that it's attempting to test using a simplified version of the URL, then click Run with original URL.\n When the results appear, select the Mobile tab if it isn't already selected. Record the Performance score. This is your starting performance score for the store's home page.\n Repeat steps one through three for your product page and collection page URLs.\n Now that you have a starting performance score for your home, product, and collection pages, calculate the weighted average performance score using the weights for each page type. You can do this using a weighted average calculator.\n Note\n Lighthouse scores can vary between runs. Consider running these tests frequently during your development, and averaging your scores across a few consecutive Lighthouse tests before submission.\n Step 3: Retrieve your ending performance score and calculate your performance impact\n Install your app on your test store. Configure the most frequently used app features with typical required assets. Verify that it loads correctly and that you're able to preview it on the storefront.\n On PageSpeed Insights, repeat the steps from Retrieve starting performance scores.\n Using the three ending performance scores that you retrieved, calculate the weighted average performance score using the weights for each page type.\n Subtract your starting performance score from your ending performance score. This is the impact on Lighthouse performance score due to your app. For example:\n Starting performance score: 92\n Ending performance score: 87\n The ending performance score (87) minus starting performance score (92) equals -5, so the final speed score impact of your app is -5 points.\n Optimizing storefront performance\n Learn how to optimize your app's storefront performance.\n Use theme app extensions\n Theme app extensions allow developers to extend themes in a way that protects theme code integrity and provides better app development and user experiences.\n Apps built using the theme app extension framework don't edit theme code, which decreases the risk of introducing breaking changes to the theme, makes it easier to iterate on the content of the integration, and provides for a better user experience.\n All files inside the assets/ folder are automatically served from the Shopify CDN for fast, reliable asset delivery. Reference your assets by using either the javascript and stylesheet schema attributes or using the asset_url and asset_img_url Liquid URL filters.\n Use app embed blocks to take advantage of their ability to only load scripts on specific pages. This minimizes your app's performance impact by only loading resources where they're needed.\n Host assets on Shopify servers\n Deliver as much as you can from the Shopify content delivery network (CDN). Using the same host for your assets avoids unnecessary HTTP connections and allows the server to prioritize delivery of blocking resources using HTTP/2 prioritization.\n In a Shopify context, you can do this by using the fileGraphQL resource to host your static files on Shopify's servers and have them delivered by our globally available CDN.\n CDNs are accelerated web servers with built-in caching, compression, fast performance, and global distribution. Using Shopify\u2019s CDN also reduces network congestion.\n Learn more about using Shopify CDN for better performance.\n Additional resources\n To learn more about optimizing for storefront performance, review the following guides on our web performance blog:\n Optimize your images for a Shopify storefront using the Liquid template language\n Improve performance by removing image transitions\n Lazy loading images\n Preconnecting and preloading resource hints\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Testing storefront performance\n Optimizing storefront performance\n Additional resources\n Updates & News\n Developer changelog",
                    "filename": "docs/apps/best-practices/performance/storefront/content.txt",
                    "start_index": 0,
                    "end_index": 7657,
                    "start_line": 1,
                    "end_line": 80,
                    "max_line": 80,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Billing\n App Store\n App performance best practices and guidelines\n Consider the following best practices for optimizing the performance of your app.\n Include a viewport meta tag\n If your app can be embedded, then it might be rendered in a WebView when it's accessed from the Shopify mobile app. To define the scale at which your app is rendered on initial load, you should add a meta tag to the HTML file that serves your UI.\n Meta tag\n 1 <!-- Ensure the UI is properly scaled in the Shopify Mobile app -->\n 2 <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n If you don't add this meta tag, then Shopify injects it for you. This ensures that your app can be used on mobile devices, but it results in your app UI rendering twice: once zoomed out, and once at the correct scale.\n Avoid parser-blocking scripts\n Parser-blocking scripts block the construction and rendering of the DOM until the script is loaded, parsed, and executed. They also create congestion on the network and significantly delay page rendering. This impacts metrics like First Contentful Paint and Largest Contentful Paint. You should use defer or async attributes on script tags to avoid this.\n If the order of execution of the script tags matters, then use defer:\n 1 <script src=\"https://cdn.shopify.com/app-code.js\" defer></script>\n 2 <script src=\"app-code.js\" defer></script>\n If the order of execution doesn't matter, then use async:\n 1 <script src=\"https://cdn.shopify.com/app-code.js\" async></script>\n 2 <script src=\"app-code.js\" async></script>\n Reduce your dependency on external frameworks and libraries\n If you need to use JavaScript, consider avoiding introducing third-party frameworks, libraries, and dependencies. Instead, use native browser features and modern DOM APIs whenever possible. Including JavaScript libraries in your package can lead to large bundle sizes, slow load times, and a poor experience for customers.\n Frameworks such as React, Angular, and Vue, and large utility libraries such as jQuery have significant performance costs. A store's load time is degraded even further when multiple apps try to install the same framework multiple times on the same store.\n Avoid introducing polyfill libraries for very old browsers (anything that doesn't support async/await). If you use a browserslist, then you can target browsers with a > 1% marketshare.\n Reduce JavaScript usage\n CSS parses and renders much faster than JavaScript, so wherever possible, you should use CSS features for building interactivity. You can find more information on the internet by searching the phrase \u201cusing CSS instead of JavaScript\u201d. One example is the blog 5 things you can do with CSS instead of JavaScript by Juan Mart\u00edn Garc\u00eda.\n Your minified JavaScript bundle size should ideally be 16 KB or less.\n Avoid namespace collisions\n Namespaces allow you to place variables into unique containers so that you can prevent collisions in the global scope. However, JavaScript minifiers rename JavaScript variables to be shorter, which can cause collisions.\n To avoid namespace collisions in the global scope, wrap JavaScript values in a function scope. Values defined in a function scope are available only within the scope of that function, so there's no risk of collision with other variables that are defined on the global scope.\n The following example shows you how to wrap minified and renamed JavaScript variables in a function scope:\n 1 (function () {\n 2\n    var a; function b() {}\n 3 })();\n For example, the Immediately Invoked Function Expression (IIFE) pattern is a JavaScript function that runs as soon as it's defined. The IIFE pattern ensures that script-defined values are scoped to the function that the IIFE creates, so there isn't a risk of values colliding in the global namespace.\n Load non-critical resources on interaction\n Your page might contain code for a component or resource that isn't always used. You can load these resources using an import on interaction pattern to avoid loading, parsing, and executing unnecessary code.\n Defer loading your JavaScript bundle entirely until a user interacts with the parts of your app that require the bundle.\n Minimize your bundle size\n To optimize performance, the app entry point should amount to less than 10KB of JavaScript and less than 50KB of CSS on a page, and load itself on interaction. Make sure that you optimize your bundle sizes by minimizing your code.\n A store's theme is responsible for user interactivity. Your app should change the theme only slightly. If you need to inject more JavaScript, then make sure it loads without blocking the browser.\n Include remote stylesheets after inline JavaScript tags\n Browsers can't render a page until the stylesheets are downloaded, parsed, and applied. Inline script tags run only after the stylesheets are loaded. When a remote stylesheet is included before an inline script tag, the stylesheet blocks the script tag from running.\n Always include the inline script tags before the stylesheets, like in the following example:\n 1 <script>console.log('hello world')</script>\n 2 <link href=\"//example.com/app-css.css\" rel=\"stylesheet\">\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Include a viewport meta tag\n Avoid parser-blocking scripts\n Reduce your dependency on external frameworks and libraries\n Reduce JavaScript usage\n Avoid namespace collisions\n Load non-critical resources on interaction\n Minimize your bundle size\n Include remote stylesheets after inline JavaScript tags\n Updates & News\n Developer changelog\n Partner blog\n Engineering blog",
                    "filename": "docs/apps/best-practices/performance/general/content.txt",
                    "start_index": 0,
                    "end_index": 5567,
                    "start_line": 1,
                    "end_line": 60,
                    "max_line": 60,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Best practices\n Overview\n Sections and blocks\n Performance\n Overview\n Platform\n Accessibility\n Theme editor preview inspector\n Design\n Merchant stores\n Version control\n File transformation\n Deceptive code\n Integrating apps\n Product merchandising\n Performance best practices for Shopify themes\n Performance is an important factor for merchants when they choose a theme for their online store. When you build or customize a theme, you should build with performance in mind. Optimizing your theme for performance is key to the success of the merchants that you support and to the experiences of their customers. Performance directly influences conversion rates, repeat business, and search engine rankings.\n When a theme is submitted to the Shopify Theme Store, the theme's tested on a benchmark shop to determine its performance score. To be accepted into the Shopify Theme Store, a theme must have a minimum average lighthouse performance score of 60 across the home page, product page, and collection page. You can run a similar test on your theme using a development store.\n Learn more about performance testing for themes in the Shopify Theme Store.\n Note\n Shopify built Dawn with performance in mind. You can explore the Dawn repository to see how Shopify applies these principles.\n Optimizing for performance\n Consider the following best practices for optimizing the performance of your theme.\n Optimize your JavaScript\n Optimize the JavaScript in your theme using the following principles.\n Reduce JavaScript usage\n Consider building your theme using primarily HTML and CSS. JavaScript shouldn't be required for the basic functionality of your theme, such as finding or purchasing products. Instead, you should only use JavaScript as a progressive enhancement, and only where there is no HTML or CSS solution available.\n CSS parses and renders much faster than JavaScript, so wherever possible, you should use CSS features for building interactivity. You can find more information on the internet by searching the phrase \u201cusing CSS instead of JavaScript\u201d. One example is the blog 5 things you can do with CSS instead of JavaScript by Juan Mart\u00edn Garc\u00eda.\n Your minified JavaScript bundle size should be 16 KB or less. Shopify automatically minifies JavaScript when it's requested by the storefront.\n Avoid namespace collisions\n Namespaces allow you to place variables into unique containers so that you can prevent collisions in the global scope. However, JavaScript minifiers rename JavaScript variables to be shorter, which can cause collisions.\n To avoid namespace collisions in the global scope, wrap JavaScript values in a function scope. Values defined in a function scope are available only within the scope of that function, so there's no risk of collision with other variables that are defined on the global scope.\n The following example shows you how to wrap minified and renamed JavaScript variables in a function scope:\n 1 (function () {\n 2\n    var a; function b() {}\n 3 })();\n For example, the Immediately Invoked Function Expression (IIFE) pattern is a JavaScript function that runs as soon as it's defined. The IIFE pattern ensures that script-defined values are scoped to the function that the IIFE creates, so there isn't a risk of values colliding in the global namespace.\n Note\n Scripts injected in themes should always be wrapped in an IIFE to prevent global namespace collisions.\n Reduce your dependency on external frameworks and libraries\n If you need to use JavaScript, consider avoiding introducing third-party frameworks, libraries, and dependencies. Instead, use native browser features and modern DOM APIs whenever possible. Including JavaScript libraries in your package can lead to large bundle sizes, slow load times, and a poor experience for customers. Frameworks such as React, Angular, and Vue, and large utility libraries such as jQuery have significant performance costs. Avoid introducing polyfill libraries for very old browsers (anything that doesn't support async/await). If you use a browserslist, then you can target browsers with a > 1% marketshare.\n Avoid parser-blocking scripts\n Parser-blocking scripts block the construction and rendering of the DOM until the script is loaded, parsed, and executed. They also create congestion on the network and significantly delay page rendering. This impacts metrics like First Contentful Paint and Largest Contentful Paint. Use defer or async attributes on your script tags to avoid this.\n Preload key resources, defer or avoid loading others\n Preloading resources allows the browser to download resources before they are discovered. Choosing to load some resources later and using system resources helps you to reduce the size of the initial package of resources that needs to be downloaded before a customer can meaningfully interact with the page.\n Use resource hints to preload key resources\n You can add up to two resource hints to your code per template by using one of the following:\n The preload_tag filter\n The preload keyword argument on the stylesheet_tag or image_tag filters\n When Shopify renders a page with preload instructions, it will send a preload resource hint as a Link header on subsequent requests.\n You should use resource hints sparingly. For example, consider preloading only render-blocking stylesheets that are needed for initial functionality of the page, such as above-the-fold content.\n Lazy load below-the-fold images\n Load images only when they're needed on a page, and consider using placeholders until customers scroll down the page. This can also help with perceived performance as the page looks like it\u2019s loading quicker than it actually is. Rather than using a library, you should pass a loading: 'lazy' attribute to your image tag using the image_tag filter:\n 1 {{ settings.favicon | image_url: width: 200 | image_tag: loading: 'lazy' }}\n Anything that appears above the fold shouldn't be lazy-loaded. Above-the-fold content is the content a viewer sees on page load before they scroll down the page. Above-the-fold resources should be considered critical assets, and should be loaded normally.\n Tip\n For a more complex example using responsive images, refer to Use responsive images.\n Load non-critical resources on interaction\n Your page might contain code for a component or resource that isn't always used. You can load these resources using an import on interaction pattern to avoid loading, parsing, and executing unnecessary code.\n Consider using a system font\n Using a system font avoids the client needing to download another resource before the online store's text can be rendered.\n Host assets on Shopify servers\n Deliver as much as you can from the Shopify content delivery network (CDN). Using the same host for your assets avoids unnecessary HTTP connections and allows the server to prioritize delivery of blocking resources using HTTP/2 prioritization.\n In a Shopify context, you can do this by adding your assets to the theme's /assets folder, either manually by using the GitHub Integration, or by using the Asset REST Admin API resource. You can create links to these assets using URL filters. Learn more about the Shopify CDN.\n Use responsive images\n Viewing large images on a small device can be frustrating and can slow down page load speed. Using responsive images automatically resizes them to fit the device screen that customers are using.\n Specifying an image size ensures that you download the smallest possible image without degrading quality. The storefront requests the image size that\u2019s going to be displayed, and then cuts down the file size downloaded from the CDN. This reduces reliance on browser-side scaling.\n You can add responsive images to your theme by using the image_tag filter. This filter returns a srcset for the image using a smart default set of widths. You can adjust the srcset sizes that the filter returns using the sizes keyword argument.\n Input\n 1 {{ product.featured_image | image_url: width: 2000 | image_tag }}\n Output\n 1 <img\n 2\n    src=\"//cdn.shopify.com/s/files/1/0251/7476/9720/files/.png?v=1580676830&amp;width=2000\"\n 3\n    alt=\"\"\n 4\n    srcset=\"//cdn.shopify.com/s/files/1/0251/7476/9720/files/teal-polo.png?v=1580676830&amp;width=352 352w,\n 5\n            //cdn.shopify.com/s/files/1/0251/7476/9720/files/teal-polo.png?v=1580676830&amp;width=832 832w,\n 6\n            //cdn.shopify.com/s/files/1/0251/7476/9720/files/teal-polo.png?v=1580676830&amp;width=1200 1200w,\n 7\n            //cdn.shopify.com/s/files/1/0251/7476/9720/files/teal-polo.png?v=1580676830&amp;width=1920 1920w\"\n 8\n    width=\"2000\"\n 9\n    height=\"2007\">\n Optimize Liquid code\n You can edit almost all of the Liquid that is used to render your store. There are efficient and inefficient ways of writing Liquid code. Doing complex operations repeatedly can increase your Liquid render time, which impacts your overall store speed.\n For example, if you want to order the products in a collection by price, you should do that before you loop through the products in your collection, and not as part of the loop code. This is because the order of the products does not change for each product, and calculating the order of the products adds processing time to the request.\n Run the Shopify Theme Inspector for Chrome to identify the lines of code that are slowing down pages in your online store. Read a walkthrough of analyzing your Liquid using this tool on the Shopify Engineering blog.\n Use Theme Check to identify performance issues\n You can use Theme Check to identify possible performance issues in your theme code, including large CSS and JS bundles, references to remote assets, and parser-blocking JavaScript. Learn more about Theme Check.\n Testing for performance\n Shopify offers a Web Performance Dashboard & Reports that helps you to understand the performance of your store. This tool helps you can understand how your store performs across industry standards for loading speed, interactivity, and visual stability, better known as Core Web Vitals. The Web Performance Dashboard & Reports is calculated using Real User Monitoring (RUM) data and aims to provide you with a reliable performance signal and actionable insights on how to improve.\n Note\n The following queries are currently available only in the unstable version of the GraphQL Admin API.\n You also have access to PerformanceMetrics and PerformanceEvents to obtain web performance metric data and Shopify event data.\n Tip\n Learn more about web performance and core web vitals.\n Since real user data is needed here, you may still choose to use Lighthouse performance scores on shops with no / low traffic. You can run Lighthouse audits manually or using CI, or you can review the speed scores of stores that you manage.\n Run a Lighthouse audit using Shopify data\n Use the following process to emulate the tests that Shopify runs to determine an online store's speed score. Shopify runs a similar test against themes before they are accepted into the Shopify Theme Store. You can run a similar test against your theme to understand how it performs.\n Create a development store.\n Import the test product csv to the store. The store should have no other collections, products, or variants.\n In your development store, beside Online Store, click the eye icon to preview your store.\n From the preview URL, copy the value of the _bt parameter.\n If your preview URL doesn't have a _bt parameter, then your development store might have been created before August 2020. To learn how to find a preview URL for these stores, refer to Development stores created before August 2020.\n Get the URLs for the pages that you want to audit. You should test the home page (h), any product page (p), and any collection page (c).\n Append your theme's _bt value to the end of each URL.\n For example, the url https://{shop}.myshopify.com/products/sunglasses becomes https://{shop}.myshopify.com/products/sunglasses?_bt=value-you-copied.\n Visit Google Lighthouse, and follow the steps to run a report for each of your pages. Note the mobile score for each page.\n Apply this formula to your results: [(p * 31) + (c * 33) + (h * 13)] / 77. The result is your theme's speed score.\n Development stores created before August 2020\n If your development store was created before August 2020, then follow these steps to get preview links to test:\n On the Themes page of your development store, choose the theme that you want to test.\n Click Actions > Preview. A preview of the theme opens.\n At the bottom right of the page, in the preview bar, click Share Preview. A modal will open with your preview url.\n In the modal, click Copy link.\n For each page that you want to test, replace the base URL with the preview URL.\n For example, to test the sunglasses product, you might change the URL from https://{shop}.myshopify.com/products/sunglasses to https://12345678.shopifypreview.com/products/sunglasses.\n Tip\n You can repeat this process multiple times and use the median of the scores to get a more accurate result.\n Use Lighthouse CI to catch performance issues early\n If you use a continuous integration (CI) process for your themes during development, then you can add a CI check to make sure that changes to your theme code don't have a significant negative impact to your performance score. You can do so using the Shopify Lighthouse CI GitHub action, a Shopify-developed GitHub action that uploads your theme code to a benchmark shop and then measures and calculates your speed score.\n Review managed stores' performance\n You can review the performance of the stores that you manage on the Store Performance page in your Shopify Dashboard. You can access this page by logging into your Partner Dashboard, navigating to the Stores page, then clicking View store performance. Learn more about the Store Performance page.\n Next steps\n Learn about theme accessibility best practices\n Submit your theme to the Shopify Theme Store\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Optimizing for performance\n Testing for performance\n Next steps\n Updates & News\n Developer changelog",
                    "filename": "docs/themes/best-practices/performance/content.txt",
                    "start_index": 0,
                    "end_index": 14077,
                    "start_line": 1,
                    "end_line": 140,
                    "max_line": 140,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Billing\n App Store\n Admin, installation, and OAuth performance\n These guidelines apply to apps in the Shopify admin only.\n Tip\n Apps that meet all the mandatory criteria on this page, and meet other applicable criteria, are eligible for Built for Shopify status in the Shopify App Store.\n Improve your app's loading performance\n Loading performance is an important part of the user experience when using apps in the Shopify admin. When your app is slow to load, it dissuades users from adopting it, increases bounce rates, and decreases overall usage.\n You can also improve your app's loading experience by minimizing visual noise, such as layout shifts, and clearly indicating loading progress. As a result, users will perceive your app as faster and more responsive, even if the loading time doesn't change. Refer to the Polaris best practices for loading for a complete guide on designing a high-quality experience.\n Measure your app's loading performance\n Shopify uses Web Vitals to measure your app's performance in the Shopify admin. Each time a user loads your app, we gather and save the Web Vitals metrics in order to better understand the user experience. To learn more about Web Vitals, you can refer to the introduction on web.dev\n Note\n To enable Shopify to gather Web Vitals metrics, you might need to update your version of App Bridge.\n For apps that use App Bridge 2.x, you need to use version 2.2.0 or higher.\n For apps that use App Bridge 3.x, you need to use version 3.2.0 or higher.\n Where possible, you should use version 3.2.0 or higher.\n Updating your app to a version that supports admin performance tracking is a prerequisite to reaching Built for Shopify status.\n To measure your app's performance, we recommend adding Web Vitals to your app, capturing the performance with an analytics tool, and analyzing the aggregated data from user visits to your app. Though measuring Web Vitals on your device can be a useful tool for debugging issues, the data can differ significantly from what users experience when they use your app. To ensure that you provide users with an outstanding app experience, you should measure and monitor user loading experiences with your app as well.\n Tip\n The Shopify admin uses an iFrame to display your app. Most local tools that measure Web Vitals metrics, such as Lighthouse, don't accurately measure pages inside of iFrames. To use these tools to debug your app, run the app outside of the Shopify admin.\n The web-vitals package used by Shopify measures your app's performance each time a merchant launches your app through any route. If you use another tool to measure your page's performance, then it might take measurements more frequently. For example, some tools might measure the performance of each navigation between pages of your app. This can cause discrepancies between the values displayed in the Partner Dashboard and the metrics gathered by these tools.\n To add Web Vitals to your app, install it from npm or load the package from a CDN.\n 1 npm install web-vitals\n Then, you can import the core Web Vitals metrics and call each function to log the resulting metrics to your own analytics service. Detailed usage information and additional diagnostic tools can be found on the web-vitals GitHub page.\n 1 import {onCLS, onFID, onLCP} from 'web-vitals';\n 2\n 3 function sendToAnalytics(metric) {\n 4\n     //add code to send the metric to your analytics service\n 5 }\n 6\n 7 onCLS(sendToAnalytics);\n 8 onFID(sendToAnalytics);\n 9 onLCP(sendToAnalytics);\n Largest Contentful Paint\n Largest Contentful Paint (LCP) measures the time from when a user begins loading your page to when the largest image or block of text is displayed. It tracks how quickly your app can display its main content to users.\n Mandatory\n 75% of the time, your app should have a Largest Contentful Paint of 2.5 seconds or less, measured over a 30 day period.\n First Input Delay\n First Input Delay (FID) measures your app responsiveness to users' input. It measures the time from when a user interacts with your page to when your app begins processing the response to that interaction.\n Mandatory\n 75% of the time, your app should have a First Input Delay of 100 milliseconds or less, measured over a 30 day period.\n Cumulative Layout Shift\n Cumulative Layout Shift (CLS) measures your app's visual stability. Unstable user interfaces can be frustrating for users, especially when an element, such as a button, that they're trying to interact with moves suddenly. Cumulative Layout Shift quantifies these kinds of disruptive experiences so you can identify and remove them.\n Enable optimized loading on mobile devices\n By default, the Shopify Mobile app opens apps in an iFrame that's hosted from the Shopify admin. Each time an app is launched, the Shopify admin site must be re-loaded, which adds a significant amount of time to the app's load. With optimized loading enabled, the Shopify Mobile app loads the app directly inside of a native WebView, which significantly reduces the load time.\n Mandatory\n Your app must have optimized loading on mobile devices enabled.\n Load Shopify App Bridge from your app bundle for redirects\n Shopify offers an option to load Shopify App Bridge from Shopify CDN. However, for optimal performance, you should load App Bridge from your app bundle instead. Loading Shopify App Bridge from your app bundle increases the chance that the user's browser can access this code from the cache rather than downloading it. This can make your app more performant.\n For an example of loading Shopify App Bridge from the app bundle, refer to this page in the Node app template.\n Optimize your OAuth flow\n Because authorization is the first interaction that users have with your app UI, you should make sure that it's a positive experience. Follow these best practices for optimizing your OAuth performance to make your app authorization process smoother, faster, and more polished.\n Shopify strongly recommends you use the Remix app template, which already has OAuth implemented, and API libraries that include methods that simplify the implementation process. Using the Remix app template helps to ensure that your implementation is complete, and that your app follows our OAuth best practices that are outlined here. You can build an app using the Remix app template by initializing an app using Shopify CLI. For more information, refer to Create an app.\n If you don't want to use an app template, then you can use the same API libraries that the templates use to implement OAuth in your own app, or you can implement OAuth yourself. To follow Shopify best practices, all embedded apps should use the grant type called token exchange. Token exchange is a more efficient way to authorize embedded apps, and requires only a session token to be exchanged for an access token. This eliminates the need for multiple redirects, and improves performance. To use token exchange, you need to update your app to use Shopify CLI to manage your app's configuration. Doing so will automatically enable Shopify managed installation for your app, dramatically improving the user experience for installation and scope updates and eliminating the need for your app to handle these flows.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Improve your app's loading performance\n Optimize your OAuth flow",
                    "filename": "docs/apps/best-practices/performance/admin/content.txt",
                    "start_index": 0,
                    "end_index": 7344,
                    "start_line": 1,
                    "end_line": 60,
                    "max_line": 60,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Billing\n App Store\n Checkout performance\n These guidelines apply only to apps that provide live shipping rates at checkout.\n The response time of your shipping app impacts a customer's experience at checkout, and therefore, the app user's success. You can improve the response time of your app by limiting and optimizing calls to external systems, optimizing your app's hosting, and storing backup carrier rates to avoid blocking the checkout.\n Tip\n Apps that have a fast response time and low error rate, and meet other applicable criteria, are eligible for Built for Shopify status in the Shopify App Store.\n Limit calls to retrieve carrier rates\n Many shipping rate apps aggregate rates for multiple shipping carriers so they can offer users rate shopping functionality. To increase performance, you should limit or eliminate external calls to carriers to retrieve these rates.\n If carrier retail rates are stable, then you can store them internally to avoid external calls. For carrier rates that are dynamic or user-specific, consider caching.\n Cache carrier rates\n For carrier rates that are dynamic or user-specific, consider building a caching layer for carrier rates.\n While not every call to a given carrier will result in the same response, you can identify common response patterns and, based on the pattern, define a cache key.\n For example, if a carrier responds with identical shipping rates for a specific origin postal code, destination postal code, and total weight, you can create a matching cache pattern and key:\n Shipping rate data\n 1 {\n 2\n   destination_address: {\n 3\n     country_code: \"CA\",\n 4\n     province_code: \"QC\",\n 5\n     city: \"Montreal\",\n 6\n     address1: \"address 1\",\n 7\n     address2: \"address 2\",\n 8\n     address3: \"address 3\",\n 9\n     postal_code: \"K2K2K2\"\n 10\n   },\n 11\n   origin_address: {\n 12\n     country_code: \"CA\",\n 13\n     province_code: \"ON\",\n 14\n     city: \"Toronto\",\n 15\n     address1: \"address 1\",\n 16\n     address2: \"address 2\",\n 17\n     address3: \"address 3\",\n 18\n     postal_code: \"C3C3C3\"\n 19\n   },\n 20\n   items: [\n 21\n     {\n 22\n       id: 1,\n 23\n       name: 'item1',\n 24\n       weight: 1\n 25\n     }\n 26\n   ]\n 27 }\n Cache pattern\n 1 #{carrier_name}_#{origin_postal_code}_#{destination_postal_code}_#{total_items_weight}\n Key\n 1 shopify_post_C3C3C3_K2K2K2_1\n Your implementation might look like the following:\n Analyze external call response data, and identify any patterns across various use cases.\n Store responses for similar requests in a memory database, such as Redis, so that the cache can be retrieved quickly when new requests come in.\n When requests hit the cache, consider making an external request in the background to validate the accuracy of the cache, and update it with new information if required.\n Analyze your cache hit and miss ratio, and the frequency of response changes for the same requests.\n Parallelize and set timeouts for calls to external systems\n If calls to external systems such as carriers can't be avoided, and you're fetching rates from multiple external systems, then you should make calls to external systems in parallel to reduce the overall response time.\n When you parallelize calls, your app\u2019s response time will be at least as long as the slowest response time. To avoid a timeout, and to avoid blocking the Shopify checkout, you should set an internal timeout that cancels your request to the external system if it fails to respond. You can then return a subset of shipping rates to Shopify so the customer can proceed with checkout.\n Optimize server hosting\n Part of your overall response time is latency between your app server and Shopify servers.\n The impact of latency varies between regions. Shopify servers are hosted on Google Cloud. Different levels of latency apply by region. To learn more, refer to the Google Cloud inter-region latency matrix.\n You can use cURL to calculate your request and response time and understand the impact of hosting:\n Create new file called curl-format.txt with the following content:\n 1 time_namelookup:     %{time_namelookup}s\\n\n 2 time_connect:        %{time_connect}s\\n\n 3 time_appconnect:     %{time_appconnect}s\\n\n 4 time_pretransfer:    %{time_pretransfer}s\\n\n 5 time_redirect:       %{time_redirect}s\\n\n 6 time_starttransfer:  %{time_starttransfer}s\\n\n 7\n                       ----------\\n\n 8 time_total:          %{time_total}s\\n\n In a terminal, run the following command, where http://url/ is the address of one of the Shopify stores your application is installed on. The command returns timings for your request:\n Terminal\n $ curl -w \"@curl-format.txt\" -o /dev/null -s \"http://url/\"\n Example response\n 1 time_namelookup:     0.326604s\n 2 time_connect:        0.467748s\n 3 time_appconnect:     0.000000s\n 4 time_pretransfer:    0.467986s\n 5 time_redirect:       0.000000s\n 6 time_starttransfer:  0.584812s\n 7\n                        ----------\n 8 time_total:          0.584852s\n Repeat this step with stores that are located in different regions.\n If your connection time is significantly higher than the Google Cloud inter-region latency, then consider the following actions:\n Change your hosting provider to Google Cloud to take advantage of an optimized infrastructure.\n Move your application to a region closer to the majority of Shopify stores using your application.\n Implement backup rates\n To avoid blocking the checkout when a call to an external system times out or otherwise fails, you should implement backup rates for your shipping rate app. You should store these rates somewhere they can be quickly fetched when needed. These backup rates can act as an alternative to Shopify backup rates, when a user has them enabled. Implementing backup rates specific to your app leads to a better app user and customer experience, as rates are closer to those returned by your app.\n Backup rates don't need to match external carrier rates exactly, but should be close enough to avoid significantly impacting profitability and conversion. To make your backup rates as accurate as possible, you can base them on historic rates that you've received from carriers.\n You can implement backup rates using the following steps:\n Define logic for your backup rates. For example, you might store one expensive and fast and one cheap and slow shipping rate for a given city or country, for a given weight range, or for a given size range.\n Analyze the response data from external systems to determine the backup rates for each logical grouping.\n Store the backup rates in an easily accessible datastore. The datastore should be able to return the rates quickly.\n The following is an example set of backup rates for domestic orders in Canada. Rates differ based on order weight only.\n Example backup rates\n 1 rate_definitions:\n 2\n    -\n 3\n      name: Standard\n 4\n      price: 0\n 5\n      currency: CAD\n 6\n      rate_class_id: 10\n 7\n      conditions:\n 8\n        -\n 9\n          field: total_price\n 10\n          criteria: 100\n 11\n          criteria_unit: CAD\n 12\n          operator: greater_than_or_equal_to\n 13\n    -\n 14\n      name: Standard\n 15\n      price: 14.90\n 16\n      currency: CAD\n 17\n      conditions:\n 18\n        -\n 19\n          field: total_weight\n 20\n          criteria: 2.0\n 21\n          criteria_unit: kg\n 22\n          operator: less_than_or_equal_to\n 23\n    -\n 24\n      name: Standard\n 25\n      price: 21.90\n 26\n      currency: CAD\n 27\n      conditions:\n 28\n        -\n 29\n          field: total_weight\n 30\n          criteria: 2.0\n 31\n          criteria_unit: kg\n 32\n          operator: greater_than_or_equal_to\n 33\n        -\n 34\n          field: total_weight\n 35\n          criteria: 30.0\n 36\n          criteria_unit: kg\n 37\n          operator: less_than_or_equal_to\n 38\n    -\n 39\n      name: Express\n 40\n      price: 21.90\n 41\n      currency: CAD\n 42\n      conditions:\n 43\n        -\n 44\n          field: total_weight\n 45\n          criteria: 2.0\n 46\n          criteria_unit: kg\n 47\n          operator: less_than_or_equal_to\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Limit calls to retrieve carrier rates\n Parallelize and set timeouts for calls to external systems\n Optimize server hosting\n Implement backup rates\n Updates & News",
                    "filename": "docs/apps/best-practices/performance/checkout/content.txt",
                    "start_index": 0,
                    "end_index": 8185,
                    "start_line": 1,
                    "end_line": 220,
                    "max_line": 220,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Best practices\n Overview\n Sections and blocks\n Performance\n Overview\n Platform\n Accessibility\n Theme editor preview inspector\n Design\n Merchant stores\n Version control\n File transformation\n Deceptive code\n Integrating apps\n Product merchandising\n The Shopify platform\n Learn about the infrastructure that Shopify provides to make the online store, and your theme, faster.\n Shopify CDN\n Shopify provides merchants a world class content delivery network (CDN) backed by Cloudflare. Using a CDN means that your online store will load quickly around the globe.\n Files delivered over the Shopify CDN are minified and compressed automatically using Brotli and gzip, reducing the size of the files the browser must download. Requests use HTTP/3 and TLS 1.3 to further enhance request performance and security.\n Most asset URLs are rendered using the domain cdn.shopify.com. In certain cases, such as images or stylesheets loaded on a storefront, assets are loaded using the storefront domain, in the format {shop}.myshopify.com/cdn. This is done to improve performance by maximizing connection reuse in the browser.\n Short delays for images in your store\n Using a CDN means that all of your online store images are cached at thousands of servers around the world. When you make changes to your images, Shopify informs the CDN that the images have changed. To do this, Shopify uses the asset_url filter, which automatically appends version numbers to all of the URLs that it generates. For example, a version number appended to the end of a url might look like this: ?v=1384022871.\n If you link to an image without using the asset_url filter and upload a new version of the same image, then the image on your online store might not change to the new version for a day or more.\n CSS syntax to ensure automatic updates\n If you reference an image directly in your CSS, then the url will be static and will not carry the asset version that Shopify updates automatically.\n To make sure that your images are automatically updated, change your CSS syntax to include the asset_url filter.\n For example, if your CSS looks like this:\n 1 background: url(bg.gif);\n then change it to look like this:\n 1 background: url({{ 'bg.gif' | asset_url }});\n Server-side rendering\n Storefront Renderer (SFR) is a server-side renderer that handles storefront requests. SFR is dedicated to serving storefront requests as fast as possible.\n Our storefront renderer significantly improves performance for cache misses - instances where a page or other requested data isn\u2019t found in the cache memory and has to be retrieved from other cache levels or the main memory.\n Minification\n Shopify automatically minifies CSS files, as well as JavaScript files that uses valid syntax to ES5, when they're requested by the storefront. Minified JavaScript and CSS files are cached until the next time the file is updated.\n Minification allows the browser to download less data, resulting in shorter load times.\n Shopify delivers the original version of a JavaScript or CSS file if it meets one of the following criteria:\n The minified file would be larger than the original file. This might happen if a file is already minified with better compression.\n It has the extension .min.js or .min.css.\n Tip\n Minification might remove debugger statements from code. To debug your code, you can temporarily change your file extension to .min.js or .min.css.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Shopify CDN\n Server-side rendering\n Minification\n Updates & News\n Developer changelog",
                    "filename": "docs/themes/best-practices/performance/platform/content.txt",
                    "start_index": 0,
                    "end_index": 3538,
                    "start_line": 1,
                    "end_line": 50,
                    "max_line": 50,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Billing\n App Store\n App performance best practices and guidelines\n Performance is an important factor for users when they choose apps. When you build an app, you should build with performance in mind.\n Optimizing your app for performance is key to the success of the users that you support and to the experiences of their customers. Performance directly influences conversion rates, repeat business, and search engine rankings.\n Performance and the Shopify App Store\n To be published in the Shopify App Store, your app must not reduce storefront Lighthouse performance scores by more than 10 points.\n Apps that don't significantly reduce storefront Lighthouse performance scores, and that meet all of the mandatory Shopify admin and Checkout performance criteria are eligible for Built for Shopify status. To qualify for Built for Shopify status, your app must not reduce Lighthouse performance scores by more than ten points, and must meet other applicable criteria.\n Best practice guides\n Review the following guides to learn how to measure and improve your app performance in general, and in specific areas of Shopify that your app might interact with.\n General performance best practices\n Review general best practices for improving the performance of any Shopify app.\n Shopify admin, installation, and OAuth performance\n Improve the performance of apps embedded in the Shopify admin, and for your OAuth flow.\n Storefront performance\n Measure and optimize for storefront performance, and learn how Shopify measures an app's impact on storefront performance.\n Checkout performance\n Optimize the performance of shipping rate apps, and avoid blocking checkout.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Performance and the Shopify App Store\n Best practice guides\n Updates & News\n Developer changelog",
                    "filename": "docs/apps/best-practices/performance/content.txt",
                    "start_index": 0,
                    "end_index": 1807,
                    "start_line": 1,
                    "end_line": 25,
                    "max_line": 25,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Overview\n Requirements\n App review process\n Built for Shopify\n Overview\n Achievement criteria\n Losing your status\n App success\n App listing visibility\n App revenue share\n Data protection\n App Store ads\n Security\n Built for Shopify\n More and more merchants join Shopify every day. They rely on apps to help them start, grow, and run their business effectively.\n We've developed a set of quality standards that help app developers to make high-quality apps for merchants: apps that are easy to use, safe, and performant, and help solve merchant problems. Each standard has an impact on the merchant and customer experience, and the success of a merchant\u2019s store.\n To determine whether you meet our app quality standards, we evaluate your app using specific, actionable criteria. Apps that meet all of these criteria are eligible for Built for Shopify status. Along the way, you can qualify for smaller achievements that grant you more limited benefits, such as indicators of high quality on your app listing, special merchandising, or opportunities for promotion on various Shopify surfaces.\n Most criteria for Built for Shopify and intermediate achievements are automatically evaluated, while others require you to apply for evaluation. Some achievements are automatically granted, while others require you to apply for inclusion. You can check whether your app meets the criteria for Built for Shopify on the Distribution page for the app in your Partner Dashboard.\n Achievement criteria\n Explore the criteria that you need to meet to earn Built for Shopify status and other achievements.\n Built for Shopify status\n Built for Shopify status is the highest level of recognition and achievement that an app can reach. Built for Shopify apps receive additional promotion in the Shopify App Store, and are eligible for promotion on other key merchant surfaces.\n Note\n You need to apply for Built for Shopify status. You can apply for Built for Shopify status anytime. Benefits take effect and become visible to merchants in the first half of 2023. There's no deadline to apply.\n When you achieve Built for Shopify status, your app receives the following promotional benefits:\n Built for Shopify highlight\n A highlight indicating your Built for Shopify status appears on the app listing page. The Built for Shopify highlight appears at the top of the highlights list.\n On your way to earning Built for Shopify status, your app might earn other standalone highlights, where applicable.\n Built for Shopify badge\n A Built for Shopify badge appears on your app card wherever it appears in the Shopify App Store. For example, the badge will be visible on your app listing, and on your app card in search results and category pages.\n Search ranking boost\n Built for Shopify apps appear higher in Shopify App Store search rankings. Built for Shopify apps are ranked higher than other apps with search ranking boosts. This benefit isn\u2019t exclusive to Built for Shopify apps.\n Eligible for promotion on the App Store homepage\n Your app is eligible to be recommended to merchants in the first collection that they see on the App Store homepage. This collection is personalized for each merchant, so your app isn't guaranteed to appear. This benefit isn\u2019t exclusive to Built for Shopify apps.\n Eligible for discovery through the Shopify admin\n You'll be eligible to be recommended to merchants in the Picked for you modal in the Shopify admin. This collection is personalized for each merchant, so your app isn't guaranteed to appear. This benefit isn\u2019t exclusive to Built for Shopify apps.\n Eligible to be featured in story pages\n Apps can be featured in story pages across various surfaces in the Shopify App Store, including the homepage, and in search, navigation, app categories, and the app\u2019s listing. Story pages from Shopify help to educate merchants about how your app can help their business, inspire merchants by showing what\u2019s possible with apps, and build trust by showing how real merchants succeed with apps. Being featured in a story page makes your app more visible, and more likely to be installed by merchants.\n Apply for Built for Shopify status\n To achieve Built for Shopify status, you need to apply for your app to be evaluated by Shopify.\n You can't apply for Built for Shopify status until you meet all of the prerequisite achievement criteria. These criteria are automatically evaluated on a regular basis.\n After the prerequisite criteria are met, you can apply from the Partner Dashboard:\n From the Partner Dashboard, go to Apps and then select your app from the list.\n From your app's overview page, click Distribution.\n In the Apply for Built for Shopify status section, click Apply now.\n Only team members with the Manage apps permission can submit applications for Built for Shopify status.\n The Shopify app review team will review your application, and will let you know if you need to address any issues before your application can be approved.\n You must fix each issue as it's raised by the app review team. If you fail the same criterion three times in a row, then your application is suspended and you won't be able to apply again for three months.\n Losing Built for Shopify status\n You can lose Built for Shopify status after it's granted if you fail to meet certain criteria on an ongoing basis. Learn more about why you might lose Built for Shopify status.\n Other achievements\n While you work toward Built for Shopify status, you can earn smaller achievements that grant you unique benefits:\n App highlights\n In the spotlight\n Story pages\n Increased visibility on key merchant surfaces\n App highlights\n When your app meets the relevant criteria, we display a highlight on your app listing. These highlights make it easier for merchants to identify high-quality apps. Depending on your app\u2019s functionality, it might qualify for the following app highlights:\n Built for your business: Works with the latest themes. This highlight tells users that your app is compatible with Online Store 2.0 themes. These apps are easy to install and enable, offer app block functionality where applicable, and uninstall cleanly.\n Built for your business: Use directly in Shopify admin. This highlight tells users that your app is embedded and offers a streamlined workflow.\n All apps are automatically assessed to determine whether they meet the criteria for the highlight on a regular basis. If you meet the criteria, then the highlight is automatically added to your app listing. You can check whether your app meets these criteria on the Distribution page of your Partner Dashboard.\n Note\n It might take a few days for the highlight to appear on your app listing after the criteria are met.\n In the spotlight\n In the spotlight is a curated collection of notable, high-quality apps that appears on the Shopify App Store homepage. Being featured in this section makes your app more visible, and more likely to be installed by merchants.\n When you meet the criteria for this achievement, your app becomes eligible to be promoted in the In the spotlight section. Our app review team selects eligible apps to be featured every week.\n Note\n Meeting the achievement criteria makes you eligible to be featured in the In the Spotlight section. Your app isn\u2019t guaranteed to be selected.\n Story pages\n Apps can be featured in story pages across various surfaces in the Shopify App Store, including the homepage, and in search, navigation, app categories, and the app\u2019s listing. Story pages from Shopify help to educate merchants about how your app can help their business, inspire merchants by showing what\u2019s possible with apps, and build trust by showing how real merchants succeed with apps. Being featured in a story page makes your app more visible, and more likely to be installed by merchants.\n Only apps that meet the following criteria are eligible to be featured in story pages. If your app meets all of the criteria for this achievement, then you can submit your app for consideration to be featured in editorial content.\n Note\n Meeting the achievement criteria makes your app eligible to be featured in story pages. Your app isn\u2019t guaranteed to be selected after it\u2019s submitted.\n Increased visibility on key merchant surfaces\n Shopify surfaces apps to merchants in many ways. Increased visibility makes your app more visible, and more likely to be installed by merchants.\n When you earn this achievement, you\u2019ll get a search ranking boost, and become eligible for promotion on key merchant surfaces, including:\n The first collection in the App Store homepage\n The Shopify admin Picked for you modal\n These surfaces are personalized for each merchant, so your app isn't guaranteed to appear.\n Quality standards\n We use the following standards to determine whether your app is high quality. Each standard has an impact on the merchant and customer experience, and the success of a merchant\u2019s store.\n Shopify offers specific, actionable criteria to meet these quality standards. When you meet certain criteria, your app becomes eligible for Built for Shopify status, and other achievements. Learn about the criteria that you need to meet to earn achievements.\n Safety, security, and reliability\n Merchants want to know that their apps are handling store data responsibly. Apps need to use certain APIs and extensions to ensure that they install and uninstall cleanly.\n Apps also need to meet all App Store requirements on an ongoing basis and uphold the Shopify API License and Terms of Use. There should be no outstanding infractions against the Partner Program Agreement.\n Performance\n Apps should perform quickly and at scale for merchants and their customers. We measure how embedded apps impact the performance of the Shopify admin. For a subset of apps, we also measure how your app impacts storefront and checkout performance.\n Ease of use\n Apps should be intuitive, seamless, and well-integrated into the Shopify admin.\n Proven usefulness\n We observe your app\u2019s usefulness to merchants on a regular basis, using a rolling time window. We automatically gauge usefulness based on how many merchants installed your app, the number of reviews, and your app\u2019s average rating.\n App info and benefits\n The app listing is your first point of contact with a merchant, and it's where they'll go to determine whether your app is right for them. Your app listing should be as complete as possible, and reflect your app's current functionality.\n Requesting a content size limit exception\n Theme app extensions are subject to file and content size limits. If your app has been granted Built for Shopify status, and you require an exception to the 100 KB Liquid size limit for a theme app extension, then you can file an app Liquid size limit exemption request.\n Increasing your app's Liquid size could potentially impact its performance. Regular monitoring and optimization is advised.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Built for Shopify status\n Other achievements\n Quality standards\n Requesting a content size limit exception\n Updates & News\n Developer changelog",
                    "filename": "docs/apps/store/built-for-shopify/content.txt",
                    "start_index": 0,
                    "end_index": 11078,
                    "start_line": 1,
                    "end_line": 105,
                    "max_line": 105,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Previous versions\n Remix app package\n Partner API\n Payments Apps API\n Function APIs\n Point of Sale app extensions\n Web pixel app extensions\n Marketing activities app extensions\n Product subscription app extensions\n Optimized loading on mobile devices\n To improve loading speeds for your app and offer your users a better mobile experience, you can enable mobile optimization on the Partner Dashboard.\n Note\n All apps automatically have optimized loading enabled for development and live stores as of December 5th, 2022.\n Requirements\n You've created a Partner account and a development store.\n You have the Shopify Mobile app installed on your mobile phone (ideally, iOS or Android).\n Test your app in your development store\n To enable optimized loading for your app:\n From your Partner Dashboard, click Apps.\n Click the name of your app.\n Click Configuration.\n In the App settings section, in the Embedded app home card, click Manage mobile optimization.\n Next to Optimized loading for testing on development stores, click Enable.\n Open the Shopify Mobile app, log into your development store, and launch your app. Your app should load faster and some UI elements, such as the title bar or product picker, will now provide native look and feel.\n Test your app thoroughly to ensure that all functionality is working as expected.\n Debug your app\n If you find that your app isn't behaving as expected while testing it in your development store, take the following steps:\n Familiarize yourself with how mobile-optimized loading works, and review the list of common issues and fixes.\n Debug your app (on iOS or Android) to uncover the root cause and fix the problem.\n If you can't determine the root cause, then ask a question on the Shopify APIs and SDKs section of the Shopify Community\n Enable mobile optimization in production\n If your app works as expected in your development environment, then you can enable mobile optimization in production with the following steps:\n From your Partner Dashboard, click Apps.\n Click the name of your app.\n Click Configuration.\n In the App settings section, in the Embedded app home card, click Manage mobile optimization.\n Next to Optimized loading for all users on live stores, click Enable.\n App users on Shopify Mobile will now get the optimized experience.\n How mobile-optimized loading works\n By default, embedded applications that are opened from the Shopify Mobile application run inside an iframe, hosted from the Shopify admin. Each time an application is launched, the Shopify admin site must be reloaded, adding a significant amount of time to the application\u2019s load.\n When you enable direct loading, the app is no longer loaded in an iframe inside of the Shopify admin. Instead, the Shopify Mobile app loads the application directly inside of a native WebView. In this mode, the Shopify App Bridge libraries automatically switch to communicate directly with the Shopify Mobile app. All of the same Shopify App Bridge functionality that is available on the Shopify Admin website is available in a native form in the mobile app.\n When you use Shopify App Bridge to create UI, such as a resource picker or a modal dialog, the app displays native Android or iOS versions of these elements. This helps create a more deeply integrated and higher-quality user experience for the app when used through the Shopify Mobile app.\n Common issues and fixes\n Issue Fix\n Using window.name or window.top to determine whether your app is running in embedded mode doesn't work. Use the isShopifyEmbedded utility, instead of accessing properties of the window object.\n Using React Portals to communicate between modal windows doesn't work. Use App Bridge's Modal API.\n Your app's backend redirects the user to the web version of Shopify Admin Have your app's backend redirect to the app home page and initialize App Bridge.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Requirements\n Test your app in your development store\n Debug your app\n Enable mobile optimization in production\n How mobile-optimized loading works\n Common issues and fixes\n Updates & News\n Developer changelog\n Partner blog\n Engineering blog",
                    "filename": "docs/api/app-bridge/optimized-loading/content.txt",
                    "start_index": 0,
                    "end_index": 4143,
                    "start_line": 1,
                    "end_line": 60,
                    "max_line": 60,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Overview\n Requirements\n App review process\n Built for Shopify\n Overview\n Achievement criteria\n Losing your status\n App success\n App listing visibility\n App revenue share\n Data protection\n App Store ads\n Security\n Losing Built for Shopify status\n Your app can lose Built for Shopify status if it fails to meet certain criteria on an ongoing basis.\n If your app loses Built for Shopify status, then you'll be notified by email, and through the Partner Dashboard.\n To learn about the criteria that your app isn't meeting anymore, view the criteria checklist on the Distribution page of your Partner Dashboard. You can also monitor the criteria checklist to see if your app is failing to meet any criteria before you lose your status.\n Criteria\n Shopify monitors the following criteria for all apps with Built for Shopify status.\n If your app fails to meet certain key criteria, then it will immediately lose Built for Shopify status. These key criteria ensure that your app meets our App Store requirements and uses the newest Shopify technologies. Failing to meet one of these criteria also might trigger an audit of your app.\n If your app fails to meet other criteria that track ongoing quality signals, then you have a 30 day grace period to meet the criteria again before your app loses Built for Shopify status. To determine whether your app is failing to meet any of these criteria, view the criteria checklist on the Distribution page of your Partner Dashboard.\n For more information about each of these criteria, refer to Achievement criteria.\n Criterion Comes into effect\n Good Partner standing Immediately\n Meets App Store requirements\n \n Your app fails this criterion if it fails an audit and is delisted. Immediately\n Uninstalls cleanly: uses theme app extensions Immediately\n App is embedded in the Shopify admin Immediately\n Minimizes impact on store speed After 30 days of failure\n Minimizes impact on checkout speed After 30 days of failure\n Admin performance: meets 75th percentile Web Vitals targets After 30 days of failure\n Minimum number of installs After 30 days of failure\n Minimum number of reviews After 30 days of failure\n Minimum app rating After 30 days of failure\n Complete, updated app listing form After 30 days of failure\n Regain Built for Shopify status\n You'll automatically regain Built for Shopify status as soon your app meets all of the criteria again. You don't need to reapply.\n After you regain Built for Shopify status, your app might be audited to ensure compliance with all manually assessed criteria, and ensure that the app meets all current App Store requirements.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Criteria\n Regain Built for Shopify status\n Updates & News",
                    "filename": "docs/apps/store/built-for-shopify/losing-status/content.txt",
                    "start_index": 0,
                    "end_index": 2715,
                    "start_line": 1,
                    "end_line": 45,
                    "max_line": 45,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                }
            ]
        },
        "mmr_code_snippets_initial": [
            {
                "code": "const settings = await SettingsService.getSettings({ shop });\n    const shopGraphqlPromise = shopify.graphql(taxesIncludedQuery);\n\n    // custom country restrictions for trueclassictees-com.myshopify.com, the\n    // allowedPostPurchaseCountries will be added to the database manually for now\n    // NOTE: mongoose will provide empty array by default if the document exists without\n    // the allowedPostPurchaseCountries field\n    if (\n        Array.isArray(settings.allowedPostPurchaseCountries) &&\n        settings.allowedPostPurchaseCountries.length > 0 &&\n        !settings.allowedPostPurchaseCountries.includes(destinationCountryCode)\n    ) {\n        return res.json({\n            upsells: null,\n            code: 'disallowed_shipping_country',\n            reason: 'Customer shipping address is not one of the allowed countries for post-purchase offers on this store.',\n        });\n    }\n\n    const productRecExcludedCollectionIds = settings.productRecExcludedCollectionIds ?? [];\n\n    // Replace placeholders with actual products. This needs to go before the product recommendation\n    // logic below so that we can recommend based off of most/least expensive and collection products.\n    await FunnelsService.replacePlaceholderProducts({\n        upsells,\n        lineItems,\n        shopifyService,\n        skipPlaceholderTypes: [OfferProductType.MOST_EXPENSIVE, OfferProductType.LEAST_EXPENSIVE],\n    });\n\n    /**\n     * TODO: This should account for collection placeholders.\n     * TODO: Refactor to avoid the need for the `didSkipIndividualProductInMultiProductOffer` variable.\n     */\n    FunnelsService.skipUpsellIfAnyProductInOffer({\n        upsells,\n        lineItems,\n        didSkipIndividualProductInMultiProductOffer,\n    });\n\n    await FunnelsService.replacePlaceholderProducts({\n        upsells,\n        lineItems,\n        shopifyService,\n        skippingReplacementCollectionIds: productRecExcludedCollectionIds,\n    });\n\n    // product recommendation\n    const orderItems = convertLineItemsToOrderProducts({ lineItems });\n    const productIdToRecommendFrom = getProductToRecommendFrom({ orderItems });\n    const productIdsInOriginalPurchase = orderItems.map((orderItem) => orderItem.productId);\n    const productRecProvider = getProductRecProvider({ productRecProvider: settings.productRecProvider });\n    const productRecommender = getProductRecommender({ productRecProvider });\n    const customAiRecExcludedProductIds = settings.customAiRecExcludedProductIds || [];\n    await replaceProductRecommendationPlaceholders({\n        upsells,\n        getRecommendedProducts: productRecommender,\n        productIdToRecommendFrom,\n        productIdsInOriginalPurchase,\n        shop,\n        customAiRecExcludedProductIds,\n        productRecExcludedCollectionIds,\n        shopifyService,\n        featureFlagMixAiWithNonAiFixIsEnabled: Boolean(user.featureFlags?.mixAiWithNonAiFixIsEnabled),\n    });",
                "filename": "web/server/src/modules/post-purchase-public/post-purchase-public.controller.ts",
                "start_index": 38127,
                "end_index": 41038,
                "start_line": 872,
                "end_line": 1415,
                "max_line": 1418,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "build-deploy-extensions:\n        name: Deploy Extensions\n        needs: [test-and-check]\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: actions/setup-node@v3\n              with:\n                  node-version: 18.16.1\n                  cache: 'yarn'\n            - name: Install Root Dependencies\n              run: yarn install\n            - name: Create 'shopify.app.toml'\n              run: echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\n            - name: Install Post-purchase Dependencies\n              run: yarn install:post-purchase\n            - name: Create post-purchase env file\n              run: echo \"export const HOST=\\\"${{ env.HOST }}\\\";\" > extensions/post-purchase/src/env.ts\n            - name: Install Utm Triggers Dependencies\n              run: yarn install:utm-triggers\n            - name: Create utm-triggers env file\n              run: echo \"export const HOST=\\\"${{ env.HOST }}\\\";\" > theme-app-extension-src/utm-triggers/src/env.ts\n            - name: Build utm-triggers bundle\n              run: cd theme-app-extension-src/utm-triggers && yarn build\n            - name: Set up Ruby\n              uses: ruby/setup-ruby@v1\n              with:\n                  ruby-version: 3.1.2\n            - name: Install Bundler Gem\n              run: gem install bundler\n            - name: Install cargo-wasi\n              run: cargo install cargo-wasi\n            - name: Deploy\n              env:\n                  SHOPIFY_CLI_PARTNERS_TOKEN: ${{ secrets.SHOPIFY_CLI_PARTNERS_TOKEN }}\n                  SHOPIFY_API_KEY: ${{ env.SHOPIFY_API_KEY }}\n                  COMMIT_URL: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}\n              run: yarn deploy -f ${{ github.ref == 'refs/heads/production' && '--no-release' || '' }} --source-control-url \"$COMMIT_URL\"",
                "filename": ".github/workflows/cicd.yml",
                "start_index": 3741,
                "end_index": 5608,
                "start_line": 85,
                "end_line": 122,
                "max_line": 122,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<Banner\n                                title=\"Claim your 7-day free trial\"\n                                action={{\n                                    content: 'Claim free trial',\n                                    external: true,\n                                    url: 'https://apps.shopify.com/upcart-cart-builder?source=aftersell-app-upcart-landing-page',\n                                    onAction: () => {\n                                        setShowBanner(false);\n                                    },\n                                }}\n                                onDismiss={() => setShowBanner(false)}\n                            >\n                                Get started with UpCart right away at zero risk.\n                            </Banner>\n                        </Card>\n                    )}\n                </Layout.Section>\n                <Layout.Section fullWidth>\n                    <CustomMediaCard imgSrc={BannerImage}>\n                        <VerticalStack gap=\"2\" inlineAlign=\"start\">\n                            <HorizontalStack gap=\"2\" blockAlign=\"center\">\n                                <img style={{ width: '64px', height: '100%', borderRadius: '6px' }} src={IconImage} />\n                                <VerticalStack>\n                                    <Text as=\"h4\" variant=\"headingMd\">\n                                        UpCart \u2014 Cart Drawer & Upsell\n                                    </Text>\n                                    <Text as=\"span\" variant=\"bodyMd\" color=\"subdued\">\n                                        by AfterSell\n                                    </Text>\n                                </VerticalStack>\n                            </HorizontalStack>\n                            <VerticalStack>\n                                <Reviews title={''} />\n                                <Text as=\"span\" variant=\"bodyMd\" color=\"subdued\">\n                                    5.0 (400+ Reviews)\n                                </Text>\n                            </VerticalStack>\n                            <Text as=\"p\" variant=\"bodyMd\">\n                                UpCart is a great addition to AfterSell. Create an on-brand slide cart that boosts AOV\n                                pre-purchase.\n                            </Text>\n                            <Button\n                                external\n                                url=\"h",
                "filename": "web/client/src/pages/upcart-ad/upcart-ad.page.tsx",
                "start_index": 3655,
                "end_index": 6090,
                "start_line": 103,
                "end_line": 146,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "const getPageIdentifier = (shopifyObj) => {\n        const sessionName = 'aftersell-external-partner-last-order-id';\n        const shopifyOrderId = shopifyObj.checkout.order_id;\n        const checkoutStep = shopifyObj.Checkout.step;\n        const checkoutUpdatedAt = new Date(shopifyObj.checkout.updated_at);\n        try {\n            if (checkoutStep === 'thank_you') {\n                window.localStorage.setItem(sessionName, shopifyOrderId);\n                return orderConfirmationPageIdentifier;\n            }\n            const lastOrderId = window.localStorage.getItem(sessionName);\n            if (lastOrderId && lastOrderId === String(shopifyOrderId)) {\n                return orderStatusPageIdentifier;\n            } else {\n                window.localStorage.setItem(sessionName, shopifyOrderId);\n            }\n        } catch (err) {\n            // ignore if there is issue with accessing localStorage\n        }\n        const currentTime = new Date();\n        const checkoutUpdatedAtPlusOneMinute = new Date(checkoutUpdatedAt.getTime() + 1000 * 120);\n        return checkoutUpdatedAtPlusOneMinute > currentTime\n            ? orderConfirmationPageIdentifier\n            : orderStatusPageIdentifier;\n    };\n\n    async function main() {\n        injectPlaceholders();\n        if (window.Shopify && window.Shopify.checkout && window.Shopify.Checkout) {\n            const shopifyObj = window.Shopify;\n            const attributes = await getAttributes(shopifyObj);\n            const identifier = getPageIdentifier(shopifyObj);\n            initRokt(accountId, attributes, identifier);\n        }\n    }\n    main();\n}",
                "filename": "web/widgets/src/apps/widgets/aftersell-network/index.ts",
                "start_index": 7761,
                "end_index": 9378,
                "start_line": 201,
                "end_line": 237,
                "max_line": 237,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "async function incrementCheckoutRevisionNumber({ shop, accessToken }) {\n    const { revisionNumber } = await CheckoutRevisionNumberModel.findOneAndUpdate(\n        { shop },\n        { shop, $inc: { revisionNumber: 1 } },\n        { upsert: true, new: true }\n    );\n    const appDiscountsQuery = await fetch(`https://${shop}/admin/api/2023-04/graphql.json`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-Shopify-Access-Token': accessToken,\n        },\n        body: JSON.stringify({\n            query: `{\n                automaticDiscountNodes(first: 25, query: \"status:active AND type:app\") {\n                    nodes {\n                        automaticDiscount {\n                            __typename\n                            ... on DiscountAutomaticApp {\n                                discountId\n                            }\n                        }\n                    }\n                }\n            }`,\n        }),\n    }).then((res) => res.json());\n    const ownerIds = appDiscountsQuery.data?.automaticDiscountNodes.nodes\n        .filter((node) => node.automaticDiscount.__typename === 'DiscountAutomaticApp')\n        .map((node) => node.automaticDiscount.discountId);\n    await fetch(`https://${shop}/admin/api/2023-04/graphql.json`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-Shopify-Access-Token': accessToken,\n        },\n        body: JSON.stringify({\n            query: `mutation MetafieldsSet($metafields: [MetafieldsSetInput!]!){\n                metafieldsSet(metafields: $metafields) {\n                    metafields {\n                        id\n                    }\n                }\n            }`,\n            variables: {\n                metafields: ownerIds.map((ownerId) => ({\n                    ownerId,\n                    namespace: '$app:upsell-offer-discount-function',\n                    key: 'private-checkout-revision-number',\n                    value: String(revisionNumber),\n                    type: 'integer',\n                })),\n            },\n        }),\n    }).then((res) => res.json());\n}",
                "filename": "web/server/src/modules/checkout-widgets/checkout-widgets.controller.ts",
                "start_index": 1714,
                "end_index": 3876,
                "start_line": 52,
                "end_line": 185,
                "max_line": 185,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n    const discountCodes = useDiscountCodes();\n    const cartLines = useCartLines();\n    const storage = useStorage();\n\n    const _applyCartLinesChange = useApplyCartLinesChange();\n    const safeApplyCartLinesChange = useCallback(\n        async (change: CartLineChange) => {\n            const error = await storage.read(STORAGE_ERROR_KEY);\n            if (error) {\n                // This is required to prevent repeatedly re-adding an out of stock item. When an out of stock item is\n                // added to checkout, the customer gets a popup saying that the item is out of stock the next time they\n                // change anything or try to complete checkout. If we keep trying to add an out of stock item, the customer\n                // will never be able to complete the checkout.\n                //\n                // There may be other errors that could block checkout that we haven't found, in those cases we should also\n                // stop trying whatever we're doing.\n                //\n                // TODO: we should inform the customer when errors occur (e.g., banner saying gift out of stock)\n                console.error('AfterSell GWP: skipping change due to previous error', { error, change });\n                return;\n            }\n            const result = await _applyCartLinesChange(change);\n            if (result.type === 'error') {\n                console.error('AfterSell GWP: change failed', { change, result });\n                await storage.write(STORAGE_ERROR_KEY, result.message);\n            }\n        },\n        [_applyCartLinesChange, storage]\n    );\n    const registerCorrectState = useCallback(async () => {\n        const error = await storage.read(STORAGE_ERROR_KEY);\n        if (error) {\n            // We clear the error when we reach a correct state so that we can try to apply changes again\n            // later if needed. This is most useful for merchant testing so that they don't need to clear\n            // local storage if an error happens.\n            //\n            // There are many errors that happen due to race conditions with Shopify's checkout extension\n            // APIs or incorrect data provided to our extension (e.g., empty line items). If one of these\n            // incorrect errors happens, we don't want to completely shut off GWP functionality. We can't\n            // be certain whether an error was real or not.\n            console.info('AfterSell GWP: clearing error because correct state was reached', { error });\n            await storage.delete(STORAGE_ERROR_KEY);\n        }\n    }, [storage]);\n\n    const discountCodeIsApplied = useMemo(\n        () => discountCodes.some((discount) => settings.discountCodes.includes(discount.code)),\n        [discountCodes, settings]\n    );",
                "filename": "extensions/checkout-gift-with-purchase/src/index.tsx",
                "start_index": 902,
                "end_index": 3664,
                "start_line": 1,
                "end_line": 89,
                "max_line": 163,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "async getAppEmbedStatus({\n        themeAppExtensionUuid,\n        appEmbedLiquidFileName,\n    }: {\n        themeAppExtensionUuid: string;\n        appEmbedLiquidFileName: string;\n    }): Promise<{ isEnabled: boolean; activationDeepLink: string }> {\n        const shopify = new Shopify.Clients.Rest(this.config.shop, this.config.accessToken);\n\n        const themesResponse = await shopify.get({\n            path: `themes`,\n        });\n        const themes = (themesResponse.body as any).themes as Theme[];\n\n        const mainTheme = themes.find((theme) => theme.role === 'main');\n        if (!mainTheme) return { isEnabled: false, activationDeepLink: '' };\n        const mainThemeId = String(mainTheme.id);\n\n        const mainThemeSettingsResponse = await shopify.get({\n            path: `themes/${mainThemeId}/assets`,\n            query: { 'asset[key]': 'config/settings_data.json' },\n        });\n        const mainThemeSettings = JSON.parse((mainThemeSettingsResponse.body as any).asset.value)\n            .current as ThemeSettings;\n\n        const appEmbedFileName = appEmbedLiquidFileName.replace('.liquid', '');\n        const appEmbedIsEnabled = Object.values(mainThemeSettings.blocks).some(\n            (block) => block.type.endsWith(`/blocks/${appEmbedFileName}/${themeAppExtensionUuid}`) && !block.disabled\n        );\n\n        const activationDeepLink = new URL(`https://${this.config.shop}/admin/themes/${mainThemeId}/editor`);\n        activationDeepLink.searchParams.append('context', 'apps');\n        activationDeepLink.searchParams.append('activateAppId', `${themeAppExtensionUuid}/${appEmbedFileName}`);\n\n        return { isEnabled: appEmbedIsEnabled, activationDeepLink: activationDeepLink.toString() };\n    }\n\n    async getActiveRecurringCharge(): Promise<ActiveRecurringChargeRest | null> {\n        const shopify = new Shopify.Clients.Rest(this.config.shop, this.config.accessToken);\n        const recurringChargesResponse = await shopify.get({\n            path: `recurring_application_charges`,\n            query: { fields: 'id,name,status,price,capped_amount' },\n        });\n        const recurringCharges = (recurringChargesResponse.body as any)\n            .recurring_application_charges as RecurringCharge[];\n        const activeRecurringCharge = recurringCharges.find((charge) => charge.status === 'active');\n        return activeRecurringCharge ?? null;\n    }\n\n    /**\n     * Gets the metafield that is added to orders when a post-purchase upsell is accepted through AfterSell.\n     * If there is no metafield, returns null.\n     *\n     * This can be used to check if an order has a post-purchase upsell from AfterSell. If the metafield is non-null then the order\n     * has a post-purchase upsell from AfterSell.\n     */",
                "filename": "web/server/src/modules/shopify/shopify.service.ts",
                "start_index": 6320,
                "end_index": 9060,
                "start_line": 134,
                "end_line": 1200,
                "max_line": 1375,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "for (const chunkOfInventoryItemIds of chunkedInventoryItemIds) {\n        const p = XShopify.Rest.send(\n            XShopify.Rest.prepare(\n                XShopify.Rest.endpoints[\n                    'GET /admin/api/2023-04/inventory_levels.json?location_ids&inventory_item_ids&limit'\n                ],\n                {\n                    params: {\n                        creds: { shop: shopifyService.shop, accessToken: shopifyService.accessToken },\n                        query: {\n                            location_ids: allowedLocationIds.join(','),\n                            inventory_item_ids: chunkOfInventoryItemIds.join(','),\n                            limit: MAX_PAGE_SIZE,\n                        },\n                    },\n                    callerLocation: 'PostPurchase::CorrectInventoryCounts',\n                }\n            )\n        );\n        inventoryLevelPromises.push(p);\n    }\n    const inventoryLevelsResponses = await Promise.all(inventoryLevelPromises);\n    const inventoryLevels = inventoryLevelsResponses.map((response) => response.inventory_levels).flat();\n\n    for (const mut_product of mut_products) {\n        for (const mut_variant of mut_product.variants) {\n            const levels = inventoryLevels.filter((level) => level.inventory_item_id === mut_variant.inventory_item_id);\n            // There may be no levels tracked for this item if all locations in which it is stocked are excluded.\n            if (levels.length === 0) {\n                // mut\n                mut_variant.inventory_quantity = 0;\n            } else {\n                const tracksInventory = levels.every((level) => level.available !== null);\n                if (tracksInventory) {\n                    const countAtAllowedLocations = levels.reduce((acc, curr) => acc + curr.available, 0);\n\n                    // mut\n                    mut_variant.inventory_quantity = countAtAllowedLocations;\n                }\n            }\n        }\n    }\n}",
                "filename": "web/server/src/modules/post-purchase-public/post-purchase-public.controller.ts",
                "start_index": 50315,
                "end_index": 52275,
                "start_line": 1139,
                "end_line": 1418,
                "max_line": 1418,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "static async createAfterSellPlan({\n        sanitizedNewAfterSellPlan,\n    }: {\n        sanitizedNewAfterSellPlan: AfterSellPlan;\n    }): Promise<Result> {\n        const validationResult = BillingValidationService.validateAfterSellPlanLogic({\n            sanitizedAfterSellPlan: sanitizedNewAfterSellPlan,\n        });\n        if (!validationResult.isValid) {\n            return {\n                success: false,\n                reason: validationResult.reason,\n            };\n        }\n        const createPlanResult = await AppendOnlyAfterSellPlansService.createPlan(sanitizedNewAfterSellPlan);\n        return createPlanResult;\n    }\n\n    static async getPossibleFeaturesForUser({\n        shopifyService,\n    }: {\n        shopifyService: ShopifyService;\n    }): Promise<AfterSellPaidFeature[]> {\n        const possibleFeatures: AfterSellPaidFeature[] = [AfterSellPaidFeature.POST_PURCHASE];\n        const hasCheckoutExtensibilityStoreAccess = await shopifyService.getHasCheckoutExtensibilityAccess();\n        if (hasCheckoutExtensibilityStoreAccess) {\n            possibleFeatures.push(AfterSellPaidFeature.CHECKOUT);\n        }\n        return possibleFeatures;\n    }\n\n    private static convertRestRecurringChargeToShopifyCharge(\n        recurringChargeRest: ActiveRecurringChargeRest\n    ): ShopifyChargeToValidate {\n        return {\n            chargeName: recurringChargeRest.name,\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: Number(recurringChargeRest.price),\n            },\n            maxMonthlyUsageAmount: recurringChargeRest.capped_amount ? Number(recurringChargeRest.capped_amount) : 0, // default to 0 if capped_amount is undefined\n        };\n    }\n}",
                "filename": "web/server/src/modules/billing/legacy-billing-v2.service.ts",
                "start_index": 14194,
                "end_index": 15893,
                "start_line": 318,
                "end_line": 360,
                "max_line": 360,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export const shopRedact = async (req, res) => {\n    res.sendStatus(200);\n\n    const shop = req.get('x-shopify-shop-domain');\n\n    await Promise.allSettled([\n        /**\n         * Merchant personal data\n         */\n        // Online sessions may include names/emails of employees in `onlineAccessInfo`\n        SessionModel.deleteMany({ shop, isOnline: true }),\n        User.updateOne(\n            { myshopify_domain: shop },\n            {\n                // Specific location data could be identifiable, so we will remove it to be safe.\n                // We do not need to remove province and country since these could not identify any individual.\n                // Note that this is supposed to be the business address, but the merchant could have entered\n                // their home address here so we will remove it just in case.\n                address1: null,\n                address2: null,\n                zip: null,\n                city: null,\n                latitude: null,\n                longitude: null,\n\n                // Note that these are supposed to be the business contacts, but they could still be personally\n                // identificable based on the format (e.g., john.doe@company.com) so we will remove them to be safe.\n                customer_email: null,\n                email: null,\n                importantAccountEmail: null,\n                adsNetworkEmail: null,\n                phone: null,\n\n                shop_owner: null,\n            }\n        ),\n\n        /**\n         * Customer personal data\n         */\n        // NOTE: this should match the list in the \"customers/redact\" webhook\n        EventsModel.deleteMany({ shop }), // customerId\n        JourneyLinkerModel.deleteMany({ shop }), // checkoutToken\n        PossibleHoldsModel.deleteMany({ shop }), // checkoutToken\n        ReplacementUpsellAttemptModel.deleteMany({ shop }), // checkoutToken\n        ScheduledHoldReleasesModel.deleteMany({ shop }), // orderId\n        ScheduledPartiallyPaidRemovalModel.deleteMany({ shop }), // orderId and other fields in orderEdit\n        StorefrontSessionModel.deleteMany({ shop }), // cartToken, checkoutToken, and customerTriggerData\n        TyImpressionDedupeModel.deleteMany({ shop }), // checkoutToken\n        VisibilityEventModel.deleteMany({ myshopifyDomain: shop }), // checkoutToken and payload in some cases\n        VisitedFunnelsModel.deleteMany({ shop }), // checkoutToken and customerId\n    ]);\n};\n\nexport const customersDataRequest = async (req, res) => {\n    res.sendStatus(200);\n    // We do not need to do anything here because there is no useful data to send to the merchant.\n    // The only customer personal data that we store are random identifiers (e.g., checkout tokens, customer\n    // ID numbers, etc). All of this data would have to be combined with other data that the store has to be\n    // useful, and the store already has that data so they will send it to the customer.\n};",
                "filename": "web/server/src/modules/webhooks/webhooks.controller.ts",
                "start_index": 13543,
                "end_index": 16483,
                "start_line": 318,
                "end_line": 378,
                "max_line": 378,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "reranked_doc_snippets_initial": [
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/server` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 999,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <!-- Shopify App Bridge [START] -->\n        <meta name=\"shopify-api-key\" content=\"%SHOPIFY_API_KEY%\" />",
                "filename": "web/client/index.html",
                "start_index": 38,
                "end_index": 156,
                "start_line": 4,
                "end_line": 6,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# [[[ --- CLIENT --- ]]]\nFROM node:18.16.1-alpine AS client\nARG SHOPIFY_API_KEY\nENV SHOPIFY_API_KEY=$SHOPIFY_API_KEY\nARG HOST\nENV HOST=$HOST\nARG NODE_ENV\nENV NODE_ENV=$NODE_ENV\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/client/package.json ./web/client/package.json\nCOPY web/client/yarn.lock ./web/client/yarn.lock\nRUN cd web/client && yarn install --frozen-lockfile --production=false\nCOPY extensions-web-common/package.json ./extensions-web-common/package.json\nCOPY extensions-web-common/yarn.lock ./extensions-web-common/yarn.lock\nRUN cd extensions-web-common && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY extensions/post-purchase ./extensions/post-purchase\nCOPY extensions-web-common/post-purchase ./extensions-web-common/post-purchase\nCOPY extensions-web-common/checkout ./extensions-web-common/checkout\nCOPY extensions-web-common/shared ./extensions-web-common/shared\nCOPY extensions-web-common/ty-page ./extensions-web-common/ty-page\nCOPY web/client ./web/client\nRUN cd web/client && yarn build\n\n# [[[ --- TY PAGE --- ]]]\nFROM node:18.16.1-alpine AS ty-page\nARG HOST\nENV HOST=$HOST\nWORKDIR /usr/src/app\nCOPY web/widgets/package.json ./web/widgets/package.json\nCOPY web/widgets/yarn.lock ./web/widgets/yarn.lock\nRUN cd web/widgets && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY web/widgets ./web/widgets\nRUN cd web/widgets && yarn build\n\n# [[[ --- SERVER --- ]]]\nFROM node:18.16.1-alpine AS server\nWORKDIR /usr/src/app\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=false\nCOPY web/server ./web/server\nCOPY web/common ./web/common\nRUN cd web/server && yarn build\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM node:18.16.1-alpine AS final\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=true\nCOPY --from=server /usr/src/app/web/server/build ./web/server/build\nCOPY --from=ty-page /usr/src/app/web/widgets/dist ./web/server/build/server/dist\nCOPY --from=client /usr/src/app/web/client/dist ./web/server/build/server/dist/client\nCOPY package.json ./package.json\nCMD [\"yarn\", \"start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2514,
                "start_line": 1,
                "end_line": 61,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script defer src=\"./thankyoupage_bundle.js?v2\"></script>\n        <script defer src=\"/apps/aftersell_sdk.bundle.min.js?v2\"></script>\n    </head>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241237,
                "end_index": 241381,
                "start_line": 6073,
                "end_line": 6075,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<body class=\"aftersell-preview\">\n        <a href=\"#main-header\" class=\"skip-to-content\"> Skip to content </a>\n\n        <header class=\"banner\" data-header=\"\" role=\"banner\">\n            <div class=\"wrap\">\n                <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n            </div>\n        </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241387,
                "end_index": 241804,
                "start_line": 6077,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# AfterSell\n\n### All Docs on Notion \ud83d\udc49 [AfterSell Notion Docs](https://www.notion.so/aftersell/AfterSell-Docs-9d43566167b5426d86b5983925872953?pvs=4)",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 148,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Shopify Function development with Rust\n\n## Dependencies\n\n-   [Install Rust](https://www.rust-lang.org/tools/install)\n    -   On Windows, Rust requires the [Microsoft C++ Build Tools](https://docs.microsoft.com/en-us/windows/dev-environment/rust/setup). Be sure to select the _Desktop development with C++_ workload when installing them.\n-   Install [`cargo-wasi`](https://bytecodealliance.github.io/cargo-wasi/)\n    -   `cargo install cargo-wasi`\n-   On Macs with Apple Silicon, you'll also need to install the Binaryen toolchain and set the `WASM_OPT` environment variable. ([related issue](https://github.com/bytecodealliance/cargo-wasi/issues/112))\n    -   `brew install binaryen`\n    -   Add `export WASM_OPT=/opt/homebrew/bin/wasm-opt` to your `.bashrc` or `.zshrc`\n\n## Building the function\n\nYou can build this individual function using `cargo wasi`.\n\n```shell\ncargo wasi build --release\n```\n\nThe Shopify CLI `build` command will also execute this, based on the configuration in `shopify.function.extension.toml`.\n\n## Testing\n\n> Requires Node v16+\n\n1. Create a temporary JSON file (e.g., `a.json`) in the following format:\n\n```json\n{\n    \"data\": {\n        \"foo\": \"bar\"\n    },\n    \"secretKey\": \"abc123\"\n}\n```\n\n2. Run the following command\n\n```\nyarn test:new-hmac < a.json\n```\n\n3. Copy the generated HMAC into the test file",
                "filename": "extensions/upsell-offer-discount-function/README.md",
                "start_index": 0,
                "end_index": 1329,
                "start_line": 1,
                "end_line": 44,
                "max_line": 44,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<html\n    lang=\"en\"\n    dir=\"ltr\"\n    class=\"js desktop page--no-banner page--logo-main page--show page--show card-fields cors svg opacity placeholder no-touchevents displaytable display-table generatedcontent cssanimations flexbox no-flexboxtweener anyflexbox shopemoji floating-labels\"\n>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 0,
                "end_index": 289,
                "start_line": 1,
                "end_line": 6518,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script>\n            !(function (f, b, e, v, n, t, s) {\n                if (f.fbq) return;\n                n = f.fbq = function () {\n                    n.callMethod ? n.callMethod.apply(n, arguments) : n.queue.push(arguments);\n                };\n                if (!f._fbq) f._fbq = n;\n                n.push = n;\n                n.loaded = !0;\n                n.version = '2.0';\n                n.queue = [];\n                t = b.createElement(e);\n                t.async = !0;\n                t.src = v;\n                s = b.getElementsByTagName(e)[0];\n                s.parentNode.insertBefore(t, s);\n            })(window, document, 'script', 'https://connect.facebook.net/en_US/fbevents.js');\n            fbq('init', '895262111044943');\n            fbq('track', 'PageView');\n        </script>\n        <!-- End Facebook Pixel Code -->\n        <!-- Reddit Pixel -->\n        <script>\n            !(function (w, d) {\n                if (!w.rdt) {\n                    var p = (w.rdt = function () {\n                        p.sendEvent ? p.sendEvent.apply(p, arguments) : p.callQueue.push(arguments);\n                    });\n                    p.callQueue = [];\n                    var t = d.createElement('script');\n                    (t.src = 'https://www.redditstatic.com/ads/pixel.js'), (t.async = !0);\n                    var s = d.getElementsByTagName('script')[0];\n                    s.parentNode.insertBefore(t, s);\n                }\n            })(window, document);\n            rdt('init', 't2_dp3wj8bg');\n            rdt('track', 'PageVisit');\n        </script>\n        <!-- End Reddit Pixel -->\n\n        <!-- Dev HMR [START] -->\n        <script type=\"module\">\n            if (!import.meta.env || !import.meta.env.PROD) {\n                // For embedded development, the iframe loads an HTML file from the server. Normally for\n                // development, the HTML file is served by the dev server, which injects the HMR script.\n                // This script adds the HMR script to the iframe to allow HMR in embedded development.\n                const script = document.createElement('script');\n                script.setAttribute('type', 'module');\n                script.setAttribute('src', './src/dev-hmr.ts');\n                document.getElementsByTagName('head')[0].append(script);\n            }\n        </script>\n        <!-- Dev HMR [END] -->\n\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com/\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" crossorigin=\"anonymous\" />\n        <link\n            href=\"https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap\"\n        />\n    </head>",
                "filename": "web/client/index.html",
                "start_index": 6232,
                "end_index": 8924,
                "start_line": 7,
                "end_line": 178,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<aside class=\"sidebar\" role=\"complementary\">\n                    <div class=\"sidebar__header\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323196,
                "end_index": 323511,
                "start_line": 6285,
                "end_line": 6493,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<span class=\"order-summary-toggle__inner\">\n                        <span class=\"order-summary-toggle__icon-wrapper\">\n                            <svg\n                                width=\"20\"\n                                height=\"19\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__icon\"\n                            >\n                                <path\n                                    d=\"M17.178 13.088H5.453c-.454 0-.91-.364-.91-.818L3.727 1.818H0V0h4.544c.455 0 .91.364.91.818l.09 1.272h13.45c.274 0 .547.09.73.364.18.182.27.454.18.727l-1.817 9.18c-.09.455-.455.728-.91.728zM6.27 11.27h10.09l1.454-7.362H5.634l.637 7.362zm.092 7.715c1.004 0 1.818-.813 1.818-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817zm9.18 0c1.004 0 1.817-.813 1.817-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--show\">\n                            <span>Show order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"6\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M.504 1.813l4.358 3.845.496.438.496-.438 4.642-4.096L9.504.438 4.862 4.534h.992L1.496.69.504 1.812z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--hide\">\n                            <span>Hide order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"7\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M6.138.876L5.642.438l-.496.438L.504 4.972l.992 1.124L6.138 2l-.496.436 3.862 3.408.992-1.122L6.138.876z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span\n                            class=\"order-summary-toggle__total-recap total-recap\"\n                            data-order-summary-section=\"toggle-total-recap\"\n                        >\n                            <span class=\"total-recap__final-price\" data-checkout-payment-due-target=\"5073\">$50.73</span>\n                        </span>\n                    </span>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 242214,
                "end_index": 245205,
                "start_line": 6097,
                "end_line": 6446,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"main\">\n                    <header class=\"main__header\" role=\"banner\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245397,
                "end_index": 245703,
                "start_line": 6153,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"step__sections\">\n                                <div class=\"section\">\n                                    <div class=\"section__header os-header\">\n                                        <svg\n                                            width=\"56\"\n                                            height=\"56\"\n                                            viewBox=\"0 0 56 56\"\n                                            fill=\"none\"\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                            <circle cx=\"28\" cy=\"28\" r=\"26\" stroke=\"#E5E5E5\" stroke-width=\"2.29412\" />\n                                            <path\n                                                fill-rule=\"evenodd\"\n                                                clip-rule=\"evenodd\"\n                                                d=\"M22.4811 37.3603L16.3636 31.3947C15.5663 30.6172 15.5663 29.3605 16.3636 28.583C17.1609 27.8055 18.4497 27.8055 19.247 28.583L23.8066 33.0293L36.6493 18.7538C37.3834 17.9186 38.6701 17.8231 39.5225 18.537C40.379 19.2529 40.4789 20.5056 39.7448 21.3388L25.4706 37.2469C25.1015 37.6685 24.5672 37.9191 24.0003 37.9409C23.3825 37.9429 22.8625 37.7341 22.4811 37.3603Z\"\n                                                fill=\"#008060\"\n                                                stroke=\"#E5E5E5\"\n                                                stroke-width=\"0.764706\"\n                                            />\n                                        </svg>\n                                        <div class=\"os-header__heading\">\n                                            <span class=\"os-order-number\"> Order #1001 </span>\n                                            <h2 class=\"os-header__title\" id=\"main-header\" tabindex=\"-1\">\n                                                Thank you {{Customer Name}}!\n                                            </h2>\n                                        </div>\n                                    </div>\n                                </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245858,
                "end_index": 247957,
                "start_line": 6161,
                "end_line": 6451,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<svg\n                                                                    class=\"product-thumbnail__image\"\n                                                                    width=\"32\"\n                                                                    height=\"32\"\n                                                                    viewBox=\"0 0 32 32\"\n                                                                    fill=\"none\"\n                                                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                                                >\n                                                                    <path\n                                                                        fill-rule=\"evenodd\"\n                                                                        clip-rule=\"evenodd\"\n                                                                        d=\"M27.2 28.8C26.3184 28.8 25.6 28.0816 25.6 27.2C25.6 26.3184 26.3184 25.6 27.2 25.6C28.0816 25.6 28.8 26.3184 28.8 27.2C28.8 28.0816 28.0816 28.8 27.2 28.8ZM6.4 27.2C6.4 28.0816 5.6816 28.8 4.8 28.8C3.9184 28.8 3.2 28.0816 3.2 27.2C3.2 26.3184 3.9184 25.6 4.8 25.6C5.6816 25.6 6.4 26.3184 6.4 27.2ZM28.2656 9.34549L26.0464 15.9999H6.4V6.61269L28.2656 9.34549ZM27.2 22.4H6.4V19.2H27.2C27.8896 19.2 28.4992 18.76 28.7184 18.1056L31.9184 8.5056C32.0688 8.0512 32.0096 7.552 31.7536 7.1472C31.4976 6.7408 31.0736 6.472 30.5984 6.4128L6.4 3.3872V1.6C6.4 0.7168 5.6832 0 4.8 0H1.6C0.7168 0 0 0.7168 0 1.6C0 2.4832 0.7168 3.2 1.6 3.2H3.2V22.6944C1.3408 23.3584 0 25.1168 0 27.2C0 29.8464 2.1536 32 4.8 32C7.4464 32 9.6 29.8464 9.6 27.2C9.6 26.6352 9.4848 26.1024 9.3056 25.6H22.6944C22.5152 26.1024 22.4 26.6352 22.4 27.2C22.4 29.8464 24.5536 32 27.2 32C29.8464 32 32 29.8464 32 27.2C32 24.5536 29.8464 22.4 27.2 22.4Z\"\n                                                                        fill=\"#637381\"\n                                                                    />",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 326131,
                "end_index": 328135,
                "start_line": 6099,
                "end_line": 6353,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <meta charset=\"utf-8\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n        <meta\n            id=\"thankyoupage_viewport_meta\"\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, user-scalable=0\"\n        />\n        <meta name=\"referrer\" content=\"origin\" />\n\n        <title>Thank you! - Checkout</title>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 294,
                "end_index": 717,
                "start_line": 6,
                "end_line": 16,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"hidden\">\n                            <span class=\"visually-hidden\" id=\"forwarding-external-new-window-message\">\n                                Opens external website in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-new-window-message\">\n                                Opens in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-external-message\">\n                                Opens external website.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"checkout-context-step-one\">\n                                Customer information - Checkout\n                            </span>\n                        </div>\n                    </main>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 322226,
                "end_index": 323078,
                "start_line": 6265,
                "end_line": 6282,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<tbody class=\"total-line-table__tbody\">\n                                            <tr class=\"total-line total-line--subtotal\">\n                                                <th class=\"total-line__name\" scope=\"row\">Subtotal</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-subtotal-price-target=\"4299\"\n                                                    >\n                                                        $42.99\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--shipping\">\n                                                <th class=\"total-line__name\" scope=\"row\">\n                                                    <span> Shipping </span>\n                                                </th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-shipping-target=\"0\"\n                                                    >\n                                                        Free\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--taxes\" data-checkout-taxes=\"\">\n                                                <th class=\"total-line__name\" scope=\"row\">Taxes</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-taxes-target=\"774\"\n                                                        >$7.74</span\n                                                    >\n                                                </td>\n                                            </tr>\n                                        </tbody>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 333285,
                "end_index": 335837,
                "start_line": 6396,
                "end_line": 6433,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<table class=\"product-table\">\n                                            <caption class=\"visually-hidden\">\n                                                Shopping cart\n                                            </caption>\n                                            <thead class=\"product-table__header\">\n                                                <tr>\n                                                    <th scope=\"col\">\n                                                        <span class=\"visually-hidden\">Product image</span>\n                                                    </th>\n                                                    <th scope=\"col\">\n                                                        <span class=\"visually-hidden\">Description</span>\n                                                    </th>\n                                                    <th scope=\"col\"><span class=\"visually-hidden\">Quantity</span></th>\n                                                    <th scope=\"col\"><span class=\"visually-hidden\">Price</span></th>\n                                                </tr>\n                                            </thead>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 324035,
                "end_index": 325202,
                "start_line": 6298,
                "end_line": 6313,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "solution_task": {
            "structured_resp": "Clarify:\nThe issue is that the AfterSell Post Purchase Upsell app's Largest Contentful Paint (LCP) metric occasionally exceeds the 2.5-second threshold required for maintaining the \"Built for Shopify\" status. The goal is to review and implement changes to consistently reduce the LCP below 2.5 seconds.\n\nHypothesize:\n- The LCP issue could be related to heavy JavaScript execution, large images, or other large assets that take time to load.\n- The use of third-party libraries or frameworks that are not optimized for performance could be contributing to the LCP issue.\n- Network latency or server response times could be affecting the LCP.\n- Inefficient code or unoptimized assets within the app could be causing delays in rendering the largest contentful element.\n\nExperiment:\n- Review the codebase for heavy JavaScript files, large images, or other assets that could be optimized.\n- Check for the use of third-party libraries or frameworks and assess their impact on performance.\n- Analyze server response times and network latency issues.\n- Use performance profiling tools like Lighthouse to identify specific bottlenecks in the app's performance.\n\nAnalyze:\n- The provided documentation and code snippets do not directly indicate the cause of the LCP issue. However, the documentation suggests best practices for performance optimization, such as minimizing JavaScript bundle sizes, using async or defer attributes on script tags, and optimizing server hosting.\n- The code snippets provided do not show any obvious performance issues, but they do not include the full context of how assets are loaded or how JavaScript is executed on the client side.\n\nResolve:\n- Optimize images and other large assets to reduce their file size without compromising quality.\n- Minimize the JavaScript bundle size by removing unnecessary code, using tree shaking, and compressing the code.\n- Use the `async` or `defer` attributes on script tags to prevent parser-blocking JavaScript.\n- Implement code splitting to load JavaScript bundles only when needed.\n- Host assets on Shopify's CDN to reduce network latency and take advantage of HTTP/2 prioritization.\n- Use the `web-vitals` package to measure and monitor LCP and other performance metrics in production.\n- Review and potentially refactor the checkout-widgets.controller.ts and post-purchase-public.controller.ts logic to ensure efficient API calls and data handling.\n- If server response times are an issue, optimize the server's performance or consider moving to a hosting solution closer to the majority of users.\n- Apply the performance optimization strategies outlined in the Shopify documentation, such as using theme app extensions, avoiding parser-blocking scripts, and reducing dependency on external frameworks and libraries.\n- Investigate the changes made to the UpCart project that successfully resolved the LCP issue and consider applying similar strategies to the AfterSell app.",
            "response": "To maintain the \"Built for Shopify\" status, it is crucial to ensure that the AfterSell Post Purchase Upsell app consistently achieves a Largest Contentful Paint (LCP) metric below the 2.5-second threshold. The following steps are designed to optimize the app's performance, focusing on reducing load times and improving the user experience.\n\n- Compress and optimize images and other large assets to minimize their file sizes while maintaining visual quality.\n- Reduce the JavaScript bundle size by eliminating unnecessary code, employing tree shaking techniques, and applying code compression.\n- Modify script tags to include `async` or `defer` attributes, allowing non-critical JavaScript to load without blocking the parser.\n- Implement code splitting to ensure JavaScript bundles are loaded on-demand, reducing the initial load time.\n- Utilize Shopify's Content Delivery Network (CDN) for hosting assets to decrease network latency and leverage HTTP/2 features.\n- Integrate the `web-vitals` library to continuously measure and track LCP and other critical performance metrics in a live environment.\n- Examine and refine the logic within `checkout-widgets.controller.ts` and `post-purchase-public.controller.ts` to optimize API interactions and data processing.\n- If server response times are contributing to the LCP issue, enhance server performance or switch to a hosting provider that is geographically closer to the user base.\n- Follow Shopify's performance optimization guidelines, which include adopting theme app extensions, avoiding scripts that block the parser, and minimizing reliance on heavy external frameworks and libraries.\n- Review the modifications implemented in the UpCart project that positively impacted LCP and consider applying analogous tactics to the AfterSell app."
        },
        "snippet_processor_task": {
            "web/server/src/modules/post-purchase-public/post-purchase-public.controller.ts": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Code snippet involves handling post-purchase logic, product recommendations, and interacting with Shopify APIs in a TypeScript file.",
                        "snippet": {
                            "code": "const settings = await SettingsService.getSettings({ shop });\n    const shopGraphqlPromise = shopify.graphql(taxesIncludedQuery);\n\n    // custom country restrictions for trueclassictees-com.myshopify.com, the\n    // allowedPostPurchaseCountries will be added to the database manually for now\n    // NOTE: mongoose will provide empty array by default if the document exists without\n    // the allowedPostPurchaseCountries field\n    if (\n        Array.isArray(settings.allowedPostPurchaseCountries) &&\n        settings.allowedPostPurchaseCountries.length > 0 &&\n        !settings.allowedPostPurchaseCountries.includes(destinationCountryCode)\n    ) {\n        return res.json({\n            upsells: null,\n            code: 'disallowed_shipping_country',\n            reason: 'Customer shipping address is not one of the allowed countries for post-purchase offers on this store.',\n        });\n    }\n\n    const productRecExcludedCollectionIds = settings.productRecExcludedCollectionIds ?? [];\n\n    // Replace placeholders with actual products. This needs to go before the product recommendation\n    // logic below so that we can recommend based off of most/least expensive and collection products.\n    await FunnelsService.replacePlaceholderProducts({\n        upsells,\n        lineItems,\n        shopifyService,\n        skipPlaceholderTypes: [OfferProductType.MOST_EXPENSIVE, OfferProductType.LEAST_EXPENSIVE],\n    });\n\n    /**\n     * TODO: This should account for collection placeholders.\n     * TODO: Refactor to avoid the need for the `didSkipIndividualProductInMultiProductOffer` variable.\n     */\n    FunnelsService.skipUpsellIfAnyProductInOffer({\n        upsells,\n        lineItems,\n        didSkipIndividualProductInMultiProductOffer,\n    });\n\n    await FunnelsService.replacePlaceholderProducts({\n        upsells,\n        lineItems,\n        shopifyService,\n        skippingReplacementCollectionIds: productRecExcludedCollectionIds,\n    });\n\n    // product recommendation\n    const orderItems = convertLineItemsToOrderProducts({ lineItems });\n    const productIdToRecommendFrom = getProductToRecommendFrom({ orderItems });\n    const productIdsInOriginalPurchase = orderItems.map((orderItem) => orderItem.productId);\n    const productRecProvider = getProductRecProvider({ productRecProvider: settings.productRecProvider });\n    const productRecommender = getProductRecommender({ productRecProvider });\n    const customAiRecExcludedProductIds = settings.customAiRecExcludedProductIds || [];\n    await replaceProductRecommendationPlaceholders({\n        upsells,\n        getRecommendedProducts: productRecommender,\n        productIdToRecommendFrom,\n        productIdsInOriginalPurchase,\n        shop,\n        customAiRecExcludedProductIds,\n        productRecExcludedCollectionIds,\n        shopifyService,\n        featureFlagMixAiWithNonAiFixIsEnabled: Boolean(user.featureFlags?.mixAiWithNonAiFixIsEnabled),\n    });",
                            "filename": "web/server/src/modules/post-purchase-public/post-purchase-public.controller.ts",
                            "start_index": 38127,
                            "end_index": 41038,
                            "start_line": 872,
                            "end_line": 1415,
                            "max_line": 1418,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet is directly related to post-purchase logic and interactions with Shopify APIs, which could impact LCP performance."
                },
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Code snippet involves handling inventory logic based on locations and inventory items, with considerations for optimization and potential rate limits. Key areas include filtering locations, mapping inventory item IDs, chunking requests, and handling inventory level promises.",
                        "snippet": {
                            "code": "{\n    const user = await User.findOne({ myshopify_domain: shopifyService.shop });\n    const shouldUseImprovedInventory =\n        user.featureFlags?.improvedInventoryIsEnabled && user.additionalOauthScopes?.includes('read_inventory');\n    if (!shouldUseImprovedInventory) {\n        return;\n    }\n\n    const locationsQuery = await shopifyService.graphql.GetLocations();\n    const allowedLocationIds = locationsQuery.locations.nodes\n        // Exclude brick & mortar (physical) locations.\n        // See Linear issue BEAM-1508\n        .filter((loc) => loc.fulfillsOnlineOrders)\n        // Exclude locations that are specifically excluded by the merchant in settings.\n        // See Linear issue BEAM-1509\n        .filter((loc) => !(settings.excludedLocationIds || []).includes(loc.legacyResourceId))\n        .map((loc) => loc.legacyResourceId);\n    // This could be optimized by skipping checking inventory levels for items that do not track inventory,\n    // are already out of stock, or allow selling when out of stock. These changes would reduce the number\n    // of API calls required, but they add some complexity to the logic below so they are not implemented for now.\n    const inventoryItemIds = mut_products\n        .map((product) => product.variants.map((variant) => variant.inventory_item_id))\n        .flat();\n    // NOTE: this may end up making a LOT of API calls for offers with many products and many variants. This may cause\n    //       us to hit rate limits.\n    // NOTE: this API has pagination, but we do not use it because pagination forces sequential requests (need to wait\n    //       to get next link) which can cause very high latency (multiple seconds). Instead we chunk data such that\n    //       we keep the total result set size under 250. We would need to chunk requests anyways to avoid the 50 inventory\n    //       item id limit, so this solution is actually easier to implement since we can ignore pagination.\n    const MAX_QUERY_FILTER_SIZE = 50;\n    const MAX_PAGE_SIZE = 250;\n    assert(\n        allowedLocationIds.length <= MAX_QUERY_FILTER_SIZE,\n        `[${shopifyService.shop}] Too many locations. Expected store to have not more than ${MAX_QUERY_FILTER_SIZE} locations.`\n    );\n    const chunkedInventoryItemIds =\n        allowedLocationIds.length === 0\n            ? [] // prevent divide by 0 error\n            : chunkArray(\n                  inventoryItemIds,\n                  // create largest chunks possible, without exceeding either the max page size or the max query filter size\n                  Math.min(Math.floor(MAX_PAGE_SIZE / allowedLocationIds.length), MAX_QUERY_FILTER_SIZE)\n              );\n    const inventoryLevelPromises = [];",
                            "filename": "web/server/src/modules/post-purchase-public/post-purchase-public.controller.ts",
                            "start_index": 47622,
                            "end_index": 50310,
                            "start_line": 3,
                            "end_line": 1138,
                            "max_line": 1418,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet involves optimization considerations that could be relevant to improving LCP performance."
                }
            ],
            "web/client/src/pages/funnels/funnels-create.page.tsx": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Snippet provides details about discount offers, upsells, and downsells in the AfterSell app, including the use of Shopify's product recommendation API and thank you page extensibility.",
                        "snippet": {
                            "code": "{maxDiscount / 2}% off\n                            </Text>\n                            .\n                        </List.Item>\n                        <List.Item>\n                            Upsell #2: If the customer accepts the first offer, we will automatically recommend a\n                            multi-product offer of 4 products where they can accept 1 at{' '}\n                            <Text variant=\"headingSm\" as=\"span\">\n                                {maxDiscount}% off\n                            </Text>{' '}\n                            (this uses Shopify's product recommendation API).\n                        </List.Item>\n                        <List.Item>\n                            Downsell: If the customer declines the first offer, we will give them one more chance to\n                            accept the same product except this time at a higher discount of{' '}\n                            <Text variant=\"headingSm\" as=\"span\">\n                                {maxDiscount}% off\n                            </Text>\n                            .\n                        </List.Item>\n                    </List>\n                    <Text variant=\"bodyMd\" as=\"p\">\n                        After the 1-click offers, customers are redirected to the thank you page. This is an opportunity\n                        to further generate conversions:\n                    </Text>\n                    <List spacing=\"loose\">\n                        <List.Item>\n                            Storewide Popup Discount: Offer{' '}\n                            <Text variant=\"headingSm\" as=\"span\">\n                                {maxDiscount / 2}% off\n                            </Text>{' '}\n                            your entire store's catalog for only 20 minutes.\n                        </List.Item>\n                    </List>\n                    {hasTyPageExtensibilityAccess && (\n                        <Banner title=\"Thank you page extensibility\" status=\"warning\">\n                            <Text as=\"p\">\n                                Your store is eligible to use Shopify UI extensions on the thank you page. The Storewide\n                                Popup Discount is only supported using AfterSell's script tags and will not be shown to\n                                customers if you{' '}\n                                <Link\n                                    url={`https://${myshopify_domain}/admin/settings/checkout#upgradestatus`}\n                                    target=\"_blank\"\n                                >\n                                    have thank you page extensibility enabled\n                                </Link>\n                                .\n                            </Text>\n                        </Banner>\n                    )}\n                </VerticalStack>\n            </Modal.Section>\n            <Modal.Section>\n                <HorizontalStack align=\"end\" blockAlign=\"center\" gap=\"4\">",
                            "filename": "web/client/src/pages/funnels/funnels-create.page.tsx",
                            "start_index": 11579,
                            "end_index": 14544,
                            "start_line": 255,
                            "end_line": 308,
                            "max_line": 345,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet provides details on the use of Shopify's product recommendation API and thank you page extensibility, which may affect LCP times."
                }
            ],
            "web/server/src/modules/post-purchase/post-purchase.controller.ts": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Code snippet involves handling post-purchase logic, fetching offers, and preparing upsells based on product configurations and settings.",
                        "snippet": {
                            "code": "{\n    const { funnelId, offerType } = req.params;\n    const { isSplitTest: isSplitTestQuery } = req.query;\n    const { accessToken, shop } = req.session;\n\n    const shopifyService = new ShopifyService({ shop, accessToken });\n\n    const isSplitTest = isSplitTestQuery === 'true';\n\n    let offer;\n    if (isSplitTest) {\n        // TODO: figure out how to fix offer version validation so we can remove \"lean()\"\n        // - offers without an offer version do not work if we remove \"lean()\"\n        // - the offerVersion should be set to \"v1\" by default, but it seems like this default\n        //   value isn't being used for discrimination\n        const splitTest = await SplitTestsModel.findOne({ shop, funnelId: funnelId, upsellType: offerType }).lean();\n        offer = splitTest.offers[0];\n    } else {\n        // TODO: figure out why offers are failing validation when fetching so we can remove \"lean()\"\n        const funnel = await FunnelsModel.findOne({ _id: funnelId, shop }).lean();\n        offer = funnel[offerType];\n        if (!offer) {\n            // This is likely a race condition. If you have AfterSell open in two tabs and delete the offer in one tab,\n            // the other tab will still show the offer unless you refresh the page. If you go to the editor then the offer\n            // will not exist.\n            return res.status(404).json({\n                status: 'error',\n                message: 'Offer not found. This offer was likely deleted.',\n            });\n        }\n    }\n\n    const singleProductConfig = offer.template.find((widget) => widget.appId === 'productInformation');\n    if (singleProductConfig) {\n        const offerProduct = Array.isArray(offer.product) ? offer.product[0] : offer.product;\n        singleProductConfig.productId = offerProduct.id;\n    } else {\n        const hasCollection = offer?.product?.some((product) => product.productType === OfferProductType.COLLECTION);\n\n        if (hasCollection) {\n            const shopifyService = new ShopifyService({ shop, accessToken });\n\n            await FunnelsService.replacePlaceholderProducts({\n                upsells: { [offerType]: offer },\n                shopifyService,\n                settings: {\n                    savePlaceholders: true,\n                },\n            });\n        }\n    }\n\n    const settings = await SettingsService.getSettings({ shop });\n\n    const { fetchedProducts, fetchedProductInfoList } = await prefetchOfferProducts({\n        shopifyService,\n        settings,\n        offers: [offer],\n    });\n\n    const preparedOffer = await prepareUpsell({\n        token: accessToken,\n        store: shop,\n        upsell: offer,\n        settings,\n        isSubscriptionInCheckout: false,\n        allowPlaceholders: true,\n        allowOutOfStockAndNonActive: true,\n        allowUnmatchedReplacementUpsell: true,\n        inputDataToken: '',\n        offerType,\n        fetchedProducts,\n        fetchedProductInfoList,\n    });",
                            "filename": "web/server/src/modules/post-purchase/post-purchase.controller.ts",
                            "start_index": 2475,
                            "end_index": 5414,
                            "start_line": 2,
                            "end_line": 140,
                            "max_line": 147,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet is related to fetching offers and preparing upsells based on product configurations, which could influence LCP."
                }
            ]
        },
        "bouncer_response": {
            "score": 7,
            "criteria": "The RESPONSE provides a comprehensive list of actionable steps to address the LCP issue, including optimizing assets, reducing JavaScript bundle size, implementing code splitting, and utilizing Shopify's CDN. It also suggests integrating a library to measure performance metrics and reviewing the logic within specific controller files. Additionally, the RESPONSE provides direct links to code snippets that should be reviewed for potential optimizations. The advice is specific to the context of Shopify app development and addresses the need to reduce LCP to maintain the 'Built for Shopify' status.",
            "supporting_evidence": "The RESPONSE offers a detailed action plan that is relevant to the PROMPT's issue of reducing LCP. It includes specific technical recommendations that are actionable and directly related to web performance optimization. The inclusion of code snippets with direct links is particularly valuable as it guides the developers to the exact locations in the codebase that may require attention. The RESPONSE also leverages knowledge from previous successful optimizations (UpCart) and suggests applying similar strategies, which shows an understanding of the context and the importance of learning from past experiences. However, the RESPONSE could have been more explicit about the need to analyze the performance impact of each change, as reducing LCP often requires iterative testing and monitoring to identify the most effective optimizations. Additionally, while the RESPONSE is comprehensive, it does not provide a prioritized approach or a step-by-step plan, which could help the developers tackle the most critical issues first.",
            "clarification_questions": "NONE"
        },
        "end_time": 1714411803.5680242,
        "result": "To maintain the \"Built for Shopify\" status, it is crucial to ensure that the AfterSell Post Purchase Upsell app consistently achieves a Largest Contentful Paint (LCP) metric below the 2.5-second threshold. The following steps are designed to optimize the app's performance, focusing on reducing load times and improving the user experience.\n\n- Compress and optimize images and other large assets to minimize their file sizes while maintaining visual quality.\n- Reduce the JavaScript bundle size by eliminating unnecessary code, employing tree shaking techniques, and applying code compression.\n- Modify script tags to include `async` or `defer` attributes, allowing non-critical JavaScript to load without blocking the parser.\n- Implement code splitting to ensure JavaScript bundles are loaded on-demand, reducing the initial load time.\n- Utilize Shopify's Content Delivery Network (CDN) for hosting assets to decrease network latency and leverage HTTP/2 features.\n- Integrate the `web-vitals` library to continuously measure and track LCP and other critical performance metrics in a live environment.\n- Examine and refine the logic within `checkout-widgets.controller.ts` and `post-purchase-public.controller.ts` to optimize API interactions and data processing.\n- If server response times are contributing to the LCP issue, enhance server performance or switch to a hosting provider that is geographically closer to the user base.\n- Follow Shopify's performance optimization guidelines, which include adopting theme app extensions, avoiding scripts that block the parser, and minimizing reliance on heavy external frameworks and libraries.\n- Review the modifications implemented in the UpCart project that positively impacted LCP and consider applying analogous tactics to the AfterSell app.\n\n### Code snippets to check\n\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [server](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src) \u2192 [modules](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules) \u2192 [post-purchase-public](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/post-purchase-public)- [Lines 872 - 1415](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/post-purchase-public/post-purchase-public.controller.ts#L872-L1415)\n\n This snippet is directly related to post-purchase logic and interactions with Shopify APIs, which could impact LCP performance. \n\n\n   - [Lines 3 - 1138](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/post-purchase-public/post-purchase-public.controller.ts#L3-L1138)\n\n This snippet involves optimization considerations that could be relevant to improving LCP performance.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [client](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src) \u2192 [pages](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages) \u2192 [funnels](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/funnels)- [Lines 255 - 308](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/funnels/funnels-create.page.tsx#L255-L308)\n\n This snippet provides details on the use of Shopify's product recommendation API and thank you page extensibility, which may affect LCP times.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [server](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src) \u2192 [modules](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules) \u2192 [post-purchase](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/post-purchase)- [Lines 2 - 140](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/post-purchase/post-purchase.controller.ts#L2-L140)\n\n This snippet is related to fetching offers and preparing upsells based on product configurations, which could influence LCP."
    }
}