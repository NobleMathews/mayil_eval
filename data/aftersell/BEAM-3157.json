{
    "id": "BEAM-3157",
    "repo_name": "testbed/aftersell",
    "title": "Switch auth pattern to use EdgeGateway",
    "body": "\nUsing `Basic: base64(\"username:password\")`\n\nFrom the Rokt [EMBEDDED_LINK_1]:\n\n> The authentication has been updated to use EdgeGateway authentication. Edge Auth uses basic auth. Instead of sending the JWT as a bearer token, you are now required to send the Base64 encoded user ID as the Basic auth token. The user ID can be constructed by concatenating username and password with a colon (username:password). Both the username and password can be found under \u201csmb-integration AfterSell basic auth credential\u201d in 1Password.\n\nNew tokens available in [EMBEDDED_LINK_2]\n---\nGlossary:\ngithub_pr_1: The attachment is a screenshot of a GitHub pull request. The pull request is titled \"Update authentication method to EdgeGateway\" and is numbered 1024. The changes are being merged from a branch named \"feature/edge-auth-update\" into the main branch. The pull request has been submitted by a user with the handle \"devJaneDoe\".\n\nIn the screenshot, we can see that there are 4 files changed with a total of 27 additions and 3 deletions. The diff snippet visible in the screenshot shows modifications in a file named \"authService.js\". The changes include the removal of a line of code that sets an authorization header with a bearer token. This line is replaced with a new line that sets the authorization header using basic authentication with a Base64 encoded string.\n\nThe Base64 encoded string is constructed by concatenating a username and password with a colon, as per the new authentication requirements. The username and password variables are being retrieved from a configuration object, which is not fully visible in the screenshot.\n\nThe pull request has several comments from other team members. One comment from a user named \"codeReviewer42\" asks for clarification on whether the new authentication method has been tested with the EdgeGateway in a staging environment. Another comment from \"qaLeadEmily\" mentions that the QA team will need to update their test cases to accommodate the new authentication pattern.\n\nThe bottom of the screenshot shows that continuous integration checks are in progress, with some checks already completed successfully, indicated by green checkmarks, and others still pending, indicated by yellow circles.\n\nThe screenshot does not show any merge conflicts, and the pull request appears to be in a state where it is awaiting further review and approval from team members.\n\n",
    "classification": "other",
    "state": "closed",
    "repo_link": "https://github.com/testbed/aftersell.git",
    "requested_commit": null,
    "issue_tracker_identifier": "",
    "ai_cost": {
        "issue_classifier": 0.00039799999999999997,
        "issue_summarizer": 0.01472,
        "search_embedding": 6.357e-05,
        "documentation_agent": 0.0063300000000000006,
        "repo_summary": 0.09935300000000001,
        "issue_star_solver": 0.0940135,
        "snippet_processor": 0.018340000000000002,
        "bouncer": 0.025820000000000003
    },
    "attachments": [
        {
            "title": "chore(rokt): switch to basic auth [BEAM-3157]",
            "url": "https://github.com/beam-commerce/aftersell/pull/1116",
            "content": "",
            "placeholder_tag": "github_pr_1",
            "content_type": "ExternalAssetsType.GITHUB_PR"
        }
    ],
    "inline_assets": [],
    "linked_issue_ids": [],
    "comments": [],
    "issue_summary": "Error Messages: None provided.\n\nFunction and Variable Names:\n- authService.js (file modified)\n- Authorization header (code element modified)\n- username (variable used)\n- password (variable used)\n- configuration object (source of username and password, not fully visible)\n\nTechnical Descriptions:\n- Switch authentication to use EdgeGateway.\n- Basic auth pattern using `Basic: base64(\"username:password\")`.\n- Base64 encoded user ID sent as Basic auth token.\n- Username and password obtained from \"smb-integration AfterSell basic auth credential\" in 1Password.\n- New tokens available (location provided in embedded link).\n\nOutput Format:\n- GitHub pull request titled \"Update authentication method to EdgeGateway\", PR number 1024.\n- Branch \"feature/edge-auth-update\" merging into main branch.\n- 4 files changed, 27 additions, 3 deletions.\n- authService.js: Replaced bearer token with basic authentication using Base64 encoded string.\n- Comments from \"codeReviewer42\" asking about testing with EdgeGateway in staging.\n- Comment from \"qaLeadEmily\" on updating QA test cases for new auth pattern.\n- Continuous integration checks in progress, some successful, others pending.\n- No merge conflicts indicated, PR awaiting review and approval.",
    "repo_summary": "The software project is a web application divided into multiple modules such as `auth-webhooks`, `admin-stores`, `rokt`, `legacy-billing`, etc. The project uses TypeScript for server-side code and React for the client-side. It follows a modular structure with separate directories for different components like `web/server`, `web/client`, `extensions`, etc.\n\nThe `auth-webhooks` module handles authentication for webhooks using HMAC signatures. The `admin-stores` module manages access control for different stores. The `rokt` module interacts with the Rokt API for tasks like fetching payout invoices and updating payment methods. The `legacy-billing` module deals with initiating recurring charges and managing trial periods.\n\nThe project uses various dependencies like `express`, `jest`, `Shopify API`, `react`, `axios`, etc. It also includes configuration files like `.eslintrc`, `package.json`, and Docker-related files.\n\nThe issue at hand involves switching the authentication pattern to use `EdgeGateway` with basic authentication using a Base64 encoded user ID. The new authentication method requires sending the Base64 encoded user ID constructed by concatenating the username and password with a colon. The necessary credentials can be found under \"smb-integration AfterSell basic auth credential\" in 1Password. The changes are being made in the `authService.js` file as part of a GitHub pull request titled \"Update authentication method to EdgeGateway\" (#1024) submitted by `devJaneDoe`. The pull request involves modifying the authorization header to use basic authentication instead of a bearer token. The team is in the process of reviewing and testing the new authentication method in a staging environment.",
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1714258027.7198908,
        "classification": "other",
        "initial_code_snippets": [
            {
                "code": "export const reauthExpiredDashboardMiddleware = async (req, res, next) => {\n    // Ensure that we have both offline and online sessions. If either doesn't exist,\n    // we will redirect the user to the auth page to get the missing session.\n    let onlineTokenValid = false;\n    let offlineTokenValid = false;\n\n    //Parallelize the checking of offline and online tokens.\n    //Note: Could use promise.all here but if it fails we can't tell which one failed based on the res and this is required for the redirect route\n    getSessionIsValidWithUpdatedScopes(req.session)\n        .then((res) => {\n            if (res) {\n                offlineTokenValid = true;\n            } else {\n                res.status(403);\n                setReauthHeaders(req, res, '/auth/redirect/offline');\n                res.end();\n            }\n            if (onlineTokenValid && offlineTokenValid) {\n                next();\n            }\n        })\n        .catch(() => {\n            res.status(403);\n            setReauthHeaders(req, res, '/auth/redirect/offline');\n            res.end();\n        });\n    getSessionIsValidWithUpdatedScopes(req.onlineSession)\n        .then((res) => {\n            if (res) {\n                onlineTokenValid = true;\n            } else {\n                res.status(403);\n                setReauthHeaders(req, res, '/auth/redirect/online');\n                res.end();\n            }\n            if (onlineTokenValid && offlineTokenValid) {\n                next();\n            }\n        })\n        .catch(() => {\n            res.status(403);\n            setReauthHeaders(req, res, '/auth/redirect/online');\n            res.end();\n        });\n};\n\nasync function getSessionIsValidWithUpdatedScopes(session) {\n    if (!session || !session.shop || !session.accessToken) return false;\n    const shopifyService = new ShopifyService({ shop: session.shop, accessToken: session.accessToken });\n\n    const needsToUpdateScopes = await getNeedsToUpdateScopes(session);\n    if (needsToUpdateScopes) {\n        return false;\n    }\n\n    const { accessTokenIsValid } = await shopifyService.validateAccessToken();\n    if (!accessTokenIsValid) {\n        return false;\n    }\n    return true;\n}",
                "filename": "web/server/src/modules/auth-dashboard/auth-dashboard.middleware.ts",
                "start_index": 2875,
                "end_index": 5059,
                "start_line": 84,
                "end_line": 169,
                "max_line": 169,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "async function getNeedsToUpdateScopes(session) {\n    // We don't want to force updating scopes if the current session is an admin session. The admin\n    // won't be able accept the new scopes on the merchant's store, so they wouldn't be able to use\n    // the app.\n    // See Linear issue BEAM-851 for more details.\n    const isAdmin = Boolean(session.savedSessionBeforeAdmin);\n    if (isAdmin) {\n        return false;\n    }\n\n    const user = await UserModel.findOne({ myshopify_domain: session.shop }, { additionalOauthScopes: 1 });\n    const additionalScopes = user?.additionalOauthScopes;\n    const desiredScopes = additionalScopes\n        ? new AuthScopes([...Shopify.Context.SCOPES.toArray(), ...additionalScopes])\n        : Shopify.Context.SCOPES;\n    const hasUpdatedScopes = desiredScopes.equals(session.scope);\n    const needsToUpdateScopes = !hasUpdatedScopes;\n    return needsToUpdateScopes;\n}\n\nfunction setReauthHeaders(req, res, url) {\n    res.header('X-AfterSell-Reauth-Link', url); // old client\n    res.header('X-Shopify-API-Request-Failure-Reauthorize-Url', `${url}?shop=${req.shop}`); // new client (new app bridge)\n}",
                "filename": "web/server/src/modules/auth-dashboard/auth-dashboard.middleware.ts",
                "start_index": 5061,
                "end_index": 6196,
                "start_line": 146,
                "end_line": 169,
                "max_line": 169,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "// @ts-nocheck\nimport * as Sentry from '@sentry/node';\nimport { Shopify } from '@shopify/shopify-api';\nimport { AuthScopes } from '@shopify/shopify-api/dist/auth/scopes';\nimport jwt from 'jsonwebtoken';\nimport { envVar } from '../env';\nimport { ShopifyService } from '../shopify/shopify.service';\nimport UserModel from '../users/users.model';\n\nexport const authDashboardMiddleware = async (req, res, next) => {\n    const headerToken = req.get('Authorization');\n\n    if (!headerToken)\n        return res.status(401).json({\n            status: 'error',\n            auth: false,\n            error_type: 'NO_TOKEN',\n            message: 'No token provided',\n        });\n\n    const token = headerToken.split(' ')[1];\n\n    let decoded;\n\n    try {\n        // We need to add some tolerance to the NBF check because sometimes the token from Shopify\n        // has a NBF that is a few seconds in the future. This is likely due to some clock skew\n        // between the Shopify servers and our servers. We add 10 seconds of tolerance to the\n        // NBF check to account for this.\n        //\n        // 10 seconds was chosen because 1 second wasn't enough.\n        decoded = jwt.verify(token, envVar('SHOPIFY_API_SECRET'), { clockTolerance: 10 });\n    } catch (err) {\n        return res.status(401).json({\n            status: 'error',\n            auth: false,\n            error_type: 'TOKEN_MISMATCH',\n            message: \"Token can't be verified\",\n        });\n    }\n\n    let errorMessage;\n    const currentDate = new Date().getTime() / 1000;\n\n    const isExpInFuture = decoded.exp >= currentDate;\n    const isNbfInPast = decoded.nbf < currentDate;\n\n    const iss = new URL(decoded.iss).hostname;\n    const dest = new URL(decoded.dest).hostname;\n\n    if (!isExpInFuture) {\n        errorMessage = 'Token is expired';\n    } else if (!isNbfInPast) {\n        // This is already checked by the jwt.verify method. We needed to add some tolerance\n        // on the NBF check and we don't want to duplicate that logic. I believe all of this\n        // section may be redundant, but for now I'm only removing this one check.\n        //\n        //\n        // errorMessage = 'Token is not yet valid';\n    } else if (iss !== dest) {\n        errorMessage = 'Token issuer does not match the destination';\n    } else if (decoded.aud !== envVar('SHOPIFY_API_KEY')) {\n        errorMessage = 'Token does not match the Shopify API Key';\n    }\n\n    if (errorMessage) {\n        return res.status(401).json({\n            status: 'error',\n            auth: false,\n            error_type: 'TOKEN_MISMATCH',\n            message: errorMessage,\n        });\n    }\n\n    req.shop = dest;\n\n    // This adds the `shop` tag for all authenticated endpoints to allow filtering by shop in Sentry\n    Sentry.setTag('shop', dest);\n\n    //Checking offline/online session tokens has been moved to reAuth.js\n    next();\n};",
                "filename": "web/server/src/modules/auth-dashboard/auth-dashboard.middleware.ts",
                "start_index": 0,
                "end_index": 2873,
                "start_line": 1,
                "end_line": 128,
                "max_line": 169,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n    const { changesetValidationJWT } = req.body;\n    /**\n     * @type {{ payload: import('../modules/post-purchase-changesets').PostPurchaseChangesetValidationJWTPayload }}\n     */\n    const { payload: changesetValidationJWTPayload } = jwt.verify(changesetValidationJWT, envVar('SHOPIFY_API_SECRET'));\n    const inputDataTokenPayload = jwt.verify(\n        changesetValidationJWTPayload.inputDataToken,\n        envVar('SHOPIFY_API_SECRET')\n    );\n    const inputData = inputDataTokenPayload.input_data;\n    const shop = inputData.shop.domain;\n    const referenceId = inputData.initialPurchase.referenceId;\n    const proposedChanges = req.body.proposedChanges;\n\n    const validatedChanges = validateProposedChangeset({ proposedChanges, changesetValidationJWTPayload });\n\n    const payload = {\n        iss: envVar('SHOPIFY_API_KEY'),\n        jti: createDeterministicJti(changesetValidationJWTPayload),\n        iat: Date.now(),\n        sub: referenceId,\n        changes: validatedChanges,\n    };\n\n    const token = jwt.sign(payload, envVar('SHOPIFY_API_SECRET'));\n\n    const shouldReplaceUpsell = Boolean(changesetValidationJWTPayload.replacementUpsell);\n    if (shouldReplaceUpsell) {\n        // We want to reject changesets if there is an unfinished or errored replacement attempt. This\n        // will prevent the upsell item from being added, so we won't need to replace anything.\n        //\n        // This will error if two people simultaneously attempt to accept replacement upsells, but for\n        // now during the first stage of beta this is acceptable. The original order will be unchanged.\n        // The customer may be confused, but they will not be charged for anything they didn't intend to\n        // purchase.\n        const unfinishedOrErroredReplacementAttempt = await ReplacementUpsellAttemptModel.findOne({\n            shop,\n            status: { $ne: ReplacementUpsellAttemptStatus.REPLACEMENT_SUCCESS },\n        });\n        if (unfinishedOrErroredReplacementAttempt) {\n            throw new Error('Changeset rejected because there is an unfinished or errored replacement attempt.');\n        }\n\n        await ReplacementUpsellAttemptModel.create({\n            shop,\n            checkoutToken: referenceId,\n            status: ReplacementUpsellAttemptStatus.CHANGESET_SIGNED,\n        });\n    }\n\n    // This section is a workaround for a Shopify bug related to inventory levels. Shopify\n    // will allow overselling of stock at online locations if the variant is in stock at\n    // a brick & mortar location. This check prevents us from accepting changesets that\n    // would cause overselling.\n    //\n    // This section also enables the inventory exclusions feature.\n    //\n    // This check is required immediately before accepting the offer because the inventory may\n    // have changed from when we first checked it in the /getOffer endpoint.\n    //\n    // See Linear issues BEAM-1508 and BEAM-1509\n    const user = await User.findOne({ myshopify_domain: shop });",
                "filename": "web/server/src/modules/post-purchase-public/post-purchase-public.controller.ts",
                "start_index": 52335,
                "end_index": 55323,
                "start_line": 3,
                "end_line": 1245,
                "max_line": 1418,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export function useRoktUpdatePlacementStatus() {\n    const queryClient = useQueryClient();\n\n    return useMutation({\n        mutationFn: async (body: UpdatePlacementStatusBodyType) => {\n            const result: UpdatePlacementStatusResponseType = await fetch(`/api/v2/rokt/placement-status`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(body),\n            }).then((res) => res.json());\n            return result;\n        },\n        onSuccess: (result, variables) => {\n            if (result.success) {\n                const maybeDisclaimer = variables.enabled\n                    ? 'Enabling Rokt may take up to 30 minutes to complete.'\n                    : '';\n                shopify.toast.show(`Changes saved. ${maybeDisclaimer}`, { duration: 5000 });\n                queryClient.invalidateQueries(['v2/rokt/placement-settings']);\n            } else {\n                shopify.toast.show('Error saving changes', { isError: true, duration: 3000 });\n            }\n        },\n    });\n}\n\nexport function useRoktUpdatePlacementConfiguration() {\n    const queryClient = useQueryClient();\n\n    return useMutation({\n        mutationFn: async (body: UpdatePlacementConfigurationModifiedBodyType) => {\n            const result: UpdatePlacementConfigurationResponseType = await fetch(\n                `/api/v2/rokt/placement-configuration`,\n                {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(body),\n                }\n            ).then((res) => res.json());\n            return result;\n        },\n        onSuccess: (result) => {\n            if (result.success) {\n                shopify.toast.show('Changes saved. Updates may take up to 30 minutes to take effect.', {\n                    duration: 3000,\n                });\n                queryClient.invalidateQueries(['v2/rokt/placement-settings']);\n            } else {\n                shopify.toast.show('Error saving changes', { isError: true, duration: 3000 });\n            }\n        },\n    });\n}\n\nexport function useRoktPaymentMethod() {\n    return useQuery<GetPaymentMethodResponseType>(['v2/rokt/payment-method']);\n}",
                "filename": "web/client/src/pages/rokt/rokt.hooks.ts",
                "start_index": 2944,
                "end_index": 5297,
                "start_line": 85,
                "end_line": 169,
                "max_line": 169,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export const getCurrentAccountVertical: Handler = async (req, res) => {\n    const { shop } = (req as any).session;\n\n    const roktAccount = await RoktAccountModel.findOne({ shop });\n\n    if (!roktAccount) {\n        throw new Error(`[${shop}] Rokt account not found when getting settings.`);\n    }\n\n    const currentAccountVertical = await roktApi.getCurrentAccountVertical({\n        appInstallationId: roktAccount.appInstallationId,\n    });\n\n    return res.json(GetCurrentAccountVerticalResponse.parse(currentAccountVertical));\n};\n\nexport const getPayoutInvoices: Handler = async (req, res) => {\n    const { shop } = (req as any).session;\n\n    const roktAccount = await RoktAccountModel.findOne({ shop });\n\n    if (!roktAccount) {\n        throw new Error(`[${shop}] Rokt account not found when getting payout invoices.`);\n    }\n\n    const payoutInvoices = await roktApi.getPayoutInvoices({\n        appInstallationId: roktAccount.appInstallationId,\n    });\n\n    return res.json(GetPayoutInvoicesResponse.parse(payoutInvoices));\n};\n\nexport const getPayoutInvoicePdf: Handler = async (req, res) => {\n    const { shop } = (req as any).session;\n    const { invoiceId } = req.params;\n\n    const roktAccount = await RoktAccountModel.findOne({ shop });\n\n    if (!roktAccount) {\n        throw new Error(`[${shop}] Rokt account not found when getting payout invoice PDF.`);\n    }\n\n    const payoutInvoicePdf = await roktApi.getPayoutInvoicePdf({\n        appInstallationId: roktAccount.appInstallationId,\n        invoiceId,\n    });\n\n    return res.send(GetPayoutInvoicePdfResponse.parse(payoutInvoicePdf));\n};\n\nexport const getPaymentMethod: Handler = async (req, res) => {\n    const { shop } = (req as AftersellRequest).session;\n    const roktAccount = await RoktAccountModel.findOne({ shop });\n\n    if (!roktAccount) {\n        throw new Error(`[${shop}] Rokt account not found when getting payment method.`);\n    }\n\n    const paymentMethod = await roktApi.getPaymentMethod({\n        appInstallationId: roktAccount.appInstallationId,\n    });\n\n    return res.send(GetPaymentMethodResponse.parse(paymentMethod));\n};\n\nexport const updatePaypalEmail: Handler = async (req, res) => {\n    const { shop } = (req as AftersellRequest).session;\n    const roktAccount = await RoktAccountModel.findOne({ shop });\n    const { paypalEmail } = UpdatePaypalEmailBody.parse(req.body);\n\n    if (!roktAccount) {\n        throw new Error(`[${shop}] Rokt account not found when updating paypal email.`);\n    }\n\n    const paymentMethodUpdate = await roktApi.updatePaymentMethod({\n        appInstallationId: roktAccount.appInstallationId,\n        body: {\n            paymentType: RoktApiPaymentMethod.PayPal,\n            paypalEmail,\n        },\n    });\n\n    return res.send(UpdatePaymentMethodResponse.parse(paymentMethodUpdate));\n};\n\n//public endpoint",
                "filename": "web/server/src/modules/rokt/rokt.controller.ts",
                "start_index": 15059,
                "end_index": 17877,
                "start_line": 428,
                "end_line": 513,
                "max_line": 564,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export function useRoktUpdatePaypalEmail() {\n    return useMutation({\n        mutationFn: async (body: UpdatePaypalEmailBodyType) => {\n            const result: UpdatePaymentMethodResponseType = await fetch(`/api/v2/rokt/paypal-email`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(body),\n            }).then((res) => res.json());\n            return result;\n        },\n        onSettled: (result) => {\n            if (result?.success) {\n                shopify.toast.show('Updated PayPal email!', { duration: 3000 });\n            } else if (result?.error?.details?.[0]?.message) {\n                shopify.toast.show(result?.error?.details?.[0]?.message, { isError: true });\n            } else {\n                shopify.toast.show('Failed to update PayPal email.', { isError: true });\n            }\n        },\n    });\n}",
                "filename": "web/client/src/pages/rokt/rokt.hooks.ts",
                "start_index": 5299,
                "end_index": 6243,
                "start_line": 147,
                "end_line": 169,
                "max_line": 169,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "const shouldUseImprovedInventory =\n        user.featureFlags?.improvedInventoryIsEnabled && user.additionalOauthScopes?.includes('read_inventory');\n    if (shouldUseImprovedInventory) {\n        const shopifyService = new ShopifyService({ shop, accessToken: user.accessToken });\n        const settings = await SettingsService.getSettings({ shop });\n        const addChanges = validatedChanges.filter(\n            (change) => change.type === 'add_variant' || change.type === 'add_subscription'\n        );\n        assert(\n            addChanges.length === 1,\n            `[${shop}] Changeset rejected because it does not contain exactly one add_variant or add_subscription change. Checkout token: \"${referenceId}\".`\n        );\n        const variantId = addChanges[0].variantId;\n        const { variant } = await XShopify.Rest.send(\n            XShopify.Rest.prepare(XShopify.Rest.endpoints['GET /admin/api/2023-04/variants/{variant_id}.json'], {\n                params: {\n                    creds: { shop: shopifyService.shop, accessToken: shopifyService.accessToken },\n                    path: { variant_id: variantId },\n                },\n                callerLocation: 'PostPurchase::SignChangeset::CheckInventory',\n            })\n        );\n        const singleVariantProductArr = [{ variants: [variant] }];\n        await mut_correctInventoryCounts({ shopifyService, settings, mut_products: singleVariantProductArr });\n        const variantIsInStock = getVariantIsInStock(singleVariantProductArr[0].variants[0]);\n        if (!variantIsInStock) {\n            throw new Error(\n                `[${shop}] Changeset rejected because variant is out of stock at allowed locations. Variant ID: \"${variant.id}\". Checkout token: \"${referenceId}\".`\n            );\n        }\n    }\n\n    res.json({ token, shouldReplaceUpsell });\n}",
                "filename": "web/server/src/modules/post-purchase-public/post-purchase-public.controller.ts",
                "start_index": 55328,
                "end_index": 57150,
                "start_line": 1097,
                "end_line": 1418,
                "max_line": 1418,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import type { Handler } from 'express';\nimport { ROKT_ACCOUNT_LOCK } from '../locks/locks.registry';\nimport { LocksService } from '../locks/locks.service';\nimport { RoktAccountModel } from './rokt-accounts.model';\nimport * as roktApi from './rokt.api';\nimport {\n    ConfigurationListType,\n    CreateAccountBody,\n    CreateAccountResponse,\n    CreateAccountResponseType,\n    DeleteAccountResponse,\n    DeleteAccountResponseType,\n    GetAccountResponse,\n    GetAccountResponseType,\n    GetCurrentAccountVerticalResponse,\n    GetPaymentMethodResponse,\n    GetPayoutInvoicePdfResponse,\n    GetPayoutInvoicesResponse,\n    PlacementSettingsModifiedResponse,\n    PlacementSettingsModifiedResponseType,\n    RoktApiPaymentMethod,\n    UpdatePaymentMethodResponse,\n    UpdatePaypalEmailBody,\n    UpdatePlacementConfigurationApiBodyType,\n    UpdatePlacementConfigurationModifiedBody,\n    UpdatePlacementConfigurationResponse,\n    UpdatePlacementControlsBody,\n    UpdatePlacementControlsResponse,\n    UpdatePlacementStatusBody,\n    UpdatePlacementStatusResponse,\n    UpdatePlacementTrafficControlBody,\n    UpdatePlacementTrafficControlResponse,\n    UpdateRoktAfterSellSettingsBody,\n    UpdateRoktAfterSellSettingsResponse,\n    VerticalsResponse,\n} from './rokt.dtos';\nimport usersModel from '../users/users.model';\nimport { AftersellRequest } from '../../utils/types';\n\n//Once the rokt account is created it will have an accountId and we need\nconst maybeUpdateRoktAccountId = async ({\n    shop,\n    appInstallation,\n}: {\n    shop: string;\n    appInstallation: roktApi.AppInstallationStatusResponse | null;\n}) => {\n    if (!appInstallation) {\n        return;\n    }\n\n    const roktAccount = await RoktAccountModel.findOne({ shop });\n\n    if (!roktAccount) {\n        return;\n    }\n\n    if (roktAccount.accountId) {\n        //Account already has an accountId - yay!\n        return;\n    }\n\n    //There are 5 statuses for the app installation, outlined in the swagger docs (see notion - https://www.notion.so/aftersell/Rokt-Network-08e5607758394d98ab84f879e2a75dcc#58152c3c38c64a4a81889d208bfbbe3d)\n    if (appInstallation.data.status === 3) {\n        //Account is active\n        await RoktAccountModel.updateOne(\n            {\n                shop,\n            },\n            {\n                accountId: appInstallation.data.result.accountId,\n                updatedAt: new Date().toISOString(),\n            }\n        );\n        return;\n    } else {\n        return;\n    }\n};\n\nconst getAppInstallationWrapper = async ({ shop, appInstallationId }: { shop: string; appInstallationId: string }) => {\n    const appInstallation = await roktApi.getAppInstallation({ appInstallationId: appInstallationId });\n    maybeUpdateRoktAccountId({ shop, appInstallation });\n    return appInstallation;\n};",
                "filename": "web/server/src/modules/rokt/rokt.controller.ts",
                "start_index": 0,
                "end_index": 2770,
                "start_line": 1,
                "end_line": 564,
                "max_line": 564,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import Shopify from '@shopify/shopify-api';\nimport type { Handler, Request, Response } from 'express';\nimport UserModel from '../../users/users.model';\nimport { AUTH_ROUTE_CALLBACK, AUTH_ROUTE_REDIRECT_OFFLINE, AUTH_ROUTE_REDIRECT_ONLINE } from '../oauth.constants';\n\nconst AUTH_ROUTE_BASE = '/auth';\nfunction authRoute(subpath: string): string {\n    return `${AUTH_ROUTE_BASE}${subpath}`;\n}\n\nexport const redirectToOAuthOffline: Handler = (req, res) => redirectToAuth({ req, res, isOnline: false });\nexport const redirectToOAuthOnline: Handler = (req, res) => redirectToAuth({ req, res, isOnline: true });\n\nasync function redirectToAuth({ req, res, isOnline }: { req: Request; res: Response; isOnline: boolean }) {\n    const isCurrentlyEmbedded = req.query.embedded === '1';\n    return isCurrentlyEmbedded\n        ? clientSideRedirect({ req, res, isOnline })\n        : serverSideRedirect({ req, res, isOnline });\n}\n\nfunction clientSideRedirect({ req, res, isOnline }: { req: Request; res: Response; isOnline: boolean }) {\n    const { shop, host } = getShopAndHostFromQuery(req.query);\n    const redirectSubpath = isOnline ? authRoute(AUTH_ROUTE_REDIRECT_ONLINE) : authRoute(AUTH_ROUTE_REDIRECT_OFFLINE);\n    const redirectUriParams = new URLSearchParams({ shop, host }).toString();\n    const queryParams = new URLSearchParams({\n        ...req.query,\n        shop,\n        redirectUri: `https://${Shopify.Context.HOST_NAME}/api${redirectSubpath}?${redirectUriParams}`,\n    }).toString();\n\n    return res.redirect(`/exitiframe?${queryParams}`);\n}\n\nasync function serverSideRedirect({ req, res, isOnline }: { req: Request; res: Response; isOnline: boolean }) {\n    const { shop } = getShopAndHostFromQuery(req.query);\n    const user = (await UserModel.findOne({ myshopify_domain: shop }, { additionalOauthScopes: 1 })) as any;\n    const additionalScopes = user?.additionalOauthScopes;\n    const redirectUrl = await Shopify.Auth.beginAuth(\n        req,\n        res,\n        shop,\n        authRoute(AUTH_ROUTE_CALLBACK),\n        isOnline,\n        additionalScopes\n    );\n    return res.redirect(redirectUrl);\n}\n\nfunction getShopAndHostFromQuery(query: Request['query']): { shop: string; host: string } {\n    if (typeof query.shop !== 'string') {\n        throw new Error('No shop provided');\n    }\n    const shop = Shopify.Utils.sanitizeShop(query.shop);\n    if (!shop) {\n        throw new Error('No shop provided');\n    }\n    const host = typeof query.host === 'string' ? query.host : '';\n    return { shop, host };\n}",
                "filename": "web/server/src/modules/oauth/redirect-to-oauth/redirect-to-oauth.controller.ts",
                "start_index": 0,
                "end_index": 2513,
                "start_line": 1,
                "end_line": 59,
                "max_line": 59,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export async function syncShopifyShopSettingsWithRokt({ shopData }: { shopData: any }): Promise<any> {\n    if (!shopData || getIsDev()) {\n        return;\n    }\n\n    const roktAccount = await RoktAccountModel.findOne({ shop: shopData.domain });\n\n    if (!roktAccount?.appInstallationId) {\n        return;\n    }\n\n    //Update rokt account\n    const body: AccountSettingsRequest = {\n        brand: shopData.name,\n        email: shopData.email,\n        websiteUrl: shopData.domain,\n        fullName: shopData.shop_owner,\n        firstName: shopData?.shop_owner.split(' ')?.[0] || '',\n        lastName: shopData?.shop_owner?.split(' ')?.[1] || '',\n        addressLine1: shopData.address1,\n        addressLine2: shopData.address2 || '',\n        city: shopData.city,\n        stateOrProvince: shopData.province || shopData.state || '',\n        postcode: shopData.zip,\n        countryCode: shopData.country_code,\n    };\n\n    await fetch(\n        `https://smb-integration.rokt.com/v1/appinstallations/${roktAccount.appInstallationId}/account-settings`,\n        {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n            body: JSON.stringify(body),\n        }\n    );\n    return;\n}\n\nexport async function getReportingDemographics({\n    appInstallationId,\n    params,\n}: {\n    appInstallationId: string;\n    params: ReportingParams;\n}): Promise<any> {\n    const queryParams = new URLSearchParams({\n        dateStartUtc: params.dateStartUtc,\n        dateEndUtc: params.dateEndUtc,\n        currency: params.currency || 'USD',\n    });\n    const res = await fetch(\n        `https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/reporting/demographics?${queryParams}`,\n        {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n        }\n    );\n    return res.json();\n}\n\nexport async function getTopAdvertisers({\n    appInstallationId,\n    params,\n}: {\n    appInstallationId: string;\n    params: ReportingParams;\n}): Promise<any> {\n    const queryParams = new URLSearchParams({\n        dateStartUtc: params.dateStartUtc,\n        dateEndUtc: params.dateEndUtc,\n    });\n    const res = await fetch(\n        `https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/reporting/top-advertisers?${queryParams}`,\n        {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n        }\n    );\n    return res.json();\n}",
                "filename": "web/server/src/modules/rokt/rokt.api.ts",
                "start_index": 5024,
                "end_index": 7754,
                "start_line": 180,
                "end_line": 522,
                "max_line": 522,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export async function handleOnboardingV3CompletionEndpoint(req, res, next) {\n    const { shop } = req.session;\n    await saveUserDetailsToDB({ myshopify_domain: shop, onboarding_v3: { isCompleted: true } });\n    res.status(200).json({\n        status: 'success',\n    });\n}\n\nexport const updateAppStatus = async (req, res, next) => {\n    const { active } = req.body;\n    const { shop } = req.session;\n    await User.findOneAndUpdate({ myshopify_domain: shop }, { $set: { appEnabled: active } });\n    res.json({\n        status: 'success',\n        message: 'App Enabled!',\n    });\n};\n\nexport const updateTriggerStatus = async (req, res, next) => {\n    const { active } = req.body;\n    const { shop } = req.session;\n    await User.findOneAndUpdate({ myshopify_domain: shop }, { $set: { triggerStatus: active } });\n    res.json({\n        status: 'success',\n        message: 'Trigger Status Changed',\n    });\n};\n\nexport const updateCheckoutVersion = async (req, res, next) => {\n    const { checkoutVersion } = req.body;\n    const { shop } = req.session;\n\n    if (!['V1', 'V2'].includes(checkoutVersion)) {\n        return res.status(httpStatus.BAD_REQUEST).json({\n            status: 'error',\n            message: 'Checkout version is not valid',\n        });\n    }\n\n    await User.findOneAndUpdate({ myshopify_domain: shop }, { $set: { checkoutVersion } });\n    res.json({\n        status: 'success',\n        message: 'Checkout Version Updated',\n    });\n};",
                "filename": "web/server/src/modules/users/users.controller.ts",
                "start_index": 2934,
                "end_index": 4381,
                "start_line": 84,
                "end_line": 340,
                "max_line": 340,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export async function updatePlacementStatus({\n    appInstallationId,\n    body,\n}: {\n    appInstallationId: string;\n    body: UpdatePlacementStatusBodyType;\n}): Promise<UpdatePlacementStatusResponseType> {\n    const res = await fetch(\n        `https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/placements/status`,\n        {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n            body: JSON.stringify(body),\n        }\n    );\n    const success = res.status === 204;\n    if (success) {\n        return { success: true };\n    } else {\n        const responseText = await res.text();\n        return {\n            success: false,\n            error: responseText,\n        };\n    }\n}\n\nexport async function updatePlacementTrafficControl({\n    appInstallationId,\n    body,\n}: {\n    appInstallationId: string;\n    body: UpdatePlacementTrafficControlBodyType;\n}) {\n    const res = await fetch(\n        `https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/placements/traffic-control`,\n        {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n            body: JSON.stringify(body),\n        }\n    );\n    const success = res.status === 204;\n    if (success) {\n        return { success: true };\n    } else {\n        const responseText = await res.text();\n        return {\n            success: false,\n            error: responseText,\n        };\n    }\n}\n\nexport async function updatePlacementConfiguration({\n    appInstallationId,\n    body,\n}: {\n    appInstallationId: string;\n    body: UpdatePlacementConfigurationApiBodyType;\n}) {\n    const res = await fetch(\n        `https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/placements/configuration`,\n        {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n            body: JSON.stringify(body),\n        }\n    );\n    const success = res.status === 204;\n    if (success) {\n        return { success: true };\n    } else {\n        const responseText = await res.text();\n        return {\n            success: false,\n            error: responseText,\n        };\n    }\n}\n\nexport async function getCurrentAccountVertical({\n    appInstallationId,\n}: {\n    appInstallationId: string;\n}): Promise<GetCurrentAccountVerticalResponseType> {\n    return fetch(`https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/settings/vertical`, {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n        },\n    }).then((res) => res.json());\n}",
                "filename": "web/server/src/modules/rokt/rokt.api.ts",
                "start_index": 10521,
                "end_index": 13519,
                "start_line": 354,
                "end_line": 522,
                "max_line": 522,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n    const { payload: changesetValidationJWTPayload } = jwt.verify(\n        req.body.changesetValidationJWT,\n        envVar('SHOPIFY_API_SECRET')\n    );\n    const { lineItemToReplace, shouldSendRefundEmail } = changesetValidationJWTPayload.replacementUpsell;\n    const inputDataTokenPayload = jwt.verify(\n        changesetValidationJWTPayload.inputDataToken,\n        envVar('SHOPIFY_API_SECRET')\n    );\n    const inputData = inputDataTokenPayload.input_data;\n    const shop = inputData.shop.domain;\n    const referenceId = inputData.initialPurchase.referenceId;\n\n    await ReplacementUpsellAttemptModel.updateOne(\n        { shop, checkoutToken: referenceId },\n        { status: ReplacementUpsellAttemptStatus.REPLACEMENT_STARTED }\n    );",
                "filename": "web/server/src/modules/post-purchase-public/post-purchase-public.controller.ts",
                "start_index": 57215,
                "end_index": 57953,
                "start_line": 3,
                "end_line": 1402,
                "max_line": 1418,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export const AUTH_ROUTE_REDIRECT_OFFLINE = '/redirect/offline';\nexport const AUTH_ROUTE_REDIRECT_ONLINE = '/redirect/online';\n/**\n * NOTE: this route needs to be configured in the Shopify app settings. If we need\n * to change this route for any reason, we will need to ensure that we update\n * the Shopify app settings as well before deployment to allow the new route.\n */\nexport const AUTH_ROUTE_CALLBACK = '/callback';",
                "filename": "web/server/src/modules/oauth/oauth.constants.ts",
                "start_index": 0,
                "end_index": 420,
                "start_line": 1,
                "end_line": 8,
                "max_line": 8,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import * as Sentry from '@sentry/node';\nimport crypto from 'crypto';\nimport type { RequestHandler } from 'express';\nimport { envVar } from '../env';\n\nexport const authWebhooksMiddleware: RequestHandler = (req, res, next) => {\n    const hmacHeader = req.get('X-Shopify-Hmac-SHA256');\n    const rawBody: string = (req as any).rawBody;\n\n    const { isValidHmac } = validateHmac({ hmacHeader, rawBody });\n\n    if (isValidHmac) {\n        Sentry.setTag('shop', req.get('X-Shopify-Shop-Domain'));\n        return next();\n    } else {\n        return res.status(401).send('Unable to verify request HMAC');\n    }\n};\n\nfunction validateHmac({ hmacHeader, rawBody }: { hmacHeader: string | undefined; rawBody: string }): {\n    isValidHmac: boolean;\n} {\n    const shopifyApiSecret = envVar('SHOPIFY_API_SECRET');\n    const shopifyApiSecretOldForRotation = envVar('SHOPIFY_API_SECRET_OLD_FOR_ROTATION');\n\n    if (hmacHeader === hmac({ secret: shopifyApiSecret, content: rawBody })) {\n        return { isValidHmac: true };\n    }\n    if (\n        shopifyApiSecretOldForRotation &&\n        hmacHeader === hmac({ secret: shopifyApiSecretOldForRotation, content: rawBody })\n    ) {\n        return { isValidHmac: true };\n    }\n\n    return { isValidHmac: false };\n}\n\nfunction hmac({ secret, content }: { secret: string; content: string }): string {\n    return crypto.createHmac('sha256', secret).update(content, 'utf8').digest('base64');\n}",
                "filename": "web/server/src/modules/auth-webhooks/auth-webhooks.middleware.ts",
                "start_index": 0,
                "end_index": 1416,
                "start_line": 1,
                "end_line": 41,
                "max_line": 41,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export async function getPayoutInvoices({\n    appInstallationId,\n}: {\n    appInstallationId: string;\n}): Promise<GetPayoutInvoicesResponseType> {\n    return fetch(`https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/payouts/invoices`, {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n        },\n    }).then((res) => res.json());\n}\n\nexport async function getPayoutInvoicePdf({\n    appInstallationId,\n    invoiceId,\n}: {\n    appInstallationId: string;\n    invoiceId: string;\n}): Promise<GetPayoutInvoicePdfResponseType> {\n    return fetch(\n        `https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/payouts/invoices/${invoiceId}/pdf`,\n        {\n            headers: {\n                'Content-Type': 'application/pdf',\n                Accept: 'application/pdf',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n        }\n    ).then((res) => res.text());\n}\n\nexport async function getPaymentMethod({\n    appInstallationId,\n}: {\n    appInstallationId: string;\n}): Promise<GetPaymentMethodResponseType> {\n    return fetch(`https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/payment-method`, {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n        },\n    }).then((res) => res.json());\n}\n\nexport async function updatePaymentMethod({\n    appInstallationId,\n    body,\n}: {\n    appInstallationId: string;\n    body: UpdatePaymentMethodBodyType;\n}): Promise<UpdatePaymentMethodResponseType> {\n    return fetch(`https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/payment-method`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n        },\n        body: JSON.stringify(body),\n    }).then((res) => {\n        if (res.status === 200) {\n            return { success: true };\n        }\n        return res.json();\n    });\n}",
                "filename": "web/server/src/modules/rokt/rokt.api.ts",
                "start_index": 13521,
                "end_index": 15690,
                "start_line": 457,
                "end_line": 522,
                "max_line": 522,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "alues. */\nexport type StandardizedProductTypeInput = {\n  /** The ID of the node in the Shopify taxonomy that represents the product type. */\n  productTaxonomyNodeId: Scalars['ID'];\n};\n\n/**\n * A token that's used to delegate unauthenticated access scopes to clients that need to access\n * the unauthenticated Storefront API. An app can have a maximum of 100 active storefront access\n * tokens for each shop.\n *\n */\nexport type StorefrontAccessToken = Node & {\n  __typename?: 'StorefrontAccessToken';\n  /** List of permissions associated with the token. */\n  accessScopes: Array<AccessScope>;\n  /** The issued public access token. */\n  accessToken: Scalars['String'];\n  /** The date and time when the public access token was created. */\n  createdAt: Scalars['DateTime'];\n  /** A globally-unique ID. */\n  id: Scalars['ID'];\n  /** An arbitrary title for each token determined by the developer, used for reference         purposes. */\n  title: Scalars['String'];\n  /** The date and time when the storefront access token was updated. */\n  updatedAt: Scalars['DateTime'];\n};\n\n/**\n * An auto-generated type for paginating through multiple StorefrontAccessTokens.\n *\n */\nexport type StorefrontAccessTokenConnection = {\n  __typename?: 'StorefrontAccessTokenConnection';\n  /** A list of edges. */\n  edges: Array<StorefrontAccessTokenEdge>;\n  /** A list of the nodes contained in StorefrontAccessTokenEdge. */\n  nodes: Array<StorefrontAccessToken>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** Return type for `storefrontAccessTokenCreate` mutation. */\nexport type StorefrontAccessTokenCreatePayload = {\n  __typename?: 'StorefrontAccessTokenCreatePayload';\n  /** The user's shop. */\n  shop: Shop;\n  /** The storefront access token. */\n  storefrontAccessToken?: Maybe<StorefrontAccessToken>;\n  /** The list of errors that occurred from executing the mutation. */\n  userErrors: Array<UserError>;\n};\n\n/** The input fields to delete a storefront access token. */\nexport type StorefrontAccessTokenDeleteInput = {\n  /** The ID of the storefront access token to delete. */\n  id: Scalars['ID'];\n};\n\n/** Return type for `storefrontAccessTokenDelete` mutation. */\nexport type StorefrontAccessTokenDeletePayload = {\n  __typename?: 'StorefrontAccessTokenDeletePayload';\n  /** The ID of the deleted storefront access token. */\n  deletedStorefrontAccessTokenId?: Maybe<Scalars['ID']>;\n  /** The list of errors that occurred from executing the mutation. */\n  userErrors: Array<UserError>;\n};\n\n/**\n * An auto-generated type which holds one StorefrontAccessToken and a cursor during pagination.\n *\n */\nexport type StorefrontAccessTokenEdge = {\n  __typename?: 'StorefrontAccessTokenEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of StorefrontAccessTokenEdge. */",
                "filename": "web/server/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1591636,
                "end_index": 1594451,
                "start_line": 20717,
                "end_line": 40174,
                "max_line": 44790,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export async function initiateRecurringChargeEndpoint(req, res) {\n    try {\n        const { accessToken, shop } = req.session;\n        const shopify = new Shopify({\n            apiVersion: API_VERSION,\n            shopName: shop,\n            accessToken,\n        });\n        const user = await User.findOne(\n            { myshopify_domain: shop },\n            'is_active myshopify_domain charge_id subscription_status plan_name pendingScripts created_at last_used first_installed trial_end_date'\n        ).lean();\n        const { last_used, first_installed, trial_end_date = null } = user || {};\n\n        const isFirstDay = trial_end_date === null && dayjs(first_installed).isSame(last_used, 'day');\n        const redirectUrl = `${envVar('HOST')}/api/v1/redirect/billing/check?shop=${shop}&host=${Buffer.from(\n            `${shop}/admin`\n        ).toString('base64')}`;\n        let trialLeft = dayjs(trial_end_date || dayjs().add(29, 'day')).diff(dayjs().subtract(1, 'day'), 'day');\n        // Prevent 422 error from Shopify if trial is supposed to end super far in the future.\n        if (trialLeft > MAX_SHOPIFY_API_TRIAL_DAYS) {\n            console.log(\n                `[${shop}] Trial end date is ${trialLeft} days in the future. Creating charge with ${MAX_SHOPIFY_API_TRIAL_DAYS} trial days instead to avoid Shopify API error.`\n            );\n            trialLeft = MAX_SHOPIFY_API_TRIAL_DAYS;\n        }\n\n        const { confirmation_url } = await initiateRecurringCharge(shopify, redirectUrl, isFirstDay, trialLeft);\n        res.status(200).json({\n            billing_url: confirmation_url,\n        });\n    } catch (err) {\n        console.log(`error:`, err);\n    }\n}\n\n// Trial date count\nexport const TRIAL_DAYS = 30;\n\nexport const initiateRecurringCharge = async (shopify, redirectUrl, isFirstDay, trialLeft) => {\n    // Create the recurring charge object\n    try {\n        // For fetching shop development status\n        const {\n            shop: {\n                plan: { partnerDevelopment: isPartnerDevelopment },\n            },\n        } = await shopify.graphql(partnerDevelopmentQuery);\n\n        const chargeParams = {\n            capped_amount: maxTotalPrice,\n            name: BILLING_V2_NAME,\n            price: 0,\n            return_url: redirectUrl,\n            test: isPartnerDevelopment,\n            trial_days: isFirstDay ? TRIAL_DAYS : Math.max(trialLeft, 0),\n            terms: 'FREE up to 50 orders per month then starts at $7.99',\n        };\n        const { id: charge_id, confirmation_url } = await shopify.recurringApplicationCharge\n            .create(chargeParams)\n            .catch((err) => {\n                console.log(`Error from RecurringCharge`, err);\n                return false;\n            });\n\n        return { charge_id, confirmation_url };\n    } catch (err) {\n        console.log(`error:`, err);\n    }\n};",
                "filename": "web/server/src/modules/legacy-billing/legacy-billing.controller.ts",
                "start_index": 3329,
                "end_index": 6178,
                "start_line": 82,
                "end_line": 151,
                "max_line": 151,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "// @ts-nocheck\nimport { Shopify } from '@shopify/shopify-api';\nimport User from '../users/users.model';\nimport { AdminStores } from './admin-stores.model';\n\n/**\n * Function to overwrite current session with Merchant session\n */\nexport async function merchantAccessLogin(req, res, next) {\n    try {\n        const { shop: shopToAccess } = req.query;\n        const { shop: currentShop } = req.session;\n\n        const adminStore = await AdminStores.findOne({ shop: currentShop });\n\n        if (!adminStore) {\n            return res.json({ status: 'error', message: `This store does not have access` });\n        }\n\n        //If the store is not a super admin, check individual access\n        if (!adminStore.isSuperAdmin) {\n            const hasAccess = adminStore.allowedStores.some((store) => store === shopToAccess);\n            if (!hasAccess) {\n                return res.json({ status: 'error', message: `This store does not have access` });\n            }\n        }\n\n        // Get details of the merchant to log in\n        const merchantDetails = await User.findOne({ myshopify_domain: shopToAccess }).lean();\n\n        if (!merchantDetails) {\n            return res.json({ status: 'error', message: 'Merchant does not exist' });\n        }\n        if (!merchantDetails.is_active) {\n            return res.json({ status: 'error', message: 'Merchant is not active' });\n        }\n\n        const currentSession = req.session;\n        req.session.savedSessionBeforeAdmin = { ...currentSession };\n        req.session.accessToken = merchantDetails.accessToken;\n        req.session.shop = shopToAccess;\n        await Shopify.Utils.storeSession(req.session);\n\n        return res.json({ status: 'success', redirectTo: '/' });\n    } catch (err) {\n        console.log(`Error from dev mode`, err);\n        // Pass error to global error handler\n        next(err);\n    }\n}\n\nexport async function merchantAccessLogout(req, res) {\n    const previousSession = req.session.savedSessionBeforeAdmin;\n    if (previousSession) {\n        const newSession = { ...previousSession };\n        await Shopify.Utils.storeSession(newSession);\n    }\n    return res.json({ status: 'success', redirectTo: '/' });\n}",
                "filename": "web/server/src/modules/admin-stores/admin-stores.controller.ts",
                "start_index": 0,
                "end_index": 2180,
                "start_line": 1,
                "end_line": 59,
                "max_line": 59,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "initial_doc_snippets": [
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/server` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 999,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Shopify Function development with Rust\n\n## Dependencies\n\n-   [Install Rust](https://www.rust-lang.org/tools/install)\n    -   On Windows, Rust requires the [Microsoft C++ Build Tools](https://docs.microsoft.com/en-us/windows/dev-environment/rust/setup). Be sure to select the _Desktop development with C++_ workload when installing them.\n-   Install [`cargo-wasi`](https://bytecodealliance.github.io/cargo-wasi/)\n    -   `cargo install cargo-wasi`\n-   On Macs with Apple Silicon, you'll also need to install the Binaryen toolchain and set the `WASM_OPT` environment variable. ([related issue](https://github.com/bytecodealliance/cargo-wasi/issues/112))\n    -   `brew install binaryen`\n    -   Add `export WASM_OPT=/opt/homebrew/bin/wasm-opt` to your `.bashrc` or `.zshrc`\n\n## Building the function\n\nYou can build this individual function using `cargo wasi`.\n\n```shell\ncargo wasi build --release\n```\n\nThe Shopify CLI `build` command will also execute this, based on the configuration in `shopify.function.extension.toml`.\n\n## Testing\n\n> Requires Node v16+\n\n1. Create a temporary JSON file (e.g., `a.json`) in the following format:\n\n```json\n{\n    \"data\": {\n        \"foo\": \"bar\"\n    },\n    \"secretKey\": \"abc123\"\n}\n```\n\n2. Run the following command\n\n```\nyarn test:new-hmac < a.json\n```\n\n3. Copy the generated HMAC into the test file",
                "filename": "extensions/upsell-offer-discount-function/README.md",
                "start_index": 0,
                "end_index": 1329,
                "start_line": 1,
                "end_line": 44,
                "max_line": 44,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# [[[ --- CLIENT --- ]]]\nFROM node:18.16.1-alpine AS client\nARG SHOPIFY_API_KEY\nENV SHOPIFY_API_KEY=$SHOPIFY_API_KEY\nARG HOST\nENV HOST=$HOST\nARG NODE_ENV\nENV NODE_ENV=$NODE_ENV\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/client/package.json ./web/client/package.json\nCOPY web/client/yarn.lock ./web/client/yarn.lock\nRUN cd web/client && yarn install --frozen-lockfile --production=false\nCOPY extensions-web-common/package.json ./extensions-web-common/package.json\nCOPY extensions-web-common/yarn.lock ./extensions-web-common/yarn.lock\nRUN cd extensions-web-common && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY extensions/post-purchase ./extensions/post-purchase\nCOPY extensions-web-common/post-purchase ./extensions-web-common/post-purchase\nCOPY extensions-web-common/checkout ./extensions-web-common/checkout\nCOPY extensions-web-common/shared ./extensions-web-common/shared\nCOPY extensions-web-common/ty-page ./extensions-web-common/ty-page\nCOPY web/client ./web/client\nRUN cd web/client && yarn build\n\n# [[[ --- TY PAGE --- ]]]\nFROM node:18.16.1-alpine AS ty-page\nARG HOST\nENV HOST=$HOST\nWORKDIR /usr/src/app\nCOPY web/widgets/package.json ./web/widgets/package.json\nCOPY web/widgets/yarn.lock ./web/widgets/yarn.lock\nRUN cd web/widgets && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY web/widgets ./web/widgets\nRUN cd web/widgets && yarn build\n\n# [[[ --- SERVER --- ]]]\nFROM node:18.16.1-alpine AS server\nWORKDIR /usr/src/app\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=false\nCOPY web/server ./web/server\nCOPY web/common ./web/common\nRUN cd web/server && yarn build\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM node:18.16.1-alpine AS final\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=true\nCOPY --from=server /usr/src/app/web/server/build ./web/server/build\nCOPY --from=ty-page /usr/src/app/web/widgets/dist ./web/server/build/server/dist\nCOPY --from=client /usr/src/app/web/client/dist ./web/server/build/server/dist/client\nCOPY package.json ./package.json\nCMD [\"yarn\", \"start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2514,
                "start_line": 1,
                "end_line": 61,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <!-- Shopify App Bridge [START] -->\n        <meta name=\"shopify-api-key\" content=\"%SHOPIFY_API_KEY%\" />",
                "filename": "web/client/index.html",
                "start_index": 38,
                "end_index": 156,
                "start_line": 4,
                "end_line": 6,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script>\n            !(function (f, b, e, v, n, t, s) {\n                if (f.fbq) return;\n                n = f.fbq = function () {\n                    n.callMethod ? n.callMethod.apply(n, arguments) : n.queue.push(arguments);\n                };\n                if (!f._fbq) f._fbq = n;\n                n.push = n;\n                n.loaded = !0;\n                n.version = '2.0';\n                n.queue = [];\n                t = b.createElement(e);\n                t.async = !0;\n                t.src = v;\n                s = b.getElementsByTagName(e)[0];\n                s.parentNode.insertBefore(t, s);\n            })(window, document, 'script', 'https://connect.facebook.net/en_US/fbevents.js');\n            fbq('init', '895262111044943');\n            fbq('track', 'PageView');\n        </script>\n        <!-- End Facebook Pixel Code -->\n        <!-- Reddit Pixel -->\n        <script>\n            !(function (w, d) {\n                if (!w.rdt) {\n                    var p = (w.rdt = function () {\n                        p.sendEvent ? p.sendEvent.apply(p, arguments) : p.callQueue.push(arguments);\n                    });\n                    p.callQueue = [];\n                    var t = d.createElement('script');\n                    (t.src = 'https://www.redditstatic.com/ads/pixel.js'), (t.async = !0);\n                    var s = d.getElementsByTagName('script')[0];\n                    s.parentNode.insertBefore(t, s);\n                }\n            })(window, document);\n            rdt('init', 't2_dp3wj8bg');\n            rdt('track', 'PageVisit');\n        </script>\n        <!-- End Reddit Pixel -->\n\n        <!-- Dev HMR [START] -->\n        <script type=\"module\">\n            if (!import.meta.env || !import.meta.env.PROD) {\n                // For embedded development, the iframe loads an HTML file from the server. Normally for\n                // development, the HTML file is served by the dev server, which injects the HMR script.\n                // This script adds the HMR script to the iframe to allow HMR in embedded development.\n                const script = document.createElement('script');\n                script.setAttribute('type', 'module');\n                script.setAttribute('src', './src/dev-hmr.ts');\n                document.getElementsByTagName('head')[0].append(script);\n            }\n        </script>\n        <!-- Dev HMR [END] -->\n\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com/\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" crossorigin=\"anonymous\" />\n        <link\n            href=\"https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap\"\n        />\n    </head>",
                "filename": "web/client/index.html",
                "start_index": 6232,
                "end_index": 8924,
                "start_line": 7,
                "end_line": 178,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<svg\n                                                                    class=\"product-thumbnail__image\"\n                                                                    width=\"32\"\n                                                                    height=\"32\"\n                                                                    viewBox=\"0 0 32 32\"\n                                                                    fill=\"none\"\n                                                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                                                >\n                                                                    <path\n                                                                        fill-rule=\"evenodd\"\n                                                                        clip-rule=\"evenodd\"\n                                                                        d=\"M27.2 28.8C26.3184 28.8 25.6 28.0816 25.6 27.2C25.6 26.3184 26.3184 25.6 27.2 25.6C28.0816 25.6 28.8 26.3184 28.8 27.2C28.8 28.0816 28.0816 28.8 27.2 28.8ZM6.4 27.2C6.4 28.0816 5.6816 28.8 4.8 28.8C3.9184 28.8 3.2 28.0816 3.2 27.2C3.2 26.3184 3.9184 25.6 4.8 25.6C5.6816 25.6 6.4 26.3184 6.4 27.2ZM28.2656 9.34549L26.0464 15.9999H6.4V6.61269L28.2656 9.34549ZM27.2 22.4H6.4V19.2H27.2C27.8896 19.2 28.4992 18.76 28.7184 18.1056L31.9184 8.5056C32.0688 8.0512 32.0096 7.552 31.7536 7.1472C31.4976 6.7408 31.0736 6.472 30.5984 6.4128L6.4 3.3872V1.6C6.4 0.7168 5.6832 0 4.8 0H1.6C0.7168 0 0 0.7168 0 1.6C0 2.4832 0.7168 3.2 1.6 3.2H3.2V22.6944C1.3408 23.3584 0 25.1168 0 27.2C0 29.8464 2.1536 32 4.8 32C7.4464 32 9.6 29.8464 9.6 27.2C9.6 26.6352 9.4848 26.1024 9.3056 25.6H22.6944C22.5152 26.1024 22.4 26.6352 22.4 27.2C22.4 29.8464 24.5536 32 27.2 32C29.8464 32 32 29.8464 32 27.2C32 24.5536 29.8464 22.4 27.2 22.4Z\"\n                                                                        fill=\"#637381\"\n                                                                    />",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 326131,
                "end_index": 328135,
                "start_line": 6099,
                "end_line": 6353,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"hidden\">\n                            <span class=\"visually-hidden\" id=\"forwarding-external-new-window-message\">\n                                Opens external website in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-new-window-message\">\n                                Opens in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-external-message\">\n                                Opens external website.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"checkout-context-step-one\">\n                                Customer information - Checkout\n                            </span>\n                        </div>\n                    </main>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 322226,
                "end_index": 323078,
                "start_line": 6265,
                "end_line": 6282,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<mask\n                                                                        id=\"mask0\"\n                                                                        mask-type=\"alpha\"\n                                                                        maskUnits=\"userSpaceOnUse\"\n                                                                        x=\"0\"\n                                                                        y=\"0\"\n                                                                        width=\"32\"\n                                                                        height=\"32\"\n                                                                    >\n                                                                        <path\n                                                                            fill-rule=\"evenodd\"\n                                                                            clip-rule=\"evenodd\"\n                                                                            d=\"M27.2 28.8C26.3184 28.8 25.6 28.0816 25.6 27.2C25.6 26.3184 26.3184 25.6 27.2 25.6C28.0816 25.6 28.8 26.3184 28.8 27.2C28.8 28.0816 28.0816 28.8 27.2 28.8ZM6.4 27.2C6.4 28.0816 5.6816 28.8 4.8 28.8C3.9184 28.8 3.2 28.0816 3.2 27.2C3.2 26.3184 3.9184 25.6 4.8 25.6C5.6816 25.6 6.4 26.3184 6.4 27.2ZM28.2656 9.34549L26.0464 15.9999H6.4V6.61269L28.2656 9.34549ZM27.2 22.4H6.4V19.2H27.2C27.8896 19.2 28.4992 18.76 28.7184 18.1056L31.9184 8.5056C32.0688 8.0512 32.0096 7.552 31.7536 7.1472C31.4976 6.7408 31.0736 6.472 30.5984 6.4128L6.4 3.3872V1.6C6.4 0.7168 5.6832 0 4.8 0H1.6C0.7168 0 0 0.7168 0 1.6C0 2.4832 0.7168 3.2 1.6 3.2H3.2V22.6944C1.3408 23.3584 0 25.1168 0 27.2C0 29.8464 2.1536 32 4.8 32C7.4464 32 9.6 29.8464 9.6 27.2C9.6 26.6352 9.4848 26.1024 9.3056 25.6H22.6944C22.5152 26.1024 22.4 26.6352 22.4 27.2C22.4 29.8464 24.5536 32 27.2 32C29.8464 32 32 29.8464 32 27.2C32 24.5536 29.8464 22.4 27.2 22.4Z\"\n                                                                            fill=\"white\"\n                                                                        />\n                                                                    </mask>\n                                                                    <g mask=\"url(#mask0)\"></g>\n                                                                </svg>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 328204,
                "end_index": 330541,
                "start_line": 6339,
                "end_line": 6356,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"step__sections\">\n                                <div class=\"section\">\n                                    <div class=\"section__header os-header\">\n                                        <svg\n                                            width=\"56\"\n                                            height=\"56\"\n                                            viewBox=\"0 0 56 56\"\n                                            fill=\"none\"\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                            <circle cx=\"28\" cy=\"28\" r=\"26\" stroke=\"#E5E5E5\" stroke-width=\"2.29412\" />\n                                            <path\n                                                fill-rule=\"evenodd\"\n                                                clip-rule=\"evenodd\"\n                                                d=\"M22.4811 37.3603L16.3636 31.3947C15.5663 30.6172 15.5663 29.3605 16.3636 28.583C17.1609 27.8055 18.4497 27.8055 19.247 28.583L23.8066 33.0293L36.6493 18.7538C37.3834 17.9186 38.6701 17.8231 39.5225 18.537C40.379 19.2529 40.4789 20.5056 39.7448 21.3388L25.4706 37.2469C25.1015 37.6685 24.5672 37.9191 24.0003 37.9409C23.3825 37.9429 22.8625 37.7341 22.4811 37.3603Z\"\n                                                fill=\"#008060\"\n                                                stroke=\"#E5E5E5\"\n                                                stroke-width=\"0.764706\"\n                                            />\n                                        </svg>\n                                        <div class=\"os-header__heading\">\n                                            <span class=\"os-order-number\"> Order #1001 </span>\n                                            <h2 class=\"os-header__title\" id=\"main-header\" tabindex=\"-1\">\n                                                Thank you {{Customer Name}}!\n                                            </h2>\n                                        </div>\n                                    </div>\n                                </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245858,
                "end_index": 247957,
                "start_line": 6161,
                "end_line": 6451,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<html\n    lang=\"en\"\n    dir=\"ltr\"\n    class=\"js desktop page--no-banner page--logo-main page--show page--show card-fields cors svg opacity placeholder no-touchevents displaytable display-table generatedcontent cssanimations flexbox no-flexboxtweener anyflexbox shopemoji floating-labels\"\n>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 0,
                "end_index": 289,
                "start_line": 1,
                "end_line": 6518,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <meta charset=\"utf-8\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n        <meta\n            id=\"thankyoupage_viewport_meta\"\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, user-scalable=0\"\n        />\n        <meta name=\"referrer\" content=\"origin\" />\n\n        <title>Thank you! - Checkout</title>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 294,
                "end_index": 717,
                "start_line": 6,
                "end_line": 16,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<span class=\"order-summary-toggle__inner\">\n                        <span class=\"order-summary-toggle__icon-wrapper\">\n                            <svg\n                                width=\"20\"\n                                height=\"19\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__icon\"\n                            >\n                                <path\n                                    d=\"M17.178 13.088H5.453c-.454 0-.91-.364-.91-.818L3.727 1.818H0V0h4.544c.455 0 .91.364.91.818l.09 1.272h13.45c.274 0 .547.09.73.364.18.182.27.454.18.727l-1.817 9.18c-.09.455-.455.728-.91.728zM6.27 11.27h10.09l1.454-7.362H5.634l.637 7.362zm.092 7.715c1.004 0 1.818-.813 1.818-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817zm9.18 0c1.004 0 1.817-.813 1.817-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--show\">\n                            <span>Show order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"6\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M.504 1.813l4.358 3.845.496.438.496-.438 4.642-4.096L9.504.438 4.862 4.534h.992L1.496.69.504 1.812z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--hide\">\n                            <span>Hide order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"7\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M6.138.876L5.642.438l-.496.438L.504 4.972l.992 1.124L6.138 2l-.496.436 3.862 3.408.992-1.122L6.138.876z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span\n                            class=\"order-summary-toggle__total-recap total-recap\"\n                            data-order-summary-section=\"toggle-total-recap\"\n                        >\n                            <span class=\"total-recap__final-price\" data-checkout-payment-due-target=\"5073\">$50.73</span>\n                        </span>\n                    </span>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 242214,
                "end_index": 245205,
                "start_line": 6097,
                "end_line": 6446,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div\n                            id=\"partial-icon-symbols\"\n                            class=\"icon-symbols\"\n                            data-tg-refresh=\"partial-icon-symbols\"\n                            data-tg-refresh-always=\"true\"\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\">\n                                <symbol id=\"down-arrow\">\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 12 12\">\n                                        <path\n                                            d=\"M10.817 7.624l-4.375 4.2c-.245.235-.64.235-.884 0l-4.375-4.2c-.244-.234-.244-.614 0-.848.245-.235.64-.235.884 0L5.375 9.95V.6c0-.332.28-.6.625-.6s.625.268.625.6v9.35l3.308-3.174c.122-.117.282-.176.442-.176.16 0 .32.06.442.176.244.234.244.614 0 .848\"\n                                        ></path>\n                                    </svg>\n                                </symbol>\n                                <symbol id=\"checkmark\">\n                                    <svg\n                                        xmlns=\"http://www.w3.org/2000/svg\"\n                                        viewBox=\"0 0 50 50\"\n                                        fill=\"none\"\n                                        stroke-width=\"2\"\n                                        class=\"checkmark\"\n                                    >\n                                        <path\n                                            class=\"checkmark__circle\"\n                                            d=\"M25 49c13.255 0 24-10.745 24-24S38.255 1 25 1 1 11.745 1 25s10.745 24 24 24z\"\n                                        ></path>\n                                        <path class=\"checkmark__check\" d=\"M15 24.51l7.307 7.308L35.125 19\"></path>\n                                    </svg>\n                                </symbol>\n                                <symbol id=\"spinner-button\">\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                                        <path\n                                            d=\"M20 10c0 5.523-4.477 10-10 10S0 15.523 0 10 4.477 0 10 0v2c-4.418 0-8 3.582-8 8s3.582 8 8 8 8-3.582 8-8h2z\"\n                                        ></path>\n                                    </svg>\n                                </symbol>\n                            </svg>\n                        </div>\n                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 337185,
                "end_index": 339656,
                "start_line": 6081,
                "end_line": 6493,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<tr\n                                                    class=\"product\"\n                                                    data-product-id=\"4330495803489\"\n                                                    data-variant-id=\"31055496183905\"\n                                                    data-product-type=\"Bracelet\"\n                                                    data-customer-ready-visible=\"\"\n                                                >",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 325343,
                "end_index": 325797,
                "start_line": 6303,
                "end_line": 6444,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<body class=\"aftersell-preview\">\n        <a href=\"#main-header\" class=\"skip-to-content\"> Skip to content </a>\n\n        <header class=\"banner\" data-header=\"\" role=\"banner\">\n            <div class=\"wrap\">\n                <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n            </div>\n        </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241387,
                "end_index": 241804,
                "start_line": 6077,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script defer src=\"./thankyoupage_bundle.js?v2\"></script>\n        <script defer src=\"/apps/aftersell_sdk.bundle.min.js?v2\"></script>\n    </head>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241237,
                "end_index": 241381,
                "start_line": 6073,
                "end_line": 6075,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box__row text-container\">\n                                                <h2 class=\"heading-2 os-step__title\" id=\"main-header\" tabindex=\"-1\">\n                                                    Your order is confirmed\n                                                </h2>\n                                                <p class=\"os-step__description\">\n                                                    You\u2019ll receive an email when your order is ready.\n                                                </p>\n                                            </div>\n                                        </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 317828,
                "end_index": 318454,
                "start_line": 6200,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box\">\n                                            <div class=\"content-box__row content-box__row--no-border\">\n                                                <h2>Customer information</h2>\n                                            </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318496,
                "end_index": 318753,
                "start_line": 6192,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "intial_documentation_sources": {},
        "external_documentation_snippets": {},
        "mmr_code_snippets_initial": [
            {
                "code": "export const reauthExpiredDashboardMiddleware = async (req, res, next) => {\n    // Ensure that we have both offline and online sessions. If either doesn't exist,\n    // we will redirect the user to the auth page to get the missing session.\n    let onlineTokenValid = false;\n    let offlineTokenValid = false;\n\n    //Parallelize the checking of offline and online tokens.\n    //Note: Could use promise.all here but if it fails we can't tell which one failed based on the res and this is required for the redirect route\n    getSessionIsValidWithUpdatedScopes(req.session)\n        .then((res) => {\n            if (res) {\n                offlineTokenValid = true;\n            } else {\n                res.status(403);\n                setReauthHeaders(req, res, '/auth/redirect/offline');\n                res.end();\n            }\n            if (onlineTokenValid && offlineTokenValid) {\n                next();\n            }\n        })\n        .catch(() => {\n            res.status(403);\n            setReauthHeaders(req, res, '/auth/redirect/offline');\n            res.end();\n        });\n    getSessionIsValidWithUpdatedScopes(req.onlineSession)\n        .then((res) => {\n            if (res) {\n                onlineTokenValid = true;\n            } else {\n                res.status(403);\n                setReauthHeaders(req, res, '/auth/redirect/online');\n                res.end();\n            }\n            if (onlineTokenValid && offlineTokenValid) {\n                next();\n            }\n        })\n        .catch(() => {\n            res.status(403);\n            setReauthHeaders(req, res, '/auth/redirect/online');\n            res.end();\n        });\n};\n\nasync function getSessionIsValidWithUpdatedScopes(session) {\n    if (!session || !session.shop || !session.accessToken) return false;\n    const shopifyService = new ShopifyService({ shop: session.shop, accessToken: session.accessToken });\n\n    const needsToUpdateScopes = await getNeedsToUpdateScopes(session);\n    if (needsToUpdateScopes) {\n        return false;\n    }\n\n    const { accessTokenIsValid } = await shopifyService.validateAccessToken();\n    if (!accessTokenIsValid) {\n        return false;\n    }\n    return true;\n}",
                "filename": "web/server/src/modules/auth-dashboard/auth-dashboard.middleware.ts",
                "start_index": 2875,
                "end_index": 5059,
                "start_line": 84,
                "end_line": 169,
                "max_line": 169,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export function useRoktUpdatePaypalEmail() {\n    return useMutation({\n        mutationFn: async (body: UpdatePaypalEmailBodyType) => {\n            const result: UpdatePaymentMethodResponseType = await fetch(`/api/v2/rokt/paypal-email`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(body),\n            }).then((res) => res.json());\n            return result;\n        },\n        onSettled: (result) => {\n            if (result?.success) {\n                shopify.toast.show('Updated PayPal email!', { duration: 3000 });\n            } else if (result?.error?.details?.[0]?.message) {\n                shopify.toast.show(result?.error?.details?.[0]?.message, { isError: true });\n            } else {\n                shopify.toast.show('Failed to update PayPal email.', { isError: true });\n            }\n        },\n    });\n}",
                "filename": "web/client/src/pages/rokt/rokt.hooks.ts",
                "start_index": 5299,
                "end_index": 6243,
                "start_line": 147,
                "end_line": 169,
                "max_line": 169,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "alues. */\nexport type StandardizedProductTypeInput = {\n  /** The ID of the node in the Shopify taxonomy that represents the product type. */\n  productTaxonomyNodeId: Scalars['ID'];\n};\n\n/**\n * A token that's used to delegate unauthenticated access scopes to clients that need to access\n * the unauthenticated Storefront API. An app can have a maximum of 100 active storefront access\n * tokens for each shop.\n *\n */\nexport type StorefrontAccessToken = Node & {\n  __typename?: 'StorefrontAccessToken';\n  /** List of permissions associated with the token. */\n  accessScopes: Array<AccessScope>;\n  /** The issued public access token. */\n  accessToken: Scalars['String'];\n  /** The date and time when the public access token was created. */\n  createdAt: Scalars['DateTime'];\n  /** A globally-unique ID. */\n  id: Scalars['ID'];\n  /** An arbitrary title for each token determined by the developer, used for reference         purposes. */\n  title: Scalars['String'];\n  /** The date and time when the storefront access token was updated. */\n  updatedAt: Scalars['DateTime'];\n};\n\n/**\n * An auto-generated type for paginating through multiple StorefrontAccessTokens.\n *\n */\nexport type StorefrontAccessTokenConnection = {\n  __typename?: 'StorefrontAccessTokenConnection';\n  /** A list of edges. */\n  edges: Array<StorefrontAccessTokenEdge>;\n  /** A list of the nodes contained in StorefrontAccessTokenEdge. */\n  nodes: Array<StorefrontAccessToken>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** Return type for `storefrontAccessTokenCreate` mutation. */\nexport type StorefrontAccessTokenCreatePayload = {\n  __typename?: 'StorefrontAccessTokenCreatePayload';\n  /** The user's shop. */\n  shop: Shop;\n  /** The storefront access token. */\n  storefrontAccessToken?: Maybe<StorefrontAccessToken>;\n  /** The list of errors that occurred from executing the mutation. */\n  userErrors: Array<UserError>;\n};\n\n/** The input fields to delete a storefront access token. */\nexport type StorefrontAccessTokenDeleteInput = {\n  /** The ID of the storefront access token to delete. */\n  id: Scalars['ID'];\n};\n\n/** Return type for `storefrontAccessTokenDelete` mutation. */\nexport type StorefrontAccessTokenDeletePayload = {\n  __typename?: 'StorefrontAccessTokenDeletePayload';\n  /** The ID of the deleted storefront access token. */\n  deletedStorefrontAccessTokenId?: Maybe<Scalars['ID']>;\n  /** The list of errors that occurred from executing the mutation. */\n  userErrors: Array<UserError>;\n};\n\n/**\n * An auto-generated type which holds one StorefrontAccessToken and a cursor during pagination.\n *\n */\nexport type StorefrontAccessTokenEdge = {\n  __typename?: 'StorefrontAccessTokenEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of StorefrontAccessTokenEdge. */",
                "filename": "web/server/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1591636,
                "end_index": 1594451,
                "start_line": 20717,
                "end_line": 40174,
                "max_line": 44790,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n    const { changesetValidationJWT } = req.body;\n    /**\n     * @type {{ payload: import('../modules/post-purchase-changesets').PostPurchaseChangesetValidationJWTPayload }}\n     */\n    const { payload: changesetValidationJWTPayload } = jwt.verify(changesetValidationJWT, envVar('SHOPIFY_API_SECRET'));\n    const inputDataTokenPayload = jwt.verify(\n        changesetValidationJWTPayload.inputDataToken,\n        envVar('SHOPIFY_API_SECRET')\n    );\n    const inputData = inputDataTokenPayload.input_data;\n    const shop = inputData.shop.domain;\n    const referenceId = inputData.initialPurchase.referenceId;\n    const proposedChanges = req.body.proposedChanges;\n\n    const validatedChanges = validateProposedChangeset({ proposedChanges, changesetValidationJWTPayload });\n\n    const payload = {\n        iss: envVar('SHOPIFY_API_KEY'),\n        jti: createDeterministicJti(changesetValidationJWTPayload),\n        iat: Date.now(),\n        sub: referenceId,\n        changes: validatedChanges,\n    };\n\n    const token = jwt.sign(payload, envVar('SHOPIFY_API_SECRET'));\n\n    const shouldReplaceUpsell = Boolean(changesetValidationJWTPayload.replacementUpsell);\n    if (shouldReplaceUpsell) {\n        // We want to reject changesets if there is an unfinished or errored replacement attempt. This\n        // will prevent the upsell item from being added, so we won't need to replace anything.\n        //\n        // This will error if two people simultaneously attempt to accept replacement upsells, but for\n        // now during the first stage of beta this is acceptable. The original order will be unchanged.\n        // The customer may be confused, but they will not be charged for anything they didn't intend to\n        // purchase.\n        const unfinishedOrErroredReplacementAttempt = await ReplacementUpsellAttemptModel.findOne({\n            shop,\n            status: { $ne: ReplacementUpsellAttemptStatus.REPLACEMENT_SUCCESS },\n        });\n        if (unfinishedOrErroredReplacementAttempt) {\n            throw new Error('Changeset rejected because there is an unfinished or errored replacement attempt.');\n        }\n\n        await ReplacementUpsellAttemptModel.create({\n            shop,\n            checkoutToken: referenceId,\n            status: ReplacementUpsellAttemptStatus.CHANGESET_SIGNED,\n        });\n    }\n\n    // This section is a workaround for a Shopify bug related to inventory levels. Shopify\n    // will allow overselling of stock at online locations if the variant is in stock at\n    // a brick & mortar location. This check prevents us from accepting changesets that\n    // would cause overselling.\n    //\n    // This section also enables the inventory exclusions feature.\n    //\n    // This check is required immediately before accepting the offer because the inventory may\n    // have changed from when we first checked it in the /getOffer endpoint.\n    //\n    // See Linear issues BEAM-1508 and BEAM-1509\n    const user = await User.findOne({ myshopify_domain: shop });",
                "filename": "web/server/src/modules/post-purchase-public/post-purchase-public.controller.ts",
                "start_index": 52335,
                "end_index": 55323,
                "start_line": 3,
                "end_line": 1245,
                "max_line": 1418,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import type { Handler } from 'express';\nimport { ROKT_ACCOUNT_LOCK } from '../locks/locks.registry';\nimport { LocksService } from '../locks/locks.service';\nimport { RoktAccountModel } from './rokt-accounts.model';\nimport * as roktApi from './rokt.api';\nimport {\n    ConfigurationListType,\n    CreateAccountBody,\n    CreateAccountResponse,\n    CreateAccountResponseType,\n    DeleteAccountResponse,\n    DeleteAccountResponseType,\n    GetAccountResponse,\n    GetAccountResponseType,\n    GetCurrentAccountVerticalResponse,\n    GetPaymentMethodResponse,\n    GetPayoutInvoicePdfResponse,\n    GetPayoutInvoicesResponse,\n    PlacementSettingsModifiedResponse,\n    PlacementSettingsModifiedResponseType,\n    RoktApiPaymentMethod,\n    UpdatePaymentMethodResponse,\n    UpdatePaypalEmailBody,\n    UpdatePlacementConfigurationApiBodyType,\n    UpdatePlacementConfigurationModifiedBody,\n    UpdatePlacementConfigurationResponse,\n    UpdatePlacementControlsBody,\n    UpdatePlacementControlsResponse,\n    UpdatePlacementStatusBody,\n    UpdatePlacementStatusResponse,\n    UpdatePlacementTrafficControlBody,\n    UpdatePlacementTrafficControlResponse,\n    UpdateRoktAfterSellSettingsBody,\n    UpdateRoktAfterSellSettingsResponse,\n    VerticalsResponse,\n} from './rokt.dtos';\nimport usersModel from '../users/users.model';\nimport { AftersellRequest } from '../../utils/types';\n\n//Once the rokt account is created it will have an accountId and we need\nconst maybeUpdateRoktAccountId = async ({\n    shop,\n    appInstallation,\n}: {\n    shop: string;\n    appInstallation: roktApi.AppInstallationStatusResponse | null;\n}) => {\n    if (!appInstallation) {\n        return;\n    }\n\n    const roktAccount = await RoktAccountModel.findOne({ shop });\n\n    if (!roktAccount) {\n        return;\n    }\n\n    if (roktAccount.accountId) {\n        //Account already has an accountId - yay!\n        return;\n    }\n\n    //There are 5 statuses for the app installation, outlined in the swagger docs (see notion - https://www.notion.so/aftersell/Rokt-Network-08e5607758394d98ab84f879e2a75dcc#58152c3c38c64a4a81889d208bfbbe3d)\n    if (appInstallation.data.status === 3) {\n        //Account is active\n        await RoktAccountModel.updateOne(\n            {\n                shop,\n            },\n            {\n                accountId: appInstallation.data.result.accountId,\n                updatedAt: new Date().toISOString(),\n            }\n        );\n        return;\n    } else {\n        return;\n    }\n};\n\nconst getAppInstallationWrapper = async ({ shop, appInstallationId }: { shop: string; appInstallationId: string }) => {\n    const appInstallation = await roktApi.getAppInstallation({ appInstallationId: appInstallationId });\n    maybeUpdateRoktAccountId({ shop, appInstallation });\n    return appInstallation;\n};",
                "filename": "web/server/src/modules/rokt/rokt.controller.ts",
                "start_index": 0,
                "end_index": 2770,
                "start_line": 1,
                "end_line": 564,
                "max_line": 564,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export async function initiateRecurringChargeEndpoint(req, res) {\n    try {\n        const { accessToken, shop } = req.session;\n        const shopify = new Shopify({\n            apiVersion: API_VERSION,\n            shopName: shop,\n            accessToken,\n        });\n        const user = await User.findOne(\n            { myshopify_domain: shop },\n            'is_active myshopify_domain charge_id subscription_status plan_name pendingScripts created_at last_used first_installed trial_end_date'\n        ).lean();\n        const { last_used, first_installed, trial_end_date = null } = user || {};\n\n        const isFirstDay = trial_end_date === null && dayjs(first_installed).isSame(last_used, 'day');\n        const redirectUrl = `${envVar('HOST')}/api/v1/redirect/billing/check?shop=${shop}&host=${Buffer.from(\n            `${shop}/admin`\n        ).toString('base64')}`;\n        let trialLeft = dayjs(trial_end_date || dayjs().add(29, 'day')).diff(dayjs().subtract(1, 'day'), 'day');\n        // Prevent 422 error from Shopify if trial is supposed to end super far in the future.\n        if (trialLeft > MAX_SHOPIFY_API_TRIAL_DAYS) {\n            console.log(\n                `[${shop}] Trial end date is ${trialLeft} days in the future. Creating charge with ${MAX_SHOPIFY_API_TRIAL_DAYS} trial days instead to avoid Shopify API error.`\n            );\n            trialLeft = MAX_SHOPIFY_API_TRIAL_DAYS;\n        }\n\n        const { confirmation_url } = await initiateRecurringCharge(shopify, redirectUrl, isFirstDay, trialLeft);\n        res.status(200).json({\n            billing_url: confirmation_url,\n        });\n    } catch (err) {\n        console.log(`error:`, err);\n    }\n}\n\n// Trial date count\nexport const TRIAL_DAYS = 30;\n\nexport const initiateRecurringCharge = async (shopify, redirectUrl, isFirstDay, trialLeft) => {\n    // Create the recurring charge object\n    try {\n        // For fetching shop development status\n        const {\n            shop: {\n                plan: { partnerDevelopment: isPartnerDevelopment },\n            },\n        } = await shopify.graphql(partnerDevelopmentQuery);\n\n        const chargeParams = {\n            capped_amount: maxTotalPrice,\n            name: BILLING_V2_NAME,\n            price: 0,\n            return_url: redirectUrl,\n            test: isPartnerDevelopment,\n            trial_days: isFirstDay ? TRIAL_DAYS : Math.max(trialLeft, 0),\n            terms: 'FREE up to 50 orders per month then starts at $7.99',\n        };\n        const { id: charge_id, confirmation_url } = await shopify.recurringApplicationCharge\n            .create(chargeParams)\n            .catch((err) => {\n                console.log(`Error from RecurringCharge`, err);\n                return false;\n            });\n\n        return { charge_id, confirmation_url };\n    } catch (err) {\n        console.log(`error:`, err);\n    }\n};",
                "filename": "web/server/src/modules/legacy-billing/legacy-billing.controller.ts",
                "start_index": 3329,
                "end_index": 6178,
                "start_line": 82,
                "end_line": 151,
                "max_line": 151,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export const AUTH_ROUTE_REDIRECT_OFFLINE = '/redirect/offline';\nexport const AUTH_ROUTE_REDIRECT_ONLINE = '/redirect/online';\n/**\n * NOTE: this route needs to be configured in the Shopify app settings. If we need\n * to change this route for any reason, we will need to ensure that we update\n * the Shopify app settings as well before deployment to allow the new route.\n */\nexport const AUTH_ROUTE_CALLBACK = '/callback';",
                "filename": "web/server/src/modules/oauth/oauth.constants.ts",
                "start_index": 0,
                "end_index": 420,
                "start_line": 1,
                "end_line": 8,
                "max_line": 8,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import * as Sentry from '@sentry/node';\nimport crypto from 'crypto';\nimport type { RequestHandler } from 'express';\nimport { envVar } from '../env';\n\nexport const authWebhooksMiddleware: RequestHandler = (req, res, next) => {\n    const hmacHeader = req.get('X-Shopify-Hmac-SHA256');\n    const rawBody: string = (req as any).rawBody;\n\n    const { isValidHmac } = validateHmac({ hmacHeader, rawBody });\n\n    if (isValidHmac) {\n        Sentry.setTag('shop', req.get('X-Shopify-Shop-Domain'));\n        return next();\n    } else {\n        return res.status(401).send('Unable to verify request HMAC');\n    }\n};\n\nfunction validateHmac({ hmacHeader, rawBody }: { hmacHeader: string | undefined; rawBody: string }): {\n    isValidHmac: boolean;\n} {\n    const shopifyApiSecret = envVar('SHOPIFY_API_SECRET');\n    const shopifyApiSecretOldForRotation = envVar('SHOPIFY_API_SECRET_OLD_FOR_ROTATION');\n\n    if (hmacHeader === hmac({ secret: shopifyApiSecret, content: rawBody })) {\n        return { isValidHmac: true };\n    }\n    if (\n        shopifyApiSecretOldForRotation &&\n        hmacHeader === hmac({ secret: shopifyApiSecretOldForRotation, content: rawBody })\n    ) {\n        return { isValidHmac: true };\n    }\n\n    return { isValidHmac: false };\n}\n\nfunction hmac({ secret, content }: { secret: string; content: string }): string {\n    return crypto.createHmac('sha256', secret).update(content, 'utf8').digest('base64');\n}",
                "filename": "web/server/src/modules/auth-webhooks/auth-webhooks.middleware.ts",
                "start_index": 0,
                "end_index": 1416,
                "start_line": 1,
                "end_line": 41,
                "max_line": 41,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "// @ts-nocheck\nimport { Shopify } from '@shopify/shopify-api';\nimport User from '../users/users.model';\nimport { AdminStores } from './admin-stores.model';\n\n/**\n * Function to overwrite current session with Merchant session\n */\nexport async function merchantAccessLogin(req, res, next) {\n    try {\n        const { shop: shopToAccess } = req.query;\n        const { shop: currentShop } = req.session;\n\n        const adminStore = await AdminStores.findOne({ shop: currentShop });\n\n        if (!adminStore) {\n            return res.json({ status: 'error', message: `This store does not have access` });\n        }\n\n        //If the store is not a super admin, check individual access\n        if (!adminStore.isSuperAdmin) {\n            const hasAccess = adminStore.allowedStores.some((store) => store === shopToAccess);\n            if (!hasAccess) {\n                return res.json({ status: 'error', message: `This store does not have access` });\n            }\n        }\n\n        // Get details of the merchant to log in\n        const merchantDetails = await User.findOne({ myshopify_domain: shopToAccess }).lean();\n\n        if (!merchantDetails) {\n            return res.json({ status: 'error', message: 'Merchant does not exist' });\n        }\n        if (!merchantDetails.is_active) {\n            return res.json({ status: 'error', message: 'Merchant is not active' });\n        }\n\n        const currentSession = req.session;\n        req.session.savedSessionBeforeAdmin = { ...currentSession };\n        req.session.accessToken = merchantDetails.accessToken;\n        req.session.shop = shopToAccess;\n        await Shopify.Utils.storeSession(req.session);\n\n        return res.json({ status: 'success', redirectTo: '/' });\n    } catch (err) {\n        console.log(`Error from dev mode`, err);\n        // Pass error to global error handler\n        next(err);\n    }\n}\n\nexport async function merchantAccessLogout(req, res) {\n    const previousSession = req.session.savedSessionBeforeAdmin;\n    if (previousSession) {\n        const newSession = { ...previousSession };\n        await Shopify.Utils.storeSession(newSession);\n    }\n    return res.json({ status: 'success', redirectTo: '/' });\n}",
                "filename": "web/server/src/modules/admin-stores/admin-stores.controller.ts",
                "start_index": 0,
                "end_index": 2180,
                "start_line": 1,
                "end_line": 59,
                "max_line": 59,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export async function getPayoutInvoices({\n    appInstallationId,\n}: {\n    appInstallationId: string;\n}): Promise<GetPayoutInvoicesResponseType> {\n    return fetch(`https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/payouts/invoices`, {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n        },\n    }).then((res) => res.json());\n}\n\nexport async function getPayoutInvoicePdf({\n    appInstallationId,\n    invoiceId,\n}: {\n    appInstallationId: string;\n    invoiceId: string;\n}): Promise<GetPayoutInvoicePdfResponseType> {\n    return fetch(\n        `https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/payouts/invoices/${invoiceId}/pdf`,\n        {\n            headers: {\n                'Content-Type': 'application/pdf',\n                Accept: 'application/pdf',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n        }\n    ).then((res) => res.text());\n}\n\nexport async function getPaymentMethod({\n    appInstallationId,\n}: {\n    appInstallationId: string;\n}): Promise<GetPaymentMethodResponseType> {\n    return fetch(`https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/payment-method`, {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n        },\n    }).then((res) => res.json());\n}\n\nexport async function updatePaymentMethod({\n    appInstallationId,\n    body,\n}: {\n    appInstallationId: string;\n    body: UpdatePaymentMethodBodyType;\n}): Promise<UpdatePaymentMethodResponseType> {\n    return fetch(`https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/payment-method`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n        },\n        body: JSON.stringify(body),\n    }).then((res) => {\n        if (res.status === 200) {\n            return { success: true };\n        }\n        return res.json();\n    });\n}",
                "filename": "web/server/src/modules/rokt/rokt.api.ts",
                "start_index": 13521,
                "end_index": 15690,
                "start_line": 457,
                "end_line": 522,
                "max_line": 522,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "reranked_doc_snippets_initial": [
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/server` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 999,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Shopify Function development with Rust\n\n## Dependencies\n\n-   [Install Rust](https://www.rust-lang.org/tools/install)\n    -   On Windows, Rust requires the [Microsoft C++ Build Tools](https://docs.microsoft.com/en-us/windows/dev-environment/rust/setup). Be sure to select the _Desktop development with C++_ workload when installing them.\n-   Install [`cargo-wasi`](https://bytecodealliance.github.io/cargo-wasi/)\n    -   `cargo install cargo-wasi`\n-   On Macs with Apple Silicon, you'll also need to install the Binaryen toolchain and set the `WASM_OPT` environment variable. ([related issue](https://github.com/bytecodealliance/cargo-wasi/issues/112))\n    -   `brew install binaryen`\n    -   Add `export WASM_OPT=/opt/homebrew/bin/wasm-opt` to your `.bashrc` or `.zshrc`\n\n## Building the function\n\nYou can build this individual function using `cargo wasi`.\n\n```shell\ncargo wasi build --release\n```\n\nThe Shopify CLI `build` command will also execute this, based on the configuration in `shopify.function.extension.toml`.\n\n## Testing\n\n> Requires Node v16+\n\n1. Create a temporary JSON file (e.g., `a.json`) in the following format:\n\n```json\n{\n    \"data\": {\n        \"foo\": \"bar\"\n    },\n    \"secretKey\": \"abc123\"\n}\n```\n\n2. Run the following command\n\n```\nyarn test:new-hmac < a.json\n```\n\n3. Copy the generated HMAC into the test file",
                "filename": "extensions/upsell-offer-discount-function/README.md",
                "start_index": 0,
                "end_index": 1329,
                "start_line": 1,
                "end_line": 44,
                "max_line": 44,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# [[[ --- CLIENT --- ]]]\nFROM node:18.16.1-alpine AS client\nARG SHOPIFY_API_KEY\nENV SHOPIFY_API_KEY=$SHOPIFY_API_KEY\nARG HOST\nENV HOST=$HOST\nARG NODE_ENV\nENV NODE_ENV=$NODE_ENV\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/client/package.json ./web/client/package.json\nCOPY web/client/yarn.lock ./web/client/yarn.lock\nRUN cd web/client && yarn install --frozen-lockfile --production=false\nCOPY extensions-web-common/package.json ./extensions-web-common/package.json\nCOPY extensions-web-common/yarn.lock ./extensions-web-common/yarn.lock\nRUN cd extensions-web-common && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY extensions/post-purchase ./extensions/post-purchase\nCOPY extensions-web-common/post-purchase ./extensions-web-common/post-purchase\nCOPY extensions-web-common/checkout ./extensions-web-common/checkout\nCOPY extensions-web-common/shared ./extensions-web-common/shared\nCOPY extensions-web-common/ty-page ./extensions-web-common/ty-page\nCOPY web/client ./web/client\nRUN cd web/client && yarn build\n\n# [[[ --- TY PAGE --- ]]]\nFROM node:18.16.1-alpine AS ty-page\nARG HOST\nENV HOST=$HOST\nWORKDIR /usr/src/app\nCOPY web/widgets/package.json ./web/widgets/package.json\nCOPY web/widgets/yarn.lock ./web/widgets/yarn.lock\nRUN cd web/widgets && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY web/widgets ./web/widgets\nRUN cd web/widgets && yarn build\n\n# [[[ --- SERVER --- ]]]\nFROM node:18.16.1-alpine AS server\nWORKDIR /usr/src/app\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=false\nCOPY web/server ./web/server\nCOPY web/common ./web/common\nRUN cd web/server && yarn build\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM node:18.16.1-alpine AS final\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=true\nCOPY --from=server /usr/src/app/web/server/build ./web/server/build\nCOPY --from=ty-page /usr/src/app/web/widgets/dist ./web/server/build/server/dist\nCOPY --from=client /usr/src/app/web/client/dist ./web/server/build/server/dist/client\nCOPY package.json ./package.json\nCMD [\"yarn\", \"start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2514,
                "start_line": 1,
                "end_line": 61,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <!-- Shopify App Bridge [START] -->\n        <meta name=\"shopify-api-key\" content=\"%SHOPIFY_API_KEY%\" />",
                "filename": "web/client/index.html",
                "start_index": 38,
                "end_index": 156,
                "start_line": 4,
                "end_line": 6,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script>\n            !(function (f, b, e, v, n, t, s) {\n                if (f.fbq) return;\n                n = f.fbq = function () {\n                    n.callMethod ? n.callMethod.apply(n, arguments) : n.queue.push(arguments);\n                };\n                if (!f._fbq) f._fbq = n;\n                n.push = n;\n                n.loaded = !0;\n                n.version = '2.0';\n                n.queue = [];\n                t = b.createElement(e);\n                t.async = !0;\n                t.src = v;\n                s = b.getElementsByTagName(e)[0];\n                s.parentNode.insertBefore(t, s);\n            })(window, document, 'script', 'https://connect.facebook.net/en_US/fbevents.js');\n            fbq('init', '895262111044943');\n            fbq('track', 'PageView');\n        </script>\n        <!-- End Facebook Pixel Code -->\n        <!-- Reddit Pixel -->\n        <script>\n            !(function (w, d) {\n                if (!w.rdt) {\n                    var p = (w.rdt = function () {\n                        p.sendEvent ? p.sendEvent.apply(p, arguments) : p.callQueue.push(arguments);\n                    });\n                    p.callQueue = [];\n                    var t = d.createElement('script');\n                    (t.src = 'https://www.redditstatic.com/ads/pixel.js'), (t.async = !0);\n                    var s = d.getElementsByTagName('script')[0];\n                    s.parentNode.insertBefore(t, s);\n                }\n            })(window, document);\n            rdt('init', 't2_dp3wj8bg');\n            rdt('track', 'PageVisit');\n        </script>\n        <!-- End Reddit Pixel -->\n\n        <!-- Dev HMR [START] -->\n        <script type=\"module\">\n            if (!import.meta.env || !import.meta.env.PROD) {\n                // For embedded development, the iframe loads an HTML file from the server. Normally for\n                // development, the HTML file is served by the dev server, which injects the HMR script.\n                // This script adds the HMR script to the iframe to allow HMR in embedded development.\n                const script = document.createElement('script');\n                script.setAttribute('type', 'module');\n                script.setAttribute('src', './src/dev-hmr.ts');\n                document.getElementsByTagName('head')[0].append(script);\n            }\n        </script>\n        <!-- Dev HMR [END] -->\n\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com/\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" crossorigin=\"anonymous\" />\n        <link\n            href=\"https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap\"\n        />\n    </head>",
                "filename": "web/client/index.html",
                "start_index": 6232,
                "end_index": 8924,
                "start_line": 7,
                "end_line": 178,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<svg\n                                                                    class=\"product-thumbnail__image\"\n                                                                    width=\"32\"\n                                                                    height=\"32\"\n                                                                    viewBox=\"0 0 32 32\"\n                                                                    fill=\"none\"\n                                                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                                                >\n                                                                    <path\n                                                                        fill-rule=\"evenodd\"\n                                                                        clip-rule=\"evenodd\"\n                                                                        d=\"M27.2 28.8C26.3184 28.8 25.6 28.0816 25.6 27.2C25.6 26.3184 26.3184 25.6 27.2 25.6C28.0816 25.6 28.8 26.3184 28.8 27.2C28.8 28.0816 28.0816 28.8 27.2 28.8ZM6.4 27.2C6.4 28.0816 5.6816 28.8 4.8 28.8C3.9184 28.8 3.2 28.0816 3.2 27.2C3.2 26.3184 3.9184 25.6 4.8 25.6C5.6816 25.6 6.4 26.3184 6.4 27.2ZM28.2656 9.34549L26.0464 15.9999H6.4V6.61269L28.2656 9.34549ZM27.2 22.4H6.4V19.2H27.2C27.8896 19.2 28.4992 18.76 28.7184 18.1056L31.9184 8.5056C32.0688 8.0512 32.0096 7.552 31.7536 7.1472C31.4976 6.7408 31.0736 6.472 30.5984 6.4128L6.4 3.3872V1.6C6.4 0.7168 5.6832 0 4.8 0H1.6C0.7168 0 0 0.7168 0 1.6C0 2.4832 0.7168 3.2 1.6 3.2H3.2V22.6944C1.3408 23.3584 0 25.1168 0 27.2C0 29.8464 2.1536 32 4.8 32C7.4464 32 9.6 29.8464 9.6 27.2C9.6 26.6352 9.4848 26.1024 9.3056 25.6H22.6944C22.5152 26.1024 22.4 26.6352 22.4 27.2C22.4 29.8464 24.5536 32 27.2 32C29.8464 32 32 29.8464 32 27.2C32 24.5536 29.8464 22.4 27.2 22.4Z\"\n                                                                        fill=\"#637381\"\n                                                                    />",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 326131,
                "end_index": 328135,
                "start_line": 6099,
                "end_line": 6353,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"hidden\">\n                            <span class=\"visually-hidden\" id=\"forwarding-external-new-window-message\">\n                                Opens external website in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-new-window-message\">\n                                Opens in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-external-message\">\n                                Opens external website.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"checkout-context-step-one\">\n                                Customer information - Checkout\n                            </span>\n                        </div>\n                    </main>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 322226,
                "end_index": 323078,
                "start_line": 6265,
                "end_line": 6282,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<mask\n                                                                        id=\"mask0\"\n                                                                        mask-type=\"alpha\"\n                                                                        maskUnits=\"userSpaceOnUse\"\n                                                                        x=\"0\"\n                                                                        y=\"0\"\n                                                                        width=\"32\"\n                                                                        height=\"32\"\n                                                                    >\n                                                                        <path\n                                                                            fill-rule=\"evenodd\"\n                                                                            clip-rule=\"evenodd\"\n                                                                            d=\"M27.2 28.8C26.3184 28.8 25.6 28.0816 25.6 27.2C25.6 26.3184 26.3184 25.6 27.2 25.6C28.0816 25.6 28.8 26.3184 28.8 27.2C28.8 28.0816 28.0816 28.8 27.2 28.8ZM6.4 27.2C6.4 28.0816 5.6816 28.8 4.8 28.8C3.9184 28.8 3.2 28.0816 3.2 27.2C3.2 26.3184 3.9184 25.6 4.8 25.6C5.6816 25.6 6.4 26.3184 6.4 27.2ZM28.2656 9.34549L26.0464 15.9999H6.4V6.61269L28.2656 9.34549ZM27.2 22.4H6.4V19.2H27.2C27.8896 19.2 28.4992 18.76 28.7184 18.1056L31.9184 8.5056C32.0688 8.0512 32.0096 7.552 31.7536 7.1472C31.4976 6.7408 31.0736 6.472 30.5984 6.4128L6.4 3.3872V1.6C6.4 0.7168 5.6832 0 4.8 0H1.6C0.7168 0 0 0.7168 0 1.6C0 2.4832 0.7168 3.2 1.6 3.2H3.2V22.6944C1.3408 23.3584 0 25.1168 0 27.2C0 29.8464 2.1536 32 4.8 32C7.4464 32 9.6 29.8464 9.6 27.2C9.6 26.6352 9.4848 26.1024 9.3056 25.6H22.6944C22.5152 26.1024 22.4 26.6352 22.4 27.2C22.4 29.8464 24.5536 32 27.2 32C29.8464 32 32 29.8464 32 27.2C32 24.5536 29.8464 22.4 27.2 22.4Z\"\n                                                                            fill=\"white\"\n                                                                        />\n                                                                    </mask>\n                                                                    <g mask=\"url(#mask0)\"></g>\n                                                                </svg>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 328204,
                "end_index": 330541,
                "start_line": 6339,
                "end_line": 6356,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"step__sections\">\n                                <div class=\"section\">\n                                    <div class=\"section__header os-header\">\n                                        <svg\n                                            width=\"56\"\n                                            height=\"56\"\n                                            viewBox=\"0 0 56 56\"\n                                            fill=\"none\"\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                            <circle cx=\"28\" cy=\"28\" r=\"26\" stroke=\"#E5E5E5\" stroke-width=\"2.29412\" />\n                                            <path\n                                                fill-rule=\"evenodd\"\n                                                clip-rule=\"evenodd\"\n                                                d=\"M22.4811 37.3603L16.3636 31.3947C15.5663 30.6172 15.5663 29.3605 16.3636 28.583C17.1609 27.8055 18.4497 27.8055 19.247 28.583L23.8066 33.0293L36.6493 18.7538C37.3834 17.9186 38.6701 17.8231 39.5225 18.537C40.379 19.2529 40.4789 20.5056 39.7448 21.3388L25.4706 37.2469C25.1015 37.6685 24.5672 37.9191 24.0003 37.9409C23.3825 37.9429 22.8625 37.7341 22.4811 37.3603Z\"\n                                                fill=\"#008060\"\n                                                stroke=\"#E5E5E5\"\n                                                stroke-width=\"0.764706\"\n                                            />\n                                        </svg>\n                                        <div class=\"os-header__heading\">\n                                            <span class=\"os-order-number\"> Order #1001 </span>\n                                            <h2 class=\"os-header__title\" id=\"main-header\" tabindex=\"-1\">\n                                                Thank you {{Customer Name}}!\n                                            </h2>\n                                        </div>\n                                    </div>\n                                </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245858,
                "end_index": 247957,
                "start_line": 6161,
                "end_line": 6451,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<html\n    lang=\"en\"\n    dir=\"ltr\"\n    class=\"js desktop page--no-banner page--logo-main page--show page--show card-fields cors svg opacity placeholder no-touchevents displaytable display-table generatedcontent cssanimations flexbox no-flexboxtweener anyflexbox shopemoji floating-labels\"\n>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 0,
                "end_index": 289,
                "start_line": 1,
                "end_line": 6518,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <meta charset=\"utf-8\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n        <meta\n            id=\"thankyoupage_viewport_meta\"\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, user-scalable=0\"\n        />\n        <meta name=\"referrer\" content=\"origin\" />\n\n        <title>Thank you! - Checkout</title>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 294,
                "end_index": 717,
                "start_line": 6,
                "end_line": 16,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<span class=\"order-summary-toggle__inner\">\n                        <span class=\"order-summary-toggle__icon-wrapper\">\n                            <svg\n                                width=\"20\"\n                                height=\"19\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__icon\"\n                            >\n                                <path\n                                    d=\"M17.178 13.088H5.453c-.454 0-.91-.364-.91-.818L3.727 1.818H0V0h4.544c.455 0 .91.364.91.818l.09 1.272h13.45c.274 0 .547.09.73.364.18.182.27.454.18.727l-1.817 9.18c-.09.455-.455.728-.91.728zM6.27 11.27h10.09l1.454-7.362H5.634l.637 7.362zm.092 7.715c1.004 0 1.818-.813 1.818-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817zm9.18 0c1.004 0 1.817-.813 1.817-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--show\">\n                            <span>Show order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"6\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M.504 1.813l4.358 3.845.496.438.496-.438 4.642-4.096L9.504.438 4.862 4.534h.992L1.496.69.504 1.812z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--hide\">\n                            <span>Hide order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"7\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M6.138.876L5.642.438l-.496.438L.504 4.972l.992 1.124L6.138 2l-.496.436 3.862 3.408.992-1.122L6.138.876z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span\n                            class=\"order-summary-toggle__total-recap total-recap\"\n                            data-order-summary-section=\"toggle-total-recap\"\n                        >\n                            <span class=\"total-recap__final-price\" data-checkout-payment-due-target=\"5073\">$50.73</span>\n                        </span>\n                    </span>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 242214,
                "end_index": 245205,
                "start_line": 6097,
                "end_line": 6446,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div\n                            id=\"partial-icon-symbols\"\n                            class=\"icon-symbols\"\n                            data-tg-refresh=\"partial-icon-symbols\"\n                            data-tg-refresh-always=\"true\"\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\">\n                                <symbol id=\"down-arrow\">\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 12 12\">\n                                        <path\n                                            d=\"M10.817 7.624l-4.375 4.2c-.245.235-.64.235-.884 0l-4.375-4.2c-.244-.234-.244-.614 0-.848.245-.235.64-.235.884 0L5.375 9.95V.6c0-.332.28-.6.625-.6s.625.268.625.6v9.35l3.308-3.174c.122-.117.282-.176.442-.176.16 0 .32.06.442.176.244.234.244.614 0 .848\"\n                                        ></path>\n                                    </svg>\n                                </symbol>\n                                <symbol id=\"checkmark\">\n                                    <svg\n                                        xmlns=\"http://www.w3.org/2000/svg\"\n                                        viewBox=\"0 0 50 50\"\n                                        fill=\"none\"\n                                        stroke-width=\"2\"\n                                        class=\"checkmark\"\n                                    >\n                                        <path\n                                            class=\"checkmark__circle\"\n                                            d=\"M25 49c13.255 0 24-10.745 24-24S38.255 1 25 1 1 11.745 1 25s10.745 24 24 24z\"\n                                        ></path>\n                                        <path class=\"checkmark__check\" d=\"M15 24.51l7.307 7.308L35.125 19\"></path>\n                                    </svg>\n                                </symbol>\n                                <symbol id=\"spinner-button\">\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                                        <path\n                                            d=\"M20 10c0 5.523-4.477 10-10 10S0 15.523 0 10 4.477 0 10 0v2c-4.418 0-8 3.582-8 8s3.582 8 8 8 8-3.582 8-8h2z\"\n                                        ></path>\n                                    </svg>\n                                </symbol>\n                            </svg>\n                        </div>\n                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 337185,
                "end_index": 339656,
                "start_line": 6081,
                "end_line": 6493,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<tr\n                                                    class=\"product\"\n                                                    data-product-id=\"4330495803489\"\n                                                    data-variant-id=\"31055496183905\"\n                                                    data-product-type=\"Bracelet\"\n                                                    data-customer-ready-visible=\"\"\n                                                >",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 325343,
                "end_index": 325797,
                "start_line": 6303,
                "end_line": 6444,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<body class=\"aftersell-preview\">\n        <a href=\"#main-header\" class=\"skip-to-content\"> Skip to content </a>\n\n        <header class=\"banner\" data-header=\"\" role=\"banner\">\n            <div class=\"wrap\">\n                <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n            </div>\n        </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241387,
                "end_index": 241804,
                "start_line": 6077,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script defer src=\"./thankyoupage_bundle.js?v2\"></script>\n        <script defer src=\"/apps/aftersell_sdk.bundle.min.js?v2\"></script>\n    </head>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241237,
                "end_index": 241381,
                "start_line": 6073,
                "end_line": 6075,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box__row text-container\">\n                                                <h2 class=\"heading-2 os-step__title\" id=\"main-header\" tabindex=\"-1\">\n                                                    Your order is confirmed\n                                                </h2>\n                                                <p class=\"os-step__description\">\n                                                    You\u2019ll receive an email when your order is ready.\n                                                </p>\n                                            </div>\n                                        </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 317828,
                "end_index": 318454,
                "start_line": 6200,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box\">\n                                            <div class=\"content-box__row content-box__row--no-border\">\n                                                <h2>Customer information</h2>\n                                            </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318496,
                "end_index": 318753,
                "start_line": 6192,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "solution_task": {
            "structured_resp": "Clarify:\nThe task is to update the authentication method in the `authService.js` file to use basic authentication with EdgeGateway. The username and password for constructing the Base64 encoded user ID are available in 1Password. The pull request #1024 by `devJaneDoe` contains the changes, and the team is currently reviewing and testing it in a staging environment.\n\nHypothesize:\n- The issue might be related to incorrect implementation of the basic authentication header in the `authService.js` file.\n- There could be a problem with how the username and password are being retrieved and concatenated before encoding.\n- The Base64 encoding process might be incorrect or not applied.\n- The changes might not be compatible with the EdgeGateway authentication requirements.\n\nExperiment:\n- Review the changes in the `authService.js` file within pull request #1024 to ensure the basic authentication header is correctly implemented.\n- Check the retrieval and concatenation process of the username and password from the configuration object.\n- Verify the Base64 encoding is correctly applied to the \"username:password\" string.\n- Test the updated authentication method against the EdgeGateway in the staging environment.\n\nAnalyze:\n- Confirm that the basic authentication header follows the pattern `Authorization: Basic base64(\"username:password\")`.\n- Ensure that the username and password are correctly retrieved from the configuration object and concatenated with a colon.\n- Check that the Base64 encoding is correctly applied without any additional characters or encoding issues.\n- Ensure that the EdgeGateway accepts the basic authentication method and that the credentials provided are correct and have the necessary permissions.\n\nResolve:\n- In the `authService.js` file, replace the bearer token in the authorization header with the basic authentication header as follows:\n  ```typescript\n  const base64Credentials = Buffer.from(`${username}:${password}`).toString('base64');\n  const authHeader = `Basic ${base64Credentials}`;\n  ```\n- Ensure that the `username` and `password` variables are correctly assigned from the configuration object, which should be securely stored and retrieved, possibly from environment variables or a secure vault like 1Password.\n- Test the updated `authService.js` in the staging environment by making requests to the EdgeGateway to confirm that the authentication is successful.\n- If the EdgeGateway requires additional headers or specific formats, adjust the `authService.js` implementation accordingly.\n- Once the changes are verified in the staging environment, proceed with merging the pull request after all reviews and CI checks pass.",
            "response": "To enhance the security of our system, we are transitioning the authentication method in our `authService.js` to utilize basic authentication when interfacing with EdgeGateway. This update is crucial for maintaining secure communication and ensuring that our credentials are handled correctly. The necessary credentials are securely stored and ready for use. The following steps outline the implementation and testing process to ensure a smooth transition:\n\n- Update the authentication header in `authService.js` to use basic authentication by encoding the username and password in Base64:\n  ```typescript\n  const base64Credentials = Buffer.from(`${username}:${password}`).toString('base64');\n  const authHeader = `Basic ${base64Credentials}`;\n  ```\n- Retrieve the `username` and `password` from a secure source, ensuring they are correctly assigned from the configuration object or a secure vault like 1Password.\n- Conduct tests in the staging environment to verify that the EdgeGateway authentication process is functioning correctly with the new method.\n- Adjust the implementation to meet any additional requirements or specific formats mandated by the EdgeGateway.\n- After successful verification in the staging environment and approval from the review process, merge the pull request to deploy the changes."
        },
        "snippet_processor_task": {
            "web/server/src/modules/rokt/rokt.api.ts": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Functions related to Rokt API interactions with authorization headers using Bearer tokens, potential area for updating to use basic authentication with Base64 encoded user ID.",
                        "snippet": {
                            "code": "export async function getPayoutInvoices({\n    appInstallationId,\n}: {\n    appInstallationId: string;\n}): Promise<GetPayoutInvoicesResponseType> {\n    return fetch(`https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/payouts/invoices`, {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n        },\n    }).then((res) => res.json());\n}\n\nexport async function getPayoutInvoicePdf({\n    appInstallationId,\n    invoiceId,\n}: {\n    appInstallationId: string;\n    invoiceId: string;\n}): Promise<GetPayoutInvoicePdfResponseType> {\n    return fetch(\n        `https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/payouts/invoices/${invoiceId}/pdf`,\n        {\n            headers: {\n                'Content-Type': 'application/pdf',\n                Accept: 'application/pdf',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n        }\n    ).then((res) => res.text());\n}\n\nexport async function getPaymentMethod({\n    appInstallationId,\n}: {\n    appInstallationId: string;\n}): Promise<GetPaymentMethodResponseType> {\n    return fetch(`https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/payment-method`, {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n        },\n    }).then((res) => res.json());\n}\n\nexport async function updatePaymentMethod({\n    appInstallationId,\n    body,\n}: {\n    appInstallationId: string;\n    body: UpdatePaymentMethodBodyType;\n}): Promise<UpdatePaymentMethodResponseType> {\n    return fetch(`https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/payment-method`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n        },\n        body: JSON.stringify(body),\n    }).then((res) => {\n        if (res.status === 200) {\n            return { success: true };\n        }\n        return res.json();\n    });\n}",
                            "filename": "web/server/src/modules/rokt/rokt.api.ts",
                            "start_index": 13521,
                            "end_index": 15690,
                            "start_line": 457,
                            "end_line": 522,
                            "max_line": 522,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "The snippet involves Rokt API interactions with authorization headers using Bearer tokens, which is the area that needs to be updated to use basic authentication with Base64 encoded user ID as part of the switch to EdgeGateway authentication."
                }
            ]
        },
        "bouncer_response": {
            "score": 5,
            "criteria": "The RESPONSE should provide actionable and relevant guidance to address the software bug as described in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable step-by-step guide for transitioning the authentication method to use basic authentication with EdgeGateway, which is relevant to the PROMPT's description of the software update. It includes code snippets for updating the `authService.js` file and suggests retrieving credentials from a secure source, which aligns with the information provided in the PROMPT. The RESPONSE also advises testing in a staging environment and adjusting the implementation as needed, which is a practical approach to ensure the new authentication method works correctly. However, the RESPONSE includes a section titled 'Code snippets to check' with links that appear to be placeholders and do not provide actionable value. These links do not correspond to any real repositories or lines of code and seem to be irrelevant to the actual task at hand. Additionally, the RESPONSE does not address the comments from the team members in the GitHub pull request screenshot, such as the need for clarification on testing with the EdgeGateway in a staging environment or the QA team's need to update their test cases.",
            "clarification_questions": "NONE"
        },
        "end_time": 1714258147.120606,
        "result": "Doesn't seem like we have fully grasped all the specifics of this ticket \ud83e\udd14.                   But we've outlined some ideas that might help you get started:\n\nTo enhance the security of our system, we are transitioning the authentication method in our `authService.js` to utilize basic authentication when interfacing with EdgeGateway. This update is crucial for maintaining secure communication and ensuring that our credentials are handled correctly. The necessary credentials are securely stored and ready for use. The following steps outline the implementation and testing process to ensure a smooth transition:\n\n- Update the authentication header in `authService.js` to use basic authentication by encoding the username and password in Base64:\n  ```typescript\n  const base64Credentials = Buffer.from(`${username}:${password}`).toString('base64');\n  const authHeader = `Basic ${base64Credentials}`;\n  ```\n- Retrieve the `username` and `password` from a secure source, ensuring they are correctly assigned from the configuration object or a secure vault like 1Password.\n- Conduct tests in the staging environment to verify that the EdgeGateway authentication process is functioning correctly with the new method.\n- Adjust the implementation to meet any additional requirements or specific formats mandated by the EdgeGateway.\n- After successful verification in the staging environment and approval from the review process, merge the pull request to deploy the changes.\n\n### Code snippets to check\n\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [server](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src) \u2192 [modules](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules) \u2192 [rokt](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/rokt)- [Lines 457 - 522](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/rokt/rokt.api.ts#L457-L522)\n\n The snippet involves Rokt API interactions with authorization headers using Bearer tokens, which is the area that needs to be updated to use basic authentication with Base64 encoded user ID as part of the switch to EdgeGateway authentication."
    }
}