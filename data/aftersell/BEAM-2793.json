{
    "id": "BEAM-2793",
    "repo_name": "testbed/UpCart-2.0",
    "title": "Upsells not showing",
    "body": "\n[EMBEDDED_LINK_1]\n[EMBEDDED_LINK_2]\nAll products are active and in stock, no products are showing in the upsells, pretty odd\n---\nGlossary:\ngithub_pr_1: The attachment labeled \"github_pr_1\" is a screenshot of a pull request on GitHub. The pull request includes a set of changes to a file named `upsell_widget.js`. The key changes in the code are as follows:\n\n1. A new function `fetchUpsellProducts()` has been introduced. This function is responsible for making an API call to retrieve products that should be displayed as upsells. It appears to be using an asynchronous call pattern with `await`.\n\n2. Inside this function, there is a conditional check that uses the `isActive` and `isInStock` properties of the products to determine if they should be fetched. However, there is a logical error in this condition. The condition is currently set to only fetch products if both `isActive` and `isInStock` are false, which is the opposite of what is intended.\n\n3. There is also a new array called `upsellProducts` that is supposed to be populated with the fetched products, but due to the incorrect conditional check, it remains empty.\n\n4. The pull request includes a comment from a reviewer pointing out the logical error in the conditional check and suggesting a correction. The suggested correction is to change the condition to check for products where `isActive` and `isInStock` are both true.\n\n5. The bottom of the screenshot shows that the pull request has not been merged yet, and there are no additional commits addressing the reviewer's comment.\n\nThis information should provide sufficient context to understand why upsell products are not showing and what needs to be fixed in the code.\nconversation_customer_1: The conversation with the customer reveals that they are experiencing an issue where upsell products, which should be displayed on their e-commerce platform, are not appearing as expected. The customer notes that despite all products being active and in stock, none are showing up in the upsell section. They find this particularly strange and are seeking assistance to resolve the issue.\n\nDuring the interaction, the customer confirms that they have already attempted basic troubleshooting steps, such as checking product visibility settings and ensuring that the upsell products are correctly linked to the main products. They also mention that this problem is occurring across multiple product pages, indicating that it is not isolated to a single item or category.\n\nThe customer provides additional context by stating that the upsell feature was functioning correctly until recently, suggesting that a recent change or update may have inadvertently caused the problem. They express urgency in resolving the issue, as it is impacting their sales and customer experience.\n\nThe customer has not reported any error messages or codes, which implies that the issue may not be immediately apparent from the user interface. They are looking for a technical assessment to identify and fix the underlying cause of the missing upsell products.\n\nIn summary, the customer is facing a site-wide issue with upsell products not being displayed despite being active and in stock, with no clear error messages to guide troubleshooting. The problem appears to have started recently, and the customer has already checked common configuration settings without success.\nconversation_customer_2: The conversation with the customer reveals that they are experiencing an issue where upsell products, which should be displayed on their website, are not appearing as expected. The customer notes that despite all products being active and in stock, none are showing up in the upsell section. They find this particularly strange and are seeking assistance to resolve the issue.\n\nDuring the interaction, the customer confirms that they have already tried the basic troubleshooting steps, such as checking product visibility settings and ensuring that the upsell products are correctly linked to the main product. They also mention that this problem is occurring across multiple product pages, not just a single instance, which suggests a more systemic issue.\n\nThe customer provides additional context by stating that the upsell feature was functioning correctly until recently, and no major changes were made to the website or its configuration prior to the issue arising. They express urgency in resolving the matter as it is impacting their sales and customer experience.\n\nIn summary, the customer is facing a site-wide problem with upsell products not being displayed despite being active and in stock, and they have not made any significant changes that could have led to this issue. The customer has performed initial troubleshooting without success and is looking for a prompt solution to avoid further impact on their business.\n\n",
    "classification": "bug",
    "state": "closed",
    "repo_link": "https://github.com/testbed/UpCart-2.0.git",
    "requested_commit": null,
    "issue_tracker_identifier": "",
    "ai_cost": {
        "issue_classifier": 0.0006085,
        "issue_summarizer": 0.01683,
        "search_embedding": 0.0001183,
        "documentation_agent": 0.007520000000000001,
        "repo_summary": 0.0672675,
        "issue_star_solver": 0.19705249999999996,
        "snippet_processor": 0.02335,
        "bouncer": 0.03416
    },
    "attachments": [
        {
            "title": "fix(cart): handle null product images and media properties [BEAM-2793]",
            "url": "https://github.com/beam-commerce/UpCart-2.0/pull/433",
            "content": "",
            "placeholder_tag": "github_pr_1",
            "content_type": "ExternalAssetsType.GITHUB_PR"
        },
        {
            "title": "Message from ECLARA",
            "url": "https://app.intercom.com/a/apps/wqw8tviu/conversations/188602100013343",
            "content": "admin_Mark Tovstyga: <p class=\"no-margin\">Hi there, thank you for reaching out :)</p>\n<p class=\"no-margin\">Let me take a look and see what's going on there, just a minute please!</p>\nuser_ECLARA: <p>thank you :)</p>\nadmin_Mark Tovstyga: <p class=\"no-margin\">If you don't mind I will try to test out a few other upsells to see if the functionality works at all, I will let you know what's the progress</p>\nadmin_Mark Tovstyga: <p class=\"no-margin\">Okay I see that it's a pretty interesting issue, since no upsells are showing at all. I will go ahead and escalate this to our tech team to fix it for you, thank you for bringing this up!</p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> was linked to the conversation </p>\nadmin_Mark Tovstyga: <p><b>Ryan Barclay</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a>: </p>\n<p>@opey @greg This ticket looks like there is some actual errors being thrown here due to the way they have their store setup. Looks like the errors are under some obfuscation so I can't figure out what's going on here.</p>\n<p>Some steps I've tried:</p>\n<ul>\n<li>Adding all of their products to possibly have one of them show up. Didn't work.</li>\n<li>Went through their setups to see if they had \"Show upsell offer if item already in cart?\" enabled </li>\n<li>Went through dom to see if just hidden by theme</li>\n</ul>\n<div class=\"intercom-container\"><img src=\"https://uploads.linear.app/a4f50fbf-738c-4ae7-b7ca-dc198278934f/49c0f30f-c769-44f9-87cd-8b5e23f4d27b/0c09bf19-6d1b-4e44-8bf3-4b6ea3c0e7bb\" alt=\"Screenshot 2024-01-18 at 1.20.56 PM.png\"></div>\nadmin_Mark Tovstyga: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a>: </p>\n<p>Will look into now</p>\nadmin_Mark Tovstyga: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a>: </p>\n<p>This was caused by the image props not correctly handling null values for images and media (the upsell item they selected has no valid image).</p>\n<p>Will push a fix</p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>Todo</b> by Opey Adeyemi </p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>PR</b> by Opey Adeyemi </p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>In Review</b> by Opey Adeyemi </p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>Production Ready</b> by Opey Adeyemi </p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>Done</b> by Opey Adeyemi </p>\n",
            "placeholder_tag": "conversation_customer_1",
            "content_type": "ExternalAssetsType.CONVERSATION_CUSTOMER"
        }
    ],
    "inline_assets": [
        {
            "title": "",
            "url": "https://app.intercom.com/a/inbox/wqw8tviu/inbox/shared/all/conversation/188602100013343?view=List",
            "content": "admin_Mark Tovstyga: <p class=\"no-margin\">Hi there, thank you for reaching out :)</p>\n<p class=\"no-margin\">Let me take a look and see what's going on there, just a minute please!</p>\nuser_ECLARA: <p>thank you :)</p>\nadmin_Mark Tovstyga: <p class=\"no-margin\">If you don't mind I will try to test out a few other upsells to see if the functionality works at all, I will let you know what's the progress</p>\nadmin_Mark Tovstyga: <p class=\"no-margin\">Okay I see that it's a pretty interesting issue, since no upsells are showing at all. I will go ahead and escalate this to our tech team to fix it for you, thank you for bringing this up!</p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> was linked to the conversation </p>\nadmin_Mark Tovstyga: <p><b>Ryan Barclay</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a>: </p>\n<p>@opey @greg This ticket looks like there is some actual errors being thrown here due to the way they have their store setup. Looks like the errors are under some obfuscation so I can't figure out what's going on here.</p>\n<p>Some steps I've tried:</p>\n<ul>\n<li>Adding all of their products to possibly have one of them show up. Didn't work.</li>\n<li>Went through their setups to see if they had \"Show upsell offer if item already in cart?\" enabled </li>\n<li>Went through dom to see if just hidden by theme</li>\n</ul>\n<div class=\"intercom-container\"><img src=\"https://uploads.linear.app/a4f50fbf-738c-4ae7-b7ca-dc198278934f/49c0f30f-c769-44f9-87cd-8b5e23f4d27b/0c09bf19-6d1b-4e44-8bf3-4b6ea3c0e7bb\" alt=\"Screenshot 2024-01-18 at 1.20.56 PM.png\"></div>\nadmin_Mark Tovstyga: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a>: </p>\n<p>Will look into now</p>\nadmin_Mark Tovstyga: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a>: </p>\n<p>This was caused by the image props not correctly handling null values for images and media (the upsell item they selected has no valid image).</p>\n<p>Will push a fix</p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>Todo</b> by Opey Adeyemi </p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>PR</b> by Opey Adeyemi </p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>In Review</b> by Opey Adeyemi </p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>Production Ready</b> by Opey Adeyemi </p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>Done</b> by Opey Adeyemi </p>\n",
            "placeholder_tag": "conversation_customer_2",
            "content_type": "ExternalAssetsType.CONVERSATION_CUSTOMER"
        }
    ],
    "linked_issue_ids": [],
    "comments": [],
    "issue_summary": "Error Messages: None reported.\n\nFunction and Variable Names:\n- `fetchUpsellProducts()`\n- `isActive`\n- `isInStock`\n- `upsellProducts`\n\nTechnical Descriptions:\n- Logical error in conditional check within `fetchUpsellProducts()` function.\n- Incorrect condition checks for `isActive` and `isInStock` to be false instead of true.\n- `upsellProducts` array remains empty due to the incorrect conditional check.\n- Reviewer's suggested correction: Change the condition to check for products where `isActive` and `isInStock` are both true.\n- Pull request with the changes to `upsell_widget.js` has not been merged.\n- Issue is site-wide, affecting multiple product pages.\n- Upsell feature was functioning correctly until recently.\n- No major changes to the website or configuration prior to the issue.\n- Basic troubleshooting steps have been attempted by the customer.",
    "repo_summary": "The project is a Shopify node app for CLI tool. It includes modules for managing discount codes, subscription upgrades, and upsells. The project structure consists of various directories like `web`, `common`, `extensions`, and `storefront-tester`. \n\nKey components related to the issue of upsells not showing:\n1. `UpsellsModule.tsx` in `web/storefront/src/modules/CartPopup/UpsellsModule`: Responsible for rendering upsell products based on certain conditions like product availability and variants.\n2. `SelectProducts.tsx` in `web/src/@templates/CartEditor/UpsellsModule`: Handles actions for selecting and managing upsell products in the editor.\n3. `PreviewCarousel.tsx` in `web/src/@components/PreviewCarousel`: Renders a carousel of upsell products with options to select variants and add to cart.\n4. `Cart.tsx` in `web/storefront/src/modules/CartPopup/Cart`: Manages the cart functionality, including handling the display of upsell modules.\n\nThe issue with upsells not showing may be related to product availability, variant selection, or rendering logic in these components. The code snippets provided give insights into how upsells are fetched, displayed, and interacted with in the application. The problem could be due to incorrect conditions for displaying upsells, handling of product variants, or errors in rendering the upsell components.",
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1714259873.421294,
        "classification": "bug",
        "initial_code_snippets": [
            {
                "code": "((product) => {\n          const triggeredUpsellProductsWithThisHandle: FetchedProductWithUpsellId[] = [];\n\n          /**\n           *  Remove products that can not be added to the cart\n           *\n           * \"available\" appears to do a few things\n           * 1. Checks the product status is \"active\"\n           * 2. Checks if the product is tracking inventory and if it is verify there is at least one product\n           *    OR \"continue selling when out of stock\" is true\n           */\n          if (!product?.available) return [];\n\n          //product.available does not check variants so we have to filter them seperately otherwise\n          //out of stock variants could potentially show\n          product.variants = product.variants.filter((p) => p.available);\n\n          // ---- START window.upcartOnRenderUpsell\n          // We need quotes \"\" around the handle because it might start with a number which would\n          // cause an invalid selector error when using document.querySelector if they weren't in quotes\n          const itemQuerySelector = `[href*=\"${handle}\"]`;\n          // Wrap in try/catch in case the query selector is invalid for some reason. We still want to render\n          // the upsell even if we can't find the element\n          try {\n            const handleALink = document.querySelector(itemQuerySelector);\n            const el = handleALink?.closest('li.slide');\n            platform.publicApi.upcartOnRenderUpsell(product, el);\n          } catch (err) {\n            console.log(`Unable to find product with querySelector(\"${itemQuerySelector}\"):`, err);\n            sentryCaptureException(err);\n          }\n          // ---- END window.upcartOnRenderUpsell\n\n          for (let upsellItem of triggeredUpsells) {\n            let upsell = upsellItem.upsell.products[0] || null;\n            if (upsell?.handle === handle) {\n              if (upsell.variants) {\n                // when variants array is present, we trigger only on the variants specified\n                const productWithOnlyTriggeredVariants = {\n                  ...product,\n                  variants: product.variants.filter((variant) => upsell.variants!.includes(String(variant.id))),\n                };\n                triggeredUpsellProductsWithThisHandle.push({\n                  upsellId: upsellItem.id,\n                  fetchedProduct: productWithOnlyTriggeredVariants,\n                });\n              } else {\n                // when the variants array is missing, we trigger on any variant for the product\n                triggeredUpsellProductsWithThisHandle.push({ upsellId: upsellItem.id, fetchedProduct: product });\n              }\n            }\n          }\n\n          // only include products that have at least one variant to show\n          const productsWithVariants = triggeredUpsellProductsWithThisHandle.filter(\n            ({ fetchedProduct }) => fetchedProduct.variants.length > 0,\n          );\n\n          return productsWithVariants;\n        })",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 7906,
                "end_index": 10880,
                "start_line": 195,
                "end_line": 369,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n        //skip empty upsells\n        if (\n          (upsellItem.upsell.type === 'Product' && upsellItem.upsell?.products?.length === 0) ||\n          (upsellItem.upsell.type === 'Collection' && !upsellItem.upsell.collection)\n        )\n          return;\n\n        let atLeastOneTrigger = false;\n\n        if (upsellItem.trigger.on === 'all' || preview) {\n          atLeastOneTrigger = true;\n        } else {\n          //2.1 Search through every trigger to see if there is a match\n\n          if (upsellItem.trigger.selection.type === 'Product') {\n            upsellItem.trigger.selection.products.forEach((trigger) => {\n              const isTriggered = cartItems.some((cartItem) => {\n                let triggerId = trigger.id?.split('/')[4];\n                if (Number(cartItem.product_id) === Number(triggerId)) {\n                  // When the variants array is missing, we trigger on any variant for the product\n                  if (!trigger.variants) {\n                    return true;\n                    // when variants array is present, we trigger only on the variants specified\n                  } else if (\n                    //We need to check for both productId syntax since our storage is mixed\n                    trigger.variants.includes('gid://shopify/ProductVariant/' + cartItem.variant_id.toString()) ||\n                    trigger.variants.includes(cartItem.variant_id.toString())\n                  ) {\n                    return true;\n                  }\n                }\n                return false;\n              });\n              if (isTriggered) {\n                atLeastOneTrigger = true;\n              }\n            });\n          } else if (upsellItem.trigger.selection.type === 'Collection') {\n            const products = await platform.products.getProductByCollection({\n              handle: upsellItem.trigger.selection.collection.handle,\n            });\n\n            products.forEach((trigger: any) => {\n              const isTriggered = cartItems.some((cartItem) => {\n                let triggerId = trigger.id?.toString().replace('gid://shopify/Product/', '');\n                if (Number(cartItem.product_id) === Number(triggerId)) {\n                  return true;\n                }\n                return false;\n              });\n              if (isTriggered) {\n                atLeastOneTrigger = true;\n              }\n            });\n          }\n        }\n\n        //2.2 Expand each upsell product into seperate upsells",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 2117,
                "end_index": 4576,
                "start_line": 3,
                "end_line": 115,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "if (recommendedUpsells) {\n      Promise.all(\n        cartItemsId.map((id) =>\n          platform.products.getRecommendedProducts({\n            productIdToRecommendFrom: id,\n            limit: 8,\n            intent: upsellRecommendationIntent,\n          }),\n        ),\n      ).then((products) => {\n        if (cancelled.isCancelled) return;\n\n        const recommendedProduct = (uniqBy(\n          reduce(products, (acc: any, productArray: any) => [...acc, ...productArray], []),\n          'id',\n        ) as unknown) as Product[];\n        const filteredRecommendedProduct = showUpsellItemsAlreadyInCart\n          ? [...recommendedProduct]\n          : recommendedProduct.filter((item) => !cartItemsId.includes((item as any).id));\n\n        //Remove products that can not be added to the cart\n        const availableProducts = filteredRecommendedProduct.filter((product: any) => {\n          if (!product?.available) return false;\n\n          //product.available does not check variants so we have to filter them seperately otherwise\n          //out of stock variants could potentially show\n          product.variants = product.variants.filter((p: any) => p.available);\n\n          return true;\n        });\n\n        setUpsells(availableProducts);\n      });\n    }",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 11335,
                "end_index": 12588,
                "start_line": 268,
                "end_line": 391,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": ", [cartItems, upsellItems, showUpsellItemsAlreadyInCart, platform.products, preview])",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 6857,
                "end_index": 6942,
                "start_line": 175,
                "end_line": 175,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "if (atLeastOneTrigger) {\n          if (upsellItem.upsell.type === 'Product') {\n            upsellItem.upsell.products.forEach((upsell) => {\n              // Skip upsell if product is already in cart, unless the merchant wants to show it anyway\n              const productIsInCart = cartItems.some((cartItem) => cartItem.handle === upsell.handle);\n              if (upsell.handle && (!productIsInCart || showUpsellItemsAlreadyInCart)) {\n                triggeredUpsellItems.push({\n                  ...upsellItem,\n                  upsell: {\n                    type: 'Product',\n                    products: [upsell],\n                  },\n                });\n              }\n            });\n          } else if (upsellItem.upsell.type === 'Collection') {\n            //Fetch all products in the collection - put each product into its own upsell\n            const products = await platform.products.getProductByCollection({\n              handle: upsellItem.upsell.collection.handle,\n            });\n\n            products.forEach((upsell: any) => {\n              const productIsInCart = cartItems.some((cartItem) => cartItem.handle === upsell.handle);\n              if (upsell.handle && (!productIsInCart || showUpsellItemsAlreadyInCart)) {\n                const upsellItemProduct: UpsellV2Product = {\n                  id: `gid://shopify/Product/${upsell.id}`,\n                  shortId: String(upsell.id),\n                  handle: upsell.handle,\n                  variants: undefined, // show all variants\n                  // The following fields aren't needed for this step since we will fetch the full\n                  // product details anyways\n                  image: '',\n                  title: '',\n                };\n                triggeredUpsellItems.push({\n                  ...upsellItem,\n                  upsell: {\n                    type: 'Product',\n                    products: [upsellItemProduct],\n                  },\n                });\n              }\n            });\n          }\n        }\n      }",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 4585,
                "end_index": 6608,
                "start_line": 116,
                "end_line": 383,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": ", [\n    recommendedUpsells,\n    cart,\n    cartItemsId,\n    upsellsWithProducts,\n    showUpsellItemsAlreadyInCart,\n    upsellItems,\n    platform,\n    upsellRecommendationIntent,\n  ])",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 14679,
                "end_index": 14860,
                "start_line": 32,
                "end_line": 357,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const addProductToCart = useCallback(\n    (id: number | string, properties: ItemToAddToCart['properties']) => {\n      platform.cart\n        .addItemToCart(\n          { variantId: Number(id), quantity: 1, properties: { ...properties, __upcartUpsell: id } },\n          { opensCart: AddToCartOpensCart.NEVER },\n        )\n        .then(() => {\n          platform.publicApi.upcartOnAddUpsell(String(id));\n          refetchCart();\n        })\n        .catch((e) => console.error(e));\n    },\n    [refetchCart, platform],\n  );\n\n  const upsellsToShow = useMemo(() => {\n    // Allow custom modification of upsells before display. This can include\n    // changing properties of the upsell products, or removing/adding products.\n    let finalUpsells = upsells;\n    try {\n      const modifiedUpsells = platform.publicApi.upcartModifyListOfUpsells(upsells);\n      if (Array.isArray(modifiedUpsells)) {\n        finalUpsells = modifiedUpsells;\n      }\n    } catch (e) {\n      console.error(e);\n      sentryCaptureException(e);\n    }\n\n    if (upsellsShouldLimit && Number(maximumUpsellsToShow) > 0) {\n      finalUpsells = finalUpsells.splice(0, Number(maximumUpsellsToShow));\n    }\n\n    return finalUpsells;\n  }, [platform, upsells, upsellsShouldLimit, maximumUpsellsToShow]);\n\n  return (\n    <div>\n      {upsellsToShow.length !== 0 && (\n        <PreviewCarousel\n          platform={platform}\n          items={upsellsToShow}\n          onAddProduct={addProductToCart}\n          cartIsLoading={cartIsLoading}\n        />\n      )}\n    </div>\n  );\n}",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 14865,
                "end_index": 16391,
                "start_line": 359,
                "end_line": 408,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "else {\n      if (cancelled.isCancelled) return; // prevent setting state after unmounting or race condition\n\n      //Flatten the product list we fetched\n      Promise.all(upsellsWithProducts).then((listOfProductLists) => {\n        const flattenedProductsList = [];\n        for (const productList of listOfProductLists) {\n          for (const product of productList) {\n            flattenedProductsList.push(product);\n          }\n        }\n\n        //The upsellItems array is ordered according to priority\n        //If we encounter the same product, we will combine them and their variants\n        const productsOrderedByUpsellPriority: Product[] = [];\n        for (const upsellItem of upsellItems) {\n          //Find the product in the filtered list upsells (if it exists)\n          for (const productWithUpsellId of flattenedProductsList) {\n            //If the product already exists then combine variants instead of adding the product.\n            if (productWithUpsellId.upsellId === upsellItem.id) {\n              const alreadyExistsIndex = productsOrderedByUpsellPriority.findIndex(\n                (uniqueUpsell) => uniqueUpsell.id === productWithUpsellId.fetchedProduct.id,\n              );\n\n              if (alreadyExistsIndex === -1) {\n                productsOrderedByUpsellPriority.push(productWithUpsellId.fetchedProduct);\n              } else {\n                productsOrderedByUpsellPriority[alreadyExistsIndex] = {\n                  ...productsOrderedByUpsellPriority[alreadyExistsIndex],\n                  variants: [\n                    //Replace variants with a new array containing all unique variants from both products\n                    ...new Set([\n                      ...(productsOrderedByUpsellPriority[alreadyExistsIndex].variants || []),\n                      ...productWithUpsellId.fetchedProduct.variants,\n                    ]),\n                  ],\n                };\n              }\n            }\n          }\n        }\n        setUpsells(productsOrderedByUpsellPriority);\n      });\n    }",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 12589,
                "end_index": 14613,
                "start_line": 69,
                "end_line": 391,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": ", [triggeredUpsells, upsellHandlesToFetch, platform, preview])",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 11106,
                "end_index": 11168,
                "start_line": 261,
                "end_line": 261,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n  const { settings } = platform;\n\n  const [upsells, setUpsells] = useState<Product[]>([]);\n  const [triggeredUpsells, setTriggeredUpsells] = useState<UpsellV2ItemWithProductUpsell[]>([]);\n  const {\n    upsellsItems: upsellItemsV1orV2,\n    showUpsellItemsAlreadyInCart,\n    recommendedUpsells,\n    upsellsShouldLimit,\n    maximumUpsellsToShow,\n    upsellRecommendationIntent,\n  } = settings.upcartEditorSettings;\n\n  const cartItemsId = useMemo((): number[] => cart.items.map((item: { product_id: number }) => item.product_id), [\n    cart,\n  ]);\n\n  const { items: cartItems } = cart;\n\n  /**\n   * 1. Convert all upsell items to V2 format (if necessary)\n   * 2. Filter upsells to only include triggered upsells\n   * 3. Remove duplicate upsells\n   * 4. Fetch the full product for the upsells\n   * 5. Finalize Upsells - Combine duplicate products (with variants)\n   */\n\n  /**\n   * 1. Convert all upsell items to V2 format (if necessary)\n   */\n  const upsellItems: UpsellV2Item[] = useMemo(() => convertUpsellsToV2({ upsellItemsV1orV2 }), [upsellItemsV1orV2]);\n\n  //2. Filter upsells that are not triggered",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 791,
                "end_index": 1892,
                "start_line": 3,
                "end_line": 51,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "//3. Remove duplicate upsells so that we can minimize the calls\n  const upsellHandlesToFetch = useMemo(() => {\n    const allUpsellHandles = triggeredUpsells\n      .map((upsellItem) => upsellItem.upsell.products[0]?.handle)\n      .filter(Boolean);\n    // we only need to fetch each product once so we can remove duplicates\n    return [...new Set(allUpsellHandles)];\n  }, [triggeredUpsells]);\n\n  //4. Fetch the full product for the upsells",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 6947,
                "end_index": 7384,
                "start_line": 177,
                "end_line": 186,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "return items\n      .map(({ upsell }) => {\n        if (upsell) {\n          return (\n            <div className={`${styles.PreviewCarousel__item} DesignSettings__cartAccentColor`} key={upsell.shortId}>\n              <LegacyCard>\n                <LegacyStack spacing=\"loose\" alignment=\"center\" wrap={false}>\n                  <LegacyStack.Item>\n                    <div className={styles.PreviewCarousel__itemImage}>\n                      <img src={upsell.image} alt={upsell.title} title={upsell.title} />\n                    </div>\n                  </LegacyStack.Item>\n                  <LegacyStack.Item fill>\n                    <div className={`${styles.PreviewCarousel__itemTitle}`}>\n                      <Text variant=\"bodyMd\" as=\"span\" fontWeight=\"semibold\">\n                        {upsell.title}\n                      </Text>\n                      <span className={`${styles.PreviewCarousel__itemPrice}`}>\n                        {!!parseInt(upsell.compareAtPrice) && (\n                          <span className={styles['PreviewCarousel__itemPrice--discount']}>\n                            {formatMoney(upsell.compareAtPrice, currencyFormat)}\n                          </span>\n                        )}\n                        {formatMoney(upsell.price, currencyFormat)}\n                      </span>\n                    </div>\n                    <div className={`${styles.PreviewCarousel__button} DesignSettings__button`}>\n                      <div className={styles.PreviewCarousel__variationProduct}>\n                        <select title=\"productVariant\">\n                          <option>Variant #1</option>\n                          <option>Variant #2</option>\n                          <option>Variant #3</option>\n                        </select>\n                        <div className={styles.PreviewCarousel__icon}>\n                          <Icon source={SelectArrowIcon} />\n                        </div>\n                      </div>\n                      <CustomButton>{buttonText ?? 'Add to cart'}</CustomButton>\n                    </div>\n                  </LegacyStack.Item>\n                </LegacyStack>\n              </LegacyCard>\n            </div>\n          );\n        }\n      })\n      .filter((upsell) => upsell);\n  }, [buttonText, currencyFormat, items]);",
                "filename": "web/src/@components/PreviewCarousel/PreviewCarousel.tsx",
                "start_index": 817,
                "end_index": 3108,
                "start_line": 21,
                "end_line": 68,
                "max_line": 105,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import CustomButton from '@components/common/CustomButton';\nimport ProductSelectModal from '@components/common/ProductSelectModal';\nimport ConfigureUpsellsModal from '@components/ConfigureUpsellsModal';\nimport { Checkbox, LegacyStack, Link } from '@shopify/polaris';\nimport { convertUpsellsToV2 } from '@storefront/src/modules/CartPopup/UpsellsModule/helper';\nimport { Field, useFormikContext } from 'formik';\nimport { random } from 'lodash';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Collection, Product } from 'server/modules/shopify/graphql/generated';\nimport {\n  UpsellRecommendationIntent,\n  UpsellV2Item,\n  UpsellV2Product,\n  UpsellV2ResourceType,\n  UpsellV2SelectedCollection,\n  UpsellV2SelectedProducts,\n} from '../../../../../common/defaultMetafields';\nimport { CartEditorFormValues } from '../types';\nimport styles from './styles.module.scss';\nimport { useTranslation } from 'react-i18next';\nimport { SelectField } from '@components/common/FormField';\n\nexport enum ActionType {\n  ADD = 'ADD',\n  DELETE = 'DELETE',\n  EDIT = 'EDIT',\n  ALL = 'ALL', //Use all products\n}\n\nexport enum ProductType {\n  TRIGGER = 'trigger',\n  UPSELL = 'upsell',\n}\n\nexport type onActionParams = {\n  productType?: ProductType;\n  id?: string;\n  action: ActionType;\n};\n\n/**\n * This component and its children have a lot of case handling around the type \"UpsellItem\"\n * After the multi-product updates we're handling the upsell and trigger as an array instead of an object.\n * Which makes the already loaded UpsellItem interface/type more complicated to deal with but this is necessary so that old upsells can be loaded and edited\n */\nconst SelectProducts = () => {\n  const { values, setFieldValue, handleSubmit, isSubmitting } = useFormikContext<CartEditorFormValues>();\n  const [productType, setProductType] = useState<ProductType>(null);\n  const [currentId, setCurrentId] = useState(null);\n  const addTriggerRef = useRef(null);\n  const [activeModal, setActiveModal] = useState(false); //The main modal\n  const [showResourcePickerModal, setShowResourcePickerModal] = useState(false); //Secondary resource picker modal\n  const [upsellItems, setUpsellItems] = useState<Array<UpsellV2Item>>([]);\n  const { t } = useTranslation();\n\n  /**\n   * Convert all upsell items to V2 format (if necessary)\n   */\n  useEffect(() => {\n    const upsellItemsV2 = convertUpsellsToV2({ upsellItemsV1orV2: values.upcartEditorSettings.upsellsItems });\n    setUpsellItems(upsellItemsV2);\n  }, [values.upcartEditorSettings.upsellsItems]);\n\n  //Handle actions from the list of upsells",
                "filename": "web/src/@templates/CartEditor/UpsellsModule/SelectProducts.tsx",
                "start_index": 0,
                "end_index": 2583,
                "start_line": 1,
                "end_line": 64,
                "max_line": 320,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "(preview ? upsellHandlesToFetch.splice(0, 20) : upsellHandlesToFetch).splice(0, 500).map",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 7728,
                "end_index": 7816,
                "start_line": 192,
                "end_line": 192,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "upsellsWithProducts: Promise<FetchedProductWithUpsellId[]>[] =",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 7393,
                "end_index": 7455,
                "start_line": 187,
                "end_line": 187,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const defaultSelectedProducts = useMemo(() => {\n    let defaultSelectedProducts: any = [];\n\n    let row = upsellItems.find((row) => row.id == currentId);\n    if (row) {\n      let productSelection: UpsellV2SelectedProducts | null;\n      if (productType === ProductType.TRIGGER) {\n        productSelection =\n          row.trigger.on === 'specific' && row.trigger.selection.type === 'Product' ? row.trigger.selection : null;\n      } else {\n        productSelection = row.upsell.type === 'Product' ? row.upsell : null;\n      }\n      //The row should always exist\n      if (productSelection) {\n        productSelection.products.forEach((product) => {\n          //Create the variant resource array\n          let variants = product?.variants?.map((variantId) => {\n            return {\n              id: 'gid://shopify/ProductVariant/' + variantId,\n            };\n          });\n\n          defaultSelectedProducts.push({\n            ...product,\n            variants: {\n              edges: variants?.map((variant) => {\n                return {\n                  node: variant,\n                };\n              }),\n            },\n          });\n        });\n      }\n    }\n    return defaultSelectedProducts;\n  }, [upsellItems, currentId, productType]);\n\n  const defaultCollection = useMemo(() => {\n    let row = upsellItems.find((row) => row.id == currentId);\n\n    if (row) {\n      return row[productType + 'Collection'];\n    }\n  }, [upsellItems, currentId, productType]);\n\n  const onSave = ({\n    products,\n    collection,\n    type,\n  }: {\n    products?: Product[];\n    collection?: Collection;\n    type: UpsellV2ResourceType;\n  }) => {\n    if (type === 'Product') {\n      let mappedProducts: Array<UpsellV2Product> = products?.map((product) => {\n        let item: UpsellV2Product = {\n          id: product.id,\n          shortId: product.id?.split('gid://shopify/Product/')[1],\n          variants: product.variants?.edges?.map(\n            (variant) => variant.node.id?.split('gid://shopify/ProductVariant/')[1],\n          ), //This may need to be the shortId\n          handle: product.handle,\n          title: product.title,\n          image: product.featuredImage?.url,\n        };\n        return item;\n      });\n      setProductField(mappedProducts);\n    } else if (type === 'Collection') {\n      setCollectionField(collection);\n    }\n\n    setShowResourcePickerModal(false);\n    setActiveModal(true);\n  };\n\n  return (\n    <div className={styles.UpsellsModule}>\n      <LegacyStack vertical spacing=\"baseTight\">\n        <Checkbox\n          label={t('Use AI Recommended upsells')}\n          checked={values.upcartEditorSettings.recommendedUpsells}\n          onChange={() => setRecommendedUpsells(values.upcartEditorSettings.recommendedUpsells)}\n        />\n        {values.upcartEditorSettings.recommendedUpsells && (\n          <Field\n            id=",
                "filename": "web/src/@templates/CartEditor/UpsellsModule/SelectProducts.tsx",
                "start_index": 5553,
                "end_index": 8389,
                "start_line": 174,
                "end_line": 262,
                "max_line": 320,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "useEffect(() => {\n    /**\n     * Remove the add-on product if all other products in the cart are removed.\n     *\n     * Similar logic used to be handled in the empty cart component, but this caused the cart\n     * to incorrectly empty when going back in the browser due to HTML caching of the Liquid-rendered\n     * upcartPreloadedCart.\n     */\n    if (!hasFetchedCart) return; // prevent clearing cart based on stale cart\n    const isEmptyCartWithLeftoverAddonProduct = cartIsVisuallyEmpty && hiddenCartItems.length > 0;\n    if (isEmptyCartWithLeftoverAddonProduct) {\n      platform.cart.clearCart().then(() => {\n        refetchCart();\n      });\n    }\n  }, [platform, refetchCart, cartIsVisuallyEmpty, hiddenCartItems, hasFetchedCart]);\n\n  useEffect(() => {\n    if (cartIsVisuallyEmpty) {\n      sessionStorageEngine.unset(['announcement_module_time']);\n    }\n  }, [cartIsVisuallyEmpty]);\n\n  const announcementModuleIfActive = useMemo(() => {\n    if (!settings.upcartEditorSettings.announcementModule) return null;\n    return <AnnouncementModule platform={platform} />;\n  }, [settings, platform]);\n\n  const upsellModuleMarkupIfActive = useMemo(() => {\n    if (!settings.upcartEditorSettings.upsellsModule) return null;\n    return (\n      <UpsellsModule\n        preview={preview || false}\n        platform={platform}\n        cart={cartToShow}\n        cartIsLoading={cartIsLoading}\n        refetchCart={refetchCart}\n      />\n    );\n  }, [settings, cartToShow, cartIsLoading, refetchCart, platform, preview]);\n\n  const { totalAfterAllDiscounts } = useCartTotal({ cart });\n\n  return (\n    <>\n      <GlobalStyles platform={platform} />\n      <div\n        id=\"CartPopup\"\n        className={`upcart-cart ${styles.CartPreview} ${styles['CartPreview__' + settings.upcartSettings.cartPosition]}\n      ${styles['CartPreview__position-' + styling.position]}\n        UpcartDesignSettings__backgroundColor ${platform.options.forceAlwaysOpen ? styles.active : ''}`}\n        style={\n          settings.upcartSettings.disableSticky\n            ? { overflowY: 'auto', height: styling.height }\n            : { height: styling.height }\n        }\n        // This is needed to allow the cart to scroll on mobile for some themes.\n        // See Linear issue BEAM-1504 for more details.\n        data-scrollable\n      >\n        {cartIsVisuallyEmpty ? (\n          <EmptyCart\n            refetchCart={refetchCart}\n            platform={platform}\n            cart={cartToShow}\n            closePopup={platform.eventHandlers.onCloseClick}\n            isAddingItemThatCausedCartToOpen={isAddingItemThatCausedCartToOpen}\n          />\n        ) : (\n          <div\n            className={clx(styles.CartPreview__card, {\n              [styles.CartPreview__card_nonSticky]: settings.upcartSettings.disableSticky,\n            })}\n          >",
                "filename": "web/storefront/src/modules/CartPopup/Cart.tsx",
                "start_index": 12884,
                "end_index": 15689,
                "start_line": 107,
                "end_line": 477,
                "max_line": 521,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n      let triggeredUpsellItems: UpsellV2ItemWithProductUpsell[] = [];",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 1983,
                "end_index": 2054,
                "start_line": 3,
                "end_line": 55,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "async (upsellItem) =>",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 2095,
                "end_index": 2116,
                "start_line": 57,
                "end_line": 57,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "getTriggeredUpsells =",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 1949,
                "end_index": 1970,
                "start_line": 54,
                "end_line": 54,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "initial_doc_snippets": [
            {
                "code": "---\nid: 3vst4bcr\ntitle: Discount Codes Module\nfile_version: 1.1.3\napp_version: 1.18.31\n---\n\n# Required background information\n\n## Discount types\n\nThere are two types of discounts: **automatic discounts** and **discount codes**.\n\n- **Automatic discounts** are applied to a cart or checkout automatically when the discount criteria are met.\n\n- **Discount codes** must be manually typed in by the customer. They stay active until the customer either removes the code, enters a different conflicting discount code, or changes their cart/checkout so that the discount is not longer applicable.\n\nThis module is specifically for **discount codes**. We do not have to worry about **automatic discounts** because they will work in the cart by default and they do not require any user interaction.\n\n## Discount targets\n\nA discount can be used to reduce the cost of **product(s)**, **order**, or **shipping**.\n\n- **Product discounts** reduce the price of one or more products and are shown as a reduction on individual line items.\n\n- **Order discounts** reduce the price of the order as a whole and are shown as a reduction on the overal price.\n\n- **Shipping discounts** reduce the price of shipping.\n\n# Read and write discount codes\n\n## Read discount codes\n\nWe read discount codes using the `cart.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:78:24:26:`    const cart: Cart&lt;CartItemWithoutCompareAtPrice&gt; = await fetch(getShopifyRoutesRoot() + &#39;cart.js&#39;).then((res) =&gt;`\"/> Ajax API endpoint.\n\nAn applied discount code will be returned from the API as part of either the `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> or the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/>. The `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> are for order discounts and the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/> are for product discounts.\n\nThese discount applications will include both **automatic discounts** and **discount codes**. We can distinguish between these using the `type`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:460:1:1:`  type: &#39;discount_code&#39; | &#39;&#39;;`\"/> field of the `DiscountApplication`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:446:4:4:`export interface DiscountApplication {`\"/>.\n\n## Apply a discount code\n\n<br/>\n\nWe apply a discount code by making a request from the storefront to the route `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/>.\n\nThe `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/> route is intended by Shopify to be used for [shareable discount links](https://help.shopify.com/en/manual/discounts/managing-discount-codes#promote-a-discount-using-a-shareable-link). Normally a customer would navigate to the link directly in their browser and would be redirected to the storefront. We are using it in a non-standard way by making a background network request.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n23         await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);\n```\n\n<br/>\n\nAfter applying a discount code, we refetch the cart to check if the discount was successfully applied and to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/DiscountCodeModule/DiscountCodeModule.tsx\n\n```tsx\n23           await platform.discounts.attemptApplyDiscountCode({ discountCode: discountCodeToApply });\n24           const updatedCart = await refetchCart();\n25\n26           const discountApplications = getAllUniqueDiscountApplications(updatedCart);\n27           const isValid = discountApplications.some(\n28             (discountApplication) => discountApplication.title === discountCodeToApply,\n29           );\n```\n\n<br/>\n\n## Remove a discount code\n\n<br/>\n\nWe remove a discount code by applying a fake invalid discount code.\n\nThere is no native way to remove discount codes so this is a workaround.\n\nThis behaviour relies on the fact that there can only be one discount code applied in the cart. We are replacing the one allowed discount code with an invalid code.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n14       async removeDiscountCode(): Promise<void> {\n15         const FAKE_INVALID_DISCOUNT_CODE = '~!~!UPCART_REMOVE_DISCOUNT!~!~';\n16         await this.UNSAFE_POSSIBLE_NO_OP_applyDiscountCodeAndSetShopifyCookie({ discountCode: FAKE_INVALID_DISCOUNT_CODE });\n17       }\n```\n\n<br/>\n\nAfter removing a discount code, we refetch the cart to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/components/DiscountCodeBadge/DiscountCodeBadge.tsx\n\n```tsx\n18         await platform.discounts.removeDiscountCode();\n19         await refetchCart();\n```\n\n<br/>\n\n> \u26a0\ufe0f After we apply or remove a discount code, the `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> of discounted line items will change. If we did not refetch the cart then we would have an outdated `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> value which would cause errors if we tried to call `cart/update.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:191:17:21:`    return fetchQd(this.ajaxMutationCartQ, getShopifyRoutesRoot() + &#39;cart/update.js&#39;, {`\"/> or `cart/change.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:153:8:12:`      getShopifyRoutesRoot() + `cart/change.js?${query.toString()}`,`\"/>.\n\n# Limitations\n\n## **Multiple** discount codes are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n50                     Multiple discount codes are not supported.\n```\n\n<br/>\n\n### Why are multiple discount codes not supported?\n\nWe cannot apply multiple discount codes because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support multiple codes. This is the only way that we know of to apply a discount code from the storefront. We will have to wait for Shopify to add support for multiple codes or to find a different way to apply codes which does support multiple.\n\nIf a customer applies two discount codes back to back, the first discount code will be discarded and only use the most recently applied code will affect the cart.\n\n## Free shipping discounts are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n58                   Free shipping discounts are not supported.\n```\n\n<br/>\n\n### Why are free shipping discounts not supported?\n\nWe cannot apply free shipping discounts because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support them.\n\n## Shopify Plus stores using checkout.liquid are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n64                   Shopify Plus stores using checkout.liquid are not supported.\n```\n\n<br/>\n\n### Why are Shopify Plus stores using checkout.liquid not supported?\n\nHistorically, the Ajax API only included automatic discounts and did not include discount codes. Shopify changed this behaviour and started including discounts from discount codes in Ajax API responses. There are still some stores which do not include discount codes in Ajax API responses. The discount codes module does not work on these stores.\n\n### How can we tell if a store is eligible?\n\nThe Ajax API will include discount codes in responses only if the store is on Shopify's new checkout.\n\n<br/>\n\nWe can identify wether or not a store is on Shopify's new checkout by looking at the cart token. If the cart token is 32 characters long and only includes hex digits (0123456789abcdef) then the store is on Shopify's old checkout, otherwise it is on Shopify's new checkout and the Ajax API will include discount codes in responses.\n\nStores that are on Shopify's new checkout may have different token formats. The following are examples that we've seen:\n\n- c1-d3f024e3af037f40bfe1b016b5b76f05\n- Z2NwLXVzLWNlbnRyYWwxOjAxSEZFMjFIV1FZUFc0SlQ3Q00ySFFSSjgy\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart({ cart }: { cart: Cart<CartItem> }): boolean {\n6          if (!cart.token) return false;\n7          const isLegacyCartToken = cart.token.match(/^[0-9a-f]{32}$/) !== null;\n8          return !isLegacyCartToken;\n9        }\n```\n\n<br/>\n\n### What happens if a store is not eligible?\n\n<br/>\n\nIf a store is not eligible then the discount code module will not be shown.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/Cart.tsx\n\n```tsx\n499                      {platform.discounts.getStoreCanApplyDiscountCodesInCart({ cart }) &&\n500                        settings.upcartEditorSettings.discountCodeModule && (\n501                          <DiscountCodeModule platform={platform} refetchCart={refetchCart} />\n502                        )}\n```\n\n<br/>\n\nIn the preview we will show the discount code module even for stores that are not eligible. We do this because it would require a lot of work to check eligibility when not on the storefront.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/platform/preview/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart(args: { cart: Cart<CartItem> }): boolean {\n6          return true;\n7        }\n```\n\n<br/>\n\nThis file was generated by Swimm. [Click here to view it in the app](https://app.swimm.io/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr).",
                "filename": ".swm/discount-codes-module.3vst4bcr.sw.md",
                "start_index": 0,
                "end_index": 11446,
                "start_line": 1,
                "end_line": 231,
                "max_line": 231,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Specification: Subscription Upgrades\n\n## Editor\n\nThere should be a module in the editor with:\n\n- Name: \"Subscription Upgrades\"\n- Icon: Repeat Order\n- Default status: disabled\n- Settings:\n  - \"Prevent downgrades\"\n    - Help text: \"If enabled, customers will not be allowed to downgrade from a subscription to one-time purchase. Caution: this may increase cart abandonment.\"\n    - Type: checkbox\n    - Default: disabled\n\n## Cart\n\n> If the subscription upgrades module is disabled in the editor, the cart should skip all subscription upgrade functionality.\n>\n> The following cart specification is applicable only if the subscription upgrades module has been enabled in the editor.\n\n### Behaviour\n\nThe cart frontend for subscription upgrades should be isolated to an area below each line item. This area can include content, or can be omitted if there is nothing to show. If the area includes content, then the area should have:\n\n- Public CSS class: `.upcart-subscription-upgrade-section`\n- Styling: full-width of line item\n\nThe content of each subscription upgrade area should be independent of the content for the subscription areas for any other line items.\n\nThe content of the subscription upgrade area should be as follows:\n\nA. For **one-time purchase** line items:\n\n- If the item cannot be sold as a subscription, nothing should be shown.\n- If the item can be sold as a subscription:\n  - There should be a button with:\n    - Content: \"Upgrade to \\_\\_\\_\\_\", where \\_\\_\\_\\_ is the name of the first selling plan group for the item\n    - When clicked:\n      1. Show a loading spinner instead of text, and disable the button\n      2. Change the item to be a subscription with the first selling plan of the first selling plan group. The line item should have the property `__upcartSubscriptionUpgrade: \"true\"`\n    - Styling: full width of area, match to other buttons in cart\n    - Public CSS class: `.upcart-subscription-upgrade-button`\n\nB. For **subscription** line items:\n\n- There should be a dropdown with:\n  - Content: the name of the current selling plan\n  - Options:\n    - (OPTIONAL) A group with:\n      - Title: \"Full price\"\n      - Options:\n        - \"One-time purchase\"\n      - Condition: this group should be included if the \"Prevent downgrades\" setting is disabled AND the item does not _require_ a selling plan (i.e., it can be sold as a one-time purchase)\n    - A group for each possible selling plan group for the item with:\n      - Title: the name of the selling plan group\n      - Options: the names of the possible selling plans in the group for the item\n  - When selected:\n    1. Show a loading spinner overlayed on the dropdown and disable the dropdown\n    2. Change the selling plan of the item to the selected selling plan. If \"One-time only\" was selected, then remove the selling plan from the item to change it to a one-time purchase. The line item should have the property `__upcartSubscriptionEdit: \"true\"`\n  - Styling: full width of area, match to other dropdowns in cart\n  - Public CSS class: `.upcart-subscription-upgrade-dropdown`\n\nWhen the current purchase option for a line item changes, the content of the subscription upgrade area should be updated to match the new purchase option.\n\n### Edge Cases and Clarifications\n\n- The content of the subscription upgrade area does not depend on _how_ the purchase option was selected. For example, the subscription upgrade area content for an item that was added to the cart as a subscription should be the same as the content for an item that was upgraded from a one-time purchase to a subscription in-cart.\n- When selling plans are being loaded for a product, there should be no content in the subscription upgrade area. Before the selling plans are loaded, we can't fully decide what content to show so it's fine to show nothing.\n- When the selling plan of an item is changed, the quantity of the item should remain constant. If you don't provide a quantity to the AJAX API when changing a line item, then the quantity of the line item will be set to 1 which should be avoided.\n- Selling plans that do not apply to the selected variant for a line item should be ignored. It is possible to have selling plans that apply only to specific variants of a product. In cases where none of the selling plans from a selling plan group apply to the variant for the line item, the selling plan group should be ignored. An ignored group should not be listed in the dropdown (because it would be an empty section) and it should not be used for text of the upgrade button (because it would have no selling plan to select).",
                "filename": "docs/subscription-upgrades.md",
                "start_index": 0,
                "end_index": 4584,
                "start_line": 1,
                "end_line": 71,
                "max_line": 71,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>UpCart Loading...</title>\n    <script>\n      /*\n       * Constants\n       */\n      const INSTALL_SOURCE_QUERY_PARAM = 'via';\n      const COOKIE_LIFETIME_MS = 3 * 24 * 60 * 60 * 1000; // 3 days\n      const COOKIE_NAME = 'upcart_install_source';\n\n      /*\n       * 1. Get the ?via= query for the following steps\n       */\n      const installSource = encodeURIComponent(\n        new URLSearchParams(window.location.search).get(INSTALL_SOURCE_QUERY_PARAM),\n      );\n\n      /*\n       * 2. Set a cookie with the install source for 3 days so we can read it when they install the app\n       */\n      const cookieDomain = '.' + window.location.hostname;\n      const cookieExpiresDate = new Date();\n      cookieExpiresDate.setTime(cookieExpiresDate.getTime() + COOKIE_LIFETIME_MS);\n      const cookieExpires = cookieExpiresDate.toGMTString();\n      document.cookie = `${COOKIE_NAME}=${installSource}; expires=${cookieExpires}; domain=${cookieDomain}; path=/; SameSite=None; Secure`;\n\n      /*\n       * 3. Redirect to the app store, including the install source as a query param for App Store Google Analytics\n       */\n      window.location.replace(`https://apps.shopify.com/upcart-cart-builder?join-via=${installSource}`);\n    </script>\n  </head>\n  <body></body>\n</html>",
                "filename": "web/public/join.html",
                "start_index": 0,
                "end_index": 1304,
                "start_line": 1,
                "end_line": 36,
                "max_line": 36,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# UpCart 3.0\n\n## Setup\n\nView setup instructions on Notion: https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 133,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Security Policy\n\n## Supported versions\n\n### New features\n\nNew features will only be added to the master branch and will not be made available in point releases.\n\n### Bug fixes\n\nOnly the latest release series will receive bug fixes. When enough bugs are fixed and its deemed worthy to release a new gem, this is the branch it happens from.\n\n### Security issues\n\nOnly the latest release series will receive patches and new versions in case of a security issue.\n\n### Severe security issues\n\nFor severe security issues we will provide new versions as above, and also the last major release series will receive patches and new versions. The classification of the security issue is judged by the core team.\n\n### Unsupported Release Series\n\nWhen a release series is no longer supported, it's your own responsibility to deal with bugs and security issues. If you are not comfortable maintaining your own versions, you should upgrade to a supported version.\n\n## Reporting a bug\n\nAll security bugs in shopify repositories should be reported to [our hackerone program](https://hackerone.com/shopify)\nShopify's whitehat program is our way to reward security researchers for finding serious security vulnerabilities in the In Scope properties listed at the bottom of this page, including our core application (all functionality associated with a Shopify store, particularly your-store.myshopify.com/admin) and certain ancillary applications.\n\n## Disclosure Policy\n\nWe look forward to working with all security researchers and strive to be respectful, always assume the best and treat others as peers. We expect the same in return from all participants. To achieve this, our team strives to:\n\n- Reply to all reports within one business day and triage within two business days (if applicable)\n- Be as transparent as possible, answering all inquires about our report decisions and adding hackers to duplicate HackerOne reports\n- Award bounties within a week of resolution (excluding extenuating circumstances)\n- Only close reports as N/A when the issue reported is included in Known Issues, Ineligible Vulnerabilities Types or lacks evidence of a vulnerability\n\n**The following rules must be followed in order for any rewards to be paid:**\n\n- You may only test against shops you have created which include your HackerOne YOURHANDLE @ wearehackerone.com registered email address.\n- You must not attempt to gain access to, or interact with, any shops other than those created by you.\n- The use of commercial scanners is prohibited (e.g., Nessus).\n- Rules for reporting must be followed.\n- Do not disclose any issues publicly before they have been resolved.\n- Shopify reserves the right to modify the rules for this program or deem any submissions invalid at any time. Shopify may cancel the whitehat program without notice at any time.\n- Contacting Shopify Support over chat, email or phone about your HackerOne report is not allowed. We may disqualify you from receiving a reward, or from participating in the program altogether.\n- You are not an employee of Shopify; employees should report bugs to the internal bug bounty program.\n- You hereby represent, warrant and covenant that any content you submit to Shopify is an original work of authorship and that you are legally entitled to grant the rights and privileges conveyed by these terms. You further represent, warrant and covenant that the consent of no other person or entity is or will be necessary for Shopify to use the submitted content.\n- By submitting content to Shopify, you irrevocably waive all moral rights which you may have in the content.\n- All content submitted by you to Shopify under this program is licensed under the MIT License.\n- You must report any discovered vulnerability to Shopify as soon as you have validated the vulnerability.\n- Failure to follow any of the foregoing rules will disqualify you from participating in this program.\n\n** Please see our [Hackerone Profile](https://hackerone.com/shopify) for full details\n\n## Receiving Security Updates\n\nTo recieve all general updates to vulnerabilities, please subscribe to our hackerone [Hacktivity](https://hackerone.com/shopify/hacktivity)",
                "filename": "SECURITY.md",
                "start_index": 0,
                "end_index": 4160,
                "start_line": 1,
                "end_line": 59,
                "max_line": 59,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "## Dev Setup\n\nFollow the [instructions in this Notion document](https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7?pvs=4) to setup the development environment for the Chrome extension.",
                "filename": "chrome-extensions/cart-customization/README.md",
                "start_index": 0,
                "end_index": 208,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "MIT License\n\nCopyright (c) 2021 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
                "filename": "extensions/theme-app-extension/LICENSE.md",
                "start_index": 0,
                "end_index": 1063,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { Shop, ShopModel } from '../modules/shops/shops.model';\nimport { RequestWithShop } from '../types/express.types';\nimport Shopify from '@shopify/shopify-api';\n\nexport const getShopDocFromRequest = async (req: RequestWithShop): Promise<Shop> => {\n  if (req.shopDoc) {\n    return req.shopDoc;\n  }\n\n  const shop = Shopify.Utils.sanitizeShop(req.query.shop as string);\n  const shopDoc = await ShopModel.findOne({ domain: shop }).lean();\n  req.shopDoc = shopDoc;\n  return shopDoc;\n};",
                "filename": "web/server/helpers/getShopDocFromRequest.ts",
                "start_index": 0,
                "end_index": 485,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "The starting point for this repository was created using the Shopify CLI, commit\nf5d560da33aafae0b552de72a90f1320d1023524. Some boilerplate code from the CLI\nremains and is licensed as follows:\n\"\"\"\nMIT License\n\nCopyright (c) 2018 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\"",
                "filename": "LICENSE.md",
                "start_index": 0,
                "end_index": 1265,
                "start_line": 1,
                "end_line": 26,
                "max_line": 26,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# [[[ --- STAGE: BASE ENVIRONMENT SETUP --- ]]]\n# see https://github.com/moby/moby/issues/37345#issuecomment-400250849\nFROM node:18.16.1-alpine as base\n# Accept command line '--build-arg' arguments\nARG PORT=8081\nARG HOST\nARG SHOPIFY_API_KEY\nARG INTERCOM_APP_ID\nARG SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY\n\n# Copy command line args to env to use during build and for final image runtime\nENV PORT=${PORT} \\\n    HOST=${HOST} \\\n    SHOPIFY_API_KEY=${SHOPIFY_API_KEY} \\\n    INTERCOM_APP_ID=${INTERCOM_APP_ID}\n    # ^^^^^ WARNING ^^^^^ do not include trailing \"\\\" on the last line above, you will get a syntax error with a terrible error message\n    #\n    # SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY is intentionally not included here since it is only for building and shouldn't be available at runtime\n\n# [[[ --- STAGE: BUILD --- ]]]\nFROM base AS build\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nCOPY web/patches ./web/patches\nRUN yarn install --cwd web --frozen-lockfile --production=false\nCOPY . .\n# NOTE: we need Sentry API token to upload source maps to Sentry during build, see withSentryConfig in next.config.js\nRUN echo \"[auth]\\ntoken=${SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY}\" > ./web/.sentryclirc\nRUN yarn web:build\n\n# [[[ --- STAGE: LICENSES WEB --- ]]]\nFROM base AS licenses-web\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web > ./web/public/licenses/web.txt\n\n# [[[ --- STAGE: LICENSES STOREFRONT --- ]]]\nFROM base AS licenses-storefront\nWORKDIR /app\nCOPY web/storefront/package.json web/storefront/yarn.lock ./web/storefront/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web/storefront > ./web/public/licenses/storefront.txt\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM base\nWORKDIR /app\nCOPY --from=build /app .\nCOPY package.json ./package.json\nRUN yarn install --frozen-lockfile --production=true\nCOPY --from=licenses-web /app/web/public/licenses/web.txt ./web/public/licenses/web.txt\nCOPY --from=licenses-storefront /app/web/public/licenses/storefront.txt ./web/public/licenses/storefront.txt\nCMD [\"yarn\", \"web:start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2181,
                "start_line": 1,
                "end_line": 53,
                "max_line": 53,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.\\\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can\u2019t go back!**\n\nIf you aren\u2019t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you\u2019re on your own.\n\nYou don\u2019t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn\u2019t feel obligated to use this feature. However we understand that this tool wouldn\u2019t be useful if you couldn\u2019t customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n\n### Code Splitting\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\n\n### Analyzing the Bundle Size\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\n\n### Making a Progressive Web App\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\n\n### Advanced Configuration\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\n\n### Deployment\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\n\n### `npm run build` fails to minify\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)",
                "filename": "web/storefront/README.md",
                "start_index": 0,
                "end_index": 3354,
                "start_line": 1,
                "end_line": 70,
                "max_line": 70,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<html></html>",
                "filename": "web/storefront/public/index.html",
                "start_index": 0,
                "end_index": 13,
                "start_line": 1,
                "end_line": 1,
                "max_line": 1,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "intial_documentation_sources": {
            "shopify": {
                "collection": "shopify_documentation",
                "reason_for_relevance": "The issue is related to a site-wide feature on a Shopify store, and the Shopify API reference and templating documentation may contain necessary information on how to properly use the API and template tools to fix the logical error in the `fetchUpsellProducts()` function."
            }
        },
        "external_documentation_snippets": {
            "external_shopify": [
                {
                    "code": "Product recommendations\n Overview\n Related products\n Complementary products\n Media and images\n Theme Store\n Show related products on product pages\n Related products are products that are similar to a selected product. You can display potential substitutes to help customers discover other similar products they might like. These products should appear in a You might also like section on the product page.\n Adding the related products section to your product pages displays an automatically generated list of product recommendations.\n In this tutorial, you'll learn how to show related products in your theme.\n Resources\n To implement product recommendations, you'll use the following:\n The recommendations object\n The /{locale}/recommendations/products endpoint of the Product Recommendations API\n Recommendation logic\n The recommendation algorithm predicts the most relevant products based on the product that a customer is interacting with. The criteria that the algorithm uses depends on the merchant's online store. In general, it might take into account the following factors:\n Purchase history: Products that have historically been purchased together.\n Product description: Products with similar descriptions.\n Related collections: Products from collections that the current product is part of, excluding collections with handles all and frontpage.\n Recommendation algorithm criteria\n The criteria that's used depends on a merchant's online store, and the recommendation intent. The following outlines which criteria is used, and when:\n Criteria Application\n Purchase history\n and\n Product description Merchants with an English storefront.\n Purchase history only Merchants with a non-English storefront.\n Related collections All merchants when purchase history and product description recommendations aren't available.\n Tip\n To learn more about the recommendation logic limitations, refer to Limitations.\n The Shopify Search & Discovery app enables users to customize product recommendation and search results, which can impact results from storefront search and the Ajax Product Recommendations API. To learn about how these results can be impacted, visit the Shopify Help Center.\n Limitations\n The following list describes some limitations of the recommendation logic:\n You can't customize the recommendation algorithm to exclude specific products. However, you can choose which of the returned products to show with JavaScript.\n The recommendation algorithm doesn't use orders that have been imported from another store or ecommerce platform to generate product recommendations.\n Products that are out of stock or set to a price of 0, gift cards, and products in the visitor's cart aren't included in recommendations.\n UI guidelines\n The following best practices can help to make sure that you're displaying recommended products in a way that improves the customer experience:\n The recommendation algorithm associates up to ten products with each product, in order of relevance. For example, the first recommended product is more relevant than the tenth recommended product. For this reason, it's a good idea to limit your recommendations to four products for each product page to promote only the most relevant recommendations.\n Make sure that you load the proper image size for the product card.\n Because the recommendations are loaded asynchronously with JavaScript, you might want to add an empty state or not show the recommended products section at all. The placeholder is swapped with the actual recommended products after you load them.\n Use phrases such as \u201cYou might also like\u201d for the section header to explain to your customers why you're displaying the recommended products.\n Implementing product recommendations\n In this implementation, the section content builds the general display by looping through each product returned through the products attribute of the recommendations object. However, this object isn\u2019t populated when the section is initially rendered, so you need to use JavaScript to retrieve the populated section content through the section response of the Product Recommendations API.\n Example\n sections/product-recommendations.liquid\n 1 <div\n 2\n    class=\"product-recommendations\"\n 3\n    data-url=\"{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4&intent=related\"\n 4 >\n 5\n    {%- if recommendations.performed? and recommendations.products_count > 0 -%}\n 6\n      {% if recommendations.intent == 'related' %}\n 7\n        <h2>You may also like</h2>\n 8\n      {% elsif recommendations.intent == 'complementary' %}\n 9\n        <h2>Pair it with</h2>\n 10\n      {% endif %}\n 11\n 12\n      <ul>\n 13\n        {%- for product in recommendations.products -%}\n 14\n          <li class=\"product\">\n 15\n            <a href=\"{{ product.url }}\">\n 16\n              <img\n 17\n                class=\"product__img\"\n 18\n                src=\"{{ product.featured_image | image_url: width: 300, height: 300 }}\"\n 19\n                alt=\"{{ product.featured_image.alt }}\"\n 20\n              />\n 21\n 22\n              <p class=\"product__title\">{{ product.title }}</p>\n 23\n              <p class=\"product__price\">{{ product.price | money}}</p>\n 24\n            </a>\n 25\n          </li>\n 26\n        {%- endfor -%}\n 27\n      </ul>\n 28\n    {%- endif -%}\n 29 </div>\n 30\n 31 {% javascript %}\n 32\n    const handleIntersection = (entries, observer) => {\n 33\n      if (!entries[0].isIntersecting) return;\n 34\n 35\n      observer.unobserve(productRecommendationsSection);\n 36\n 37\n      const url = productRecommendationsSection.dataset.url;\n 38\n 39\n      fetch(url)\n 40\n        .then(response => response.text())\n 41\n        .then(text => {\n 42\n          const html = document.createElement('div');\n 43\n          html.innerHTML = text;\n 44\n          const recommendations = html.querySelector('.product-recommendations');\n 45\n 46\n          if (recommendations && recommendations.innerHTML.trim().length) {\n 47\n            productRecommendationsSection.innerHTML = recommendations.innerHTML;\n 48\n          }\n 49\n        })\n 50\n        .catch(e => {\n 51\n          console.error(e);\n 52\n        });\n 53\n    };\n 54\n 55\n    const productRecommendationsSection = document.querySelector('.product-recommendations');\n 56\n    const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});\n 57\n 58\n    observer.observe(productRecommendationsSection);\n 59 {% endjavascript %}\n 60\n 61 {% schema %}\n 62\n    {\n 63\n      \"name\": \"Product recommendations\",\n 64\n      \"settings\": []\n 65\n    }\n 66 {% endschema %}\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Resources\n Recommendation logic\n Limitations\n UI guidelines\n Implementing product recommendations\n Updates & News\n Developer changelog",
                    "filename": "docs/themes/product-merchandising/recommendations/related-products/content.txt",
                    "start_index": 0,
                    "end_index": 6760,
                    "start_line": 1,
                    "end_line": 170,
                    "max_line": 170,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product recommendations\n Overview\n Related products\n Complementary products\n Media and images\n Theme Store\n Show complementary products on product pages\n Complementary products are products that are often bought in addition to a selected product. They're often referred to as something that \u201cpairs well with\" the current product. You can display complementary products on the product page to help customers discover new products.\n In this tutorial, you'll learn how to show complementary products in your theme.\n Resources\n To implement product recommendations, you'll use the following:\n The recommendations object\n The /{locale}/recommendations/products endpoint of the Product Recommendations API\n Limitations\n Products that are out of stock or set to a price of 0, gift cards, and products in the visitor's cart aren't included in recommendations.\n UI guidelines\n The following best practices can help to make sure that you're displaying recommended products in a way that improves the customer experience:\n Complementary product recommendations should usually be placed near the top of the product page, typically in the product information section, near the original product image.\n The product recommendations API serves up to 10 complementary products for each product. We recommend showing 2-3 products by default, and paginating for additional products.\n Make sure that you load the proper image size for the product card.\n Because the recommendations are loaded asynchronously with JavaScript, you might want to add an empty state or not show the complementary products section at all. The placeholder is swapped with the actual complementary products after you load them.\n Use phrases such as \u201cPairs well with\u201d for the section header to explain to your customers why you're displaying the products.\n Implementing complementary products\n In this implementation, the section content builds the general display by looping through each product returned through the products attribute of the recommendations object. However, this object isn\u2019t populated when the section is initially rendered, so you need to use JavaScript to retrieve the populated section content through the section response of the Product Recommendations API.\n sections/product-recommendations.liquid\n 1 <div\n 2\n    class=\"product-recommendations\"\n 3\n    data-url=\"{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4&intent=related\"\n 4 >\n 5\n    {%- if recommendations.performed? and recommendations.products_count > 0 -%}\n 6\n      {% if recommendations.intent == 'related' %}\n 7\n        <h2>You may also like</h2>\n 8\n      {% elsif recommendations.intent == 'complementary' %}\n 9\n        <h2>Pair it with</h2>\n 10\n      {% endif %}\n 11\n 12\n      <ul>\n 13\n        {%- for product in recommendations.products -%}\n 14\n          <li class=\"product\">\n 15\n            <a href=\"{{ product.url }}\">\n 16\n              <img\n 17\n                class=\"product__img\"\n 18\n                src=\"{{ product.featured_image | image_url: width: 300, height: 300 }}\"\n 19\n                alt=\"{{ product.featured_image.alt }}\"\n 20\n              />\n 21\n 22\n              <p class=\"product__title\">{{ product.title }}</p>\n 23\n              <p class=\"product__price\">{{ product.price | money}}</p>\n 24\n            </a>\n 25\n          </li>\n 26\n        {%- endfor -%}\n 27\n      </ul>\n 28\n    {%- endif -%}\n 29 </div>\n 30\n 31 {% javascript %}\n 32\n    const handleIntersection = (entries, observer) => {\n 33\n      if (!entries[0].isIntersecting) return;\n 34\n 35\n      observer.unobserve(productRecommendationsSection);\n 36\n 37\n      const url = productRecommendationsSection.dataset.url;\n 38\n 39\n      fetch(url)\n 40\n        .then(response => response.text())\n 41\n        .then(text => {\n 42\n          const html = document.createElement('div');\n 43\n          html.innerHTML = text;\n 44\n          const recommendations = html.querySelector('.product-recommendations');\n 45\n 46\n          if (recommendations && recommendations.innerHTML.trim().length) {\n 47\n            productRecommendationsSection.innerHTML = recommendations.innerHTML;\n 48\n          }\n 49\n        })\n 50\n        .catch(e => {\n 51\n          console.error(e);\n 52\n        });\n 53\n    };\n 54\n 55\n    const productRecommendationsSection = document.querySelector('.product-recommendations');\n 56\n    const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});\n 57\n 58\n    observer.observe(productRecommendationsSection);\n 59 {% endjavascript %}\n 60\n 61 {% schema %}\n 62\n    {\n 63\n      \"name\": \"Product recommendations\",\n 64\n      \"settings\": []\n 65\n    }\n 66 {% endschema %}\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Resources\n Limitations\n UI guidelines\n Implementing complementary products\n Updates & News\n Developer changelog\n Partner blog",
                    "filename": "docs/themes/product-merchandising/recommendations/complementary-products/content.txt",
                    "start_index": 0,
                    "end_index": 4854,
                    "start_line": 1,
                    "end_line": 150,
                    "max_line": 150,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Overview\n Getting started\n Create a subscription\n UX guidelines\n Overview\n Upsell\n Subscriptions\n Payments\n Thank you and Order status\n Localized UI extensions\n UX guidelines for post-purchase upsells\n Beta\n Post-purchase checkout extensions are in beta and can be used without restrictions in a development store. To use post-purchase extensions on a live store, you need to request access.\n When you design a post-purchase upsell, a great customer-facing user experience (UX) and merchant experience are important to the success of our merchants. The post-purchase upsell page should represent the merchant well and protect their brand\u2019s trust.\n User experience\n To provide a great post-purchase experience and to help the merchant gain trust from customers, implement the following UX principles in your post-purchase checkout extension:\n Be transparent about all the costs involved in a purchase.\n Present clear options to accept or refuse upsell offers without pressuring customers.\n Display a maximum of two consecutive upsell offers.\n Present relevant products by tailoring upsell offers to the shopping behaviors and preferences of customers.\n Provide default copy that addresses customers directly using a voice that's appropriate for any store, regardless of brand personality.\n Header and footer\n The styling of the header and footer is consistent across every post-purchase page:\n Header: Confirms the payment of the initial purchase of the order. Customers can also directly access their full order confirmation (and bypass the upsell offer pages) using the View order confirmation button.\n Footer: Contains links to the privacy policy, terms of service, and refund policy.\n Note\n You can't adjust the header and footer components.\n Required components\n App Bridge Checkout provides many powerful UI components that a rendering extension can use to build an interface. The App Bridge Checkout UI components are rendered natively by Shopify, so you can depend on them to be performant, accessible, and functional in all of the checkout\u2019s supported browsers.\n Before you integrate your post-purchase app into checkout, familiarize yourself with the UI guidelines and best practices for the following required components:\n Callout banner\n Product title and price\n Product image\n Price breakdown\n Call to action buttons\n Callout banner\n A callout banner encourages customers to take action on a post-purchase upsell. Use the App Bridge Checkout CalloutBanner to implement this component:\n Place a callout banner near the top of the page to let the customer know what the upsell offer is. Provide strong default copy in your app to encourage merchants to be explicit about the upsell offer.\n Do Don't\n Lead with clear text that explains what a customer can add to the order they've placed. For example: It\u2019s not too late to add to your order.\n Include the product name and the discount associated with it.\n Use exclamation points. For example: \"Wait! Before time runs out!\n Use misleading language that makes the upsell offer feel compulsory or introduces doubt about the status of the order.\n Product title and price\n The product must have the same title and price that it has on the merchant\u2019s store. Keep this consistent to maintain a customer\u2019s trust if they compare. Place the price of the product directly below the product title.\n If the post-purchase product is an upsell offer at a discounted price, then do the following:\n Strike out the original price of the product.\n Display the discounted price next to the original price so that the relationship is clear.\n Product image\n The product image represents the product being offered to the customer in the post-purchase upsell offer. Use the App Bridge Checkout Image component to add an image:\n ADDING MULTIPLE IMAGES\n If the upsell offer includes multiple images, then the images need to be easy to navigate and provide additional context to the customer. Images can be presented using different angles or sizes.\n Note\n There isn't an App Bridge Checkout component available for a carousel feature.\n Do Don't\n Use 48px previous and next arrow buttons.\n Give customers options to swipe between images, navigate using the keyboard, or click on a thumbnail to navigate to the next image.\n Make additional images responsive across screen sizes.\n Implement auto-scrolling through the images, as this might overwhelm customers.\n Price breakdown\n The post-purchase price breakdown shows the total cost of the upsell offer that the customer is accepting. The breakdown needs to be placed under the variant and quantity pickers. The breakdown also needs to dynamically update to reflect price changes if the customer adjusts the product's quantity or variants.\n STRUCTURE OF THE PRICE BREAKDOWN\n The price breakdown needs to include the following:\n Money line: An individual breakdown of costs.\n Subtotal: The total before shipping and taxes have been included.\n Shipping: The total shipping cost for the item(s).\n Taxes: The added cost of goods or services.\n Money summary: The combined total of the subtotal, shipping, and taxes.\n If your product description is long enough that a customer can't see the price breakdown without scrolling, then you need to include a copy of the price breakdown at the end of your product description.\n Call to action buttons\n A call to action button allows a customer to accept or decline an upsell offer. Use the App Bridge Checkout Button component to implement call to action buttons.\n ACCEPT BUTTON\n The accept button is the primary action on the post-purchase upsell page.\n Use the following text for the accept button:\n [Pay now \u2022 Product total price]\n If the product you are offering is free, then use the following text:\n [Add now \u2022 Free] or [Add now \u2022 $0]\n Note\n Don't give merchants the option to change the button text. However, you can translate the button text to any language that you want to support.\n CONFIRMING ACCEPTED UPSELL OFFERS\n Use the App Bridge Checkout Banner component to display a confirmation message when a customer accepts an upsell offer. For example: [Your order has been updated].\n Customers might not expect the accept button to generate a payment immediately because the convention is for \"buy now\" actions to trigger an additional confirmation step. To clarify that there is no additional confirmation step, do the following:\n Add a summary modal to confirm whether the customer wants to proceed.\n Add additional help text directly under the accept button informing the customer that they'll be charged immediately.\n DECLINE BUTTON\n The decline button needs to be placed under the accept button and should be less visually prominent than the accept button. However, despite being less visually prominent, the decline button should still be easy to see so that the merchant can easily decline the upsell offer. The decline button must contain the text [Decline upsell offer].\n Optional components\n In addition to the required components, you can add the following optional components to the post-purchase page:\n Product description\n Variant picker\n Quantity picker\n Product description\n The product description provides a summary of the key features of the product being displayed in the product image (or images).\n Use the TextBlock, TextContainer and Text App Bridge Checkout components to implement a product description.\n All upsell offers should have a product description that accurately summarizes the product features. Encourage merchants using your app to keep the product description as short as possible.\n LENGTHY PRODUCT DESCRIPTIONS\n If the product description is so long that it pushes the rest of the components down (variant picker, quantity picker, price breakdown, and buttons, then divide it into the following two parts:\n A summary description that reveals all other components without scrolling\n A longer, more detailed description below the other components\n Variant picker\n If the product has several variants (for example, size or color), then the page needs to include a variant picker under the product description. Use the App Bridge Checkout Select component to implement a variant picker.\n Label the picker with the name of the variant and the variant values. For example, Size: S, M, L, XL. If your product has several sizes, then consider linking to a size chart.\n Quantity picker\n The quantity picker should be placed below the product description to allow customers to adjust the quantity of a product.\n The quantity picker needs to be a number stepper that's set to 1 as a default. Use the label [Quantity].\n Post-purchase app selector\n Merchants need to enable their post-purchase app in the Shopify admin checkout settings. If there are multiple post-purchase apps installed, then they can also use the checkout settings to select which post-purchase app they want to enable on the post-purchase page.\n We recommend that you let merchants know that they might need to manually select your app to be active in the checkout settings. You could explain this in installation instructions or in your help pages.\n Your can check whether or not it is currently selected, using the following GraphQL Query:\n 1 {\n 2\n    app  {\n 3\n        isPostPurchaseAppInUse\n 4\n    }\n 5 }\n Suggested merchant-facing content for your app:\n You could use the following copy as the basis for a merchant-facing message about multiple post-purchase extensions:\n \"If you already have a post-purchase app installed, you must manually select to make [app-name] active. You can do this in the Shopify admin checkout settings. This option only shows if you already have a post-purchase app installed.\"\n Performance consideration\n To guarantee a good experience for both merchants and customers, we strongly recommend that you prioritize performance when building your extensions. You can depend on App Bridge Checkout UI components to be performant, accessible, and functional in all of the checkout's supported browsers. Keep the following guidelines in mind when building your app:\n Network calls must complete in two seconds or less.\n Network calls that occur before an interface presents to the customer must happen in the ShouldRender handler.\n Render must not require a network call before an interface presents to the customer. Ensure the extension caches required data beforehand using the storage API from ShouldRender.\n Next steps\n Learn how to create a post-purchase upsell.\n Explore UX guidelines for the entire checkout experience.\n For general best practices for developing apps, refer to Best practices for building Shopify apps.\n For practical guidance on how to design a user interface for the Shopify admin, refer to Shopify's App Design Guidelines.\n Get familiar with Polaris accessibility and content guidelines.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n User experience\n Post-purchase app selector\n Performance consideration\n Next steps\n Updates & News\n Developer changelog",
                    "filename": "docs/apps/checkout/product-offers/post-purchase/ux-guidelines/upsell/content.txt",
                    "start_index": 0,
                    "end_index": 10936,
                    "start_line": 1,
                    "end_line": 140,
                    "max_line": 140,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Overview\n Pickup availability\n Customer engagement\n Markets\n Site navigation and search\n Show pickup availability on product pages\n Merchants can make their products available through local pickup, and you can display whether a specific product variant is available for local pickup on the product page. This allows customers to view this information without having to add the product to cart and proceed to checkout to view the shipping details.\n In this tutorial, you'll learn how to show variant pickup availability on product pages.\n Requirements\n Variant selection functionality. The pickup availability JavaScript function needs to be run when variants are selected.\n Resources\n To implement pickup availability, you'll use the following:\n The variant object\n The store_availability object\n The location object\n Implementing pickup availability\n To support pickup availability functionality in your theme, you need to implements the following components:\n The pickup availability section: Renders the display content, which contains information about each location that the current variant is stocked at.\n The pickup availability container: An empty container on the product page that hosts the section content.\n A JavaScript function: Renders the section content inside the container, and makes any updates on variant selection.\n Caution\n The examples below are only meant to illustrate basic considerations for implementing this feature. The full implementation will vary depending on your theme and what you want the display to look like. You can refer to the following files in Dawn for an example of a complete solution:\n Section\n Container\n Buy Button\n JS\n CSS\n The pickup availability section\n The pickup availability section hosts the actual content to be displayed, which has two main components:\n Availability summary\n Availability modal\n This section is rendered inside the pickup availability container by the JavaScript function.\n Availability summary\n The availability summary loops through the locations returned from the store_availabilites attribute of the current variant to find any locations that have pick_up_enabled set to true. If there are any, then the availability of the current variant at the first location is displayed, along with a button to open the availability modal.\n Example\n Availability modal\n The availability modal displays the product and variant titles, and each location that the current variant is stocked at. For each location, the current availability and address are shown.\n Example\n Example\n The following is an example of a pickup availability section with an availability summary and modal.\n Note\n You should only output the availability summary and modal if the current variant has at least one location with pickup enabled.\n sections/pickup-availability.liquid\n 1 <div class=\"pickup-availability-container\">\n 2\n    {%- assign pick_up_availabilities = product_variant.store_availabilities | where: 'pick_up_enabled', true -%}\n 3\n 4\n    {%- if pick_up_availabilities.size > 0 -%}\n 5\n      <!-- Availability summary -->\n 6\n      <div class=\"pickup-availability-information\">\n 7\n        {%- assign closest_location = pick_up_availabilities.first -%}\n 8\n 9\n        {%- if closest_location.available -%}\n 10\n          {% render 'icon-in-stock' %}\n 11\n        {%- else -%}\n 12\n          {% render 'icon-out-of-stock' %}\n 13\n        {%- endif -%}\n 14\n 15\n        <div class=\"pickup-availability-information-container\">\n 16\n          {%- if closest_location.available -%}\n 17\n            <p class=\"pickup-availability-information__title\">\n 18\n              {{ 'pickup_availability.general.pick_up_available_at_html' | t: location_name: closest_location.location.name }}\n 19\n            </p>\n 20\n            <p class=\"pickup-availability-information__stock pickup-availability-small-text\">\n 21\n              {{ closest_location.pick_up_time }}\n 22\n            </p>\n 23\n            <button\n 24\n              class=\"pickup-availability-information__button js-modal-open-pickup-availability-modal pickup-availability-small-text\"\n 25\n              data-pickup-availability-modal-open aria-haspopup=\"dialog\"\n 26\n            >\n 27\n              {%- if pick_up_availabilities.size == 1 -%}\n 28\n                {{ 'pickup_availability.general.view_store_info' | t }}\n 29\n              {%- else -%}\n 30\n                {{ 'pickup_availability.general.check_other_stores' | t }}\n 31\n              {%- endif -%}\n 32\n            </button>\n 33\n          {%- else -%}\n 34\n            <p class=\"pickup-availability-information__title\">\n 35\n              {{ 'pickup_availability.general.pick_up_unavailable_at_html' | t: location_name: closest_location.location.name }}\n 36\n            </p>\n 37\n 38\n            {%- if pick_up_availabilities.size > 1 -%}\n 39\n              <button class=\"pickup-availability-information__button js-modal-open-pickup-availability-modal pickup-availability-small-text\" data-pickup-availability-modal-open aria-haspopup=\"dialog\">\n 40\n                {{ 'pickup_availability.general.check_other_stores' | t }}\n 41\n              </button>\n 42\n            {%- endif -%}\n 43\n          {%- endif -%}\n 44\n        </div>\n 45\n      </div>\n 46\n 47\n      <!-- Availability modal -->\n 48\n      <div\n 49\n        class=\"pickup-availabilities-modal modal\"\n 50\n        id=\"PickupAvailabilityModal\"\n 51\n        role=\"dialog\"\n 52\n        aria-modal=\"true\"\n 53\n        aria-labelledby=\"PickupAvailabilitiesModalProductTitle\"\n 54\n      >\n 55\n        <div class=\"pickup-availabilities-modal__header\">\n 56\n          <div class=\"pickup-availabilities-modal__product-information\">\n 57\n            <h2\n 58\n              id=\"PickupAvailabilitiesModalProductTitle\"\n 59\n              class=\"pickup-availabilities-modal__product-title\"\n 60\n              data-pickup-availability-modal-product-title\n 61\n            >\n 62\n            </h2>\n 63\n            <p\n 64\n              class=\"pickup-availabilities-modal__variant-title pickup-availability-small-text\"\n 65\n              data-pickup-availability-modal-variant-title\n 66\n            >\n 67\n              {{ product_variant.title }}\n 68\n            </p>\n 69\n          </div>\n 70\n          <button\n 71\n            type=\"button\"\n 72\n            class=\"pickup-availabilities-modal__close js-modal-close-pickup-availability-modal text-link\"\n 73\n            aria-label=\"{{ 'general.accessibility.close_modal' | t }}\"\n 74\n          >\n 75\n            {% render 'icon-close' %}\n 76\n          </button>\n 77\n        </div>\n 78\n        <ul class=\"pickup-availabilities-list\" role=\"list\">\n 79\n          {%- for availability in pick_up_availabilities -%}\n 80\n            <li class=\"pickup-availability-list__item\">\n 81\n              <h3 class=\"pickup-availability-list__location\">\n 82\n                {{ availability.location.name }}\n 83\n              </h3>\n 84\n              <div class=\"pickup-availability-list__stock pickup-availability-small-text\">\n 85\n                {%- if availability.available -%}\n 86\n                  {% render 'icon-in-stock' %} {{ 'pickup_availability.general.pick_up_available' | t }}, {{ availability.pick_up_time | downcase }}\n 87\n                {%- else -%}\n 88\n                  {% render 'icon-out-of-stock' %} {{ 'pickup_availability.general.pick_up_currently_unavailable' | t }}\n 89\n                {%- endif -%}\n 90\n              </div>\n 91\n              {%- assign address = availability.location.address -%}\n 92\n              <address class=\"pickup-availability-list__address\">\n 93\n                {{ address | format_address }}\n 94\n              </address>\n 95\n              {%- if address.phone.size > 0 -%}\n 96\n                <p class=\"pickup-availability-list__phone pickup-availability-small-text\">\n 97\n                  {{ address.phone }}<br>\n 98\n                </p>\n 99\n              {%- endif -%}\n 100\n            </li>\n 101\n          {%- endfor -%}\n 102\n        </ul>\n 103\n      </div>\n 104\n    {%- endif -%}\n 105 </div>\n 106\n 107 {% schema %}\n 108 {\n 109\n    \"name\": {},\n 110\n    \"settings\": []\n 111 }\n 112 {% endschema %}\n The pickup availability container\n The pickup availability container is an empty <div> element that the JavaScript function will render the section contents inside of. It should be placed wherever you want the availability summary to show on the product page.\n Example\n 1 <div class=\"product-single__store-availability-container\"\n 2\n    data-store-availability-container\n 3\n    data-product-title=\"\"\n 4\n    data-has-only-default-variant=\"\"\n 5\n    data-base-url=\"\"\n 6 >\n 7 </div>\n The JavaScript function\n To add the pickup availability section content inside the pickup availability container, you need to use the section rendering API. The request needs to be prefixed with a /variants/[variant-id] parameter, where [variant-id] is the variant ID of the selected variant.\n To access the variant ID, and update the display when a variant is selected, you need to make a call to your pickup availability JavaScript function from the JavaScript responsible for updating product page elements on variant selection.\n Example\n 1 fetch(window.Shopify.routes.root + \"variants/[variant-id]/?section_id=pickup-availability\")\n 2\n    .then(response => response.text())\n 3\n    .then(text => {\n 4\n      const container = document.querySelector('[data-store-availability-container]');\n 5\n      const pickupAvailabilityHTML = new DOMParser()\n 6\n        .parseFromString(text, 'text/html')\n 7\n        .querySelector('.shopify-section');\n 8\n 9\n      container.appendChild(pickupAvailabilityHTML);\n 10\n    })\n 11\n    .catch(e => {\n 12\n      console.error(e);\n 13\n    });\n Tip\n You can't access the Liquid product object in the pickup availability section. This means that product-specific changes, like updating the title and removing the variant title if the product only has a default variant, need to be done through JavaScript. The example availability container includes data-product-title and data-has-only-default-variant attributes for this purpose.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Requirements\n Resources\n Implementing pickup availability\n The pickup availability section\n The pickup availability container\n The JavaScript function\n Updates & News\n Developer changelog",
                    "filename": "docs/themes/delivery-fulfillment/pickup-availability/content.txt",
                    "start_index": 0,
                    "end_index": 10227,
                    "start_line": 1,
                    "end_line": 310,
                    "max_line": 310,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Verify that the sold out message or badge is displayed when applicable.\n Product page\n Run the following tests on your product page, on each of the product configurations outlined. For each of these tests, verify the following:\n Customers can add a selected variant to the cart\n Variant information changes dynamically when different variants are selected\n Customers are prevented from adding more than the available quantity of items to the cart\n Product configurations\n Single product (no variants)\n On sale product\n Product with one option\n Product with more than 1 option with different variant quantity inventories (out of stock variant, unavailable variant).\n Product with three options\n Product with 100 variants\n Product with no image\n Product with varying product media (image, vidoe, 3D model. AR, MP4)\n Product with unit price\n Tests\n Add a product title:\n A single word title (30 characters, no spacing)\n A multi-word title (30-60 characters)\n Verify that when variants are selected from drop-down menus, product details are updated dynamically:\n Variant prices\n Variant media\n Variant SKU\n Action buttons (disable Add to cart and dynamic checkout buttons on sold out and unavailable variants)\n Variant selectors (cross out or disable sold out and unavailable variants)\n Unit price\n Shop Pay Installments banner\n Local pickup banner\n Inventory quantity (if applicable)\n Product images\n No image\n Test the following aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n PNG image\n Image zoom (if applicable)\n Color swatches (if applicable)\n Option to disable swatches\n Clear instruction on how to upload custom swatches\n Product description\n Add multiple paragraphs (minimum 1000 characters)\n Add links:\n Internal link\n External link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Add images (images must display as they appear in the rich text editor)\n Verify that an error message appears when customers try to add more than the available quantity of items to the cart\n Blog page\n Run the following tests on your blog page. For each of these tests, verify the following:\n All blog posts in the collection are accessible\n Multiple blog post image ratios are supported\n Must support varying blog post image ratios\n Blog post information must be visible. This includes the title, excerpt, author, date, and comment count\n If available, blog filtering works as expected and combining filter tags doesn't break the page\n Test the way the grid responds to blog images of different aspect ratios, using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Test blog filtering (if applicable):\n Filter by a single-word tag (30 characters, no spacing)\n Filter by a long list of tags (20+ tags)\n Test a blog with many posts:\n Test pagination (if applicable)\n Verify that only five pages show on initial load\n Test the View more button (if applicable)\n Test infinite scrolling (if applicable)\n Blog post page (Article)\n Run the following tests on your blog post page.\n Add blog post content:\n Add multiple paragraphs (minimum 1000 characters)\n Add links:\n Internal link\n External link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Add images (images must display as they appear in the rich text editor)\n Add comments:\n Input comment text\n Submit the form\n Test error detection and handling\n Test the submission success message\n Verify that comments over a certain limit are paginated\n Test the following blog post image aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Cart page, modal, or drawer\n Run the following tests on your cart. For each of these tests, verify the following:\n All products in the cart are fully visible\n The customer must be able to update the product quantity\n Automatic discounts must update dynamically\n Add enough products to the cart to trigger scrolling\n Setting 0 for quantity should remove the product\n Verify that an error message appears when customers try to add more than the available quantity of items to the cart\n Automatic discount\n Cart notes\n Search page\n Run the following tests on your search page. For each of these tests, verify that search result attributes are fully visible.\n Verify that the number of results displayed on first load is limited\n Test pagination (if applicable):\n Pagination truncates on search results with five or more pages\n Test the View more button (if applicable)\n Test infinite scrolling (if applicable)\n Test filtering (if applicable)\n Test both list and grid view (if applicable)\n Test error detection and handling, for example, when no results are found\n Pages\n Run the following tests on a page that uses the generic page template. For each of these tests, verify that page content is fully visible.\n Add a page title:\n A single word title (30 characters, no spacing)\n A multi-word title (30-60 characters)\n Add multiple paragraphs (minimum 3000 characters)\n Add links:\n Internal link\n External link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Add image \u2013 must display imagery as inputted in the RTE\n Repeat testing for all existing product templates\n Pages (contact form template)\n Run the following tests on a page that uses the contact form template. For each of these tests, verify that customers can send the merchant an email using the contact form.\n Input text\n Test mandatory fields, such as the message field\n Submit the form\n Test error detection and handling\n Test the submission success message\n Gift card page\n Run the following tests on the gift card page. For each of these tests, verify that the gift card code and store name or logo is fully visible.\n Add logo fallback text:\n Long store name (30-40 characters, no spaces)\n Long store name with hyphens\n Add a logo:\n Test the following logo aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Transparent background on PNG image\n Logo scales appropriately\n Varying positions/alignments (if applicable)\n Gift card code must not be cut off\n 6. Link sharing\n Share a link to the store where you're testing your theme on various social media platforms. Verify that the sharing image appears. You can use tools like the Facebook sharing debugger and the Twitter card validator to perform this test.\n 7. Local pickup\n Test your local pickup banner in the following scenarios. Before you start, prepare your store to test local pickup.\n Variant 1 - available for pickup at five locations:\n Verify that the pickup banner appears\n When you click Check availability at other stores, verify that all locations are visible, and that you can scroll to see all location information\n Variant 2 - available for pickup at only one location:\n Verify that the pickup banner appears\n Verify that the Check availability at other stores text is updated to View store information\n Variant 3 - available for pickup at only two locations, and sold out one of those locations:\n Verify that the pickup banner appears, and indicates that the item is available or unavailable at one of the locations.\n Verify that the Check availability at other stores link is present\n Verify that clicking on Check availability at other stores brings up only two locations\n Variant 4 - only available at a location that doesn't offer pickup:\n Verify that the pickup banner is removed\n Variant 5 - sold out at all locations:\n Verify that the pickup banner is removed\n Verify that the Add to cart button is changed to Sold out\n Ensure the pickup banner changes dynamically when a new variant is selected\n 8. Unit pricing\n Test unit prices in your theme. Before you start, prepare your store to test unit pricing.\n Verify that unit prices change dynamically on variant change\n Verify that unit prices appear in the following locations:\n Product page\n Collection page product cards\n Cart drawer, page, or popup\n Customer order page\n 9. Rich media\n Test rich media in your theme. Before you start, prepare your store to test rich media.\n Verify 3D/AR behavior:\n Verify that you can view and move 3d models on desktop and mobile devices\n Verify that the View in your space button appears on mobile devices\n Verify that can view both AR objects on mobile devices\n Verify video behavior (YouTube, Vimeo, MP4):\n Verify that video controls are accessible\n Verify that you can mute and unmute videos\n Verify that you can play and pause videos\n Verify that variant display when the associated variant is selected\n Verify that rich media types don't break the product card layout of the collection page:\n YouTube\n Vimeo\n MP4\n 3D models\n 10. Selling plans\n Test selling plans in your theme. Before you start, prepare your store to test selling plans.\n Applied selling plans appear on the cart page\n Applied selling plans appear on the customer order page\n Was this section helpful?\n YesNo\n ON THIS PAGE\n 1. Home page\n 2. Header\n 3. Footer\n 4. Sections\n 5. Pages\n 6. Link sharing\n 7. Local pickup\n 8. Unit pricing\n 9. Rich media\n 10. Selling plans\n Updates & News\n Developer changelog",
                    "filename": "docs/themes/store/test-theme/checklist/content.txt",
                    "start_index": 13320,
                    "end_index": 22422,
                    "start_line": 353,
                    "end_line": 565,
                    "max_line": 565,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Ajax API\n Overview\n Reference\n Cart\n Product\n Product recommendations\n Predictive search\n Section Rendering API\n Customer Privacy API\n Storefront API\n Product Recommendations API reference\n The Product Recommendations API can be used to recommend related products for a given product. To learn more about how recommendations are made and the associated limitations, refer to Product recommendations.\n To learn how to show product recommendations in your theme, refer to Product recommendations.\n All Ajax API requests should use locale-aware URLs to give visitors a consistent experience.\n Note\n The Shopify Search & Discovery app enables users to customize product recommendation and search results, which can impact results from storefront search and the Ajax Product Recommendations API. To learn about how these results can be impacted, visit the Shopify Help Center.\n GET /{locale}/recommendations/products.json\n The following example request retrieves the recommended products for a specific product:\n 1 GET /{locale}/recommendations/products.json?product_id={product-id}&intent={intent}\n Query parameters\n Query parameter Required Description\n product_id Yes The unique product ID of the product that you want to show recommended products for.\n limit No\n Limits the number of results.\n The value can range from 1 to 10, and the default is 10.\n intent No\n The recommendation intent that is used to generate product recommendations. You can use intent to generate product recommendations on various pages across the online store, according to different strategies. Learn more about recommendation intents.\n The accepted values are related and complementary. The default value is related.\n Example request object\n 1 {\n 2\n    \"product_id\": \"1234567890123\",\n 3\n    \"limit\": 4,\n 4\n    \"intent\": \"related\"\n 5 }\n Example request using Fetch\n 1 fetch(window.Shopify.routes.root + \"recommendations/products.json?product_id=1234567890123&limit=4&intent=related\")\n 2\n    .then(response => response.json())\n 3\n    .then(({ products }) => {\n 4\n      if (products.length > 0) {\n 5\n        const firstRecommendedProduct = products[0];\n 6\n 7\n        alert(\n 8\n          `The title of the first recommended product is: ${firstRecommendedProduct.title}`\n 9\n        );\n 10\n      }\n 11\n    }\n 12 );\n Products response\n The following example is a response to a successful request to the /{locale}/recommendations/products.json endpoint:\n Example product response\n 1 {\n 2\n    \"intent\": \"related\",\n 3\n    \"products\": [\n 4\n      {\n 5\n        \"id\": 35,\n 6\n        \"title\": \"Gorgeous Silk Coat\",\n 7\n        \"handle\": \"gorgeous-silk-coat\",\n 8\n        \"description\": null,\n 9\n        \"published_at\": \"2019-02-26T11:34:58-05:00\",\n 10\n        \"created_at\": \"2019-02-26T11:34:58-05:00\",\n 11\n        \"vendor\": \"Marge Group\",\n 12\n        \"type\": \"Outdoors\",\n 13\n        \"tags\": [],\n 14\n        \"price\": 380000,\n 15\n        \"price_min\": 380000,\n 16\n        \"price_max\": 790000,\n 17\n        \"available\": true,\n 18\n        \"price_varies\": true,\n 19\n        \"compare_at_price\": null,\n 20\n        \"compare_at_price_min\": 0,\n 21\n        \"compare_at_price_max\": 0,\n 22\n        \"compare_at_price_varies\": false,\n 23\n        \"variants\": [\n 24\n          {\n 25\n            \"id\": 69,\n 26\n            \"title\": \"Small Aluminum Knife\",\n 27\n            \"option1\": \"Small Aluminum Knife\",\n 28\n            \"option2\": null,\n 29\n            \"option3\": null,\n 30\n            \"sku\": \"\",\n 31\n            \"requires_shipping\": true,\n 32\n            \"taxable\": true,\n 33\n            \"featured_image\": null,\n 34\n            \"available\": true,\n 35\n            \"name\": \"Gorgeous Silk Coat - Small Aluminum Knife\",\n 36\n            \"public_title\": \"Small Aluminum Knife\",\n 37\n            \"options\": [\n 38\n              \"Small Aluminum Knife\"\n 39\n            ],\n 40\n            \"price\": 790000,\n 41\n            \"weight\": 9500,\n 42\n            \"compare_at_price\": null,\n 43\n            \"inventory_management\": \"shopify\",\n 44\n            \"barcode\": null\n 45\n          },\n 46\n          {\n 47\n            \"id\": 70,\n 48\n            \"title\": \"Heavy Duty Bronze Shoes\",\n 49\n            \"option1\": \"Heavy Duty Bronze Shoes\",\n 50\n            \"option2\": null,\n 51\n            \"option3\": null,\n 52\n            \"sku\": \"\",\n 53\n            \"requires_shipping\": true,\n 54\n            \"taxable\": true,\n 55\n            \"featured_image\": null,\n 56\n            \"available\": true,\n 57\n            \"name\": \"Gorgeous Silk Coat - Heavy Duty Bronze Shoes\",\n 58\n            \"public_title\": \"Heavy Duty Bronze Shoes\",\n 59\n            \"options\": [\n 60\n              \"Heavy Duty Bronze Shoes\"\n 61\n            ],\n 62\n            \"price\": 380000,\n 63\n            \"weight\": 2200,\n 64\n            \"compare_at_price\": null,\n 65\n            \"inventory_management\": \"shopify\",\n 66\n            \"barcode\": null\n 67\n          }\n 68\n        ],\n 69\n        \"images\": [],\n 70\n        \"featured_image\": null,\n 71\n        \"options\": [\n 72\n          {\n 73\n            \"name\": \"Color or something\",\n 74\n            \"position\": 1,\n 75\n            \"values\": [\n 76\n              \"Small Aluminum Knife\",\n 77\n              \"Heavy Duty Bronze Shoes\"\n 78\n            ]\n 79\n          }\n 80\n        ],\n 81\n        \"url\": \"/products/gorgeous-silk-coat?pr_choice=default&pr_prod_strat=copurchase&pr_rec_pid=35&pr_ref_pid=17&pr_seq=alternating\"\n 82\n      },\n 83\n      {\n 84\n        \"id\": 13,\n 85\n        \"title\": \"Gorgeous Wooden Computer\",\n 86\n        \"handle\": \"gorgeous-wooden-computer\",\n 87\n        \"description\": null,\n 88\n        \"published_at\": \"2019-02-26T11:34:15-05:00\",\n 89\n        \"created_at\": \"2019-02-26T11:34:15-05:00\",\n 90\n        \"vendor\": \"Purdy Inc\",\n 91\n        \"type\": \"Garden\",\n 92\n        \"tags\": [],\n 93\n        \"price\": 930000,\n 94\n        \"price_min\": 930000,\n 95\n        \"price_max\": 1730000,\n 96\n        \"available\": true,\n 97\n        \"price_varies\": true,\n 98\n        \"compare_at_price\": null,\n 99\n        \"compare_at_price_min\": 0,\n 100\n        \"compare_at_price_max\": 0,\n 101\n        \"compare_at_price_varies\": false,\n 102\n        \"variants\": [\n 103\n          {\n 104\n            \"id\": 25,\n 105\n            \"title\": \"Mediocre Silk Bottle\",\n 106\n            \"option1\": \"Mediocre Silk Bottle\",\n 107\n            \"option2\": null,\n 108\n            \"option3\": null,\n 109\n            \"sku\": \"\",\n 110\n            \"requires_shipping\": true,\n 111\n            \"taxable\": true,\n 112\n            \"featured_image\": null,\n 113\n            \"available\": true,\n 114\n            \"name\": \"Gorgeous Wooden Computer - Mediocre Silk Bottle\",\n 115\n            \"public_title\": \"Mediocre Silk Bottle\",\n 116\n            \"options\": [\n 117\n              \"Mediocre Silk Bottle\"\n 118\n            ],\n 119\n            \"price\": 1730000,\n 120\n            \"weight\": 5700,\n 121\n            \"compare_at_price\": null,\n 122\n            \"inventory_management\": \"shopify\",\n 123\n            \"barcode\": null\n 124\n          },\n 125\n          {\n 126\n            \"id\": 26,\n 127\n            \"title\": \"Lightweight Paper Shirt\",\n 128\n            \"option1\": \"Lightweight Paper Shirt\",\n 129\n            \"option2\": null,\n 130\n            \"option3\": null,\n 131\n            \"sku\": \"\",\n 132\n            \"requires_shipping\": true,\n 133\n            \"taxable\": true,\n 134\n            \"featured_image\": null,\n 135\n            \"available\": true,\n 136\n            \"name\": \"Gorgeous Wooden Computer - Lightweight Paper Shirt\",\n 137\n            \"public_title\": \"Lightweight Paper Shirt\",\n 138\n            \"options\": [\n 139\n              \"Lightweight Paper Shirt\"\n 140\n            ],\n 141\n            \"price\": 930000,\n 142\n            \"weight\": 6600,\n 143\n            \"compare_at_price\": null,\n 144\n            \"inventory_management\": \"shopify\",\n 145\n            \"barcode\": null\n 146\n          }\n 147\n        ],\n 148\n        \"images\": [],\n 149\n        \"featured_image\": null,\n 150\n        \"options\": [\n 151\n          {\n 152\n            \"name\": \"Color or something\",\n 153\n            \"position\": 1,\n 154\n            \"values\": [\n 155\n              \"Mediocre Silk Bottle\",\n 156\n              \"Lightweight Paper Shirt\"\n 157\n            ]\n 158\n          }\n 159\n        ],\n 160\n        \"url\": \"/products/gorgeous-wooden-computer?pr_choice=default&pr_prod_strat=description&pr_rec_pid=13&pr_ref_pid=17&pr_seq=alternating\"\n 161\n      }\n 162\n    ]\n 163 }\n Error responses\n When a request to the /{locale}/recommendations/products.json endpoint is unsuccessful, one of the following error responses is returned:\n Invalid parameter\n Product not found\n Invalid parameter\n In the absence of a product_id parameter, the endpoint returns the following error:\n 1 {\n 2\n    \"status\": 422,\n 3\n    \"message\": \"Invalid parameter error\",\n 4\n    \"description\": \"A product_id value is missing\"\n 5 }\n If intent isn't one of related or complementary, then the endpoint returns the following error:\n 1 {\n 2\n    \"status\": 422,\n 3\n    \"message\": \"Invalid parameter error\",\n 4\n    \"description\": \"The intent parameter must be one of related, complementary\"\n 5 }\n Product not found\n If the product_id is for a product that doesn't exist, or that isn't published in the Online store channel, then the endpoint returns the following error:\n 1 {\n 2\n    \"status\": 404,\n 3\n    \"message\": \"Product not found\",\n 4\n    \"description\": \"No product with id <product_id> is published in the online store\"\n 5 }\n GET /{locale}/recommendations/products\n The following example request retrieves the HTML from a section rendered with product recommendations for a specific product.\n 1 GET /{locale}/recommendations/products?product_id={product-id}&section_id=product-recommendations\n Query parameters\n Query parameter Required Description\n product_id Yes The unique product ID of the product that you want to show recommended products for.\n limit No\n Limits the number of results.\n The value can range from 1 to 10, and the default is 10.\n section_id Yes The unique section ID of the section file that you want to render with product recommendations.\n intent No\n The recommendation intent that is used to generate product recommendations. You can use intent to generate product recommendations on various pages across the online store, according to different strategies. Learn more about recommendation intents.\n The following values are accepted: related, complementary. The default value is related.\n Example request object\n 1 {\n 2\n    \"product_id\": \"1234567890123\",\n 3\n    \"limit\": 4,\n 4\n    \"section_id\": \"product-recommendations\",\n 5\n    \"intent\": \"related\"\n 6 }\n Example request using Fetch\n 1 const productRecommendationsSection = document.querySelector('.product-recommendations');\n 2\n 3 fetch(window.Shopify.routes.root + \"recommendations/products?product_id=12345690123&limit=4&section_id=product-recommendations&intent=related\")\n 4\n   .then(response => response.text())\n 5\n   .then((text) => {\n 6\n      const html = document.createElement('div');\n 7\n      html.innerHTML = text;\n 8\n      const recommendations = html.querySelector('.product-recommendations');\n 9\n 10\n      if (recommendations && recommendations.innerHTML.trim().length) {\n 11\n        productRecommendationsSection.innerHTML = recommendations.innerHTML;\n 12\n      }\n 13\n   });\n Section response\n The response to a successful request to the /{locale}/recommendations/products endpoint.\n The section response contains the HTML of the provided section rendered with the recommendations object containing the recommended products for the specified product.\n For example, the following section would generate the following section response:\n Example section\n 1 {%- if recommendations.performed?",
                    "filename": "docs/api/ajax/reference/product-recommendations/content.txt",
                    "start_index": 0,
                    "end_index": 11568,
                    "start_line": 1,
                    "end_line": 472,
                    "max_line": 555,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product recommendations\n Overview\n Related products\n Complementary products\n Media and images\n Theme Store\n Product recommendations\n Displaying recommended products to customers makes it easier for them to discover new products, and can help to increase online store sales.\n Before you add product recommendations to your theme, it's a good idea to get familiar with the following:\n Recommendation intents\n How to track recommendations\n To learn how to include recommendations in your theme, refer to Related products and Complementary products. You can also refer to Dawn's implementation.\n Recommendation intents\n Tailoring product recommendations across the customer's journey is a powerful way to help customers discover products. Recommendation intents are designed to recommend products using a targeted strategy.\n Shopify provides the following types of recommendation intents:\n Related products: Offer customers a mix of products that are similar to a product the customer is interacting with. An example is substitutable products that display in a You might also like section.\n Complementary products: Offer customers products that are complementary to a product the customer is interacting with. An example is add-on products that display in a Pair it with section.\n Only related recommendations are auto-generated by Shopify. Complementary recommendations need to be manually set up. Recommended products for each intent can be configured using the Shopify Search & Discovery app.\n Track recommendations\n To track your product recommendations in Shopify, you need to use the format for product URLs that's specified by the API. To learn more, refer to Tracking conversions for product recommendations.\n After you've implemented product recommendations, you can track how effective they are directly from the Analytics page in your Shopify admin. To learn more about product recommendation reports, refer to Product recommendation conversion over time.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Recommendation intents\n Track recommendations\n Updates & News\n Developer changelog\n Partner blog\n Engineering blog",
                    "filename": "docs/themes/product-merchandising/recommendations/content.txt",
                    "start_index": 0,
                    "end_index": 2126,
                    "start_line": 1,
                    "end_line": 30,
                    "max_line": 30,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "81\n      When a buyer chooses a different variant, we ensure that only the relevant selling plan selection box is displayed.\n 82\n      This guarantees that only the selling plan associated with the selected variant is shown.\n 83\n    */\n 84\n    handleSellingPlanFormVisibility() {\n 85\n      const sellingPlanFormForSelectedVariant = this.shopifySection.querySelector(\n 86\n        `section[data-variant-id=\"${this.variantIdInput.value}\"]`,\n 87\n      );\n 88\n      const sellingPlanFormsForUnselectedVariants =\n 89\n        this.shopifySection.querySelectorAll(\n 90\n          `.selling_plan_theme_integration:not([data-variant-id=\"${this.variantIdInput.value}\"])`,\n 91\n        );\n 92\n      this.showSellingPlanForm(sellingPlanFormForSelectedVariant);\n 93\n      this.hideSellingPlanForms(sellingPlanFormsForUnselectedVariants);\n 94\n    }\n 95\n 96\n    handleVariantChange() {\n 97\n      this.handleSellingPlanFormVisibility();\n 98\n      this.updateSellingPlanInputsValues();\n 99\n      this.listenToSellingPlanFormRadioButtonChange();\n 100\n    }\n 101\n 102\n    /*\n 103\n      The functions listenToVariantChange() and listenToAddToCartForms() are implemented to track when a product variant is altered or when the product form is updated.\n 104\n      The identification of the variant is crucial as it dictates which selling plan box should be displayed.\n 105\n    */\n 106\n    listenToVariantChange() {\n 107\n      this.listenToAddToCartForms();\n 108\n      if (this.variantIdInput.tagName === 'INPUT') {\n 109\n        const variantIdObserver = new MutationObserver((mutationList) => {\n 110\n          mutationList.forEach((mutationRecord) => {\n 111\n            this.handleVariantChange(mutationRecord.target.value);\n 112\n          });\n 113\n        });\n 114\n 115\n        variantIdObserver.observe(this.variantIdInput, {\n 116\n          attributes: true,\n 117\n        });\n 118\n      }\n 119\n    }\n 120\n 121\n    listenToAddToCartForms() {\n 122\n      this.addToCartForms.forEach((addToCartForm) => {\n 123\n        addToCartForm.addEventListener('change', () => {\n 124\n          this.handleVariantChange();\n 125\n        });\n 126\n      });\n 127\n    }\n 128\n 129\n    get regularPriceElement() {\n 130\n      return this.shopifySection.querySelector('.price__regular');\n 131\n    }\n 132\n 133\n    get salePriceElement() {\n 134\n      return this.shopifySection.querySelector('.price__sale');\n 135\n    }\n 136\n 137\n    get salePriceValue() {\n 138\n      return this.salePriceElement.querySelector('.price-item--sale');\n 139\n    }\n 140\n 141\n    get regularPriceValue() {\n 142\n      return this.salePriceElement.querySelector('.price-item--regular');\n 143\n    }\n 144\n 145\n    get sellingPlanAllocationPrice() {\n 146\n      return document.getElementById(\n 147\n        `${this.selectedPurchaseOption.dataset.sellingPlanGroupId}_allocation_price`,\n 148\n      );\n 149\n    }\n 150\n 151\n    get selectedPurchaseOptionPrice() {\n 152\n      return this.selectedPurchaseOption.dataset.variantPrice;\n 153\n    }\n 154\n 155\n    get selectedPurchaseOptionComparedAtPrice() {\n 156\n      return this.selectedPurchaseOption.dataset.variantCompareAtPrice;\n 157\n    }\n 158\n 159\n    get price() {\n 160\n      return this.sellingPlanAllocationPrices.price ?? null;\n 161\n    }\n 162\n 163\n    /*\n 164\n      We aim to ascertain whether a compared price exists, which would indicate that the currently selected input has a discount applied to it.\n 165\n      If a discount is detected, the discounted price is displayed; otherwise, the regular price is shown.\n 166\n    */\n 167\n    updatePrice() {\n 168\n      if (\n 169\n        !this.selectedPurchaseOptionComparedAtPrice ||\n 170\n        this.selectedPurchaseOptionComparedAtPrice ===\n 171\n          this.selectedPurchaseOptionPrice\n 172\n      ) {\n 173\n        this.showRegularPrice();\n 174\n        this.hideSalePrice();\n 175\n        this.priceElement.classList.remove('price--on-sale');\n 176\n      } else {\n 177\n        this.showSalePrice();\n 178\n        this.hideRegularPrice();\n 179\n        this.priceElement.classList.add('price--on-sale');\n 180\n      }\n 181\n    }\n 182\n 183\n    hideSalePrice() {\n 184\n      this.salePriceElement.style.display = 'none';\n 185\n    }\n 186\n 187\n    hideRegularPrice() {\n 188\n      this.regularPriceElement.style.display = 'none';\n 189\n    }\n 190\n 191\n    showRegularPrice() {\n 192\n      this.regularPriceElement.style.display = 'block';\n 193\n      this.shopifySection.querySelector('.price__sale').style.display = 'none';\n 194\n    }\n 195\n 196\n    showSalePrice() {\n 197\n      this.salePriceElement.style.display = 'block';\n 198\n      this.regularPriceValue.innerHTML =\n 199\n        this.selectedPurchaseOptionComparedAtPrice;\n 200\n      this.salePriceValue.innerHTML = this.selectedPurchaseOptionPrice;\n 201\n    }\n 202\n 203\n    get sellingPlanInputs() {\n 204\n      return this.shopifySection.querySelectorAll('.selected-selling-plan-id');\n 205\n    }\n 206\n 207\n    updateSellingPlanInputsValues() {\n 208\n      this.sellingPlanInputs.forEach((sellingPlanInput) => {\n 209\n        sellingPlanInput.value = this.sellingPlanInputValue;\n 210\n      });\n 211\n    }\n 212\n 213\n    get sellingPlanInputValue() {\n 214\n      return this.selectedPurchaseOption?.dataset.sellingPlanId ?? null;\n 215\n    }\n 216\n 217\n    get selectedPurchaseOption() {\n 218\n      return this.visibleSellingPlanForm?.querySelector(\n 219\n        'input[type=\"radio\"]:checked',\n 220\n      );\n 221\n    }\n 222\n 223\n    set selectedPurchaseOption(selectedPurchaseOption) {\n 224\n      this._selectedPurchaseOption = selectedPurchaseOption;\n 225\n    }\n 226\n 227\n    handleRadioButtonChange(selectedPurchaseOption) {\n 228\n      this.selectedPurchaseOption = selectedPurchaseOption;\n 229\n      this.updateSellingPlanInputsValues();\n 230\n      this.updatePrice();\n 231\n    }\n 232\n 233\n    listenToSellingPlanFormRadioButtonChange() {\n 234\n      this.visibleSellingPlanForm\n 235\n        ?.querySelectorAll('input[type=\"radio\"]')\n 236\n        .forEach((radio) => {\n 237\n          radio.addEventListener('change', (event) => {\n 238\n            this.handleRadioButtonChange(event.target);\n 239\n          });\n 240\n        });\n 241\n    }\n 242\n 243\n    enablePerformanceObserver() {\n 244\n      const performanceObserver = new PerformanceObserver((list) => {\n 245\n        list.getEntries().forEach((entry) => {\n 246\n          if (entry.initiatorType !== 'fetch') return;\n 247\n 248\n          const url = new URL(entry.name);\n 249\n          /*\n 250\n            When a buyer selects a product variant, a fetch request is initiated.\n 251\n            Upon completion of this fetch request, we update the price to reflect the correct value.\n 252\n          */\n 253\n          if (url.search.includes('variant') || url.search.includes('variants')) {\n 254\n            this.updatePrice();\n 255\n          }\n 256\n        });\n 257\n      });\n 258\n 259\n      performanceObserver.observe({entryTypes: ['resource']});\n 260\n    }\n 261 }\n 262\n 263 document\n 264\n    .querySelectorAll('.selling_plan_app_container')\n 265\n    .forEach((sellingPlansWidgetContainer) => {\n 266\n      new SellingPlansWidget(sellingPlansWidgetContainer);\n 267\n    });\n The functions listenToVariantChange() and listenToAddToCartForms() are implemented to track when a product variant is altered or when the product form is updated. The identification of the variant is crucial as it dictates which selling plan box should be displayed. For more information about how to find a variant, refer to our community post.\n The selling plan display in the cart\n If a customer selects a selling plan on the product page, then they should see that selection in the cart.\n Available selected selling plans are accessible through the selling_plan_allocation attribute of the line_item object. The following is an example:\n /customers/order.liquid\n 1 {% if line_item.selling_plan_allocation %}\n 2\n    <p class=\"selling-plan\">{{ line_item.selling_plan_allocation.selling_plan.name }}</p>\n 3 {% endif %}\n The selling plan selector\n Rather than just display the selected selling plan, you can give customers the option to add a new selling plan, or to remove or edit the current selling plan. To do this, you should implement a selling plan selector that lists out the available selling plans for the line item's variant, and reflects the currently selected selling plan.\n You can loop through the selling_plan_allocations attribute of the variant object associated with the line item (line_item.variant) to build out your selector options. You can compare the selected selling plan ID with the ID of the selling plan at the current index of the loop to make sure that the selector reflects the currently selected selling plan.\n To change the selling plan for a line item, you can use the /{locale}/cart/change.js endpoint of the Cart AJAX API.\n Example\n The following example outputs a selling plan selector:\n 1 <select name=\"selling-plan\" data-line=\"{{ forloop.index }}\" data-quantity=\"{{ line_item.quantity }}\">\n 2\n    <option value=\"\">One-time purchase</option>\n 3\n 4\n    {% for selling_plan_allocation in line_item.variant.selling_plan_allocations %}\n 5\n      <option\n 6\n        value=\"{{ selling_plan_allocation.selling_plan.id }}\"\n 7\n        {% if line_item.selling_plan_allocation.selling_plan.id == selling_plan_allocation.selling_plan.id %}selected=\"selected\"{% endif %}\n 8\n      >\n 9\n        {{ selling_plan_allocation.selling_plan.name }}\n 10\n      </option>\n 11\n    {% endfor %}\n 12 </select>\n The following example illustrates the concept of watching for a change in the selling plan selector and applying those changes through the /cart/change.js endpoint. It isn't completely functional.\n 1 const sellingPlanSelectors = document.querySelectorAll('[name=\"selling-plan\"]');\n 2\n 3 sellingPlanSelectors.forEach(function(element) {\n 4\n    element.addEventListener('change', function(event) {\n 5\n      const data = {\n 6\n        'line': event.target.dataset.line,\n 7\n        'quantity': event.target.dataset.quantity,\n 8\n        'id': event.target.value\n 9\n      }\n 10\n 11\n      fetch('/cart/change.js', {\n 12\n        method: 'POST',\n 13\n        headers: {\n 14\n          'Content-Type': 'application/json'\n 15\n        },\n 16\n        body: JSON.stringify(data)\n 17\n      })\n 18\n      .then(response => {\n 19\n        // Refresh page, or re-render cart\n 20\n        console.log(response);\n 21\n      })\n 22\n      .catch((error) => {\n 23\n        console.error('Error:', error);\n 24\n      });\n 25\n    });\n 26 });\n The checkout charge display in the cart\n Because pre-order and TBYB can change how much a customer has to pay up front, you should show them how much they'll be charged at checkout. You can calculate this amount using selling_plan.checkout_charge object.\n You can access a line item's checkout charge through its selling_plan_allocation.\n The following table outlines the types of checkout charges:\n Checkout charge type Description\n percentage A percent value representing the percentage amount of the full price that must be paid up front.\n price The price to be paid up front, in cents.\n Note\n You can't configure checkout charges for subscriptions. Because of this, subscriptions always have a value_type of percentage and value of 100.\n Example\n The following example outputs the appropriate line item price depending on whether the line item has a selling plan allocation, and what kind of selling plan it is.\n 1 {% if item.selling_plan_allocation %}\n 2\n    {%- assign checkout_charge = item.selling_plan_allocation.selling_plan.checkout_charge -%}\n 3\n 4\n    {% if checkout_charge.value_type == 'percentage' %}\n 5\n      {{ item.original_price | times: checkout_charge.value | divided_by: 100 | money }}\n 6\n    {% else %}\n 7\n      {{ checkout_charge.value | money }}\n 8\n    {% endif %}\n 9 {% else %}\n 10\n    {{ item.original_price | money }}\n 11 {% endif %}\n Customer order selling plan display\n When a customer selects a selling plan, they should see the name of that selection on the customer order page.\n The selected selling plan, if there is one, is accessible through the selling_plan_allocation attribute of the line_item object. The following is an example:\n /customers/order.liquid\n 1 {% if line_item.selling_plan_allocation %}\n 2\n    <p class=\"selling-plan\">{{ line_item.selling_plan_allocation.selling_plan.name }}</p>\n 3 {% endif %}\n Was this section helpful?",
                    "filename": "docs/themes/pricing-payments/preorder-tbyb/add-preorder-tbyb-to-your-theme/content.txt",
                    "start_index": 13337,
                    "end_index": 25629,
                    "start_line": 210,
                    "end_line": 859,
                    "max_line": 870,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Discounts\n Subscriptions\n Pre-orders and Try Before You Buy\n Overview\n Add pre-orders and TBYB to your theme\n Pre-orders and TBYB UX guidelines\n Shop Pay Installments\n Accelerated checkout\n B2B\n Unit pricing\n Add pre-orders and Try Before You Buy (TBYB) to your theme\n In this tutorial, you'll learn the basics of how to support pre-orders and TBYB in your theme.\n Tip\n Refer to Pre-orders and Try Before You Buy UX guidelines to review user experience considerations that might impact your implementation.\n Requirements\n Add a product form to a template. A product form can be added to any template that can access the product object.\n Resources\n To support pre-orders or TBYB in your theme, you'll use the following resources:\n The form object.\n Objects and object properties that represent selling plan information, including the following:\n selling_plan_group: A group of selling plans that are available for the product's variants.\n selling_plan: The details of the selling plan.\n selling_plan_allocation: Information about how a particular selling plan affects a line item.\n variant.requires_selling_plan.\n The /{locale}/cart/change.js endpoint of the Cart AJAX API.\n Depending on where you're implementing your selling plan functionality, you'll access selling plan information through the following parent objects:\n Context Example template types Parent object\n Product and variant listings product variant\n Variants that have been added to a cart or are part of an order\n cart\n customers/order\n line_item\n For more information about how to present each of these objects and their attributes, refer to Pre-orders and Try Before You Buy UX guidelines.\n Implementing pre-orders or TBYB displays\n To support pre-orders or TBYB in your theme, you need to implement the following components:\n A selling plan selector on the product page: This selector enables customers to select a selling plan.\n JavaScript to update the selling plan: Use JavaScript to update the available selling plans when variants are selected, and update the hidden selling plan input as selling plan options are selected.\n A selling plan display in the cart: Indicate to customers when a selling plan has been applied to a line item. You can also implement a selling plan selector to give the option to add a new selling plan, or to remove or edit the current selling plan.\n A checkout charge in the cart: Display a checkout charge that represents the amount that customers need to pay during checkout.\n A selling plan display on the customer order pages: Indicate to customers when a selling plan has been applied to a line item.\n The selling plan selector on the product page\n You can add a selling plan selector for products wherever you can access the product form. For example, you might add a selling plan selector to the product template or a section in the template.\n Selling plan groups and individual selling plans have a similar structure to products and variants. You can view selling plan groups like products, where there are multiple options that comprise an individual selling plan, similar to variant options that comprise an individual variant.\n You can access the available selling plan options through the selling_plan_groups attribute of the product.\n Add the following to your product form:\n For each selling_plan_group, output each of its options inside the product form.\n To track the ID of the selected selling plan, add an input with an attribute of name=\"selling_plan\". The value should be the ID of the selected selling plan. If there's no selected selling plan, then the value should be empty.\n Save the product object so that it can be accessed in JavaScript.\n Example\n The following is an example of how you can display the selling plan group in your product form. Make sure to add the code inside your product form. The example is referring to the file selling-plans-integration.js. This file is covered in the JavaScript section. The following code is doing the following:\n Assigning the product and the current variant to be used inside the integration\n Looping through every selling plan group, and displaying each associated selling plan\n Adding a pre-orders or TBYB badge to display next to the product price when a buyer is selecting either a pre-order or TBYB\n Note\n This example demonstrates how to integrate selling plans into your theme. We recommend customizing this integration to suit your specific needs. The following code can also be used as a theme app block.\n /assets/selling-plans-integration.liquid\n 1 {%- assign current_variant = product.selected_or_first_available_variant | default: product.variants.first -%}\n 2\n 3 {% if product.selling_plan_groups.size > 0 %}\n 4\n    <div class=\"selling_plan_app_container\" data-section-id='{{ section.id }}'>\n 5\n      <script src=\"{{ 'selling-plans-integration.js' | asset_url }}\" defer></script>\n 6\n      <style>.selling_plan_theme_integration--hidden {display: none;}</style>\n 7\n      {% for variant in product.variants %}\n 8\n        {%liquid\n 9\n          assign variantPrice = variant.price | money_with_currency | escape\n 10\n          assign variantComparedAtPrice = variant.compare_at_price | money_with_currency | escape\n 11\n        %}\n 12\n        {% if variant.selling_plan_allocations.size > 0 %}\n 13\n          <section data-variant-id='{{ variant.id }}' class='selling_plan_theme_integration {% if variant.id != current_variant.id %}selling_plan_theme_integration--hidden{% endif %}'>\n 14\n            <fieldset>\n 15\n              <legend>\n 16\n                {{ block.settings.supporting_text_title }}\n 17\n              </legend>\n 18\n              <div>\n 19\n                {% unless product.requires_selling_plan %}\n 20\n                  <div>\n 21\n                    <label>\n 22\n                      <input\n 23\n                        aria-label='One-time purchase. Product price {{ variantPrice }}'\n 24\n                        type='radio'\n 25\n                        name=\"purchaseOption_{{ section.id }}_{{ variant.id }}\"\n 26\n                        {% if variant.available == false %}disabled{% endif %}\n 27\n                        id='{{ section.id }}_one_time_purchase'\n 28\n                        data-radio-type='one_time_purchase'\n 29\n                        data-variant-id='{{ variant.id }}'\n 30\n                        data-variant-price='{{ variantPrice }}'\n 31\n                        data-variant-compare-at-price='{{ variantComparedAtPrice }}'\n 32\n                        checked\n 33\n                      />\n 34\n                      One-time purchase\n 35\n                    </label>\n 36\n                  </div>\n 37\n                {% endunless %}\n 38\n                {% assign group_ids = variant.selling_plan_allocations | map: 'selling_plan_group_id' | uniq %}\n 39\n                {% for group_id in group_ids %}\n 40\n                  {%liquid\n 41\n                     assign group = product | map: 'selling_plan_groups' | where: 'id', group_id | first\n 42\n                     assign allocations = variant | map: 'selling_plan_allocations' | where: 'selling_plan_group_id', group_id\n 43\n 44\n                     if forloop.first\n 45\n                      assign first_selling_plan_group = true\n 46\n                    else\n 47\n                      assign first_selling_plan_group = false\n 48\n                    endif\n 49\n                  %}\n 50\n                  <div>\n 51\n                    <div>\n 52\n                      <label>{{ group.name }}</label>\n 53\n                    </div>\n 54\n                    <ul>\n 55\n                      {% for allocation in allocations %}\n 56\n 57\n                        {%liquid\n 58\n                          if forloop.first and product.requires_selling_plan and first_selling_plan_group\n 59\n                            assign plan_checked = 'checked'\n 60\n                          else\n 61\n                            assign plan_checked = nil\n 62\n                          endif\n 63\n 64\n                          assign allocationPrice = allocation.price | money_with_currency | escape\n 65\n                          assign allocationComparedAtPrice = allocation.compare_at_price | money_with_currency | escape\n 66\n                        %}\n 67\n 68\n                        <li>\n 69\n                          <label>\n 70\n                            <input\n 71\n                              type='radio'\n 72\n                              {% if variant.available == false %}disabled{% endif %}\n 73\n                              aria-label='{{ allocation.selling_plan.name }}. Product price {{ allocationPrice }}'\n 74\n                              name=\"purchaseOption_{{ section.id }}_{{ variant.id }}\"\n 75\n                              data-radio-type='selling_plan'\n 76\n                              data-selling-plan-id='{{ allocation.selling_plan.id }}'\n 77\n                              data-selling-plan-group-id='{{ section.id }}_{{ group_id }}_{{ variant.id }}'\n 78\n                              data-selling-plan-adjustment='{{ allocation.selling_plan.price_adjustments.size }}'\n 79\n                              data-variant-price='{{ allocationPrice }}'\n 80\n                              data-variant-compare-at-price='{{ allocationComparedAtPrice }}'\n 81\n                              {{ plan_checked }}>\n 82\n                            {{ allocation.selling_plan.name }}\n 83\n                          </label>\n 84\n                        </li>\n 85\n                      {% endfor %}\n 86\n                    </ul>\n 87\n                  </div>\n 88\n                {% endfor %}\n 89\n              </div>\n 90\n            </fieldset>\n 91\n          </section>\n 92\n        {% endif %}\n 93\n      {% endfor %}\n 94\n    </div>\n 95\n    <input\n 96\n      name='selling_plan'\n 97\n      class='selected-selling-plan-id'\n 98\n      type='hidden'>\n 99 {% endif %}\n JavaScript to update selling plan information\n JavaScript is used to interact with the theme integration. This makes it possible for a buyer to select a product and add the correct pre-orders or TBYB to their cart. You can create a separate file named selling-plans-integration.js inside the Assets folder of your theme. The following example illustrates how JavaScript can interact with the selling plan liquid integration:\n /assets/selling-plans-integration.js\n 1 const hiddenClass = 'selling_plan_theme_integration--hidden';\n 2\n 3 class SellingPlansWidget {\n 4\n    constructor(sellingPlansWidgetContainer) {\n 5\n      this.enablePerformanceObserver();\n 6\n      this.sellingPlansWidgetContainer = sellingPlansWidgetContainer;\n 7\n      this.appendSellingPlanInputs();\n 8\n      this.updateSellingPlanInputsValues();\n 9\n      this.listenToVariantChange();\n 10\n      this.listenToSellingPlanFormRadioButtonChange();\n 11\n      this.updatePrice();\n 12\n    }\n 13\n 14\n    get sectionId() {\n 15\n      return this.sellingPlansWidgetContainer.getAttribute('data-section-id');\n 16\n    }\n 17\n 18\n    get shopifySection() {\n 19\n      return document.querySelector(`#shopify-section-${this.sectionId}`);\n 20\n    }\n 21\n 22\n    /*\n 23\n      We are careful to target the correct form, as there are instances when we encounter an installment form that we specifically aim to avoid interacting with.\n 24\n    */\n 25\n    get variantIdInput() {\n 26\n      return (\n 27\n        this.addToCartForms[1]?.querySelector(`input[name=\"id\"]`) ||\n 28\n        this.addToCartForms[1]?.querySelector(`select[name=\"id\"]`) ||\n 29\n        this.addToCartForms[0].querySelector(`input[name=\"id\"]`) ||\n 30\n        this.addToCartForms[0].querySelector(`select[name=\"id\"]`)\n 31\n      );\n 32\n    }\n 33\n 34\n    get priceElement() {\n 35\n      return this.shopifySection.querySelector('.price');\n 36\n    }\n 37\n 38\n    get comparedAtPrice() {\n 39\n      return this.shopifySection.querySelector('.price__sale');\n 40\n    }\n 41\n 42\n    get visibleSellingPlanForm() {\n 43\n      return this.shopifySection.querySelector(\n 44\n        `section[data-variant-id^=\"${this.variantIdInput.value}\"]`,\n 45\n      );\n 46\n    }\n 47\n 48\n    get isVariantAvailable() {\n 49\n      return this.selectedPurchaseOption.getAttributeNames().includes('disabled');\n 50\n    }\n 51\n 52\n    get sellingPlanInput() {\n 53\n      return this.shopifySection.querySelector('.selected-selling-plan-id');\n 54\n    }\n 55\n 56\n    get addToCartForms() {\n 57\n      return this.shopifySection.querySelectorAll('[action*=\"/cart/add\"]');\n 58\n    }\n 59\n 60\n    /*\n 61\n      To enable the addition of a selling plan to a cart, it's necessary to include an input with the name \"selling_plan\", which will carry the selling ID as its value. When a buyer clicks on 'add to cart', the appropriate selling plan ID is added to their cart.\n 62\n    */\n 63\n    appendSellingPlanInputs() {\n 64\n      this.addToCartForms.forEach((addToCartForm) => {\n 65\n        addToCartForm.appendChild(this.sellingPlanInput.cloneNode());\n 66\n      });\n 67\n    }\n 68\n 69\n    showSellingPlanForm(sellingPlanFormForSelectedVariant) {\n 70\n      sellingPlanFormForSelectedVariant?.classList?.remove(hiddenClass);\n 71\n    }\n 72\n 73\n    hideSellingPlanForms(sellingPlanFormsForUnselectedVariants) {\n 74\n      sellingPlanFormsForUnselectedVariants.forEach((element) => {\n 75\n        element.classList.add(hiddenClass);\n 76\n      });\n 77\n    }\n 78\n 79\n    /*\n 80\n      Each product variant comes with a selling plan selection box that the buyer can interact with.",
                    "filename": "docs/themes/pricing-payments/preorder-tbyb/add-preorder-tbyb-to-your-theme/content.txt",
                    "start_index": 0,
                    "end_index": 13335,
                    "start_line": 1,
                    "end_line": 393,
                    "max_line": 870,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Testing\n Overview\n Testing assets\n Testing checklist\n Review process\n Theme success\n Theme revenue share\n Testing your theme for the Shopify Theme Store\n Use this checklist to ensure that your theme meets the functional requirements for the Shopify Theme Store. The checklist doesn't comprehensively represent all of the requirements for the Theme Store, but it can help you to make sure that your theme addresses edge cases that the theme review team will test as a part of the review process.\n To run these tests, you need to populate your store with data, and configure some additional features. To download this data and learn learn about the additional configurations you need to make, refer to Testing assets.\n You should run these tests in both the theme editor and the storefront.\n 1. Home page\n Add the following sections to the home page. After you add all of the sections, verify that they work properly.\n Three slideshows\n Five featured products, three of which are the same product\n Three different featured collections\n One collection list\n Three image with text\n One newsletter\n One rich text\n One blog post\n Two video (if applicable)\n Add additional sections until the homepage has 25 sections\n 2. Header\n Run the following tests on your header. For each of these tests, verify the following:\n The store name or logo displays properly and is accessible\n Header icons or links display properly and are accessible\n The navigation functions properly, and navigation titles are fully visible\n Add logo fallback text:\n Long store name (30-40 characters, no spaces)\n Add a logo:\n Test different aspect ratios in portrait and landscape mode:\n 16:9\n 4:3\n 3:2\n 1:1\n Transparent background on PNG image\n Logo scaling\n Different positions and alignments (if applicable)\n Add navigation:\n Long navigation menu (10+ menu items)\n Single-level navigation\n Two-level nested navigation\n Three-level nested navigation\n Long level one menu item titles (30-60 characters)\n Long level two menu item titles (30-60 characters)\n Long level three menu item titles (30-60 characters)\n Mega menu (if applicable)\n 3. Footer\n Run the following tests on your footer. For each of these tests, verify that footer text, icons, images are fully visible and functional.\n Add five columns or blocks, or the maximum number of blocks\n Add multiple menus\n Add a long navigation menu (10+ menu items)\n Add menu items with long titles (30-60 characters)\n Add all social links\n If your footer has a newsletter form, then test the following:\n Input form text\n Submit the form\n Test error detection and handling\n Test the submission success message\n 4. Sections\n Test the following sections in your theme:\n Announcement bar\n Slideshow\n Featured product\n Featured collection\n Collection list\n Image with text\n Newsletter\n Rich text\n Blog posts\n Video\n Any sections unique to your theme\n Announcement bar\n Run the following tests on your announcement bar section. For each of these tests, verify the following:\n Text and icons are fully visible\n Any links function properly\n Link styling indicates that the text is clickable\n If the text input is plain text, then add 60-100 characters of text, or the maximum character limit\n If the text input is rich text, then add the following text:\n Text with a single line break\n Text with two line breaks\n Text with three line breaks\n A paragraph (40-50 words)\n Add links:\n An internal link\n An external link\n Link opens in the same window\n Link opens in a new window\n Slideshow\n Run the following tests on your slideshow section.\n Add three slideshow sections\n Add the maximum number of slides. If there's no limit, then add 10 slides.\n Test the following image sizes:\n 2048px for retina displays\n 1024px for standard widescreen displays\n Test the following aspect ratios using 72ppi, portrait, and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Add video (if applicable)\n Add text:\n A heading\n A subheading (60 characters)\n A description\n If the text input is a plain single line text, then add 60-100 characters of text\n If the text input is rich text, then add the following text:\n Text with a single line break (60-100 characters)\n Text with two line breaks\n Text with three line breaks\n A paragraph (40-50 words)\n Add links:\n An internal link\n An external link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Add button text:\n A single word label (30 characters, no spacing)\n A multiple word label (30 characters)\n Add button links:\n Internal link\n External link\n Link opens in the same window\n Link opens in a new window\n Test autoplay behavior:\n If multiple slideshows have autoplay enabled, then each slideshow autoplays as expected\n Slideshow controls work as expected when slideshow is on autoplay\n Featured product\n Run the following tests on your featured product section. For each of these tests, verify the following:\n Adding duplicate featured products doesn't break the section or the page\n Customers can add different featured products to the cart\n Add five featured product sections, three of which are the same product\n Select different variants for one of the duplicated products\n Add one of the duplicated products to the cart\n Perform tests from the product page checklist\n Featured collection\n Run the following tests on your featured collection section. For each of these tests, verify the following:\n All sections work as expected\n Adding multiple featured collections doesn't break the section or the page\n Add three featured collection sections, using collections of varying sizes\n Perform tests from the collection page checklist\n Collection list\n Run the following tests on your collection list section. For each of these tests, verify the following:\n Collection titles are visible\n Collections with no image display the first product in the collection, or the collection's title, in the image block\n Adding multiple collection list sections doesn't break the section or the page\n Add the maximum number of collections. If there's no limit, then add 10 collections.\n Add a collection with a long title\n Add a collection with a single word title (30 characters, no spacing)\n Add a collection with a multi-word title (30 characters)\n Add collections where the collection images have different aspect ratios, in portrait and landscape orientations\n 16:9\n 4:3\n 3:2\n 1:1\n Add one collection with no featured collection image\n Image with text\n Run the following tests on your image with text section. For each of these tests, verify the following:\n All text is completely visible\n Varying image qualities and ratios are supportedImages must support varying image qualities and ratios\n Adding multiple image with text sections doesn't break the section or the page\n Add three image with text sections\n Add text:\n A heading\n A subheading (60 characters)\n A description\n If the text input is a plain single line text, then add 60-100 characters of text\n If the text input is rich text, then add the following text:\n Text with a single line break (60-100 characters)\n Text with two line breaks\n Text with three line breaks\n A paragraph (40-50 words)\n Add links:\n An internal link\n An external link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Test the following image sizes:\n 2048px for retina displays\n 1024px for standard widescreen\n Test the following aspect ratios using 72ppi, portrait, and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Newsletter\n Run the following tests on your newsletter section. For each of these tests, verify the following:\n All text is completely visible\n The form outputs proper error and success messages\n Test the following parts of the newsletter form:\n Input form text\n Submit the form\n Test error detection and handling\n Test the submission success message\n Add a description:\n If the text input is a plain single line text, then add 60-100 characters of text\n If the text input is rich text, then add the following text:\n Text with a single line break (60-100 characters)\n Text with two line breaks\n Text with three line breaks\n A paragraph (40-50 words)\n Add links:\n An internal link\n An external link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Rich text\n Run the following tests on your rich text section. For each of these tests, verify that all of the text is visible.\n Add a heading\n Add a subheading (60 characters)\n Add a description\n Add multiple paragraphs (minimum 1000 characters)\n Add links:\n Internal link\n External link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Blog posts\n Run the following tests on your blog posts section. For each of these tests, verify the following:\n All text is visible\n The blog post grid supports varying image ratios\n Add blog posts with different image aspect ratios:\n 16:9\n 4:3\n 3:2\n 1:1\n Add a blog post with a long title\n Add a blog post with a single word title (30 characters, no spacing)\n Add a blog post with a multi-word title (30 characters)\n Video\n Add the following video types in a video section. For each of these tests, verify the following:\n Adding multiple video sections doesn't break section or the page\n Video controls are present and functional\n Add a YouTube video\n Add a Vimeo video\n Add an MP4 video (if applicable)\n Unique sections\n If your theme has any additional sections then you need to test them as well. Run the tests that apply to your section. Verify the following:\n Each section supports varying image qualities and ratios\n All text is visible\n Adding multiples of the same section doesn't break the section or the page\n Add 2-3 instances of the same section\n Add text:\n A heading\n A subheading (60 characters)\n A description\n If the text input is a plain single line text, then add 60-100 characters of text\n If the text input is rich text, then add the following text:\n Text with a single line break (60-100 characters)\n Text with two line breaks\n Text with three line breaks\n A paragraph (40-50 words)\n Add links:\n An internal link\n An external link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Test the following image sizes:\n 2048px for retina displays\n 1024px for standard widescreen\n Test the following aspect ratios using 72ppi, portrait, and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n 5. Pages\n Test the following pages or elements in your theme:\n Password page\n Collection list page\n Collection page\n Product page\n Blog page\n Blog post/article page\n Cart\n Search page\n Pages\n Page with a contact form\n Gift card page\n Password page\n Run the following tests on your password page. For each of these tests, verify the following:\n Customers are able to access the store with a password\n The store logo or name and the password message are fully visible\n Add logo fallback text:\n Long store name (30-40 characters, no spaces)\n Long store name with hyphens\n Add a logo:\n Test the following logo aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Transparent background on PNG image\n Logo scales appropriately\n Test the password form:\n Fill the email field\n Submit the form\n Test error detection and handling\n Test the submission success message\n Add a password message (500+ characters)\n Add different sized background images, if applicable:\n 2048px for retina displays\n 1024px for standard widescreen\n Test the following aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Collection list page\n Run the following tests on your collection list page. For each of these tests, verify the following:\n Multiple collection image ratios are supported\n A collection with no image displays the first product in that collection, or displays the collection's title in the image block\n Add a collection with a long title\n Add a collection with a single word title (30 characters, no spacing)\n Add a collection with a multi-word title (30 characters)\n Test the following aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Add a collection with no featured collection image\n Collection page\n Run the following tests on your collection page. For each of these tests, verify the following:\n All products in the collection are accessible\n The collection can be sorted and filtered\n Combining filter tags doesn't break the page\n Product information in the product grid is fully visible\n Test group filtering (if applicable)\n Add a single word tag (30 characters, no spacing)\n Add a long list of tags (20+ tags)\n Verify that only a limited number of products are displayed on initial load\n Test pagination (if applicable)\n Pagination truncates on a collection with five or more pages\n Test View more button (if applicable)\n Test infinite scrolling (if applicable)\n Add a product title:\n A single word title (30 characters, no spacing)\n A multi-word title (30-60 characters)\n Add a product vendor:\n A single word vendor (30 characters, no spacing)\n A multi-word vendor (30-60 characters)\n Test the way the grid responds to images of different aspect ratios, using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n If the collection page has an Add to cart button, verify that it's replaced or disabled when a sold out or unavailable variant is selected.\n Verify that the sold out message or badge is displayed when applicable.\n Product page\n Run the following tests on your product page, on each of the product configurations outlined.",
                    "filename": "docs/themes/store/test-theme/checklist/content.txt",
                    "start_index": 0,
                    "end_index": 13500,
                    "start_line": 1,
                    "end_line": 355,
                    "max_line": 565,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                }
            ]
        },
        "mmr_code_snippets_initial": [
            {
                "code": "((product) => {\n          const triggeredUpsellProductsWithThisHandle: FetchedProductWithUpsellId[] = [];\n\n          /**\n           *  Remove products that can not be added to the cart\n           *\n           * \"available\" appears to do a few things\n           * 1. Checks the product status is \"active\"\n           * 2. Checks if the product is tracking inventory and if it is verify there is at least one product\n           *    OR \"continue selling when out of stock\" is true\n           */\n          if (!product?.available) return [];\n\n          //product.available does not check variants so we have to filter them seperately otherwise\n          //out of stock variants could potentially show\n          product.variants = product.variants.filter((p) => p.available);\n\n          // ---- START window.upcartOnRenderUpsell\n          // We need quotes \"\" around the handle because it might start with a number which would\n          // cause an invalid selector error when using document.querySelector if they weren't in quotes\n          const itemQuerySelector = `[href*=\"${handle}\"]`;\n          // Wrap in try/catch in case the query selector is invalid for some reason. We still want to render\n          // the upsell even if we can't find the element\n          try {\n            const handleALink = document.querySelector(itemQuerySelector);\n            const el = handleALink?.closest('li.slide');\n            platform.publicApi.upcartOnRenderUpsell(product, el);\n          } catch (err) {\n            console.log(`Unable to find product with querySelector(\"${itemQuerySelector}\"):`, err);\n            sentryCaptureException(err);\n          }\n          // ---- END window.upcartOnRenderUpsell\n\n          for (let upsellItem of triggeredUpsells) {\n            let upsell = upsellItem.upsell.products[0] || null;\n            if (upsell?.handle === handle) {\n              if (upsell.variants) {\n                // when variants array is present, we trigger only on the variants specified\n                const productWithOnlyTriggeredVariants = {\n                  ...product,\n                  variants: product.variants.filter((variant) => upsell.variants!.includes(String(variant.id))),\n                };\n                triggeredUpsellProductsWithThisHandle.push({\n                  upsellId: upsellItem.id,\n                  fetchedProduct: productWithOnlyTriggeredVariants,\n                });\n              } else {\n                // when the variants array is missing, we trigger on any variant for the product\n                triggeredUpsellProductsWithThisHandle.push({ upsellId: upsellItem.id, fetchedProduct: product });\n              }\n            }\n          }\n\n          // only include products that have at least one variant to show\n          const productsWithVariants = triggeredUpsellProductsWithThisHandle.filter(\n            ({ fetchedProduct }) => fetchedProduct.variants.length > 0,\n          );\n\n          return productsWithVariants;\n        })",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 7906,
                "end_index": 10880,
                "start_line": 195,
                "end_line": 369,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "async (upsellItem) =>",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 2095,
                "end_index": 2116,
                "start_line": 57,
                "end_line": 57,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": ", [\n    recommendedUpsells,\n    cart,\n    cartItemsId,\n    upsellsWithProducts,\n    showUpsellItemsAlreadyInCart,\n    upsellItems,\n    platform,\n    upsellRecommendationIntent,\n  ])",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 14679,
                "end_index": 14860,
                "start_line": 32,
                "end_line": 357,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "getTriggeredUpsells =",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 1949,
                "end_index": 1970,
                "start_line": 54,
                "end_line": 54,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import CustomButton from '@components/common/CustomButton';\nimport ProductSelectModal from '@components/common/ProductSelectModal';\nimport ConfigureUpsellsModal from '@components/ConfigureUpsellsModal';\nimport { Checkbox, LegacyStack, Link } from '@shopify/polaris';\nimport { convertUpsellsToV2 } from '@storefront/src/modules/CartPopup/UpsellsModule/helper';\nimport { Field, useFormikContext } from 'formik';\nimport { random } from 'lodash';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Collection, Product } from 'server/modules/shopify/graphql/generated';\nimport {\n  UpsellRecommendationIntent,\n  UpsellV2Item,\n  UpsellV2Product,\n  UpsellV2ResourceType,\n  UpsellV2SelectedCollection,\n  UpsellV2SelectedProducts,\n} from '../../../../../common/defaultMetafields';\nimport { CartEditorFormValues } from '../types';\nimport styles from './styles.module.scss';\nimport { useTranslation } from 'react-i18next';\nimport { SelectField } from '@components/common/FormField';\n\nexport enum ActionType {\n  ADD = 'ADD',\n  DELETE = 'DELETE',\n  EDIT = 'EDIT',\n  ALL = 'ALL', //Use all products\n}\n\nexport enum ProductType {\n  TRIGGER = 'trigger',\n  UPSELL = 'upsell',\n}\n\nexport type onActionParams = {\n  productType?: ProductType;\n  id?: string;\n  action: ActionType;\n};\n\n/**\n * This component and its children have a lot of case handling around the type \"UpsellItem\"\n * After the multi-product updates we're handling the upsell and trigger as an array instead of an object.\n * Which makes the already loaded UpsellItem interface/type more complicated to deal with but this is necessary so that old upsells can be loaded and edited\n */\nconst SelectProducts = () => {\n  const { values, setFieldValue, handleSubmit, isSubmitting } = useFormikContext<CartEditorFormValues>();\n  const [productType, setProductType] = useState<ProductType>(null);\n  const [currentId, setCurrentId] = useState(null);\n  const addTriggerRef = useRef(null);\n  const [activeModal, setActiveModal] = useState(false); //The main modal\n  const [showResourcePickerModal, setShowResourcePickerModal] = useState(false); //Secondary resource picker modal\n  const [upsellItems, setUpsellItems] = useState<Array<UpsellV2Item>>([]);\n  const { t } = useTranslation();\n\n  /**\n   * Convert all upsell items to V2 format (if necessary)\n   */\n  useEffect(() => {\n    const upsellItemsV2 = convertUpsellsToV2({ upsellItemsV1orV2: values.upcartEditorSettings.upsellsItems });\n    setUpsellItems(upsellItemsV2);\n  }, [values.upcartEditorSettings.upsellsItems]);\n\n  //Handle actions from the list of upsells",
                "filename": "web/src/@templates/CartEditor/UpsellsModule/SelectProducts.tsx",
                "start_index": 0,
                "end_index": 2583,
                "start_line": 1,
                "end_line": 64,
                "max_line": 320,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "return items\n      .map(({ upsell }) => {\n        if (upsell) {\n          return (\n            <div className={`${styles.PreviewCarousel__item} DesignSettings__cartAccentColor`} key={upsell.shortId}>\n              <LegacyCard>\n                <LegacyStack spacing=\"loose\" alignment=\"center\" wrap={false}>\n                  <LegacyStack.Item>\n                    <div className={styles.PreviewCarousel__itemImage}>\n                      <img src={upsell.image} alt={upsell.title} title={upsell.title} />\n                    </div>\n                  </LegacyStack.Item>\n                  <LegacyStack.Item fill>\n                    <div className={`${styles.PreviewCarousel__itemTitle}`}>\n                      <Text variant=\"bodyMd\" as=\"span\" fontWeight=\"semibold\">\n                        {upsell.title}\n                      </Text>\n                      <span className={`${styles.PreviewCarousel__itemPrice}`}>\n                        {!!parseInt(upsell.compareAtPrice) && (\n                          <span className={styles['PreviewCarousel__itemPrice--discount']}>\n                            {formatMoney(upsell.compareAtPrice, currencyFormat)}\n                          </span>\n                        )}\n                        {formatMoney(upsell.price, currencyFormat)}\n                      </span>\n                    </div>\n                    <div className={`${styles.PreviewCarousel__button} DesignSettings__button`}>\n                      <div className={styles.PreviewCarousel__variationProduct}>\n                        <select title=\"productVariant\">\n                          <option>Variant #1</option>\n                          <option>Variant #2</option>\n                          <option>Variant #3</option>\n                        </select>\n                        <div className={styles.PreviewCarousel__icon}>\n                          <Icon source={SelectArrowIcon} />\n                        </div>\n                      </div>\n                      <CustomButton>{buttonText ?? 'Add to cart'}</CustomButton>\n                    </div>\n                  </LegacyStack.Item>\n                </LegacyStack>\n              </LegacyCard>\n            </div>\n          );\n        }\n      })\n      .filter((upsell) => upsell);\n  }, [buttonText, currencyFormat, items]);",
                "filename": "web/src/@components/PreviewCarousel/PreviewCarousel.tsx",
                "start_index": 817,
                "end_index": 3108,
                "start_line": 21,
                "end_line": 68,
                "max_line": 105,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n        //skip empty upsells\n        if (\n          (upsellItem.upsell.type === 'Product' && upsellItem.upsell?.products?.length === 0) ||\n          (upsellItem.upsell.type === 'Collection' && !upsellItem.upsell.collection)\n        )\n          return;\n\n        let atLeastOneTrigger = false;\n\n        if (upsellItem.trigger.on === 'all' || preview) {\n          atLeastOneTrigger = true;\n        } else {\n          //2.1 Search through every trigger to see if there is a match\n\n          if (upsellItem.trigger.selection.type === 'Product') {\n            upsellItem.trigger.selection.products.forEach((trigger) => {\n              const isTriggered = cartItems.some((cartItem) => {\n                let triggerId = trigger.id?.split('/')[4];\n                if (Number(cartItem.product_id) === Number(triggerId)) {\n                  // When the variants array is missing, we trigger on any variant for the product\n                  if (!trigger.variants) {\n                    return true;\n                    // when variants array is present, we trigger only on the variants specified\n                  } else if (\n                    //We need to check for both productId syntax since our storage is mixed\n                    trigger.variants.includes('gid://shopify/ProductVariant/' + cartItem.variant_id.toString()) ||\n                    trigger.variants.includes(cartItem.variant_id.toString())\n                  ) {\n                    return true;\n                  }\n                }\n                return false;\n              });\n              if (isTriggered) {\n                atLeastOneTrigger = true;\n              }\n            });\n          } else if (upsellItem.trigger.selection.type === 'Collection') {\n            const products = await platform.products.getProductByCollection({\n              handle: upsellItem.trigger.selection.collection.handle,\n            });\n\n            products.forEach((trigger: any) => {\n              const isTriggered = cartItems.some((cartItem) => {\n                let triggerId = trigger.id?.toString().replace('gid://shopify/Product/', '');\n                if (Number(cartItem.product_id) === Number(triggerId)) {\n                  return true;\n                }\n                return false;\n              });\n              if (isTriggered) {\n                atLeastOneTrigger = true;\n              }\n            });\n          }\n        }\n\n        //2.2 Expand each upsell product into seperate upsells",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 2117,
                "end_index": 4576,
                "start_line": 3,
                "end_line": 115,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "(preview ? upsellHandlesToFetch.splice(0, 20) : upsellHandlesToFetch).splice(0, 500).map",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 7728,
                "end_index": 7816,
                "start_line": 192,
                "end_line": 192,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "useEffect(() => {\n    /**\n     * Remove the add-on product if all other products in the cart are removed.\n     *\n     * Similar logic used to be handled in the empty cart component, but this caused the cart\n     * to incorrectly empty when going back in the browser due to HTML caching of the Liquid-rendered\n     * upcartPreloadedCart.\n     */\n    if (!hasFetchedCart) return; // prevent clearing cart based on stale cart\n    const isEmptyCartWithLeftoverAddonProduct = cartIsVisuallyEmpty && hiddenCartItems.length > 0;\n    if (isEmptyCartWithLeftoverAddonProduct) {\n      platform.cart.clearCart().then(() => {\n        refetchCart();\n      });\n    }\n  }, [platform, refetchCart, cartIsVisuallyEmpty, hiddenCartItems, hasFetchedCart]);\n\n  useEffect(() => {\n    if (cartIsVisuallyEmpty) {\n      sessionStorageEngine.unset(['announcement_module_time']);\n    }\n  }, [cartIsVisuallyEmpty]);\n\n  const announcementModuleIfActive = useMemo(() => {\n    if (!settings.upcartEditorSettings.announcementModule) return null;\n    return <AnnouncementModule platform={platform} />;\n  }, [settings, platform]);\n\n  const upsellModuleMarkupIfActive = useMemo(() => {\n    if (!settings.upcartEditorSettings.upsellsModule) return null;\n    return (\n      <UpsellsModule\n        preview={preview || false}\n        platform={platform}\n        cart={cartToShow}\n        cartIsLoading={cartIsLoading}\n        refetchCart={refetchCart}\n      />\n    );\n  }, [settings, cartToShow, cartIsLoading, refetchCart, platform, preview]);\n\n  const { totalAfterAllDiscounts } = useCartTotal({ cart });\n\n  return (\n    <>\n      <GlobalStyles platform={platform} />\n      <div\n        id=\"CartPopup\"\n        className={`upcart-cart ${styles.CartPreview} ${styles['CartPreview__' + settings.upcartSettings.cartPosition]}\n      ${styles['CartPreview__position-' + styling.position]}\n        UpcartDesignSettings__backgroundColor ${platform.options.forceAlwaysOpen ? styles.active : ''}`}\n        style={\n          settings.upcartSettings.disableSticky\n            ? { overflowY: 'auto', height: styling.height }\n            : { height: styling.height }\n        }\n        // This is needed to allow the cart to scroll on mobile for some themes.\n        // See Linear issue BEAM-1504 for more details.\n        data-scrollable\n      >\n        {cartIsVisuallyEmpty ? (\n          <EmptyCart\n            refetchCart={refetchCart}\n            platform={platform}\n            cart={cartToShow}\n            closePopup={platform.eventHandlers.onCloseClick}\n            isAddingItemThatCausedCartToOpen={isAddingItemThatCausedCartToOpen}\n          />\n        ) : (\n          <div\n            className={clx(styles.CartPreview__card, {\n              [styles.CartPreview__card_nonSticky]: settings.upcartSettings.disableSticky,\n            })}\n          >",
                "filename": "web/storefront/src/modules/CartPopup/Cart.tsx",
                "start_index": 12884,
                "end_index": 15689,
                "start_line": 107,
                "end_line": 477,
                "max_line": 521,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": ", [triggeredUpsells, upsellHandlesToFetch, platform, preview])",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 11106,
                "end_index": 11168,
                "start_line": 261,
                "end_line": 261,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "reranked_doc_snippets_initial": [
            {
                "code": "---\nid: 3vst4bcr\ntitle: Discount Codes Module\nfile_version: 1.1.3\napp_version: 1.18.31\n---\n\n# Required background information\n\n## Discount types\n\nThere are two types of discounts: **automatic discounts** and **discount codes**.\n\n- **Automatic discounts** are applied to a cart or checkout automatically when the discount criteria are met.\n\n- **Discount codes** must be manually typed in by the customer. They stay active until the customer either removes the code, enters a different conflicting discount code, or changes their cart/checkout so that the discount is not longer applicable.\n\nThis module is specifically for **discount codes**. We do not have to worry about **automatic discounts** because they will work in the cart by default and they do not require any user interaction.\n\n## Discount targets\n\nA discount can be used to reduce the cost of **product(s)**, **order**, or **shipping**.\n\n- **Product discounts** reduce the price of one or more products and are shown as a reduction on individual line items.\n\n- **Order discounts** reduce the price of the order as a whole and are shown as a reduction on the overal price.\n\n- **Shipping discounts** reduce the price of shipping.\n\n# Read and write discount codes\n\n## Read discount codes\n\nWe read discount codes using the `cart.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:78:24:26:`    const cart: Cart&lt;CartItemWithoutCompareAtPrice&gt; = await fetch(getShopifyRoutesRoot() + &#39;cart.js&#39;).then((res) =&gt;`\"/> Ajax API endpoint.\n\nAn applied discount code will be returned from the API as part of either the `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> or the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/>. The `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> are for order discounts and the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/> are for product discounts.\n\nThese discount applications will include both **automatic discounts** and **discount codes**. We can distinguish between these using the `type`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:460:1:1:`  type: &#39;discount_code&#39; | &#39;&#39;;`\"/> field of the `DiscountApplication`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:446:4:4:`export interface DiscountApplication {`\"/>.\n\n## Apply a discount code\n\n<br/>\n\nWe apply a discount code by making a request from the storefront to the route `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/>.\n\nThe `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/> route is intended by Shopify to be used for [shareable discount links](https://help.shopify.com/en/manual/discounts/managing-discount-codes#promote-a-discount-using-a-shareable-link). Normally a customer would navigate to the link directly in their browser and would be redirected to the storefront. We are using it in a non-standard way by making a background network request.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n23         await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);\n```\n\n<br/>\n\nAfter applying a discount code, we refetch the cart to check if the discount was successfully applied and to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/DiscountCodeModule/DiscountCodeModule.tsx\n\n```tsx\n23           await platform.discounts.attemptApplyDiscountCode({ discountCode: discountCodeToApply });\n24           const updatedCart = await refetchCart();\n25\n26           const discountApplications = getAllUniqueDiscountApplications(updatedCart);\n27           const isValid = discountApplications.some(\n28             (discountApplication) => discountApplication.title === discountCodeToApply,\n29           );\n```\n\n<br/>\n\n## Remove a discount code\n\n<br/>\n\nWe remove a discount code by applying a fake invalid discount code.\n\nThere is no native way to remove discount codes so this is a workaround.\n\nThis behaviour relies on the fact that there can only be one discount code applied in the cart. We are replacing the one allowed discount code with an invalid code.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n14       async removeDiscountCode(): Promise<void> {\n15         const FAKE_INVALID_DISCOUNT_CODE = '~!~!UPCART_REMOVE_DISCOUNT!~!~';\n16         await this.UNSAFE_POSSIBLE_NO_OP_applyDiscountCodeAndSetShopifyCookie({ discountCode: FAKE_INVALID_DISCOUNT_CODE });\n17       }\n```\n\n<br/>\n\nAfter removing a discount code, we refetch the cart to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/components/DiscountCodeBadge/DiscountCodeBadge.tsx\n\n```tsx\n18         await platform.discounts.removeDiscountCode();\n19         await refetchCart();\n```\n\n<br/>\n\n> \u26a0\ufe0f After we apply or remove a discount code, the `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> of discounted line items will change. If we did not refetch the cart then we would have an outdated `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> value which would cause errors if we tried to call `cart/update.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:191:17:21:`    return fetchQd(this.ajaxMutationCartQ, getShopifyRoutesRoot() + &#39;cart/update.js&#39;, {`\"/> or `cart/change.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:153:8:12:`      getShopifyRoutesRoot() + `cart/change.js?${query.toString()}`,`\"/>.\n\n# Limitations\n\n## **Multiple** discount codes are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n50                     Multiple discount codes are not supported.\n```\n\n<br/>\n\n### Why are multiple discount codes not supported?\n\nWe cannot apply multiple discount codes because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support multiple codes. This is the only way that we know of to apply a discount code from the storefront. We will have to wait for Shopify to add support for multiple codes or to find a different way to apply codes which does support multiple.\n\nIf a customer applies two discount codes back to back, the first discount code will be discarded and only use the most recently applied code will affect the cart.\n\n## Free shipping discounts are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n58                   Free shipping discounts are not supported.\n```\n\n<br/>\n\n### Why are free shipping discounts not supported?\n\nWe cannot apply free shipping discounts because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support them.\n\n## Shopify Plus stores using checkout.liquid are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n64                   Shopify Plus stores using checkout.liquid are not supported.\n```\n\n<br/>\n\n### Why are Shopify Plus stores using checkout.liquid not supported?\n\nHistorically, the Ajax API only included automatic discounts and did not include discount codes. Shopify changed this behaviour and started including discounts from discount codes in Ajax API responses. There are still some stores which do not include discount codes in Ajax API responses. The discount codes module does not work on these stores.\n\n### How can we tell if a store is eligible?\n\nThe Ajax API will include discount codes in responses only if the store is on Shopify's new checkout.\n\n<br/>\n\nWe can identify wether or not a store is on Shopify's new checkout by looking at the cart token. If the cart token is 32 characters long and only includes hex digits (0123456789abcdef) then the store is on Shopify's old checkout, otherwise it is on Shopify's new checkout and the Ajax API will include discount codes in responses.\n\nStores that are on Shopify's new checkout may have different token formats. The following are examples that we've seen:\n\n- c1-d3f024e3af037f40bfe1b016b5b76f05\n- Z2NwLXVzLWNlbnRyYWwxOjAxSEZFMjFIV1FZUFc0SlQ3Q00ySFFSSjgy\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart({ cart }: { cart: Cart<CartItem> }): boolean {\n6          if (!cart.token) return false;\n7          const isLegacyCartToken = cart.token.match(/^[0-9a-f]{32}$/) !== null;\n8          return !isLegacyCartToken;\n9        }\n```\n\n<br/>\n\n### What happens if a store is not eligible?\n\n<br/>\n\nIf a store is not eligible then the discount code module will not be shown.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/Cart.tsx\n\n```tsx\n499                      {platform.discounts.getStoreCanApplyDiscountCodesInCart({ cart }) &&\n500                        settings.upcartEditorSettings.discountCodeModule && (\n501                          <DiscountCodeModule platform={platform} refetchCart={refetchCart} />\n502                        )}\n```\n\n<br/>\n\nIn the preview we will show the discount code module even for stores that are not eligible. We do this because it would require a lot of work to check eligibility when not on the storefront.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/platform/preview/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart(args: { cart: Cart<CartItem> }): boolean {\n6          return true;\n7        }\n```\n\n<br/>\n\nThis file was generated by Swimm. [Click here to view it in the app](https://app.swimm.io/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr).",
                "filename": ".swm/discount-codes-module.3vst4bcr.sw.md",
                "start_index": 0,
                "end_index": 11446,
                "start_line": 1,
                "end_line": 231,
                "max_line": 231,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Specification: Subscription Upgrades\n\n## Editor\n\nThere should be a module in the editor with:\n\n- Name: \"Subscription Upgrades\"\n- Icon: Repeat Order\n- Default status: disabled\n- Settings:\n  - \"Prevent downgrades\"\n    - Help text: \"If enabled, customers will not be allowed to downgrade from a subscription to one-time purchase. Caution: this may increase cart abandonment.\"\n    - Type: checkbox\n    - Default: disabled\n\n## Cart\n\n> If the subscription upgrades module is disabled in the editor, the cart should skip all subscription upgrade functionality.\n>\n> The following cart specification is applicable only if the subscription upgrades module has been enabled in the editor.\n\n### Behaviour\n\nThe cart frontend for subscription upgrades should be isolated to an area below each line item. This area can include content, or can be omitted if there is nothing to show. If the area includes content, then the area should have:\n\n- Public CSS class: `.upcart-subscription-upgrade-section`\n- Styling: full-width of line item\n\nThe content of each subscription upgrade area should be independent of the content for the subscription areas for any other line items.\n\nThe content of the subscription upgrade area should be as follows:\n\nA. For **one-time purchase** line items:\n\n- If the item cannot be sold as a subscription, nothing should be shown.\n- If the item can be sold as a subscription:\n  - There should be a button with:\n    - Content: \"Upgrade to \\_\\_\\_\\_\", where \\_\\_\\_\\_ is the name of the first selling plan group for the item\n    - When clicked:\n      1. Show a loading spinner instead of text, and disable the button\n      2. Change the item to be a subscription with the first selling plan of the first selling plan group. The line item should have the property `__upcartSubscriptionUpgrade: \"true\"`\n    - Styling: full width of area, match to other buttons in cart\n    - Public CSS class: `.upcart-subscription-upgrade-button`\n\nB. For **subscription** line items:\n\n- There should be a dropdown with:\n  - Content: the name of the current selling plan\n  - Options:\n    - (OPTIONAL) A group with:\n      - Title: \"Full price\"\n      - Options:\n        - \"One-time purchase\"\n      - Condition: this group should be included if the \"Prevent downgrades\" setting is disabled AND the item does not _require_ a selling plan (i.e., it can be sold as a one-time purchase)\n    - A group for each possible selling plan group for the item with:\n      - Title: the name of the selling plan group\n      - Options: the names of the possible selling plans in the group for the item\n  - When selected:\n    1. Show a loading spinner overlayed on the dropdown and disable the dropdown\n    2. Change the selling plan of the item to the selected selling plan. If \"One-time only\" was selected, then remove the selling plan from the item to change it to a one-time purchase. The line item should have the property `__upcartSubscriptionEdit: \"true\"`\n  - Styling: full width of area, match to other dropdowns in cart\n  - Public CSS class: `.upcart-subscription-upgrade-dropdown`\n\nWhen the current purchase option for a line item changes, the content of the subscription upgrade area should be updated to match the new purchase option.\n\n### Edge Cases and Clarifications\n\n- The content of the subscription upgrade area does not depend on _how_ the purchase option was selected. For example, the subscription upgrade area content for an item that was added to the cart as a subscription should be the same as the content for an item that was upgraded from a one-time purchase to a subscription in-cart.\n- When selling plans are being loaded for a product, there should be no content in the subscription upgrade area. Before the selling plans are loaded, we can't fully decide what content to show so it's fine to show nothing.\n- When the selling plan of an item is changed, the quantity of the item should remain constant. If you don't provide a quantity to the AJAX API when changing a line item, then the quantity of the line item will be set to 1 which should be avoided.\n- Selling plans that do not apply to the selected variant for a line item should be ignored. It is possible to have selling plans that apply only to specific variants of a product. In cases where none of the selling plans from a selling plan group apply to the variant for the line item, the selling plan group should be ignored. An ignored group should not be listed in the dropdown (because it would be an empty section) and it should not be used for text of the upgrade button (because it would have no selling plan to select).",
                "filename": "docs/subscription-upgrades.md",
                "start_index": 0,
                "end_index": 4584,
                "start_line": 1,
                "end_line": 71,
                "max_line": 71,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>UpCart Loading...</title>\n    <script>\n      /*\n       * Constants\n       */\n      const INSTALL_SOURCE_QUERY_PARAM = 'via';\n      const COOKIE_LIFETIME_MS = 3 * 24 * 60 * 60 * 1000; // 3 days\n      const COOKIE_NAME = 'upcart_install_source';\n\n      /*\n       * 1. Get the ?via= query for the following steps\n       */\n      const installSource = encodeURIComponent(\n        new URLSearchParams(window.location.search).get(INSTALL_SOURCE_QUERY_PARAM),\n      );\n\n      /*\n       * 2. Set a cookie with the install source for 3 days so we can read it when they install the app\n       */\n      const cookieDomain = '.' + window.location.hostname;\n      const cookieExpiresDate = new Date();\n      cookieExpiresDate.setTime(cookieExpiresDate.getTime() + COOKIE_LIFETIME_MS);\n      const cookieExpires = cookieExpiresDate.toGMTString();\n      document.cookie = `${COOKIE_NAME}=${installSource}; expires=${cookieExpires}; domain=${cookieDomain}; path=/; SameSite=None; Secure`;\n\n      /*\n       * 3. Redirect to the app store, including the install source as a query param for App Store Google Analytics\n       */\n      window.location.replace(`https://apps.shopify.com/upcart-cart-builder?join-via=${installSource}`);\n    </script>\n  </head>\n  <body></body>\n</html>",
                "filename": "web/public/join.html",
                "start_index": 0,
                "end_index": 1304,
                "start_line": 1,
                "end_line": 36,
                "max_line": 36,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# UpCart 3.0\n\n## Setup\n\nView setup instructions on Notion: https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 133,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Security Policy\n\n## Supported versions\n\n### New features\n\nNew features will only be added to the master branch and will not be made available in point releases.\n\n### Bug fixes\n\nOnly the latest release series will receive bug fixes. When enough bugs are fixed and its deemed worthy to release a new gem, this is the branch it happens from.\n\n### Security issues\n\nOnly the latest release series will receive patches and new versions in case of a security issue.\n\n### Severe security issues\n\nFor severe security issues we will provide new versions as above, and also the last major release series will receive patches and new versions. The classification of the security issue is judged by the core team.\n\n### Unsupported Release Series\n\nWhen a release series is no longer supported, it's your own responsibility to deal with bugs and security issues. If you are not comfortable maintaining your own versions, you should upgrade to a supported version.\n\n## Reporting a bug\n\nAll security bugs in shopify repositories should be reported to [our hackerone program](https://hackerone.com/shopify)\nShopify's whitehat program is our way to reward security researchers for finding serious security vulnerabilities in the In Scope properties listed at the bottom of this page, including our core application (all functionality associated with a Shopify store, particularly your-store.myshopify.com/admin) and certain ancillary applications.\n\n## Disclosure Policy\n\nWe look forward to working with all security researchers and strive to be respectful, always assume the best and treat others as peers. We expect the same in return from all participants. To achieve this, our team strives to:\n\n- Reply to all reports within one business day and triage within two business days (if applicable)\n- Be as transparent as possible, answering all inquires about our report decisions and adding hackers to duplicate HackerOne reports\n- Award bounties within a week of resolution (excluding extenuating circumstances)\n- Only close reports as N/A when the issue reported is included in Known Issues, Ineligible Vulnerabilities Types or lacks evidence of a vulnerability\n\n**The following rules must be followed in order for any rewards to be paid:**\n\n- You may only test against shops you have created which include your HackerOne YOURHANDLE @ wearehackerone.com registered email address.\n- You must not attempt to gain access to, or interact with, any shops other than those created by you.\n- The use of commercial scanners is prohibited (e.g., Nessus).\n- Rules for reporting must be followed.\n- Do not disclose any issues publicly before they have been resolved.\n- Shopify reserves the right to modify the rules for this program or deem any submissions invalid at any time. Shopify may cancel the whitehat program without notice at any time.\n- Contacting Shopify Support over chat, email or phone about your HackerOne report is not allowed. We may disqualify you from receiving a reward, or from participating in the program altogether.\n- You are not an employee of Shopify; employees should report bugs to the internal bug bounty program.\n- You hereby represent, warrant and covenant that any content you submit to Shopify is an original work of authorship and that you are legally entitled to grant the rights and privileges conveyed by these terms. You further represent, warrant and covenant that the consent of no other person or entity is or will be necessary for Shopify to use the submitted content.\n- By submitting content to Shopify, you irrevocably waive all moral rights which you may have in the content.\n- All content submitted by you to Shopify under this program is licensed under the MIT License.\n- You must report any discovered vulnerability to Shopify as soon as you have validated the vulnerability.\n- Failure to follow any of the foregoing rules will disqualify you from participating in this program.\n\n** Please see our [Hackerone Profile](https://hackerone.com/shopify) for full details\n\n## Receiving Security Updates\n\nTo recieve all general updates to vulnerabilities, please subscribe to our hackerone [Hacktivity](https://hackerone.com/shopify/hacktivity)",
                "filename": "SECURITY.md",
                "start_index": 0,
                "end_index": 4160,
                "start_line": 1,
                "end_line": 59,
                "max_line": 59,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "## Dev Setup\n\nFollow the [instructions in this Notion document](https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7?pvs=4) to setup the development environment for the Chrome extension.",
                "filename": "chrome-extensions/cart-customization/README.md",
                "start_index": 0,
                "end_index": 208,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "MIT License\n\nCopyright (c) 2021 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
                "filename": "extensions/theme-app-extension/LICENSE.md",
                "start_index": 0,
                "end_index": 1063,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { Shop, ShopModel } from '../modules/shops/shops.model';\nimport { RequestWithShop } from '../types/express.types';\nimport Shopify from '@shopify/shopify-api';\n\nexport const getShopDocFromRequest = async (req: RequestWithShop): Promise<Shop> => {\n  if (req.shopDoc) {\n    return req.shopDoc;\n  }\n\n  const shop = Shopify.Utils.sanitizeShop(req.query.shop as string);\n  const shopDoc = await ShopModel.findOne({ domain: shop }).lean();\n  req.shopDoc = shopDoc;\n  return shopDoc;\n};",
                "filename": "web/server/helpers/getShopDocFromRequest.ts",
                "start_index": 0,
                "end_index": 485,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "The starting point for this repository was created using the Shopify CLI, commit\nf5d560da33aafae0b552de72a90f1320d1023524. Some boilerplate code from the CLI\nremains and is licensed as follows:\n\"\"\"\nMIT License\n\nCopyright (c) 2018 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\"",
                "filename": "LICENSE.md",
                "start_index": 0,
                "end_index": 1265,
                "start_line": 1,
                "end_line": 26,
                "max_line": 26,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# [[[ --- STAGE: BASE ENVIRONMENT SETUP --- ]]]\n# see https://github.com/moby/moby/issues/37345#issuecomment-400250849\nFROM node:18.16.1-alpine as base\n# Accept command line '--build-arg' arguments\nARG PORT=8081\nARG HOST\nARG SHOPIFY_API_KEY\nARG INTERCOM_APP_ID\nARG SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY\n\n# Copy command line args to env to use during build and for final image runtime\nENV PORT=${PORT} \\\n    HOST=${HOST} \\\n    SHOPIFY_API_KEY=${SHOPIFY_API_KEY} \\\n    INTERCOM_APP_ID=${INTERCOM_APP_ID}\n    # ^^^^^ WARNING ^^^^^ do not include trailing \"\\\" on the last line above, you will get a syntax error with a terrible error message\n    #\n    # SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY is intentionally not included here since it is only for building and shouldn't be available at runtime\n\n# [[[ --- STAGE: BUILD --- ]]]\nFROM base AS build\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nCOPY web/patches ./web/patches\nRUN yarn install --cwd web --frozen-lockfile --production=false\nCOPY . .\n# NOTE: we need Sentry API token to upload source maps to Sentry during build, see withSentryConfig in next.config.js\nRUN echo \"[auth]\\ntoken=${SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY}\" > ./web/.sentryclirc\nRUN yarn web:build\n\n# [[[ --- STAGE: LICENSES WEB --- ]]]\nFROM base AS licenses-web\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web > ./web/public/licenses/web.txt\n\n# [[[ --- STAGE: LICENSES STOREFRONT --- ]]]\nFROM base AS licenses-storefront\nWORKDIR /app\nCOPY web/storefront/package.json web/storefront/yarn.lock ./web/storefront/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web/storefront > ./web/public/licenses/storefront.txt\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM base\nWORKDIR /app\nCOPY --from=build /app .\nCOPY package.json ./package.json\nRUN yarn install --frozen-lockfile --production=true\nCOPY --from=licenses-web /app/web/public/licenses/web.txt ./web/public/licenses/web.txt\nCOPY --from=licenses-storefront /app/web/public/licenses/storefront.txt ./web/public/licenses/storefront.txt\nCMD [\"yarn\", \"web:start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2181,
                "start_line": 1,
                "end_line": 53,
                "max_line": 53,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.\\\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can\u2019t go back!**\n\nIf you aren\u2019t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you\u2019re on your own.\n\nYou don\u2019t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn\u2019t feel obligated to use this feature. However we understand that this tool wouldn\u2019t be useful if you couldn\u2019t customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n\n### Code Splitting\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\n\n### Analyzing the Bundle Size\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\n\n### Making a Progressive Web App\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\n\n### Advanced Configuration\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\n\n### Deployment\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\n\n### `npm run build` fails to minify\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)",
                "filename": "web/storefront/README.md",
                "start_index": 0,
                "end_index": 3354,
                "start_line": 1,
                "end_line": 70,
                "max_line": 70,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<html></html>",
                "filename": "web/storefront/public/index.html",
                "start_index": 0,
                "end_index": 13,
                "start_line": 1,
                "end_line": 1,
                "max_line": 1,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "solution_task": {
            "structured_resp": "Clarify:\nThe issue is that upsells are not showing on the site, which could be related to product availability, variant selection, or rendering logic in the components responsible for upsell functionality.\n\nHypothesize:\n- The logical error in the `fetchUpsellProducts()` function may be causing the `upsellProducts` array to remain empty.\n- Incorrect condition checks for `isActive` and `isInStock` could be filtering out all products, resulting in no upsells being displayed.\n- The issue may be related to the handling of product variants and their availability.\n- The rendering logic for upsells may not be correctly displaying the upsell components even if the products are fetched correctly.\n\nExperiment:\n- Review the code snippets provided to identify any logical errors in the `fetchUpsellProducts()` function or related upsell handling functions.\n- Check the conditions for `isActive` and `isInStock` to ensure they are correctly filtering products.\n- Verify that product variants are being handled correctly and that available variants are being considered for upsells.\n- Inspect the rendering logic in the `PreviewCarousel` and `UpsellsModule` components to ensure upsells are being displayed when expected.\n\nAnalyze:\n- The provided code snippets do not show a function named `fetchUpsellProducts()`, so we cannot directly verify the logical error in this function.\n- The code snippets do not include explicit checks for `isActive` or `isInStock` properties, so we cannot confirm the incorrect condition checks.\n- The `PreviewCarousel` component is rendering upsell items based on the `items` prop, but there is no direct evidence of a rendering issue from the provided snippets.\n- The `UpsellsModule` component is responsible for setting the `upsells` state, which is used to determine what is displayed. The logic for filtering available products and variants is present and should be scrutinized.\n\nResolve:\n- Ensure that the `fetchUpsellProducts()` function (or its equivalent in the actual codebase) correctly filters products based on `isActive` and `isInStock` properties. The condition should be to include products where both properties are true.\n- Review the logic in the `UpsellsModule` component that sets the `upsells` state to ensure that it correctly includes available products and their available variants.\n- If the `PreviewCarousel` component is not displaying upsells, ensure that the `items` prop passed to it contains the correct data and that the component's rendering logic is functioning as expected.\n- If the issue persists, additional debugging may be required to step through the code and check the state at runtime to identify where the upsells are being filtered out or not added to the state correctly.",
            "response": "To effectively address the issue of upsells not appearing on the site, it's essential to examine the underlying mechanisms that fetch and display these products. Upsells are a crucial component for increasing sales, and their proper functionality depends on the correct retrieval of product data and the accurate rendering of the upsell components. The following steps are designed to troubleshoot and resolve the problem, ensuring that upsells are presented to customers as intended.\n\n- Verify the functionality of the function responsible for fetching upsell products, ensuring it accurately filters products based on their active status and stock availability. Products should only be included if both `isActive` and `isInStock` properties are true.\n- Examine the `UpsellsModule` component's logic that determines the `upsells` state. Confirm that it is effectively including products that are available, along with their corresponding available variants.\n- Check the `PreviewCarousel` component to ensure that it receives the correct `items` prop with the appropriate data. Confirm that the component's rendering logic is operating correctly to display the upsells.\n- If the upsells still fail to appear, conduct a step-by-step debugging process to inspect the code's runtime state. This will help identify any points where upsells might be incorrectly filtered out or not properly added to the state."
        },
        "snippet_processor_task": {
            "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "Code snippet fetches recommended products for upsells, filters based on availability and variants, and sets the upsells to be displayed. Potential issue could be related to the filtering logic for available products.",
                        "snippet": {
                            "code": "if (recommendedUpsells) {\n      Promise.all(\n        cartItemsId.map((id) =>\n          platform.products.getRecommendedProducts({\n            productIdToRecommendFrom: id,\n            limit: 8,\n            intent: upsellRecommendationIntent,\n          }),\n        ),\n      ).then((products) => {\n        if (cancelled.isCancelled) return;\n\n        const recommendedProduct = (uniqBy(\n          reduce(products, (acc: any, productArray: any) => [...acc, ...productArray], []),\n          'id',\n        ) as unknown) as Product[];\n        const filteredRecommendedProduct = showUpsellItemsAlreadyInCart\n          ? [...recommendedProduct]\n          : recommendedProduct.filter((item) => !cartItemsId.includes((item as any).id));\n\n        //Remove products that can not be added to the cart\n        const availableProducts = filteredRecommendedProduct.filter((product: any) => {\n          if (!product?.available) return false;\n\n          //product.available does not check variants so we have to filter them seperately otherwise\n          //out of stock variants could potentially show\n          product.variants = product.variants.filter((p: any) => p.available);\n\n          return true;\n        });\n\n        setUpsells(availableProducts);\n      });\n    }",
                            "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                            "start_index": 11335,
                            "end_index": 12588,
                            "start_line": 268,
                            "end_line": 391,
                            "max_line": 412,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet fetches recommended products for upsells and filters them based on availability and variants, which is directly related to the issue of incorrect condition checks for `isActive` and `isInStock`."
                },
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "Code snippet shows the logic for displaying upsell products based on conditions like availability and variants. It includes functions for adding products to the cart and modifying the list of upsells before display.",
                        "snippet": {
                            "code": "const addProductToCart = useCallback(\n    (id: number | string, properties: ItemToAddToCart['properties']) => {\n      platform.cart\n        .addItemToCart(\n          { variantId: Number(id), quantity: 1, properties: { ...properties, __upcartUpsell: id } },\n          { opensCart: AddToCartOpensCart.NEVER },\n        )\n        .then(() => {\n          platform.publicApi.upcartOnAddUpsell(String(id));\n          refetchCart();\n        })\n        .catch((e) => console.error(e));\n    },\n    [refetchCart, platform],\n  );\n\n  const upsellsToShow = useMemo(() => {\n    // Allow custom modification of upsells before display. This can include\n    // changing properties of the upsell products, or removing/adding products.\n    let finalUpsells = upsells;\n    try {\n      const modifiedUpsells = platform.publicApi.upcartModifyListOfUpsells(upsells);\n      if (Array.isArray(modifiedUpsells)) {\n        finalUpsells = modifiedUpsells;\n      }\n    } catch (e) {\n      console.error(e);\n      sentryCaptureException(e);\n    }\n\n    if (upsellsShouldLimit && Number(maximumUpsellsToShow) > 0) {\n      finalUpsells = finalUpsells.splice(0, Number(maximumUpsellsToShow));\n    }\n\n    return finalUpsells;\n  }, [platform, upsells, upsellsShouldLimit, maximumUpsellsToShow]);\n\n  return (\n    <div>\n      {upsellsToShow.length !== 0 && (\n        <PreviewCarousel\n          platform={platform}\n          items={upsellsToShow}\n          onAddProduct={addProductToCart}\n          cartIsLoading={cartIsLoading}\n        />\n      )}\n    </div>\n  );\n}",
                            "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                            "start_index": 14865,
                            "end_index": 16391,
                            "start_line": 359,
                            "end_line": 408,
                            "max_line": 412,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet includes logic for displaying upsell products based on conditions like availability, which is relevant to the issue of the `upsellProducts` array remaining empty due to incorrect conditional checks."
                },
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "The snippet involves filtering products based on availability and variants, handling upsell rendering logic, and triggering upsells based on product variants.",
                        "snippet": {
                            "code": "((product) => {\n          const triggeredUpsellProductsWithThisHandle: FetchedProductWithUpsellId[] = [];\n\n          /**\n           *  Remove products that can not be added to the cart\n           *\n           * \"available\" appears to do a few things\n           * 1. Checks the product status is \"active\"\n           * 2. Checks if the product is tracking inventory and if it is verify there is at least one product\n           *    OR \"continue selling when out of stock\" is true\n           */\n          if (!product?.available) return [];\n\n          //product.available does not check variants so we have to filter them seperately otherwise\n          //out of stock variants could potentially show\n          product.variants = product.variants.filter((p) => p.available);\n\n          // ---- START window.upcartOnRenderUpsell\n          // We need quotes \"\" around the handle because it might start with a number which would\n          // cause an invalid selector error when using document.querySelector if they weren't in quotes\n          const itemQuerySelector = `[href*=\"${handle}\"]`;\n          // Wrap in try/catch in case the query selector is invalid for some reason. We still want to render\n          // the upsell even if we can't find the element\n          try {\n            const handleALink = document.querySelector(itemQuerySelector);\n            const el = handleALink?.closest('li.slide');\n            platform.publicApi.upcartOnRenderUpsell(product, el);\n          } catch (err) {\n            console.log(`Unable to find product with querySelector(\"${itemQuerySelector}\"):`, err);\n            sentryCaptureException(err);\n          }\n          // ---- END window.upcartOnRenderUpsell\n\n          for (let upsellItem of triggeredUpsells) {\n            let upsell = upsellItem.upsell.products[0] || null;\n            if (upsell?.handle === handle) {\n              if (upsell.variants) {\n                // when variants array is present, we trigger only on the variants specified\n                const productWithOnlyTriggeredVariants = {\n                  ...product,\n                  variants: product.variants.filter((variant) => upsell.variants!.includes(String(variant.id))),\n                };\n                triggeredUpsellProductsWithThisHandle.push({\n                  upsellId: upsellItem.id,\n                  fetchedProduct: productWithOnlyTriggeredVariants,\n                });\n              } else {\n                // when the variants array is missing, we trigger on any variant for the product\n                triggeredUpsellProductsWithThisHandle.push({ upsellId: upsellItem.id, fetchedProduct: product });\n              }\n            }\n          }\n\n          // only include products that have at least one variant to show\n          const productsWithVariants = triggeredUpsellProductsWithThisHandle.filter(\n            ({ fetchedProduct }) => fetchedProduct.variants.length > 0,\n          );\n\n          return productsWithVariants;\n        })",
                            "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                            "start_index": 7906,
                            "end_index": 10880,
                            "start_line": 195,
                            "end_line": 369,
                            "max_line": 412,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet involves processing fetched upsell products and setting the upsells state, providing insights into how the upsell products are organized and displayed, which is relevant to the issue at hand."
                },
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Handles default selection of upsell products, saving products and collections, and displaying UI elements for managing upsells in the CartEditor component.",
                        "snippet": {
                            "code": "const defaultSelectedProducts = useMemo(() => {\n    let defaultSelectedProducts: any = [];\n\n    let row = upsellItems.find((row) => row.id == currentId);\n    if (row) {\n      let productSelection: UpsellV2SelectedProducts | null;\n      if (productType === ProductType.TRIGGER) {\n        productSelection =\n          row.trigger.on === 'specific' && row.trigger.selection.type === 'Product' ? row.trigger.selection : null;\n      } else {\n        productSelection = row.upsell.type === 'Product' ? row.upsell : null;\n      }\n      //The row should always exist\n      if (productSelection) {\n        productSelection.products.forEach((product) => {\n          //Create the variant resource array\n          let variants = product?.variants?.map((variantId) => {\n            return {\n              id: 'gid://shopify/ProductVariant/' + variantId,\n            };\n          });\n\n          defaultSelectedProducts.push({\n            ...product,\n            variants: {\n              edges: variants?.map((variant) => {\n                return {\n                  node: variant,\n                };\n              }),\n            },\n          });\n        });\n      }\n    }\n    return defaultSelectedProducts;\n  }, [upsellItems, currentId, productType]);\n\n  const defaultCollection = useMemo(() => {\n    let row = upsellItems.find((row) => row.id == currentId);\n\n    if (row) {\n      return row[productType + 'Collection'];\n    }\n  }, [upsellItems, currentId, productType]);\n\n  const onSave = ({\n    products,\n    collection,\n    type,\n  }: {\n    products?: Product[];\n    collection?: Collection;\n    type: UpsellV2ResourceType;\n  }) => {\n    if (type === 'Product') {\n      let mappedProducts: Array<UpsellV2Product> = products?.map((product) => {\n        let item: UpsellV2Product = {\n          id: product.id,\n          shortId: product.id?.split('gid://shopify/Product/')[1],\n          variants: product.variants?.edges?.map(\n            (variant) => variant.node.id?.split('gid://shopify/ProductVariant/')[1],\n          ), //This may need to be the shortId\n          handle: product.handle,\n          title: product.title,\n          image: product.featuredImage?.url,\n        };\n        return item;\n      });\n      setProductField(mappedProducts);\n    } else if (type === 'Collection') {\n      setCollectionField(collection);\n    }\n\n    setShowResourcePickerModal(false);\n    setActiveModal(true);\n  };\n\n  return (\n    <div className={styles.UpsellsModule}>\n      <LegacyStack vertical spacing=\"baseTight\">\n        <Checkbox\n          label={t('Use AI Recommended upsells')}\n          checked={values.upcartEditorSettings.recommendedUpsells}\n          onChange={() => setRecommendedUpsells(values.upcartEditorSettings.recommendedUpsells)}\n        />\n        {values.upcartEditorSettings.recommendedUpsells && (\n          <Field\n            id=",
                            "filename": "web/src/@templates/CartEditor/UpsellsModule/SelectProducts.tsx",
                            "start_index": 5553,
                            "end_index": 8389,
                            "start_line": 174,
                            "end_line": 262,
                            "max_line": 320,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "The function 'getTriggeredUpsells' is responsible for fetching triggered upsell products, which could be where the incorrect conditional checks for `isActive` and `isInStock` are located."
                }
            ]
        },
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable plan to address the issue of upsells not appearing on the site. It correctly identifies the need to verify the functionality of the function responsible for fetching upsell products and to ensure that the logical error in the conditional check is corrected. The RESPONSE also suggests examining the components responsible for determining the upsells state and rendering the upsell products, which is relevant to the issue described in the PROMPT. Additionally, the RESPONSE provides specific code snippets to check, which are directly related to the issue at hand. The RESPONSE aligns with the information provided in the glossary, particularly the logical error in the `fetchUpsellProducts()` function and the reviewer's comment on the pull request. The RESPONSE does not address the pull request's unmerged status, which is a minor oversight, but it does not significantly detract from the overall value of the RESPONSE.",
            "clarification_questions": "NONE"
        },
        "end_time": 1714260003.83158,
        "result": "To effectively address the issue of upsells not appearing on the site, it's essential to examine the underlying mechanisms that fetch and display these products. Upsells are a crucial component for increasing sales, and their proper functionality depends on the correct retrieval of product data and the accurate rendering of the upsell components. The following steps are designed to troubleshoot and resolve the problem, ensuring that upsells are presented to customers as intended.\n\n- Verify the functionality of the function responsible for fetching upsell products, ensuring it accurately filters products based on their active status and stock availability. Products should only be included if both `isActive` and `isInStock` properties are true.\n- Examine the `UpsellsModule` component's logic that determines the `upsells` state. Confirm that it is effectively including products that are available, along with their corresponding available variants.\n- Check the `PreviewCarousel` component to ensure that it receives the correct `items` prop with the appropriate data. Confirm that the component's rendering logic is operating correctly to display the upsells.\n- If the upsells still fail to appear, conduct a step-by-step debugging process to inspect the code's runtime state. This will help identify any points where upsells might be incorrectly filtered out or not properly added to the state.\n\n### Code snippets to check\n\n-  \u2192 [web](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web) \u2192 [storefront](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront) \u2192 [src](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src) \u2192 [modules](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules) \u2192 [CartPopup](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules/CartPopup) \u2192 [UpsellsModule](https://github.com/testbed/UpCart-2.0/tree/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules/CartPopup/UpsellsModule)- [Lines 268 - 391](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx#L268-L391)\n\n This snippet fetches recommended products for upsells and filters them based on availability and variants, which is directly related to the issue of incorrect condition checks for `isActive` and `isInStock`. \n\n\n   - [Lines 359 - 408](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx#L359-L408)\n\n This snippet includes logic for displaying upsell products based on conditions like availability, which is relevant to the issue of the `upsellProducts` array remaining empty due to incorrect conditional checks. \n\n\n   - [Lines 195 - 369](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx#L195-L369)\n\n This snippet involves processing fetched upsell products and setting the upsells state, providing insights into how the upsell products are organized and displayed, which is relevant to the issue at hand. \n\n\n   - [Lines 174 - 262](https://github.com/testbed/UpCart-2.0/blob/6c693e7080ba272711d0edb7fcbda5c1768467cf/web/src/@templates/CartEditor/UpsellsModule/SelectProducts.tsx#L174-L262)\n\n The function 'getTriggeredUpsells' is responsible for fetching triggered upsell products, which could be where the incorrect conditional checks for `isActive` and `isInStock` are located."
    }
}