{
    "id": "BEAM-2793",
    "repo_name": "testbed/UpCart-2.0",
    "title": "Upsells not showing",
    "body": "\n[EMBEDDED_LINK_1]\n[EMBEDDED_LINK_2]\nAll products are active and in stock, no products are showing in the upsells, pretty odd\n---\nGlossary:\nconversation_customer_1: The customer reached out for support, and the admin, Mark Tovstyga, acknowledged the issue, stating that no upsells were showing at all. Mark decided to escalate the matter to the technical team. Ryan Barclay, a team member, commented that there were errors likely due to the customer's store setup, which were obfuscated and thus unclear. Ryan attempted several troubleshooting steps, including adding all products to see if any would show up, checking the customer's settings for an option related to showing upsell offers if an item is already in the cart, and inspecting the DOM to see if the upsells were merely hidden by the theme. These steps did not resolve the issue.\n\nOpey Adeyemi, another team member, took over and identified the root cause: the image properties were not correctly handling null values for images and media, and the upsell item selected by the customer had no valid image. Opey then stated that they would push a fix for this issue.\n\nThe ticket's status was updated several times by Opey, moving from \"Todo\" to \"PR\" (Pull Request), then to \"In Review,\" followed by \"Production Ready,\" and finally to \"Done,\" indicating that the fix was implemented and the issue was resolved.\nconversation_customer_2: The conversation begins with admin Mark Tovstyga thanking the user, ECLARA, for reaching out and expressing a willingness to investigate the issue with the upsells not showing. Mark informs ECLARA of the intention to test other upsells to determine if the functionality is working at all and promises to update on the progress.\n\nMark then acknowledges that the issue is indeed interesting as no upsells are showing and decides to escalate it to the tech team for resolution, linking the issue BEAM-2793 to the conversation.\n\nRyan Barclay comments on the issue, indicating that there are errors being thrown due to the customer's store setup, which are obfuscated and thus difficult to understand. Ryan lists the steps taken to troubleshoot, including adding all products to see if any would show up, checking the customer's settings for an option related to showing upsell offers if an item is already in the cart, and inspecting the DOM to see if the upsells were merely hidden by the theme. A screenshot is provided, but its content is not described.\n\nOpey Adeyemi comments twice on the issue. In the first comment, Opey simply states an intention to look into the issue. In the second comment, Opey identifies the cause of the problem as the image properties not correctly handling null values for images and media, noting that the upsell item selected has no valid image. Opey then mentions that a fix will be pushed.\n\nThe conversation concludes with a series of updates from Mark Tovstyga, indicating the progression of issue BEAM-2793 through various statuses: Todo, PR (Pull Request), In Review, Production Ready, and finally Done, all moved by Opey Adeyemi.\ngithub_pr_1: https://github.com/beam-commerce/UpCart-2.0/pull/433\n\n",
    "classification": "bug",
    "state": "closed",
    "repo_link": "https://github.com/testbed/UpCart-2.0.git",
    "requested_commit": null,
    "issue_tracker_identifier": "",
    "ai_cost": {
        "issue_classifier": 0.0004969999999999999,
        "issue_summarizer": 0.01622,
        "search_embedding": 8.931e-05,
        "documentation_agent": 0.00791,
        "repo_summary": 0.06712850000000001,
        "issue_star_solver": 0.19360250000000004,
        "snippet_processor": 0.02287,
        "bouncer": 0.032170000000000004
    },
    "attachments": [
        {
            "title": "fix(cart): handle null product images and media properties [BEAM-2793]",
            "url": "https://github.com/beam-commerce/UpCart-2.0/pull/433",
            "content": "",
            "placeholder_tag": "github_pr_1",
            "content_type": "ExternalAssetsType.GITHUB_PR"
        },
        {
            "title": "Message from ECLARA",
            "url": "https://app.intercom.com/a/apps/wqw8tviu/conversations/188602100013343",
            "content": "admin_Mark Tovstyga: <p class=\"no-margin\">Hi there, thank you for reaching out :)</p>\n<p class=\"no-margin\">Let me take a look and see what's going on there, just a minute please!</p>\nuser_ECLARA: <p>thank you :)</p>\nadmin_Mark Tovstyga: <p class=\"no-margin\">If you don't mind I will try to test out a few other upsells to see if the functionality works at all, I will let you know what's the progress</p>\nadmin_Mark Tovstyga: <p class=\"no-margin\">Okay I see that it's a pretty interesting issue, since no upsells are showing at all. I will go ahead and escalate this to our tech team to fix it for you, thank you for bringing this up!</p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> was linked to the conversation </p>\nadmin_Mark Tovstyga: <p><b>Ryan Barclay</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a>: </p>\n<p>@opey @greg This ticket looks like there is some actual errors being thrown here due to the way they have their store setup. Looks like the errors are under some obfuscation so I can't figure out what's going on here.</p>\n<p>Some steps I've tried:</p>\n<ul>\n<li>Adding all of their products to possibly have one of them show up. Didn't work.</li>\n<li>Went through their setups to see if they had \"Show upsell offer if item already in cart?\" enabled </li>\n<li>Went through dom to see if just hidden by theme</li>\n</ul>\n<div class=\"intercom-container\"><img src=\"https://uploads.linear.app/a4f50fbf-738c-4ae7-b7ca-dc198278934f/49c0f30f-c769-44f9-87cd-8b5e23f4d27b/0c09bf19-6d1b-4e44-8bf3-4b6ea3c0e7bb\" alt=\"Screenshot 2024-01-18 at 1.20.56 PM.png\"></div>\nadmin_Mark Tovstyga: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a>: </p>\n<p>Will look into now</p>\nadmin_Mark Tovstyga: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a>: </p>\n<p>This was caused by the image props not correctly handling null values for images and media (the upsell item they selected has no valid image).</p>\n<p>Will push a fix</p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>Todo</b> by Opey Adeyemi </p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>PR</b> by Opey Adeyemi </p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>In Review</b> by Opey Adeyemi </p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>Production Ready</b> by Opey Adeyemi </p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>Done</b> by Opey Adeyemi </p>\n",
            "placeholder_tag": "conversation_customer_1",
            "content_type": "ExternalAssetsType.CONVERSATION_CUSTOMER"
        }
    ],
    "inline_assets": [
        {
            "title": "",
            "url": "https://app.intercom.com/a/inbox/wqw8tviu/inbox/shared/all/conversation/188602100013343?view=List",
            "content": "admin_Mark Tovstyga: <p class=\"no-margin\">Hi there, thank you for reaching out :)</p>\n<p class=\"no-margin\">Let me take a look and see what's going on there, just a minute please!</p>\nuser_ECLARA: <p>thank you :)</p>\nadmin_Mark Tovstyga: <p class=\"no-margin\">If you don't mind I will try to test out a few other upsells to see if the functionality works at all, I will let you know what's the progress</p>\nadmin_Mark Tovstyga: <p class=\"no-margin\">Okay I see that it's a pretty interesting issue, since no upsells are showing at all. I will go ahead and escalate this to our tech team to fix it for you, thank you for bringing this up!</p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> was linked to the conversation </p>\nadmin_Mark Tovstyga: <p><b>Ryan Barclay</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a>: </p>\n<p>@opey @greg This ticket looks like there is some actual errors being thrown here due to the way they have their store setup. Looks like the errors are under some obfuscation so I can't figure out what's going on here.</p>\n<p>Some steps I've tried:</p>\n<ul>\n<li>Adding all of their products to possibly have one of them show up. Didn't work.</li>\n<li>Went through their setups to see if they had \"Show upsell offer if item already in cart?\" enabled </li>\n<li>Went through dom to see if just hidden by theme</li>\n</ul>\n<div class=\"intercom-container\"><img src=\"https://uploads.linear.app/a4f50fbf-738c-4ae7-b7ca-dc198278934f/49c0f30f-c769-44f9-87cd-8b5e23f4d27b/0c09bf19-6d1b-4e44-8bf3-4b6ea3c0e7bb\" alt=\"Screenshot 2024-01-18 at 1.20.56 PM.png\"></div>\nadmin_Mark Tovstyga: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a>: </p>\n<p>Will look into now</p>\nadmin_Mark Tovstyga: <p><b>Opey Adeyemi</b> commented on <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a>: </p>\n<p>This was caused by the image props not correctly handling null values for images and media (the upsell item they selected has no valid image).</p>\n<p>Will push a fix</p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>Todo</b> by Opey Adeyemi </p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>PR</b> by Opey Adeyemi </p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>In Review</b> by Opey Adeyemi </p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>Production Ready</b> by Opey Adeyemi </p>\nadmin_Mark Tovstyga: <p>Issue <a href=\"https://linear.app/beam-commerce/issue/BEAM-2793/upsells-not-showing\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"intercom-content-link\">BEAM-2793</a> moved to status <b>Done</b> by Opey Adeyemi </p>\n",
            "placeholder_tag": "conversation_customer_2",
            "content_type": "ExternalAssetsType.CONVERSATION_CUSTOMER"
        }
    ],
    "linked_issue_ids": [],
    "comments": [],
    "issue_summary": "Error Messages: None provided verbatim.\n\nFunction and Variable Names:\n- `image properties`\n- `null values`\n- `images and media`\n- `upsell item`\n\nTechnical Descriptions:\n- Upsells not showing despite all products being active and in stock.\n- Errors likely due to customer's store setup, obfuscated and unclear.\n- Troubleshooting steps taken: adding all products to see if any would show up, checking customer's settings for showing upsell offers if an item is already in the cart, inspecting the DOM for hidden upsells.\n- Root cause identified: image properties not handling null values for images and media; the upsell item selected had no valid image.\n- Fix pushed for the issue with image properties and null values.\n\nOutput Format:\n- Issue: Upsells not displaying.\n- Status progression: Todo \u2192 PR (Pull Request) \u2192 In Review \u2192 Production Ready \u2192 Done.\n- GitHub Pull Request: [https://github.com/beam-commerce/UpCart-2.0/pull/433](https://github.com/beam-commerce/UpCart-2.0/pull/433)\n- Issue linked: BEAM-2793.",
    "repo_summary": "The software project is a Shopify app called UpCart 3.0. It consists of multiple directories and files including web, extensions, common, and storefront-tester. The project uses TypeScript, React, and Node.js.\n\nThe issue at hand involves the UpsellsModule component in the CartPopup feature. The UpsellsModule fetches recommended products for upselling based on the items in the cart. It filters out products that cannot be added to the cart and displays the available upsell products below each line item in the cart. The issue was related to the recommended products not being displayed correctly due to filtering logic.\n\nThe issue was resolved by fixing the filtering logic to ensure that only available products that can be added to the cart are displayed as upsell options.",
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1714401802.628287,
        "classification": "bug",
        "initial_code_snippets": [
            {
                "code": "if (recommendedUpsells) {\n      Promise.all(\n        cartItemsId.map((id) =>\n          platform.products.getRecommendedProducts({\n            productIdToRecommendFrom: id,\n            limit: 8,\n            intent: upsellRecommendationIntent,\n          }),\n        ),\n      ).then((products) => {\n        if (cancelled.isCancelled) return;\n\n        const recommendedProduct = (uniqBy(\n          reduce(products, (acc: any, productArray: any) => [...acc, ...productArray], []),\n          'id',\n        ) as unknown) as Product[];\n        const filteredRecommendedProduct = showUpsellItemsAlreadyInCart\n          ? [...recommendedProduct]\n          : recommendedProduct.filter((item) => !cartItemsId.includes((item as any).id));\n\n        //Remove products that can not be added to the cart\n        const availableProducts = filteredRecommendedProduct.filter((product: any) => {\n          if (!product?.available) return false;\n\n          //product.available does not check variants so we have to filter them seperately otherwise\n          //out of stock variants could potentially show\n          product.variants = product.variants.filter((p: any) => p.available);\n\n          return true;\n        });\n\n        setUpsells(availableProducts);\n      });\n    }",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 11335,
                "end_index": 12588,
                "start_line": 268,
                "end_line": 391,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": ", [cartItems, upsellItems, showUpsellItemsAlreadyInCart, platform.products, preview])",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 6857,
                "end_index": 6942,
                "start_line": 175,
                "end_line": 175,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": ", [\n    recommendedUpsells,\n    cart,\n    cartItemsId,\n    upsellsWithProducts,\n    showUpsellItemsAlreadyInCart,\n    upsellItems,\n    platform,\n    upsellRecommendationIntent,\n  ])",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 14679,
                "end_index": 14860,
                "start_line": 32,
                "end_line": 357,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "if (atLeastOneTrigger) {\n          if (upsellItem.upsell.type === 'Product') {\n            upsellItem.upsell.products.forEach((upsell) => {\n              // Skip upsell if product is already in cart, unless the merchant wants to show it anyway\n              const productIsInCart = cartItems.some((cartItem) => cartItem.handle === upsell.handle);\n              if (upsell.handle && (!productIsInCart || showUpsellItemsAlreadyInCart)) {\n                triggeredUpsellItems.push({\n                  ...upsellItem,\n                  upsell: {\n                    type: 'Product',\n                    products: [upsell],\n                  },\n                });\n              }\n            });\n          } else if (upsellItem.upsell.type === 'Collection') {\n            //Fetch all products in the collection - put each product into its own upsell\n            const products = await platform.products.getProductByCollection({\n              handle: upsellItem.upsell.collection.handle,\n            });\n\n            products.forEach((upsell: any) => {\n              const productIsInCart = cartItems.some((cartItem) => cartItem.handle === upsell.handle);\n              if (upsell.handle && (!productIsInCart || showUpsellItemsAlreadyInCart)) {\n                const upsellItemProduct: UpsellV2Product = {\n                  id: `gid://shopify/Product/${upsell.id}`,\n                  shortId: String(upsell.id),\n                  handle: upsell.handle,\n                  variants: undefined, // show all variants\n                  // The following fields aren't needed for this step since we will fetch the full\n                  // product details anyways\n                  image: '',\n                  title: '',\n                };\n                triggeredUpsellItems.push({\n                  ...upsellItem,\n                  upsell: {\n                    type: 'Product',\n                    products: [upsellItemProduct],\n                  },\n                });\n              }\n            });\n          }\n        }\n      }",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 4585,
                "end_index": 6608,
                "start_line": 116,
                "end_line": 383,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "const addProductToCart = useCallback(\n    (id: number | string, properties: ItemToAddToCart['properties']) => {\n      platform.cart\n        .addItemToCart(\n          { variantId: Number(id), quantity: 1, properties: { ...properties, __upcartUpsell: id } },\n          { opensCart: AddToCartOpensCart.NEVER },\n        )\n        .then(() => {\n          platform.publicApi.upcartOnAddUpsell(String(id));\n          refetchCart();\n        })\n        .catch((e) => console.error(e));\n    },\n    [refetchCart, platform],\n  );\n\n  const upsellsToShow = useMemo(() => {\n    // Allow custom modification of upsells before display. This can include\n    // changing properties of the upsell products, or removing/adding products.\n    let finalUpsells = upsells;\n    try {\n      const modifiedUpsells = platform.publicApi.upcartModifyListOfUpsells(upsells);\n      if (Array.isArray(modifiedUpsells)) {\n        finalUpsells = modifiedUpsells;\n      }\n    } catch (e) {\n      console.error(e);\n      sentryCaptureException(e);\n    }\n\n    if (upsellsShouldLimit && Number(maximumUpsellsToShow) > 0) {\n      finalUpsells = finalUpsells.splice(0, Number(maximumUpsellsToShow));\n    }\n\n    return finalUpsells;\n  }, [platform, upsells, upsellsShouldLimit, maximumUpsellsToShow]);\n\n  return (\n    <div>\n      {upsellsToShow.length !== 0 && (\n        <PreviewCarousel\n          platform={platform}\n          items={upsellsToShow}\n          onAddProduct={addProductToCart}\n          cartIsLoading={cartIsLoading}\n        />\n      )}\n    </div>\n  );\n}",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 14865,
                "end_index": 16391,
                "start_line": 359,
                "end_line": 408,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n        //skip empty upsells\n        if (\n          (upsellItem.upsell.type === 'Product' && upsellItem.upsell?.products?.length === 0) ||\n          (upsellItem.upsell.type === 'Collection' && !upsellItem.upsell.collection)\n        )\n          return;\n\n        let atLeastOneTrigger = false;\n\n        if (upsellItem.trigger.on === 'all' || preview) {\n          atLeastOneTrigger = true;\n        } else {\n          //2.1 Search through every trigger to see if there is a match\n\n          if (upsellItem.trigger.selection.type === 'Product') {\n            upsellItem.trigger.selection.products.forEach((trigger) => {\n              const isTriggered = cartItems.some((cartItem) => {\n                let triggerId = trigger.id?.split('/')[4];\n                if (Number(cartItem.product_id) === Number(triggerId)) {\n                  // When the variants array is missing, we trigger on any variant for the product\n                  if (!trigger.variants) {\n                    return true;\n                    // when variants array is present, we trigger only on the variants specified\n                  } else if (\n                    //We need to check for both productId syntax since our storage is mixed\n                    trigger.variants.includes('gid://shopify/ProductVariant/' + cartItem.variant_id.toString()) ||\n                    trigger.variants.includes(cartItem.variant_id.toString())\n                  ) {\n                    return true;\n                  }\n                }\n                return false;\n              });\n              if (isTriggered) {\n                atLeastOneTrigger = true;\n              }\n            });\n          } else if (upsellItem.trigger.selection.type === 'Collection') {\n            const products = await platform.products.getProductByCollection({\n              handle: upsellItem.trigger.selection.collection.handle,\n            });\n\n            products.forEach((trigger: any) => {\n              const isTriggered = cartItems.some((cartItem) => {\n                let triggerId = trigger.id?.toString().replace('gid://shopify/Product/', '');\n                if (Number(cartItem.product_id) === Number(triggerId)) {\n                  return true;\n                }\n                return false;\n              });\n              if (isTriggered) {\n                atLeastOneTrigger = true;\n              }\n            });\n          }\n        }\n\n        //2.2 Expand each upsell product into seperate upsells",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 2117,
                "end_index": 4576,
                "start_line": 3,
                "end_line": 115,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "((product) => {\n          const triggeredUpsellProductsWithThisHandle: FetchedProductWithUpsellId[] = [];\n\n          /**\n           *  Remove products that can not be added to the cart\n           *\n           * \"available\" appears to do a few things\n           * 1. Checks the product status is \"active\"\n           * 2. Checks if the product is tracking inventory and if it is verify there is at least one product\n           *    OR \"continue selling when out of stock\" is true\n           */\n          if (!product?.available) return [];\n\n          //product.available does not check variants so we have to filter them seperately otherwise\n          //out of stock variants could potentially show\n          product.variants = product.variants.filter((p) => p.available);\n\n          // ---- START window.upcartOnRenderUpsell\n          // We need quotes \"\" around the handle because it might start with a number which would\n          // cause an invalid selector error when using document.querySelector if they weren't in quotes\n          const itemQuerySelector = `[href*=\"${handle}\"]`;\n          // Wrap in try/catch in case the query selector is invalid for some reason. We still want to render\n          // the upsell even if we can't find the element\n          try {\n            const handleALink = document.querySelector(itemQuerySelector);\n            const el = handleALink?.closest('li.slide');\n            platform.publicApi.upcartOnRenderUpsell(product, el);\n          } catch (err) {\n            console.log(`Unable to find product with querySelector(\"${itemQuerySelector}\"):`, err);\n            sentryCaptureException(err);\n          }\n          // ---- END window.upcartOnRenderUpsell\n\n          for (let upsellItem of triggeredUpsells) {\n            let upsell = upsellItem.upsell.products[0] || null;\n            if (upsell?.handle === handle) {\n              if (upsell.variants) {\n                // when variants array is present, we trigger only on the variants specified\n                const productWithOnlyTriggeredVariants = {\n                  ...product,\n                  variants: product.variants.filter((variant) => upsell.variants!.includes(String(variant.id))),\n                };\n                triggeredUpsellProductsWithThisHandle.push({\n                  upsellId: upsellItem.id,\n                  fetchedProduct: productWithOnlyTriggeredVariants,\n                });\n              } else {\n                // when the variants array is missing, we trigger on any variant for the product\n                triggeredUpsellProductsWithThisHandle.push({ upsellId: upsellItem.id, fetchedProduct: product });\n              }\n            }\n          }\n\n          // only include products that have at least one variant to show\n          const productsWithVariants = triggeredUpsellProductsWithThisHandle.filter(\n            ({ fetchedProduct }) => fetchedProduct.variants.length > 0,\n          );\n\n          return productsWithVariants;\n        })",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 7906,
                "end_index": 10880,
                "start_line": 195,
                "end_line": 369,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n  const { settings } = platform;\n\n  const [upsells, setUpsells] = useState<Product[]>([]);\n  const [triggeredUpsells, setTriggeredUpsells] = useState<UpsellV2ItemWithProductUpsell[]>([]);\n  const {\n    upsellsItems: upsellItemsV1orV2,\n    showUpsellItemsAlreadyInCart,\n    recommendedUpsells,\n    upsellsShouldLimit,\n    maximumUpsellsToShow,\n    upsellRecommendationIntent,\n  } = settings.upcartEditorSettings;\n\n  const cartItemsId = useMemo((): number[] => cart.items.map((item: { product_id: number }) => item.product_id), [\n    cart,\n  ]);\n\n  const { items: cartItems } = cart;\n\n  /**\n   * 1. Convert all upsell items to V2 format (if necessary)\n   * 2. Filter upsells to only include triggered upsells\n   * 3. Remove duplicate upsells\n   * 4. Fetch the full product for the upsells\n   * 5. Finalize Upsells - Combine duplicate products (with variants)\n   */\n\n  /**\n   * 1. Convert all upsell items to V2 format (if necessary)\n   */\n  const upsellItems: UpsellV2Item[] = useMemo(() => convertUpsellsToV2({ upsellItemsV1orV2 }), [upsellItemsV1orV2]);\n\n  //2. Filter upsells that are not triggered",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 791,
                "end_index": 1892,
                "start_line": 3,
                "end_line": 51,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "return items\n      .map(({ upsell }) => {\n        if (upsell) {\n          return (\n            <div className={`${styles.PreviewCarousel__item} DesignSettings__cartAccentColor`} key={upsell.shortId}>\n              <LegacyCard>\n                <LegacyStack spacing=\"loose\" alignment=\"center\" wrap={false}>\n                  <LegacyStack.Item>\n                    <div className={styles.PreviewCarousel__itemImage}>\n                      <img src={upsell.image} alt={upsell.title} title={upsell.title} />\n                    </div>\n                  </LegacyStack.Item>\n                  <LegacyStack.Item fill>\n                    <div className={`${styles.PreviewCarousel__itemTitle}`}>\n                      <Text variant=\"bodyMd\" as=\"span\" fontWeight=\"semibold\">\n                        {upsell.title}\n                      </Text>\n                      <span className={`${styles.PreviewCarousel__itemPrice}`}>\n                        {!!parseInt(upsell.compareAtPrice) && (\n                          <span className={styles['PreviewCarousel__itemPrice--discount']}>\n                            {formatMoney(upsell.compareAtPrice, currencyFormat)}\n                          </span>\n                        )}\n                        {formatMoney(upsell.price, currencyFormat)}\n                      </span>\n                    </div>\n                    <div className={`${styles.PreviewCarousel__button} DesignSettings__button`}>\n                      <div className={styles.PreviewCarousel__variationProduct}>\n                        <select title=\"productVariant\">\n                          <option>Variant #1</option>\n                          <option>Variant #2</option>\n                          <option>Variant #3</option>\n                        </select>\n                        <div className={styles.PreviewCarousel__icon}>\n                          <Icon source={SelectArrowIcon} />\n                        </div>\n                      </div>\n                      <CustomButton>{buttonText ?? 'Add to cart'}</CustomButton>\n                    </div>\n                  </LegacyStack.Item>\n                </LegacyStack>\n              </LegacyCard>\n            </div>\n          );\n        }\n      })\n      .filter((upsell) => upsell);\n  }, [buttonText, currencyFormat, items]);",
                "filename": "web/src/@components/PreviewCarousel/PreviewCarousel.tsx",
                "start_index": 817,
                "end_index": 3108,
                "start_line": 21,
                "end_line": 68,
                "max_line": 105,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": ", [triggeredUpsells, upsellHandlesToFetch, platform, preview])",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 11106,
                "end_index": 11168,
                "start_line": 261,
                "end_line": 261,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "else {\n      if (cancelled.isCancelled) return; // prevent setting state after unmounting or race condition\n\n      //Flatten the product list we fetched\n      Promise.all(upsellsWithProducts).then((listOfProductLists) => {\n        const flattenedProductsList = [];\n        for (const productList of listOfProductLists) {\n          for (const product of productList) {\n            flattenedProductsList.push(product);\n          }\n        }\n\n        //The upsellItems array is ordered according to priority\n        //If we encounter the same product, we will combine them and their variants\n        const productsOrderedByUpsellPriority: Product[] = [];\n        for (const upsellItem of upsellItems) {\n          //Find the product in the filtered list upsells (if it exists)\n          for (const productWithUpsellId of flattenedProductsList) {\n            //If the product already exists then combine variants instead of adding the product.\n            if (productWithUpsellId.upsellId === upsellItem.id) {\n              const alreadyExistsIndex = productsOrderedByUpsellPriority.findIndex(\n                (uniqueUpsell) => uniqueUpsell.id === productWithUpsellId.fetchedProduct.id,\n              );\n\n              if (alreadyExistsIndex === -1) {\n                productsOrderedByUpsellPriority.push(productWithUpsellId.fetchedProduct);\n              } else {\n                productsOrderedByUpsellPriority[alreadyExistsIndex] = {\n                  ...productsOrderedByUpsellPriority[alreadyExistsIndex],\n                  variants: [\n                    //Replace variants with a new array containing all unique variants from both products\n                    ...new Set([\n                      ...(productsOrderedByUpsellPriority[alreadyExistsIndex].variants || []),\n                      ...productWithUpsellId.fetchedProduct.variants,\n                    ]),\n                  ],\n                };\n              }\n            }\n          }\n        }\n        setUpsells(productsOrderedByUpsellPriority);\n      });\n    }",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 12589,
                "end_index": 14613,
                "start_line": 69,
                "end_line": 391,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "//3. Remove duplicate upsells so that we can minimize the calls\n  const upsellHandlesToFetch = useMemo(() => {\n    const allUpsellHandles = triggeredUpsells\n      .map((upsellItem) => upsellItem.upsell.products[0]?.handle)\n      .filter(Boolean);\n    // we only need to fetch each product once so we can remove duplicates\n    return [...new Set(allUpsellHandles)];\n  }, [triggeredUpsells]);\n\n  //4. Fetch the full product for the upsells",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 6947,
                "end_index": 7384,
                "start_line": 177,
                "end_line": 186,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "(preview ? upsellHandlesToFetch.splice(0, 20) : upsellHandlesToFetch).splice(0, 500).map",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 7728,
                "end_index": 7816,
                "start_line": 192,
                "end_line": 192,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "getTriggeredUpsells =",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 1949,
                "end_index": 1970,
                "start_line": 54,
                "end_line": 54,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n      let triggeredUpsellItems: UpsellV2ItemWithProductUpsell[] = [];",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 1983,
                "end_index": 2054,
                "start_line": 3,
                "end_line": 55,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "upsellsWithProducts: Promise<FetchedProductWithUpsellId[]>[] =",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 7393,
                "end_index": 7455,
                "start_line": 187,
                "end_line": 187,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "async (upsellItem) =>",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 2095,
                "end_index": 2116,
                "start_line": 57,
                "end_line": 57,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "useEffect(() => {\n    /**\n     * Remove the add-on product if all other products in the cart are removed.\n     *\n     * Similar logic used to be handled in the empty cart component, but this caused the cart\n     * to incorrectly empty when going back in the browser due to HTML caching of the Liquid-rendered\n     * upcartPreloadedCart.\n     */\n    if (!hasFetchedCart) return; // prevent clearing cart based on stale cart\n    const isEmptyCartWithLeftoverAddonProduct = cartIsVisuallyEmpty && hiddenCartItems.length > 0;\n    if (isEmptyCartWithLeftoverAddonProduct) {\n      platform.cart.clearCart().then(() => {\n        refetchCart();\n      });\n    }\n  }, [platform, refetchCart, cartIsVisuallyEmpty, hiddenCartItems, hasFetchedCart]);\n\n  useEffect(() => {\n    if (cartIsVisuallyEmpty) {\n      sessionStorageEngine.unset(['announcement_module_time']);\n    }\n  }, [cartIsVisuallyEmpty]);\n\n  const announcementModuleIfActive = useMemo(() => {\n    if (!settings.upcartEditorSettings.announcementModule) return null;\n    return <AnnouncementModule platform={platform} />;\n  }, [settings, platform]);\n\n  const upsellModuleMarkupIfActive = useMemo(() => {\n    if (!settings.upcartEditorSettings.upsellsModule) return null;\n    return (\n      <UpsellsModule\n        preview={preview || false}\n        platform={platform}\n        cart={cartToShow}\n        cartIsLoading={cartIsLoading}\n        refetchCart={refetchCart}\n      />\n    );\n  }, [settings, cartToShow, cartIsLoading, refetchCart, platform, preview]);\n\n  const { totalAfterAllDiscounts } = useCartTotal({ cart });\n\n  return (\n    <>\n      <GlobalStyles platform={platform} />\n      <div\n        id=\"CartPopup\"\n        className={`upcart-cart ${styles.CartPreview} ${styles['CartPreview__' + settings.upcartSettings.cartPosition]}\n      ${styles['CartPreview__position-' + styling.position]}\n        UpcartDesignSettings__backgroundColor ${platform.options.forceAlwaysOpen ? styles.active : ''}`}\n        style={\n          settings.upcartSettings.disableSticky\n            ? { overflowY: 'auto', height: styling.height }\n            : { height: styling.height }\n        }\n        // This is needed to allow the cart to scroll on mobile for some themes.\n        // See Linear issue BEAM-1504 for more details.\n        data-scrollable\n      >\n        {cartIsVisuallyEmpty ? (\n          <EmptyCart\n            refetchCart={refetchCart}\n            platform={platform}\n            cart={cartToShow}\n            closePopup={platform.eventHandlers.onCloseClick}\n            isAddingItemThatCausedCartToOpen={isAddingItemThatCausedCartToOpen}\n          />\n        ) : (\n          <div\n            className={clx(styles.CartPreview__card, {\n              [styles.CartPreview__card_nonSticky]: settings.upcartSettings.disableSticky,\n            })}\n          >",
                "filename": "web/storefront/src/modules/CartPopup/Cart.tsx",
                "start_index": 12884,
                "end_index": 15689,
                "start_line": 107,
                "end_line": 477,
                "max_line": 521,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<Button\n                    primary\n                    size=\"large\"\n                    url=\"https://apps.shopify.com/upcart-cart-builder?source=aftersell-app-upcart-landing-page\"\n                    external\n                  >\n                    {t('Claim free trial') as string}\n                  </Button>\n                  <LegacyStack alignment=\"center\" spacing=\"extraTight\">\n                    <Reviews title={''} />\n                    <p style={{ fontSize: '18px', fontWeight: 'bolder', paddingBottom: '2px', marginLeft: '4px' }}>\n                      5.0 (500+ Reviews)\n                    </p>\n                  </LegacyStack>\n                  <br />\n                </LegacyStack>\n              </LegacyStack>\n\n              <div className={styles.mainImage}>\n                <img src=\"https://i.ytimg.com/vi_webp/P3xyRIPRh6A/maxresdefault.webp\" />\n              </div>\n            </div>\n          </Layout.Section>\n          <Layout.Section fullWidth>\n            <LegacyStack vertical spacing=\"extraLoose\">\n              <LegacyStack distribution=\"fillEvenly\">\n                <div className={styles.contentImage}>\n                  <img src={upCartBenefitsMap[0].postPurchaseUpsellImage} />\n                </div>\n                <LegacyStack vertical>\n                  <Heading>\n                    <h3 style={{ fontSize: '20px', fontWeight: 'bold', marginTop: '5px' }}>\n                      {upCartBenefitsMap[0].postPurchaseUpsell}\n                    </h3>\n                  </Heading>\n                  <LegacyStack vertical>\n                    <CheckmarkBenefit benefit=\"One Click Upsell Funnels\" />\n                    <CheckmarkBenefit benefit=\"Deep offer targeting with triggers\" />\n                    <CheckmarkBenefit benefit=\"AI recommended offers\" />\n                    <CheckmarkBenefit benefit=\"A/B test offers\" />\n                  </LegacyStack>\n                </LegacyStack>\n              </LegacyStack>\n              <LegacyStack distribution=\"fillEvenly\">\n                <LegacyStack vertical>\n                  <Heading>\n                    <h3 style={{ fontSize: '20px', fontWeight: 'bold', marginTop: '5px' }}>\n                      {upCartBenefitsMap[1].thankYouPage}\n                    </h3>\n                  </Heading>\n                  <LegacyStack vertical>\n                    <CheckmarkBenefit benefit=\"Product recommendations & storewide discount popup\" />\n                    <CheckmarkBenefit benefit=\"FAQs & reviews\" />\n                    <CheckmarkBenefit benefit=\"Images and videos\" />\n                  </LegacyStack>\n                </LegacyStack>\n                <div className={styles.contentImage}>\n                  <img src={upCartBenefitsMap[1].thankYouPageImage} />\n                </div>\n              </LegacyStack>\n              <LegacyStack distribution=",
                "filename": "web/src/@templates/AfterSellAd/AfterSellAd.tsx",
                "start_index": 2946,
                "end_index": 5780,
                "start_line": 79,
                "end_line": 139,
                "max_line": 163,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "media: [\n    {\n      alt: null,\n      id: 30365597368579,\n      position: 1,\n      preview_image: {\n        aspect_ratio: 1.0,\n        height: 1000,\n        width: 1000,\n        src: 'https://cdn.shopify.com/s/files/1/0642/9435/5203/products/campstool-1.jpg?v=1651950743',\n      },\n      aspect_ratio: 1.0,\n      height: 1000,\n      media_type: 'image',\n      src: 'https://cdn.shopify.com/s/files/1/0642/9435/5203/products/campstool-1.jpg?v=1651950743',\n      width: 1000,\n    },\n    {\n      alt: null,\n      id: 30365597401347,\n      position: 2,\n      preview_image: {\n        aspect_ratio: 1.0,\n        height: 1000,\n        width: 1000,\n        src: 'https://cdn.shopify.com/s/files/1/0642/9435/5203/products/campstool-2.jpg?v=1651950743',\n      },\n      aspect_ratio: 1.0,\n      height: 1000,\n      media_type: 'image',\n      src: 'https://cdn.shopify.com/s/files/1/0642/9435/5203/products/campstool-2.jpg?v=1651950743',\n      width: 1000,\n    },\n  ],\n  requires_selling_plan: false,\n  selling_plan_groups: [\n    {\n      app_id: 'UpCart Preview :)',\n      id: 'abc123',\n      name: 'Subscribe & Save 20%',\n      options: [{ name: 'Deliver every', position: 1, values: ['week'] }],\n      selling_plans: [\n        {\n          id: 123,\n          name: 'Weekly subscription',\n          description: '',\n          options: [{ name: 'Deliver every', position: 1, value: 'week' }],\n          price_adjustments: [],\n          recurring_deliveries: true,\n        },\n      ],\n    },\n  ],\n}",
                "filename": "web/src/@templates/CartEditor/platform/preview/products/fake-products.ts",
                "start_index": 3137,
                "end_index": 4622,
                "start_line": 64,
                "end_line": 559,
                "max_line": 559,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "initial_doc_snippets": [
            {
                "code": "# Specification: Subscription Upgrades\n\n## Editor\n\nThere should be a module in the editor with:\n\n- Name: \"Subscription Upgrades\"\n- Icon: Repeat Order\n- Default status: disabled\n- Settings:\n  - \"Prevent downgrades\"\n    - Help text: \"If enabled, customers will not be allowed to downgrade from a subscription to one-time purchase. Caution: this may increase cart abandonment.\"\n    - Type: checkbox\n    - Default: disabled\n\n## Cart\n\n> If the subscription upgrades module is disabled in the editor, the cart should skip all subscription upgrade functionality.\n>\n> The following cart specification is applicable only if the subscription upgrades module has been enabled in the editor.\n\n### Behaviour\n\nThe cart frontend for subscription upgrades should be isolated to an area below each line item. This area can include content, or can be omitted if there is nothing to show. If the area includes content, then the area should have:\n\n- Public CSS class: `.upcart-subscription-upgrade-section`\n- Styling: full-width of line item\n\nThe content of each subscription upgrade area should be independent of the content for the subscription areas for any other line items.\n\nThe content of the subscription upgrade area should be as follows:\n\nA. For **one-time purchase** line items:\n\n- If the item cannot be sold as a subscription, nothing should be shown.\n- If the item can be sold as a subscription:\n  - There should be a button with:\n    - Content: \"Upgrade to \\_\\_\\_\\_\", where \\_\\_\\_\\_ is the name of the first selling plan group for the item\n    - When clicked:\n      1. Show a loading spinner instead of text, and disable the button\n      2. Change the item to be a subscription with the first selling plan of the first selling plan group. The line item should have the property `__upcartSubscriptionUpgrade: \"true\"`\n    - Styling: full width of area, match to other buttons in cart\n    - Public CSS class: `.upcart-subscription-upgrade-button`\n\nB. For **subscription** line items:\n\n- There should be a dropdown with:\n  - Content: the name of the current selling plan\n  - Options:\n    - (OPTIONAL) A group with:\n      - Title: \"Full price\"\n      - Options:\n        - \"One-time purchase\"\n      - Condition: this group should be included if the \"Prevent downgrades\" setting is disabled AND the item does not _require_ a selling plan (i.e., it can be sold as a one-time purchase)\n    - A group for each possible selling plan group for the item with:\n      - Title: the name of the selling plan group\n      - Options: the names of the possible selling plans in the group for the item\n  - When selected:\n    1. Show a loading spinner overlayed on the dropdown and disable the dropdown\n    2. Change the selling plan of the item to the selected selling plan. If \"One-time only\" was selected, then remove the selling plan from the item to change it to a one-time purchase. The line item should have the property `__upcartSubscriptionEdit: \"true\"`\n  - Styling: full width of area, match to other dropdowns in cart\n  - Public CSS class: `.upcart-subscription-upgrade-dropdown`\n\nWhen the current purchase option for a line item changes, the content of the subscription upgrade area should be updated to match the new purchase option.\n\n### Edge Cases and Clarifications\n\n- The content of the subscription upgrade area does not depend on _how_ the purchase option was selected. For example, the subscription upgrade area content for an item that was added to the cart as a subscription should be the same as the content for an item that was upgraded from a one-time purchase to a subscription in-cart.\n- When selling plans are being loaded for a product, there should be no content in the subscription upgrade area. Before the selling plans are loaded, we can't fully decide what content to show so it's fine to show nothing.\n- When the selling plan of an item is changed, the quantity of the item should remain constant. If you don't provide a quantity to the AJAX API when changing a line item, then the quantity of the line item will be set to 1 which should be avoided.\n- Selling plans that do not apply to the selected variant for a line item should be ignored. It is possible to have selling plans that apply only to specific variants of a product. In cases where none of the selling plans from a selling plan group apply to the variant for the line item, the selling plan group should be ignored. An ignored group should not be listed in the dropdown (because it would be an empty section) and it should not be used for text of the upgrade button (because it would have no selling plan to select).",
                "filename": "docs/subscription-upgrades.md",
                "start_index": 0,
                "end_index": 4584,
                "start_line": 1,
                "end_line": 71,
                "max_line": 71,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "---\nid: 3vst4bcr\ntitle: Discount Codes Module\nfile_version: 1.1.3\napp_version: 1.18.31\n---\n\n# Required background information\n\n## Discount types\n\nThere are two types of discounts: **automatic discounts** and **discount codes**.\n\n- **Automatic discounts** are applied to a cart or checkout automatically when the discount criteria are met.\n\n- **Discount codes** must be manually typed in by the customer. They stay active until the customer either removes the code, enters a different conflicting discount code, or changes their cart/checkout so that the discount is not longer applicable.\n\nThis module is specifically for **discount codes**. We do not have to worry about **automatic discounts** because they will work in the cart by default and they do not require any user interaction.\n\n## Discount targets\n\nA discount can be used to reduce the cost of **product(s)**, **order**, or **shipping**.\n\n- **Product discounts** reduce the price of one or more products and are shown as a reduction on individual line items.\n\n- **Order discounts** reduce the price of the order as a whole and are shown as a reduction on the overal price.\n\n- **Shipping discounts** reduce the price of shipping.\n\n# Read and write discount codes\n\n## Read discount codes\n\nWe read discount codes using the `cart.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:78:24:26:`    const cart: Cart&lt;CartItemWithoutCompareAtPrice&gt; = await fetch(getShopifyRoutesRoot() + &#39;cart.js&#39;).then((res) =&gt;`\"/> Ajax API endpoint.\n\nAn applied discount code will be returned from the API as part of either the `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> or the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/>. The `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> are for order discounts and the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/> are for product discounts.\n\nThese discount applications will include both **automatic discounts** and **discount codes**. We can distinguish between these using the `type`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:460:1:1:`  type: &#39;discount_code&#39; | &#39;&#39;;`\"/> field of the `DiscountApplication`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:446:4:4:`export interface DiscountApplication {`\"/>.\n\n## Apply a discount code\n\n<br/>\n\nWe apply a discount code by making a request from the storefront to the route `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/>.\n\nThe `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/> route is intended by Shopify to be used for [shareable discount links](https://help.shopify.com/en/manual/discounts/managing-discount-codes#promote-a-discount-using-a-shareable-link). Normally a customer would navigate to the link directly in their browser and would be redirected to the storefront. We are using it in a non-standard way by making a background network request.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n23         await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);\n```\n\n<br/>\n\nAfter applying a discount code, we refetch the cart to check if the discount was successfully applied and to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/DiscountCodeModule/DiscountCodeModule.tsx\n\n```tsx\n23           await platform.discounts.attemptApplyDiscountCode({ discountCode: discountCodeToApply });\n24           const updatedCart = await refetchCart();\n25\n26           const discountApplications = getAllUniqueDiscountApplications(updatedCart);\n27           const isValid = discountApplications.some(\n28             (discountApplication) => discountApplication.title === discountCodeToApply,\n29           );\n```\n\n<br/>\n\n## Remove a discount code\n\n<br/>\n\nWe remove a discount code by applying a fake invalid discount code.\n\nThere is no native way to remove discount codes so this is a workaround.\n\nThis behaviour relies on the fact that there can only be one discount code applied in the cart. We are replacing the one allowed discount code with an invalid code.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n14       async removeDiscountCode(): Promise<void> {\n15         const FAKE_INVALID_DISCOUNT_CODE = '~!~!UPCART_REMOVE_DISCOUNT!~!~';\n16         await this.UNSAFE_POSSIBLE_NO_OP_applyDiscountCodeAndSetShopifyCookie({ discountCode: FAKE_INVALID_DISCOUNT_CODE });\n17       }\n```\n\n<br/>\n\nAfter removing a discount code, we refetch the cart to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/components/DiscountCodeBadge/DiscountCodeBadge.tsx\n\n```tsx\n18         await platform.discounts.removeDiscountCode();\n19         await refetchCart();\n```\n\n<br/>\n\n> \u26a0\ufe0f After we apply or remove a discount code, the `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> of discounted line items will change. If we did not refetch the cart then we would have an outdated `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> value which would cause errors if we tried to call `cart/update.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:191:17:21:`    return fetchQd(this.ajaxMutationCartQ, getShopifyRoutesRoot() + &#39;cart/update.js&#39;, {`\"/> or `cart/change.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:153:8:12:`      getShopifyRoutesRoot() + `cart/change.js?${query.toString()}`,`\"/>.\n\n# Limitations\n\n## **Multiple** discount codes are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n50                     Multiple discount codes are not supported.\n```\n\n<br/>\n\n### Why are multiple discount codes not supported?\n\nWe cannot apply multiple discount codes because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support multiple codes. This is the only way that we know of to apply a discount code from the storefront. We will have to wait for Shopify to add support for multiple codes or to find a different way to apply codes which does support multiple.\n\nIf a customer applies two discount codes back to back, the first discount code will be discarded and only use the most recently applied code will affect the cart.\n\n## Free shipping discounts are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n58                   Free shipping discounts are not supported.\n```\n\n<br/>\n\n### Why are free shipping discounts not supported?\n\nWe cannot apply free shipping discounts because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support them.\n\n## Shopify Plus stores using checkout.liquid are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n64                   Shopify Plus stores using checkout.liquid are not supported.\n```\n\n<br/>\n\n### Why are Shopify Plus stores using checkout.liquid not supported?\n\nHistorically, the Ajax API only included automatic discounts and did not include discount codes. Shopify changed this behaviour and started including discounts from discount codes in Ajax API responses. There are still some stores which do not include discount codes in Ajax API responses. The discount codes module does not work on these stores.\n\n### How can we tell if a store is eligible?\n\nThe Ajax API will include discount codes in responses only if the store is on Shopify's new checkout.\n\n<br/>\n\nWe can identify wether or not a store is on Shopify's new checkout by looking at the cart token. If the cart token is 32 characters long and only includes hex digits (0123456789abcdef) then the store is on Shopify's old checkout, otherwise it is on Shopify's new checkout and the Ajax API will include discount codes in responses.\n\nStores that are on Shopify's new checkout may have different token formats. The following are examples that we've seen:\n\n- c1-d3f024e3af037f40bfe1b016b5b76f05\n- Z2NwLXVzLWNlbnRyYWwxOjAxSEZFMjFIV1FZUFc0SlQ3Q00ySFFSSjgy\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart({ cart }: { cart: Cart<CartItem> }): boolean {\n6          if (!cart.token) return false;\n7          const isLegacyCartToken = cart.token.match(/^[0-9a-f]{32}$/) !== null;\n8          return !isLegacyCartToken;\n9        }\n```\n\n<br/>\n\n### What happens if a store is not eligible?\n\n<br/>\n\nIf a store is not eligible then the discount code module will not be shown.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/Cart.tsx\n\n```tsx\n499                      {platform.discounts.getStoreCanApplyDiscountCodesInCart({ cart }) &&\n500                        settings.upcartEditorSettings.discountCodeModule && (\n501                          <DiscountCodeModule platform={platform} refetchCart={refetchCart} />\n502                        )}\n```\n\n<br/>\n\nIn the preview we will show the discount code module even for stores that are not eligible. We do this because it would require a lot of work to check eligibility when not on the storefront.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/platform/preview/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart(args: { cart: Cart<CartItem> }): boolean {\n6          return true;\n7        }\n```\n\n<br/>\n\nThis file was generated by Swimm. [Click here to view it in the app](https://app.swimm.io/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr).",
                "filename": ".swm/discount-codes-module.3vst4bcr.sw.md",
                "start_index": 0,
                "end_index": 11446,
                "start_line": 1,
                "end_line": 231,
                "max_line": 231,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# UpCart 3.0\n\n## Setup\n\nView setup instructions on Notion: https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 133,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>UpCart Loading...</title>\n    <script>\n      /*\n       * Constants\n       */\n      const INSTALL_SOURCE_QUERY_PARAM = 'via';\n      const COOKIE_LIFETIME_MS = 3 * 24 * 60 * 60 * 1000; // 3 days\n      const COOKIE_NAME = 'upcart_install_source';\n\n      /*\n       * 1. Get the ?via= query for the following steps\n       */\n      const installSource = encodeURIComponent(\n        new URLSearchParams(window.location.search).get(INSTALL_SOURCE_QUERY_PARAM),\n      );\n\n      /*\n       * 2. Set a cookie with the install source for 3 days so we can read it when they install the app\n       */\n      const cookieDomain = '.' + window.location.hostname;\n      const cookieExpiresDate = new Date();\n      cookieExpiresDate.setTime(cookieExpiresDate.getTime() + COOKIE_LIFETIME_MS);\n      const cookieExpires = cookieExpiresDate.toGMTString();\n      document.cookie = `${COOKIE_NAME}=${installSource}; expires=${cookieExpires}; domain=${cookieDomain}; path=/; SameSite=None; Secure`;\n\n      /*\n       * 3. Redirect to the app store, including the install source as a query param for App Store Google Analytics\n       */\n      window.location.replace(`https://apps.shopify.com/upcart-cart-builder?join-via=${installSource}`);\n    </script>\n  </head>\n  <body></body>\n</html>",
                "filename": "web/public/join.html",
                "start_index": 0,
                "end_index": 1304,
                "start_line": 1,
                "end_line": 36,
                "max_line": 36,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Security Policy\n\n## Supported versions\n\n### New features\n\nNew features will only be added to the master branch and will not be made available in point releases.\n\n### Bug fixes\n\nOnly the latest release series will receive bug fixes. When enough bugs are fixed and its deemed worthy to release a new gem, this is the branch it happens from.\n\n### Security issues\n\nOnly the latest release series will receive patches and new versions in case of a security issue.\n\n### Severe security issues\n\nFor severe security issues we will provide new versions as above, and also the last major release series will receive patches and new versions. The classification of the security issue is judged by the core team.\n\n### Unsupported Release Series\n\nWhen a release series is no longer supported, it's your own responsibility to deal with bugs and security issues. If you are not comfortable maintaining your own versions, you should upgrade to a supported version.\n\n## Reporting a bug\n\nAll security bugs in shopify repositories should be reported to [our hackerone program](https://hackerone.com/shopify)\nShopify's whitehat program is our way to reward security researchers for finding serious security vulnerabilities in the In Scope properties listed at the bottom of this page, including our core application (all functionality associated with a Shopify store, particularly your-store.myshopify.com/admin) and certain ancillary applications.\n\n## Disclosure Policy\n\nWe look forward to working with all security researchers and strive to be respectful, always assume the best and treat others as peers. We expect the same in return from all participants. To achieve this, our team strives to:\n\n- Reply to all reports within one business day and triage within two business days (if applicable)\n- Be as transparent as possible, answering all inquires about our report decisions and adding hackers to duplicate HackerOne reports\n- Award bounties within a week of resolution (excluding extenuating circumstances)\n- Only close reports as N/A when the issue reported is included in Known Issues, Ineligible Vulnerabilities Types or lacks evidence of a vulnerability\n\n**The following rules must be followed in order for any rewards to be paid:**\n\n- You may only test against shops you have created which include your HackerOne YOURHANDLE @ wearehackerone.com registered email address.\n- You must not attempt to gain access to, or interact with, any shops other than those created by you.\n- The use of commercial scanners is prohibited (e.g., Nessus).\n- Rules for reporting must be followed.\n- Do not disclose any issues publicly before they have been resolved.\n- Shopify reserves the right to modify the rules for this program or deem any submissions invalid at any time. Shopify may cancel the whitehat program without notice at any time.\n- Contacting Shopify Support over chat, email or phone about your HackerOne report is not allowed. We may disqualify you from receiving a reward, or from participating in the program altogether.\n- You are not an employee of Shopify; employees should report bugs to the internal bug bounty program.\n- You hereby represent, warrant and covenant that any content you submit to Shopify is an original work of authorship and that you are legally entitled to grant the rights and privileges conveyed by these terms. You further represent, warrant and covenant that the consent of no other person or entity is or will be necessary for Shopify to use the submitted content.\n- By submitting content to Shopify, you irrevocably waive all moral rights which you may have in the content.\n- All content submitted by you to Shopify under this program is licensed under the MIT License.\n- You must report any discovered vulnerability to Shopify as soon as you have validated the vulnerability.\n- Failure to follow any of the foregoing rules will disqualify you from participating in this program.\n\n** Please see our [Hackerone Profile](https://hackerone.com/shopify) for full details\n\n## Receiving Security Updates\n\nTo recieve all general updates to vulnerabilities, please subscribe to our hackerone [Hacktivity](https://hackerone.com/shopify/hacktivity)",
                "filename": "SECURITY.md",
                "start_index": 0,
                "end_index": 4160,
                "start_line": 1,
                "end_line": 59,
                "max_line": 59,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "MIT License\n\nCopyright (c) 2021 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
                "filename": "extensions/theme-app-extension/LICENSE.md",
                "start_index": 0,
                "end_index": 1063,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# [[[ --- STAGE: BASE ENVIRONMENT SETUP --- ]]]\n# see https://github.com/moby/moby/issues/37345#issuecomment-400250849\nFROM node:18.16.1-alpine as base\n# Accept command line '--build-arg' arguments\nARG PORT=8081\nARG HOST\nARG SHOPIFY_API_KEY\nARG INTERCOM_APP_ID\nARG SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY\n\n# Copy command line args to env to use during build and for final image runtime\nENV PORT=${PORT} \\\n    HOST=${HOST} \\\n    SHOPIFY_API_KEY=${SHOPIFY_API_KEY} \\\n    INTERCOM_APP_ID=${INTERCOM_APP_ID}\n    # ^^^^^ WARNING ^^^^^ do not include trailing \"\\\" on the last line above, you will get a syntax error with a terrible error message\n    #\n    # SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY is intentionally not included here since it is only for building and shouldn't be available at runtime\n\n# [[[ --- STAGE: BUILD --- ]]]\nFROM base AS build\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nCOPY web/patches ./web/patches\nRUN yarn install --cwd web --frozen-lockfile --production=false\nCOPY . .\n# NOTE: we need Sentry API token to upload source maps to Sentry during build, see withSentryConfig in next.config.js\nRUN echo \"[auth]\\ntoken=${SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY}\" > ./web/.sentryclirc\nRUN yarn web:build\n\n# [[[ --- STAGE: LICENSES WEB --- ]]]\nFROM base AS licenses-web\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web > ./web/public/licenses/web.txt\n\n# [[[ --- STAGE: LICENSES STOREFRONT --- ]]]\nFROM base AS licenses-storefront\nWORKDIR /app\nCOPY web/storefront/package.json web/storefront/yarn.lock ./web/storefront/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web/storefront > ./web/public/licenses/storefront.txt\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM base\nWORKDIR /app\nCOPY --from=build /app .\nCOPY package.json ./package.json\nRUN yarn install --frozen-lockfile --production=true\nCOPY --from=licenses-web /app/web/public/licenses/web.txt ./web/public/licenses/web.txt\nCOPY --from=licenses-storefront /app/web/public/licenses/storefront.txt ./web/public/licenses/storefront.txt\nCMD [\"yarn\", \"web:start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2181,
                "start_line": 1,
                "end_line": 53,
                "max_line": 53,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "## Dev Setup\n\nFollow the [instructions in this Notion document](https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7?pvs=4) to setup the development environment for the Chrome extension.",
                "filename": "chrome-extensions/cart-customization/README.md",
                "start_index": 0,
                "end_index": 208,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "The starting point for this repository was created using the Shopify CLI, commit\nf5d560da33aafae0b552de72a90f1320d1023524. Some boilerplate code from the CLI\nremains and is licensed as follows:\n\"\"\"\nMIT License\n\nCopyright (c) 2018 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\"",
                "filename": "LICENSE.md",
                "start_index": 0,
                "end_index": 1265,
                "start_line": 1,
                "end_line": 26,
                "max_line": 26,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.\\\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can\u2019t go back!**\n\nIf you aren\u2019t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you\u2019re on your own.\n\nYou don\u2019t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn\u2019t feel obligated to use this feature. However we understand that this tool wouldn\u2019t be useful if you couldn\u2019t customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n\n### Code Splitting\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\n\n### Analyzing the Bundle Size\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\n\n### Making a Progressive Web App\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\n\n### Advanced Configuration\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\n\n### Deployment\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\n\n### `npm run build` fails to minify\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)",
                "filename": "web/storefront/README.md",
                "start_index": 0,
                "end_index": 3354,
                "start_line": 1,
                "end_line": 70,
                "max_line": 70,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { Shop, ShopModel } from '../modules/shops/shops.model';\nimport { RequestWithShop } from '../types/express.types';\nimport Shopify from '@shopify/shopify-api';\n\nexport const getShopDocFromRequest = async (req: RequestWithShop): Promise<Shop> => {\n  if (req.shopDoc) {\n    return req.shopDoc;\n  }\n\n  const shop = Shopify.Utils.sanitizeShop(req.query.shop as string);\n  const shopDoc = await ShopModel.findOne({ domain: shop }).lean();\n  req.shopDoc = shopDoc;\n  return shopDoc;\n};",
                "filename": "web/server/helpers/getShopDocFromRequest.ts",
                "start_index": 0,
                "end_index": 485,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<html></html>",
                "filename": "web/storefront/public/index.html",
                "start_index": 0,
                "end_index": 13,
                "start_line": 1,
                "end_line": 1,
                "max_line": 1,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "intial_documentation_sources": {
            "shopify": {
                "collection": "shopify_documentation",
                "reason_for_relevance": "The issue involves upsell items not displaying in a Shopify store, which could be related to Shopify's API or templating system. The documentation may provide insights into handling null values for image properties and how upsell items should be displayed."
            }
        },
        "external_documentation_snippets": {
            "external_shopify": [
                {
                    "code": "Overview\n Getting started\n Create a subscription\n UX guidelines\n Overview\n Upsell\n Subscriptions\n Payments\n Thank you and Order status\n Localized UI extensions\n UX guidelines for post-purchase upsells\n Beta\n Post-purchase checkout extensions are in beta and can be used without restrictions in a development store. To use post-purchase extensions on a live store, you need to request access.\n When you design a post-purchase upsell, a great customer-facing user experience (UX) and merchant experience are important to the success of our merchants. The post-purchase upsell page should represent the merchant well and protect their brand\u2019s trust.\n User experience\n To provide a great post-purchase experience and to help the merchant gain trust from customers, implement the following UX principles in your post-purchase checkout extension:\n Be transparent about all the costs involved in a purchase.\n Present clear options to accept or refuse upsell offers without pressuring customers.\n Display a maximum of two consecutive upsell offers.\n Present relevant products by tailoring upsell offers to the shopping behaviors and preferences of customers.\n Provide default copy that addresses customers directly using a voice that's appropriate for any store, regardless of brand personality.\n Header and footer\n The styling of the header and footer is consistent across every post-purchase page:\n Header: Confirms the payment of the initial purchase of the order. Customers can also directly access their full order confirmation (and bypass the upsell offer pages) using the View order confirmation button.\n Footer: Contains links to the privacy policy, terms of service, and refund policy.\n Note\n You can't adjust the header and footer components.\n Required components\n App Bridge Checkout provides many powerful UI components that a rendering extension can use to build an interface. The App Bridge Checkout UI components are rendered natively by Shopify, so you can depend on them to be performant, accessible, and functional in all of the checkout\u2019s supported browsers.\n Before you integrate your post-purchase app into checkout, familiarize yourself with the UI guidelines and best practices for the following required components:\n Callout banner\n Product title and price\n Product image\n Price breakdown\n Call to action buttons\n Callout banner\n A callout banner encourages customers to take action on a post-purchase upsell. Use the App Bridge Checkout CalloutBanner to implement this component:\n Place a callout banner near the top of the page to let the customer know what the upsell offer is. Provide strong default copy in your app to encourage merchants to be explicit about the upsell offer.\n Do Don't\n Lead with clear text that explains what a customer can add to the order they've placed. For example: It\u2019s not too late to add to your order.\n Include the product name and the discount associated with it.\n Use exclamation points. For example: \"Wait! Before time runs out!\n Use misleading language that makes the upsell offer feel compulsory or introduces doubt about the status of the order.\n Product title and price\n The product must have the same title and price that it has on the merchant\u2019s store. Keep this consistent to maintain a customer\u2019s trust if they compare. Place the price of the product directly below the product title.\n If the post-purchase product is an upsell offer at a discounted price, then do the following:\n Strike out the original price of the product.\n Display the discounted price next to the original price so that the relationship is clear.\n Product image\n The product image represents the product being offered to the customer in the post-purchase upsell offer. Use the App Bridge Checkout Image component to add an image:\n ADDING MULTIPLE IMAGES\n If the upsell offer includes multiple images, then the images need to be easy to navigate and provide additional context to the customer. Images can be presented using different angles or sizes.\n Note\n There isn't an App Bridge Checkout component available for a carousel feature.\n Do Don't\n Use 48px previous and next arrow buttons.\n Give customers options to swipe between images, navigate using the keyboard, or click on a thumbnail to navigate to the next image.\n Make additional images responsive across screen sizes.\n Implement auto-scrolling through the images, as this might overwhelm customers.\n Price breakdown\n The post-purchase price breakdown shows the total cost of the upsell offer that the customer is accepting. The breakdown needs to be placed under the variant and quantity pickers. The breakdown also needs to dynamically update to reflect price changes if the customer adjusts the product's quantity or variants.\n STRUCTURE OF THE PRICE BREAKDOWN\n The price breakdown needs to include the following:\n Money line: An individual breakdown of costs.\n Subtotal: The total before shipping and taxes have been included.\n Shipping: The total shipping cost for the item(s).\n Taxes: The added cost of goods or services.\n Money summary: The combined total of the subtotal, shipping, and taxes.\n If your product description is long enough that a customer can't see the price breakdown without scrolling, then you need to include a copy of the price breakdown at the end of your product description.\n Call to action buttons\n A call to action button allows a customer to accept or decline an upsell offer. Use the App Bridge Checkout Button component to implement call to action buttons.\n ACCEPT BUTTON\n The accept button is the primary action on the post-purchase upsell page.\n Use the following text for the accept button:\n [Pay now \u2022 Product total price]\n If the product you are offering is free, then use the following text:\n [Add now \u2022 Free] or [Add now \u2022 $0]\n Note\n Don't give merchants the option to change the button text. However, you can translate the button text to any language that you want to support.\n CONFIRMING ACCEPTED UPSELL OFFERS\n Use the App Bridge Checkout Banner component to display a confirmation message when a customer accepts an upsell offer. For example: [Your order has been updated].\n Customers might not expect the accept button to generate a payment immediately because the convention is for \"buy now\" actions to trigger an additional confirmation step. To clarify that there is no additional confirmation step, do the following:\n Add a summary modal to confirm whether the customer wants to proceed.\n Add additional help text directly under the accept button informing the customer that they'll be charged immediately.\n DECLINE BUTTON\n The decline button needs to be placed under the accept button and should be less visually prominent than the accept button. However, despite being less visually prominent, the decline button should still be easy to see so that the merchant can easily decline the upsell offer. The decline button must contain the text [Decline upsell offer].\n Optional components\n In addition to the required components, you can add the following optional components to the post-purchase page:\n Product description\n Variant picker\n Quantity picker\n Product description\n The product description provides a summary of the key features of the product being displayed in the product image (or images).\n Use the TextBlock, TextContainer and Text App Bridge Checkout components to implement a product description.\n All upsell offers should have a product description that accurately summarizes the product features. Encourage merchants using your app to keep the product description as short as possible.\n LENGTHY PRODUCT DESCRIPTIONS\n If the product description is so long that it pushes the rest of the components down (variant picker, quantity picker, price breakdown, and buttons, then divide it into the following two parts:\n A summary description that reveals all other components without scrolling\n A longer, more detailed description below the other components\n Variant picker\n If the product has several variants (for example, size or color), then the page needs to include a variant picker under the product description. Use the App Bridge Checkout Select component to implement a variant picker.\n Label the picker with the name of the variant and the variant values. For example, Size: S, M, L, XL. If your product has several sizes, then consider linking to a size chart.\n Quantity picker\n The quantity picker should be placed below the product description to allow customers to adjust the quantity of a product.\n The quantity picker needs to be a number stepper that's set to 1 as a default. Use the label [Quantity].\n Post-purchase app selector\n Merchants need to enable their post-purchase app in the Shopify admin checkout settings. If there are multiple post-purchase apps installed, then they can also use the checkout settings to select which post-purchase app they want to enable on the post-purchase page.\n We recommend that you let merchants know that they might need to manually select your app to be active in the checkout settings. You could explain this in installation instructions or in your help pages.\n Your can check whether or not it is currently selected, using the following GraphQL Query:\n 1 {\n 2\n    app  {\n 3\n        isPostPurchaseAppInUse\n 4\n    }\n 5 }\n Suggested merchant-facing content for your app:\n You could use the following copy as the basis for a merchant-facing message about multiple post-purchase extensions:\n \"If you already have a post-purchase app installed, you must manually select to make [app-name] active. You can do this in the Shopify admin checkout settings. This option only shows if you already have a post-purchase app installed.\"\n Performance consideration\n To guarantee a good experience for both merchants and customers, we strongly recommend that you prioritize performance when building your extensions. You can depend on App Bridge Checkout UI components to be performant, accessible, and functional in all of the checkout's supported browsers. Keep the following guidelines in mind when building your app:\n Network calls must complete in two seconds or less.\n Network calls that occur before an interface presents to the customer must happen in the ShouldRender handler.\n Render must not require a network call before an interface presents to the customer. Ensure the extension caches required data beforehand using the storage API from ShouldRender.\n Next steps\n Learn how to create a post-purchase upsell.\n Explore UX guidelines for the entire checkout experience.\n For general best practices for developing apps, refer to Best practices for building Shopify apps.\n For practical guidance on how to design a user interface for the Shopify admin, refer to Shopify's App Design Guidelines.\n Get familiar with Polaris accessibility and content guidelines.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n User experience\n Post-purchase app selector\n Performance consideration\n Next steps\n Updates & News\n Developer changelog",
                    "filename": "docs/apps/checkout/product-offers/post-purchase/ux-guidelines/upsell/content.txt",
                    "start_index": 0,
                    "end_index": 10936,
                    "start_line": 1,
                    "end_line": 140,
                    "max_line": 140,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "81\n      When a buyer chooses a different variant, we ensure that only the relevant selling plan selection box is displayed.\n 82\n      This guarantees that only the selling plan associated with the selected variant is shown.\n 83\n    */\n 84\n    handleSellingPlanFormVisibility() {\n 85\n      const sellingPlanFormForSelectedVariant = this.shopifySection.querySelector(\n 86\n        `section[data-variant-id=\"${this.variantIdInput.value}\"]`,\n 87\n      );\n 88\n      const sellingPlanFormsForUnselectedVariants =\n 89\n        this.shopifySection.querySelectorAll(\n 90\n          `.selling_plan_theme_integration:not([data-variant-id=\"${this.variantIdInput.value}\"])`,\n 91\n        );\n 92\n      this.showSellingPlanForm(sellingPlanFormForSelectedVariant);\n 93\n      this.hideSellingPlanForms(sellingPlanFormsForUnselectedVariants);\n 94\n    }\n 95\n 96\n    handleVariantChange() {\n 97\n      this.handleSellingPlanFormVisibility();\n 98\n      this.updateSellingPlanInputsValues();\n 99\n      this.listenToSellingPlanFormRadioButtonChange();\n 100\n    }\n 101\n 102\n    /*\n 103\n      The functions listenToVariantChange() and listenToAddToCartForms() are implemented to track when a product variant is altered or when the product form is updated.\n 104\n      The identification of the variant is crucial as it dictates which selling plan box should be displayed.\n 105\n    */\n 106\n    listenToVariantChange() {\n 107\n      this.listenToAddToCartForms();\n 108\n      if (this.variantIdInput.tagName === 'INPUT') {\n 109\n        const variantIdObserver = new MutationObserver((mutationList) => {\n 110\n          mutationList.forEach((mutationRecord) => {\n 111\n            this.handleVariantChange(mutationRecord.target.value);\n 112\n          });\n 113\n        });\n 114\n 115\n        variantIdObserver.observe(this.variantIdInput, {\n 116\n          attributes: true,\n 117\n        });\n 118\n      }\n 119\n    }\n 120\n 121\n    listenToAddToCartForms() {\n 122\n      this.addToCartForms.forEach((addToCartForm) => {\n 123\n        addToCartForm.addEventListener('change', () => {\n 124\n          this.handleVariantChange();\n 125\n        });\n 126\n      });\n 127\n    }\n 128\n 129\n    get regularPriceElement() {\n 130\n      return this.shopifySection.querySelector('.price__regular');\n 131\n    }\n 132\n 133\n    get salePriceElement() {\n 134\n      return this.shopifySection.querySelector('.price__sale');\n 135\n    }\n 136\n 137\n    get salePriceValue() {\n 138\n      return this.salePriceElement.querySelector('.price-item--sale');\n 139\n    }\n 140\n 141\n    get regularPriceValue() {\n 142\n      return this.salePriceElement.querySelector('.price-item--regular');\n 143\n    }\n 144\n 145\n    get sellingPlanAllocationPrice() {\n 146\n      return document.getElementById(\n 147\n        `${this.selectedPurchaseOption.dataset.sellingPlanGroupId}_allocation_price`,\n 148\n      );\n 149\n    }\n 150\n 151\n    get selectedPurchaseOptionPrice() {\n 152\n      return this.selectedPurchaseOption.dataset.variantPrice;\n 153\n    }\n 154\n 155\n    get selectedPurchaseOptionComparedAtPrice() {\n 156\n      return this.selectedPurchaseOption.dataset.variantCompareAtPrice;\n 157\n    }\n 158\n 159\n    get price() {\n 160\n      return this.sellingPlanAllocationPrices.price ?? null;\n 161\n    }\n 162\n 163\n    /*\n 164\n      We aim to ascertain whether a compared price exists, which would indicate that the currently selected input has a discount applied to it.\n 165\n      If a discount is detected, the discounted price is displayed; otherwise, the regular price is shown.\n 166\n    */\n 167\n    updatePrice() {\n 168\n      if (\n 169\n        !this.selectedPurchaseOptionComparedAtPrice ||\n 170\n        this.selectedPurchaseOptionComparedAtPrice ===\n 171\n          this.selectedPurchaseOptionPrice\n 172\n      ) {\n 173\n        this.showRegularPrice();\n 174\n        this.hideSalePrice();\n 175\n        this.priceElement.classList.remove('price--on-sale');\n 176\n      } else {\n 177\n        this.showSalePrice();\n 178\n        this.hideRegularPrice();\n 179\n        this.priceElement.classList.add('price--on-sale');\n 180\n      }\n 181\n    }\n 182\n 183\n    hideSalePrice() {\n 184\n      this.salePriceElement.style.display = 'none';\n 185\n    }\n 186\n 187\n    hideRegularPrice() {\n 188\n      this.regularPriceElement.style.display = 'none';\n 189\n    }\n 190\n 191\n    showRegularPrice() {\n 192\n      this.regularPriceElement.style.display = 'block';\n 193\n      this.shopifySection.querySelector('.price__sale').style.display = 'none';\n 194\n    }\n 195\n 196\n    showSalePrice() {\n 197\n      this.salePriceElement.style.display = 'block';\n 198\n      this.regularPriceValue.innerHTML =\n 199\n        this.selectedPurchaseOptionComparedAtPrice;\n 200\n      this.salePriceValue.innerHTML = this.selectedPurchaseOptionPrice;\n 201\n    }\n 202\n 203\n    get sellingPlanInputs() {\n 204\n      return this.shopifySection.querySelectorAll('.selected-selling-plan-id');\n 205\n    }\n 206\n 207\n    updateSellingPlanInputsValues() {\n 208\n      this.sellingPlanInputs.forEach((sellingPlanInput) => {\n 209\n        sellingPlanInput.value = this.sellingPlanInputValue;\n 210\n      });\n 211\n    }\n 212\n 213\n    get sellingPlanInputValue() {\n 214\n      return this.selectedPurchaseOption?.dataset.sellingPlanId ?? null;\n 215\n    }\n 216\n 217\n    get selectedPurchaseOption() {\n 218\n      return this.visibleSellingPlanForm?.querySelector(\n 219\n        'input[type=\"radio\"]:checked',\n 220\n      );\n 221\n    }\n 222\n 223\n    set selectedPurchaseOption(selectedPurchaseOption) {\n 224\n      this._selectedPurchaseOption = selectedPurchaseOption;\n 225\n    }\n 226\n 227\n    handleRadioButtonChange(selectedPurchaseOption) {\n 228\n      this.selectedPurchaseOption = selectedPurchaseOption;\n 229\n      this.updateSellingPlanInputsValues();\n 230\n      this.updatePrice();\n 231\n    }\n 232\n 233\n    listenToSellingPlanFormRadioButtonChange() {\n 234\n      this.visibleSellingPlanForm\n 235\n        ?.querySelectorAll('input[type=\"radio\"]')\n 236\n        .forEach((radio) => {\n 237\n          radio.addEventListener('change', (event) => {\n 238\n            this.handleRadioButtonChange(event.target);\n 239\n          });\n 240\n        });\n 241\n    }\n 242\n 243\n    enablePerformanceObserver() {\n 244\n      const performanceObserver = new PerformanceObserver((list) => {\n 245\n        list.getEntries().forEach((entry) => {\n 246\n          if (entry.initiatorType !== 'fetch') return;\n 247\n 248\n          const url = new URL(entry.name);\n 249\n          /*\n 250\n            When a buyer selects a product variant, a fetch request is initiated.\n 251\n            Upon completion of this fetch request, we update the price to reflect the correct value.\n 252\n          */\n 253\n          if (url.search.includes('variant') || url.search.includes('variants')) {\n 254\n            this.updatePrice();\n 255\n          }\n 256\n        });\n 257\n      });\n 258\n 259\n      performanceObserver.observe({entryTypes: ['resource']});\n 260\n    }\n 261 }\n 262\n 263 document\n 264\n    .querySelectorAll('.selling_plan_app_container')\n 265\n    .forEach((sellingPlansWidgetContainer) => {\n 266\n      new SellingPlansWidget(sellingPlansWidgetContainer);\n 267\n    });\n The functions listenToVariantChange() and listenToAddToCartForms() are implemented to track when a product variant is altered or when the product form is updated. The identification of the variant is crucial as it dictates which selling plan box should be displayed. For more information about how to find a variant, refer to our community post.\n The selling plan display in the cart\n If a customer selects a selling plan on the product page, then they should see that selection in the cart.\n Available selected selling plans are accessible through the selling_plan_allocation attribute of the line_item object. The following is an example:\n /customers/order.liquid\n 1 {% if line_item.selling_plan_allocation %}\n 2\n    <p class=\"selling-plan\">{{ line_item.selling_plan_allocation.selling_plan.name }}</p>\n 3 {% endif %}\n The selling plan selector\n Rather than just display the selected selling plan, you can give customers the option to add a new selling plan, or to remove or edit the current selling plan. To do this, you should implement a selling plan selector that lists out the available selling plans for the line item's variant, and reflects the currently selected selling plan.\n You can loop through the selling_plan_allocations attribute of the variant object associated with the line item (line_item.variant) to build out your selector options. You can compare the selected selling plan ID with the ID of the selling plan at the current index of the loop to make sure that the selector reflects the currently selected selling plan.\n To change the selling plan for a line item, you can use the /{locale}/cart/change.js endpoint of the Cart AJAX API.\n Example\n The following example outputs a selling plan selector:\n 1 <select name=\"selling-plan\" data-line=\"{{ forloop.index }}\" data-quantity=\"{{ line_item.quantity }}\">\n 2\n    <option value=\"\">One-time purchase</option>\n 3\n 4\n    {% for selling_plan_allocation in line_item.variant.selling_plan_allocations %}\n 5\n      <option\n 6\n        value=\"{{ selling_plan_allocation.selling_plan.id }}\"\n 7\n        {% if line_item.selling_plan_allocation.selling_plan.id == selling_plan_allocation.selling_plan.id %}selected=\"selected\"{% endif %}\n 8\n      >\n 9\n        {{ selling_plan_allocation.selling_plan.name }}\n 10\n      </option>\n 11\n    {% endfor %}\n 12 </select>\n The following example illustrates the concept of watching for a change in the selling plan selector and applying those changes through the /cart/change.js endpoint. It isn't completely functional.\n 1 const sellingPlanSelectors = document.querySelectorAll('[name=\"selling-plan\"]');\n 2\n 3 sellingPlanSelectors.forEach(function(element) {\n 4\n    element.addEventListener('change', function(event) {\n 5\n      const data = {\n 6\n        'line': event.target.dataset.line,\n 7\n        'quantity': event.target.dataset.quantity,\n 8\n        'id': event.target.value\n 9\n      }\n 10\n 11\n      fetch('/cart/change.js', {\n 12\n        method: 'POST',\n 13\n        headers: {\n 14\n          'Content-Type': 'application/json'\n 15\n        },\n 16\n        body: JSON.stringify(data)\n 17\n      })\n 18\n      .then(response => {\n 19\n        // Refresh page, or re-render cart\n 20\n        console.log(response);\n 21\n      })\n 22\n      .catch((error) => {\n 23\n        console.error('Error:', error);\n 24\n      });\n 25\n    });\n 26 });\n The checkout charge display in the cart\n Because pre-order and TBYB can change how much a customer has to pay up front, you should show them how much they'll be charged at checkout. You can calculate this amount using selling_plan.checkout_charge object.\n You can access a line item's checkout charge through its selling_plan_allocation.\n The following table outlines the types of checkout charges:\n Checkout charge type Description\n percentage A percent value representing the percentage amount of the full price that must be paid up front.\n price The price to be paid up front, in cents.\n Note\n You can't configure checkout charges for subscriptions. Because of this, subscriptions always have a value_type of percentage and value of 100.\n Example\n The following example outputs the appropriate line item price depending on whether the line item has a selling plan allocation, and what kind of selling plan it is.\n 1 {% if item.selling_plan_allocation %}\n 2\n    {%- assign checkout_charge = item.selling_plan_allocation.selling_plan.checkout_charge -%}\n 3\n 4\n    {% if checkout_charge.value_type == 'percentage' %}\n 5\n      {{ item.original_price | times: checkout_charge.value | divided_by: 100 | money }}\n 6\n    {% else %}\n 7\n      {{ checkout_charge.value | money }}\n 8\n    {% endif %}\n 9 {% else %}\n 10\n    {{ item.original_price | money }}\n 11 {% endif %}\n Customer order selling plan display\n When a customer selects a selling plan, they should see the name of that selection on the customer order page.\n The selected selling plan, if there is one, is accessible through the selling_plan_allocation attribute of the line_item object. The following is an example:\n /customers/order.liquid\n 1 {% if line_item.selling_plan_allocation %}\n 2\n    <p class=\"selling-plan\">{{ line_item.selling_plan_allocation.selling_plan.name }}</p>\n 3 {% endif %}\n Was this section helpful?",
                    "filename": "docs/themes/pricing-payments/preorder-tbyb/add-preorder-tbyb-to-your-theme/content.txt",
                    "start_index": 13337,
                    "end_index": 25629,
                    "start_line": 210,
                    "end_line": 859,
                    "max_line": 870,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product recommendations\n Media and images\n Gift cards\n Pricing and payments\n Delivery and fulfillment\n Migrating to Online Store 2.0\n Troubleshooting\n Theme Store\n Product merchandising\n To help merchants to provide an engaging product experience, Shopify has options for the following:\n Product variants: A simple organization of product options to help customers easily find and select their desired product.\n Product media: Offer an immersive experience and enable merchants to increase a customer's confidence in their product.\n Product recommendations: Enable customers to discover new products.\n Gift cards: An alternative payment method. You can add a recipient form to your gift card product page.\n Was this page helpful?",
                    "filename": "docs/themes/product-merchandising/content.txt",
                    "start_index": 0,
                    "end_index": 729,
                    "start_line": 1,
                    "end_line": 15,
                    "max_line": 15,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Verify that the sold out message or badge is displayed when applicable.\n Product page\n Run the following tests on your product page, on each of the product configurations outlined. For each of these tests, verify the following:\n Customers can add a selected variant to the cart\n Variant information changes dynamically when different variants are selected\n Customers are prevented from adding more than the available quantity of items to the cart\n Product configurations\n Single product (no variants)\n On sale product\n Product with one option\n Product with more than 1 option with different variant quantity inventories (out of stock variant, unavailable variant).\n Product with three options\n Product with 100 variants\n Product with no image\n Product with varying product media (image, vidoe, 3D model. AR, MP4)\n Product with unit price\n Tests\n Add a product title:\n A single word title (30 characters, no spacing)\n A multi-word title (30-60 characters)\n Verify that when variants are selected from drop-down menus, product details are updated dynamically:\n Variant prices\n Variant media\n Variant SKU\n Action buttons (disable Add to cart and dynamic checkout buttons on sold out and unavailable variants)\n Variant selectors (cross out or disable sold out and unavailable variants)\n Unit price\n Shop Pay Installments banner\n Local pickup banner\n Inventory quantity (if applicable)\n Product images\n No image\n Test the following aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n PNG image\n Image zoom (if applicable)\n Color swatches (if applicable)\n Option to disable swatches\n Clear instruction on how to upload custom swatches\n Product description\n Add multiple paragraphs (minimum 1000 characters)\n Add links:\n Internal link\n External link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Add images (images must display as they appear in the rich text editor)\n Verify that an error message appears when customers try to add more than the available quantity of items to the cart\n Blog page\n Run the following tests on your blog page. For each of these tests, verify the following:\n All blog posts in the collection are accessible\n Multiple blog post image ratios are supported\n Must support varying blog post image ratios\n Blog post information must be visible. This includes the title, excerpt, author, date, and comment count\n If available, blog filtering works as expected and combining filter tags doesn't break the page\n Test the way the grid responds to blog images of different aspect ratios, using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Test blog filtering (if applicable):\n Filter by a single-word tag (30 characters, no spacing)\n Filter by a long list of tags (20+ tags)\n Test a blog with many posts:\n Test pagination (if applicable)\n Verify that only five pages show on initial load\n Test the View more button (if applicable)\n Test infinite scrolling (if applicable)\n Blog post page (Article)\n Run the following tests on your blog post page.\n Add blog post content:\n Add multiple paragraphs (minimum 1000 characters)\n Add links:\n Internal link\n External link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Add images (images must display as they appear in the rich text editor)\n Add comments:\n Input comment text\n Submit the form\n Test error detection and handling\n Test the submission success message\n Verify that comments over a certain limit are paginated\n Test the following blog post image aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Cart page, modal, or drawer\n Run the following tests on your cart. For each of these tests, verify the following:\n All products in the cart are fully visible\n The customer must be able to update the product quantity\n Automatic discounts must update dynamically\n Add enough products to the cart to trigger scrolling\n Setting 0 for quantity should remove the product\n Verify that an error message appears when customers try to add more than the available quantity of items to the cart\n Automatic discount\n Cart notes\n Search page\n Run the following tests on your search page. For each of these tests, verify that search result attributes are fully visible.\n Verify that the number of results displayed on first load is limited\n Test pagination (if applicable):\n Pagination truncates on search results with five or more pages\n Test the View more button (if applicable)\n Test infinite scrolling (if applicable)\n Test filtering (if applicable)\n Test both list and grid view (if applicable)\n Test error detection and handling, for example, when no results are found\n Pages\n Run the following tests on a page that uses the generic page template. For each of these tests, verify that page content is fully visible.\n Add a page title:\n A single word title (30 characters, no spacing)\n A multi-word title (30-60 characters)\n Add multiple paragraphs (minimum 3000 characters)\n Add links:\n Internal link\n External link\n Link opens in the same window\n Link opens in a new window\n Link styling indicates that the text is clickable\n Add image \u2013 must display imagery as inputted in the RTE\n Repeat testing for all existing product templates\n Pages (contact form template)\n Run the following tests on a page that uses the contact form template. For each of these tests, verify that customers can send the merchant an email using the contact form.\n Input text\n Test mandatory fields, such as the message field\n Submit the form\n Test error detection and handling\n Test the submission success message\n Gift card page\n Run the following tests on the gift card page. For each of these tests, verify that the gift card code and store name or logo is fully visible.\n Add logo fallback text:\n Long store name (30-40 characters, no spaces)\n Long store name with hyphens\n Add a logo:\n Test the following logo aspect ratios using portrait and landscape:\n 16:9\n 4:3\n 3:2\n 1:1\n Transparent background on PNG image\n Logo scales appropriately\n Varying positions/alignments (if applicable)\n Gift card code must not be cut off\n 6. Link sharing\n Share a link to the store where you're testing your theme on various social media platforms. Verify that the sharing image appears. You can use tools like the Facebook sharing debugger and the Twitter card validator to perform this test.\n 7. Local pickup\n Test your local pickup banner in the following scenarios. Before you start, prepare your store to test local pickup.\n Variant 1 - available for pickup at five locations:\n Verify that the pickup banner appears\n When you click Check availability at other stores, verify that all locations are visible, and that you can scroll to see all location information\n Variant 2 - available for pickup at only one location:\n Verify that the pickup banner appears\n Verify that the Check availability at other stores text is updated to View store information\n Variant 3 - available for pickup at only two locations, and sold out one of those locations:\n Verify that the pickup banner appears, and indicates that the item is available or unavailable at one of the locations.\n Verify that the Check availability at other stores link is present\n Verify that clicking on Check availability at other stores brings up only two locations\n Variant 4 - only available at a location that doesn't offer pickup:\n Verify that the pickup banner is removed\n Variant 5 - sold out at all locations:\n Verify that the pickup banner is removed\n Verify that the Add to cart button is changed to Sold out\n Ensure the pickup banner changes dynamically when a new variant is selected\n 8. Unit pricing\n Test unit prices in your theme. Before you start, prepare your store to test unit pricing.\n Verify that unit prices change dynamically on variant change\n Verify that unit prices appear in the following locations:\n Product page\n Collection page product cards\n Cart drawer, page, or popup\n Customer order page\n 9. Rich media\n Test rich media in your theme. Before you start, prepare your store to test rich media.\n Verify 3D/AR behavior:\n Verify that you can view and move 3d models on desktop and mobile devices\n Verify that the View in your space button appears on mobile devices\n Verify that can view both AR objects on mobile devices\n Verify video behavior (YouTube, Vimeo, MP4):\n Verify that video controls are accessible\n Verify that you can mute and unmute videos\n Verify that you can play and pause videos\n Verify that variant display when the associated variant is selected\n Verify that rich media types don't break the product card layout of the collection page:\n YouTube\n Vimeo\n MP4\n 3D models\n 10. Selling plans\n Test selling plans in your theme. Before you start, prepare your store to test selling plans.\n Applied selling plans appear on the cart page\n Applied selling plans appear on the customer order page\n Was this section helpful?\n YesNo\n ON THIS PAGE\n 1. Home page\n 2. Header\n 3. Footer\n 4. Sections\n 5. Pages\n 6. Link sharing\n 7. Local pickup\n 8. Unit pricing\n 9. Rich media\n 10. Selling plans\n Updates & News\n Developer changelog",
                    "filename": "docs/themes/store/test-theme/checklist/content.txt",
                    "start_index": 13320,
                    "end_index": 22422,
                    "start_line": 353,
                    "end_line": 565,
                    "max_line": 565,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product recommendations\n Overview\n Related products\n Complementary products\n Media and images\n Theme Store\n Show related products on product pages\n Related products are products that are similar to a selected product. You can display potential substitutes to help customers discover other similar products they might like. These products should appear in a You might also like section on the product page.\n Adding the related products section to your product pages displays an automatically generated list of product recommendations.\n In this tutorial, you'll learn how to show related products in your theme.\n Resources\n To implement product recommendations, you'll use the following:\n The recommendations object\n The /{locale}/recommendations/products endpoint of the Product Recommendations API\n Recommendation logic\n The recommendation algorithm predicts the most relevant products based on the product that a customer is interacting with. The criteria that the algorithm uses depends on the merchant's online store. In general, it might take into account the following factors:\n Purchase history: Products that have historically been purchased together.\n Product description: Products with similar descriptions.\n Related collections: Products from collections that the current product is part of, excluding collections with handles all and frontpage.\n Recommendation algorithm criteria\n The criteria that's used depends on a merchant's online store, and the recommendation intent. The following outlines which criteria is used, and when:\n Criteria Application\n Purchase history\n and\n Product description Merchants with an English storefront.\n Purchase history only Merchants with a non-English storefront.\n Related collections All merchants when purchase history and product description recommendations aren't available.\n Tip\n To learn more about the recommendation logic limitations, refer to Limitations.\n The Shopify Search & Discovery app enables users to customize product recommendation and search results, which can impact results from storefront search and the Ajax Product Recommendations API. To learn about how these results can be impacted, visit the Shopify Help Center.\n Limitations\n The following list describes some limitations of the recommendation logic:\n You can't customize the recommendation algorithm to exclude specific products. However, you can choose which of the returned products to show with JavaScript.\n The recommendation algorithm doesn't use orders that have been imported from another store or ecommerce platform to generate product recommendations.\n Products that are out of stock or set to a price of 0, gift cards, and products in the visitor's cart aren't included in recommendations.\n UI guidelines\n The following best practices can help to make sure that you're displaying recommended products in a way that improves the customer experience:\n The recommendation algorithm associates up to ten products with each product, in order of relevance. For example, the first recommended product is more relevant than the tenth recommended product. For this reason, it's a good idea to limit your recommendations to four products for each product page to promote only the most relevant recommendations.\n Make sure that you load the proper image size for the product card.\n Because the recommendations are loaded asynchronously with JavaScript, you might want to add an empty state or not show the recommended products section at all. The placeholder is swapped with the actual recommended products after you load them.\n Use phrases such as \u201cYou might also like\u201d for the section header to explain to your customers why you're displaying the recommended products.\n Implementing product recommendations\n In this implementation, the section content builds the general display by looping through each product returned through the products attribute of the recommendations object. However, this object isn\u2019t populated when the section is initially rendered, so you need to use JavaScript to retrieve the populated section content through the section response of the Product Recommendations API.\n Example\n sections/product-recommendations.liquid\n 1 <div\n 2\n    class=\"product-recommendations\"\n 3\n    data-url=\"{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4&intent=related\"\n 4 >\n 5\n    {%- if recommendations.performed? and recommendations.products_count > 0 -%}\n 6\n      {% if recommendations.intent == 'related' %}\n 7\n        <h2>You may also like</h2>\n 8\n      {% elsif recommendations.intent == 'complementary' %}\n 9\n        <h2>Pair it with</h2>\n 10\n      {% endif %}\n 11\n 12\n      <ul>\n 13\n        {%- for product in recommendations.products -%}\n 14\n          <li class=\"product\">\n 15\n            <a href=\"{{ product.url }}\">\n 16\n              <img\n 17\n                class=\"product__img\"\n 18\n                src=\"{{ product.featured_image | image_url: width: 300, height: 300 }}\"\n 19\n                alt=\"{{ product.featured_image.alt }}\"\n 20\n              />\n 21\n 22\n              <p class=\"product__title\">{{ product.title }}</p>\n 23\n              <p class=\"product__price\">{{ product.price | money}}</p>\n 24\n            </a>\n 25\n          </li>\n 26\n        {%- endfor -%}\n 27\n      </ul>\n 28\n    {%- endif -%}\n 29 </div>\n 30\n 31 {% javascript %}\n 32\n    const handleIntersection = (entries, observer) => {\n 33\n      if (!entries[0].isIntersecting) return;\n 34\n 35\n      observer.unobserve(productRecommendationsSection);\n 36\n 37\n      const url = productRecommendationsSection.dataset.url;\n 38\n 39\n      fetch(url)\n 40\n        .then(response => response.text())\n 41\n        .then(text => {\n 42\n          const html = document.createElement('div');\n 43\n          html.innerHTML = text;\n 44\n          const recommendations = html.querySelector('.product-recommendations');\n 45\n 46\n          if (recommendations && recommendations.innerHTML.trim().length) {\n 47\n            productRecommendationsSection.innerHTML = recommendations.innerHTML;\n 48\n          }\n 49\n        })\n 50\n        .catch(e => {\n 51\n          console.error(e);\n 52\n        });\n 53\n    };\n 54\n 55\n    const productRecommendationsSection = document.querySelector('.product-recommendations');\n 56\n    const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});\n 57\n 58\n    observer.observe(productRecommendationsSection);\n 59 {% endjavascript %}\n 60\n 61 {% schema %}\n 62\n    {\n 63\n      \"name\": \"Product recommendations\",\n 64\n      \"settings\": []\n 65\n    }\n 66 {% endschema %}\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Resources\n Recommendation logic\n Limitations\n UI guidelines\n Implementing product recommendations\n Updates & News\n Developer changelog",
                    "filename": "docs/themes/product-merchandising/recommendations/related-products/content.txt",
                    "start_index": 0,
                    "end_index": 6760,
                    "start_line": 1,
                    "end_line": 170,
                    "max_line": 170,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product recommendations\n Overview\n Related products\n Complementary products\n Media and images\n Theme Store\n Show complementary products on product pages\n Complementary products are products that are often bought in addition to a selected product. They're often referred to as something that \u201cpairs well with\" the current product. You can display complementary products on the product page to help customers discover new products.\n In this tutorial, you'll learn how to show complementary products in your theme.\n Resources\n To implement product recommendations, you'll use the following:\n The recommendations object\n The /{locale}/recommendations/products endpoint of the Product Recommendations API\n Limitations\n Products that are out of stock or set to a price of 0, gift cards, and products in the visitor's cart aren't included in recommendations.\n UI guidelines\n The following best practices can help to make sure that you're displaying recommended products in a way that improves the customer experience:\n Complementary product recommendations should usually be placed near the top of the product page, typically in the product information section, near the original product image.\n The product recommendations API serves up to 10 complementary products for each product. We recommend showing 2-3 products by default, and paginating for additional products.\n Make sure that you load the proper image size for the product card.\n Because the recommendations are loaded asynchronously with JavaScript, you might want to add an empty state or not show the complementary products section at all. The placeholder is swapped with the actual complementary products after you load them.\n Use phrases such as \u201cPairs well with\u201d for the section header to explain to your customers why you're displaying the products.\n Implementing complementary products\n In this implementation, the section content builds the general display by looping through each product returned through the products attribute of the recommendations object. However, this object isn\u2019t populated when the section is initially rendered, so you need to use JavaScript to retrieve the populated section content through the section response of the Product Recommendations API.\n sections/product-recommendations.liquid\n 1 <div\n 2\n    class=\"product-recommendations\"\n 3\n    data-url=\"{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4&intent=related\"\n 4 >\n 5\n    {%- if recommendations.performed? and recommendations.products_count > 0 -%}\n 6\n      {% if recommendations.intent == 'related' %}\n 7\n        <h2>You may also like</h2>\n 8\n      {% elsif recommendations.intent == 'complementary' %}\n 9\n        <h2>Pair it with</h2>\n 10\n      {% endif %}\n 11\n 12\n      <ul>\n 13\n        {%- for product in recommendations.products -%}\n 14\n          <li class=\"product\">\n 15\n            <a href=\"{{ product.url }}\">\n 16\n              <img\n 17\n                class=\"product__img\"\n 18\n                src=\"{{ product.featured_image | image_url: width: 300, height: 300 }}\"\n 19\n                alt=\"{{ product.featured_image.alt }}\"\n 20\n              />\n 21\n 22\n              <p class=\"product__title\">{{ product.title }}</p>\n 23\n              <p class=\"product__price\">{{ product.price | money}}</p>\n 24\n            </a>\n 25\n          </li>\n 26\n        {%- endfor -%}\n 27\n      </ul>\n 28\n    {%- endif -%}\n 29 </div>\n 30\n 31 {% javascript %}\n 32\n    const handleIntersection = (entries, observer) => {\n 33\n      if (!entries[0].isIntersecting) return;\n 34\n 35\n      observer.unobserve(productRecommendationsSection);\n 36\n 37\n      const url = productRecommendationsSection.dataset.url;\n 38\n 39\n      fetch(url)\n 40\n        .then(response => response.text())\n 41\n        .then(text => {\n 42\n          const html = document.createElement('div');\n 43\n          html.innerHTML = text;\n 44\n          const recommendations = html.querySelector('.product-recommendations');\n 45\n 46\n          if (recommendations && recommendations.innerHTML.trim().length) {\n 47\n            productRecommendationsSection.innerHTML = recommendations.innerHTML;\n 48\n          }\n 49\n        })\n 50\n        .catch(e => {\n 51\n          console.error(e);\n 52\n        });\n 53\n    };\n 54\n 55\n    const productRecommendationsSection = document.querySelector('.product-recommendations');\n 56\n    const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});\n 57\n 58\n    observer.observe(productRecommendationsSection);\n 59 {% endjavascript %}\n 60\n 61 {% schema %}\n 62\n    {\n 63\n      \"name\": \"Product recommendations\",\n 64\n      \"settings\": []\n 65\n    }\n 66 {% endschema %}\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Resources\n Limitations\n UI guidelines\n Implementing complementary products\n Updates & News\n Developer changelog\n Partner blog",
                    "filename": "docs/themes/product-merchandising/recommendations/complementary-products/content.txt",
                    "start_index": 0,
                    "end_index": 4854,
                    "start_line": 1,
                    "end_line": 150,
                    "max_line": 150,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product recommendations\n Overview\n Related products\n Complementary products\n Media and images\n Theme Store\n Product recommendations\n Displaying recommended products to customers makes it easier for them to discover new products, and can help to increase online store sales.\n Before you add product recommendations to your theme, it's a good idea to get familiar with the following:\n Recommendation intents\n How to track recommendations\n To learn how to include recommendations in your theme, refer to Related products and Complementary products. You can also refer to Dawn's implementation.\n Recommendation intents\n Tailoring product recommendations across the customer's journey is a powerful way to help customers discover products. Recommendation intents are designed to recommend products using a targeted strategy.\n Shopify provides the following types of recommendation intents:\n Related products: Offer customers a mix of products that are similar to a product the customer is interacting with. An example is substitutable products that display in a You might also like section.\n Complementary products: Offer customers products that are complementary to a product the customer is interacting with. An example is add-on products that display in a Pair it with section.\n Only related recommendations are auto-generated by Shopify. Complementary recommendations need to be manually set up. Recommended products for each intent can be configured using the Shopify Search & Discovery app.\n Track recommendations\n To track your product recommendations in Shopify, you need to use the format for product URLs that's specified by the API. To learn more, refer to Tracking conversions for product recommendations.\n After you've implemented product recommendations, you can track how effective they are directly from the Analytics page in your Shopify admin. To learn more about product recommendation reports, refer to Product recommendation conversion over time.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Recommendation intents\n Track recommendations\n Updates & News\n Developer changelog\n Partner blog\n Engineering blog",
                    "filename": "docs/themes/product-merchandising/recommendations/content.txt",
                    "start_index": 0,
                    "end_index": 2126,
                    "start_line": 1,
                    "end_line": 30,
                    "max_line": 30,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Distribution\n Billing\n App Store\n Product offers\n A product offer is an additional sales opportunity that's displayed to customers before or after they complete checkout. This guide introduces pre-purchase product offers, and post-purchase product offers, and describes the available resources that you can use to build product offers in Shopify checkout.\n How it works\n You can build functionality in your app that enables merchants to provide the following experiences:\n Pre-purchase product offers\n Post-purchase product offers\n Pre-purchase product offers\n Shopify Plus\n Checkout UI extensions that render on the information and shipping and payment steps in checkout are available only to stores on a Shopify Plus plan.\n You can use a checkout UI extension to build a pre-purchase product offer. The following example shows a pre-purchase product offer that renders at the purchase.checkout.block.render target:\n Post-purchase product offers\n Beta\n Post-purchase checkout extensions are in beta and can be used without restrictions in a development store. To use post-purchase extensions on a live store, you need to request access.\n The post-purchase page appears after the order is confirmed, but before the Thank you page. You can use a post-purchase extension to add custom content such as the following:\n Example Description\n Upsell offers Prompt a customer to add more products to their initial order after they've completed payment.\n Survey requests Ask a customer to complete a survey after they've completed checkout.\n Feedback requests Ask a customer to complete a feedback form after they've completed checkout.\n Donation requests Ask a customer to submit a donation after they've completed checkout.\n Discount code offers Offer a customer additional discounts on products using a specific code.\n Loyalty sign-ups Ask a customer to join a rewards or points program.\n Important notifications Offer additional information that's valuable to customers.\n The following example shows a basic example of a post-purchase checkout extension:\n Getting started\n Follow these tutorials to get started with building pre-purchase and post-purchase experiences.\n Build a pre-purchase product offer\n Build a pre-purchase upsell offer that prompts the customer to add a product to their order.\n Getting started with post-purchase checkout extensions\n Create a basic example of a post-purchase checkout extension.\n Developer tools and resources\n Explore the following developer tools and resources to get familiar with building pre-purchase and post-purchase experiences.\n Pre-purchase\n Checkout UI extensions API reference\n Consult the API reference for checkout UI targets and their respective types.\n Components for checkout UI extensions\n Learn about the components that are available in checkout UI extensions.\n Checkout extension configuration\n Learn about the properties that you can configure in your checkout UI extension.\n UX guidelines for pre-purchase product offers\n Explore UX guidelines that you can refer to when building pre-purchase product offers.\n Post-purchase\n Post-purchase extension points API\n Consult the API reference for post-purchase extension points and their respective types.\n Components for post-purchase extensions\n Learn about the components that are available in post-purchase extensions.\n Post-purchase extensions configuration\n Learn about the properties that you can configure in your post-purchase checkout extension.\n JWT specification\n Learn how JWTs need to be structured in order to be used in post-purchase checkout extensions.\n UX guidelines for post-purchase product offers\n Explore UX guidelines that you can refer to when building post-purchase product offers.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n How it works\n Getting started\n Developer tools and resources",
                    "filename": "docs/apps/checkout/product-offers/content.txt",
                    "start_index": 0,
                    "end_index": 3818,
                    "start_line": 1,
                    "end_line": 60,
                    "max_line": 60,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Overview\n Getting started\n Create a subscription\n UX guidelines\n Payments\n Billing\n App Store\n Post-purchase product offers\n Beta\n Post-purchase checkout extensions are in beta and can be used without restrictions in a development store. To use post-purchase extensions on a live store, you need to request access.\n A post-purchase product offer is an additional sales opportunity that's displayed to customers immediately after they complete checkout. This guide introduces post-purchase checkout extensions, which allow merchants to add a post-purchase page directly into the Shopify checkout.\n How it works\n The post-purchase page appears after the order is confirmed, but before the Thank you page. You can use a post-purchase extension to add custom content such as the following:\n Example Description\n Upsell offers Prompt a customer to add more products to their initial order after they've completed payment.\n Survey requests Ask a customer to complete a survey after they've completed checkout.\n Feedback requests Ask a customer to complete a feedback form after they've completed checkout.\n Donation requests Ask a customer to submit a donation after they've completed checkout.\n Discount code offers Offer a customer additional discounts on products using a specific code.\n Loyalty sign-ups Ask a customer to join a rewards or points program.\n Important notifications Offer additional information that's valuable to customers.\n Customer flow\n The following diagram illustrates a high-level customer flow for an app that uses a post-purchase checkout extension:\n The customer goes to the payment information page.\n The page loads the Checkout::PostPurchase::ShouldRender extension point.\n Optional: The extension makes a network call to your app server to obtain any data needed for the post-purchase page. The extension can store data in the browser's local storage, speeding up the time to the first render.\n The extension returns the result of render to the payment information page. For render to be true, all the required conditions must be met. For example, the customer's credit card must be vaulted before the post-purchase offer is displayed.\n The customer completes checkout.\n If render returns true, then the post-purchase page loads the Checkout::PostPurchase::Render extension point. Any stored data is directly available to the render extension point. You app needs to call done to redirect the customer to the Order status page.\n App Bridge Checkout\n Post-purchase checkout extensions use App Bridge Checkout, a technology that hosts your extension on Shopify's CDN and integrates directly into the Shopify checkout. App Bridge Checkout includes a set of consistent UI components, targets, and development tools.\n You create an extension by writing in Vanilla JS or React, and deciding whether to use TypeScript. Shopify securely hosts and renders your user interface in the client. When the extension appears to the customer in the checkout, it includes both app-provided and Shopify-provided interface elements, as shown in the following diagram:\n Getting started\n Follow this tutorial series to learn how to build post-purchase experiences.\n Tutorial 1: Getting started with post-purchase checkout extensions\n Create an upsell offer using a post-purchase checkout extension.\n Tutorial 2: Create a post-purchase subscription\n Add subscription products to your post-purchase checkout extension.\n Developer tools and resources\n Explore the following developer tools and resources to get familiar with building post-purchase experiences.\n Post-purchase extension points API\n Consult the API reference for post-purchase extension points and their respective types.\n Components for post-purchase extensions\n Learn about the components that are available in post-purchase extensions.\n Post-purchase extensions configuration\n Learn about the properties that you can configure in your post-purchase checkout extension.\n JWT specification\n Learn how JWTs need to be structured in order to be used in post-purchase checkout extensions.\n UX guidelines for post-purchase product offers\n Explore UX guidelines that you can refer to when building post-purchase product offers.\n Limitations and considerations\n The following limitations and considerations for post-purchase checkout extensions apply:\n Area Context\n Payment provider Third-party payment providers that require the customer\u2019s CVN/CVV to be retained aren't supported. This might include, but isn't limited to, payment providers such as Braintree, Payflow Pro, PayPal Payments Pro, and Eway.\n Additional payment methods The post-purchase page won't be surfaced in the following scenarios:\n The customer chooses to check out with an installment service or a wallet service (such as Klarna, Affirm, AfterPay, Apple Pay, Amazon Pay, or Google Pay).\n The initial purchase was made with a gift card or any payment method other than a credit card.\n Purchase events Third-party analytic services that use the Shopify Pixel API (such as Google Analytics, Facebook, Pinterest and Snap) report only the purchase event and value for the initial purchase.\n Analytics Third-party analytics services that use the ScriptTag REST Admin API or GraphQL Admin API resource, or Additional Scripts have incomplete conversion data, because they're only triggered on the Order status page.\n Duties and support for multiple currencies Post-purchase upsell offers won\u2019t be surfaced on orders with duties and multiple currencies.\n Order creation delays In scenarios such as flash sales where the Shopify Platform is under extreme load, our system might optimize to capture orders but briefly delay the order creation step for a fast and seamless buyer experience. In these scenarios, post-purchase pages won't be surfaced, even if the request for the post-purchase page was properly made.\n Multiple apps Merchants with multiple apps that have the post-purchase checkout extension need to select which app appears on the post-purchase page. You can use a banner during app onboarding to let merchants know that they can select your app as the default post-purchase app in the Shopify admin checkout settings.\n Fulfillment holds Shopify places a hold on fulfillment for all orders undergoing a post purchase cross-sell flow. Holds are released either when the customer visits the Order status page, or after a set amount of time, if the customer doesn't complete the post-purchase flow.\n \n If the customer doesn't complete the flow (for example, the customer closes the browser before actioning the post-purchase upsell offer), then the fulfillment hold is lifted one hour after submission of the initial checkout. Fulfillment holds are only supported using the FulfillmentOrder resource.\n Interaction with the Order status page The post-purchase page shouldn't be used as a replacement for the Order status page. For more information, refer to the customer flow.\n API versioning The post-purchase checkout extension APIs aren't versioned and don't follow the Shopify API versioning quarterly release schedule.\n Orders without a shipping address If the customer's checkout results in the creation of an order without a shipping address, then you can't add a subscription to the order using post-purchase. For example, a customer might have bought only digital products, which doesn't require a shipping address.\n \n Similarly, a customer might choose local pickup as their delivery method, which also doesn't require a shipping address. You can determine in advance whether a shipping address exists by viewing the payment step within the ShouldRender extension point. If the destinationCountryCode input field is null, then no shipping address is set.\n Orders for local delivery Post-purchase upsell offers won\u2019t be surfaced on orders for local delivery.\n Minimum order price Orders need to be $0.50 or more to qualify for post-purchase offers.\n Accepted offers A customer can accept a maximum of two post-purchase offers for each checkout.\n Number of post-purchase pages You can create only one post-purchase page. However, because a post-purchase extension is a single-page app, you can paginate the single page to create multiple pages.\n Sales channel Orders need to be placed through the Online Store sales channel to qualify for post-purchase upsells. Other sales channels won't render post-purchase upsell pages.\n Next steps\n Get started building a post-purchase checkout extension.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n How it works\n Getting started\n Developer tools and resources\n Limitations and considerations\n Next steps",
                    "filename": "docs/apps/checkout/product-offers/post-purchase/content.txt",
                    "start_index": 0,
                    "end_index": 8589,
                    "start_line": 1,
                    "end_line": 85,
                    "max_line": 85,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Delivery and shipping\n Product offers\n Overview\n Pre-purchase\n Overview\n Build a pre-purchase offer\n UX guidelines\n Post-purchase\n Payments\n Thank you and Order status\n App Store\n UX guidelines for pre-purchase product offers\n Shopify Plus\n Checkout UI extensions that render on the information and shipping and payment steps in checkout are available only to stores on a Shopify Plus plan.\n This guide introduces UX guidelines for adding pre-purchase product offers to checkout.\n Placement\n Choosing the right target is key to providing a good experience.\n Before you start building, decide whether you want your product offer to render at a static target, a dynamic target, or whether you'll support both. To learn more about target types, refer to the target API reference.\n This product offer example uses the Checkout::Dynamic::Render[OrderSummary4] target for the following reasons:\n The target keeps the line items, discounts, and money lines together, which makes it easy for customers to scan their order summary.\n A product offer is considered secondary content, and should therefore be placed outside of the order summary.\n Note\n On mobile, the order summary area is collapsed by default. The UI won't display the product offer until the customer expands the order summary.\n Components\n The components to create a product offer depends on the extension's possible states.\n The product offer use case can have the following states:\n Loading\n Loaded (default)\n Adding\n Added\n Note\n Added doesn't need a success banner. The addition of the item to the order summary is confirmation that the item was successfully added to the order.\n You can use the following components to create the states:\n Components list for the product offer use case\n Component Preview Tips\n Divider Because the product offer will likely display in a core checkout feature such as contact information or order summary line items, include divider lines to help separate the product offer from the order summary.\n SkeletonText To keep placement from shifting when the content loads, try to reflect the actual content\u2019s dimensions.\n SkeletonImage\n Image Keep the thumbnail size the same as the thumbnail in the order summary to keep the layout consistent.\n Heading If possible, allow merchants to customize the heading content.\n Text\n Text\n Button Use secondary buttons here, reserving the primary button for the main call to actions like Pay now and Next step.\n Banner Use banners to communicate error states.\n Layout\n When you use a nested layout, you'll need only the following structural components:\n Components list for the product offer use case\n Component Preview Tips\n BlockStack You can nest BlockStack components either with themselves or with other components.\n InlineLayout You can nest Inline components with themselves or with other components.\n BlockStack\n Use the BlockStack component to stack elements on top of each other vertically.\n Nesting BlockStack\n Note\n BlockStack and BlockLayout components are similar to each other. BlockLayout enables you to specify different row sizes. With BlockStack, you don't need to do that.\n Set spacing between the divider and the content to loose, for consistency with the rest of checkout\u2019s spacing. Set the spacing between the heading and the line item content to base.\n To address different spacing values, you can nest a BlockStack inside of another BlockStack component.\n InlineLayout\n To display products horizontally, use InlineLayout, and set the spacing between elements to base.\n UX guidelines\n Adhere to the following guidelines when you're designing a product offer checkout UI extension, so that you can help merchants gain customer trust and provide a great checkout experience:\n Only show two product offers at a time\n Adding more than two offers can overwhelm customers, making it difficult for them to choose a product.\n Let merchants personalize product offers\n Customers are more likely to respond positively to offers that relate to their shopping journey or to the items in their cart.\n Only show necessary information\n Make it easy for customers to process offer information by only showing what's most relevant. For example, if supporting information like a product description is required, then progressively reveal it to customers at strategic moments.\n Next steps\n Learn how to offer customers additional products at checkout that they can add to their order.\n Explore UX guidelines for the entire checkout experience.\n For general best practices for developing apps, refer to Best practices for building Shopify apps.\n For practical guidance on how to design a user interface for the Shopify admin, refer to Shopify's App Design Guidelines.\n Get familiar with Polaris accessibility and content guidelines.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Placement\n Components\n Layout\n UX guidelines",
                    "filename": "docs/apps/checkout/product-offers/pre-purchase/ux-guidelines/content.txt",
                    "start_index": 0,
                    "end_index": 4860,
                    "start_line": 1,
                    "end_line": 80,
                    "max_line": 80,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                }
            ]
        },
        "mmr_code_snippets_initial": [
            {
                "code": "if (recommendedUpsells) {\n      Promise.all(\n        cartItemsId.map((id) =>\n          platform.products.getRecommendedProducts({\n            productIdToRecommendFrom: id,\n            limit: 8,\n            intent: upsellRecommendationIntent,\n          }),\n        ),\n      ).then((products) => {\n        if (cancelled.isCancelled) return;\n\n        const recommendedProduct = (uniqBy(\n          reduce(products, (acc: any, productArray: any) => [...acc, ...productArray], []),\n          'id',\n        ) as unknown) as Product[];\n        const filteredRecommendedProduct = showUpsellItemsAlreadyInCart\n          ? [...recommendedProduct]\n          : recommendedProduct.filter((item) => !cartItemsId.includes((item as any).id));\n\n        //Remove products that can not be added to the cart\n        const availableProducts = filteredRecommendedProduct.filter((product: any) => {\n          if (!product?.available) return false;\n\n          //product.available does not check variants so we have to filter them seperately otherwise\n          //out of stock variants could potentially show\n          product.variants = product.variants.filter((p: any) => p.available);\n\n          return true;\n        });\n\n        setUpsells(availableProducts);\n      });\n    }",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 11335,
                "end_index": 12588,
                "start_line": 268,
                "end_line": 391,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "media: [\n    {\n      alt: null,\n      id: 30365597368579,\n      position: 1,\n      preview_image: {\n        aspect_ratio: 1.0,\n        height: 1000,\n        width: 1000,\n        src: 'https://cdn.shopify.com/s/files/1/0642/9435/5203/products/campstool-1.jpg?v=1651950743',\n      },\n      aspect_ratio: 1.0,\n      height: 1000,\n      media_type: 'image',\n      src: 'https://cdn.shopify.com/s/files/1/0642/9435/5203/products/campstool-1.jpg?v=1651950743',\n      width: 1000,\n    },\n    {\n      alt: null,\n      id: 30365597401347,\n      position: 2,\n      preview_image: {\n        aspect_ratio: 1.0,\n        height: 1000,\n        width: 1000,\n        src: 'https://cdn.shopify.com/s/files/1/0642/9435/5203/products/campstool-2.jpg?v=1651950743',\n      },\n      aspect_ratio: 1.0,\n      height: 1000,\n      media_type: 'image',\n      src: 'https://cdn.shopify.com/s/files/1/0642/9435/5203/products/campstool-2.jpg?v=1651950743',\n      width: 1000,\n    },\n  ],\n  requires_selling_plan: false,\n  selling_plan_groups: [\n    {\n      app_id: 'UpCart Preview :)',\n      id: 'abc123',\n      name: 'Subscribe & Save 20%',\n      options: [{ name: 'Deliver every', position: 1, values: ['week'] }],\n      selling_plans: [\n        {\n          id: 123,\n          name: 'Weekly subscription',\n          description: '',\n          options: [{ name: 'Deliver every', position: 1, value: 'week' }],\n          price_adjustments: [],\n          recurring_deliveries: true,\n        },\n      ],\n    },\n  ],\n}",
                "filename": "web/src/@templates/CartEditor/platform/preview/products/fake-products.ts",
                "start_index": 3137,
                "end_index": 4622,
                "start_line": 64,
                "end_line": 559,
                "max_line": 559,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "getTriggeredUpsells =",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 1949,
                "end_index": 1970,
                "start_line": 54,
                "end_line": 54,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<Button\n                    primary\n                    size=\"large\"\n                    url=\"https://apps.shopify.com/upcart-cart-builder?source=aftersell-app-upcart-landing-page\"\n                    external\n                  >\n                    {t('Claim free trial') as string}\n                  </Button>\n                  <LegacyStack alignment=\"center\" spacing=\"extraTight\">\n                    <Reviews title={''} />\n                    <p style={{ fontSize: '18px', fontWeight: 'bolder', paddingBottom: '2px', marginLeft: '4px' }}>\n                      5.0 (500+ Reviews)\n                    </p>\n                  </LegacyStack>\n                  <br />\n                </LegacyStack>\n              </LegacyStack>\n\n              <div className={styles.mainImage}>\n                <img src=\"https://i.ytimg.com/vi_webp/P3xyRIPRh6A/maxresdefault.webp\" />\n              </div>\n            </div>\n          </Layout.Section>\n          <Layout.Section fullWidth>\n            <LegacyStack vertical spacing=\"extraLoose\">\n              <LegacyStack distribution=\"fillEvenly\">\n                <div className={styles.contentImage}>\n                  <img src={upCartBenefitsMap[0].postPurchaseUpsellImage} />\n                </div>\n                <LegacyStack vertical>\n                  <Heading>\n                    <h3 style={{ fontSize: '20px', fontWeight: 'bold', marginTop: '5px' }}>\n                      {upCartBenefitsMap[0].postPurchaseUpsell}\n                    </h3>\n                  </Heading>\n                  <LegacyStack vertical>\n                    <CheckmarkBenefit benefit=\"One Click Upsell Funnels\" />\n                    <CheckmarkBenefit benefit=\"Deep offer targeting with triggers\" />\n                    <CheckmarkBenefit benefit=\"AI recommended offers\" />\n                    <CheckmarkBenefit benefit=\"A/B test offers\" />\n                  </LegacyStack>\n                </LegacyStack>\n              </LegacyStack>\n              <LegacyStack distribution=\"fillEvenly\">\n                <LegacyStack vertical>\n                  <Heading>\n                    <h3 style={{ fontSize: '20px', fontWeight: 'bold', marginTop: '5px' }}>\n                      {upCartBenefitsMap[1].thankYouPage}\n                    </h3>\n                  </Heading>\n                  <LegacyStack vertical>\n                    <CheckmarkBenefit benefit=\"Product recommendations & storewide discount popup\" />\n                    <CheckmarkBenefit benefit=\"FAQs & reviews\" />\n                    <CheckmarkBenefit benefit=\"Images and videos\" />\n                  </LegacyStack>\n                </LegacyStack>\n                <div className={styles.contentImage}>\n                  <img src={upCartBenefitsMap[1].thankYouPageImage} />\n                </div>\n              </LegacyStack>\n              <LegacyStack distribution=",
                "filename": "web/src/@templates/AfterSellAd/AfterSellAd.tsx",
                "start_index": 2946,
                "end_index": 5780,
                "start_line": 79,
                "end_line": 139,
                "max_line": 163,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "(preview ? upsellHandlesToFetch.splice(0, 20) : upsellHandlesToFetch).splice(0, 500).map",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 7728,
                "end_index": 7816,
                "start_line": 192,
                "end_line": 192,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "useEffect(() => {\n    /**\n     * Remove the add-on product if all other products in the cart are removed.\n     *\n     * Similar logic used to be handled in the empty cart component, but this caused the cart\n     * to incorrectly empty when going back in the browser due to HTML caching of the Liquid-rendered\n     * upcartPreloadedCart.\n     */\n    if (!hasFetchedCart) return; // prevent clearing cart based on stale cart\n    const isEmptyCartWithLeftoverAddonProduct = cartIsVisuallyEmpty && hiddenCartItems.length > 0;\n    if (isEmptyCartWithLeftoverAddonProduct) {\n      platform.cart.clearCart().then(() => {\n        refetchCart();\n      });\n    }\n  }, [platform, refetchCart, cartIsVisuallyEmpty, hiddenCartItems, hasFetchedCart]);\n\n  useEffect(() => {\n    if (cartIsVisuallyEmpty) {\n      sessionStorageEngine.unset(['announcement_module_time']);\n    }\n  }, [cartIsVisuallyEmpty]);\n\n  const announcementModuleIfActive = useMemo(() => {\n    if (!settings.upcartEditorSettings.announcementModule) return null;\n    return <AnnouncementModule platform={platform} />;\n  }, [settings, platform]);\n\n  const upsellModuleMarkupIfActive = useMemo(() => {\n    if (!settings.upcartEditorSettings.upsellsModule) return null;\n    return (\n      <UpsellsModule\n        preview={preview || false}\n        platform={platform}\n        cart={cartToShow}\n        cartIsLoading={cartIsLoading}\n        refetchCart={refetchCart}\n      />\n    );\n  }, [settings, cartToShow, cartIsLoading, refetchCart, platform, preview]);\n\n  const { totalAfterAllDiscounts } = useCartTotal({ cart });\n\n  return (\n    <>\n      <GlobalStyles platform={platform} />\n      <div\n        id=\"CartPopup\"\n        className={`upcart-cart ${styles.CartPreview} ${styles['CartPreview__' + settings.upcartSettings.cartPosition]}\n      ${styles['CartPreview__position-' + styling.position]}\n        UpcartDesignSettings__backgroundColor ${platform.options.forceAlwaysOpen ? styles.active : ''}`}\n        style={\n          settings.upcartSettings.disableSticky\n            ? { overflowY: 'auto', height: styling.height }\n            : { height: styling.height }\n        }\n        // This is needed to allow the cart to scroll on mobile for some themes.\n        // See Linear issue BEAM-1504 for more details.\n        data-scrollable\n      >\n        {cartIsVisuallyEmpty ? (\n          <EmptyCart\n            refetchCart={refetchCart}\n            platform={platform}\n            cart={cartToShow}\n            closePopup={platform.eventHandlers.onCloseClick}\n            isAddingItemThatCausedCartToOpen={isAddingItemThatCausedCartToOpen}\n          />\n        ) : (\n          <div\n            className={clx(styles.CartPreview__card, {\n              [styles.CartPreview__card_nonSticky]: settings.upcartSettings.disableSticky,\n            })}\n          >",
                "filename": "web/storefront/src/modules/CartPopup/Cart.tsx",
                "start_index": 12884,
                "end_index": 15689,
                "start_line": 107,
                "end_line": 477,
                "max_line": 521,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "async (upsellItem) =>",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 2095,
                "end_index": 2116,
                "start_line": 57,
                "end_line": 57,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": ", [cartItems, upsellItems, showUpsellItemsAlreadyInCart, platform.products, preview])",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 6857,
                "end_index": 6942,
                "start_line": 175,
                "end_line": 175,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "{\n        //skip empty upsells\n        if (\n          (upsellItem.upsell.type === 'Product' && upsellItem.upsell?.products?.length === 0) ||\n          (upsellItem.upsell.type === 'Collection' && !upsellItem.upsell.collection)\n        )\n          return;\n\n        let atLeastOneTrigger = false;\n\n        if (upsellItem.trigger.on === 'all' || preview) {\n          atLeastOneTrigger = true;\n        } else {\n          //2.1 Search through every trigger to see if there is a match\n\n          if (upsellItem.trigger.selection.type === 'Product') {\n            upsellItem.trigger.selection.products.forEach((trigger) => {\n              const isTriggered = cartItems.some((cartItem) => {\n                let triggerId = trigger.id?.split('/')[4];\n                if (Number(cartItem.product_id) === Number(triggerId)) {\n                  // When the variants array is missing, we trigger on any variant for the product\n                  if (!trigger.variants) {\n                    return true;\n                    // when variants array is present, we trigger only on the variants specified\n                  } else if (\n                    //We need to check for both productId syntax since our storage is mixed\n                    trigger.variants.includes('gid://shopify/ProductVariant/' + cartItem.variant_id.toString()) ||\n                    trigger.variants.includes(cartItem.variant_id.toString())\n                  ) {\n                    return true;\n                  }\n                }\n                return false;\n              });\n              if (isTriggered) {\n                atLeastOneTrigger = true;\n              }\n            });\n          } else if (upsellItem.trigger.selection.type === 'Collection') {\n            const products = await platform.products.getProductByCollection({\n              handle: upsellItem.trigger.selection.collection.handle,\n            });\n\n            products.forEach((trigger: any) => {\n              const isTriggered = cartItems.some((cartItem) => {\n                let triggerId = trigger.id?.toString().replace('gid://shopify/Product/', '');\n                if (Number(cartItem.product_id) === Number(triggerId)) {\n                  return true;\n                }\n                return false;\n              });\n              if (isTriggered) {\n                atLeastOneTrigger = true;\n              }\n            });\n          }\n        }\n\n        //2.2 Expand each upsell product into seperate upsells",
                "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                "start_index": 2117,
                "end_index": 4576,
                "start_line": 3,
                "end_line": 115,
                "max_line": 412,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "return items\n      .map(({ upsell }) => {\n        if (upsell) {\n          return (\n            <div className={`${styles.PreviewCarousel__item} DesignSettings__cartAccentColor`} key={upsell.shortId}>\n              <LegacyCard>\n                <LegacyStack spacing=\"loose\" alignment=\"center\" wrap={false}>\n                  <LegacyStack.Item>\n                    <div className={styles.PreviewCarousel__itemImage}>\n                      <img src={upsell.image} alt={upsell.title} title={upsell.title} />\n                    </div>\n                  </LegacyStack.Item>\n                  <LegacyStack.Item fill>\n                    <div className={`${styles.PreviewCarousel__itemTitle}`}>\n                      <Text variant=\"bodyMd\" as=\"span\" fontWeight=\"semibold\">\n                        {upsell.title}\n                      </Text>\n                      <span className={`${styles.PreviewCarousel__itemPrice}`}>\n                        {!!parseInt(upsell.compareAtPrice) && (\n                          <span className={styles['PreviewCarousel__itemPrice--discount']}>\n                            {formatMoney(upsell.compareAtPrice, currencyFormat)}\n                          </span>\n                        )}\n                        {formatMoney(upsell.price, currencyFormat)}\n                      </span>\n                    </div>\n                    <div className={`${styles.PreviewCarousel__button} DesignSettings__button`}>\n                      <div className={styles.PreviewCarousel__variationProduct}>\n                        <select title=\"productVariant\">\n                          <option>Variant #1</option>\n                          <option>Variant #2</option>\n                          <option>Variant #3</option>\n                        </select>\n                        <div className={styles.PreviewCarousel__icon}>\n                          <Icon source={SelectArrowIcon} />\n                        </div>\n                      </div>\n                      <CustomButton>{buttonText ?? 'Add to cart'}</CustomButton>\n                    </div>\n                  </LegacyStack.Item>\n                </LegacyStack>\n              </LegacyCard>\n            </div>\n          );\n        }\n      })\n      .filter((upsell) => upsell);\n  }, [buttonText, currencyFormat, items]);",
                "filename": "web/src/@components/PreviewCarousel/PreviewCarousel.tsx",
                "start_index": 817,
                "end_index": 3108,
                "start_line": 21,
                "end_line": 68,
                "max_line": 105,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "reranked_doc_snippets_initial": [
            {
                "code": "# Specification: Subscription Upgrades\n\n## Editor\n\nThere should be a module in the editor with:\n\n- Name: \"Subscription Upgrades\"\n- Icon: Repeat Order\n- Default status: disabled\n- Settings:\n  - \"Prevent downgrades\"\n    - Help text: \"If enabled, customers will not be allowed to downgrade from a subscription to one-time purchase. Caution: this may increase cart abandonment.\"\n    - Type: checkbox\n    - Default: disabled\n\n## Cart\n\n> If the subscription upgrades module is disabled in the editor, the cart should skip all subscription upgrade functionality.\n>\n> The following cart specification is applicable only if the subscription upgrades module has been enabled in the editor.\n\n### Behaviour\n\nThe cart frontend for subscription upgrades should be isolated to an area below each line item. This area can include content, or can be omitted if there is nothing to show. If the area includes content, then the area should have:\n\n- Public CSS class: `.upcart-subscription-upgrade-section`\n- Styling: full-width of line item\n\nThe content of each subscription upgrade area should be independent of the content for the subscription areas for any other line items.\n\nThe content of the subscription upgrade area should be as follows:\n\nA. For **one-time purchase** line items:\n\n- If the item cannot be sold as a subscription, nothing should be shown.\n- If the item can be sold as a subscription:\n  - There should be a button with:\n    - Content: \"Upgrade to \\_\\_\\_\\_\", where \\_\\_\\_\\_ is the name of the first selling plan group for the item\n    - When clicked:\n      1. Show a loading spinner instead of text, and disable the button\n      2. Change the item to be a subscription with the first selling plan of the first selling plan group. The line item should have the property `__upcartSubscriptionUpgrade: \"true\"`\n    - Styling: full width of area, match to other buttons in cart\n    - Public CSS class: `.upcart-subscription-upgrade-button`\n\nB. For **subscription** line items:\n\n- There should be a dropdown with:\n  - Content: the name of the current selling plan\n  - Options:\n    - (OPTIONAL) A group with:\n      - Title: \"Full price\"\n      - Options:\n        - \"One-time purchase\"\n      - Condition: this group should be included if the \"Prevent downgrades\" setting is disabled AND the item does not _require_ a selling plan (i.e., it can be sold as a one-time purchase)\n    - A group for each possible selling plan group for the item with:\n      - Title: the name of the selling plan group\n      - Options: the names of the possible selling plans in the group for the item\n  - When selected:\n    1. Show a loading spinner overlayed on the dropdown and disable the dropdown\n    2. Change the selling plan of the item to the selected selling plan. If \"One-time only\" was selected, then remove the selling plan from the item to change it to a one-time purchase. The line item should have the property `__upcartSubscriptionEdit: \"true\"`\n  - Styling: full width of area, match to other dropdowns in cart\n  - Public CSS class: `.upcart-subscription-upgrade-dropdown`\n\nWhen the current purchase option for a line item changes, the content of the subscription upgrade area should be updated to match the new purchase option.\n\n### Edge Cases and Clarifications\n\n- The content of the subscription upgrade area does not depend on _how_ the purchase option was selected. For example, the subscription upgrade area content for an item that was added to the cart as a subscription should be the same as the content for an item that was upgraded from a one-time purchase to a subscription in-cart.\n- When selling plans are being loaded for a product, there should be no content in the subscription upgrade area. Before the selling plans are loaded, we can't fully decide what content to show so it's fine to show nothing.\n- When the selling plan of an item is changed, the quantity of the item should remain constant. If you don't provide a quantity to the AJAX API when changing a line item, then the quantity of the line item will be set to 1 which should be avoided.\n- Selling plans that do not apply to the selected variant for a line item should be ignored. It is possible to have selling plans that apply only to specific variants of a product. In cases where none of the selling plans from a selling plan group apply to the variant for the line item, the selling plan group should be ignored. An ignored group should not be listed in the dropdown (because it would be an empty section) and it should not be used for text of the upgrade button (because it would have no selling plan to select).",
                "filename": "docs/subscription-upgrades.md",
                "start_index": 0,
                "end_index": 4584,
                "start_line": 1,
                "end_line": 71,
                "max_line": 71,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "---\nid: 3vst4bcr\ntitle: Discount Codes Module\nfile_version: 1.1.3\napp_version: 1.18.31\n---\n\n# Required background information\n\n## Discount types\n\nThere are two types of discounts: **automatic discounts** and **discount codes**.\n\n- **Automatic discounts** are applied to a cart or checkout automatically when the discount criteria are met.\n\n- **Discount codes** must be manually typed in by the customer. They stay active until the customer either removes the code, enters a different conflicting discount code, or changes their cart/checkout so that the discount is not longer applicable.\n\nThis module is specifically for **discount codes**. We do not have to worry about **automatic discounts** because they will work in the cart by default and they do not require any user interaction.\n\n## Discount targets\n\nA discount can be used to reduce the cost of **product(s)**, **order**, or **shipping**.\n\n- **Product discounts** reduce the price of one or more products and are shown as a reduction on individual line items.\n\n- **Order discounts** reduce the price of the order as a whole and are shown as a reduction on the overal price.\n\n- **Shipping discounts** reduce the price of shipping.\n\n# Read and write discount codes\n\n## Read discount codes\n\nWe read discount codes using the `cart.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:78:24:26:`    const cart: Cart&lt;CartItemWithoutCompareAtPrice&gt; = await fetch(getShopifyRoutesRoot() + &#39;cart.js&#39;).then((res) =&gt;`\"/> Ajax API endpoint.\n\nAn applied discount code will be returned from the API as part of either the `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> or the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/>. The `cart_level_discount_applications`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:351:1:1:`  cart_level_discount_applications: DiscountApplication[];`\"/> are for order discounts and the `line_level_discount_allocations`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:568:1:1:`  line_level_discount_allocations: CartItemLineLevelDiscountAllocation[];`\"/> are for product discounts.\n\nThese discount applications will include both **automatic discounts** and **discount codes**. We can distinguish between these using the `type`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:460:1:1:`  type: &#39;discount_code&#39; | &#39;&#39;;`\"/> field of the `DiscountApplication`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:446:4:4:`export interface DiscountApplication {`\"/>.\n\n## Apply a discount code\n\n<br/>\n\nWe apply a discount code by making a request from the storefront to the route `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/>.\n\nThe `discount/${discountCodeEncoded}`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/discounts/discounts.ts:25:11:15:`    await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);`\"/> route is intended by Shopify to be used for [shareable discount links](https://help.shopify.com/en/manual/discounts/managing-discount-codes#promote-a-discount-using-a-shareable-link). Normally a customer would navigate to the link directly in their browser and would be redirected to the storefront. We are using it in a non-standard way by making a background network request.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n23         await fetch(`${getShopifyRoutesRoot()}discount/${discountCodeEncoded}`);\n```\n\n<br/>\n\nAfter applying a discount code, we refetch the cart to check if the discount was successfully applied and to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/DiscountCodeModule/DiscountCodeModule.tsx\n\n```tsx\n23           await platform.discounts.attemptApplyDiscountCode({ discountCode: discountCodeToApply });\n24           const updatedCart = await refetchCart();\n25\n26           const discountApplications = getAllUniqueDiscountApplications(updatedCart);\n27           const isValid = discountApplications.some(\n28             (discountApplication) => discountApplication.title === discountCodeToApply,\n29           );\n```\n\n<br/>\n\n## Remove a discount code\n\n<br/>\n\nWe remove a discount code by applying a fake invalid discount code.\n\nThere is no native way to remove discount codes so this is a workaround.\n\nThis behaviour relies on the fact that there can only be one discount code applied in the cart. We are replacing the one allowed discount code with an invalid code.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n14       async removeDiscountCode(): Promise<void> {\n15         const FAKE_INVALID_DISCOUNT_CODE = '~!~!UPCART_REMOVE_DISCOUNT!~!~';\n16         await this.UNSAFE_POSSIBLE_NO_OP_applyDiscountCodeAndSetShopifyCookie({ discountCode: FAKE_INVALID_DISCOUNT_CODE });\n17       }\n```\n\n<br/>\n\nAfter removing a discount code, we refetch the cart to show updated prices.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/components/DiscountCodeBadge/DiscountCodeBadge.tsx\n\n```tsx\n18         await platform.discounts.removeDiscountCode();\n19         await refetchCart();\n```\n\n<br/>\n\n> \u26a0\ufe0f After we apply or remove a discount code, the `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> of discounted line items will change. If we did not refetch the cart then we would have an outdated `key`<swm-token data-swm-token=\":web/storefront/src/platform/platform.types.ts:558:1:1:`  key: string;`\"/> value which would cause errors if we tried to call `cart/update.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:191:17:21:`    return fetchQd(this.ajaxMutationCartQ, getShopifyRoutesRoot() + &#39;cart/update.js&#39;, {`\"/> or `cart/change.js`<swm-token data-swm-token=\":web/storefront/src/platform/online-store/cart/cart.ts:153:8:12:`      getShopifyRoutesRoot() + `cart/change.js?${query.toString()}`,`\"/>.\n\n# Limitations\n\n## **Multiple** discount codes are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n50                     Multiple discount codes are not supported.\n```\n\n<br/>\n\n### Why are multiple discount codes not supported?\n\nWe cannot apply multiple discount codes because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support multiple codes. This is the only way that we know of to apply a discount code from the storefront. We will have to wait for Shopify to add support for multiple codes or to find a different way to apply codes which does support multiple.\n\nIf a customer applies two discount codes back to back, the first discount code will be discarded and only use the most recently applied code will affect the cart.\n\n## Free shipping discounts are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n58                   Free shipping discounts are not supported.\n```\n\n<br/>\n\n### Why are free shipping discounts not supported?\n\nWe cannot apply free shipping discounts because the way that we [apply a discount code](https://app.swimm.io/workspaces/3BezpZGfA5ijfn7Yn30j/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr#heading-27B5Pj) does not support them.\n\n## Shopify Plus stores using checkout.liquid are not supported\n\n<br/>\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/DiscountCodesModule/DiscountCodesModule.tsx\n\n```tsx\n64                   Shopify Plus stores using checkout.liquid are not supported.\n```\n\n<br/>\n\n### Why are Shopify Plus stores using checkout.liquid not supported?\n\nHistorically, the Ajax API only included automatic discounts and did not include discount codes. Shopify changed this behaviour and started including discounts from discount codes in Ajax API responses. There are still some stores which do not include discount codes in Ajax API responses. The discount codes module does not work on these stores.\n\n### How can we tell if a store is eligible?\n\nThe Ajax API will include discount codes in responses only if the store is on Shopify's new checkout.\n\n<br/>\n\nWe can identify wether or not a store is on Shopify's new checkout by looking at the cart token. If the cart token is 32 characters long and only includes hex digits (0123456789abcdef) then the store is on Shopify's old checkout, otherwise it is on Shopify's new checkout and the Ajax API will include discount codes in responses.\n\nStores that are on Shopify's new checkout may have different token formats. The following are examples that we've seen:\n\n- c1-d3f024e3af037f40bfe1b016b5b76f05\n- Z2NwLXVzLWNlbnRyYWwxOjAxSEZFMjFIV1FZUFc0SlQ3Q00ySFFSSjgy\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/platform/online-store/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart({ cart }: { cart: Cart<CartItem> }): boolean {\n6          if (!cart.token) return false;\n7          const isLegacyCartToken = cart.token.match(/^[0-9a-f]{32}$/) !== null;\n8          return !isLegacyCartToken;\n9        }\n```\n\n<br/>\n\n### What happens if a store is not eligible?\n\n<br/>\n\nIf a store is not eligible then the discount code module will not be shown.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/storefront/src/modules/CartPopup/Cart.tsx\n\n```tsx\n499                      {platform.discounts.getStoreCanApplyDiscountCodesInCart({ cart }) &&\n500                        settings.upcartEditorSettings.discountCodeModule && (\n501                          <DiscountCodeModule platform={platform} refetchCart={refetchCart} />\n502                        )}\n```\n\n<br/>\n\nIn the preview we will show the discount code module even for stores that are not eligible. We do this because it would require a lot of work to check eligibility when not on the storefront.\n\n<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->\n\n### \ud83d\udcc4 web/src/@templates/CartEditor/platform/preview/discounts/discounts.ts\n\n```typescript\n5        getStoreCanApplyDiscountCodesInCart(args: { cart: Cart<CartItem> }): boolean {\n6          return true;\n7        }\n```\n\n<br/>\n\nThis file was generated by Swimm. [Click here to view it in the app](https://app.swimm.io/repos/Z2l0aHViJTNBJTNBVXBDYXJ0LTIuMCUzQSUzQWJlYW0tY29tbWVyY2U=/docs/3vst4bcr).",
                "filename": ".swm/discount-codes-module.3vst4bcr.sw.md",
                "start_index": 0,
                "end_index": 11446,
                "start_line": 1,
                "end_line": 231,
                "max_line": 231,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# UpCart 3.0\n\n## Setup\n\nView setup instructions on Notion: https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 133,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>UpCart Loading...</title>\n    <script>\n      /*\n       * Constants\n       */\n      const INSTALL_SOURCE_QUERY_PARAM = 'via';\n      const COOKIE_LIFETIME_MS = 3 * 24 * 60 * 60 * 1000; // 3 days\n      const COOKIE_NAME = 'upcart_install_source';\n\n      /*\n       * 1. Get the ?via= query for the following steps\n       */\n      const installSource = encodeURIComponent(\n        new URLSearchParams(window.location.search).get(INSTALL_SOURCE_QUERY_PARAM),\n      );\n\n      /*\n       * 2. Set a cookie with the install source for 3 days so we can read it when they install the app\n       */\n      const cookieDomain = '.' + window.location.hostname;\n      const cookieExpiresDate = new Date();\n      cookieExpiresDate.setTime(cookieExpiresDate.getTime() + COOKIE_LIFETIME_MS);\n      const cookieExpires = cookieExpiresDate.toGMTString();\n      document.cookie = `${COOKIE_NAME}=${installSource}; expires=${cookieExpires}; domain=${cookieDomain}; path=/; SameSite=None; Secure`;\n\n      /*\n       * 3. Redirect to the app store, including the install source as a query param for App Store Google Analytics\n       */\n      window.location.replace(`https://apps.shopify.com/upcart-cart-builder?join-via=${installSource}`);\n    </script>\n  </head>\n  <body></body>\n</html>",
                "filename": "web/public/join.html",
                "start_index": 0,
                "end_index": 1304,
                "start_line": 1,
                "end_line": 36,
                "max_line": 36,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Security Policy\n\n## Supported versions\n\n### New features\n\nNew features will only be added to the master branch and will not be made available in point releases.\n\n### Bug fixes\n\nOnly the latest release series will receive bug fixes. When enough bugs are fixed and its deemed worthy to release a new gem, this is the branch it happens from.\n\n### Security issues\n\nOnly the latest release series will receive patches and new versions in case of a security issue.\n\n### Severe security issues\n\nFor severe security issues we will provide new versions as above, and also the last major release series will receive patches and new versions. The classification of the security issue is judged by the core team.\n\n### Unsupported Release Series\n\nWhen a release series is no longer supported, it's your own responsibility to deal with bugs and security issues. If you are not comfortable maintaining your own versions, you should upgrade to a supported version.\n\n## Reporting a bug\n\nAll security bugs in shopify repositories should be reported to [our hackerone program](https://hackerone.com/shopify)\nShopify's whitehat program is our way to reward security researchers for finding serious security vulnerabilities in the In Scope properties listed at the bottom of this page, including our core application (all functionality associated with a Shopify store, particularly your-store.myshopify.com/admin) and certain ancillary applications.\n\n## Disclosure Policy\n\nWe look forward to working with all security researchers and strive to be respectful, always assume the best and treat others as peers. We expect the same in return from all participants. To achieve this, our team strives to:\n\n- Reply to all reports within one business day and triage within two business days (if applicable)\n- Be as transparent as possible, answering all inquires about our report decisions and adding hackers to duplicate HackerOne reports\n- Award bounties within a week of resolution (excluding extenuating circumstances)\n- Only close reports as N/A when the issue reported is included in Known Issues, Ineligible Vulnerabilities Types or lacks evidence of a vulnerability\n\n**The following rules must be followed in order for any rewards to be paid:**\n\n- You may only test against shops you have created which include your HackerOne YOURHANDLE @ wearehackerone.com registered email address.\n- You must not attempt to gain access to, or interact with, any shops other than those created by you.\n- The use of commercial scanners is prohibited (e.g., Nessus).\n- Rules for reporting must be followed.\n- Do not disclose any issues publicly before they have been resolved.\n- Shopify reserves the right to modify the rules for this program or deem any submissions invalid at any time. Shopify may cancel the whitehat program without notice at any time.\n- Contacting Shopify Support over chat, email or phone about your HackerOne report is not allowed. We may disqualify you from receiving a reward, or from participating in the program altogether.\n- You are not an employee of Shopify; employees should report bugs to the internal bug bounty program.\n- You hereby represent, warrant and covenant that any content you submit to Shopify is an original work of authorship and that you are legally entitled to grant the rights and privileges conveyed by these terms. You further represent, warrant and covenant that the consent of no other person or entity is or will be necessary for Shopify to use the submitted content.\n- By submitting content to Shopify, you irrevocably waive all moral rights which you may have in the content.\n- All content submitted by you to Shopify under this program is licensed under the MIT License.\n- You must report any discovered vulnerability to Shopify as soon as you have validated the vulnerability.\n- Failure to follow any of the foregoing rules will disqualify you from participating in this program.\n\n** Please see our [Hackerone Profile](https://hackerone.com/shopify) for full details\n\n## Receiving Security Updates\n\nTo recieve all general updates to vulnerabilities, please subscribe to our hackerone [Hacktivity](https://hackerone.com/shopify/hacktivity)",
                "filename": "SECURITY.md",
                "start_index": 0,
                "end_index": 4160,
                "start_line": 1,
                "end_line": 59,
                "max_line": 59,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "MIT License\n\nCopyright (c) 2021 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
                "filename": "extensions/theme-app-extension/LICENSE.md",
                "start_index": 0,
                "end_index": 1063,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# [[[ --- STAGE: BASE ENVIRONMENT SETUP --- ]]]\n# see https://github.com/moby/moby/issues/37345#issuecomment-400250849\nFROM node:18.16.1-alpine as base\n# Accept command line '--build-arg' arguments\nARG PORT=8081\nARG HOST\nARG SHOPIFY_API_KEY\nARG INTERCOM_APP_ID\nARG SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY\n\n# Copy command line args to env to use during build and for final image runtime\nENV PORT=${PORT} \\\n    HOST=${HOST} \\\n    SHOPIFY_API_KEY=${SHOPIFY_API_KEY} \\\n    INTERCOM_APP_ID=${INTERCOM_APP_ID}\n    # ^^^^^ WARNING ^^^^^ do not include trailing \"\\\" on the last line above, you will get a syntax error with a terrible error message\n    #\n    # SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY is intentionally not included here since it is only for building and shouldn't be available at runtime\n\n# [[[ --- STAGE: BUILD --- ]]]\nFROM base AS build\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nCOPY web/patches ./web/patches\nRUN yarn install --cwd web --frozen-lockfile --production=false\nCOPY . .\n# NOTE: we need Sentry API token to upload source maps to Sentry during build, see withSentryConfig in next.config.js\nRUN echo \"[auth]\\ntoken=${SENTRY_SOURCE_MAP_UPLOAD_API_SECRET_KEY}\" > ./web/.sentryclirc\nRUN yarn web:build\n\n# [[[ --- STAGE: LICENSES WEB --- ]]]\nFROM base AS licenses-web\nWORKDIR /app\nCOPY web/package.json web/yarn.lock ./web/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web > ./web/public/licenses/web.txt\n\n# [[[ --- STAGE: LICENSES STOREFRONT --- ]]]\nFROM base AS licenses-storefront\nWORKDIR /app\nCOPY web/storefront/package.json web/storefront/yarn.lock ./web/storefront/\nRUN mkdir -p ./web/public/licenses/\nRUN yarn licenses generate-disclaimer --prod --cwd web/storefront > ./web/public/licenses/storefront.txt\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM base\nWORKDIR /app\nCOPY --from=build /app .\nCOPY package.json ./package.json\nRUN yarn install --frozen-lockfile --production=true\nCOPY --from=licenses-web /app/web/public/licenses/web.txt ./web/public/licenses/web.txt\nCOPY --from=licenses-storefront /app/web/public/licenses/storefront.txt ./web/public/licenses/storefront.txt\nCMD [\"yarn\", \"web:start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2181,
                "start_line": 1,
                "end_line": 53,
                "max_line": 53,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "## Dev Setup\n\nFollow the [instructions in this Notion document](https://www.notion.so/aftersell/Dev-Setup-11be2bf7ea6a4cad93acdae3fe4d8ca7?pvs=4) to setup the development environment for the Chrome extension.",
                "filename": "chrome-extensions/cart-customization/README.md",
                "start_index": 0,
                "end_index": 208,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "The starting point for this repository was created using the Shopify CLI, commit\nf5d560da33aafae0b552de72a90f1320d1023524. Some boilerplate code from the CLI\nremains and is licensed as follows:\n\"\"\"\nMIT License\n\nCopyright (c) 2018 Shopify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\"",
                "filename": "LICENSE.md",
                "start_index": 0,
                "end_index": 1265,
                "start_line": 1,
                "end_line": 26,
                "max_line": 26,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.\\\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can\u2019t go back!**\n\nIf you aren\u2019t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you\u2019re on your own.\n\nYou don\u2019t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn\u2019t feel obligated to use this feature. However we understand that this tool wouldn\u2019t be useful if you couldn\u2019t customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n\n### Code Splitting\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\n\n### Analyzing the Bundle Size\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\n\n### Making a Progressive Web App\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\n\n### Advanced Configuration\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\n\n### Deployment\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\n\n### `npm run build` fails to minify\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)",
                "filename": "web/storefront/README.md",
                "start_index": 0,
                "end_index": 3354,
                "start_line": 1,
                "end_line": 70,
                "max_line": 70,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "import { Shop, ShopModel } from '../modules/shops/shops.model';\nimport { RequestWithShop } from '../types/express.types';\nimport Shopify from '@shopify/shopify-api';\n\nexport const getShopDocFromRequest = async (req: RequestWithShop): Promise<Shop> => {\n  if (req.shopDoc) {\n    return req.shopDoc;\n  }\n\n  const shop = Shopify.Utils.sanitizeShop(req.query.shop as string);\n  const shopDoc = await ShopModel.findOne({ domain: shop }).lean();\n  req.shopDoc = shopDoc;\n  return shopDoc;\n};",
                "filename": "web/server/helpers/getShopDocFromRequest.ts",
                "start_index": 0,
                "end_index": 485,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            },
            {
                "code": "<html></html>",
                "filename": "web/storefront/public/index.html",
                "start_index": 0,
                "end_index": 13,
                "start_line": 1,
                "end_line": 1,
                "max_line": 1,
                "git_instance": "github",
                "repo_name": "testbed/UpCart-2.0",
                "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
            }
        ],
        "solution_task": {
            "structured_resp": "Clarify:\nThe issue is that the UpsellsModule component in the CartPopup feature is not displaying recommended products correctly due to an issue with image properties not handling null values for images and media. The upsell item selected had no valid image, which caused the upsell products not to be displayed.\n\nHypothesize:\n- The root cause of the issue is that the image properties of the upsell items are not being checked for null or undefined values before attempting to display them.\n- The code responsible for displaying the upsell items does not have a fallback or default image in case the actual image is null or undefined.\n- The filtering logic that was fixed might not be handling the case where the image property is null or undefined.\n\nExperiment:\n- Review the code snippets provided to locate where the image properties are being used and check if there is a check for null or undefined values.\n- Look for the logic that sets the image for the upsell items to identify where the issue might be occurring.\n\nAnalyze:\n- The provided code snippets do not include the exact logic where the image properties are being set or used for the upsell items.\n- The issue summary indicates that the fix was related to image properties not handling null values, but the provided code snippets do not show this part of the code.\n- The code snippets provided focus on fetching recommended products, filtering them based on availability and whether they are already in the cart, and handling the addition of products to the cart, but not on how images are handled.\n\nResolve:\n- To resolve the issue, the following steps should be taken:\n  - Locate the part of the code where the image properties for the upsell items are being set.\n  - Implement a check to ensure that the image property is not null or undefined before attempting to use it.\n  - Provide a default image or a placeholder image in case the actual image is null or undefined.\n  - If the image is being used in the `PreviewCarousel` component, ensure that the `img` tag has an `alt` attribute and that the `src` attribute is set to a valid image URL or a placeholder if the original image is not available.\n  - After making the changes, test the component to ensure that upsell items with null images are now displayed correctly with the default or placeholder image.\n  - Update the `UpsellsModule` component to use the new logic for handling images.\n  - Ensure that the fix aligns with the project's coding standards and practices, and does not introduce any new issues.",
            "response": "To ensure the CartPopup feature's UpsellsModule component displays recommended products correctly, it's essential to address the issue of image properties not properly handling null values. This problem has led to upsell items without valid images causing a failure in displaying the products as intended.\n\n- Review the code where image properties for upsell items are assigned and verify the presence of null checks before usage.\n- Introduce a validation step to confirm that image properties are neither null nor undefined.\n- Implement a default or placeholder image to be used whenever an actual image is missing or invalid.\n- In components like `PreviewCarousel`, make sure the `img` element includes an `alt` attribute for accessibility and that the `src` attribute points to a valid image URL or a placeholder.\n- Conduct thorough testing of the component post-implementation to confirm that upsell items with null images now appear with the designated default or placeholder image.\n- Update the `UpsellsModule` component to incorporate the new image handling logic, ensuring it adheres to the project's coding standards and does not introduce additional issues."
        },
        "snippet_processor_task": {
            "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "Filtering logic in UpsellsModule component ensures only available products are displayed as upsell options. Handling of null values for images and media in the upsell item selection.",
                        "snippet": {
                            "code": "((product) => {\n          const triggeredUpsellProductsWithThisHandle: FetchedProductWithUpsellId[] = [];\n\n          /**\n           *  Remove products that can not be added to the cart\n           *\n           * \"available\" appears to do a few things\n           * 1. Checks the product status is \"active\"\n           * 2. Checks if the product is tracking inventory and if it is verify there is at least one product\n           *    OR \"continue selling when out of stock\" is true\n           */\n          if (!product?.available) return [];\n\n          //product.available does not check variants so we have to filter them seperately otherwise\n          //out of stock variants could potentially show\n          product.variants = product.variants.filter((p) => p.available);\n\n          // ---- START window.upcartOnRenderUpsell\n          // We need quotes \"\" around the handle because it might start with a number which would\n          // cause an invalid selector error when using document.querySelector if they weren't in quotes\n          const itemQuerySelector = `[href*=\"${handle}\"]`;\n          // Wrap in try/catch in case the query selector is invalid for some reason. We still want to render\n          // the upsell even if we can't find the element\n          try {\n            const handleALink = document.querySelector(itemQuerySelector);\n            const el = handleALink?.closest('li.slide');\n            platform.publicApi.upcartOnRenderUpsell(product, el);\n          } catch (err) {\n            console.log(`Unable to find product with querySelector(\"${itemQuerySelector}\"):`, err);\n            sentryCaptureException(err);\n          }\n          // ---- END window.upcartOnRenderUpsell\n\n          for (let upsellItem of triggeredUpsells) {\n            let upsell = upsellItem.upsell.products[0] || null;\n            if (upsell?.handle === handle) {\n              if (upsell.variants) {\n                // when variants array is present, we trigger only on the variants specified\n                const productWithOnlyTriggeredVariants = {\n                  ...product,\n                  variants: product.variants.filter((variant) => upsell.variants!.includes(String(variant.id))),\n                };\n                triggeredUpsellProductsWithThisHandle.push({\n                  upsellId: upsellItem.id,\n                  fetchedProduct: productWithOnlyTriggeredVariants,\n                });\n              } else {\n                // when the variants array is missing, we trigger on any variant for the product\n                triggeredUpsellProductsWithThisHandle.push({ upsellId: upsellItem.id, fetchedProduct: product });\n              }\n            }\n          }\n\n          // only include products that have at least one variant to show\n          const productsWithVariants = triggeredUpsellProductsWithThisHandle.filter(\n            ({ fetchedProduct }) => fetchedProduct.variants.length > 0,\n          );\n\n          return productsWithVariants;\n        })",
                            "filename": "web/storefront/src/modules/CartPopup/UpsellsModule/UpsellsModule.tsx",
                            "start_index": 7906,
                            "end_index": 10880,
                            "start_line": 195,
                            "end_line": 369,
                            "max_line": 412,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet includes the handling of null values for images and media in the upsell item selection, which is directly related to the root cause of the issue."
                }
            ],
            "web/src/@components/PreviewCarousel/PreviewCarousel.tsx": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "The code snippet is related to displaying upsell products in the UpsellsModule component. It iterates through items, checks for upsell products, and renders them with image, title, price, and a button to add to cart. The filtering logic ensures only valid upsell items are displayed.",
                        "snippet": {
                            "code": "return items\n      .map(({ upsell }) => {\n        if (upsell) {\n          return (\n            <div className={`${styles.PreviewCarousel__item} DesignSettings__cartAccentColor`} key={upsell.shortId}>\n              <LegacyCard>\n                <LegacyStack spacing=\"loose\" alignment=\"center\" wrap={false}>\n                  <LegacyStack.Item>\n                    <div className={styles.PreviewCarousel__itemImage}>\n                      <img src={upsell.image} alt={upsell.title} title={upsell.title} />\n                    </div>\n                  </LegacyStack.Item>\n                  <LegacyStack.Item fill>\n                    <div className={`${styles.PreviewCarousel__itemTitle}`}>\n                      <Text variant=\"bodyMd\" as=\"span\" fontWeight=\"semibold\">\n                        {upsell.title}\n                      </Text>\n                      <span className={`${styles.PreviewCarousel__itemPrice}`}>\n                        {!!parseInt(upsell.compareAtPrice) && (\n                          <span className={styles['PreviewCarousel__itemPrice--discount']}>\n                            {formatMoney(upsell.compareAtPrice, currencyFormat)}\n                          </span>\n                        )}\n                        {formatMoney(upsell.price, currencyFormat)}\n                      </span>\n                    </div>\n                    <div className={`${styles.PreviewCarousel__button} DesignSettings__button`}>\n                      <div className={styles.PreviewCarousel__variationProduct}>\n                        <select title=\"productVariant\">\n                          <option>Variant #1</option>\n                          <option>Variant #2</option>\n                          <option>Variant #3</option>\n                        </select>\n                        <div className={styles.PreviewCarousel__icon}>\n                          <Icon source={SelectArrowIcon} />\n                        </div>\n                      </div>\n                      <CustomButton>{buttonText ?? 'Add to cart'}</CustomButton>\n                    </div>\n                  </LegacyStack.Item>\n                </LegacyStack>\n              </LegacyCard>\n            </div>\n          );\n        }\n      })\n      .filter((upsell) => upsell);\n  }, [buttonText, currencyFormat, items]);",
                            "filename": "web/src/@components/PreviewCarousel/PreviewCarousel.tsx",
                            "start_index": 817,
                            "end_index": 3108,
                            "start_line": 21,
                            "end_line": 68,
                            "max_line": 105,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "It shows the rendering logic for upsell items, including image handling, which is relevant to the issue of upsell items not displaying due to image property issues."
                }
            ],
            "web/src/@templates/AfterSellAd/AfterSellAd.tsx": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "The snippet provides a glimpse into the UI components and image handling within the AfterSellAd template, which might be relevant for understanding how images are displayed in the app.",
                        "snippet": {
                            "code": "<Button\n                    primary\n                    size=\"large\"\n                    url=\"https://apps.shopify.com/upcart-cart-builder?source=aftersell-app-upcart-landing-page\"\n                    external\n                  >\n                    {t('Claim free trial') as string}\n                  </Button>\n                  <LegacyStack alignment=\"center\" spacing=\"extraTight\">\n                    <Reviews title={''} />\n                    <p style={{ fontSize: '18px', fontWeight: 'bolder', paddingBottom: '2px', marginLeft: '4px' }}>\n                      5.0 (500+ Reviews)\n                    </p>\n                  </LegacyStack>\n                  <br />\n                </LegacyStack>\n              </LegacyStack>\n\n              <div className={styles.mainImage}>\n                <img src=\"https://i.ytimg.com/vi_webp/P3xyRIPRh6A/maxresdefault.webp\" />\n              </div>\n            </div>\n          </Layout.Section>\n          <Layout.Section fullWidth>\n            <LegacyStack vertical spacing=\"extraLoose\">\n              <LegacyStack distribution=\"fillEvenly\">\n                <div className={styles.contentImage}>\n                  <img src={upCartBenefitsMap[0].postPurchaseUpsellImage} />\n                </div>\n                <LegacyStack vertical>\n                  <Heading>\n                    <h3 style={{ fontSize: '20px', fontWeight: 'bold', marginTop: '5px' }}>\n                      {upCartBenefitsMap[0].postPurchaseUpsell}\n                    </h3>\n                  </Heading>\n                  <LegacyStack vertical>\n                    <CheckmarkBenefit benefit=\"One Click Upsell Funnels\" />\n                    <CheckmarkBenefit benefit=\"Deep offer targeting with triggers\" />\n                    <CheckmarkBenefit benefit=\"AI recommended offers\" />\n                    <CheckmarkBenefit benefit=\"A/B test offers\" />\n                  </LegacyStack>\n                </LegacyStack>\n              </LegacyStack>\n              <LegacyStack distribution=\"fillEvenly\">\n                <LegacyStack vertical>\n                  <Heading>\n                    <h3 style={{ fontSize: '20px', fontWeight: 'bold', marginTop: '5px' }}>\n                      {upCartBenefitsMap[1].thankYouPage}\n                    </h3>\n                  </Heading>\n                  <LegacyStack vertical>\n                    <CheckmarkBenefit benefit=\"Product recommendations & storewide discount popup\" />\n                    <CheckmarkBenefit benefit=\"FAQs & reviews\" />\n                    <CheckmarkBenefit benefit=\"Images and videos\" />\n                  </LegacyStack>\n                </LegacyStack>\n                <div className={styles.contentImage}>\n                  <img src={upCartBenefitsMap[1].thankYouPageImage} />\n                </div>\n              </LegacyStack>\n              <LegacyStack distribution=",
                            "filename": "web/src/@templates/AfterSellAd/AfterSellAd.tsx",
                            "start_index": 2946,
                            "end_index": 5780,
                            "start_line": 79,
                            "end_line": 139,
                            "max_line": 163,
                            "git_instance": "github",
                            "repo_name": "testbed/UpCart-2.0",
                            "sha": "6c693e7080ba272711d0edb7fcbda5c1768467cf"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "It provides insight into the UI components and image handling within the AfterSellAd template, which is relevant for understanding how images are displayed in the app."
                }
            ]
        },
        "bouncer_response": {
            "score": 0,
            "criteria": "The RESPONSE must provide precise, actionable guidance and directly address all aspects of the described bug to facilitate its resolution.",
            "supporting_evidence": "The RESPONSE provides a series of steps and code snippets to address the issue of image properties not handling null values, which is relevant to the bug described in the PROMPT. However, the PROMPT indicates that the issue has already been resolved, as the status of the ticket has been updated to 'Done' after the fix was implemented. Therefore, the RESPONSE is not actionable because the bug has been fixed, and the steps provided are no longer necessary. Additionally, the RESPONSE includes links to code snippets that are not accessible (e.g., links starting with 'https://github.com/testbed/...'), which are not part of the PROMPT and do not add value to the resolution of the already resolved issue.",
            "clarification_questions": "NONE"
        },
        "end_time": 1714401989.201365,
        "result": ""
    }
}