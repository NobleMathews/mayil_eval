{
    "id": "BEAM-3254",
    "repo_name": "testbed/aftersell",
    "title": "Rokt Ads: Show Top Advertisers and Verticals",
    "body": "\nWe already fetched this data from the backend, so now we want to create a UI for this data. \n\n1. Set the feature flag **roktIntegrationIsEnabled** to true in your user in the db (You can ask Opey how to do this). This will give you access to Rokt\n2. Make a copy of `web/server/dev.public.env.json`  and rename dev.secrets.env `dev.secrets.env.json`\n3. Replace `ROKT_INTEGRATION_SECRET_TOKEN` with the real token. Ask Greg or Opey for it\n\nPolaris 12: [EMBEDDED_LINK_1]\n\nThe frontend component is in `web/client/src/pages/rokt/rokt-analytics.page.tsx`\n\nWe grab the analytics data from `const { data: analytics, isLoading: analyticsLoading } = useRoktAnalytics(filters);`\n\nThe format looks like this `todo`\n\n\nRight now we're only displaying the overview but now we also want to display the top demographics\n---\nGlossary:\ngithub_pr_1: The attachment is a screenshot of a GitHub pull request (PR) titled \"Add Top Advertisers and Verticals Display to Rokt Analytics\". The PR includes a series of code changes with the intent to update the Rokt Analytics page. The screenshot shows a diff view where new code has been added.\n\nThe added code includes a new component called `TopAdvertisersAndVerticals`. This component appears to be responsible for rendering the new UI elements that will display the top advertisers and verticals data. The code changes show the import statement for this component at the top of the file, suggesting that it is located in a separate module.\n\nWithin the `rokt-analytics.page.tsx` file, the `TopAdvertisersAndVerticals` component is being used inside the main page component. It is placed below an existing component that seems to display the overview analytics. The placement indicates that the top advertisers and verticals will be displayed after the overview section on the page.\n\nThe props being passed to the `TopAdvertisersAndVerticals` component include `analyticsData`, which is likely the data fetched from the backend, and `isLoading`, which is a boolean indicating whether the analytics data is still being loaded.\n\nThe code snippet in the screenshot does not show any logic or UI elements within the `TopAdvertisersAndVerticals` component itself, only its usage. There are no visible error messages or comments in the screenshot indicating any issues with the code.\n\nThe screenshot does not show the entire file or the surrounding context of the changes, such as other components on the page or the complete file structure. It focuses solely on the addition of the new component to the existing page.\n\n",
    "classification": "feature request",
    "state": "closed",
    "repo_link": "https://github.com/testbed/aftersell.git",
    "requested_commit": null,
    "issue_tracker_identifier": "",
    "ai_cost": {
        "issue_classifier": 0.00043999999999999996,
        "issue_summarizer": 0.01124,
        "search_embedding": 7.41e-05,
        "documentation_agent": 0.004900000000000001,
        "repo_summary": 0.09822449999999999,
        "issue_star_solver": 0.1543285,
        "snippet_processor": 0.027069999999999997,
        "bouncer": 0.04727
    },
    "attachments": [
        {
            "title": "BEAM-3254/analytics-page",
            "url": "https://github.com/beam-commerce/aftersell/pull/1100",
            "content": "",
            "placeholder_tag": "github_pr_1",
            "content_type": "ExternalAssetsType.GITHUB_PR"
        }
    ],
    "inline_assets": [],
    "linked_issue_ids": [],
    "comments": [],
    "issue_summary": "- Feature flag: `roktIntegrationIsEnabled`\n- Database: User settings\n- Configuration file: `dev.secrets.env.json`\n- Environment variable: `ROKT_INTEGRATION_SECRET_TOKEN`\n- Frontend component: `rokt-analytics.page.tsx`\n- Hook: `useRoktAnalytics(filters)`\n- Variables: `analytics`, `analyticsLoading`\n- New component: `TopAdvertisersAndVerticals`\n- Props: `analyticsData`, `isLoading`\n- File to copy: `web/server/dev.public.env.json`",
    "repo_summary": "AfterSell is a Node.js project with multiple components:\n- `web/client`: Frontend component with TypeScript and React, including UI components like `TopPerformingProducts`.\n- `web/server`: Backend component with TypeScript, handling API requests like fetching analytics data from Rokt.\n- `extensions`: Contains various extensions like `post-purchase` with setup instructions in `README.md`.\n- `web/widgets`: Contains components like `thankyoupage` with HTML templates for post-purchase pages.\n\nThe issue at hand involves updating the Rokt Analytics page to display top advertisers and verticals. The frontend component responsible for this is `web/client/src/pages/rokt/rokt-analytics.page.tsx`. The new UI elements are added using a component called `TopAdvertisersAndVerticals`. Data for the UI is fetched using `useRoktAnalytics` hook. The format of the analytics data is not specified in the ticket.",
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1714258169.819842,
        "classification": "feature request",
        "initial_code_snippets": [
            {
                "code": "import {\n    Badge,\n    Box,\n    Button,\n    Card,\n    DataTable,\n    HorizontalStack,\n    Icon,\n    IconSource,\n    Layout,\n    Link,\n    Page,\n    SkeletonBodyText,\n    Text,\n    Tooltip,\n    VerticalStack,\n} from '@shopify/polaris';\nimport { InfoMinor, PageDownMajor } from '@shopify/polaris-icons';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport {\n    ANALYTICS_PRESET_DATE_RANGE_OPTIONS,\n    AnalyticsPresetDateRangeOption,\n    presetDateRange,\n} from 'src/hooks/useAnalytics';\nimport { useEmbeddedNavigate } from 'src/hooks/useEmbeddedNavigate';\nimport { useRoktFormatPaymentThreshold } from 'src/hooks/useRoktFormatPaymentThreshold';\nimport { useRoktPayoutInvoices } from 'src/hooks/useRoktPayoutInvoices';\nimport { DownArrowIcon, FlatLineIcon, UpArrowIcon } from 'src/pages/analytics/analytics.page';\nimport DatePickerPopover from 'src/pages/analytics/components/date-picker-popover';\nimport { Loader } from 'src/shared-components/loader';\nimport type { GetPayoutInvoicesResponseType } from '../../../../server/src/modules/rokt/rokt.dtos';\nimport { useRoktAnalytics } from './rokt.hooks';\nimport { useCurrentUser } from 'src/providers/UserProvider';\n\nconst RoktAnalytics = () => {\n    const roktPayoutInvoicesQuery = useRoktPayoutInvoices();\n\n    if (!roktPayoutInvoicesQuery.data) {\n        return <Loader />;\n    }\n    return <RoktAnalyticsWithData roktPayoutInvoices={roktPayoutInvoicesQuery.data} />;\n};\n\nexport const RoktAnalyticsWithData = ({\n    roktPayoutInvoices,\n}: {\n    roktPayoutInvoices: GetPayoutInvoicesResponseType;\n}) => {\n    const navigate = useEmbeddedNavigate();\n    const [dateRange, setDateRange] = useState<AnalyticsPresetDateRangeOption | undefined>(\n        ANALYTICS_PRESET_DATE_RANGE_OPTIONS[0].value\n    );\n    const [filters, setFilters] = useState(presetDateRange(dateRange ?? ANALYTICS_PRESET_DATE_RANGE_OPTIONS[0].value));\n    const { data: analytics, isLoading: analyticsLoading } = useRoktAnalytics(filters);\n    const { getAnalyticsFormatter } = useFormatAnalytics();\n\n    return (\n        <Page\n            title={'Rokt Network Analytics'}\n            backAction={{\n                content: 'Back',\n                onAction: () => {\n                    navigate('/network');\n                },\n            }}\n            primaryAction={\n                <DatePickerPopover\n                    onSave={(dateStringRange) => {\n                        setFilters((prev) => ({\n                            ...prev,\n                            startDate: dateStringRange.startDate,\n                            endDate: dateStringRange.endDate,\n                        }));\n                    }}\n                    preset={dateRange}\n                    setPreset={(preset) => setDateRange(preset)}\n                />\n            }\n        >\n            <Layout>\n                {Object.keys(ANALYTICS_KEY_NAMES).map((key) => (",
                "filename": "web/client/src/pages/rokt/rokt-analytics.page.tsx",
                "start_index": 0,
                "end_index": 2889,
                "start_line": 1,
                "end_line": 81,
                "max_line": 468,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import {\n    Badge,\n    Banner,\n    Box,\n    Button,\n    Card,\n    Checkbox,\n    Collapsible,\n    Divider,\n    FormLayout,\n    HorizontalStack,\n    Icon,\n    IconSource,\n    Layout,\n    Link,\n    Page,\n    RadioButton,\n    RangeSlider,\n    Select,\n    SelectOption,\n    TabProps,\n    Tabs,\n    Text,\n    VerticalStack,\n} from '@shopify/polaris';\nimport { AlertMinor, CircleTickMajor, DeleteMajor } from '@shopify/polaris-icons';\nimport { Field, getValues, notEmptyString, useField, useForm } from '@shopify/react-form';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { useEmbeddedNavigate } from 'src/hooks/useEmbeddedNavigate';\nimport { useRoktPlacementSettings } from 'src/hooks/useRoktPlacementSettings';\nimport { CardForm } from 'src/shared-components/card-form';\nimport { ColorInput } from 'src/shared-components/color-input/color-input';\nimport { Loader } from 'src/shared-components/loader';\nimport { StickyLayoutSection } from 'src/shared-components/sticky-section/sticky-layout-section';\nimport type {\n    BasePlacementConfigurationsType,\n    PlacementSettingsModifiedResponseType,\n} from '../../../../server/src/modules/rokt/rokt.dtos';\nimport {\n    useRoktAccount,\n    useRoktAccountCreate,\n    useRoktAccountVerticals,\n    useRoktUpdatePlacementConfiguration,\n    useRoktUpdatePlacementStatus,\n} from './rokt.hooks';\nimport shadowCss from './rokt.shadow.scss?inline';\nimport { useCurrentUser } from 'src/providers/UserProvider';\nimport PreviewFakeProductImage from './rokt-preview-fake-product.png';\nimport { ROUTES } from 'src';\n\nconst Rokt = () => {\n    const roktAccountQuery = useRoktAccount();\n\n    if (!roktAccountQuery.data) {\n        return <Loader />;\n    }\n    if (roktAccountQuery.data.account.exists && roktAccountQuery.data.account.status === 'active') {\n        return <ActiveAccount />;\n    } else {\n        return <Signup refetch={roktAccountQuery.refetch} />;\n    }\n};\n\nconst ActiveAccount = () => {\n    const roktPlacementSettingsQuery = useRoktPlacementSettings();\n\n    if (!roktPlacementSettingsQuery.data) {\n        return <Loader />;\n    }\n    return <ActiveAccountWithData roktPlacementSettings={roktPlacementSettingsQuery.data} />;\n};\n\nconst ActiveAccountWithData = ({\n    roktPlacementSettings,\n}: {\n    roktPlacementSettings: PlacementSettingsModifiedResponseType;\n}) => {\n    const navigate = useEmbeddedNavigate();\n\n    const roktUpdatePlacementConfigurationMutation = useRoktUpdatePlacementConfiguration();\n\n    const [placementTypeTab, setPlacementTypeTab] = useState(PlacementType.Overlay);\n\n    const tyConfigurationForm = useConfigurationForm(\n        roktPlacementSettings.data.configuration.thankYouPageConfiguration\n    );\n    const ospConfigurationForm = useConfigurationForm(\n        roktPlacementSettings.data.configuration.orderStatusPageConfiguration\n    );\n\n    const overlayConfig = roktPlacementSettings.data.configuration.overlayPlacementConfigurations;",
                "filename": "web/client/src/pages/rokt/rokt.page.tsx",
                "start_index": 0,
                "end_index": 2994,
                "start_line": 1,
                "end_line": 92,
                "max_line": 1493,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export async function getTopVerticals({\n    appInstallationId,\n    params,\n}: {\n    appInstallationId: string;\n    params: ReportingParams;\n}): Promise<any> {\n    const queryParams = new URLSearchParams({\n        dateStartUtc: params.dateStartUtc,\n        dateEndUtc: params.dateEndUtc,\n    });\n    const res = await fetch(\n        `https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/reporting/top-verticals?${queryParams}`,\n        {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n        }\n    );\n    return res.json();\n}\n\nexport async function getTaxonomyVerticalsForAccountCreation(): Promise<VerticalsResponseType> {\n    return fetch(`https://smb-integration.rokt.com/v1/taxonomy/account-verticals`, {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n        },\n    }).then((res) => {\n        return res.json();\n    });\n}\n\nexport async function getTaxonomyVerticalsForSettings(): Promise<VerticalsResponseType> {\n    return fetch(`https://smb-integration.rokt.com/v1/taxonomy/verticals`, {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n        },\n    }).then((res) => res.json());\n}\n\nexport async function getPlacementSettings({\n    appInstallationId,\n}: {\n    appInstallationId: string;\n}): Promise<PlacementSettingsApiResponseType> {\n    return fetch(`https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/placements/settings`, {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n        },\n    }).then((res) => res.json());\n}\n\nexport async function updatePlacementControls({\n    appInstallationId,\n    body,\n}: {\n    appInstallationId: string;\n    body: UpdatePlacementControlsBodyType;\n}): Promise<UpdatePlacementControlsResponseType> {\n    const res = await fetch(\n        `https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/placements/controls`,\n        {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n            body: JSON.stringify(body),\n        }\n    );\n    const success = res.status === 204;\n    if (success) {\n        return { success: true };\n    } else {\n        const responseText = await res.text();\n        return {\n            success: false,\n            error: responseText,\n        };\n    }\n}",
                "filename": "web/server/src/modules/rokt/rokt.api.ts",
                "start_index": 7756,
                "end_index": 10519,
                "start_line": 268,
                "end_line": 522,
                "max_line": 522,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { REGEX_ROKT_BLOCKED_DOMAIN } from '#aftersell/common/rokt.common';\nimport {\n    Box,\n    Button,\n    Card,\n    Checkbox,\n    Collapsible,\n    Divider,\n    HorizontalStack,\n    Icon,\n    IconSource,\n    Layout,\n    Link,\n    Modal,\n    Page,\n    RangeSlider,\n    Tag,\n    Text,\n    TextField,\n    Tooltip,\n    VerticalStack,\n} from '@shopify/polaris';\nimport { EditMinor, SidebarLeftMajor, SidebarRightMajor } from '@shopify/polaris-icons';\nimport { useField, useForm } from '@shopify/react-form';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport React, { useMemo, useState } from 'react';\nimport { useEmbeddedNavigate } from 'src/hooks/useEmbeddedNavigate';\nimport { useRoktFormatPaymentThreshold } from 'src/hooks/useRoktFormatPaymentThreshold';\nimport { useRoktPayoutInvoices } from 'src/hooks/useRoktPayoutInvoices';\nimport { useRoktPlacementSettings } from 'src/hooks/useRoktPlacementSettings';\nimport { CardForm } from 'src/shared-components/card-form';\nimport { Loader } from 'src/shared-components/loader';\nimport {\n    GetAccountResponseType,\n    GetCurrentAccountVerticalResponseType,\n    GetPaymentMethodResponseType,\n    GetPayoutInvoicesResponseType,\n    PlacementSettingsModifiedResponseType,\n    UpdatePlacementControlsBodyType,\n    UpdatePlacementControlsResponseType,\n    UpdatePlacementTrafficControlBodyType,\n    UpdatePlacementTrafficControlResponseType,\n    VerticalsResponseType,\n} from '../../../../server/src/modules/rokt/rokt.dtos';\nimport { RoktApiPaymentMethod } from '../../../../server/src/modules/rokt/rokt.dtos';\nimport { useRoktAccountDelete } from './hooks/useRoktAccountDelete';\nimport { AnnotatedLayout } from 'src/shared-components/annotated-layout';\nimport {\n    useRoktAccount,\n    useRoktPaymentMethod,\n    useRoktUpdatePaypalEmail,\n    useUpdateRoktAfterSellSettings,\n} from 'src/pages/rokt/rokt.hooks';",
                "filename": "web/client/src/pages/settings/settings-rokt.page.tsx",
                "start_index": 0,
                "end_index": 1887,
                "start_line": 1,
                "end_line": 53,
                "max_line": 795,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { Card, DataTable, Pagination, Text, VerticalStack } from '@shopify/polaris';\nimport React, { FC, useEffect, useMemo, useState } from 'react';\n// @ts-ignore\nimport { cleanProductTitle } from '#aftersell/common/products';\nimport { useTopProductAnalytics } from 'src/hooks/useTopProductAnalytics';\nimport type {\n    AnalyticsTopProductsFiltersType,\n    AnalyticsTopProductsOfferType,\n    AnalyticsTopProductsResponseType,\n    TopProductMultiOfferAnalyticsType,\n    TopProductSingleOfferAnalyticsType,\n} from '../../../../server/src/modules/analytics/analytics.dtos';\nimport styles from './styles.module.scss';\nimport { useFormatCurrency } from 'src/hooks/useFormatCurrency';\n\nfunction isSingleOfferType(\n    arg: TopProductSingleOfferAnalyticsType | TopProductMultiOfferAnalyticsType,\n    isSingleOffer: boolean\n): arg is TopProductSingleOfferAnalyticsType {\n    return isSingleOffer;\n}\n\nexport const TopPerformingProducts: FC<{\n    analyticsFilter: Omit<AnalyticsTopProductsFiltersType, 'page' | 'limit'>;\n    isSingleOffer?: boolean;\n    showTitle?: boolean;\n    prepareStart?: boolean;\n}> = ({ analyticsFilter, isSingleOffer = false, showTitle = true, prepareStart = true }) => {\n    const [page, setPage] = useState(1);\n    const { formatCurrency } = useFormatCurrency();\n\n    useEffect(() => {\n        setPage(1);\n    }, [analyticsFilter]);\n\n    const options = useMemo(() => {\n        return { ...analyticsFilter, page, limit: 5 };\n    }, [page, analyticsFilter]);\n\n    const { data: fetchedData = {} as AnalyticsTopProductsResponseType, isPreviousData: disable } =\n        useTopProductAnalytics(options, { prepareStart });\n\n    const { data: products = [], metadata: { limit = 1, page: queryPage = 1, total = 0 } = {} } = fetchedData;\n\n    const rows = products.map((item) =>\n        isSingleOfferType(item, isSingleOffer)\n            ? getSingleOfferRow({ item, formatCurrency })\n            : getMultiOfferRow({ item, formatCurrency })\n    );\n\n    const upperAmount = useMemo(() => {\n        const upper = limit * queryPage;\n        return (total < upper ? total : upper) || 0;\n    }, [limit, queryPage, total]);\n    const lowerAmount = useMemo(() => limit * (queryPage - 1) + 1 || 0, [limit, queryPage]);\n\n    return (\n        <VerticalStack gap=\"4\">\n            {showTitle && (\n                <Text variant=\"headingLg\" as=\"h5\">\n                    Top performing products\n                </Text>\n            )}\n            <Card padding=\"0\">\n                <DataTable\n                    columnContentTypes={\n                        isSingleOffer\n                            ? ['text', 'numeric', 'numeric']\n                            : ['text', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric']\n                    }\n                    headings={\n                        isSingleOffer\n                            ? ['Product name', 'Conversion Rate', 'Revenue']\n                            : ['Product name', 'Upsell #1', 'Upsell #2', 'Downsell', 'Thank you page', 'Revenue']",
                "filename": "web/client/src/shared-components/top-performing-products/top-performing-products.tsx",
                "start_index": 0,
                "end_index": 3002,
                "start_line": 1,
                "end_line": 74,
                "max_line": 155,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<Page\n            title=\"Rokt Network\"\n            secondaryActions={[\n                {\n                    content: 'Manage settings',\n                    onAction: () => {\n                        navigate(ROUTES.SETTINGS_ROKT_NETWORK.path);\n                    },\n                },\n                {\n                    content: 'View analytics',\n                    onAction: () => {\n                        navigate(ROUTES.ROKT_NETWORK_ANALYTICS.path);\n                    },\n                },\n            ]}\n            // backAction={{\n            //     onAction: () => {\n            //         navigate('/');\n            //     },\n            // }}\n        >\n            <Layout>\n                <Layout.Section fullWidth>\n                    <EnableDisable roktPlacementSettings={roktPlacementSettings} />\n                </Layout.Section>\n                <Layout.Section oneThird>\n                    <VerticalStack gap=\"4\">\n                        <Card>\n                            <Group title=\"Layout\">\n                                <Subgroup title=\"Thank you page\">\n                                    <ConfigurationSelect\n                                        configurationForm={tyConfigurationForm}\n                                        setPlacementTypeTab={setPlacementTypeTab}\n                                    />\n                                </Subgroup>\n                                <Subgroup title=\"Order status page\">\n                                    <ConfigurationSelect\n                                        configurationForm={ospConfigurationForm}\n                                        setPlacementTypeTab={setPlacementTypeTab}\n                                    />\n                                </Subgroup>\n                            </Group>\n                        </Card>\n                        <Card padding=\"0\">\n                            <Tabs\n                                tabs={TABS}\n                                selected={TABS.findIndex((tab) => tab.id === String(placementTypeTab))}\n                                onSelect={(selectedTabIndex) =>\n                                    setPlacementTypeTab(Number(TABS[selectedTabIndex].id) as PlacementType)\n                                }\n                                fitted\n                            />\n                            <Box paddingInlineStart=\"4\" paddingInlineEnd=\"4\" paddingBlockEnd=\"4\">\n                                <VerticalStack gap=\"5\">\n                                    {placementTypeTab === PlacementType.Overlay && (",
                "filename": "web/client/src/pages/rokt/rokt.page.tsx",
                "start_index": 10721,
                "end_index": 13289,
                "start_line": 204,
                "end_line": 259,
                "max_line": 1493,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import ImpressionsImage from './chart.png';\nimport RevenueImage from './money-bag.png';\nimport AcceptedOffersImage from './money-funnel.png';\n\nimport { AfterSellPaidFeature } from '#aftersell/common/billing';\nimport {\n    Badge,\n    Box,\n    Button,\n    Card,\n    HorizontalStack,\n    IconSource,\n    Layout,\n    Link,\n    Page,\n    SkeletonBodyText,\n    Text,\n    Tooltip,\n    VerticalStack,\n} from '@shopify/polaris';\nimport {\n    BehaviorMajor,\n    CalendarTimeMinor,\n    DesktopMajor,\n    FilterMinor,\n    MaximizeMinor,\n    MinimizeMajor,\n    MobileMajor,\n} from '@shopify/polaris-icons';\nimport { DataSeries, DonutChart, FunnelChart, LineChart, LineChartProps, StackedAreaChart } from '@shopify/polaris-viz';\nimport '@shopify/polaris-viz/build/esm/styles.css';\nimport React, { PropsWithChildren, useCallback, useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { useFormatCurrency } from 'src/hooks/useFormatCurrency';\nimport {\n    ANALYTICS_PRESET_DATE_RANGE_OPTIONS,\n    ANALYTICS_SERIES_COLORS,\n    ANALYTICS_SERIES_NAMES,\n    AnalyticsData,\n    AnalyticsLocalFilters,\n    AnalyticsMetricData,\n    AnalyticsPresetDateRangeOption,\n    METRIC_NAMES,\n    formatYmdDateStr,\n    useAnalyticsFetchFilters,\n    useAnalyticsLocalFilters,\n    useFetchAnalytics,\n    useProcessAnalytics,\n    useTYPageDropoff,\n} from 'src/hooks/useAnalytics';\nimport { useFunnel } from 'src/hooks/useFunnel';\nimport { useInitialValueFromQuery } from 'src/hooks/useInitialQueryParam';\nimport DatePickerPopover from 'src/pages/analytics/components/date-picker-popover';\nimport { ActionNeededBanner } from 'src/shared-components/action-needed-banner';\nimport { AdditionalScopesBanner } from 'src/shared-components/additional-scopes-banner';\nimport { ButtonSelect } from 'src/shared-components/button-select';\nimport { ToggleSwitch } from 'src/shared-components/toggle-switch/toggle-switch';\nimport { TopPerformingProducts } from 'src/shared-components/top-performing-products';\nimport type { PageEnumType, SeriesByOfferType } from '../../../../server/src/modules/analytics-v2/analytics-v2.dtos';\nimport './Analytics.scss';\nimport { ROUTES } from 'src';\nimport { useEmbeddedNavigate } from 'src/hooks/useEmbeddedNavigate';\nimport { useBillingPlanFeatureAvailable } from 'src/hooks/useBillingPlanFeatureAvailable';\nimport { useFeatureFlagIsEnabled } from 'src/hooks/useFeatureFlagIsEnabled';\n\nconst CHART_CARD_HEIGHT = '308px';\n\nconst POSSIBLE_FROM_ROUTE_KEYS = ['table', 'page', 'home'] as const;\nexport type AnalyticsFromRouteKey = typeof POSSIBLE_FROM_ROUTE_KEYS[number];\n\nconst Analytics = () => {\n    const navigate = useEmbeddedNavigate();\n\n    const [queryParams] = useSearchParams();\n    const funnelId = queryParams.get('funnelId') ?? undefined;\n\n    // added to support customizing which route the back button links to based on a query parameter",
                "filename": "web/client/src/pages/analytics/analytics.page.tsx",
                "start_index": 0,
                "end_index": 2884,
                "start_line": 1,
                "end_line": 77,
                "max_line": 961,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{data.salesBreakdown.activeChartData}\n                            />\n                        </ChartCard>\n                        <HalfWidthChart\n                            analytics={data}\n                            id=\"thankYouPageDropoff\"\n                            title=\"Thank you page dropoff\"\n                            tooltip=\"This shows the dropoff on thank you page offers for the embedded upsells and storewide popup.\"\n                            salesBreakdown={data.salesBreakdown.activeChartData}\n                        />\n                        <Layout.Section fullWidth>\n                            <TopPerformingProducts\n                                analyticsFilter={{\n                                    funnelId,\n                                    startDate: fetchFilters.startDate,\n                                    endDate: fetchFilters.endDate,\n                                    deviceType: fetchFilters.deviceType,\n                                }}\n                            />\n                        </Layout.Section>\n                    </Layout>\n\n                    {profitAnalyticsAreEnabled &&",
                "filename": "web/client/src/pages/analytics/analytics.page.tsx",
                "start_index": 16742,
                "end_index": 17883,
                "start_line": 335,
                "end_line": 357,
                "max_line": 961,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "nction useRoktVerticals() {\n    return useQuery<VerticalsResponseType>(['v2/rokt/verticals']);\n}\n\nfunction useRoktCurrentAccountVertical() {\n    return useQuery<GetCurrentAccountVerticalResponseType>(['v2/rokt/current-account-vertical']);\n}\n\nfunction useRoktUpdatePlacementControls() {\n    const queryClient = useQueryClient();\n\n    return useMutation({\n        mutationFn: async (body: UpdatePlacementControlsBodyType) => {\n            const result: UpdatePlacementControlsResponseType = await fetch(`/api/v2/rokt/placement-controls`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(body),\n            }).then((res) => res.json());\n            return result;\n        },\n        onSuccess: (result) => {\n            if (result.success) {\n                shopify.toast.show('Changes saved. Updates may take up to 30 minutes to take effect.', {\n                    duration: 3000,\n                });\n                queryClient.invalidateQueries(['v2/rokt/placement-settings']);\n            } else {\n                shopify.toast.show('Error saving changes', { isError: true, duration: 3000 });\n            }\n        },\n    });\n}\n\nfunction useRoktUpdatePlacementTrafficControl() {\n    const queryClient = useQueryClient();\n\n    return useMutation({\n        mutationFn: async (body: UpdatePlacementTrafficControlBodyType) => {\n            const result: UpdatePlacementTrafficControlResponseType = await fetch(\n                `/api/v2/rokt/placement-traffic-control`,\n                {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(body),\n                }\n            ).then((res) => res.json());\n            return result;\n        },\n        onSuccess: (result) => {\n            if (result.success) {\n                shopify.toast.show('Changes saved. Updates may take up to 30 minutes to take effect.', {\n                    duration: 3000,\n                });\n                queryClient.invalidateQueries(['v2/rokt/placement-settings']);\n            } else {\n                shopify.toast.show('Error saving changes', { isError: true, duration: 3000 });\n            }\n        },\n    });\n}\n\nenum VerticalPolicyEnum {\n    ALLOW = 0,\n    BLOCK = 1,\n}\n\nenum RoktPaymentMethod {\n    PayPal = 1,\n    DirectBankTransfer = 2,\n}\n\ninterface VerticalPolicy {\n    verticalId: number;\n    policy: VerticalPolicyEnum;\n}\n\nexport default SettingsRokt;",
                "filename": "web/client/src/pages/settings/settings-rokt.page.tsx",
                "start_index": 29080,
                "end_index": 31686,
                "start_line": 715,
                "end_line": 795,
                "max_line": 795,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{setLocalFilters}\n                                />\n                                <Filter\n                                    offerType=\"upsell_2\"\n                                    tooltip=\"This is the upsell shown if the first 1-click upsell is accepted.\"\n                                    localFilters={localFilters}\n                                    setLocalFilters={setLocalFilters}\n                                />\n                                <Filter\n                                    offerType=\"downsell\"\n                                    tooltip=\"This is the upsell shown if the first 1-click upsell is declined.\"\n                                    localFilters={localFilters}\n                                    setLocalFilters={setLocalFilters}\n                                />\n                                <Filter\n                                    offerType=\"ty_page\"\n                                    tooltip=\"This is for any upsell offers & content on the thank you page.\"\n                                    localFilters={localFilters}\n                                    setLocalFilters={setLocalFilters}\n                                />\n                            </HorizontalStack>\n                        </Box>\n                    </Card>\n\n                    <Layout>\n                        <HeadlineAnalyticsCard\n                            title={METRIC_NAMES.revenue}\n                            tooltip=\"This is the total revenue generated by AfterSell.\"\n                            data={data.revenue}\n                            loading={queryResult.isLoading}\n                            formatter={formatCurrency}\n                            image={RevenueImage}\n                        />\n                        <HeadlineAnalyticsCard\n                            title={METRIC_NAMES.impressions}\n                            tooltip=\"An impressions is a view of an AfterSell page.\"\n                            data={data.impressions}\n                            loading={queryResult.isLoading}\n                            formatter={formatInteger}\n                            image={ImpressionsImage}\n                        />\n                        <HeadlineAnalyticsCard\n                            title={METRIC_NAMES.acceptedOffers}\n                            tooltip=\"This shows the total number of AfterSell offers that were accepted.\"\n                            data={data.acceptedOffers}\n                            loading={queryResult.isLoading}\n                            formatter={formatInteger}\n                            image={AcceptedOffersImage}\n                        />\n\n                        <LineChartCard\n                            title={METRIC_NAMES.revenue}\n                            tooltip=\"This is the total revenue generated by AfterSell.\"\n                            data={data.revenue}\n                            loading={queryResult.isLoading}\n                            formatter=",
                "filename": "web/client/src/pages/analytics/analytics.page.tsx",
                "start_index": 7923,
                "end_index": 10912,
                "start_line": 181,
                "end_line": 688,
                "max_line": 961,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "const SettingsRokt = () => {\n    const roktVerticalsQuery = useRoktVerticals();\n    const roktPlacementSettingsQuery = useRoktPlacementSettings();\n    const roktCurrentAccountVerticalQuery = useRoktCurrentAccountVertical();\n    const roktPayoutInvoicesQuery = useRoktPayoutInvoices();\n    const roktAccountQuery = useRoktAccount();\n    const roktPaymentMethodQuery = useRoktPaymentMethod();\n\n    if (\n        !roktVerticalsQuery.data ||\n        !roktPlacementSettingsQuery.data ||\n        !roktCurrentAccountVerticalQuery.data ||\n        !roktPayoutInvoicesQuery.data ||\n        !roktAccountQuery.data ||\n        !roktPaymentMethodQuery.data\n    ) {\n        return <Loader />;\n    }\n    return (\n        <SettingsRoktWithData\n            roktVerticals={roktVerticalsQuery.data}\n            roktPlacementSettings={roktPlacementSettingsQuery.data}\n            roktCurrentAccountVertical={roktCurrentAccountVerticalQuery.data}\n            roktPayoutInvoices={roktPayoutInvoicesQuery.data}\n            roktAccount={roktAccountQuery.data}\n            roktPaymentMethod={roktPaymentMethodQuery.data}\n        />\n    );\n};",
                "filename": "web/client/src/pages/settings/settings-rokt.page.tsx",
                "start_index": 1889,
                "end_index": 3003,
                "start_line": 55,
                "end_line": 713,
                "max_line": 795,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export const getAnalytics: Handler = async (req, res) => {\n    const { shop } = (req as any).session;\n\n    const roktAccount = await RoktAccountModel.findOne({ shop });\n    const user = await usersModel.findOne({ myshopify_domain: shop });\n\n    if (!roktAccount) {\n        const response: GetAccountResponseType = {\n            account: { exists: false },\n        };\n        return res.json(GetAccountResponse.parse(response));\n    }\n\n    const appInstallation = await getAppInstallationWrapper({ shop, appInstallationId: roktAccount.appInstallationId });\n\n    if (!appInstallation) {\n        const response: GetAccountResponseType = {\n            account: { exists: false },\n        };\n        return res.json(GetAccountResponse.parse(response));\n    }\n\n    if (!req.query.startDate || !req.query.endDate) {\n        return res.status(400).json('Missing query parameters');\n    }\n\n    //Calculate the compared date range\n    const startDate = new Date(req.query.startDate as string);\n    const endDate = new Date(req.query.endDate as string);\n    const differenceInMilliseconds = endDate.getTime() - startDate.getTime();\n\n    const params: roktApi.ReportingParams = {\n        dateStartUtc: req.query.startDate as string,\n        dateEndUtc: req.query.endDate as string,\n        comparedDateEndUtc: new Date(endDate.getTime() - differenceInMilliseconds).toISOString(),\n        comparedDateStartUtc: new Date(startDate.getTime() - differenceInMilliseconds).toISOString(),\n        currency: user?.currency || 'USD',\n    };\n\n    const reportingOverviewPromise = roktApi.getReportingOverview({\n        appInstallationId: roktAccount.appInstallationId,\n        params,\n    });\n    const demographicsPromise = roktApi.getReportingDemographics({\n        appInstallationId: roktAccount.appInstallationId,\n        params,\n    });\n    const topAdvertisersPromise = roktApi.getTopAdvertisers({\n        appInstallationId: roktAccount.appInstallationId,\n        params,\n    });\n    const topVerticalsPromise = roktApi.getTopVerticals({\n        appInstallationId: roktAccount.appInstallationId,\n        params,\n    });\n\n    const result = await Promise.all([\n        reportingOverviewPromise,\n        demographicsPromise,\n        topAdvertisersPromise,\n        topVerticalsPromise,\n    ]);\n\n    return res.json(result);\n};\n\nexport const getAccountVerticals: Handler = async (req, res) => {\n    const accountVerticals = await roktApi.getTaxonomyVerticalsForAccountCreation();\n\n    return res.json(VerticalsResponse.parse(accountVerticals));\n};\n\nexport const getVerticals: Handler = async (req, res) => {\n    const verticals = await roktApi.getTaxonomyVerticalsForSettings();\n\n    return res.json(VerticalsResponse.parse(verticals));\n};\n\nfunction configListToObj(arr: ConfigurationListType) {\n    return Object.fromEntries(arr.map(({ key, value }) => [key, value]));\n}",
                "filename": "web/server/src/modules/rokt/rokt.controller.ts",
                "start_index": 7041,
                "end_index": 9892,
                "start_line": 207,
                "end_line": 564,
                "max_line": 564,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<RoktAnalyticsCard\n                        key={key}\n                        analyticsKey={key as AnalyticsKey}\n                        title={ANALYTICS_KEY_NAMES[key as AnalyticsKey]}\n                        tooltip={ANALYTICS_KEY_TOOLTIPS[key as AnalyticsKey]}\n                        summaryData={analytics?.[0]?.data}\n                        formatter={getAnalyticsFormatter(key as AnalyticsKey)}\n                        loading={analyticsLoading}\n                    />\n                ))}\n                {/*<Layout.Section fullWidth>*/}\n                {/*<PayoutsTableCard roktPayoutInvoices={roktPayoutInvoices} />*/}\n                {/*</Layout.Section>*/}\n            </Layout>\n            <Box minHeight=\"50px\" />\n        </Page>\n    );\n};\n\nconst RoktAnalyticsCard = ({\n    title,\n    tooltip,\n    analyticsKey,\n    summaryData,\n    formatter,\n    loading,\n}: {\n    title: string;\n    tooltip: string;\n    analyticsKey: AnalyticsKey;\n    summaryData: SummaryData;\n    formatter: DataFormatter;\n    loading?: boolean;\n}) => {\n    return (\n        <Layout.Section oneThird>\n            <Card>\n                <VerticalStack gap=\"1\" align=\"start\" inlineAlign=\"start\">\n                    <HorizontalStack gap=\"2\">\n                        <Text variant=\"bodyMd\" as=\"p\">\n                            {title}\n                        </Text>\n                        <Tooltip\n                            hasUnderline\n                            content={\n                                <Box padding=\"1\">\n                                    <Text as=\"p\" variant=\"bodySm\">\n                                        {tooltip}\n                                    </Text>\n                                </Box>\n                            }\n                        >\n                            <Icon source={InfoMinor as IconSource} color=\"subdued\" />\n                        </Tooltip>\n                    </HorizontalStack>\n                    <TransactionSummaryStatistic\n                        title={title}\n                        data={{\n                            type: 'transactionSummary',\n                            key: analyticsKey,\n                            active: summaryData?.transactionsSummary?.[analyticsKey as AnalyticsKey],\n                            previous: summaryData?.previousTransactionsSummary?.[analyticsKey as AnalyticsKey],\n                        }}\n                        loading={Boolean(loading)}\n                        formatter={formatter}\n                        changeUnits=\"percent\"\n                    />\n                </VerticalStack>\n            </Card>\n        </Layout.Section>\n    );\n};\n\nconst TransactionSummaryStatistic =",
                "filename": "web/client/src/pages/rokt/rokt-analytics.page.tsx",
                "start_index": 2910,
                "end_index": 5588,
                "start_line": 82,
                "end_line": 155,
                "max_line": 468,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import * as Sentry from '@sentry/react';\nimport { Integrations } from '@sentry/tracing';\nimport { Provider as AppBridgeProvider, useAppBridge } from '@shopify/app-bridge-react';\nimport '@shopify/app-bridge-types';\nimport { Fullscreen } from '@shopify/app-bridge/actions';\nimport { AppProvider, Banner, Box, Button, Card, HorizontalStack, Page, Text } from '@shopify/polaris';\nimport '@shopify/polaris/build/esm/styles.css';\nimport enTranslations from '@shopify/polaris/locales/en.json';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport React, { FC, PropsWithChildren, ReactNode, Suspense, lazy, useCallback, useEffect, useState } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Outlet, RouterProvider, createBrowserRouter, useLocation, useNavigate } from 'react-router-dom';\nimport { onCLS, onFID, onLCP } from 'web-vitals';\nimport { useBootIntercom } from './hooks/useBootIntercom';\nimport { useHotjar } from './hooks/useHotjar';\nimport { useIsAdmin } from './hooks/useIsAdmin';\nimport Analytics from './pages/analytics/analytics.page';\nimport CustomApolloProvider from './providers/CustomApolloProvider';\nimport { UserProvider, useCurrentUser } from './providers/UserProvider';\nimport { Loader } from './shared-components/loader';\nimport { getMixpanel } from './tracking/mixpnl';\n\nonCLS(console.log);\nonFID(console.log);\nonLCP(console.log);\n\n// Statically imported pages which are required on page first load. We don't want to dynamically import these\n// since it will cause a waterfall where we need to wait for the first JS file to load before these would start\n// loading. We know that we will need either home or onboarding for the vast majority of users so we can just\n// bundle them in the main JS file.\nimport Home from './pages/home/home.page';\n\nimport { AfterSellPaidFeature } from '#aftersell/common/billing';\nimport { FallbackProps } from 'react-error-boundary/dist/declarations/src/types';\nimport { useFeatureFlagIsEnabled } from './hooks/useFeatureFlagIsEnabled';\nimport Onboarding from './pages/onboarding/onboardingController';\nimport { SupportModeBanner } from './shared-components/support-mode-banner';\nimport { useEmbeddedNavigate } from './hooks/useEmbeddedNavigate';\n\n// Dynamically imported pages which we don't want to include in the main JS file since they are generally not\n// needed on page first load.\nconst Funnels = lazy(() => import('./pages/funnels/funnels.page'));\nconst FunnelCreate = lazy(() => import('./pages/funnels/funnels-create.page'));\nconst FunnelsEditor = lazy(() => import('./pages/funnels/funnels-editor.page'));\nconst FunnelsSteps = lazy(() => import('./pages/funnels/funnels-steps.page'));\nconst TYPageEditor = lazy(() => import('./pages/funnels-ty-page/ty-page-editor.page'));\nconst TYExtensionsEditor = lazy(() => import('./pages/funnels/funnels-ty-extensions.page'));\n\nconst Rokt = lazy(() => import('./pages/rokt/rokt.page'));",
                "filename": "web/client/src/index.tsx",
                "start_index": 0,
                "end_index": 2986,
                "start_line": 1,
                "end_line": 50,
                "max_line": 608,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { Box, Grid, HorizontalStack, Icon, IconSource, SkeletonBodyText, Text, Tooltip } from '@shopify/polaris';\nimport {\n    BuyButtonMajor,\n    CartDownFilledMajor,\n    CartUpMajor,\n    CashDollarFilledMajor,\n    CashDollarMajor,\n    ViewMinor,\n} from '@shopify/polaris-icons';\nimport React from 'react';\n//@ts-expect-error\nimport { formatCurrency } from '#aftersell/common/currency';\nimport { useMoneyFormat } from 'src/hooks/useMoneyFormat';\nimport { AnalyticsData } from 'src/hooks/useAnalytics';\nimport { useFeatureFlagIsEnabled } from 'src/hooks/useFeatureFlagIsEnabled';\n\nexport const OfferCardAnalytics = ({\n    analytics,\n    analyticsLoading,\n}: {\n    analytics: AnalyticsData;\n    analyticsLoading: boolean;\n}) => {\n    const { moneyFormat } = useMoneyFormat();\n    const profitAnalyticsAreEnabled = useFeatureFlagIsEnabled('profitAnalyticsAreEnabled');\n\n    const CustomTooltip = ({ content, children }: { content: string; children: React.ReactNode }) => {\n        return (\n            <Tooltip content={content} hasUnderline>\n                <div style={{ cursor: 'pointer' }}>{children}</div>\n            </Tooltip>\n        );\n    };\n\n    const LoadingText = () => {\n        return (\n            <Box width=\"50px\" padding=\"1\">\n                <SkeletonBodyText lines={1} />\n            </Box>\n        );\n    };\n\n    // We calculate based on impressions here because each offer will only be seen once per visit.\n    // We only care about \"unique visits\" when a customer might see more than one offer and we want\n    // to count it all as one event.\n    const revenuePerVisit =\n        analytics.impressions.overall[0].active > 0\n            ? analytics.revenue.overall[0].active / analytics.impressions.overall[0].active\n            : 0;\n\n    const productProfitPerVisit =\n        analytics.impressions.overall[0].active > 0\n            ? analytics.productProfit.overall[0].active / analytics.impressions.overall[0].active\n            : 0;\n\n    const impressionsMarkup = (\n        <HorizontalStack blockAlign=\"center\" gap=\"1\">\n            <Icon source={ViewMinor as IconSource} />\n            <CustomTooltip content=\"Impressions\">\n                {analyticsLoading ? (\n                    <LoadingText />\n                ) : (\n                    <Text as=\"span\" fontWeight=\"medium\">\n                        {analytics.impressions.overall[0].active}\n                    </Text>\n                )}\n            </CustomTooltip>\n        </HorizontalStack>\n    );\n\n    const conversionRateMarkup = (\n        <HorizontalStack blockAlign=\"center\" gap=\"1\">\n            <Icon source={BuyButtonMajor as IconSource} />\n            <CustomTooltip content=\"Conversion rate\">\n                {analyticsLoading ? (\n                    <LoadingText />\n                ) : (\n                    <Text as=\"span\" fontWeight=\"medium\">\n                        {(analytics.conversionRate.overall[0].active * 100).toFixed(2)}%\n                    </Text>\n                )}\n            </CustomTooltip>",
                "filename": "web/client/src/pages/funnels/components/funnel-steps/offer-card/offer-card-analytics.tsx",
                "start_index": 0,
                "end_index": 2995,
                "start_line": 1,
                "end_line": 145,
                "max_line": 173,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export async function syncShopifyShopSettingsWithRokt({ shopData }: { shopData: any }): Promise<any> {\n    if (!shopData || getIsDev()) {\n        return;\n    }\n\n    const roktAccount = await RoktAccountModel.findOne({ shop: shopData.domain });\n\n    if (!roktAccount?.appInstallationId) {\n        return;\n    }\n\n    //Update rokt account\n    const body: AccountSettingsRequest = {\n        brand: shopData.name,\n        email: shopData.email,\n        websiteUrl: shopData.domain,\n        fullName: shopData.shop_owner,\n        firstName: shopData?.shop_owner.split(' ')?.[0] || '',\n        lastName: shopData?.shop_owner?.split(' ')?.[1] || '',\n        addressLine1: shopData.address1,\n        addressLine2: shopData.address2 || '',\n        city: shopData.city,\n        stateOrProvince: shopData.province || shopData.state || '',\n        postcode: shopData.zip,\n        countryCode: shopData.country_code,\n    };\n\n    await fetch(\n        `https://smb-integration.rokt.com/v1/appinstallations/${roktAccount.appInstallationId}/account-settings`,\n        {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n            body: JSON.stringify(body),\n        }\n    );\n    return;\n}\n\nexport async function getReportingDemographics({\n    appInstallationId,\n    params,\n}: {\n    appInstallationId: string;\n    params: ReportingParams;\n}): Promise<any> {\n    const queryParams = new URLSearchParams({\n        dateStartUtc: params.dateStartUtc,\n        dateEndUtc: params.dateEndUtc,\n        currency: params.currency || 'USD',\n    });\n    const res = await fetch(\n        `https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/reporting/demographics?${queryParams}`,\n        {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n        }\n    );\n    return res.json();\n}\n\nexport async function getTopAdvertisers({\n    appInstallationId,\n    params,\n}: {\n    appInstallationId: string;\n    params: ReportingParams;\n}): Promise<any> {\n    const queryParams = new URLSearchParams({\n        dateStartUtc: params.dateStartUtc,\n        dateEndUtc: params.dateEndUtc,\n    });\n    const res = await fetch(\n        `https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/reporting/top-advertisers?${queryParams}`,\n        {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n        }\n    );\n    return res.json();\n}",
                "filename": "web/server/src/modules/rokt/rokt.api.ts",
                "start_index": 5024,
                "end_index": 7754,
                "start_line": 180,
                "end_line": 522,
                "max_line": 522,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { Banner, List, Text } from '@shopify/polaris';\nimport React from 'react';\nimport type { AfterSellVisibilityEvent } from '../../../../../../server/src/modules/order-browser/order-browser.types';\nimport { Order } from '../../hooks/useOrdersList';\nimport { TimelineLayout } from '../timeline-layout/timeline-layout';\n\nconst roktTimelineEventTitle = (event) => {\n    if (event.type === 'rokt.placement.event') {\n        return event.payload?.subtype\n            ? ROKT_PLACEMENT_EVENT_NAMES[event.payload.subtype as keyof typeof ROKT_PLACEMENT_EVENT_NAMES]\n            : 'Rokt placement event';\n    }\n    return EVENT_NAMES[event.type as keyof typeof EVENT_NAMES] as string;\n};\n\nconst roktTimelineEventSubtitle = (event) => {\n    if (event.type === 'server.rokt.renderIntent') {\n        return event.payload.roktEnabledOnFunnel\n            ? 'Rokt is eligible to be displayed.'\n            : 'Rokt is disabled on this funnel.';\n    }\n    if (event.type === 'rokt.placement.none') {\n        return 'Rokt returned no relevant offers to display to the customer.';\n    }\n};\n\nexport const TimelineRoktAds = ({ order }: { order: Order }) => {\n    return (\n        <TimelineLayout\n            title=\"AfterSell Rokt Ads events\"\n            status={order.aftersell_rokt_ads.status}\n            banners={[<MaybeOverallBanner order={order} />]}\n            events={order.aftersell_rokt_ads.visibility_events\n                .filter((event) => Boolean(EVENT_NAMES[event.type as keyof typeof EVENT_NAMES]))\n                .map((event) => ({\n                    timestamp: event.timestamp,\n                    dot: eventDotColor(event),\n                    title: roktTimelineEventTitle(event),\n                    subtitle: roktTimelineEventSubtitle(event),\n                    banner: <MaybeEventBanner event={event} order={order} />,\n                }))}\n        />\n    );\n};\n\nconst MaybeOverallBanner = ({ order }: { order: Order }) => {",
                "filename": "web/client/src/pages/order-browser/components/timeline-rokt-ads/timeline-rokt-ads.tsx",
                "start_index": 0,
                "end_index": 1932,
                "start_line": 1,
                "end_line": 46,
                "max_line": 143,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<Link\n                                url=\"https://docs.rokt.com/user-guides/rokt-ecommerce/controls/resources/customer-confirmation-emails/\"\n                                target=\"_blank\"\n                            >\n                                Learn more\n                            </Link>\n                        </Text>\n                    }\n                    checked={form.fields.allowPartnerBrandedEmails.value}\n                    onChange={form.fields.allowPartnerBrandedEmails.onChange}\n                />\n            </VerticalStack>\n        </CardForm>\n    );\n};\n\nconst CompanyInformation = ({\n    roktVerticals,\n    roktCurrentAccountVertical,\n}: {\n    roktVerticals: VerticalsResponseType;\n    roktCurrentAccountVertical: GetCurrentAccountVerticalResponseType;\n}) => {\n    const currentAccountVertical = roktVerticals.data.find(\n        (vert) => vert.id === roktCurrentAccountVertical.data.verticalId\n    );\n    const currentAccountSubvertical = currentAccountVertical?.subverticals.find(\n        (subvert) => subvert.id === roktCurrentAccountVertical.data.subverticalId\n    );\n\n    const [modalOpen, setModalOpen] = useState(false);\n\n    return (\n        <>\n            <Card>\n                <VerticalStack gap=\"3\">\n                    <Text as=\"p\" color=\"subdued\">\n                        The vertical and sub-vertical of your store is used by Rokt's machine learning to ensure that\n                        only the most relevant and engaging offers are presented to each individual.\n                    </Tex",
                "filename": "web/client/src/pages/settings/settings-rokt.page.tsx",
                "start_index": 24396,
                "end_index": 25931,
                "start_line": 224,
                "end_line": 708,
                "max_line": 795,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{vertical.name}\n                        </Text>\n                    </Button>\n                </HorizontalStack>\n            </HorizontalStack>\n            <Collapsible id={vertical.id} open={expanded}>\n                <Box paddingInlineStart=\"6\" paddingBlockStart=\"2\">\n                    <HorizontalStack gap=\"2\">\n                        {vertical.subverticals.map((subvertical) => (\n                            <Tag>\n                                <Checkbox\n                                    label={subvertical.name}\n                                    checked={allowedSubverticals.some((subvert) => subvert.id === subvertical.id)}\n                                    onChange={(checked) => {\n                                        const newVerticalPolicies: VerticalPolicy[] = verticalPolicies.map((vertPol) =>\n                                            vertPol.verticalId === Number(subvertical.id)\n                                                ? { ...vertPol, policy: checked ? 0 : 1 }\n                                                : vertPol\n                                        );\n                                        onChangeVerticalPolicies(newVerticalPolicies);\n                                    }}\n                                />\n                            </Tag>\n                        ))}\n                    </HorizontalStack>\n                </Box>\n            </Collapsible>\n        </VerticalStack>\n    );\n};\n\nconst TrafficAllocation = ({\n    roktPlacementSettings,\n}: {\n    roktPlacementSettings: PlacementSettingsModifiedResponseType;\n}) => {\n    const roktUpdatePlacementTrafficControlMutation = useRoktUpdatePlacementTrafficControl();\n\n    const form = useForm({\n        fields: {\n            trafficPercentage: useField(roktPlacementSettings.data.trafficPercentage),\n        },\n        onSubmit: async (values) => {\n            await roktUpdatePlacementTrafficControlMutation.mutateAsync(values);\n            return { status: 'success' as const };\n        },\n        makeCleanAfterSubmit: true,\n    });\n\n    return (\n        <CardForm form={form}>\n            <VerticalStack gap=\"3\">\n                <RangeSlider\n                    label={`Allocation (${form.fields.trafficPercentage.value.toFixed(0)}%)`}\n                    helpText=\"Adjust the percentage of customers who will see the placement.\"\n                    min={0}\n                    max={100}\n                    step={5}\n                    prefix=\"0%\"\n                    suffix=\"100%\"\n                    output\n                    value={form.fields.trafficPercentage.value}\n                    onChange={(val) => form.fields.trafficPercentage.onChange(val as number)}\n                />\n            </VerticalStack>\n        </CardForm>\n    );\n};\n\nconst AfterSellSettings = ({ roktAccount }: { roktAccount: GetAccountResponseType }) => {\n    const updateRoktAfterSellSettingsMutation = useUpdateRoktAfterSellSettings();",
                "filename": "web/client/src/pages/settings/settings-rokt.page.tsx",
                "start_index": 14982,
                "end_index": 17915,
                "start_line": 375,
                "end_line": 445,
                "max_line": 795,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport type {\n    CreateAccountBodyType,\n    CreateAccountResponseType,\n    GetAccountResponseType,\n    GetPaymentMethodResponseType,\n    UpdatePlacementConfigurationModifiedBodyType,\n    UpdatePlacementConfigurationResponseType,\n    UpdatePlacementStatusBodyType,\n    UpdatePlacementStatusResponseType,\n    UpdateRoktAfterSellSettingsBodyType,\n    UpdateRoktAfterSellSettingsResponseType,\n    VerticalsResponseType,\n    UpdatePaymentMethodResponseType,\n    UpdatePaypalEmailBodyType,\n} from '../../../../server/src/modules/rokt/rokt.dtos';\n\nexport function useRoktAccount() {\n    return useQuery<GetAccountResponseType>(['v2/rokt/account']);\n}\n\nexport function useUpdateRoktAfterSellSettings() {\n    const queryClient = useQueryClient();\n\n    return useMutation({\n        mutationFn: async (body: UpdateRoktAfterSellSettingsBodyType) => {\n            const result: UpdateRoktAfterSellSettingsResponseType = await fetch(`/api/v2/rokt/aftersell-settings`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(body),\n            }).then((res) => res.json());\n            return result;\n        },\n        onSettled: (result) => {\n            if (result?.success) {\n                shopify.toast.show('Updated AfterSell settings!', { duration: 3000 });\n                queryClient.setQueryData(['v2/rokt/account'], (old: GetAccountResponseType | undefined) => {\n                    if (!old || !old.account.exists) {\n                        return old;\n                    }\n\n                    return {\n                        ...old,\n                        account: {\n                            ...old.account,\n                            afterSellSettings: {\n                                ...result.afterSellSettings,\n                            },\n                        },\n                    };\n                });\n            } else {\n                shopify.toast.show('Failed to update AfterSell settings.', { isError: true });\n            }\n        },\n    });\n}\n\nexport function useRoktAnalytics(filters: any) {\n    const params = new URLSearchParams(filters);\n    return useQuery<any>([`v2/rokt/analytics?${params}`]);\n}\n\nexport function useRoktAccountCreate() {\n    return useMutation({\n        mutationFn: async (body: CreateAccountBodyType) => {\n            const result: CreateAccountResponseType = await fetch(`/api/v2/rokt/account`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(body),\n            }).then((res) => res.json());\n            return result;\n        },\n    });\n}\n\nexport function useRoktAccountVerticals() {\n    return useQuery<VerticalsResponseType>(['v2/rokt/account-verticals']);\n}",
                "filename": "web/client/src/pages/rokt/rokt.hooks.ts",
                "start_index": 0,
                "end_index": 2942,
                "start_line": 1,
                "end_line": 169,
                "max_line": 169,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "initial_doc_snippets": [
            {
                "code": "<script>\n            !(function (f, b, e, v, n, t, s) {\n                if (f.fbq) return;\n                n = f.fbq = function () {\n                    n.callMethod ? n.callMethod.apply(n, arguments) : n.queue.push(arguments);\n                };\n                if (!f._fbq) f._fbq = n;\n                n.push = n;\n                n.loaded = !0;\n                n.version = '2.0';\n                n.queue = [];\n                t = b.createElement(e);\n                t.async = !0;\n                t.src = v;\n                s = b.getElementsByTagName(e)[0];\n                s.parentNode.insertBefore(t, s);\n            })(window, document, 'script', 'https://connect.facebook.net/en_US/fbevents.js');\n            fbq('init', '895262111044943');\n            fbq('track', 'PageView');\n        </script>\n        <!-- End Facebook Pixel Code -->\n        <!-- Reddit Pixel -->\n        <script>\n            !(function (w, d) {\n                if (!w.rdt) {\n                    var p = (w.rdt = function () {\n                        p.sendEvent ? p.sendEvent.apply(p, arguments) : p.callQueue.push(arguments);\n                    });\n                    p.callQueue = [];\n                    var t = d.createElement('script');\n                    (t.src = 'https://www.redditstatic.com/ads/pixel.js'), (t.async = !0);\n                    var s = d.getElementsByTagName('script')[0];\n                    s.parentNode.insertBefore(t, s);\n                }\n            })(window, document);\n            rdt('init', 't2_dp3wj8bg');\n            rdt('track', 'PageVisit');\n        </script>\n        <!-- End Reddit Pixel -->\n\n        <!-- Dev HMR [START] -->\n        <script type=\"module\">\n            if (!import.meta.env || !import.meta.env.PROD) {\n                // For embedded development, the iframe loads an HTML file from the server. Normally for\n                // development, the HTML file is served by the dev server, which injects the HMR script.\n                // This script adds the HMR script to the iframe to allow HMR in embedded development.\n                const script = document.createElement('script');\n                script.setAttribute('type', 'module');\n                script.setAttribute('src', './src/dev-hmr.ts');\n                document.getElementsByTagName('head')[0].append(script);\n            }\n        </script>\n        <!-- Dev HMR [END] -->\n\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com/\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" crossorigin=\"anonymous\" />\n        <link\n            href=\"https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap\"\n        />\n    </head>",
                "filename": "web/client/index.html",
                "start_index": 6232,
                "end_index": 8924,
                "start_line": 7,
                "end_line": 178,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<html\n    lang=\"en\"\n    dir=\"ltr\"\n    class=\"js desktop page--no-banner page--logo-main page--show page--show card-fields cors svg opacity placeholder no-touchevents displaytable display-table generatedcontent cssanimations flexbox no-flexboxtweener anyflexbox shopemoji floating-labels\"\n>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 0,
                "end_index": 289,
                "start_line": 1,
                "end_line": 6518,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/server` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 999,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<body>\n        <div id=\"root\"></div>\n        <script type=\"module\" src=\"/src/index.tsx\"></script>\n    </body>\n</html>",
                "filename": "web/client/index.html",
                "start_index": 8929,
                "end_index": 9046,
                "start_line": 179,
                "end_line": 183,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<main class=\"main__content\" role=\"main\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245724,
                "end_index": 245764,
                "start_line": 6159,
                "end_line": 6159,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# [[[ --- CLIENT --- ]]]\nFROM node:18.16.1-alpine AS client\nARG SHOPIFY_API_KEY\nENV SHOPIFY_API_KEY=$SHOPIFY_API_KEY\nARG HOST\nENV HOST=$HOST\nARG NODE_ENV\nENV NODE_ENV=$NODE_ENV\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/client/package.json ./web/client/package.json\nCOPY web/client/yarn.lock ./web/client/yarn.lock\nRUN cd web/client && yarn install --frozen-lockfile --production=false\nCOPY extensions-web-common/package.json ./extensions-web-common/package.json\nCOPY extensions-web-common/yarn.lock ./extensions-web-common/yarn.lock\nRUN cd extensions-web-common && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY extensions/post-purchase ./extensions/post-purchase\nCOPY extensions-web-common/post-purchase ./extensions-web-common/post-purchase\nCOPY extensions-web-common/checkout ./extensions-web-common/checkout\nCOPY extensions-web-common/shared ./extensions-web-common/shared\nCOPY extensions-web-common/ty-page ./extensions-web-common/ty-page\nCOPY web/client ./web/client\nRUN cd web/client && yarn build\n\n# [[[ --- TY PAGE --- ]]]\nFROM node:18.16.1-alpine AS ty-page\nARG HOST\nENV HOST=$HOST\nWORKDIR /usr/src/app\nCOPY web/widgets/package.json ./web/widgets/package.json\nCOPY web/widgets/yarn.lock ./web/widgets/yarn.lock\nRUN cd web/widgets && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY web/widgets ./web/widgets\nRUN cd web/widgets && yarn build\n\n# [[[ --- SERVER --- ]]]\nFROM node:18.16.1-alpine AS server\nWORKDIR /usr/src/app\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=false\nCOPY web/server ./web/server\nCOPY web/common ./web/common\nRUN cd web/server && yarn build\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM node:18.16.1-alpine AS final\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=true\nCOPY --from=server /usr/src/app/web/server/build ./web/server/build\nCOPY --from=ty-page /usr/src/app/web/widgets/dist ./web/server/build/server/dist\nCOPY --from=client /usr/src/app/web/client/dist ./web/server/build/server/dist/client\nCOPY package.json ./package.json\nCMD [\"yarn\", \"start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2514,
                "start_line": 1,
                "end_line": 61,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<span class=\"order-summary-toggle__inner\">\n                        <span class=\"order-summary-toggle__icon-wrapper\">\n                            <svg\n                                width=\"20\"\n                                height=\"19\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__icon\"\n                            >\n                                <path\n                                    d=\"M17.178 13.088H5.453c-.454 0-.91-.364-.91-.818L3.727 1.818H0V0h4.544c.455 0 .91.364.91.818l.09 1.272h13.45c.274 0 .547.09.73.364.18.182.27.454.18.727l-1.817 9.18c-.09.455-.455.728-.91.728zM6.27 11.27h10.09l1.454-7.362H5.634l.637 7.362zm.092 7.715c1.004 0 1.818-.813 1.818-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817zm9.18 0c1.004 0 1.817-.813 1.817-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--show\">\n                            <span>Show order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"6\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M.504 1.813l4.358 3.845.496.438.496-.438 4.642-4.096L9.504.438 4.862 4.534h.992L1.496.69.504 1.812z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--hide\">\n                            <span>Hide order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"7\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M6.138.876L5.642.438l-.496.438L.504 4.972l.992 1.124L6.138 2l-.496.436 3.862 3.408.992-1.122L6.138.876z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span\n                            class=\"order-summary-toggle__total-recap total-recap\"\n                            data-order-summary-section=\"toggle-total-recap\"\n                        >\n                            <span class=\"total-recap__final-price\" data-checkout-payment-due-target=\"5073\">$50.73</span>\n                        </span>\n                    </span>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 242214,
                "end_index": 245205,
                "start_line": 6097,
                "end_line": 6446,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <!-- Shopify App Bridge [START] -->\n        <meta name=\"shopify-api-key\" content=\"%SHOPIFY_API_KEY%\" />",
                "filename": "web/client/index.html",
                "start_index": 38,
                "end_index": 156,
                "start_line": 4,
                "end_line": 6,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"sidebar__content\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323532,
                "end_index": 323562,
                "start_line": 6291,
                "end_line": 6291,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"step__sections\">\n                                <div class=\"section\">\n                                    <div class=\"section__header os-header\">\n                                        <svg\n                                            width=\"56\"\n                                            height=\"56\"\n                                            viewBox=\"0 0 56 56\"\n                                            fill=\"none\"\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                            <circle cx=\"28\" cy=\"28\" r=\"26\" stroke=\"#E5E5E5\" stroke-width=\"2.29412\" />\n                                            <path\n                                                fill-rule=\"evenodd\"\n                                                clip-rule=\"evenodd\"\n                                                d=\"M22.4811 37.3603L16.3636 31.3947C15.5663 30.6172 15.5663 29.3605 16.3636 28.583C17.1609 27.8055 18.4497 27.8055 19.247 28.583L23.8066 33.0293L36.6493 18.7538C37.3834 17.9186 38.6701 17.8231 39.5225 18.537C40.379 19.2529 40.4789 20.5056 39.7448 21.3388L25.4706 37.2469C25.1015 37.6685 24.5672 37.9191 24.0003 37.9409C23.3825 37.9429 22.8625 37.7341 22.4811 37.3603Z\"\n                                                fill=\"#008060\"\n                                                stroke=\"#E5E5E5\"\n                                                stroke-width=\"0.764706\"\n                                            />\n                                        </svg>\n                                        <div class=\"os-header__heading\">\n                                            <span class=\"os-order-number\"> Order #1001 </span>\n                                            <h2 class=\"os-header__title\" id=\"main-header\" tabindex=\"-1\">\n                                                Thank you {{Customer Name}}!\n                                            </h2>\n                                        </div>\n                                    </div>\n                                </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245858,
                "end_index": 247957,
                "start_line": 6161,
                "end_line": 6451,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box__row\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318798,
                "end_index": 318828,
                "start_line": 6214,
                "end_line": 6214,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"section__content\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 248049,
                "end_index": 248079,
                "start_line": 6191,
                "end_line": 6215,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"hidden\">\n                            <span class=\"visually-hidden\" id=\"forwarding-external-new-window-message\">\n                                Opens external website in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-new-window-message\">\n                                Opens in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-external-message\">\n                                Opens external website.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"checkout-context-step-one\">\n                                Customer information - Checkout\n                            </span>\n                        </div>\n                    </main>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 322226,
                "end_index": 323078,
                "start_line": 6265,
                "end_line": 6282,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <meta charset=\"utf-8\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n        <meta\n            id=\"thankyoupage_viewport_meta\"\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, user-scalable=0\"\n        />\n        <meta name=\"referrer\" content=\"origin\" />\n\n        <title>Thank you! - Checkout</title>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 294,
                "end_index": 717,
                "start_line": 6,
                "end_line": 16,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<tbody class=\"total-line-table__tbody\">\n                                            <tr class=\"total-line total-line--subtotal\">\n                                                <th class=\"total-line__name\" scope=\"row\">Subtotal</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-subtotal-price-target=\"4299\"\n                                                    >\n                                                        $42.99\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--shipping\">\n                                                <th class=\"total-line__name\" scope=\"row\">\n                                                    <span> Shipping </span>\n                                                </th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-shipping-target=\"0\"\n                                                    >\n                                                        Free\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--taxes\" data-checkout-taxes=\"\">\n                                                <th class=\"total-line__name\" scope=\"row\">Taxes</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-taxes-target=\"774\"\n                                                        >$7.74</span\n                                                    >\n                                                </td>\n                                            </tr>\n                                        </tbody>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 333285,
                "end_index": 335837,
                "start_line": 6396,
                "end_line": 6433,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script defer src=\"./thankyoupage_bundle.js?v2\"></script>\n        <script defer src=\"/apps/aftersell_sdk.bundle.min.js?v2\"></script>\n    </head>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241237,
                "end_index": 241381,
                "start_line": 6073,
                "end_line": 6075,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div\n                            id=\"partial-icon-symbols\"\n                            class=\"icon-symbols\"\n                            data-tg-refresh=\"partial-icon-symbols\"\n                            data-tg-refresh-always=\"true\"\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\">\n                                <symbol id=\"down-arrow\">\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 12 12\">\n                                        <path\n                                            d=\"M10.817 7.624l-4.375 4.2c-.245.235-.64.235-.884 0l-4.375-4.2c-.244-.234-.244-.614 0-.848.245-.235.64-.235.884 0L5.375 9.95V.6c0-.332.28-.6.625-.6s.625.268.625.6v9.35l3.308-3.174c.122-.117.282-.176.442-.176.16 0 .32.06.442.176.244.234.244.614 0 .848\"\n                                        ></path>\n                                    </svg>\n                                </symbol>\n                                <symbol id=\"checkmark\">\n                                    <svg\n                                        xmlns=\"http://www.w3.org/2000/svg\"\n                                        viewBox=\"0 0 50 50\"\n                                        fill=\"none\"\n                                        stroke-width=\"2\"\n                                        class=\"checkmark\"\n                                    >\n                                        <path\n                                            class=\"checkmark__circle\"\n                                            d=\"M25 49c13.255 0 24-10.745 24-24S38.255 1 25 1 1 11.745 1 25s10.745 24 24 24z\"\n                                        ></path>\n                                        <path class=\"checkmark__check\" d=\"M15 24.51l7.307 7.308L35.125 19\"></path>\n                                    </svg>\n                                </symbol>\n                                <symbol id=\"spinner-button\">\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                                        <path\n                                            d=\"M20 10c0 5.523-4.477 10-10 10S0 15.523 0 10 4.477 0 10 0v2c-4.418 0-8 3.582-8 8s3.582 8 8 8 8-3.582 8-8h2z\"\n                                        ></path>\n                                    </svg>\n                                </symbol>\n                            </svg>\n                        </div>\n                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 337185,
                "end_index": 339656,
                "start_line": 6081,
                "end_line": 6493,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box__row content-box__row--no-padding\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 248190,
                "end_index": 248249,
                "start_line": 6193,
                "end_line": 6193,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "intial_documentation_sources": {},
        "external_documentation_snippets": {},
        "mmr_code_snippets_initial": [
            {
                "code": "import {\n    Badge,\n    Box,\n    Button,\n    Card,\n    DataTable,\n    HorizontalStack,\n    Icon,\n    IconSource,\n    Layout,\n    Link,\n    Page,\n    SkeletonBodyText,\n    Text,\n    Tooltip,\n    VerticalStack,\n} from '@shopify/polaris';\nimport { InfoMinor, PageDownMajor } from '@shopify/polaris-icons';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport {\n    ANALYTICS_PRESET_DATE_RANGE_OPTIONS,\n    AnalyticsPresetDateRangeOption,\n    presetDateRange,\n} from 'src/hooks/useAnalytics';\nimport { useEmbeddedNavigate } from 'src/hooks/useEmbeddedNavigate';\nimport { useRoktFormatPaymentThreshold } from 'src/hooks/useRoktFormatPaymentThreshold';\nimport { useRoktPayoutInvoices } from 'src/hooks/useRoktPayoutInvoices';\nimport { DownArrowIcon, FlatLineIcon, UpArrowIcon } from 'src/pages/analytics/analytics.page';\nimport DatePickerPopover from 'src/pages/analytics/components/date-picker-popover';\nimport { Loader } from 'src/shared-components/loader';\nimport type { GetPayoutInvoicesResponseType } from '../../../../server/src/modules/rokt/rokt.dtos';\nimport { useRoktAnalytics } from './rokt.hooks';\nimport { useCurrentUser } from 'src/providers/UserProvider';\n\nconst RoktAnalytics = () => {\n    const roktPayoutInvoicesQuery = useRoktPayoutInvoices();\n\n    if (!roktPayoutInvoicesQuery.data) {\n        return <Loader />;\n    }\n    return <RoktAnalyticsWithData roktPayoutInvoices={roktPayoutInvoicesQuery.data} />;\n};\n\nexport const RoktAnalyticsWithData = ({\n    roktPayoutInvoices,\n}: {\n    roktPayoutInvoices: GetPayoutInvoicesResponseType;\n}) => {\n    const navigate = useEmbeddedNavigate();\n    const [dateRange, setDateRange] = useState<AnalyticsPresetDateRangeOption | undefined>(\n        ANALYTICS_PRESET_DATE_RANGE_OPTIONS[0].value\n    );\n    const [filters, setFilters] = useState(presetDateRange(dateRange ?? ANALYTICS_PRESET_DATE_RANGE_OPTIONS[0].value));\n    const { data: analytics, isLoading: analyticsLoading } = useRoktAnalytics(filters);\n    const { getAnalyticsFormatter } = useFormatAnalytics();\n\n    return (\n        <Page\n            title={'Rokt Network Analytics'}\n            backAction={{\n                content: 'Back',\n                onAction: () => {\n                    navigate('/network');\n                },\n            }}\n            primaryAction={\n                <DatePickerPopover\n                    onSave={(dateStringRange) => {\n                        setFilters((prev) => ({\n                            ...prev,\n                            startDate: dateStringRange.startDate,\n                            endDate: dateStringRange.endDate,\n                        }));\n                    }}\n                    preset={dateRange}\n                    setPreset={(preset) => setDateRange(preset)}\n                />\n            }\n        >\n            <Layout>\n                {Object.keys(ANALYTICS_KEY_NAMES).map((key) => (",
                "filename": "web/client/src/pages/rokt/rokt-analytics.page.tsx",
                "start_index": 0,
                "end_index": 2889,
                "start_line": 1,
                "end_line": 81,
                "max_line": 468,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export async function getTopVerticals({\n    appInstallationId,\n    params,\n}: {\n    appInstallationId: string;\n    params: ReportingParams;\n}): Promise<any> {\n    const queryParams = new URLSearchParams({\n        dateStartUtc: params.dateStartUtc,\n        dateEndUtc: params.dateEndUtc,\n    });\n    const res = await fetch(\n        `https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/reporting/top-verticals?${queryParams}`,\n        {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n        }\n    );\n    return res.json();\n}\n\nexport async function getTaxonomyVerticalsForAccountCreation(): Promise<VerticalsResponseType> {\n    return fetch(`https://smb-integration.rokt.com/v1/taxonomy/account-verticals`, {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n        },\n    }).then((res) => {\n        return res.json();\n    });\n}\n\nexport async function getTaxonomyVerticalsForSettings(): Promise<VerticalsResponseType> {\n    return fetch(`https://smb-integration.rokt.com/v1/taxonomy/verticals`, {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n        },\n    }).then((res) => res.json());\n}\n\nexport async function getPlacementSettings({\n    appInstallationId,\n}: {\n    appInstallationId: string;\n}): Promise<PlacementSettingsApiResponseType> {\n    return fetch(`https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/placements/settings`, {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n        },\n    }).then((res) => res.json());\n}\n\nexport async function updatePlacementControls({\n    appInstallationId,\n    body,\n}: {\n    appInstallationId: string;\n    body: UpdatePlacementControlsBodyType;\n}): Promise<UpdatePlacementControlsResponseType> {\n    const res = await fetch(\n        `https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/placements/controls`,\n        {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n            body: JSON.stringify(body),\n        }\n    );\n    const success = res.status === 204;\n    if (success) {\n        return { success: true };\n    } else {\n        const responseText = await res.text();\n        return {\n            success: false,\n            error: responseText,\n        };\n    }\n}",
                "filename": "web/server/src/modules/rokt/rokt.api.ts",
                "start_index": 7756,
                "end_index": 10519,
                "start_line": 268,
                "end_line": 522,
                "max_line": 522,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{setLocalFilters}\n                                />\n                                <Filter\n                                    offerType=\"upsell_2\"\n                                    tooltip=\"This is the upsell shown if the first 1-click upsell is accepted.\"\n                                    localFilters={localFilters}\n                                    setLocalFilters={setLocalFilters}\n                                />\n                                <Filter\n                                    offerType=\"downsell\"\n                                    tooltip=\"This is the upsell shown if the first 1-click upsell is declined.\"\n                                    localFilters={localFilters}\n                                    setLocalFilters={setLocalFilters}\n                                />\n                                <Filter\n                                    offerType=\"ty_page\"\n                                    tooltip=\"This is for any upsell offers & content on the thank you page.\"\n                                    localFilters={localFilters}\n                                    setLocalFilters={setLocalFilters}\n                                />\n                            </HorizontalStack>\n                        </Box>\n                    </Card>\n\n                    <Layout>\n                        <HeadlineAnalyticsCard\n                            title={METRIC_NAMES.revenue}\n                            tooltip=\"This is the total revenue generated by AfterSell.\"\n                            data={data.revenue}\n                            loading={queryResult.isLoading}\n                            formatter={formatCurrency}\n                            image={RevenueImage}\n                        />\n                        <HeadlineAnalyticsCard\n                            title={METRIC_NAMES.impressions}\n                            tooltip=\"An impressions is a view of an AfterSell page.\"\n                            data={data.impressions}\n                            loading={queryResult.isLoading}\n                            formatter={formatInteger}\n                            image={ImpressionsImage}\n                        />\n                        <HeadlineAnalyticsCard\n                            title={METRIC_NAMES.acceptedOffers}\n                            tooltip=\"This shows the total number of AfterSell offers that were accepted.\"\n                            data={data.acceptedOffers}\n                            loading={queryResult.isLoading}\n                            formatter={formatInteger}\n                            image={AcceptedOffersImage}\n                        />\n\n                        <LineChartCard\n                            title={METRIC_NAMES.revenue}\n                            tooltip=\"This is the total revenue generated by AfterSell.\"\n                            data={data.revenue}\n                            loading={queryResult.isLoading}\n                            formatter=",
                "filename": "web/client/src/pages/analytics/analytics.page.tsx",
                "start_index": 7923,
                "end_index": 10912,
                "start_line": 181,
                "end_line": 688,
                "max_line": 961,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<Link\n                                url=\"https://docs.rokt.com/user-guides/rokt-ecommerce/controls/resources/customer-confirmation-emails/\"\n                                target=\"_blank\"\n                            >\n                                Learn more\n                            </Link>\n                        </Text>\n                    }\n                    checked={form.fields.allowPartnerBrandedEmails.value}\n                    onChange={form.fields.allowPartnerBrandedEmails.onChange}\n                />\n            </VerticalStack>\n        </CardForm>\n    );\n};\n\nconst CompanyInformation = ({\n    roktVerticals,\n    roktCurrentAccountVertical,\n}: {\n    roktVerticals: VerticalsResponseType;\n    roktCurrentAccountVertical: GetCurrentAccountVerticalResponseType;\n}) => {\n    const currentAccountVertical = roktVerticals.data.find(\n        (vert) => vert.id === roktCurrentAccountVertical.data.verticalId\n    );\n    const currentAccountSubvertical = currentAccountVertical?.subverticals.find(\n        (subvert) => subvert.id === roktCurrentAccountVertical.data.subverticalId\n    );\n\n    const [modalOpen, setModalOpen] = useState(false);\n\n    return (\n        <>\n            <Card>\n                <VerticalStack gap=\"3\">\n                    <Text as=\"p\" color=\"subdued\">\n                        The vertical and sub-vertical of your store is used by Rokt's machine learning to ensure that\n                        only the most relevant and engaging offers are presented to each individual.\n                    </Tex",
                "filename": "web/client/src/pages/settings/settings-rokt.page.tsx",
                "start_index": 24396,
                "end_index": 25931,
                "start_line": 224,
                "end_line": 708,
                "max_line": 795,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { Banner, List, Text } from '@shopify/polaris';\nimport React from 'react';\nimport type { AfterSellVisibilityEvent } from '../../../../../../server/src/modules/order-browser/order-browser.types';\nimport { Order } from '../../hooks/useOrdersList';\nimport { TimelineLayout } from '../timeline-layout/timeline-layout';\n\nconst roktTimelineEventTitle = (event) => {\n    if (event.type === 'rokt.placement.event') {\n        return event.payload?.subtype\n            ? ROKT_PLACEMENT_EVENT_NAMES[event.payload.subtype as keyof typeof ROKT_PLACEMENT_EVENT_NAMES]\n            : 'Rokt placement event';\n    }\n    return EVENT_NAMES[event.type as keyof typeof EVENT_NAMES] as string;\n};\n\nconst roktTimelineEventSubtitle = (event) => {\n    if (event.type === 'server.rokt.renderIntent') {\n        return event.payload.roktEnabledOnFunnel\n            ? 'Rokt is eligible to be displayed.'\n            : 'Rokt is disabled on this funnel.';\n    }\n    if (event.type === 'rokt.placement.none') {\n        return 'Rokt returned no relevant offers to display to the customer.';\n    }\n};\n\nexport const TimelineRoktAds = ({ order }: { order: Order }) => {\n    return (\n        <TimelineLayout\n            title=\"AfterSell Rokt Ads events\"\n            status={order.aftersell_rokt_ads.status}\n            banners={[<MaybeOverallBanner order={order} />]}\n            events={order.aftersell_rokt_ads.visibility_events\n                .filter((event) => Boolean(EVENT_NAMES[event.type as keyof typeof EVENT_NAMES]))\n                .map((event) => ({\n                    timestamp: event.timestamp,\n                    dot: eventDotColor(event),\n                    title: roktTimelineEventTitle(event),\n                    subtitle: roktTimelineEventSubtitle(event),\n                    banner: <MaybeEventBanner event={event} order={order} />,\n                }))}\n        />\n    );\n};\n\nconst MaybeOverallBanner = ({ order }: { order: Order }) => {",
                "filename": "web/client/src/pages/order-browser/components/timeline-rokt-ads/timeline-rokt-ads.tsx",
                "start_index": 0,
                "end_index": 1932,
                "start_line": 1,
                "end_line": 46,
                "max_line": 143,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "const SettingsRokt = () => {\n    const roktVerticalsQuery = useRoktVerticals();\n    const roktPlacementSettingsQuery = useRoktPlacementSettings();\n    const roktCurrentAccountVerticalQuery = useRoktCurrentAccountVertical();\n    const roktPayoutInvoicesQuery = useRoktPayoutInvoices();\n    const roktAccountQuery = useRoktAccount();\n    const roktPaymentMethodQuery = useRoktPaymentMethod();\n\n    if (\n        !roktVerticalsQuery.data ||\n        !roktPlacementSettingsQuery.data ||\n        !roktCurrentAccountVerticalQuery.data ||\n        !roktPayoutInvoicesQuery.data ||\n        !roktAccountQuery.data ||\n        !roktPaymentMethodQuery.data\n    ) {\n        return <Loader />;\n    }\n    return (\n        <SettingsRoktWithData\n            roktVerticals={roktVerticalsQuery.data}\n            roktPlacementSettings={roktPlacementSettingsQuery.data}\n            roktCurrentAccountVertical={roktCurrentAccountVerticalQuery.data}\n            roktPayoutInvoices={roktPayoutInvoicesQuery.data}\n            roktAccount={roktAccountQuery.data}\n            roktPaymentMethod={roktPaymentMethodQuery.data}\n        />\n    );\n};",
                "filename": "web/client/src/pages/settings/settings-rokt.page.tsx",
                "start_index": 1889,
                "end_index": 3003,
                "start_line": 55,
                "end_line": 713,
                "max_line": 795,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<Page\n            title=\"Rokt Network\"\n            secondaryActions={[\n                {\n                    content: 'Manage settings',\n                    onAction: () => {\n                        navigate(ROUTES.SETTINGS_ROKT_NETWORK.path);\n                    },\n                },\n                {\n                    content: 'View analytics',\n                    onAction: () => {\n                        navigate(ROUTES.ROKT_NETWORK_ANALYTICS.path);\n                    },\n                },\n            ]}\n            // backAction={{\n            //     onAction: () => {\n            //         navigate('/');\n            //     },\n            // }}\n        >\n            <Layout>\n                <Layout.Section fullWidth>\n                    <EnableDisable roktPlacementSettings={roktPlacementSettings} />\n                </Layout.Section>\n                <Layout.Section oneThird>\n                    <VerticalStack gap=\"4\">\n                        <Card>\n                            <Group title=\"Layout\">\n                                <Subgroup title=\"Thank you page\">\n                                    <ConfigurationSelect\n                                        configurationForm={tyConfigurationForm}\n                                        setPlacementTypeTab={setPlacementTypeTab}\n                                    />\n                                </Subgroup>\n                                <Subgroup title=\"Order status page\">\n                                    <ConfigurationSelect\n                                        configurationForm={ospConfigurationForm}\n                                        setPlacementTypeTab={setPlacementTypeTab}\n                                    />\n                                </Subgroup>\n                            </Group>\n                        </Card>\n                        <Card padding=\"0\">\n                            <Tabs\n                                tabs={TABS}\n                                selected={TABS.findIndex((tab) => tab.id === String(placementTypeTab))}\n                                onSelect={(selectedTabIndex) =>\n                                    setPlacementTypeTab(Number(TABS[selectedTabIndex].id) as PlacementType)\n                                }\n                                fitted\n                            />\n                            <Box paddingInlineStart=\"4\" paddingInlineEnd=\"4\" paddingBlockEnd=\"4\">\n                                <VerticalStack gap=\"5\">\n                                    {placementTypeTab === PlacementType.Overlay && (",
                "filename": "web/client/src/pages/rokt/rokt.page.tsx",
                "start_index": 10721,
                "end_index": 13289,
                "start_line": 204,
                "end_line": 259,
                "max_line": 1493,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import * as Sentry from '@sentry/react';\nimport { Integrations } from '@sentry/tracing';\nimport { Provider as AppBridgeProvider, useAppBridge } from '@shopify/app-bridge-react';\nimport '@shopify/app-bridge-types';\nimport { Fullscreen } from '@shopify/app-bridge/actions';\nimport { AppProvider, Banner, Box, Button, Card, HorizontalStack, Page, Text } from '@shopify/polaris';\nimport '@shopify/polaris/build/esm/styles.css';\nimport enTranslations from '@shopify/polaris/locales/en.json';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport React, { FC, PropsWithChildren, ReactNode, Suspense, lazy, useCallback, useEffect, useState } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Outlet, RouterProvider, createBrowserRouter, useLocation, useNavigate } from 'react-router-dom';\nimport { onCLS, onFID, onLCP } from 'web-vitals';\nimport { useBootIntercom } from './hooks/useBootIntercom';\nimport { useHotjar } from './hooks/useHotjar';\nimport { useIsAdmin } from './hooks/useIsAdmin';\nimport Analytics from './pages/analytics/analytics.page';\nimport CustomApolloProvider from './providers/CustomApolloProvider';\nimport { UserProvider, useCurrentUser } from './providers/UserProvider';\nimport { Loader } from './shared-components/loader';\nimport { getMixpanel } from './tracking/mixpnl';\n\nonCLS(console.log);\nonFID(console.log);\nonLCP(console.log);\n\n// Statically imported pages which are required on page first load. We don't want to dynamically import these\n// since it will cause a waterfall where we need to wait for the first JS file to load before these would start\n// loading. We know that we will need either home or onboarding for the vast majority of users so we can just\n// bundle them in the main JS file.\nimport Home from './pages/home/home.page';\n\nimport { AfterSellPaidFeature } from '#aftersell/common/billing';\nimport { FallbackProps } from 'react-error-boundary/dist/declarations/src/types';\nimport { useFeatureFlagIsEnabled } from './hooks/useFeatureFlagIsEnabled';\nimport Onboarding from './pages/onboarding/onboardingController';\nimport { SupportModeBanner } from './shared-components/support-mode-banner';\nimport { useEmbeddedNavigate } from './hooks/useEmbeddedNavigate';\n\n// Dynamically imported pages which we don't want to include in the main JS file since they are generally not\n// needed on page first load.\nconst Funnels = lazy(() => import('./pages/funnels/funnels.page'));\nconst FunnelCreate = lazy(() => import('./pages/funnels/funnels-create.page'));\nconst FunnelsEditor = lazy(() => import('./pages/funnels/funnels-editor.page'));\nconst FunnelsSteps = lazy(() => import('./pages/funnels/funnels-steps.page'));\nconst TYPageEditor = lazy(() => import('./pages/funnels-ty-page/ty-page-editor.page'));\nconst TYExtensionsEditor = lazy(() => import('./pages/funnels/funnels-ty-extensions.page'));\n\nconst Rokt = lazy(() => import('./pages/rokt/rokt.page'));",
                "filename": "web/client/src/index.tsx",
                "start_index": 0,
                "end_index": 2986,
                "start_line": 1,
                "end_line": 50,
                "max_line": 608,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{vertical.name}\n                        </Text>\n                    </Button>\n                </HorizontalStack>\n            </HorizontalStack>\n            <Collapsible id={vertical.id} open={expanded}>\n                <Box paddingInlineStart=\"6\" paddingBlockStart=\"2\">\n                    <HorizontalStack gap=\"2\">\n                        {vertical.subverticals.map((subvertical) => (\n                            <Tag>\n                                <Checkbox\n                                    label={subvertical.name}\n                                    checked={allowedSubverticals.some((subvert) => subvert.id === subvertical.id)}\n                                    onChange={(checked) => {\n                                        const newVerticalPolicies: VerticalPolicy[] = verticalPolicies.map((vertPol) =>\n                                            vertPol.verticalId === Number(subvertical.id)\n                                                ? { ...vertPol, policy: checked ? 0 : 1 }\n                                                : vertPol\n                                        );\n                                        onChangeVerticalPolicies(newVerticalPolicies);\n                                    }}\n                                />\n                            </Tag>\n                        ))}\n                    </HorizontalStack>\n                </Box>\n            </Collapsible>\n        </VerticalStack>\n    );\n};\n\nconst TrafficAllocation = ({\n    roktPlacementSettings,\n}: {\n    roktPlacementSettings: PlacementSettingsModifiedResponseType;\n}) => {\n    const roktUpdatePlacementTrafficControlMutation = useRoktUpdatePlacementTrafficControl();\n\n    const form = useForm({\n        fields: {\n            trafficPercentage: useField(roktPlacementSettings.data.trafficPercentage),\n        },\n        onSubmit: async (values) => {\n            await roktUpdatePlacementTrafficControlMutation.mutateAsync(values);\n            return { status: 'success' as const };\n        },\n        makeCleanAfterSubmit: true,\n    });\n\n    return (\n        <CardForm form={form}>\n            <VerticalStack gap=\"3\">\n                <RangeSlider\n                    label={`Allocation (${form.fields.trafficPercentage.value.toFixed(0)}%)`}\n                    helpText=\"Adjust the percentage of customers who will see the placement.\"\n                    min={0}\n                    max={100}\n                    step={5}\n                    prefix=\"0%\"\n                    suffix=\"100%\"\n                    output\n                    value={form.fields.trafficPercentage.value}\n                    onChange={(val) => form.fields.trafficPercentage.onChange(val as number)}\n                />\n            </VerticalStack>\n        </CardForm>\n    );\n};\n\nconst AfterSellSettings = ({ roktAccount }: { roktAccount: GetAccountResponseType }) => {\n    const updateRoktAfterSellSettingsMutation = useUpdateRoktAfterSellSettings();",
                "filename": "web/client/src/pages/settings/settings-rokt.page.tsx",
                "start_index": 14982,
                "end_index": 17915,
                "start_line": 375,
                "end_line": 445,
                "max_line": 795,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { Card, DataTable, Pagination, Text, VerticalStack } from '@shopify/polaris';\nimport React, { FC, useEffect, useMemo, useState } from 'react';\n// @ts-ignore\nimport { cleanProductTitle } from '#aftersell/common/products';\nimport { useTopProductAnalytics } from 'src/hooks/useTopProductAnalytics';\nimport type {\n    AnalyticsTopProductsFiltersType,\n    AnalyticsTopProductsOfferType,\n    AnalyticsTopProductsResponseType,\n    TopProductMultiOfferAnalyticsType,\n    TopProductSingleOfferAnalyticsType,\n} from '../../../../server/src/modules/analytics/analytics.dtos';\nimport styles from './styles.module.scss';\nimport { useFormatCurrency } from 'src/hooks/useFormatCurrency';\n\nfunction isSingleOfferType(\n    arg: TopProductSingleOfferAnalyticsType | TopProductMultiOfferAnalyticsType,\n    isSingleOffer: boolean\n): arg is TopProductSingleOfferAnalyticsType {\n    return isSingleOffer;\n}\n\nexport const TopPerformingProducts: FC<{\n    analyticsFilter: Omit<AnalyticsTopProductsFiltersType, 'page' | 'limit'>;\n    isSingleOffer?: boolean;\n    showTitle?: boolean;\n    prepareStart?: boolean;\n}> = ({ analyticsFilter, isSingleOffer = false, showTitle = true, prepareStart = true }) => {\n    const [page, setPage] = useState(1);\n    const { formatCurrency } = useFormatCurrency();\n\n    useEffect(() => {\n        setPage(1);\n    }, [analyticsFilter]);\n\n    const options = useMemo(() => {\n        return { ...analyticsFilter, page, limit: 5 };\n    }, [page, analyticsFilter]);\n\n    const { data: fetchedData = {} as AnalyticsTopProductsResponseType, isPreviousData: disable } =\n        useTopProductAnalytics(options, { prepareStart });\n\n    const { data: products = [], metadata: { limit = 1, page: queryPage = 1, total = 0 } = {} } = fetchedData;\n\n    const rows = products.map((item) =>\n        isSingleOfferType(item, isSingleOffer)\n            ? getSingleOfferRow({ item, formatCurrency })\n            : getMultiOfferRow({ item, formatCurrency })\n    );\n\n    const upperAmount = useMemo(() => {\n        const upper = limit * queryPage;\n        return (total < upper ? total : upper) || 0;\n    }, [limit, queryPage, total]);\n    const lowerAmount = useMemo(() => limit * (queryPage - 1) + 1 || 0, [limit, queryPage]);\n\n    return (\n        <VerticalStack gap=\"4\">\n            {showTitle && (\n                <Text variant=\"headingLg\" as=\"h5\">\n                    Top performing products\n                </Text>\n            )}\n            <Card padding=\"0\">\n                <DataTable\n                    columnContentTypes={\n                        isSingleOffer\n                            ? ['text', 'numeric', 'numeric']\n                            : ['text', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric']\n                    }\n                    headings={\n                        isSingleOffer\n                            ? ['Product name', 'Conversion Rate', 'Revenue']\n                            : ['Product name', 'Upsell #1', 'Upsell #2', 'Downsell', 'Thank you page', 'Revenue']",
                "filename": "web/client/src/shared-components/top-performing-products/top-performing-products.tsx",
                "start_index": 0,
                "end_index": 3002,
                "start_line": 1,
                "end_line": 74,
                "max_line": 155,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "reranked_doc_snippets_initial": [
            {
                "code": "<script>\n            !(function (f, b, e, v, n, t, s) {\n                if (f.fbq) return;\n                n = f.fbq = function () {\n                    n.callMethod ? n.callMethod.apply(n, arguments) : n.queue.push(arguments);\n                };\n                if (!f._fbq) f._fbq = n;\n                n.push = n;\n                n.loaded = !0;\n                n.version = '2.0';\n                n.queue = [];\n                t = b.createElement(e);\n                t.async = !0;\n                t.src = v;\n                s = b.getElementsByTagName(e)[0];\n                s.parentNode.insertBefore(t, s);\n            })(window, document, 'script', 'https://connect.facebook.net/en_US/fbevents.js');\n            fbq('init', '895262111044943');\n            fbq('track', 'PageView');\n        </script>\n        <!-- End Facebook Pixel Code -->\n        <!-- Reddit Pixel -->\n        <script>\n            !(function (w, d) {\n                if (!w.rdt) {\n                    var p = (w.rdt = function () {\n                        p.sendEvent ? p.sendEvent.apply(p, arguments) : p.callQueue.push(arguments);\n                    });\n                    p.callQueue = [];\n                    var t = d.createElement('script');\n                    (t.src = 'https://www.redditstatic.com/ads/pixel.js'), (t.async = !0);\n                    var s = d.getElementsByTagName('script')[0];\n                    s.parentNode.insertBefore(t, s);\n                }\n            })(window, document);\n            rdt('init', 't2_dp3wj8bg');\n            rdt('track', 'PageVisit');\n        </script>\n        <!-- End Reddit Pixel -->\n\n        <!-- Dev HMR [START] -->\n        <script type=\"module\">\n            if (!import.meta.env || !import.meta.env.PROD) {\n                // For embedded development, the iframe loads an HTML file from the server. Normally for\n                // development, the HTML file is served by the dev server, which injects the HMR script.\n                // This script adds the HMR script to the iframe to allow HMR in embedded development.\n                const script = document.createElement('script');\n                script.setAttribute('type', 'module');\n                script.setAttribute('src', './src/dev-hmr.ts');\n                document.getElementsByTagName('head')[0].append(script);\n            }\n        </script>\n        <!-- Dev HMR [END] -->\n\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com/\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" crossorigin=\"anonymous\" />\n        <link\n            href=\"https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap\"\n        />\n    </head>",
                "filename": "web/client/index.html",
                "start_index": 6232,
                "end_index": 8924,
                "start_line": 7,
                "end_line": 178,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<html\n    lang=\"en\"\n    dir=\"ltr\"\n    class=\"js desktop page--no-banner page--logo-main page--show page--show card-fields cors svg opacity placeholder no-touchevents displaytable display-table generatedcontent cssanimations flexbox no-flexboxtweener anyflexbox shopemoji floating-labels\"\n>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 0,
                "end_index": 289,
                "start_line": 1,
                "end_line": 6518,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/server` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 999,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<body>\n        <div id=\"root\"></div>\n        <script type=\"module\" src=\"/src/index.tsx\"></script>\n    </body>\n</html>",
                "filename": "web/client/index.html",
                "start_index": 8929,
                "end_index": 9046,
                "start_line": 179,
                "end_line": 183,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<main class=\"main__content\" role=\"main\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245724,
                "end_index": 245764,
                "start_line": 6159,
                "end_line": 6159,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# [[[ --- CLIENT --- ]]]\nFROM node:18.16.1-alpine AS client\nARG SHOPIFY_API_KEY\nENV SHOPIFY_API_KEY=$SHOPIFY_API_KEY\nARG HOST\nENV HOST=$HOST\nARG NODE_ENV\nENV NODE_ENV=$NODE_ENV\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/client/package.json ./web/client/package.json\nCOPY web/client/yarn.lock ./web/client/yarn.lock\nRUN cd web/client && yarn install --frozen-lockfile --production=false\nCOPY extensions-web-common/package.json ./extensions-web-common/package.json\nCOPY extensions-web-common/yarn.lock ./extensions-web-common/yarn.lock\nRUN cd extensions-web-common && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY extensions/post-purchase ./extensions/post-purchase\nCOPY extensions-web-common/post-purchase ./extensions-web-common/post-purchase\nCOPY extensions-web-common/checkout ./extensions-web-common/checkout\nCOPY extensions-web-common/shared ./extensions-web-common/shared\nCOPY extensions-web-common/ty-page ./extensions-web-common/ty-page\nCOPY web/client ./web/client\nRUN cd web/client && yarn build\n\n# [[[ --- TY PAGE --- ]]]\nFROM node:18.16.1-alpine AS ty-page\nARG HOST\nENV HOST=$HOST\nWORKDIR /usr/src/app\nCOPY web/widgets/package.json ./web/widgets/package.json\nCOPY web/widgets/yarn.lock ./web/widgets/yarn.lock\nRUN cd web/widgets && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY web/widgets ./web/widgets\nRUN cd web/widgets && yarn build\n\n# [[[ --- SERVER --- ]]]\nFROM node:18.16.1-alpine AS server\nWORKDIR /usr/src/app\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=false\nCOPY web/server ./web/server\nCOPY web/common ./web/common\nRUN cd web/server && yarn build\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM node:18.16.1-alpine AS final\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=true\nCOPY --from=server /usr/src/app/web/server/build ./web/server/build\nCOPY --from=ty-page /usr/src/app/web/widgets/dist ./web/server/build/server/dist\nCOPY --from=client /usr/src/app/web/client/dist ./web/server/build/server/dist/client\nCOPY package.json ./package.json\nCMD [\"yarn\", \"start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2514,
                "start_line": 1,
                "end_line": 61,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<span class=\"order-summary-toggle__inner\">\n                        <span class=\"order-summary-toggle__icon-wrapper\">\n                            <svg\n                                width=\"20\"\n                                height=\"19\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__icon\"\n                            >\n                                <path\n                                    d=\"M17.178 13.088H5.453c-.454 0-.91-.364-.91-.818L3.727 1.818H0V0h4.544c.455 0 .91.364.91.818l.09 1.272h13.45c.274 0 .547.09.73.364.18.182.27.454.18.727l-1.817 9.18c-.09.455-.455.728-.91.728zM6.27 11.27h10.09l1.454-7.362H5.634l.637 7.362zm.092 7.715c1.004 0 1.818-.813 1.818-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817zm9.18 0c1.004 0 1.817-.813 1.817-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--show\">\n                            <span>Show order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"6\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M.504 1.813l4.358 3.845.496.438.496-.438 4.642-4.096L9.504.438 4.862 4.534h.992L1.496.69.504 1.812z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--hide\">\n                            <span>Hide order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"7\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M6.138.876L5.642.438l-.496.438L.504 4.972l.992 1.124L6.138 2l-.496.436 3.862 3.408.992-1.122L6.138.876z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span\n                            class=\"order-summary-toggle__total-recap total-recap\"\n                            data-order-summary-section=\"toggle-total-recap\"\n                        >\n                            <span class=\"total-recap__final-price\" data-checkout-payment-due-target=\"5073\">$50.73</span>\n                        </span>\n                    </span>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 242214,
                "end_index": 245205,
                "start_line": 6097,
                "end_line": 6446,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <!-- Shopify App Bridge [START] -->\n        <meta name=\"shopify-api-key\" content=\"%SHOPIFY_API_KEY%\" />",
                "filename": "web/client/index.html",
                "start_index": 38,
                "end_index": 156,
                "start_line": 4,
                "end_line": 6,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"sidebar__content\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323532,
                "end_index": 323562,
                "start_line": 6291,
                "end_line": 6291,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"step__sections\">\n                                <div class=\"section\">\n                                    <div class=\"section__header os-header\">\n                                        <svg\n                                            width=\"56\"\n                                            height=\"56\"\n                                            viewBox=\"0 0 56 56\"\n                                            fill=\"none\"\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                            <circle cx=\"28\" cy=\"28\" r=\"26\" stroke=\"#E5E5E5\" stroke-width=\"2.29412\" />\n                                            <path\n                                                fill-rule=\"evenodd\"\n                                                clip-rule=\"evenodd\"\n                                                d=\"M22.4811 37.3603L16.3636 31.3947C15.5663 30.6172 15.5663 29.3605 16.3636 28.583C17.1609 27.8055 18.4497 27.8055 19.247 28.583L23.8066 33.0293L36.6493 18.7538C37.3834 17.9186 38.6701 17.8231 39.5225 18.537C40.379 19.2529 40.4789 20.5056 39.7448 21.3388L25.4706 37.2469C25.1015 37.6685 24.5672 37.9191 24.0003 37.9409C23.3825 37.9429 22.8625 37.7341 22.4811 37.3603Z\"\n                                                fill=\"#008060\"\n                                                stroke=\"#E5E5E5\"\n                                                stroke-width=\"0.764706\"\n                                            />\n                                        </svg>\n                                        <div class=\"os-header__heading\">\n                                            <span class=\"os-order-number\"> Order #1001 </span>\n                                            <h2 class=\"os-header__title\" id=\"main-header\" tabindex=\"-1\">\n                                                Thank you {{Customer Name}}!\n                                            </h2>\n                                        </div>\n                                    </div>\n                                </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245858,
                "end_index": 247957,
                "start_line": 6161,
                "end_line": 6451,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box__row\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318798,
                "end_index": 318828,
                "start_line": 6214,
                "end_line": 6214,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"section__content\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 248049,
                "end_index": 248079,
                "start_line": 6191,
                "end_line": 6215,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"hidden\">\n                            <span class=\"visually-hidden\" id=\"forwarding-external-new-window-message\">\n                                Opens external website in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-new-window-message\">\n                                Opens in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-external-message\">\n                                Opens external website.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"checkout-context-step-one\">\n                                Customer information - Checkout\n                            </span>\n                        </div>\n                    </main>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 322226,
                "end_index": 323078,
                "start_line": 6265,
                "end_line": 6282,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <meta charset=\"utf-8\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n        <meta\n            id=\"thankyoupage_viewport_meta\"\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, user-scalable=0\"\n        />\n        <meta name=\"referrer\" content=\"origin\" />\n\n        <title>Thank you! - Checkout</title>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 294,
                "end_index": 717,
                "start_line": 6,
                "end_line": 16,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<tbody class=\"total-line-table__tbody\">\n                                            <tr class=\"total-line total-line--subtotal\">\n                                                <th class=\"total-line__name\" scope=\"row\">Subtotal</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-subtotal-price-target=\"4299\"\n                                                    >\n                                                        $42.99\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--shipping\">\n                                                <th class=\"total-line__name\" scope=\"row\">\n                                                    <span> Shipping </span>\n                                                </th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-shipping-target=\"0\"\n                                                    >\n                                                        Free\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--taxes\" data-checkout-taxes=\"\">\n                                                <th class=\"total-line__name\" scope=\"row\">Taxes</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-taxes-target=\"774\"\n                                                        >$7.74</span\n                                                    >\n                                                </td>\n                                            </tr>\n                                        </tbody>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 333285,
                "end_index": 335837,
                "start_line": 6396,
                "end_line": 6433,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script defer src=\"./thankyoupage_bundle.js?v2\"></script>\n        <script defer src=\"/apps/aftersell_sdk.bundle.min.js?v2\"></script>\n    </head>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241237,
                "end_index": 241381,
                "start_line": 6073,
                "end_line": 6075,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div\n                            id=\"partial-icon-symbols\"\n                            class=\"icon-symbols\"\n                            data-tg-refresh=\"partial-icon-symbols\"\n                            data-tg-refresh-always=\"true\"\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\">\n                                <symbol id=\"down-arrow\">\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 12 12\">\n                                        <path\n                                            d=\"M10.817 7.624l-4.375 4.2c-.245.235-.64.235-.884 0l-4.375-4.2c-.244-.234-.244-.614 0-.848.245-.235.64-.235.884 0L5.375 9.95V.6c0-.332.28-.6.625-.6s.625.268.625.6v9.35l3.308-3.174c.122-.117.282-.176.442-.176.16 0 .32.06.442.176.244.234.244.614 0 .848\"\n                                        ></path>\n                                    </svg>\n                                </symbol>\n                                <symbol id=\"checkmark\">\n                                    <svg\n                                        xmlns=\"http://www.w3.org/2000/svg\"\n                                        viewBox=\"0 0 50 50\"\n                                        fill=\"none\"\n                                        stroke-width=\"2\"\n                                        class=\"checkmark\"\n                                    >\n                                        <path\n                                            class=\"checkmark__circle\"\n                                            d=\"M25 49c13.255 0 24-10.745 24-24S38.255 1 25 1 1 11.745 1 25s10.745 24 24 24z\"\n                                        ></path>\n                                        <path class=\"checkmark__check\" d=\"M15 24.51l7.307 7.308L35.125 19\"></path>\n                                    </svg>\n                                </symbol>\n                                <symbol id=\"spinner-button\">\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                                        <path\n                                            d=\"M20 10c0 5.523-4.477 10-10 10S0 15.523 0 10 4.477 0 10 0v2c-4.418 0-8 3.582-8 8s3.582 8 8 8 8-3.582 8-8h2z\"\n                                        ></path>\n                                    </svg>\n                                </symbol>\n                            </svg>\n                        </div>\n                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 337185,
                "end_index": 339656,
                "start_line": 6081,
                "end_line": 6493,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box__row content-box__row--no-padding\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 248190,
                "end_index": 248249,
                "start_line": 6193,
                "end_line": 6193,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "solution_task": {
            "structured_resp": "Understand:\n- The feature request involves updating the Rokt Analytics page to display top advertisers and verticals.\n- The feature is gated by a feature flag `roktIntegrationIsEnabled`.\n- The data for the new UI elements is fetched using the `useRoktAnalytics` hook.\n- The new component `TopAdvertisersAndVerticals` will be used to display the data.\n- The backend API for fetching top advertisers and verticals is already implemented in `rokt.api.ts`.\n\nPlan:\n- Check if the feature flag `roktIntegrationIsEnabled` is enabled before displaying the new component.\n- Fetch the top advertisers and verticals data using the `useRoktAnalytics` hook.\n- Pass the fetched data to the `TopAdvertisersAndVerticals` component.\n- Ensure the `ROKT_INTEGRATION_SECRET_TOKEN` is set in the environment variables.\n- Copy the `dev.public.env.json` to `dev.secrets.env.json` if necessary.\n\nIdentify Tools:\n- React for frontend development.\n- Feature flagging system for `roktIntegrationIsEnabled`.\n- React Query's `useQuery` hook for data fetching.\n- Environment variable management for `ROKT_INTEGRATION_SECRET_TOKEN`.\n\nImplement:\n- Update `rokt-analytics.page.tsx` to include the new `TopAdvertisersAndVerticals` component.\n- Use the `useRoktAnalytics` hook to fetch the required data.\n- Pass the `analytics` and `analyticsLoading` variables as props to the new component.\n- Ensure the feature flag is checked before rendering the new component.\n\n```tsx\n// In rokt-analytics.page.tsx\n\nimport { TopAdvertisersAndVerticals } from 'path-to-component'; // Update with actual path\n\nconst RoktAnalyticsWithData = ({\n    roktPayoutInvoices,\n}: {\n    roktPayoutInvoices: GetPayoutInvoicesResponseType;\n}) => {\n    // ... existing code ...\n\n    const { data: analytics, isLoading: analyticsLoading } = useRoktAnalytics(filters);\n\n    // Feature flag check\n    if (!roktIntegrationIsEnabled) {\n        return <ExistingComponent />; // Render existing components\n    }\n\n    return (\n        <Page\n            // ... existing props ...\n        >\n            <Layout>\n                {/* ... existing components ... */}\n                <TopAdvertisersAndVerticals\n                    analyticsData={analytics}\n                    isLoading={analyticsLoading}\n                />\n            </Layout>\n        </Page>\n    );\n};\n```\n\n- Ensure the `ROKT_INTEGRATION_SECRET_TOKEN` is set in the environment variables, either by checking the `dev.secrets.env.json` or by setting it manually in the deployment configuration.\n- If necessary, copy the `dev.public.env.json` to `dev.secrets.env.json` as per the project's standard procedure for managing environment variables.",
            "response": "To enhance the Rokt Analytics page with new features, we are introducing a component that displays the top advertisers and verticals. This update is contingent on the `roktIntegrationIsEnabled` feature flag and utilizes the `useRoktAnalytics` hook to fetch the necessary data. The backend API is already in place, and the environment must be correctly configured with the `ROKT_INTEGRATION_SECRET_TOKEN`.\n\nHere are the steps to implement the new feature:\n\n- In `rokt-analytics.page.tsx`, import the `TopAdvertisersAndVerticals` component from its respective path.\n- Utilize the `useRoktAnalytics` hook to retrieve the top advertisers and verticals data, assigning the results to `analytics` and `analyticsLoading`.\n- Conditionally render the `TopAdvertisersAndVerticals` component based on the `roktIntegrationIsEnabled` feature flag.\n- Ensure the `ROKT_INTEGRATION_SECRET_TOKEN` is present in the environment variables. If not, follow the project's protocol to update `dev.secrets.env.json` using `dev.public.env.json`.\n\n```tsx\n// In rokt-analytics.page.tsx\n\nimport { TopAdvertisersAndVerticals } from 'path-to-component'; // Replace with the actual path\n\nconst RoktAnalyticsWithData = ({\n    roktPayoutInvoices,\n}: {\n    roktPayoutInvoices: GetPayoutInvoicesResponseType;\n}) => {\n    // ... existing code ...\n\n    const { data: analytics, isLoading: analyticsLoading } = useRoktAnalytics(filters);\n\n    // Check for feature flag before rendering new component\n    if (!roktIntegrationIsEnabled) {\n        return <ExistingComponent />; // Continue rendering existing components\n    }\n\n    return (\n        <Page\n            // ... existing props ...\n        >\n            <Layout>\n                {/* ... existing components ... */}\n                <TopAdvertisersAndVerticals\n                    analyticsData={analytics}\n                    isLoading={analyticsLoading}\n                />\n            </Layout>\n        </Page>\n    );\n};\n```\n- Verify the environment variable setup and make any necessary adjustments to ensure the feature operates correctly in the development environment."
        },
        "snippet_processor_task": {
            "web/client/src/pages/rokt/rokt-analytics.page.tsx": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "Imports various components and hooks, fetches Rokt analytics data, sets up date range filters, and handles UI rendering for Rokt Analytics page.",
                        "snippet": {
                            "code": "import {\n    Badge,\n    Box,\n    Button,\n    Card,\n    DataTable,\n    HorizontalStack,\n    Icon,\n    IconSource,\n    Layout,\n    Link,\n    Page,\n    SkeletonBodyText,\n    Text,\n    Tooltip,\n    VerticalStack,\n} from '@shopify/polaris';\nimport { InfoMinor, PageDownMajor } from '@shopify/polaris-icons';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport {\n    ANALYTICS_PRESET_DATE_RANGE_OPTIONS,\n    AnalyticsPresetDateRangeOption,\n    presetDateRange,\n} from 'src/hooks/useAnalytics';\nimport { useEmbeddedNavigate } from 'src/hooks/useEmbeddedNavigate';\nimport { useRoktFormatPaymentThreshold } from 'src/hooks/useRoktFormatPaymentThreshold';\nimport { useRoktPayoutInvoices } from 'src/hooks/useRoktPayoutInvoices';\nimport { DownArrowIcon, FlatLineIcon, UpArrowIcon } from 'src/pages/analytics/analytics.page';\nimport DatePickerPopover from 'src/pages/analytics/components/date-picker-popover';\nimport { Loader } from 'src/shared-components/loader';\nimport type { GetPayoutInvoicesResponseType } from '../../../../server/src/modules/rokt/rokt.dtos';\nimport { useRoktAnalytics } from './rokt.hooks';\nimport { useCurrentUser } from 'src/providers/UserProvider';\n\nconst RoktAnalytics = () => {\n    const roktPayoutInvoicesQuery = useRoktPayoutInvoices();\n\n    if (!roktPayoutInvoicesQuery.data) {\n        return <Loader />;\n    }\n    return <RoktAnalyticsWithData roktPayoutInvoices={roktPayoutInvoicesQuery.data} />;\n};\n\nexport const RoktAnalyticsWithData = ({\n    roktPayoutInvoices,\n}: {\n    roktPayoutInvoices: GetPayoutInvoicesResponseType;\n}) => {\n    const navigate = useEmbeddedNavigate();\n    const [dateRange, setDateRange] = useState<AnalyticsPresetDateRangeOption | undefined>(\n        ANALYTICS_PRESET_DATE_RANGE_OPTIONS[0].value\n    );\n    const [filters, setFilters] = useState(presetDateRange(dateRange ?? ANALYTICS_PRESET_DATE_RANGE_OPTIONS[0].value));\n    const { data: analytics, isLoading: analyticsLoading } = useRoktAnalytics(filters);\n    const { getAnalyticsFormatter } = useFormatAnalytics();\n\n    return (\n        <Page\n            title={'Rokt Network Analytics'}\n            backAction={{\n                content: 'Back',\n                onAction: () => {\n                    navigate('/network');\n                },\n            }}\n            primaryAction={\n                <DatePickerPopover\n                    onSave={(dateStringRange) => {\n                        setFilters((prev) => ({\n                            ...prev,\n                            startDate: dateStringRange.startDate,\n                            endDate: dateStringRange.endDate,\n                        }));\n                    }}\n                    preset={dateRange}\n                    setPreset={(preset) => setDateRange(preset)}\n                />\n            }\n        >\n            <Layout>\n                {Object.keys(ANALYTICS_KEY_NAMES).map((key) => (",
                            "filename": "web/client/src/pages/rokt/rokt-analytics.page.tsx",
                            "start_index": 0,
                            "end_index": 2889,
                            "start_line": 1,
                            "end_line": 81,
                            "max_line": 468,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet is directly related to the Rokt Analytics page, which is part of the issue. It includes fetching Rokt analytics data and handling UI rendering, which are essential for solving the issue."
                }
            ],
            "web/server/src/modules/rokt/rokt.api.ts": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "Functions for fetching Rokt analytics data and updating placement controls are provided, including necessary headers and authorization using a secret token.",
                        "snippet": {
                            "code": "export async function getTopVerticals({\n    appInstallationId,\n    params,\n}: {\n    appInstallationId: string;\n    params: ReportingParams;\n}): Promise<any> {\n    const queryParams = new URLSearchParams({\n        dateStartUtc: params.dateStartUtc,\n        dateEndUtc: params.dateEndUtc,\n    });\n    const res = await fetch(\n        `https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/reporting/top-verticals?${queryParams}`,\n        {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n        }\n    );\n    return res.json();\n}\n\nexport async function getTaxonomyVerticalsForAccountCreation(): Promise<VerticalsResponseType> {\n    return fetch(`https://smb-integration.rokt.com/v1/taxonomy/account-verticals`, {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n        },\n    }).then((res) => {\n        return res.json();\n    });\n}\n\nexport async function getTaxonomyVerticalsForSettings(): Promise<VerticalsResponseType> {\n    return fetch(`https://smb-integration.rokt.com/v1/taxonomy/verticals`, {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n        },\n    }).then((res) => res.json());\n}\n\nexport async function getPlacementSettings({\n    appInstallationId,\n}: {\n    appInstallationId: string;\n}): Promise<PlacementSettingsApiResponseType> {\n    return fetch(`https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/placements/settings`, {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n        },\n    }).then((res) => res.json());\n}\n\nexport async function updatePlacementControls({\n    appInstallationId,\n    body,\n}: {\n    appInstallationId: string;\n    body: UpdatePlacementControlsBodyType;\n}): Promise<UpdatePlacementControlsResponseType> {\n    const res = await fetch(\n        `https://smb-integration.rokt.com/v2/appinstallations/${appInstallationId}/placements/controls`,\n        {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${envVar('ROKT_INTEGRATION_SECRET_TOKEN')}`,\n            },\n            body: JSON.stringify(body),\n        }\n    );\n    const success = res.status === 204;\n    if (success) {\n        return { success: true };\n    } else {\n        const responseText = await res.text();\n        return {\n            success: false,\n            error: responseText,\n        };\n    }\n}",
                            "filename": "web/server/src/modules/rokt/rokt.api.ts",
                            "start_index": 7756,
                            "end_index": 10519,
                            "start_line": 268,
                            "end_line": 522,
                            "max_line": 522,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet includes functions for fetching Rokt analytics data and mentions the use of a secret token for authorization, which is relevant to the environment variable mentioned in the issue."
                }
            ],
            "web/server/src/modules/rokt/rokt.controller.ts": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "The snippet provides the implementation of fetching Rokt analytics data, including handling requests, calculating date ranges, and making API calls. It also includes functions for getting account verticals and taxonomy verticals, which can be relevant for the feature implementation.",
                        "snippet": {
                            "code": "export const getAnalytics: Handler = async (req, res) => {\n    const { shop } = (req as any).session;\n\n    const roktAccount = await RoktAccountModel.findOne({ shop });\n    const user = await usersModel.findOne({ myshopify_domain: shop });\n\n    if (!roktAccount) {\n        const response: GetAccountResponseType = {\n            account: { exists: false },\n        };\n        return res.json(GetAccountResponse.parse(response));\n    }\n\n    const appInstallation = await getAppInstallationWrapper({ shop, appInstallationId: roktAccount.appInstallationId });\n\n    if (!appInstallation) {\n        const response: GetAccountResponseType = {\n            account: { exists: false },\n        };\n        return res.json(GetAccountResponse.parse(response));\n    }\n\n    if (!req.query.startDate || !req.query.endDate) {\n        return res.status(400).json('Missing query parameters');\n    }\n\n    //Calculate the compared date range\n    const startDate = new Date(req.query.startDate as string);\n    const endDate = new Date(req.query.endDate as string);\n    const differenceInMilliseconds = endDate.getTime() - startDate.getTime();\n\n    const params: roktApi.ReportingParams = {\n        dateStartUtc: req.query.startDate as string,\n        dateEndUtc: req.query.endDate as string,\n        comparedDateEndUtc: new Date(endDate.getTime() - differenceInMilliseconds).toISOString(),\n        comparedDateStartUtc: new Date(startDate.getTime() - differenceInMilliseconds).toISOString(),\n        currency: user?.currency || 'USD',\n    };\n\n    const reportingOverviewPromise = roktApi.getReportingOverview({\n        appInstallationId: roktAccount.appInstallationId,\n        params,\n    });\n    const demographicsPromise = roktApi.getReportingDemographics({\n        appInstallationId: roktAccount.appInstallationId,\n        params,\n    });\n    const topAdvertisersPromise = roktApi.getTopAdvertisers({\n        appInstallationId: roktAccount.appInstallationId,\n        params,\n    });\n    const topVerticalsPromise = roktApi.getTopVerticals({\n        appInstallationId: roktAccount.appInstallationId,\n        params,\n    });\n\n    const result = await Promise.all([\n        reportingOverviewPromise,\n        demographicsPromise,\n        topAdvertisersPromise,\n        topVerticalsPromise,\n    ]);\n\n    return res.json(result);\n};\n\nexport const getAccountVerticals: Handler = async (req, res) => {\n    const accountVerticals = await roktApi.getTaxonomyVerticalsForAccountCreation();\n\n    return res.json(VerticalsResponse.parse(accountVerticals));\n};\n\nexport const getVerticals: Handler = async (req, res) => {\n    const verticals = await roktApi.getTaxonomyVerticalsForSettings();\n\n    return res.json(VerticalsResponse.parse(verticals));\n};\n\nfunction configListToObj(arr: ConfigurationListType) {\n    return Object.fromEntries(arr.map(({ key, value }) => [key, value]));\n}",
                            "filename": "web/server/src/modules/rokt/rokt.controller.ts",
                            "start_index": 7041,
                            "end_index": 9892,
                            "start_line": 207,
                            "end_line": 564,
                            "max_line": 564,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "The snippet provides implementation details for fetching Rokt analytics data, which is necessary for understanding how the analytics data is retrieved and used in the new component."
                }
            ],
            "web/client/src/pages/rokt/rokt.hooks.ts": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "Functions for fetching Rokt account details, updating settings, fetching analytics, creating accounts, and getting verticals are provided. Relevant for understanding data flow and interactions in the Rokt integration feature.",
                        "snippet": {
                            "code": "import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport type {\n    CreateAccountBodyType,\n    CreateAccountResponseType,\n    GetAccountResponseType,\n    GetPaymentMethodResponseType,\n    UpdatePlacementConfigurationModifiedBodyType,\n    UpdatePlacementConfigurationResponseType,\n    UpdatePlacementStatusBodyType,\n    UpdatePlacementStatusResponseType,\n    UpdateRoktAfterSellSettingsBodyType,\n    UpdateRoktAfterSellSettingsResponseType,\n    VerticalsResponseType,\n    UpdatePaymentMethodResponseType,\n    UpdatePaypalEmailBodyType,\n} from '../../../../server/src/modules/rokt/rokt.dtos';\n\nexport function useRoktAccount() {\n    return useQuery<GetAccountResponseType>(['v2/rokt/account']);\n}\n\nexport function useUpdateRoktAfterSellSettings() {\n    const queryClient = useQueryClient();\n\n    return useMutation({\n        mutationFn: async (body: UpdateRoktAfterSellSettingsBodyType) => {\n            const result: UpdateRoktAfterSellSettingsResponseType = await fetch(`/api/v2/rokt/aftersell-settings`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(body),\n            }).then((res) => res.json());\n            return result;\n        },\n        onSettled: (result) => {\n            if (result?.success) {\n                shopify.toast.show('Updated AfterSell settings!', { duration: 3000 });\n                queryClient.setQueryData(['v2/rokt/account'], (old: GetAccountResponseType | undefined) => {\n                    if (!old || !old.account.exists) {\n                        return old;\n                    }\n\n                    return {\n                        ...old,\n                        account: {\n                            ...old.account,\n                            afterSellSettings: {\n                                ...result.afterSellSettings,\n                            },\n                        },\n                    };\n                });\n            } else {\n                shopify.toast.show('Failed to update AfterSell settings.', { isError: true });\n            }\n        },\n    });\n}\n\nexport function useRoktAnalytics(filters: any) {\n    const params = new URLSearchParams(filters);\n    return useQuery<any>([`v2/rokt/analytics?${params}`]);\n}\n\nexport function useRoktAccountCreate() {\n    return useMutation({\n        mutationFn: async (body: CreateAccountBodyType) => {\n            const result: CreateAccountResponseType = await fetch(`/api/v2/rokt/account`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(body),\n            }).then((res) => res.json());\n            return result;\n        },\n    });\n}\n\nexport function useRoktAccountVerticals() {\n    return useQuery<VerticalsResponseType>(['v2/rokt/account-verticals']);\n}",
                            "filename": "web/client/src/pages/rokt/rokt.hooks.ts",
                            "start_index": 0,
                            "end_index": 2942,
                            "start_line": 1,
                            "end_line": 169,
                            "max_line": 169,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet is relevant for understanding the data flow and interactions with the Rokt integration feature, which is necessary for solving the issue."
                }
            ],
            "web/client/src/shared-components/top-performing-products/top-performing-products.tsx": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Imports various components and hooks related to Rokt integration and settings, providing insight into the structure and dependencies of the Rokt feature implementation.",
                        "snippet": {
                            "code": "import { REGEX_ROKT_BLOCKED_DOMAIN } from '#aftersell/common/rokt.common';\nimport {\n    Box,\n    Button,\n    Card,\n    Checkbox,\n    Collapsible,\n    Divider,\n    HorizontalStack,\n    Icon,\n    IconSource,\n    Layout,\n    Link,\n    Modal,\n    Page,\n    RangeSlider,\n    Tag,\n    Text,\n    TextField,\n    Tooltip,\n    VerticalStack,\n} from '@shopify/polaris';\nimport { EditMinor, SidebarLeftMajor, SidebarRightMajor } from '@shopify/polaris-icons';\nimport { useField, useForm } from '@shopify/react-form';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport React, { useMemo, useState } from 'react';\nimport { useEmbeddedNavigate } from 'src/hooks/useEmbeddedNavigate';\nimport { useRoktFormatPaymentThreshold } from 'src/hooks/useRoktFormatPaymentThreshold';\nimport { useRoktPayoutInvoices } from 'src/hooks/useRoktPayoutInvoices';\nimport { useRoktPlacementSettings } from 'src/hooks/useRoktPlacementSettings';\nimport { CardForm } from 'src/shared-components/card-form';\nimport { Loader } from 'src/shared-components/loader';\nimport {\n    GetAccountResponseType,\n    GetCurrentAccountVerticalResponseType,\n    GetPaymentMethodResponseType,\n    GetPayoutInvoicesResponseType,\n    PlacementSettingsModifiedResponseType,\n    UpdatePlacementControlsBodyType,\n    UpdatePlacementControlsResponseType,\n    UpdatePlacementTrafficControlBodyType,\n    UpdatePlacementTrafficControlResponseType,\n    VerticalsResponseType,\n} from '../../../../server/src/modules/rokt/rokt.dtos';\nimport { RoktApiPaymentMethod } from '../../../../server/src/modules/rokt/rokt.dtos';\nimport { useRoktAccountDelete } from './hooks/useRoktAccountDelete';\nimport { AnnotatedLayout } from 'src/shared-components/annotated-layout';\nimport {\n    useRoktAccount,\n    useRoktPaymentMethod,\n    useRoktUpdatePaypalEmail,\n    useUpdateRoktAfterSellSettings,\n} from 'src/pages/rokt/rokt.hooks';",
                            "filename": "web/client/src/pages/settings/settings-rokt.page.tsx",
                            "start_index": 0,
                            "end_index": 1887,
                            "start_line": 1,
                            "end_line": 53,
                            "max_line": 795,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "It includes hooks, data fetching, and rendering logic that can be relevant for implementing the new component mentioned in the issue."
                }
            ],
            "web/client/src/pages/rokt/rokt.page.tsx": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "The provided code snippet is related to displaying top-performing products in a React component. It includes hooks, data fetching, and rendering logic that can be relevant for implementing the Rokt Analytics feature.",
                        "snippet": {
                            "code": "import { Card, DataTable, Pagination, Text, VerticalStack } from '@shopify/polaris';\nimport React, { FC, useEffect, useMemo, useState } from 'react';\n// @ts-ignore\nimport { cleanProductTitle } from '#aftersell/common/products';\nimport { useTopProductAnalytics } from 'src/hooks/useTopProductAnalytics';\nimport type {\n    AnalyticsTopProductsFiltersType,\n    AnalyticsTopProductsOfferType,\n    AnalyticsTopProductsResponseType,\n    TopProductMultiOfferAnalyticsType,\n    TopProductSingleOfferAnalyticsType,\n} from '../../../../server/src/modules/analytics/analytics.dtos';\nimport styles from './styles.module.scss';\nimport { useFormatCurrency } from 'src/hooks/useFormatCurrency';\n\nfunction isSingleOfferType(\n    arg: TopProductSingleOfferAnalyticsType | TopProductMultiOfferAnalyticsType,\n    isSingleOffer: boolean\n): arg is TopProductSingleOfferAnalyticsType {\n    return isSingleOffer;\n}\n\nexport const TopPerformingProducts: FC<{\n    analyticsFilter: Omit<AnalyticsTopProductsFiltersType, 'page' | 'limit'>;\n    isSingleOffer?: boolean;\n    showTitle?: boolean;\n    prepareStart?: boolean;\n}> = ({ analyticsFilter, isSingleOffer = false, showTitle = true, prepareStart = true }) => {\n    const [page, setPage] = useState(1);\n    const { formatCurrency } = useFormatCurrency();\n\n    useEffect(() => {\n        setPage(1);\n    }, [analyticsFilter]);\n\n    const options = useMemo(() => {\n        return { ...analyticsFilter, page, limit: 5 };\n    }, [page, analyticsFilter]);\n\n    const { data: fetchedData = {} as AnalyticsTopProductsResponseType, isPreviousData: disable } =\n        useTopProductAnalytics(options, { prepareStart });\n\n    const { data: products = [], metadata: { limit = 1, page: queryPage = 1, total = 0 } = {} } = fetchedData;\n\n    const rows = products.map((item) =>\n        isSingleOfferType(item, isSingleOffer)\n            ? getSingleOfferRow({ item, formatCurrency })\n            : getMultiOfferRow({ item, formatCurrency })\n    );\n\n    const upperAmount = useMemo(() => {\n        const upper = limit * queryPage;\n        return (total < upper ? total : upper) || 0;\n    }, [limit, queryPage, total]);\n    const lowerAmount = useMemo(() => limit * (queryPage - 1) + 1 || 0, [limit, queryPage]);\n\n    return (\n        <VerticalStack gap=\"4\">\n            {showTitle && (\n                <Text variant=\"headingLg\" as=\"h5\">\n                    Top performing products\n                </Text>\n            )}\n            <Card padding=\"0\">\n                <DataTable\n                    columnContentTypes={\n                        isSingleOffer\n                            ? ['text', 'numeric', 'numeric']\n                            : ['text', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric']\n                    }\n                    headings={\n                        isSingleOffer\n                            ? ['Product name', 'Conversion Rate', 'Revenue']\n                            : ['Product name', 'Upsell #1', 'Upsell #2', 'Downsell', 'Thank you page', 'Revenue']",
                            "filename": "web/client/src/shared-components/top-performing-products/top-performing-products.tsx",
                            "start_index": 0,
                            "end_index": 3002,
                            "start_line": 1,
                            "end_line": 74,
                            "max_line": 155,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "The snippet shows components and actions that might be relevant for the implementation of the feature flag and the new component."
                }
            ],
            "web/client/src/pages/settings/settings-rokt.page.tsx": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "The snippet provides a glimpse into the structure of the frontend component 'analytics.page.tsx' in the 'web/client' directory, showing the usage of components like 'ChartCard', 'HalfWidthChart', 'TopPerformingProducts', and conditional rendering based on 'profitAnalyticsAreEnabled' flag.",
                        "snippet": {
                            "code": "{data.salesBreakdown.activeChartData}\n                            />\n                        </ChartCard>\n                        <HalfWidthChart\n                            analytics={data}\n                            id=\"thankYouPageDropoff\"\n                            title=\"Thank you page dropoff\"\n                            tooltip=\"This shows the dropoff on thank you page offers for the embedded upsells and storewide popup.\"\n                            salesBreakdown={data.salesBreakdown.activeChartData}\n                        />\n                        <Layout.Section fullWidth>\n                            <TopPerformingProducts\n                                analyticsFilter={{\n                                    funnelId,\n                                    startDate: fetchFilters.startDate,\n                                    endDate: fetchFilters.endDate,\n                                    deviceType: fetchFilters.deviceType,\n                                }}\n                            />\n                        </Layout.Section>\n                    </Layout>\n\n                    {profitAnalyticsAreEnabled &&",
                            "filename": "web/client/src/pages/analytics/analytics.page.tsx",
                            "start_index": 16742,
                            "end_index": 17883,
                            "start_line": 335,
                            "end_line": 357,
                            "max_line": 961,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "Defines multiple custom hooks for Rokt integration, which could be directly related to the 'useRoktAnalytics' hook mentioned in the issue."
                },
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "Code snippet showing UI components and data visualization in the analytics page, relevant for understanding frontend structure.",
                        "snippet": {
                            "code": "{setLocalFilters}\n                                />\n                                <Filter\n                                    offerType=\"upsell_2\"\n                                    tooltip=\"This is the upsell shown if the first 1-click upsell is accepted.\"\n                                    localFilters={localFilters}\n                                    setLocalFilters={setLocalFilters}\n                                />\n                                <Filter\n                                    offerType=\"downsell\"\n                                    tooltip=\"This is the upsell shown if the first 1-click upsell is declined.\"\n                                    localFilters={localFilters}\n                                    setLocalFilters={setLocalFilters}\n                                />\n                                <Filter\n                                    offerType=\"ty_page\"\n                                    tooltip=\"This is for any upsell offers & content on the thank you page.\"\n                                    localFilters={localFilters}\n                                    setLocalFilters={setLocalFilters}\n                                />\n                            </HorizontalStack>\n                        </Box>\n                    </Card>\n\n                    <Layout>\n                        <HeadlineAnalyticsCard\n                            title={METRIC_NAMES.revenue}\n                            tooltip=\"This is the total revenue generated by AfterSell.\"\n                            data={data.revenue}\n                            loading={queryResult.isLoading}\n                            formatter={formatCurrency}\n                            image={RevenueImage}\n                        />\n                        <HeadlineAnalyticsCard\n                            title={METRIC_NAMES.impressions}\n                            tooltip=\"An impressions is a view of an AfterSell page.\"\n                            data={data.impressions}\n                            loading={queryResult.isLoading}\n                            formatter={formatInteger}\n                            image={ImpressionsImage}\n                        />\n                        <HeadlineAnalyticsCard\n                            title={METRIC_NAMES.acceptedOffers}\n                            tooltip=\"This shows the total number of AfterSell offers that were accepted.\"\n                            data={data.acceptedOffers}\n                            loading={queryResult.isLoading}\n                            formatter={formatInteger}\n                            image={AcceptedOffersImage}\n                        />\n\n                        <LineChartCard\n                            title={METRIC_NAMES.revenue}\n                            tooltip=\"This is the total revenue generated by AfterSell.\"\n                            data={data.revenue}\n                            loading={queryResult.isLoading}\n                            formatter=",
                            "filename": "web/client/src/pages/analytics/analytics.page.tsx",
                            "start_index": 7923,
                            "end_index": 10912,
                            "start_line": 181,
                            "end_line": 688,
                            "max_line": 961,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This component's pattern for fetching and displaying data could be similar to what is needed for the new component 'TopAdvertisersAndVerticals'."
                }
            ]
        },
        "bouncer_response": {
            "score": 2,
            "criteria": "The RESPONSE must provide actionable, relevant guidance to more parts of the PROMPT's described issue to score higher. RESPONSES that are tangentially relevant but lack actionable content should receive scores between 1 and 3.",
            "supporting_evidence": "The RESPONSE provides a general outline for implementing the new feature, including steps such as importing the component, using the hook to retrieve data, and conditionally rendering the new component. However, it lacks actionable guidance specific to the prompt's request for displaying top demographics. The RESPONSE also includes a large amount of irrelevant information, such as code snippets and links to various parts of the codebase that are not directly related to the feature request. The RESPONSE does not address the specific format of the data ('todo' format mentioned in the PROMPT) or how to integrate it into the UI. Additionally, the RESPONSE does not provide any new insights or creative ideas for the UI design or user experience, which are crucial for the successful implementation of the feature.",
            "clarification_questions": "NONE"
        },
        "end_time": 1714258294.3735738,
        "result": "Doesn't seem like we have fully grasped all the specifics of this ticket \ud83d\ude15.                   But we've outlined some ideas that might help you get started:\n\nTo enhance the Rokt Analytics page with new features, we are introducing a component that displays the top advertisers and verticals. This update is contingent on the `roktIntegrationIsEnabled` feature flag and utilizes the `useRoktAnalytics` hook to fetch the necessary data. The backend API is already in place, and the environment must be correctly configured with the `ROKT_INTEGRATION_SECRET_TOKEN`.\n\nHere are the steps to implement the new feature:\n\n- In `rokt-analytics.page.tsx`, import the `TopAdvertisersAndVerticals` component from its respective path.\n- Utilize the `useRoktAnalytics` hook to retrieve the top advertisers and verticals data, assigning the results to `analytics` and `analyticsLoading`.\n- Conditionally render the `TopAdvertisersAndVerticals` component based on the `roktIntegrationIsEnabled` feature flag.\n- Ensure the `ROKT_INTEGRATION_SECRET_TOKEN` is present in the environment variables. If not, follow the project's protocol to update `dev.secrets.env.json` using `dev.public.env.json`.\n\n```tsx\n// In rokt-analytics.page.tsx\n\nimport { TopAdvertisersAndVerticals } from 'path-to-component'; // Replace with the actual path\n\nconst RoktAnalyticsWithData = ({\n    roktPayoutInvoices,\n}: {\n    roktPayoutInvoices: GetPayoutInvoicesResponseType;\n}) => {\n    // ... existing code ...\n\n    const { data: analytics, isLoading: analyticsLoading } = useRoktAnalytics(filters);\n\n    // Check for feature flag before rendering new component\n    if (!roktIntegrationIsEnabled) {\n        return <ExistingComponent />; // Continue rendering existing components\n    }\n\n    return (\n        <Page\n            // ... existing props ...\n        >\n            <Layout>\n                {/* ... existing components ... */}\n                <TopAdvertisersAndVerticals\n                    analyticsData={analytics}\n                    isLoading={analyticsLoading}\n                />\n            </Layout>\n        </Page>\n    );\n};\n```\n- Verify the environment variable setup and make any necessary adjustments to ensure the feature operates correctly in the development environment.\n\n### Code snippets to check\n\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [client](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src) \u2192 [pages](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages) \u2192 [rokt](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/rokt)- [Lines 1 - 81](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/rokt/rokt-analytics.page.tsx#L1-L81)\n\n This snippet is directly related to the Rokt Analytics page, which is part of the issue. It includes fetching Rokt analytics data and handling UI rendering, which are essential for solving the issue.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [server](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src) \u2192 [modules](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules) \u2192 [rokt](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/rokt)- [Lines 268 - 522](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/rokt/rokt.api.ts#L268-L522)\n\n This snippet includes functions for fetching Rokt analytics data and mentions the use of a secret token for authorization, which is relevant to the environment variable mentioned in the issue.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [server](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src) \u2192 [modules](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules) \u2192 [rokt](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/rokt)- [Lines 207 - 564](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/rokt/rokt.controller.ts#L207-L564)\n\n The snippet provides implementation details for fetching Rokt analytics data, which is necessary for understanding how the analytics data is retrieved and used in the new component.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [client](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src) \u2192 [pages](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages) \u2192 [rokt](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/rokt)- [Lines 1 - 169](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/rokt/rokt.hooks.ts#L1-L169)\n\n This snippet is relevant for understanding the data flow and interactions with the Rokt integration feature, which is necessary for solving the issue.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [client](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src) \u2192 [pages](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages) \u2192 [settings](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/settings)- [Lines 1 - 53](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/settings/settings-rokt.page.tsx#L1-L53)\n\n It includes hooks, data fetching, and rendering logic that can be relevant for implementing the new component mentioned in the issue.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [client](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src) \u2192 [shared-components](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/shared-components) \u2192 [top-performing-products](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/shared-components/top-performing-products)- [Lines 1 - 74](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/shared-components/top-performing-products/top-performing-products.tsx#L1-L74)\n\n The snippet shows components and actions that might be relevant for the implementation of the feature flag and the new component.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [client](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src) \u2192 [pages](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages) \u2192 [analytics](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/analytics)- [Lines 335 - 357](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/analytics/analytics.page.tsx#L335-L357)\n\n Defines multiple custom hooks for Rokt integration, which could be directly related to the 'useRoktAnalytics' hook mentioned in the issue. \n\n\n   - [Lines 181 - 688](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/client/src/pages/analytics/analytics.page.tsx#L181-L688)\n\n This component's pattern for fetching and displaying data could be similar to what is needed for the new component 'TopAdvertisersAndVerticals'."
    }
}