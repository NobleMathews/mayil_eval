{
    "id": "BEAM-3220",
    "repo_name": "testbed/aftersell",
    "title": "Create SlackConnection model",
    "body": "\nAll tasks - this ticket correlates to the first\n\n* Add model for this\n* Make a Retool to add to this model\n* Add all existing Slack merchants\n* Setup Zapier\n* DRI to update on X cadence\n* Communicate this\n---\nGlossary:\ngithub_pr_1: The attachment is a screenshot of a GitHub pull request titled \"Add SlackConnection model\". The pull request includes several files that have been changed, with a focus on one file in particular: `slack_connection.rb`. This file contains the definition of a new Ruby class named `SlackConnection`, which inherits from `ApplicationRecord`.\n\nThe `SlackConnection` class has several attributes defined within it, including `merchant_id`, `slack_workspace`, `enabled`, and timestamps for `created_at` and `updated_at`. There are also validations in place to ensure that `merchant_id` and `slack_workspace` are present before saving.\n\nThe pull request shows that a database migration file has been created to add a new table for the `SlackConnection` model. The migration includes code to create the table with the aforementioned columns, along with an index on the `merchant_id` column to improve query performance.\n\nAdditionally, the pull request includes updates to a configuration file where the `SlackConnection` model appears to be registered or configured within the application's settings.\n\nThe screenshot indicates that the pull request has been approved by one reviewer, and there are no comments or discussions visible in the provided view. The overall impression is that the pull request is ready to be merged, pending any additional reviews or checks that may be required by the team's workflow.\n\n\n---\nThe ticket above is a subticket of the following ticket:\nTitle: Sync CS Sales enablement data to Intercom\nBody:\n\n",
    "classification": "feature request",
    "state": "closed",
    "repo_link": "https://github.com/testbed/aftersell.git",
    "requested_commit": null,
    "issue_tracker_identifier": "",
    "ai_cost": {
        "issue_classifier": 0.00033749999999999996,
        "issue_summarizer": 0.014589999999999999,
        "search_embedding": 4.745e-05,
        "documentation_agent": 0.008150000000000001,
        "repo_summary": 0.09820549999999999,
        "issue_star_solver": 0.22573800000000002,
        "snippet_processor": 0.01709,
        "bouncer": 0.024350000000000004
    },
    "attachments": [
        {
            "title": "chore(server): create model to represent Slack channel support [BEAM-3220]",
            "url": "https://github.com/beam-commerce/aftersell/pull/1120",
            "content": "",
            "placeholder_tag": "github_pr_1",
            "content_type": "ExternalAssetsType.GITHUB_PR"
        }
    ],
    "inline_assets": [],
    "linked_issue_ids": [
        "ENG-74"
    ],
    "comments": [],
    "issue_summary": "Error Messages: None provided.\n\nFunction and Variable Names:\n- `SlackConnection` (Ruby class)\n- Inherits from `ApplicationRecord`\n- Attributes: `merchant_id`, `slack_workspace`, `enabled`, `created_at`, `updated_at`\n- Validations: presence of `merchant_id` and `slack_workspace`\n- Database migration: creation of `SlackConnection` table with columns for attributes and index on `merchant_id`\n- Configuration file updates related to `SlackConnection` model\n\nTechnical Descriptions:\n- Create `SlackConnection` model\n- Implement Retool integration for `SlackConnection` model\n- Add existing Slack merchants to `SlackConnection` model\n- Setup Zapier integration\n- Designated Responsible Individual (DRI) to update on a specified cadence (X cadence not specified)\n- Communication plan for the new model and integrations\n\nOutput Format:\n- Model: `SlackConnection`\n- Attributes: `merchant_id`, `slack_workspace`, `enabled`, `created_at`, `updated_at`\n- Validations: `merchant_id`, `slack_workspace`\n- Database: Migration for `SlackConnection` table, index on `merchant_id`\n- Integrations: Retool, Zapier\n- DRI updates: Cadence not specified\n- Communication: Not specified\n\nRelated Ticket:\n- Title: Sync CS Sales enablement data to Intercom\n- Body: Not provided",
    "repo_summary": "The software project is a multi-part application called AfterSell, consisting of different components:\n\n1. **Client**: Contains the client-side code for the application.\n2. **TY Page**: Contains code related to the Thank You page functionality.\n3. **Server**: Contains the server-side code for the application.\n4. **Post-purchase checkout extension**: A specific extension for post-purchase functionality.\n\nKey components and technologies used:\n- **Node.js**: Used for server-side and client-side code.\n- **TypeScript**: Used for writing type-safe code.\n- **GraphQL**: Used for querying data.\n- **Docker**: Dockerfile provided for containerization.\n- **Shopify API**: Integration with Shopify API for various functionalities.\n- **Mixpanel**: Used for analytics tracking.\n- **Jest**: Testing framework used for unit tests.\n- **Typegoose**: Used for defining MongoDB models in TypeScript.\n\nThe ticket is related to creating a `SlackConnection` model, which involves adding a new model with attributes like `merchant_id`, `slack_workspace`, and `enabled`. A database migration file has been created for this model, along with necessary validations. The model is registered or configured within the application's settings. The pull request for this task seems ready to be merged after approval.\n\nThe project seems to have a structured setup with separate directories for different components like client, server, and extensions, each with their own package.json files and dependencies. The README provides detailed setup instructions for development.\n\nOverall, the project appears to be well-organized with clear separation of concerns between different parts of the application.",
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1714257104.8878028,
        "classification": "feature request",
        "initial_code_snippets": [
            {
                "code": "export type AppUsageRecord = AppCharge & Node & {\n  __typename?: 'AppUsageRecord';\n  /** The amount of the app charge. */\n  amount: Money;\n  /** A globally unique identifier. */\n  id: Scalars['ID'];\n  /** The name of the app charge. */\n  name: Scalars['String'];\n  /** Whether the app purchase was a test transaction. */\n  test: Scalars['Boolean'];\n};\n\n/** An app event for an app usage charge. */\nexport type AppUsageRecordEvent = {\n  /**\n   * An app charge. This charge varies based on how much the merchant uses the app\n   * or a service that the app integrates with.\n   */\n  charge: AppUsageRecord;\n};\n\n/** A transaction corresponding to an app usage charge. */\nexport type AppUsageSale = Node & Transaction & {\n  __typename?: 'AppUsageSale';\n  /** The app associated with the sale. */\n  app: App;\n  /** The ID of the [app charge](/tutorials/bill-for-your-app-using-graphql-admin-api) associated with the transaction. Example value: `gid://shopify/AppUsageRecord/1234`. This value might be `null` for transactions that occurred before September 2020. */\n  chargeId?: Maybe<Scalars['ID']>;\n  /** The date and time when the transaction was recorded. */\n  createdAt: Scalars['DateTime'];\n  /** The total amount that the merchant paid, excluding taxes. */\n  grossAmount?: Maybe<Money>;\n  /** The transaction ID. */\n  id: Scalars['ID'];\n  /** The net amount that is added to or deducted from your payout. */\n  netAmount: Money;\n  /** The shop associated with the transaction. */\n  shop?: Maybe<Shop>;\n  /** The amount that Shopify retained from the sale. */\n  shopifyFee?: Maybe<Money>;\n};\n\n/** A conversation with a merchant through the Experts Marketplace. */\nexport type Conversation = Node & {\n  __typename?: 'Conversation';\n  /** The date and time the conversation was started. */\n  createdAt: Scalars['DateTime'];\n  /** The URL to access this conversation in the Partner Dashboard. */\n  dashboardUrl: Scalars['Url'];\n  /** Whether the conversation has unread messages. */\n  hasUnreadMessages: Scalars['Boolean'];\n  /** A globally unique identifier. */\n  id: Scalars['ID'];\n  /** The date and time of the most recent conversation event. Example events: a message being sent, or a proposal being accepted. */\n  lastEventAt: Scalars['DateTime'];\n  /** The merchant account involved in the conversation. */\n  merchantUser: MerchantUser;\n  /** The messages exchanged within the conversation. */\n  messages: MessageConnection;\n  /** The status of the Experts Marketplace conversation. */\n  status: ConversationStatus;\n};\n\n\n/** A conversation with a merchant through the Experts Marketplace. */\nexport type ConversationMessagesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  sentAtMax?: InputMaybe<Scalars['DateTime']>;\n  sentAtMin?: InputMaybe<Scalars['DateTime']>;\n};\n\n/** The connection type for Conversation. */",
                "filename": "web/server/src/modules/api-shopify-partners/graphql/generated/index.ts",
                "start_index": 12984,
                "end_index": 15918,
                "start_line": 336,
                "end_line": 410,
                "max_line": 1838,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export type ConversationConnection = {\n  __typename?: 'ConversationConnection';\n  /** A list of edges. */\n  edges: Array<ConversationEdge>;\n  /** Information about pagination in a connection. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type ConversationEdge = {\n  __typename?: 'ConversationEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node: Conversation;\n};\n\n/** The status of the Experts Marketplace conversation. */\nexport enum ConversationStatus {\n  /** The conversation is active. Messages can be sent and received. */\n  Active = 'ACTIVE',\n  /** A participant in the conversation has blocked the other. Messages can't be sent or received. */\n  Blocked = 'BLOCKED'\n}\n\n/** An event that marks that an app credit was applied. */\nexport type CreditApplied = AppCreditEvent & AppEvent & {\n  __typename?: 'CreditApplied';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /**\n   * A [credit](/docs/admin-api/rest/reference/billing/applicationcredit) issued\n   * to a merchant for an app. Merchants are entitled to app credits under certain circumstances,\n   * such as when a paid app subscription is downgraded partway through its billing cycle.\n   */\n  appCredit: AppCredit;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** An event that marks that an app credit failed to apply. */\nexport type CreditFailed = AppCreditEvent & AppEvent & {\n  __typename?: 'CreditFailed';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /**\n   * A [credit](/docs/admin-api/rest/reference/billing/applicationcredit) issued\n   * to a merchant for an app. Merchants are entitled to app credits under certain circumstances,\n   * such as when a paid app subscription is downgraded partway through its billing cycle.\n   */\n  appCredit: AppCredit;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** An event that marks that an app credit is pending. */\nexport type CreditPending = AppCreditEvent & AppEvent & {\n  __typename?: 'CreditPending';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /**\n   * A [credit](/docs/admin-api/rest/reference/billing/applicationcredit) issued\n   * to a merchant for an app. Merchants are entitled to app credits under certain circumstances,\n   * such as when a paid app subscription is downgraded partway through its billing cycle.\n   */\n  appCredit: AppCredit;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** Supported monetary currencies from ISO 4217. */",
                "filename": "web/server/src/modules/api-shopify-partners/graphql/generated/index.ts",
                "start_index": 15919,
                "end_index": 18830,
                "start_line": 411,
                "end_line": 493,
                "max_line": 1838,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": ".\n   */\n  productSavedSearches: SavedSearchConnection;\n  /** A list of tags that have been added to products. */\n  productTags: StringConnection;\n  /** The list of types added to products. */\n  productTypes: StringConnection;\n  /**\n   * List of the shop's product variants.\n   * @deprecated Use `QueryRoot.productVariants` instead.\n   */\n  productVariants: ProductVariantConnection;\n  /** The list of vendors added to products. */\n  productVendors: StringConnection;\n  /**\n   * List of the shop's products.\n   * @deprecated Use `QueryRoot.products`.\n   */\n  products: ProductConnection;\n  /** The number of publications for the shop. */\n  publicationCount: Scalars['Int'];\n  /** The shop's limits for specific resources. For example, the maximum number ofvariants allowed per product, or the maximum number of locations allowed. */\n  resourceLimits: ShopResourceLimits;\n  /** The URL of the rich text editor that can be used for mobile devices. */\n  richTextEditorUrl: Scalars['URL'];\n  /** Fetches a list of admin search results by a specified query. */\n  search: SearchResultConnection;\n  /** The list of search filter options for the shop. These can be used to filter productvisibility for the shop. */\n  searchFilters: SearchFilterOptions;\n  /** Whether the shop has outstanding setup steps. */\n  setupRequired: Scalars['Boolean'];\n  /** The list of countries that the shop ships to. */\n  shipsToCountries: Array<CountryCode>;\n  /** The list of all legal policies associated with a shop. */\n  shopPolicies: Array<ShopPolicy>;\n  /**\n   * Shopify Payments account information, including balances and payouts.\n   * @deprecated Use `QueryRoot.shopifyPaymentsAccount` instead.\n   */\n  shopifyPaymentsAccount?: Maybe<ShopifyPaymentsAccount>;\n  /** The paginated list of the shop's staff members. */\n  staffMembers: StaffMemberConnection;\n  /** The storefront access token of a private application. These are scoped per-application. */\n  storefrontAccessTokens: StorefrontAccessTokenConnection;\n  /**\n   * The URL of the shop's storefront.\n   * @deprecated Use `url` instead.\n   */\n  storefrontUrl: Scalars['URL'];\n  /** Whether the shop charges taxes for shipping. */\n  taxShipping: Scalars['Boolean'];\n  /** Whether applicable taxes are included in the shop's product prices. */\n  taxesIncluded: Scalars['Boolean'];\n  /** The shop's time zone abbreviation. */\n  timezoneAbbreviation: Scalars['String'];\n  /** The shop's time zone offset. */\n  timezoneOffset: Scalars['String'];\n  /** The shop's time zone offset expressed as a number of minutes. */\n  timezoneOffsetMinutes: Scalars['Int'];\n  /** Whether transactional SMS sent by Shopify have been disabled for a shop. */\n  transactionalSmsDisabled: Scalars['Boolean'];\n  /** The translations associated with the resource. */\n  translations: Array<Translation>;\n  /** The shop's unit system for weights and measures. */\n  unitSystem: UnitSystem;\n  /** Fetches a list of images uploaded to the shop by their IDs. */\n  uploadedImagesByIds:",
                "filename": "web/server/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1508377,
                "end_index": 1511363,
                "start_line": 29,
                "end_line": 37850,
                "max_line": 44790,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { getModelForClass, modelOptions, prop } from '@typegoose/typegoose';\nimport { REGEX_MYSHOPIFY } from '../../utils/regexes';\n\n/**\n * Responsible for the relevant fields pertaining to how the rest of the AfterSell ecosystem interacts with Rokt.\n */\n@modelOptions({ schemaOptions: { _id: false } })\nexport class AfterSellSettings {\n    @prop({ required: false, default: true })\n    overrideStorewidePopup!: boolean;\n}\n\n/**\n * This links a shop using AfterSell with a Rokt account. All other data is stored\n * on Rokt servers and can be retrieved using the `appInstallationId`.\n */\nclass RoktAccount {\n    @prop({ required: true, unique: true, match: REGEX_MYSHOPIFY })\n    shop!: string;\n\n    @prop({ required: true })\n    appInstallationId!: string;\n\n    @prop({ required: false })\n    accountId!: string;\n\n    @prop({ required: true })\n    createdAt!: string;\n\n    @prop({ required: false, default: null })\n    updatedAt!: string;\n\n    @prop({ required: false, default: null })\n    deletedAt!: string;\n\n    @prop({ required: true, default: {} })\n    afterSellSettings!: AfterSellSettings;\n}\n\nexport const RoktAccountModel = getModelForClass(RoktAccount);",
                "filename": "web/server/src/modules/rokt/rokt-accounts.model.ts",
                "start_index": 0,
                "end_index": 1161,
                "start_line": 1,
                "end_line": 40,
                "max_line": 40,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "nsaction = Node & Transaction & {\n  __typename?: 'LegacyTransaction';\n  /** The net amount that is added to or deducted from your payout. */\n  amount: Money;\n  /** The date and time when the transaction was recorded. */\n  createdAt: Scalars['DateTime'];\n  /** The transaction ID. */\n  id: Scalars['ID'];\n  /** The shop associated with the transaction. */\n  shop?: Maybe<Shop>;\n};\n\n/**\n * A merchant account. This might be a shop owner, a staff member, or a user that isn't associated with a shop.\n * A single merchant account can be associated with many shops.\n */\nexport type MerchantUser = Actor & Node & {\n  __typename?: 'MerchantUser';\n  /** A URL referencing the avatar associated with the actor. */\n  avatarUrl?: Maybe<Scalars['Url']>;\n  /** A globally unique identifier for the actor. Example value: `gid://partners/Shop/1234`. */\n  id: Scalars['ID'];\n  /** The user's full name. */\n  name: Scalars['String'];\n  /** The user's time zone. */\n  timezone: Scalars['String'];\n};\n\n/** A message exchanged within a conversation. */\nexport type Message = Node & {\n  __typename?: 'Message';\n  /** The message body. */\n  body?: Maybe<Scalars['String']>;\n  /** A collection of URLs pointing to files attached to the message. */\n  fileUrls: Array<Scalars['Url']>;\n  /** A globally unique identifier. */\n  id: Scalars['ID'];\n  /** The date and time the message was sent. */\n  sentAt: Scalars['DateTime'];\n  /** The organization or user that sent the message. */\n  sentBy: MessageSender;\n  /** The platform that was used to send the message. */\n  sentVia: MessageSentVia;\n};\n\n/** The connection type for Message. */\nexport type MessageConnection = {\n  __typename?: 'MessageConnection';\n  /** A list of edges. */\n  edges: Array<MessageEdge>;\n  /** Information about pagination in a connection. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type MessageEdge = {\n  __typename?: 'MessageEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node: Message;\n};\n\n/** A union of all of the types that can send messages within a conversation. */\nexport type MessageSender = MerchantUser | Organization | Shop | ShopifyEmployee | TeamMember;\n\n/** The platform that was used to send the message. */\nexport enum MessageSentVia {\n  /** The message was sent through the Partner Dashboard. */\n  Dashboard = 'DASHBOARD',\n  /** The message was sent through an email. */\n  Email = 'EMAIL'\n}\n\n/** A monetary value with currency. */\nexport type Money = {\n  __typename?: 'Money';\n  /** The decimal money amount. */\n  amount: Scalars['Decimal'];\n  /** The currency. */\n  currencyCode: Currency;\n};\n\n/** A monetary value with currency. */\nexport type MoneyInput = {\n  /** The amount of money. */\n  amount?: InputMaybe<Scalars['Decimal']>;\n  /** Currency of the money. */\n  currencyCode?: InputMaybe<Currency>;\n};\n\n/** The schema's ent",
                "filename": "web/server/src/modules/api-shopify-partners/graphql/generated/index.ts",
                "start_index": 29834,
                "end_index": 32728,
                "start_line": 956,
                "end_line": 1250,
                "max_line": 1838,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "@modelOptions({ schemaOptions: { _id: false } })\nexport class CheckoutTriggers {\n    @prop({ required: true })\n    showToAllCustomersTrigger!: Trigger;\n\n    @prop({ required: true })\n    productAndOrCollectionTrigger!: ProductAndCollectionTrigger;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nexport class UpsellProductVariant {\n    @prop({ required: true })\n    id!: number;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nclass UpsellProduct {\n    @prop({ required: true })\n    id!: number;\n\n    @prop({ required: true, type: UpsellProductVariant })\n    variants!: UpsellProductVariant[];\n}\n\n//Allow mixed types for product/ProductFull since they don't exist initially, otherwise it will throw an error when null\n@modelOptions({ schemaOptions: { _id: false }, options: { allowMixed: Severity.ALLOW } })\nexport class UpsellOffer {\n    @prop({ required: true })\n    _id!: string;\n\n    @prop({ required: true })\n    priority!: number;\n\n    @prop({ required: false })\n    isUpsellPositionOption?: boolean;\n\n    @prop({ required: false })\n    customTitle?: string;\n\n    @prop({ required: false, default: '' })\n    customDescription!: string;\n\n    @prop({ required: true })\n    hideIfAlreadyInCart!: boolean;\n\n    @prop({ required: true })\n    discount!: Discount;\n\n    @prop({ required: true })\n    triggers!: CheckoutTriggers;\n\n    @prop({ required: true })\n    product!: UpsellProduct;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nexport class UpsellWidgetConfig {\n    @prop({ required: true, enum: CheckoutUpsellType, default: CheckoutUpsellType.SINGLE })\n    upsellType!: CheckoutUpsellType;\n\n    @prop({ required: true })\n    isUpsellPositionOption!: boolean;\n\n    @prop({ required: false, default: '' })\n    offerTitle!: string;\n\n    @prop({ required: true, default: false })\n    isShowBorder!: boolean;\n\n    @prop({ required: true, default: false })\n    useOutlinedButton!: boolean;\n\n    @prop({ required: true, type: UpsellOffer })\n    offers!: UpsellOffer[];\n\n    @prop({ required: true })\n    customizeNumberOfOffers!: boolean;\n\n    @prop({ required: true })\n    numberOfOffersToShow!: number;\n\n    @prop({ required: true })\n    continuouslyLoadOffers!: boolean;\n\n    @prop({ required: true, default: false })\n    isDefaultAccepted!: boolean;\n\n    @prop({ required: false })\n    skipDiscountIfOtherDiscountsAlreadyApplied?: boolean;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nexport class RewardsWidgetConfig {\n    @prop({ required: true, enum: RewardBasis })\n    rewardBasis!: RewardBasis;\n\n    @prop({ required: true })\n    minimumAmount!: number;\n\n    @prop({ required: true })\n    itemCount!: string;\n\n    @prop({ required: true })\n    textBeforeAchieving!: string;\n\n    @prop({ required: true })\n    textAfterAchieving!: string;\n\n    @prop({ required: true })\n    barForegroundColor!: string;\n\n    @prop({ required: true })\n    barBackgroundColor!: string;\n\n    @prop({ required: false })\n    triggers?: CheckoutTriggers;\n}",
                "filename": "web/server/src/modules/checkout-widgets/checkout-widgets.model.ts",
                "start_index": 2760,
                "end_index": 5722,
                "start_line": 73,
                "end_line": 498,
                "max_line": 565,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n    const user: {\n        currency: string;\n        plan_name: string;\n        is_active: boolean;\n        first_installed: Date;\n        onBoardingCardClosed: boolean;\n    } | null = await UserModel.findOne(\n        { myshopify_domain: myshopifyDomain },\n        { currency: 1, plan_name: 1, is_active: 1, first_installed: 1, onBoardingCardClosed: 1 }\n    );\n    if (!user) {\n        throw new Error(`User does not exist. Attempted to sync properties for user: \"${myshopifyDomain}\"`);\n    }\n\n    const funnels: {\n        status: boolean;\n        triggers: Funnel['triggers'];\n        hasUpsellDefault: boolean;\n        hasUpsellAdditional: boolean;\n        hasDownsell: boolean;\n        hasTyPageWidgets: boolean;\n    }[] = await FunnelsModel.aggregate([\n        { $match: { shop: myshopifyDomain } },\n        {\n            $lookup: {\n                from: 'widgets',\n                as: 'hasActiveTyPageWidgets',\n                let: { thankyou_page: '$thankyou_page' },\n                pipeline: [\n                    { $match: { $expr: { $eq: ['$$thankyou_page', '$templateId'] } } },\n                    { $match: { active: true } },\n                    { $project: { _id: 1 } },\n                    { $limit: 1 },\n                ],\n            },\n        },\n        {\n            $project: {\n                status: 1,\n                triggers: 1,\n                hasUpsellDefault: { $gt: ['$upsell_default', null] },\n                hasUpsellAdditional: { $gt: ['$upsell_additional', null] },\n                hasDownsell: { $gt: ['$downsell', null] },\n                hasTyPageWidgets: {\n                    $cond: { if: { $gt: [{ $size: '$hasActiveTyPageWidgets' }, 0] }, then: true, else: false },\n                },\n            },\n        },\n    ]);\n    const publishedFunnels = funnels.filter((funnel) => funnel.status);\n\n    interface Analytics {\n        revenue: number;\n        impressions: number;\n        acceptedOffers: number;\n    }\n    const analyticsLast30DaysArr = await AnalyticsModel.aggregate([\n        { $match: { shop: myshopifyDomain, date: { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) } } },\n        {\n            $group: {\n                _id: { $cond: { if: { $gt: ['$type', null] }, then: 'oneClick', else: 'tyPage' } },\n                revenue: { $sum: '$data.revenue' },\n                impressions: { $sum: '$data.impressions' },\n                acceptedOffers: { $sum: '$data.numberOfOrders' },\n            },\n        },\n    ]);\n    const oneClickAnalytics: Analytics = analyticsLast30DaysArr.find((analytics) => analytics._id === 'oneClick') ?? {\n        revenue: 0,\n        impressions: 0,\n        acceptedOffers: 0,\n    };\n    const tyPageAnalytics: Analytics = analyticsLast30DaysArr.find((analytics) => analytics._id === 'tyPage') ?? {\n        revenue: 0,\n        impressions: 0,\n        acceptedOffers: 0,\n    };",
                "filename": "web/server/src/modules/mixpanel/mixpanel-calculate.ts",
                "start_index": 528,
                "end_index": 3395,
                "start_line": 1,
                "end_line": 200,
                "max_line": 205,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "ith Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href=\"/apps/online-store#what-integration-method-should-i-use\" target=\"_blank\">Learn more</a>.</p></div>\n   *\n   *\n   * A list of script tags.\n   *\n   */\n  scriptTags: ScriptTagConnection;\n  /** The Customer Segment. */\n  segment?: Maybe<Segment>;\n  /** The number of segments for a shop. */\n  segmentCount: Scalars['Int'];\n  /** A list of filter suggestions associated with a segment. A segment is a group of members (commonly customers) that meet specific criteria. */\n  segmentFilterSuggestions: SegmentFilterConnection;\n  /** A list of filters. */\n  segmentFilters: SegmentFilterConnection;\n  /** A list of a shop's segment migrations. */\n  segmentMigrations: SegmentMigrationConnection;\n  /** The list of suggested values that's associated with an individual segment.A segment is a group of members, such as customers, that meet specific criteria. */\n  segmentValueSuggestions: SegmentValueConnection;\n  /** A list of a shop's segments. */\n  segments: SegmentConnection;\n  /** Returns a Selling Plan Group resource by ID. */\n  sellingPlanGroup?: Maybe<SellingPlanGroup>;\n  /** List Selling Plan Groups. */\n  sellingPlanGroups: SellingPlanGroupConnection;\n  /** The server pixel configured by the app. */\n  serverPixel?: Maybe<ServerPixel>;\n  /**\n   * Returns the Shop resource corresponding to the access token used in the request. The Shop resource contains\n   * business and store management settings for the shop.\n   *\n   */\n  shop: Shop;\n  /** The shop's billing preferences. */\n  shopBillingPreferences: ShopBillingPreferences;\n  /** A list of locales available on a shop. */\n  shopLocales: Array<ShopLocale>;\n  /** The Shopify Function. */\n  shopifyFunction?: Maybe<ShopifyFunction>;\n  /** Returns the Shopify Functions for apps installed on the shop. */\n  shopifyFunctions: ShopifyFunctionConnection;\n  /** Shopify Payments account information, including balances and payouts. */\n  shopifyPaymentsAccount?: Maybe<ShopifyPaymentsAccount>;\n  /** Returns the results of a ShopifyQL query. Refer to the [ShopifyQL documentation](https://shopify.dev/api/shopifyql) for more information. */\n  shopifyqlQuery?: Maybe<ShopifyqlResponse>;\n  /** The StaffMember resource, by ID. */\n  staffMember?: Maybe<StaffMember>;\n  /**\n   * Standard metafield definitions are intended for specific, common use cases. Their namespace and keys reflect these use cases and are reserved.\n   *\n   * Refer to all available [`Standard Metafield Definition Templates`](https://shopify.dev/api/admin-graphql/latest/objects/StandardMetafieldDefinitionTemplate).\n   *\n   */\n  standardMetafieldDefinitionTemplates: StandardMetafieldDefinitionTemplateConnection;\n  /** Returns a SubscriptionBillingAttempt by ID. */\n  subscriptionBillingAttempt?: Maybe<SubscriptionBillingAttempt>;",
                "filename": "web/server/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1301486,
                "end_index": 1304418,
                "start_line": 22508,
                "end_line": 40295,
                "max_line": 44790,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "ategory {\n  /** The merchant was referred using an affiliate link. */\n  AffiliateStores = 'AFFILIATE_STORES',\n  /** The merchant was referred from an Intuit Channel Partner. */\n  IntuitPointOfSale = 'INTUIT_POINT_OF_SALE',\n  /** The merchant was referred to Markets Pro by a partner. */\n  MarketsPro = 'MARKETS_PRO',\n  /** The merchant was referred using the Partner POS lead form. */\n  PointOfSale = 'POINT_OF_SALE',\n  /** The merchant was referred using the Shopify Plus lead form. */\n  ShopifyPlus = 'SHOPIFY_PLUS',\n  /** The merchant was referred using a development store transfer. */\n  TransferredStores = 'TRANSFERRED_STORES'\n}\n\n/** A transaction corresponding to a shop referral. */\nexport type ReferralTransaction = Node & Transaction & {\n  __typename?: 'ReferralTransaction';\n  /** The net amount that is added to your payout. */\n  amount: Money;\n  /** The referral type. */\n  category: ReferralCategory;\n  /** The date and time when the transaction was recorded. */\n  createdAt: Scalars['DateTime'];\n  /** The transaction ID. */\n  id: Scalars['ID'];\n  /** The referred shop. */\n  shop: Shop;\n};\n\n/** An event that marks that an app was deactivated. */\nexport type RelationshipDeactivated = AppEvent & {\n  __typename?: 'RelationshipDeactivated';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** An event that marks that an app was installed. */\nexport type RelationshipInstalled = AppEvent & {\n  __typename?: 'RelationshipInstalled';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** An event that marks that an app was reactivated. */\nexport type RelationshipReactivated = AppEvent & {\n  __typename?: 'RelationshipReactivated';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** An event that marks that an app was uninstalled. */\nexport type RelationshipUninstalled = AppEvent & {\n  __typename?: 'RelationshipUninstalled';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /** More details from the merchant about why they uninstalled the app. */\n  description?: Maybe<Scalars['String']>;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A comma separated list of reasons why the merchant uninstalled the app. */\n  reason?: Maybe<Scalars['String']>;\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** A service in the Experts Marketplace. */\nexport type Service =",
                "filename": "web/server/src/modules/api-shopify-partners/graphql/generated/index.ts",
                "start_index": 41404,
                "end_index": 44367,
                "start_line": 1280,
                "end_line": 1367,
                "max_line": 1838,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "etplace job](https://help.shopify.com/partners/selling-services). */\nexport type Job = Node & {\n  __typename?: 'Job';\n  /** Whether the merchant has marked the job as complete. */\n  confirmedCompleted: Scalars['Boolean'];\n  /** The conversation containing messages exchanged with the merchant. */\n  conversation?: Maybe<Conversation>;\n  /** The date and time the job was submitted to your organization. */\n  createdAt: Scalars['DateTime'];\n  /** A URL to access this job in the Partner Dashboard. */\n  dashboardUrl: Scalars['Url'];\n  /** A globally unique identifier. */\n  id: Scalars['ID'];\n  /** The date and time of the most recent job event. */\n  lastEventAt: Scalars['DateTime'];\n  /** The job requirements that the merchant provided. */\n  requirements: Array<JobRequirement>;\n  /** The services requested for this job. */\n  services: Array<Service>;\n  /** The shop that submitted the job. */\n  shop: Shop;\n  /** The status of the job. */\n  status: JobStatus;\n};\n\n/** The connection type for Job. */\nexport type JobConnection = {\n  __typename?: 'JobConnection';\n  /** A list of edges. */\n  edges: Array<JobEdge>;\n  /** Information about pagination in a connection. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type JobEdge = {\n  __typename?: 'JobEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node: Job;\n};\n\n/** Details that the merchant provided about their job requirements. Details are returned as sets of questions and responses. */\nexport type JobRequirement = {\n  __typename?: 'JobRequirement';\n  /** The question that the merchant was asked about their job or store. */\n  question: Scalars['String'];\n  /** The merchant's responses to the question. */\n  responses: Array<Scalars['String']>;\n};\n\n/** The status of the [Experts Marketplace job](https://help.shopify.com/partners/selling-services). */\nexport enum JobStatus {\n  /** The merchant has taken an action that requires attention from your organization. */\n  AwaitingResponse = 'AWAITING_RESPONSE',\n  /** The job has been closed by the merchant. */\n  Closed = 'CLOSED',\n  /** The job has been marked as complete by your organization. */\n  Completed = 'COMPLETED',\n  /** The job has been declined by the merchant or your organization. */\n  Declined = 'DECLINED',\n  /** The job has expired. A job expires when your organization does not send an initial response to a job within 72 hours. */\n  Expired = 'EXPIRED',\n  /** The job has been marked inactive by your organization. */\n  Inactive = 'INACTIVE',\n  /** The job has been submitted to your organization, but hasn't been opened. */\n  New = 'NEW',\n  /** The job has been viewed by your organization. */\n  Opened = 'OPENED',\n  /** The job has been responded to by your organization. */\n  Responded = 'RESPONDED'\n}\n\n/** A transaction of a type that is no longer supported. */\nexport type LegacyTra",
                "filename": "web/server/src/modules/api-shopify-partners/graphql/generated/index.ts",
                "start_index": 26924,
                "end_index": 29834,
                "start_line": 881,
                "end_line": 956,
                "max_line": 1838,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "enum ProductRecProviderId {\n    SHOPIFY = 'shopify',\n    NOSTO = 'nosto',\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nclass ProductRecProvider {\n    @prop({ required: false, enum: ProductRecProviderId, default: ProductRecProviderId.SHOPIFY })\n    id!: ProductRecProviderId;\n\n    @prop({ required: false, default: '' })\n    apiKey!: string;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nclass YotpoReviewIntegration {\n    @prop({ required: false, default: false })\n    isEnabled!: boolean;\n\n    @prop({ required: false, default: '' })\n    appKey!: string;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nclass ScriptTagDisplayScopeSettings {\n    // This was added to allow us to limit the TY page bundle to only load on the TY page.\n    // For storefront performance reasons, many merchants don't want our bundle to load on all\n    // storefront pages. We only use the storefront bundle pre-purchase to show the banner from the\n    // storewide popup. The TY page bundle can be safely limited to only load on the TY page if the\n    // merchant doesn't want to use the storewide popup.\n    @prop({ required: false, enum: ScriptTagDisplayScope, default: ScriptTagDisplayScope.ORDER_STATUS })\n    tyBundle!: ScriptTagDisplayScope;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nclass EmailErrorReportingConfig {\n    @prop({ required: false, default: false })\n    isEnabled!: boolean;\n\n    @prop({ required: false, default: '' })\n    to!: string;\n\n    @prop({ required: false, default: [], type: String })\n    cc!: string[];\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nclass DirectToMerchantErrorReporting {\n    @prop({ required: false, default: {} })\n    postPurchaseOrderTagFailedEmail!: EmailErrorReportingConfig;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nclass PartiallyPaidRemovalConfig {\n    @prop({ required: false, default: DEFAULT_PARTIALLY_PAID_REMOVAL_DELAY_IN_MINUTES })\n    minimumDelayInMinutes!: number;\n}",
                "filename": "web/server/src/modules/settings/settings.model.ts",
                "start_index": 5615,
                "end_index": 7571,
                "start_line": 162,
                "end_line": 296,
                "max_line": 298,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "on = {\n  /** The date and time when the transaction was recorded. */\n  createdAt: Scalars['DateTime'];\n  /** The transaction ID. */\n  id: Scalars['ID'];\n};\n\n/** The connection type for Transaction. */\nexport type TransactionConnection = {\n  __typename?: 'TransactionConnection';\n  /** A list of edges. */\n  edges: Array<TransactionEdge>;\n  /** Information about pagination in a connection. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type TransactionEdge = {\n  __typename?: 'TransactionEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node: Transaction;\n};\n\n/** The type of transaction. */\nexport enum TransactionType {\n  /** A transaction corresponding to a one-time app charge. */\n  AppOneTimeSale = 'APP_ONE_TIME_SALE',\n  /** A transaction corresponding to a refund, downgrade, or adjustment of an app charge. */\n  AppSaleAdjustment = 'APP_SALE_ADJUSTMENT',\n  /** A transaction corresponding to an [app credit](/docs/admin-api/rest/reference/billing/applicationcredit). */\n  AppSaleCredit = 'APP_SALE_CREDIT',\n  /** A transaction corresponding to an app subscription charge. */\n  AppSubscriptionSale = 'APP_SUBSCRIPTION_SALE',\n  /** A transaction corresponding to an app usage charge. */\n  AppUsageSale = 'APP_USAGE_SALE',\n  /** A transaction of a type that is no longer supported. */\n  Legacy = 'LEGACY',\n  /** A transaction corresponding to a shop referral. */\n  Referral = 'REFERRAL',\n  /** A transaction corresponding to a shop referral adjustment. */\n  ReferralAdjustment = 'REFERRAL_ADJUSTMENT',\n  /** A transaction corresponding to a paid invoice for a service. */\n  ServiceSale = 'SERVICE_SALE',\n  /** A transaction corresponding to a refund, downgrade, or adjustment of a service sale. */\n  ServiceSaleAdjustment = 'SERVICE_SALE_ADJUSTMENT',\n  /**\n   * Tax transactions are not computed for pending transactions. Instead, they're rolled\n   * up as one transaction per payout. The type of tax and the way it's\n   * computed is dependent on the type of transaction.\n   *\n   * For sale transactions, such as app subscriptions or theme purchases, Shopify charges\n   * the Partner tax on the fee collected for brokering the transaction. The amount is\n   * a negative number in this scenario.\n   *\n   * For referral transactions, such as a development store transfer, Shopify pays the Partner\n   * a commission. The tax represents any taxes on the referral commission that are payable to\n   * the Partner. The amount is a positive number in this scenario.\n   */\n  Tax = 'TAX',\n  /** A transaction corresponding to a theme purchase. */\n  ThemeSale = 'THEME_SALE',\n  /** A transaction corresponding to a refund, downgrade, or adjustment of a theme sale. */\n  ThemeSaleAdjustment = 'THEME_SALE_ADJUSTMENT'\n}\n\n/** An event that marks that an app usage charge was applied. */\nexport type UsageChar",
                "filename": "web/server/src/modules/api-shopify-partners/graphql/generated/index.ts",
                "start_index": 55540,
                "end_index": 58434,
                "start_line": 31,
                "end_line": 1732,
                "max_line": 1838,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "ned or exchanged. */\n  Product = 'PRODUCT',\n  /** A shipping cost. */\n  Shipping = 'SHIPPING',\n  /** A tip added by the customer. */\n  Tip = 'TIP',\n  /** An unknown sale line. Represents new types that may be added in future versions. */\n  Unknown = 'UNKNOWN'\n}\n\n/** The tax allocated to a sale from a single tax line. */\nexport type SaleTax = {\n  __typename?: 'SaleTax';\n  /** The portion of the total tax amount on the related sale that comes from the associated tax line. */\n  amount: MoneyBag;\n  /** The unique ID for the sale tax. */\n  id: Scalars['ID'];\n  /** The tax line associated with the sale. */\n  taxLine: TaxLine;\n};\n\n/** A contract between a merchant and a customer to do business. Shopify creates a sales agreement whenever an order is placed, edited, or refunded. A sales agreement has one or more sales records, which provide itemized details about the initial agreement or subsequent changes made to the order. For example, when a customer places an order, Shopify creates the order, generates a sales agreement, and records a sale for each line item purchased in the order. A sale record is specific to a type of order line. Order lines can represent different things such as a purchased product, a tip added by a customer, shipping costs collected at checkout, and more. */\nexport type SalesAgreement = {\n  /** The application that created the agreement. */\n  app?: Maybe<App>;\n  /** The date and time at which the agreement occured. */\n  happenedAt: Scalars['DateTime'];\n  /** The unique ID for the agreement. */\n  id: Scalars['ID'];\n  /** The reason the agremeent was created. */\n  reason: OrderActionType;\n  /** The sales associated with the agreement. */\n  sales: SaleConnection;\n  /** The staff member associated with the agreement. */\n  user?: Maybe<StaffMember>;\n};\n\n\n/** A contract between a merchant and a customer to do business. Shopify creates a sales agreement whenever an order is placed, edited, or refunded. A sales agreement has one or more sales records, which provide itemized details about the initial agreement or subsequent changes made to the order. For example, when a customer places an order, Shopify creates the order, generates a sales agreement, and records a sale for each line item purchased in the order. A sale record is specific to a type of order line. Order lines can represent different things such as a purchased product, a tip added by a customer, shipping costs collected at checkout, and more. */\nexport type SalesAgreementSalesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  reverse?: InputMaybe<Scalars['Boolean']>;\n};\n\n/**\n * An auto-generated type for paginating through multiple SalesAgreements.\n *\n */\nexport type SalesAgreementConnection = {\n  __typename?: 'SalesAgreementConnection';\n  /** A list of edges. */\n  edges: Array<SalesAgreementEdge>;\n  /** A list of the nodes contained in SalesAgreementEdge.",
                "filename": "web/server/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1414566,
                "end_index": 1417561,
                "start_line": 35486,
                "end_line": 35541,
                "max_line": 44790,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export * from './slack';",
                "filename": "web/server/src/modules/slack/index.ts",
                "start_index": 0,
                "end_index": 24,
                "start_line": 1,
                "end_line": 1,
                "max_line": 1,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "try-point for queries. This acts as the public, top-level API from which all queries must start. */\nexport type QueryRootConversationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  createdAtMax?: InputMaybe<Scalars['DateTime']>;\n  createdAtMin?: InputMaybe<Scalars['DateTime']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  lastEventAtMax?: InputMaybe<Scalars['DateTime']>;\n  lastEventAtMin?: InputMaybe<Scalars['DateTime']>;\n  statuses?: InputMaybe<Array<ConversationStatus>>;\n  unreadOnly?: InputMaybe<Scalars['Boolean']>;\n};\n\n\n/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */\nexport type QueryRootJobArgs = {\n  id: Scalars['ID'];\n};\n\n\n/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */\nexport type QueryRootJobsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  createdAtMax?: InputMaybe<Scalars['DateTime']>;\n  createdAtMin?: InputMaybe<Scalars['DateTime']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  lastEventAtMax?: InputMaybe<Scalars['DateTime']>;\n  lastEventAtMin?: InputMaybe<Scalars['DateTime']>;\n  shopId?: InputMaybe<Scalars['ID']>;\n  statuses?: InputMaybe<Array<JobStatus>>;\n};\n\n\n/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */\nexport type QueryRootTransactionArgs = {\n  id: Scalars['ID'];\n};\n\n\n/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */\nexport type QueryRootTransactionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  appId?: InputMaybe<Scalars['ID']>;\n  before?: InputMaybe<Scalars['String']>;\n  createdAtMax?: InputMaybe<Scalars['DateTime']>;\n  createdAtMin?: InputMaybe<Scalars['DateTime']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  myshopifyDomain?: InputMaybe<Scalars['String']>;\n  shopId?: InputMaybe<Scalars['ID']>;\n  types?: InputMaybe<Array<TransactionType>>;\n};\n\n/** A transaction corresponding to a shop referral adjustment. */\nexport type ReferralAdjustment = Node & Transaction & {\n  __typename?: 'ReferralAdjustment';\n  /** The net amount that is added to or deducted from your payout. */\n  amount: Money;\n  /** The referral type. */\n  category: ReferralCategory;\n  /** The date and time when the transaction was recorded. */\n  createdAt: Scalars['DateTime'];\n  /** The transaction ID. */\n  id: Scalars['ID'];\n  /** The referred shop. */\n  shop?: Maybe<Shop>;\n};\n\n/** The referral type. */\nexport enum ReferralC",
                "filename": "web/server/src/modules/api-shopify-partners/graphql/generated/index.ts",
                "start_index": 38683,
                "end_index": 41404,
                "start_line": 1162,
                "end_line": 1280,
                "max_line": 1838,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export async function trackNewFirstPromoterCommissions({ app }: { app: string }) {\n    const binding = await FirstPromoterPartnersBindingModel.findOne({ app });\n    if (!binding) {\n        throw new Error(`No FirstPromoterPartnersBinding found for app: \"${app}\"`);\n    }\n\n    const firstpromoter = new FirstPromoterApi({ apiKey: binding.firstpromoterApiKey });\n    const partners = new ShopifyPartnersApi({\n        orgId: binding.partnersOrgId,\n        apiSecret: binding.partnersApiSecret,\n    });\n\n    const leads = await firstpromoter.leadsListAll();\n    const myshopifyDomains = leads.map((lead) => lead.uid);\n\n    const [partnersTransactions, partnersTransactionsErr] = await partners.getAllTransactions({\n        appId: binding.partnersAppId,\n        myshopifyDomains,\n    });\n    if (partnersTransactionsErr) throw partnersTransactionsErr;\n\n    /**\n     * We filter out transactions that have already been tracked for two reasons:\n     * 1. FirstPromoter will ignore sales that have already been tracked before so we don't\n     *    need to send unnecessary API requests.\n     * 2. There are some old sales that we tracked which did not have a transaction ID associated with them.\n     *    We don't want to track these sales again because it will cause duplicate sales in FirstPromoter.\n     *    These transaction IDs are included in the database to prevent them from being tracked again.\n     */\n    const previousTrackedSales = await FirstPromoterTrackedSaleModel.find({ app });\n    const untrackedTransactions = partnersTransactions.filter(\n        (tx) => !previousTrackedSales.some((something) => something.transactionId === tx.id)\n    );\n\n    const sales: TrackSaleReqBody[] = untrackedTransactions.map((tx) => ({\n        uid: tx.myshopifyDomain,\n        event_id: tx.id,\n        amount: tx.grossAmountCents,\n    }));\n\n    for (const sale of sales) {\n        await firstpromoter.trackSale(sale);\n\n        const trackedSaleToSave: FirstPromoterTrackedSale = {\n            app,\n            transactionId: sale.event_id,\n        };\n        /**\n         * Even if the sale was already tracked in FirstPromoter, we can upsert\n         * and perform a no-op on the document. This is useful for cases where we\n         * there are sales tracked in FirstPromoter which aren't in our Mongo.\n         * If we were to not do this, we'd end up continuously re-sending the\n         * same already tracked sales to FirstPromoter on every run of this function.\n         *\n         * See Linear issue BEAM-3079 for more details.\n         */\n        await FirstPromoterTrackedSaleModel.updateOne(\n            { transactionId: trackedSaleToSave.transactionId },\n            { $set: trackedSaleToSave },\n            { upsert: true }\n        );\n    }\n}",
                "filename": "web/server/src/modules/firstpromoter/firstpromoter.ts",
                "start_index": 360,
                "end_index": 3107,
                "start_line": 6,
                "end_line": 68,
                "max_line": 68,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { FirstPromoterApi, TrackSaleReqBody } from '../api-firstpromoter/api-firstpromoter';\nimport { ShopifyPartnersApi } from '../api-shopify-partners';\nimport { FirstPromoterPartnersBindingModel } from './firstpromoter-partners-bindings.model';\nimport { FirstPromoterTrackedSale, FirstPromoterTrackedSaleModel } from './firstpromoter-tracked-sales.model';",
                "filename": "web/server/src/modules/firstpromoter/firstpromoter.ts",
                "start_index": 0,
                "end_index": 358,
                "start_line": 1,
                "end_line": 4,
                "max_line": 68,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "@modelOptions({ schemaOptions: { _id: false } })\nclass ReplacementUpsellTargetProduct {\n    @prop({ required: true })\n    productId!: number;\n\n    @prop({ required: true, type: [Number] })\n    variantIds!: number[];\n}\n\nexport enum ReplacementUpsellTargetingType {\n    PRODUCT = 'product',\n}\n\n@modelOptions({ schemaOptions: { _id: false, discriminatorKey: 'targetingType' } })\nclass ReplacementUpsellTargeting {\n    @prop({ required: true, enum: ReplacementUpsellTargetingType })\n    targetingType!: ReplacementUpsellTargetingType;\n}\n\nclass ReplacementUpsellTargetingProduct extends ReplacementUpsellTargeting {\n    declare targetingType: ReplacementUpsellTargetingType.PRODUCT;\n\n    @prop({ required: true })\n    product!: ReplacementUpsellTargetProduct;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nexport class ReplacementUpsell {\n    @prop({\n        required: true,\n        type: ReplacementUpsellTargeting,\n        discriminators: () => [\n            { type: ReplacementUpsellTargetingProduct, value: ReplacementUpsellTargetingType.PRODUCT },\n        ],\n    })\n    targeting!: ReplacementUpsellTargetingProduct;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nclass AcceptButtonTextOverride {\n    @prop({ required: false, default: '' })\n    text!: string;\n\n    @prop({ required: false, default: '' })\n    confirmationText!: string;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nclass DeclineButtonTextOverride {\n    @prop({ required: false, default: '' })\n    text!: string;\n}",
                "filename": "web/server/src/modules/funnels/funnels.model.ts",
                "start_index": 16236,
                "end_index": 17733,
                "start_line": 11,
                "end_line": 1410,
                "max_line": 1412,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "egories. */\n  allProductCategories: Array<ProductCategory>;\n  /**\n   * The token required to query the shop's reports or dashboards.\n   * @deprecated Not supported anymore.\n   */\n  analyticsToken: Scalars['String'];\n  /**\n   * The paginated list of fulfillment orders assigned to the shop locations owned by the app.\n   *\n   * Assigned fulfillment orders are fulfillment orders that are set to be fulfilled from locations\n   * managed by\n   * [fulfillment services](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)\n   * that are registered by the app.\n   * One app (api_client) can host multiple fulfillment services on a shop.\n   * Each fulfillment service manages a dedicated location on a shop.\n   * Assigned fulfillment orders can have associated\n   * [fulfillment requests](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus),\n   * or might currently not be requested to be fulfilled.\n   *\n   * The app must have `read_assigned_fulfillment_orders`\n   * [access scope](https://shopify.dev/docs/api/usage/access-scopes)\n   * to be able to retrieve fulfillment orders assigned to its locations.\n   *\n   * All assigned fulfillment orders (except those with the `CLOSED` status) will be returned by default.\n   * Perform filtering with the `assignmentStatus` argument\n   * to receive only fulfillment orders that have been requested to be fulfilled.\n   *\n   */\n  assignedFulfillmentOrders: FulfillmentOrderConnection;\n  /** The list of sales channels not currently installed on the shop. */\n  availableChannelApps: AppConnection;\n  /** The shop's billing address information. */\n  billingAddress: ShopAddress;\n  /**\n   * Exposes the number of channels.\n   * @deprecated Use `publicationCount` instead.\n   */\n  channelCount: Scalars['Int'];\n  /** List of all channel definitions associated with a shop. */\n  channelDefinitionsForInstalledChannels: Array<AvailableChannelDefinitionsByChannel>;\n  /**\n   * List of the shop's active sales channels.\n   * @deprecated Use `QueryRoot.channels` instead.\n   */\n  channels: ChannelConnection;\n  /** Specifies whether the shop supports checkouts via Checkout API. */\n  checkoutApiSupported: Scalars['Boolean'];\n  /**\n   * Return a collection by its handle.\n   * @deprecated Use `QueryRoot.collectionByHandle` instead.\n   */\n  collectionByHandle?: Maybe<Collection>;\n  /**\n   * List of the shop's collection saved searches.\n   * @deprecated Use `QueryRoot.collectionSavedSearches` instead.\n   */\n  collectionSavedSearches: SavedSearchConnection;\n  /**\n   * List of the shop's collections.\n   * @deprecated Use `QueryRoot.collections` instead.\n   */\n  collections: CollectionConnection;\n  /**\n   * The public-facing contact email address for the shop.\n   * Customers will use this email to communicate with the shop owner.\n   *\n   */\n  contactEmail: Scalars['String'];\n  /** Countries that have b",
                "filename": "web/server/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1499531,
                "end_index": 1502418,
                "start_line": 36409,
                "end_line": 37629,
                "max_line": 44790,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n    const body = TriggerRequestBody.parse(req.body);\n\n    const user = await userModel.findOne({ myshopify_domain: body.shop });\n\n    if (!user) {\n        const response: TriggerResponseBodyType = {\n            status: 'error',\n            error: 'User not found',\n        };\n        return res.status(400).json(TriggerResponseBody.parse(response));\n    }\n\n    const activeFunnels = await FunnelsModel.aggregate([\n        {\n            $match: { shop: body.shop, status: true, triggers: { $exists: true } },\n        },\n    ]);\n    const appliedDiscountPercentageOutOf100 = FunnelsService.calculateCheckoutDiscountPercentageOutOf100({\n        checkout: {\n            total_line_items_price: body.purchase.totalLineItemsPrice.toFixed(2),\n            subtotal_price: body.purchase.subtotalPrice.toFixed(2),\n        },\n    });\n\n    const shopifyService = new ShopifyService({ shop: body.shop, accessToken: user.accessToken });\n    const checkout = await shopifyService\n        .getCheckout({ referenceId: body.purchase.referenceId })\n        .catch((err) => ignoreMissingScopeErrorRest({ shop: body.shop, scope: 'read_checkouts', err }))\n        // Catch 404 errors in case store is using a custom checkout.\n        // The store riva-home-furnishings.myshopify.com has a custom checkout, when\n        // we tried to fetch the checkout from the Shopify API, it threw a 404 error.\n        // This prevented the offers from being displayed.\n        // I think this is a bug from Shopify, but for now we'll use this workaround.\n        .catch((err) =>\n            ignoreStatusCodeError({\n                shop: body.shop,\n                logName: 'getCheckout() in /trigger',\n                statusCodeToIgnore: 404,\n                err,\n            })\n        );\n    const storefrontSessionService = new StorefrontSessionService();\n    const triggeredFunnel = await FunnelsService.getTriggeredFunnel({\n        activeFunnels,\n        purchaseData: {\n            totalPrice: body.purchase.totalPrice,\n            lineItems: body.purchase.lineItems,\n            customerId: body.purchase.customerId,\n            referenceId: body.purchase.referenceId, // TODO\n            locale: body.purchase.language, // TODO: this is expected to be \"en-US\" internally, but passing \"en\" works fine. Make this clearer.\n            isDefaultStoreCurrency: user.currency === body.purchase.currencyCode,\n            destinationCountryCode: body.purchase.destinationCountryCode,\n            destinationProvinceCode: body.purchase.destinationProvinceCode,\n            appliedDiscountCodes: body.purchase.appliedDiscountCodes,\n            appliedDiscountPercentageOutOf100,\n        },\n        shopify: shopifyService,\n        storefrontSessionService,\n        isThankYouPage: true,\n    });",
                "filename": "web/server/src/modules/ty-ext-widgets-public/ty-ext-widgets-public.controller.ts",
                "start_index": 3213,
                "end_index": 5972,
                "start_line": 2,
                "end_line": 215,
                "max_line": 220,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "initial_doc_snippets": [
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/server` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 999,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# AfterSell\n\n### All Docs on Notion \ud83d\udc49 [AfterSell Notion Docs](https://www.notion.so/aftersell/AfterSell-Docs-9d43566167b5426d86b5983925872953?pvs=4)",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 148,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <!-- Shopify App Bridge [START] -->\n        <meta name=\"shopify-api-key\" content=\"%SHOPIFY_API_KEY%\" />",
                "filename": "web/client/index.html",
                "start_index": 38,
                "end_index": 156,
                "start_line": 4,
                "end_line": 6,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"step__sections\">\n                                <div class=\"section\">\n                                    <div class=\"section__header os-header\">\n                                        <svg\n                                            width=\"56\"\n                                            height=\"56\"\n                                            viewBox=\"0 0 56 56\"\n                                            fill=\"none\"\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                            <circle cx=\"28\" cy=\"28\" r=\"26\" stroke=\"#E5E5E5\" stroke-width=\"2.29412\" />\n                                            <path\n                                                fill-rule=\"evenodd\"\n                                                clip-rule=\"evenodd\"\n                                                d=\"M22.4811 37.3603L16.3636 31.3947C15.5663 30.6172 15.5663 29.3605 16.3636 28.583C17.1609 27.8055 18.4497 27.8055 19.247 28.583L23.8066 33.0293L36.6493 18.7538C37.3834 17.9186 38.6701 17.8231 39.5225 18.537C40.379 19.2529 40.4789 20.5056 39.7448 21.3388L25.4706 37.2469C25.1015 37.6685 24.5672 37.9191 24.0003 37.9409C23.3825 37.9429 22.8625 37.7341 22.4811 37.3603Z\"\n                                                fill=\"#008060\"\n                                                stroke=\"#E5E5E5\"\n                                                stroke-width=\"0.764706\"\n                                            />\n                                        </svg>\n                                        <div class=\"os-header__heading\">\n                                            <span class=\"os-order-number\"> Order #1001 </span>\n                                            <h2 class=\"os-header__title\" id=\"main-header\" tabindex=\"-1\">\n                                                Thank you {{Customer Name}}!\n                                            </h2>\n                                        </div>\n                                    </div>\n                                </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245858,
                "end_index": 247957,
                "start_line": 6161,
                "end_line": 6451,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<body class=\"aftersell-preview\">\n        <a href=\"#main-header\" class=\"skip-to-content\"> Skip to content </a>\n\n        <header class=\"banner\" data-header=\"\" role=\"banner\">\n            <div class=\"wrap\">\n                <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n            </div>\n        </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241387,
                "end_index": 241804,
                "start_line": 6077,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# [[[ --- CLIENT --- ]]]\nFROM node:18.16.1-alpine AS client\nARG SHOPIFY_API_KEY\nENV SHOPIFY_API_KEY=$SHOPIFY_API_KEY\nARG HOST\nENV HOST=$HOST\nARG NODE_ENV\nENV NODE_ENV=$NODE_ENV\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/client/package.json ./web/client/package.json\nCOPY web/client/yarn.lock ./web/client/yarn.lock\nRUN cd web/client && yarn install --frozen-lockfile --production=false\nCOPY extensions-web-common/package.json ./extensions-web-common/package.json\nCOPY extensions-web-common/yarn.lock ./extensions-web-common/yarn.lock\nRUN cd extensions-web-common && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY extensions/post-purchase ./extensions/post-purchase\nCOPY extensions-web-common/post-purchase ./extensions-web-common/post-purchase\nCOPY extensions-web-common/checkout ./extensions-web-common/checkout\nCOPY extensions-web-common/shared ./extensions-web-common/shared\nCOPY extensions-web-common/ty-page ./extensions-web-common/ty-page\nCOPY web/client ./web/client\nRUN cd web/client && yarn build\n\n# [[[ --- TY PAGE --- ]]]\nFROM node:18.16.1-alpine AS ty-page\nARG HOST\nENV HOST=$HOST\nWORKDIR /usr/src/app\nCOPY web/widgets/package.json ./web/widgets/package.json\nCOPY web/widgets/yarn.lock ./web/widgets/yarn.lock\nRUN cd web/widgets && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY web/widgets ./web/widgets\nRUN cd web/widgets && yarn build\n\n# [[[ --- SERVER --- ]]]\nFROM node:18.16.1-alpine AS server\nWORKDIR /usr/src/app\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=false\nCOPY web/server ./web/server\nCOPY web/common ./web/common\nRUN cd web/server && yarn build\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM node:18.16.1-alpine AS final\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=true\nCOPY --from=server /usr/src/app/web/server/build ./web/server/build\nCOPY --from=ty-page /usr/src/app/web/widgets/dist ./web/server/build/server/dist\nCOPY --from=client /usr/src/app/web/client/dist ./web/server/build/server/dist/client\nCOPY package.json ./package.json\nCMD [\"yarn\", \"start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2514,
                "start_line": 1,
                "end_line": 61,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<tbody class=\"total-line-table__tbody\">\n                                            <tr class=\"total-line total-line--subtotal\">\n                                                <th class=\"total-line__name\" scope=\"row\">Subtotal</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-subtotal-price-target=\"4299\"\n                                                    >\n                                                        $42.99\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--shipping\">\n                                                <th class=\"total-line__name\" scope=\"row\">\n                                                    <span> Shipping </span>\n                                                </th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-shipping-target=\"0\"\n                                                    >\n                                                        Free\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--taxes\" data-checkout-taxes=\"\">\n                                                <th class=\"total-line__name\" scope=\"row\">Taxes</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-taxes-target=\"774\"\n                                                        >$7.74</span\n                                                    >\n                                                </td>\n                                            </tr>\n                                        </tbody>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 333285,
                "end_index": 335837,
                "start_line": 6396,
                "end_line": 6433,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<aside class=\"sidebar\" role=\"complementary\">\n                    <div class=\"sidebar__header\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323196,
                "end_index": 323511,
                "start_line": 6285,
                "end_line": 6493,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"section__content\">\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Contact information</h3>\n\n                                                            <p class=\"as-dummy-line\"></p>\n\n                                                            <h3 class=\"heading-3\">Shipping address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n\n                                                            <h3 class=\"heading-3\">Shipping method</h3>\n                                                            <p class=\"as-dummy-line as-w40\"></p>\n                                                        </div>\n                                                    </div>\n\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Payment method</h3>\n                                                            <ul class=\"payment-method-list\">\n                                                                <li class=\"payment-method-list__item\">\n                                                                    <p class=\"as-dummy-line as-w80\"></p>\n                                                                </li>\n                                                            </ul>\n\n                                                            <h3 class=\"heading-3\">Billing address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n                                                        </div>\n                                                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318877,
                "end_index": 321837,
                "start_line": 6191,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Shopify Function development with Rust\n\n## Dependencies\n\n-   [Install Rust](https://www.rust-lang.org/tools/install)\n    -   On Windows, Rust requires the [Microsoft C++ Build Tools](https://docs.microsoft.com/en-us/windows/dev-environment/rust/setup). Be sure to select the _Desktop development with C++_ workload when installing them.\n-   Install [`cargo-wasi`](https://bytecodealliance.github.io/cargo-wasi/)\n    -   `cargo install cargo-wasi`\n-   On Macs with Apple Silicon, you'll also need to install the Binaryen toolchain and set the `WASM_OPT` environment variable. ([related issue](https://github.com/bytecodealliance/cargo-wasi/issues/112))\n    -   `brew install binaryen`\n    -   Add `export WASM_OPT=/opt/homebrew/bin/wasm-opt` to your `.bashrc` or `.zshrc`\n\n## Building the function\n\nYou can build this individual function using `cargo wasi`.\n\n```shell\ncargo wasi build --release\n```\n\nThe Shopify CLI `build` command will also execute this, based on the configuration in `shopify.function.extension.toml`.\n\n## Testing\n\n> Requires Node v16+\n\n1. Create a temporary JSON file (e.g., `a.json`) in the following format:\n\n```json\n{\n    \"data\": {\n        \"foo\": \"bar\"\n    },\n    \"secretKey\": \"abc123\"\n}\n```\n\n2. Run the following command\n\n```\nyarn test:new-hmac < a.json\n```\n\n3. Copy the generated HMAC into the test file",
                "filename": "extensions/upsell-offer-discount-function/README.md",
                "start_index": 0,
                "end_index": 1329,
                "start_line": 1,
                "end_line": 44,
                "max_line": 44,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script>\n            !(function (f, b, e, v, n, t, s) {\n                if (f.fbq) return;\n                n = f.fbq = function () {\n                    n.callMethod ? n.callMethod.apply(n, arguments) : n.queue.push(arguments);\n                };\n                if (!f._fbq) f._fbq = n;\n                n.push = n;\n                n.loaded = !0;\n                n.version = '2.0';\n                n.queue = [];\n                t = b.createElement(e);\n                t.async = !0;\n                t.src = v;\n                s = b.getElementsByTagName(e)[0];\n                s.parentNode.insertBefore(t, s);\n            })(window, document, 'script', 'https://connect.facebook.net/en_US/fbevents.js');\n            fbq('init', '895262111044943');\n            fbq('track', 'PageView');\n        </script>\n        <!-- End Facebook Pixel Code -->\n        <!-- Reddit Pixel -->\n        <script>\n            !(function (w, d) {\n                if (!w.rdt) {\n                    var p = (w.rdt = function () {\n                        p.sendEvent ? p.sendEvent.apply(p, arguments) : p.callQueue.push(arguments);\n                    });\n                    p.callQueue = [];\n                    var t = d.createElement('script');\n                    (t.src = 'https://www.redditstatic.com/ads/pixel.js'), (t.async = !0);\n                    var s = d.getElementsByTagName('script')[0];\n                    s.parentNode.insertBefore(t, s);\n                }\n            })(window, document);\n            rdt('init', 't2_dp3wj8bg');\n            rdt('track', 'PageVisit');\n        </script>\n        <!-- End Reddit Pixel -->\n\n        <!-- Dev HMR [START] -->\n        <script type=\"module\">\n            if (!import.meta.env || !import.meta.env.PROD) {\n                // For embedded development, the iframe loads an HTML file from the server. Normally for\n                // development, the HTML file is served by the dev server, which injects the HMR script.\n                // This script adds the HMR script to the iframe to allow HMR in embedded development.\n                const script = document.createElement('script');\n                script.setAttribute('type', 'module');\n                script.setAttribute('src', './src/dev-hmr.ts');\n                document.getElementsByTagName('head')[0].append(script);\n            }\n        </script>\n        <!-- Dev HMR [END] -->\n\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com/\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" crossorigin=\"anonymous\" />\n        <link\n            href=\"https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap\"\n        />\n    </head>",
                "filename": "web/client/index.html",
                "start_index": 6232,
                "end_index": 8924,
                "start_line": 7,
                "end_line": 178,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"main\">\n                    <header class=\"main__header\" role=\"banner\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245397,
                "end_index": 245703,
                "start_line": 6153,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"hidden\">\n                            <span class=\"visually-hidden\" id=\"forwarding-external-new-window-message\">\n                                Opens external website in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-new-window-message\">\n                                Opens in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-external-message\">\n                                Opens external website.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"checkout-context-step-one\">\n                                Customer information - Checkout\n                            </span>\n                        </div>\n                    </main>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 322226,
                "end_index": 323078,
                "start_line": 6265,
                "end_line": 6282,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"sidebar__content\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323532,
                "end_index": 323562,
                "start_line": 6291,
                "end_line": 6291,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box\">\n                                            <div class=\"content-box__row content-box__row--no-border\">\n                                                <h2>Customer information</h2>\n                                            </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318496,
                "end_index": 318753,
                "start_line": 6192,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"section__content\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 248049,
                "end_index": 248079,
                "start_line": 6191,
                "end_line": 6215,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<html\n    lang=\"en\"\n    dir=\"ltr\"\n    class=\"js desktop page--no-banner page--logo-main page--show page--show card-fields cors svg opacity placeholder no-touchevents displaytable display-table generatedcontent cssanimations flexbox no-flexboxtweener anyflexbox shopemoji floating-labels\"\n>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 0,
                "end_index": 289,
                "start_line": 1,
                "end_line": 6518,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box__row text-container\">\n                                                <h2 class=\"heading-2 os-step__title\" id=\"main-header\" tabindex=\"-1\">\n                                                    Your order is confirmed\n                                                </h2>\n                                                <p class=\"os-step__description\">\n                                                    You\u2019ll receive an email when your order is ready.\n                                                </p>\n                                            </div>\n                                        </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 317828,
                "end_index": 318454,
                "start_line": 6200,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "intial_documentation_sources": {
            "shopify": {
                "collection": "shopify_documentation",
                "reason_for_relevance": "The issue involves a SlackConnection model that likely interacts with merchant data in a Shopify store, and Shopify's API reference may provide necessary information on how to handle merchant data for the integration."
            }
        },
        "external_documentation_snippets": {
            "external_shopify": [
                {
                    "code": "Product description\n Cart and checkout\n Onboard merchants\n Post checkout\n Overview\n Order data\n Billing\n Storing order data\n Caution\n The merchant-facing sales channel app referenced in this tutorial isn't compatible with Shopify CLI 3, and can't be previewed using Shopify development tools. You can use the app and these tutorials as reference material to build a CLI 3-compatible app using the same patterns.\n Your marketplace is ready for merchants to start selling. You want to save order data to your database for orders made on a marketplace through your channel app.\n In this tutorial, you'll create a database table for storing order data. You'll also subscribe to webhook events and create handlers for them.\n What you'll learn\n After finishing this tutorial, you'll know how to do the following:\n Handle webhook events for orders\n Store order data in your database\n Requirements\n You've completed the Merchant onboarding tutorials.\n You're familiar with webhooks.\n Access scopes\n Your channel app requires the following access scopes:\n read_orders\n Note\n For sales channel apps, the read_orders scope grants access to only the orders that your app creates.\n Step 1: Add the orders model\n In this step, you'll create an Orders data table in your schema, with column data reflecting the information you want to store. You'll also run a database migration. For an overview of the available fields for generating your orders model, refer to the Order API reference.\n Run the following command to create a new migration file:\n Terminal\n $ npx sequelize-cli migration:generate --name=add-order-model\n In the newly-generated migration file, add the following code:\n migrations/{TIMESTAMP}-add-order-model.js\n 1 'use strict';\n 2\n 3 module.exports = {\n 4\n    up: async (queryInterface, Sequelize) => {\n 5\n      await queryInterface.createTable('Orders', {\n 6\n        id: {\n 7\n          allowNull: false,\n 8\n          autoIncrement: true,\n 9\n          primaryKey: true,\n 10\n          type: Sequelize.INTEGER,\n 11\n        },\n 12\n        domain: {\n 13\n          type: Sequelize.STRING,\n 14\n        },\n 15\n        orderId: {\n 16\n          unique: true,\n 17\n          type: Sequelize.BIGINT,\n 18\n        },\n 19\n        orderStatusUrl: {\n 20\n          type: Sequelize.STRING,\n 21\n        },\n 22\n        lineItems: {\n 23\n          type: Sequelize.JSON,\n 24\n        },\n 25\n        fulfillmentStatus: {\n 26\n          type: Sequelize.STRING,\n 27\n        },\n 28\n        fulfillmentId: {\n 29\n          type: Sequelize.BIGINT,\n 30\n        },\n 31\n        fulfillmentDate: {\n 32\n          type: Sequelize.DATE,\n 33\n        },\n 34\n        fulfillmentTrackingCompany: {\n 35\n          type: Sequelize.STRING,\n 36\n        },\n 37\n        fulfillmentTrackingNumber: {\n 38\n          type: Sequelize.STRING,\n 39\n        },\n 40\n        createdAt: {\n 41\n          allowNull: false,\n 42\n          type: Sequelize.DATE,\n 43\n        },\n 44\n        updatedAt: {\n 45\n          allowNull: false,\n 46\n          type: Sequelize.DATE,\n 47\n        },\n 48\n      });\n 49\n    },\n 50\n 51\n    down: async (queryInterface) => {\n 52\n      await queryInterface.dropTable('Orders');\n 53\n    },\n 54 };\n Create a models/order.js file and add the following code:\n models/order.js\n 1 'use strict';\n 2 const {Model} = require('sequelize');\n 3 module.exports = (sequelize, DataTypes) => {\n 4\n    class Order extends Model {\n 5\n      /**\n 6\n      * Helper method for defining associations.\n 7\n      * This method is not a part of Sequelize lifecycle.\n 8\n      * The `models/index` file will call this method automatically.\n 9\n      */\n 10\n      static associate() {\n 11\n        // define association here\n 12\n      }\n 13\n    }\n 14\n    Order.init(\n 15\n      {\n 16\n        domain: DataTypes.STRING,\n 17\n        orderId: DataTypes.BIGINT,\n 18\n        orderStatusUrl: DataTypes.STRING,\n 19\n        lineItems: DataTypes.JSON,\n 20\n        fulfillmentStatus: DataTypes.STRING,\n 21\n        fulfillmentId: DataTypes.BIGINT,\n 22\n        fulfillmentDate: DataTypes.DATE,\n 23\n        fulfillmentTrackingCompany: DataTypes.STRING,\n 24\n        fulfillmentTrackingNumber: DataTypes.STRING,\n 25\n      },\n 26\n      {\n 27\n        sequelize,\n 28\n        modelName: 'Order',\n 29\n      },\n 30\n    );\n 31\n    return Order;\n 32 };\n Run the following to apply the migration and create the new data table:\n Terminal\n $ npx sequelize-cli db:migrate\n Step 2: Add a webhook handler\n In this step, you'll create the framework to subscribe to the ORDERS_CREATE webhook topic and handle orders/create webhook events. You'll do the same for the ORDERS_FULFILLED webhook topic.\n In server/handlers/webhooks, create an orders.js file.\n In server/handlers/webhooks/orders.js, add a webhook handler to listen for incoming webhooks and save them to the Orders data table that you created.\n server/handlers/webhooks/orders.js\n 1 import db from '../../../models';\n 2\n 3 export const handleOrderCreate = async (shop, body) => {\n 4\n    const data = JSON.parse(body);\n 5\n 6\n    try {\n 7\n      await db.Order.create({\n 8\n        domain: shop,\n 9\n        orderId: data.id,\n 10\n        orderStatusUrl: data.order_status_url,\n 11\n        lineItems: data.line_items,\n 12\n      });\n 13\n    } catch (err) {\n 14\n      console.log('Error creating the entry in the database: ', err);\n 15\n    }\n 16 };\n 17\n 18 export const handleOrderFulfill = async (shop, body) => {\n 19\n    const data = JSON.parse(body);\n 20\n 21\n    const fulfillment = data.fulfillments[0];\n 22\n 23\n    const order = await db.Order.findOne({\n 24\n      where: {orderId: fulfillment.order_id},\n 25\n    });\n 26\n 27\n    if (!order) return;\n 28\n 29\n    const orderUpdate = {\n 30\n      fulfillmentStatus: data.fulfillment_status,\n 31\n      fulfillmentId: fulfillment.id,\n 32\n      fulfillmentDate: fulfillment.created_at,\n 33\n      fulfillmentTrackingCompany: fulfillment.tracking_company,\n 34\n      fulfillmentTrackingNumber: fulfillment.tracking_number,\n 35\n    };\n 36\n 37\n    await order.update(orderUpdate);\n 38\n 39\n    await order.save();\n 40 };\n In server/handlers/webhooks/setup.js, subscribe to the ORDERS_CREATE and ORDERS_FULFILLED webhooks.\n server/handlers/webhooks/setup.js\n 1 import {Shopify} from '@shopify/shopify-api';\n 2 import {handleAppUninstall} from './app-uninstall';\n 3 import {handleOrderCreate, handleOrderFulfill} from './order';\n 4 import {handleShopUpdate} from './shop-update';\n 5\n 6 const APP_UNINSTALLED = 'APP_UNINSTALLED';\n 7 const ORDERS_CREATE = 'ORDERS_CREATE';\n 8 const ORDERS_FULFILLED = 'ORDERS_FULFILLED';\n 9 const SHOP_UPDATE = 'SHOP_UPDATE';\n 10\n 11 export const addWebhookHandlers = () => {\n 12\n    Shopify.Webhooks.Registry.addHandler(APP_UNINSTALLED, {\n 13\n      path: '/webhooks',\n 14\n      webhookHandler: async (topic, shop) => await handleAppUninstall(shop),\n 15\n    });\n 16\n 17\n    Shopify.Webhooks.Registry.addHandler(ORDERS_CREATE, {\n 18\n      path: '/webhooks',\n 19\n      webhookHandler: async (topic, shop, body) =>\n 20\n        await handleOrderCreate(shop, body),\n 21\n    });\n 22\n 23\n    Shopify.Webhooks.Registry.addHandler(ORDERS_FULFILLED, {\n 24\n      path: '/webhooks',\n 25\n      webhookHandler: async (topic, shop, body) =>\n 26\n        await handleOrderFulfill(shop, body),\n 27\n    });\n 28\n 29\n    Shopify.Webhooks.Registry.addHandler(SHOP_UPDATE, {\n 30\n      path: '/webhooks',\n 31\n      webhookHandler: async (topic, shop, body) =>\n 32\n        await handleShopUpdate(shop, body),\n 33\n    });\n 34 };\n 35 export const registerWebhooks = async (shop, accessToken) => {\n 36\n    const registerAllResponse = await Shopify.Webhooks.Registry.registerAll({\n 37\n      shop,\n 38\n      accessToken,\n 39\n    });\n 40\n    Object.keys(registerAllResponse).forEach((key) => {\n 41\n      if (!registerAllResponse[key].success) {\n 42\n        console.log(\n 43\n          `Failed to register ${key} webhook: ${registerAllResponse[key].result}`,\n 44\n        );\n 45\n      }\n 46\n    });\n 47 };\n Step 3: Register additional webhooks\n There are several Order-adjacent webhook topics that you might want to subscribe to and make database adjustments based on their content.\n Next steps\n Learn how to bill merchants for sales they make on your marketplace.\n Share feedback on Marketplace Kit.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n What you'll learn\n Requirements\n Access scopes\n Step 1: Add the orders model\n Step 2: Add a webhook handler\n Step 3: Register additional webhooks\n Next steps\n Updates & News",
                    "filename": "docs/marketplaces/post-checkout/store-order-data/content.txt",
                    "start_index": 0,
                    "end_index": 8410,
                    "start_line": 1,
                    "end_line": 365,
                    "max_line": 365,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Overview\n Getting started\n Overview\n Get started\n Channel app\n Marketplace homepage\n Developer tools\n Shop discovery\n Shops\n Product description\n Cart and checkout\n Onboard merchants\n Post checkout\n Getting started with Marketplace Kit\n Caution\n The merchant-facing sales channel app referenced in this tutorial isn't compatible with Shopify CLI 3, and can't be previewed using Shopify development tools. You can use the app and these tutorials as reference material to build a CLI 3-compatible app using the same patterns.\n Tip\n Marketplace Kit tutorials require you to have a buyer-facing marketplace in place. If you don't have one, then you can clone code for a buyer-facing app as a springboard to get you started.\n You're ready to create a marketplace. You want to showcase products from multiple merchants on your platform and direct buyers towards a sale. You'll get started with a basic framework that you can build on.\n In this tutorial, you'll clone code for the channel app and set up the marketplace's routing, access, and data query framework.\n What you'll learn\n After finishing this tutorial, you'll know how to do the following:\n Set up a merchant-facing channel app\n Navigate the channel app code\n Requirements\n You've installed the latest versions of Node.js and npm.\n You've installed Yarn.\n You've installed Sequelize CLI. The channel app uses Sequelize as the ORM, so having the associated CLI is useful.\n Terminal\n # Add Sequelize as a dependency in your project\n $ npm install sequelize sqlite3 # or\n $ yarn add sequelize sqlite3\n $\n # Install Sequelize CLI\n $ npm install --save-dev sequelize-cli\n You've completed the GraphQL and REST Admin API getting started and you're authorized with the APIs using OAuth and an offline access token.\n You've created a Partner account and a development store.\n You understand how apps fit into Shopify and the different ways of distributing your app.\n You're familiar with channels.\n You've turned your app into a sales channel.\n You're familiar with the Storefront API.\n Step 1: Clone the app repository\n In this step, you'll clone the repository that contains code for the merchant-facing sales channel app.\n Terminal\n $ git clone https://github.com/Shopify/shopify-marketplaces-admin-app.git\n Step 2: Add the required scopes to a .env file\n The app requires a set of access scopes to access shop data.\n At the shopify-marketplaces-admin-app project root, create a .env file.\n In the .env file, add the following access scopes:\n shopify-marketplaces-admin-app/.env\n 1 SCOPES=write_products,write_customers,write_draft_orders,unauthenticated_read_product_listings,read_product_listings\n Step 3: Install packages\n At the project root, run the following command:\n Terminal\n $ yarn install\n The packages for the app are listed in the yarn.lock file.\n Step 4: Connect and set up your database\n The app connects to the database using Sequelize ORM, and uses a SQLite file as the database. You can edit this to connect to your own database. You can either use a new database or connect the app to an existing database. After your database is connected, you'll run the migrations to create the required data tables.\n In config/config.json, edit the database values to connect to your database. For more information on how to connect the database, refer to the Sequelize documentation.\n Run the migrations that create the data tables.\n Migrations will be in the migrations folder. All associated models will be in the models folder.\n Terminal\n $ npx sequelize-cli db:migrate\n You can optionally edit the migrations and set up models based on a table in an existing database.\n Step 5: Review the Marketplace Kit code structure\n Familiarize yourself with the code structure for the merchant-facing app, to help orient you to subsequent Marketplace Kit tutorials.\n Code structure\n Folder/file Contains\n app/* React code for the frontend, which the merchant sees in the Shopify admin\n server/index.js The setup for the app's Express server, the Shopify API library, and the Apollo GraphQL server\n server/custom-session-storage.js\n Custom session storage functions to store data in the database.\n You might need to edit this for the database that you're using\n server/handlers/*\n Helper functions for making REST and GraphQL calls to Shopify, so that you can do things like create Storefront Access Tokens\n Callback functions that are called when the app receives a webhook from Shopify\n server/helpers.js Helper and wrapper functions that call functions in the handlers folder\n webpack.config.js\n The configuration for webpack, which is the app's module bundler\n You might need to edit this file depending on your needs for development and production\n Next steps\n Learn how to build up the merchant-facing channel app page for the Shopify admin.\n Share feedback on Marketplace Kit.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n What you'll learn\n Requirements\n Step 1: Clone the app repository\n Step 2: Add the required scopes to a `.env` file\n Step 3: Install packages\n Step 4: Connect and set up your database\n Step 5: Review the Marketplace Kit code structure\n Next steps\n Updates & News",
                    "filename": "docs/marketplaces/getting-started/get-started-with-shopify-marketplace-kit/content.txt",
                    "start_index": 0,
                    "end_index": 5145,
                    "start_line": 1,
                    "end_line": 95,
                    "max_line": 95,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "The following is an example:\n In app/src/sections/Onboarding/components/OnboardingChecklistCard.jsx, update the OnboardingChecklistCard component to accept props for the subscription confirmation URL and whether the subscription is accepted.\n The component should render an item for the subscription agreement, which redirects to the confirmation URL on action.\n app/src/sections/Onboarding/components/OnboardingChecklistCard.jsx\n 1 const OnboardingChecklistCard = ({\n 2\n   // ...\n 3\n   subscriptionConfirmationUrl,\n 4\n   subscriptionAccepted,\n 5 }) => {\n 6\n   // ...\n 7\n   const handleSubscriptionAction = () => {\n 8\n     redirect.dispatch(Redirect.Action.REMOTE, {\n 9\n       url: subscriptionConfirmationUrl,\n 10\n     });\n 11\n   };\n 12\n 13\n   const items = [\n 14\n     // ...\n 15\n     {\n 16\n       label: 'Accept the app subscription agreement',\n 17\n       completed: subscriptionAccepted,\n 18\n       action: {\n 19\n         onAction: handleSubscriptionAction,\n 20\n       },\n 21\n     },\n 22\n   ];\n 23\n 24\n   // ...\n 25 }\n In app/src/sections/Onboarding/Onboarding.jsx update the admin shop query to fetch the subscription details.\n Update the Onboarding component to pass the subscription details from the query to the OnboardingChecklistCard component. The component should also use the subscriptionAccepted Boolean to determine whether the shop meets marketplace requirements.\n app/src/sections/Onboarding/Onboarding.jsx\n 1 // ...\n 2\n 3 const ONBOARDING_PAGE_QUERY = gql`\n 4\n    query OnboardingPageQuery {\n 5\n      adminShop {\n 6\n        // ...\n 7\n        subscription {\n 8\n          confirmationUrl\n 9\n          accepted\n 10\n        }\n 11\n      }\n 12\n    }\n 13 `;\n 14\n 15 const Onboarding = () => {\n 16\n    // ...\n 17\n    const {\n 18\n      onboardingInfoCompleted,\n 19\n      termsAccepted,\n 20\n      config: {hasStorefront, shipsToCanada, cadEnabled, hasPolicies},\n 21\n      subscription: {\n 22\n        accepted: subscriptionAccepted,\n 23\n        confirmationUrl: subscriptionConfirmationUrl,\n 24\n      },\n 25\n    } = data.adminShop;\n 26\n    const requirementsMet =\n 27\n      hasStorefront &&\n 28\n      shipsToCanada &&\n 29\n      cadEnabled &&\n 30\n      hasPolicies &&\n 31\n      subscriptionAccepted;\n 32\n 33\n    return (\n 34\n      <OnboardingPage\n 35\n        // ...\n 36\n      >\n 37\n        // ...\n 38\n        <OnboardingChecklistCard\n 39\n          // ...\n 40\n          subscriptionConfirmationUrl={subscriptionConfirmationUrl}\n 41\n          subscriptionAccepted={subscriptionAccepted}\n 42\n        />\n 43\n        // ...\n 44\n      </OnboardingPage>\n 45\n    );\n 46 };\n The onboarding page checklist should now include an item for the subscription billing agreement:\n Clicking on the billing agreement requirement link should redirect to a subscription approval page:\n In app/src/sections/Settings.jsx, update the query to fetch the subscription details.\n The Settings component should pass the subscription details from the query into the SettingsChecklist component. The SettingsChecklist component should render an item for the billing requirement.\n app/src/sections/Settings.jsx\n 1 const SETTINGS_PAGE_QUERY = gql`\n 2\n   query SettingsPageQuery {\n 3\n     adminShop {\n 4\n       // ...\n 5\n       subscription {\n 6\n         confirmationUrl\n 7\n         accepted\n 8\n       }\n 9\n     }\n 10\n   }\n 11 `;\n 12\n 13 const SettingsChecklist = ({\n 14\n    // ...\n 15\n    subscriptionAccepted,\n 16\n    subscriptionConfirmationUrl,\n 17 }) => {\n 18\n    // ...\n 19\n 20\n    const handleSubscriptionAction = () => {\n 21\n      redirect.dispatch(Redirect.Action.REMOTE, {\n 22\n        url: subscriptionConfirmationUrl,\n 23\n      });\n 24\n    };\n 25\n 26\n    const items = [\n 27\n      // ...\n 28\n      {\n 29\n        label: 'Accept the app subscription agreement',\n 30\n        completed: subscriptionAccepted,\n 31\n        action: {\n 32\n          onAction: handleSubscriptionAction,\n 33\n        },\n 34\n      },\n 35\n    ];\n 36\n 37\n    // ...\n 38 };\n 39\n 40 const Settings = () => {\n 41\n    // ...\n 42\n    const checklistCardProps = data\n 43\n      ? {\n 44\n          children: (\n 45\n            <SettingsChecklist\n 46\n              {...data.adminShop.config}\n 47\n              subscriptionAccepted={data.adminShop.subscription.accepted}\n 48\n              subscriptionConfirmationUrl={\n 49\n                data.adminShop.subscription.confirmationUrl\n 50\n              }\n 51\n            />\n 52\n          ),\n 53\n        }\n 54\n      : {\n 55\n          sectioned: true,\n 56\n          children: <SkeletonBodyText lines={4} />,\n 57\n        };\n 58\n    // ...\n 59 };\n Step 4: Bill a usage fee\n After merchants have approved the subscription, you can start billing usage fees for orders placed on your marketplace.\n In server/handlers/mutations add a file called create-usage-record.js.\n In server/handlers/mutations/create-usage-record.js, add a method that creates a usage charge using the appUsageRecordCreate mutation.\n It should accept the subscriptionLineItemId, which is stored in your database, and bill a $0.5 usage fee.\n server/handlers/mutation/create-usage-record.js\n 1 import {callShopifyGraphqlAPI} from '../client';\n 2\n 3 const USAGE_RECORD_CREATE = `\n 4\n    mutation appUsageRecordCreate(\n 5\n      $subscriptionLineItemId: ID!\n 6\n      $price: MoneyInput!\n 7\n      $description: String!\n 8\n    ) {\n 9\n      appUsageRecordCreate(\n 10\n        subscriptionLineItemId: $subscriptionLineItemId\n 11\n        price: $price\n 12\n        description: $description\n 13\n      ) {\n 14\n        appUsageRecord {\n 15\n          id\n 16\n        }\n 17\n        userErrors {\n 18\n          field\n 19\n          message\n 20\n        }\n 21\n      }\n 22\n    }\n 23 `;\n 24\n 25 export const createUsageRecord = async (\n 26\n    shop,\n 27\n    token,\n 28\n    subscriptionLineItemId,\n 29 ) => {\n 30\n    const variables = {\n 31\n      subscriptionLineItemId,\n 32\n      price: {\n 33\n        amount: 0.5,\n 34\n        currencyCode: 'USD',\n 35\n      },\n 36\n      description: 'Marketplace order fee',\n 37\n    };\n 38\n 39\n    const resp = await callShopifyGraphqlAPI(shop, token, {\n 40\n      query: USAGE_RECORD_CREATE,\n 41\n      variables,\n 42\n    });\n 43\n 44\n    return resp.body.data.appUsageRecordCreate;\n 45 };\n In server/handlers/index.js export createUsageRecord from the handlers module.\n server/handlers/index.js\n 1 // ...\n 2 import {createUsageRecord} from './mutations/create-usage-record';\n 3\n 4 export {\n 5\n   // ...\n 6\n   createUsageRecord,\n 7 };\n In server/handlers/webhooks/orders.js update the handleOrderCreate function to get the shop\u2019s subscriptionLineItemId from the database, and call the handler that you created.\n server/handlers/webhooks/orders.js\n 1 import Shopify from '@shopify/shopify-api';\n 2 import {createUsageRecord} from '..';\n 3 import db from '../../../models';\n 4\n 5 export const handleOrderCreate = async (shop, body) => {\n 6\n    // ...\n 7\n    const {accessToken} = await Shopify.Utils.loadOfflineSession(shop);\n 8\n 9\n    const {subscriptionLineItemId} = await db.Shop.findOne({\n 10\n      where: {domain: shop},\n 11\n    });\n 12\n 13\n    await createUsageRecord(shop, accessToken, subscriptionLineItemId);\n 14 };\n Next steps\n Share feedback on Marketplace Kit.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n What you'll learn\n Requirements\n Step 1: Set up subscription handlers\n Step 2: Add a subscription confirmation URL to the internal API\n Step 3: Add the subscription to the channel app\n Step 4: Bill a usage fee\n Next steps\n Updates & News",
                    "filename": "docs/marketplaces/post-checkout/bill-merchants/content.txt",
                    "start_index": 12006,
                    "end_index": 19422,
                    "start_line": 447,
                    "end_line": 825,
                    "max_line": 825,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Product description\n Cart and checkout\n Onboard merchants\n Post checkout\n Overview\n Order data\n Billing\n Billing merchants\n Caution\n The merchant-facing sales channel app referenced in this tutorial isn't compatible with Shopify CLI 3, and can't be previewed using Shopify development tools. You can use the app and these tutorials as reference material to build a CLI 3-compatible app using the same patterns.\n Merchants can sell their products on your marketplace. Now you want to set up a billing model so that you can charge merchants a sales fee.\n In this tutorial, you'll take a fixed fee for each order made in the marketplace. You'll use a capped amount of $20 and charge a $0.5 fee for each order. This provides an approachable billing structure for merchants. It's similar to a monthly subscription of $20, but the merchant doesn\u2019t pay unless your marketplace has provided them with orders.\n What you'll learn\n After finishing this tutorial, you'll know how to do the following:\n Create a usage plan for billing merchants who make sales on your marketplace\n Add a monthly subscription plan for the marketplace\n Bill merchants a usage fee\n Requirements\n You've completed the tutorial for storing order data.\n Step 1: Set up subscription handlers\n To bill merchants for selling on your marketplace, you need to create the mutation that creates subscriptions and usage charges using the Admin API.\n In server/handlers/mutations create a file called create-app-subscription.js.\n In server/handlers/mutations/create-app-subscription.js, add a method that calls the appSubscriptionCreate mutation and creates a subscription with a usage pricing plan.\n The plan requires terms that tell merchants how you will be billing them, as well as a capped amount which is the maximum amount that you can charge the merchant per month. It also requires a return URL, which redirects the merchant back to your app after accepting the subscription in the Shopify admin. The method should return the subscription ID, confirmation URL, and line item ID.\n server/handlers/mutations/create-app-subscription.js\n 1 import {callShopifyGraphqlAPI} from '../client';\n 2 import dotenv from 'dotenv';\n 3 dotenv.config();\n 4\n 5 const APP_SUBSCRIPTION_CREATE = `\n 6\n    mutation AppSubscriptionCreate(\n 7\n      $name: String!\n 8\n      $returnUrl: URL!\n 9\n      $lineItems: [AppSubscriptionLineItemInput!]!\n 10\n    ) {\n 11\n      appSubscriptionCreate(\n 12\n        name: $name\n 13\n        test: true\n 14\n        returnUrl: $returnUrl\n 15\n        lineItems: $lineItems\n 16\n      ) {\n 17\n        userErrors {\n 18\n          message\n 19\n        }\n 20\n        confirmationUrl\n 21\n        appSubscription {\n 22\n          id\n 23\n          lineItems {\n 24\n            id\n 25\n          }\n 26\n        }\n 27\n      }\n 28\n    }\n 29 `;\n 30\n 31 export const createAppSubscription = async (shop, token, appHandle) => {\n 32\n    const variables = {\n 33\n      name: 'Mockingbird Marketplace Fee',\n 34\n      returnUrl: `https://${shop}/admin/apps/${appHandle}`,\n 35\n      lineItems: [\n 36\n        {\n 37\n          plan: {\n 38\n            appUsagePricingDetails: {\n 39\n              cappedAmount: {\n 40\n                amount: 20,\n 41\n                currencyCode: 'USD',\n 42\n              },\n 43\n              terms: '$0.5 per order',\n 44\n            },\n 45\n          },\n 46\n        },\n 47\n      ],\n 48\n    };\n 49\n 50\n    const resp = await callShopifyGraphqlAPI(shop, token, {\n 51\n      query: APP_SUBSCRIPTION_CREATE,\n 52\n      variables,\n 53\n    });\n 54\n    return {\n 55\n      subscriptionId: resp.body.data.appSubscriptionCreate.appSubscription.id,\n 56\n      subscriptionConfirmationUrl:\n 57\n        resp.body.data.appSubscriptionCreate.confirmationUrl,\n 58\n      subscriptionLineItemId:\n 59\n        resp.body.data.appSubscriptionCreate.appSubscription.lineItems[0].id,\n 60\n    };\n 61 };\n In server/handlers/rest create a file called get-app-subscription.js.\n In server/handlers/rest/get-app-subscription.js, export a method that gets the recurring application charge information given a subscription ID.\n You can use this to get the app subscription details after the subscription's created using the GraphQL Admin API mutation.\n server/handlers/rest/get-app-subscription.js\n 1 import {callShopifyRestAPI, HTTP_GET_METHOD} from '../client';\n 2\n 3 export const getAppSubscription = async (shop, token, id) => {\n 4\n    const resp = await callShopifyRestAPI(\n 5\n      shop,\n 6\n      token,\n 7\n      HTTP_GET_METHOD,\n 8\n      `recurring_application_charges/${id}`,\n 9\n    );\n 10\n 11\n    return resp.body.recurring_application_charge;\n 12 };\n In server/handlers/index.js, export the newly-created method from the handler module.\n server/handlers/index.js\n 1 // ...\n 2 import {createAppSubscription} from './mutations/create-app-subscription';\n 3 import {getAppSubscription} from './rest/get-app-subscription';\n 4\n 5 export {\n 6\n   // ...\n 7\n   createAppSubscription,\n 8\n   getAppSubscription,\n 9 };\n Step 2: Add a subscription confirmation URL to the internal API\n In the channel app, you need to redirect merchants to the subscription confirmation page so that they can accept the subscription.\n The confirmation URL is returned when you create the subscription, and expires after two days if the merchant has not approved the subscription. You can check the status of the confirmation URL by fetching the app subscription status. If it's stale, then you can create a new subscription.\n You'll need to update the Shop data model to store the subscription ID and line item ID, which you can subsequently use to bill merchants usage charges.\n Create a new sequelize migration that you'll use to add subscriptionId and subscriptionLineItemId columns to your Shop data model.\n Terminal\n $ npx sequelize migration:create --name add-shop-subscription-info\n The command creates a new file in your app's /migrations folder with following name: {TIMESTAMP}-add-shop-subscription-info.js\n Update the migration file to add the columns to your Shops data table.\n migrations/{TIMESTAMP}-add-shop-subscription-info.js\n 1 'use strict';\n 2 module.exports = {\n 3\n    up: async (queryInterface, Sequelize) => {\n 4\n      await queryInterface.addColumn('Shops', 'subscriptionId', {\n 5\n        type: Sequelize.STRING,\n 6\n      });\n 7\n      await queryInterface.addColumn('Shops', 'subscriptionLineItemId', {\n 8\n        type: Sequelize.STRING,\n 9\n      });\n 10\n    },\n 11\n 12\n    down: async (queryInterface) => {\n 13\n      await queryInterface.removeColumn('Shops', 'subscriptionId');\n 14\n      await queryInterface.removeColumn('Shops', 'subscriptionLineItemId');\n 15\n    },\n 16 };\n Add the new attributes to your Shop data model.\n models/shop.js\n 1 // ...\n 2 module.exports = (sequelize, DataTypes) => {\n 3\n    // ...\n 4\n    Shop.init(\n 5\n      {\n 6\n        // ...\n 7\n        subscriptionId: DataTypes.STRING,\n 8\n        subscriptionLineItemId: DataTypes.STRING,\n 9\n      },\n 10\n      // ...\n 11\n    );\n 12\n    return Shop;\n 13 };\n Run the migration to write the changes to your database.\n Terminal\n $ npx sequelize db:migrate\n In server/helpers.js, create a new method called getNewSubscriptionConfirmationUrl that creates a new app subscription, saves the details to the database, and returns a confirmation URL.\n server/helpers.js\n 1 // ...\n 2 import {createAppSubscription, getAppHandle} from './handlers';\n 3 import db from '../models';\n 4\n 5 // ...\n 6 export async function getNewSubscriptionConfirmationUrl(shop, accessToken) {\n 7\n    const appHandle = await getAppHandle(shop, accessToken);\n 8\n    const {subscriptionId, subscriptionConfirmationUrl, subscriptionLineItemId} =\n 9\n      await createAppSubscription(shop, accessToken, appHandle);\n 10\n 11\n    await db.Shop.update(\n 12\n      {subscriptionId, subscriptionLineItemId},\n 13\n      {where: {domain: shop}},\n 14\n    );\n 15\n 16\n    return subscriptionConfirmationUrl;\n 17 }\n In server/graphql/schema.js, create a new AdminShopSubscription type that contains fields for the confirmation URL and a Boolean to indicate whether the subscription is accepted.\n server/graphql/schema.js\n 1 export const schemaString = `\n 2 type AdminShopSubscription {\n 3\n   confirmationUrl: String\n 4\n   accepted: Boolean!\n 5 }\n 6 // ...\n 7 type AdminShop {\n 8\n   // ...\n 9\n   subscription: AdminShopSubscription!\n 10 }\n 11 // ...\n 12 `;\n In server/graphql/resolvers.js, add a subscription resolver to the AdminShop type.\n The resolver returns a confirmation URL for an app subscription, and whether the app subscription is accepted. Since the adminShop resolver on the Query type returns the shop details from the database, you can get the subscriptionId from the first parameter.\n server/graphql/resolvers.js\n 1 import {parseGid} from '@shopify/admin-graphql-api-utilities';\n 2 import {getAppSubscription} from '../handlers';\n 3 import {getNewSubscriptionConfirmationUrl} from '../helpers';\n 4\n 5 export const resolvers = {\n 6\n    // ...\n 7\n    AdminShop: {\n 8\n      // ...\n 9\n      subscription: async ({domain, accessToken, subscriptionId}) => {\n 10\n        if (!subscriptionId) {\n 11\n          const confirmationUrl = await getNewSubscriptionConfirmationUrl(\n 12\n            domain,\n 13\n            accessToken,\n 14\n          );\n 15\n          return {\n 16\n            confirmationUrl,\n 17\n            accepted: false,\n 18\n          };\n 19\n        }\n 20\n        const {status, confirmation_url} = await getAppSubscription(\n 21\n          domain,\n 22\n          accessToken,\n 23\n          parseGid(subscriptionId),\n 24\n        );\n 25\n        if (status === 'pending') {\n 26\n          return {\n 27\n            confirmationUrl: confirmation_url,\n 28\n            accepted: false,\n 29\n          };\n 30\n        }\n 31\n        if (status === 'active' || status === 'accepted') {\n 32\n          return {\n 33\n            accepted: true,\n 34\n          };\n 35\n        }\n 36\n 37\n        const confirmationUrl = await getNewSubscriptionConfirmationUrl(\n 38\n          domain,\n 39\n          accessToken,\n 40\n        );\n 41\n        return {\n 42\n          confirmationUrl,\n 43\n          accepted: false,\n 44\n        };\n 45\n      },\n 46\n    },\n 47\n    // ...\n 48 };\n Step 3: Add the subscription to the channel app\n You can update the merchant onboarding page to surface information about the billing agreement that you added to the internal GraphQL API.\n If the subscription is accepted, then mark the item in the onboarding checklist as completed. Otherwise, you'll redirect the merchant to the subscriptionConfirmationUrl so that they can accept the subscription.\n In app/src/sections/Onboarding/components/OnboardingInfoCard.jsx update the OnboardingInfoCard component to include information about the billing agreement.\n app/src/sections/Onboarding/components/OnboardingInfoCard.jsx\n 1 import {BillingStatementDollarMajor} from '@shopify/polaris-icons';\n 2\n 3 const OnboardingInfoCard = ({ onboardingInfoCompleted, state }) => {\n 4\n    // ...\n 5\n    return (\n 6\n      <OnboardingCard\n 7\n        title=\"What you need to know before you start\"\n 8\n        state={state}\n 9\n      >\n 10\n        <OnboardingInfo\n 11\n          completed={onboardingInfoCompleted}\n 12\n          items={[\n 13\n            // ...\n 14\n            {\n 15\n              icon: {\n 16\n                color: 'subdued',\n 17\n                source: BillingStatementDollarMajor,\n 18\n              },\n 19\n              title: 'Every order made through Mockingbird will have a $0.50 fee',\n 20\n              content: (\n 21\n                <p>\n 22\n                  The fee will be charged each time a buyer completes a checkout\n 23\n                  initiated in the marketplace, and will not be credited for\n 24\n                  refunded orders. You will be charged every month, up to a\n 25\n                  maximum of $20.00.\n 26\n                </p>\n 27\n              ),\n 28\n            },\n 29\n          ]}\n 30\n          // ...\n 31\n        />\n 32\n     </OnboardingCard>\n 33\n    );\n 34 };\n The onboarding information card should display information about the billing agreement. The following is an example:\n In app/src/sections/Onboarding/components/OnboardingChecklistCard.jsx, update the OnboardingChecklistCard component to accept props for the subscription confirmation URL and whether the subscription is accepted.\n The component should render an item for the subscription agreement, which redirects to the confirmation URL on action.",
                    "filename": "docs/marketplaces/post-checkout/bill-merchants/content.txt",
                    "start_index": 0,
                    "end_index": 12367,
                    "start_line": 1,
                    "end_line": 449,
                    "max_line": 825,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Overview\n Getting started\n Overview\n Get started\n Channel app\n Marketplace homepage\n Developer tools\n Shop discovery\n Shops\n Product description\n Cart and checkout\n Onboard merchants\n Post checkout\n Connecting your marketplace homepage to merchant stores\n Caution\n The merchant-facing sales channel app referenced in this tutorial isn't compatible with Shopify CLI 3, and can't be previewed using Shopify development tools. You can use the app and these tutorials as reference material to build a CLI 3-compatible app using the same patterns.\n Tip\n Marketplace Kit tutorials require you to have a buyer-facing marketplace in place. If you don't have one, then you can clone code for a buyer-facing app as a springboard to get you started.\n What you'll learn\n After finishing this tutorial, you'll know how to do the following:\n Connect your existing marketplace to merchants' stores\n Requirements\n You have a buyer-facing marketplace.\n You've completed the tutorial for creating a channel app experience.\n Step 1: Connect to a merchant's store\n Connect to a merchant's store using the following URI and headers. The domain and storefrontAccessToken are taken from your database.\n 1 const client = new ApolloClient({\n 2\n    uri: `https://${domain}/api/2024-04/graphql.json`,\n 3\n    headers: {\n 4\n      \"X-Shopify-Storefront-Access-Token\": storefrontAccessToken,\n 5\n    },\n 6\n    cache: new InMemoryCache(),\n 7\n    });\n 8\n    const { data } = await client.query({\n 9\n    query: SHOP_PRODUCTS_QUERY,\n 10\n    });\n 11\n    setData(data);\n Step 2: Retrieve data\n Use a GraphQL query to retrieve the list of products that the merchant has published to your channel app.\n For example, the following query retrieves basic shop details and the first four products:\n GraphQL query\n 1 import { gql } from \"apollo-boost\";\n 2\n 3 const SHOP_PRODUCTS_QUERY = gql`\n 4\n    query ShopProducts {\n 5\n      shop {\n 6\n        name\n 7\n        primaryDomain {\n 8\n          url\n 9\n        }\n 10\n      }\n 11\n      products(first: 4) {\n 12\n        edges {\n 13\n          node {\n 14\n            id\n 15\n            title\n 16\n            images(first: 1) {\n 17\n              edges {\n 18\n                node {\n 19\n                  id\n 20\n                  altText\n 21\n                  originalSrc\n 22\n                }\n 23\n              }\n 24\n            }\n 25\n            priceRange {\n 26\n              minVariantPrice {\n 27\n                amount\n 28\n                currencyCode\n 29\n              }\n 30\n              maxVariantPrice {\n 31\n                amount\n 32\n                currencyCode\n 33\n              }\n 34\n            }\n 35\n            onlineStoreUrl\n 36\n          }\n 37\n        }\n 38\n      }\n 39\n    }\n 40 `;\n The homepage of your marketplace might now look something like the following:\n Next steps\n Learn how to build the shop discovery experience.\n Share feedback on Marketplace Kit.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n What you'll learn\n Requirements\n Step 1: Connect to a merchant's store\n Step 2: Retrieve data\n Next steps\n Updates & News",
                    "filename": "docs/marketplaces/getting-started/connect-marketplace-homepage/content.txt",
                    "start_index": 0,
                    "end_index": 3043,
                    "start_line": 1,
                    "end_line": 140,
                    "max_line": 140,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "B2B\n Channels\n Overview\n Getting started\n Scheduled publishing\n Distribution\n Billing\n App Store\n Getting started with a sales channel app\n To build a sales channel app, you need to create an app and turn it into a sales channel app.\n After you've turned your app into a sales channel app, you'll need to create a channel app experience using Channels UI and onboard merchants.\n What you'll learn\n After finishing this tutorial, you'll know how to do the following tasks:\n Turn an app into a sales channel app\n Request payment processing\n Requirements\n You've created a Partner account and a development store.\n Step 1: Create a public app\n Caution\n If you create an app via the CLI, then don't install the app on your development store. You won't be able to convert the app into a sales channel app if the app has been installed.\n From your Partner Dashboard, click Apps.\n Click Create app.\n Click Create app manually.\n Enter your app name and click Create.\n On the app overview page, click Choose distribution.\n Click Public distribution.\n Step 2: Turn an app into a sales channel app\n Caution\n Turning an app into a sales channel is a process that can't be reversed. If you no longer want your app to be a sales channel, then you'll need to re-create it.\n After you've created an app, you can turn it into a sales channel app.\n From your app's overview screen, click Configuration.\n In the Sales channel section, click Turn app into sales channel.\n Click Turn app into sales channel again to confirm that you want to convert your app into a sales channel.\n Click Save.\n After you've turned your app into a sales channel app, you can install it on your storefront through the CLI or the Partner Dashboard.\n Step 3: Request payment processing (Optional)\n After you've turned your app into a sales channel app, you can request payment processing. You should request payment processing only if you intend to process non-2D payments, such as Augmented Reality (AR), Virtual Reality (VR), or Voice payments.\n If your app will process payments, then your selling platform must be PCI-compliant. You can meet PCI requirements by using a payment service, such as Stripe or Spreedly, or by providing Shopify with a certificate of compliance.\n In the Sales Channel section, on the Payment processing card, click Request payment processing.\n On the Payment processing page that opens, select your PCI DSS compliance status, as described in the following table:\n PCI DSS status Description\n My platform is not PCI-compliant You must determine a strategy for processing payments.\n My platform uses Stripe You have an existing platform account with Stripe and would like to use Shopify's Stripe integration.\n My platform uses a service such as Spreedly to deliver payment tokens You'd like to use Spreedly or similar service for credit card tokenization and PAN forwarding.\n My platform has a certificate of compliance If you already have a PCI compliant solution in place, then you can provide Shopify with the Attestation of compliance.\n In the Channel function textbox, provide a description of your channel's function.\n This should be a high level overview of your channel that outlines the functionality and benefit that the channel provides to merchants.\n In the Customer purchasing experience section, provide a description of how customers will purchase products on your channel. You should include information about how customers do the following:\n Access the channel\n View products listed on the channel\n Add products to a cart\n Purchase products added to a cart\n In the Intended channel audience section, specify whether you're building the channel for a single merchant, or for multiple merchants. If you select Multiple stores or clients, then specify the number of stores.\n In the Selling platform relationship section, specify whether you own the channel where customers will purchase products, or if you're building the channel independently or on behalf of a channel owner.\n Optional: Enter your channel's website.\n Click Request payment processing.\n A request for payment processing can take up to 7 business days. You'll receive a notification when your request is processed.\n Next steps\n Create a channel app experience using Channels UI.\n Onboard merchants.\n Step 1: Create a public app\n Step 2: Turn an app into a sales channel app\n Step 3: Request payment processing (Optional)\n Next steps\n Updates & News",
                    "filename": "docs/apps/selling-strategies/channels/getting-started/content.txt",
                    "start_index": 0,
                    "end_index": 4416,
                    "start_line": 1,
                    "end_line": 65,
                    "max_line": 65,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "B2B\n Channels\n Overview\n Getting started\n Scheduled publishing\n Distribution\n Billing\n App Store\n Building Shopify channels\n A channel is an app that allows merchants to reach new customers on platforms outside of their online store to make a sale. You can build sales channel apps to connect merchants to customers on marketplaces, advertising platforms, and more.\n Sales channel app flow\n The following diagram illustrates how all the features of sales channel apps come together to support the merchant experience of your sales channel app:\n The merchant clicks to install the sales channel app.\n The merchant connects to the sales channel app on the OAuth grant screen.\n The merchant connects to the sales channel app account using the account connection component. If the merchant doesn't have an account, then they're prompted to sign up. Authentication happens in a pop-up provided by the app's interface outside of Shopify.\n If additional steps need to be completed, or the merchant needs to wait for their account to be approved, then this can be completed as part of onboarding.\n After the merchant is approved, the approved state is communicated to the merchant using a banner component.\n The app prompts the merchant to agree to any commissions or fees. Use the Billing API to make charging for your sales channel app.\n Merchant publishes products to the sales channel app. The sales channel app reads the product catalog and stays in sync using the relevant webhooks. Product publishing errors are reported in the admin using resource feedback.\n Orders are created in the Shopify admin.\n Creating and managing checkouts\n Note\n You can't use the Checkout API to create a new checkout user experience for an individual store.\n When building a sales channel app, you can create and manage checkouts using one of the following methods:\n Create cart permalinks to take customers directly to a store checkout with a pre-loaded cart\n Use an SDK that's powered by the Storefront API, such as the JavaScript Buy, iOS Buy, and Android Buy SDK\n For information on carts and checkouts on marketplaces, refer to Cart and checkout.\n Creating a great user experience using Polaris\n A sales channel app should look and feel native to Shopify\u2019s admin experience, as it lives within the admin as an iframe.\n The first step to designing a great channel experience is to understand your merchant\u2019s workflows. From there, you can create wireframes or sketches to facilitate feedback discussions around the user experience. After you\u2019ve aligned on an experience that will be Beta-tested with merchants, you can design using the Polaris framework.\n Using Polaris increases merchant engagement and saves them time by using familiar components and patterns. For more information, refer to Polaris components and best practices.\n Billing for your app\n You can use Shopify's Billing API to charge merchants for your sales channel app. When using the Billing API, you can either charge merchants a recurring monthly subscription, or take a commission on sales by creating usage charges. For more information, refer to App billing.\n Sales channel app requirements\n The following requirements apply to all sales channel apps:\n All sales channel apps are submitted for approval to the Shopify app review team.\n Your app introduces a destination or platform for customers to discover products outside of the online store.\n Customers are eventually directed to a sale.\n You need to own and operate the destination or platform where products are sold.\n After the sales channel app is live, you intend to onboard several hundred Shopify merchants in the first year after launch.\n Build requirements\n All types of sales channel apps have the following features:\n Onboarding and account connection: You can get permission from merchants to install your app, connect their accounts, and qualify them through channel requirements.\n Product publishing: You can import products into your channel, manage product errors, and stay in sync with merchants' product catalogs.\n Payments and order management: You can generate orders and complete payments for merchants on your channel.\n Link to the marketplace in the channel interface: After merchants upload their products to a marketplace, make sure they know how to navigate to where their products are hosted. You can provide a link to the marketplace in the form of a button or information in the instructions:\n Sales channels apps built with cart permalinks\n The following tables lists the build requirements for sales channel apps that are built with cart permalinks.\n Build requirements\n General requirements\n Pre-approval required? No\n PPA Addendum required? No\n App approval process required? Needs to meet the general requirements for apps and sales channel apps.\n Onboarding and account connection\n Connect using OAuth \u2714\n Shopify App Bridge \u2714\n Shopify Polaris \u2714\n Product publishing\n List products using the ProductListing resource \u2714\n Manage errors with the ResourceFeedback resource \u2714\n Payments and orders\n Checkout build complexity Low. Take customers to Shopify's checkout with items pre-loaded in the cart.\n Payment processing requirements No\n Receiving payments Use the Billing API. For sales attribution, you can use a storefront access token.\n Revenue share Refer to the Shopify Partner revenue share agreement.\n Next steps\n Get started building a sales channel app\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Sales channel app flow\n Creating and managing checkouts\n Creating a great user experience using Polaris\n Billing for your app\n Sales channel app requirements\n Build requirements\n Next steps\n Updates & News\n Developer changelog\n Partner blog",
                    "filename": "docs/apps/selling-strategies/channels/content.txt",
                    "start_index": 0,
                    "end_index": 5690,
                    "start_line": 1,
                    "end_line": 80,
                    "max_line": 80,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "app/src/sections/Onboarding/components/index.js\n 1 // ...\n 2 export {default as OnboardingChecklistCard} from './OnboardingChecklistCard';\n In app/src/sections/Onboarding/Onboarding.jsx, update the Onboarding component to render the OnboardingChecklistCard created above.\n app/src/sections/Onboarding/Onboarding.jsx\n 1 // ...\n 2 import {OnboardingChecklistCard} from './components';\n 3\n 4 const ONBOARDING_PAGE_QUERY = gql`\n 5\n    query OnboardingPageQuery {\n 6\n      adminShop {\n 7\n        id\n 8\n        onboardingInfoCompleted\n 9\n        termsAccepted\n 10\n        onboardingCompleted\n 11\n        config {\n 12\n          hasStorefront\n 13\n          shipsToCanada\n 14\n          cadEnabled\n 15\n          hasPolicies\n 16\n        }\n 17\n      }\n 18\n    }\n 19 `;\n 20 // ...\n 21\n 22 const Onboarding = () => {\n 23\n    // ...\n 24\n 25\n    const {\n 26\n      adminShop: {\n 27\n        onboardingInfoCompleted,\n 28\n        termsAccepted,\n 29\n        config: {hasStorefront, shipsToCanada, cadEnabled, hasPolicies},\n 30\n      },\n 31\n    } = data;\n 32\n    const requirementsMet =\n 33\n      hasStorefront && shipsToCanada && cadEnabled && hasPolicies;\n 34\n 35\n    // ...\n 36\n 37\n    return (\n 38\n      <OnboardingPage\n 39\n        // ...\n 40\n      >\n 41\n        <OnboardingInfoCard\n 42\n          state={onboardingInfoCompleted ? 'completed' : 'active'}\n 43\n        />\n 44\n        <OnboardingChecklistCard\n 45\n          hasStorefront={hasStorefront}\n 46\n          shipsToCanada={shipsToCanada}\n 47\n          cadEnabled={cadEnabled}\n 48\n          hasPolicies={hasPolicies}\n 49\n          state={\n 50\n            onboardingInfoCompleted\n 51\n              ? requirementsMet\n 52\n                ? 'completed'\n 53\n                : 'active'\n 54\n              : 'disabled'\n 55\n          }\n 56\n        />\n 57\n        <OnboardingTermsCard\n 58\n          state={\n 59\n            onboardingInfoCompleted && requirementsMet\n 60\n              ? termsAccepted\n 61\n                ? 'completed'\n 62\n                : 'active'\n 63\n              : 'disabled'\n 64\n          }\n 65\n        />\n 66\n      </OnboardingPage>\n 67\n    );\n 68 }\n 69 // ...\n The requirements checklist should now be visible on the onboarding page.\n In app/src/sections/Settings.jsx, update the Settings component to render a Checklist component with the requirements.\n You can also render a loading state.\n app/src/sections/Settings.jsx\n 1 // ...\n 2 import {Checklist} from '@shopify/channels-ui';\n 3 import {SkeletonBodyText} from '@shopify/polaris';\n 4 import {Redirect} from '@shopify/app-bridge/actions';\n 5\n 6 const SETTINGS_PAGE_QUERY = gql`\n 7\n    query OnboardingPageQuery {\n 8\n      adminShop {\n 9\n        id\n 10\n        onboardingCompleted\n 11\n        config {\n 12\n          hasStorefront\n 13\n          shipsToCanada\n 14\n          cadEnabled\n 15\n          hasPolicies\n 16\n 19 `;\n 20\n 21 const SettingsChecklist = ({\n 22\n    hasStorefront,\n 23\n    shipsToCanada,\n 24\n    cadEnabled,\n 25\n    hasPolicies,\n 26 }) => {\n 27\n    const app = useAppBridge();\n 28\n    const redirect = Redirect.create(app);\n 29\n 30\n    const handleOnlineStoreAction = () => {\n 31\n      redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n 32\n        path: '/settings/channels',\n 33\n      });\n 34\n    };\n 35\n 36\n    const handleShippingAction = () => {\n 37\n      redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n 38\n        path: '/settings/shipping',\n 39\n      });\n 40\n    };\n 41\n 42\n    const handleCurrencyAction = () => {\n 43\n      redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n 44\n        path: '/settings/payments',\n 45\n      });\n 46\n    };\n 47\n 48\n    const handlePolicyAction = () => {\n 49\n      redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n 50\n        path: '/settings/legal',\n 51\n      });\n 52\n    };\n 53\n 54\n    const items = [\n 55\n      {\n 56\n        label: 'Create an online store',\n 57\n        completed: hasStorefront,\n 58\n        action: {\n 59\n          onAction: handleOnlineStoreAction,\n 60\n        },\n 61\n      },\n 62\n      {\n 63\n        label: 'Add a shipping rates for Canada',\n 64\n        completed: shipsToCanada,\n 65\n        action: {\n 66\n          onAction: handleShippingAction,\n 67\n        },\n 68\n      },\n 69\n      {\n 70\n        label: 'Add support for CAD to you payment processor',\n 71\n        completed: cadEnabled,\n 72\n        action: {\n 73\n          onAction: handleCurrencyAction,\n 74\n        },\n 75\n      },\n 76\n      {\n 77\n        label: 'Add a privacy policy and return policy',\n 78\n        completed: hasPolicies,\n 79\n        action: {\n 80\n          onAction: handlePolicyAction,\n 81\n        },\n 82\n      },\n 83\n    ];\n 84\n 85\n    return (\n 86\n      <Checklist\n 87\n        completeLabel=\"Your shop meets Mockingbird's requirements\"\n 88\n        items={items}\n 89\n      />\n 90\n    );\n 91 };\n 92\n 93 const Settings = () => {\n 94\n    // ...\n 95\n 96\n    const checklistCardProps = data\n 97\n      ? {children: <SettingsChecklist {...data.adminShop.config} />}\n 98\n      : {\n 99\n          sectioned: true,\n 100\n          children: <SkeletonBodyText lines={4} />,\n 101\n        };\n 102\n 103\n    return (\n 104\n      <SettingsPage title=\"Settings\">\n 105\n        <SettingsPage.Section\n 106\n          title=\"Store requirements\"\n 107\n          description=\"This checklist ensures that your store meets Mockingbird requirements.\"\n 108\n        >\n 109\n          <Card {...checklistCardProps} />\n 110\n        </SettingsPage.Section>\n 111\n        <SettingsPage.Section\n 112\n          title=\"Terms and conditions\"\n 113\n          description=\"You can view the Mockingbird Marketplace terms and conditions here at any time.\"\n 114\n        >\n 115\n          // ...\n 116\n        </SettingsPage.Section>\n 117\n      <SettingsPage>\n 118\n    );\n 119 }\n 120 // ...\n The requirements checklist should now be visible on the settings page.\n In app/src/sections/Home.jsx, update the query to retrieve the meetsRequirements field and pass it into the Overview component.\n app/src/sections/Home/components/Overview.jsx\n 1 // ...\n 2 const HOME_PAGE_QUERY = gql`\n 3\n    query HomePageQuery {\n 4\n      adminShop {\n 5\n        id\n 6\n        domain\n 7\n        appHandle\n 8\n        publicationId\n 9\n        availableProductCount\n 10\n        onboardingInfoCompleted\n 11\n        onboardingCompleted\n 12\n        meetsRequirements\n 13\n      }\n 14\n    }\n 15 `;\n 16\n 17 const Home = () => {\n 18\n    // ...\n 19\n 20\n    const {\n 21\n      adminShop: {\n 22\n        domain,\n 23\n        appHandle,\n 24\n        publicationId,\n 25\n        availableProductCount,\n 26\n        onboardingInfoCompleted,\n 27\n        onboardingCompleted,\n 28\n        meetsRequirements,\n 29\n      },\n 30\n    } = data;\n 31\n 32\n    if (onboardingCompleted) {\n 33\n      return (\n 34\n        <Overview\n 35\n          domain={domain}\n 36\n          availableProductCount={availableProductCount}\n 37\n          publicationId={publicationId}\n 38\n          appHandle={appHandle}\n 39\n          meetsRequirements={meetsRequirements}\n 40\n        />\n 41\n      );\n 42\n    }\n 43\n    // ...\n 44 }\n 45 // ...\n In app/src/sections/Home/components/Overview.jsx, update the Overview component to render a banner with a link to the settings page if the requirements are not met.\n app/src/sections/components/Overview.jsx\n 1 // ...\n 2 import {Banner} from '@shopify/polaris';\n 3\n 4 const Overview = ({\n 5\n    domain,\n 6\n    availableProductCount,\n 7\n    publicationId,\n 8\n    appHandle,\n 9\n    meetsRequirements,\n 10 }) => {\n 11\n    // ...\n 12\n 13\n    return (\n 14\n      <OverviewPage title=\"Mockingbird channel overview\">\n 15\n        {!meetsRequirements && (\n 16\n          <OverviewPage.Section>\n 17\n            <Banner\n 18\n              status=\"critical\"\n 19\n              title=\"Your shop no longer meets Mockingbird requirements\"\n 20\n              action={{\n 21\n                content: 'View details',\n 22\n                url: '/settings',\n 23\n              }}\n 24\n            >\n 25\n              <p>\n 26\n                Your shop has been removed from the Mockingbird Marketplace\n 27\n                because it no longer meets the requirements. To continue selling,\n 28\n                please ensure your store meets all requirements.\n 29\n              </p>\n 30\n            </Banner>\n 31\n          </OverviewPage.Section>\n 32\n        )}\n 33\n        <OverviewPage.Section title=\"Product status on Mockingbird\">\n 34\n          // ...\n 35\n        </OverviewPage.Section>\n 36\n        // ...\n 37\n      </OverviewPage>\n 38\n    );\n 39 }\n 40 // ...\n If one or more requirement is not met, then an error banner should appear on the overview page.\n Next steps\n Learn about creating post-checkout functionality for your marketplace, including storing order details in your database and billing merchants a fee for sales on the marketplace.\n Share feedback on Marketplace Kit.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n What you'll learn\n Requirements\n Access scopes\n Step 1: Add handlers to interact with the Admin API\n Step 2: Add a requirements check when the channel app is installed\n Step 3: Add shop update webhook handlers\n Step 4: Add shipping profile webhook handlers\n Step 5: Add requirements to the channel app",
                    "filename": "docs/marketplaces/merchant-onboarding/add-eligibility-requirements/content.txt",
                    "start_index": 23028,
                    "end_index": 32099,
                    "start_line": 841,
                    "end_line": 1360,
                    "max_line": 1360,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Implementation considerations\n Request reference\n Onboard a merchant to a payments app\n Fulfillment\n Point of Sale",
                    "filename": "docs/apps/payments/build-offsite-app/content.txt",
                    "start_index": 0,
                    "end_index": 114,
                    "start_line": 1,
                    "end_line": 5,
                    "max_line": 5,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                },
                {
                    "code": "Billing\n App Store\n Shopify Flow\n Shopify Flow is an app that allows merchants to customize their store through automation. As a developer, you can integrate your app with the Flow platform through custom tasks, such as triggers and actions. You can also use specific Shopify Flow triggers and actions in Shopify marketing automations.\n This guide introduces you to the different extensions you can create, building a Flow trigger and action, and considerations when making changes to your extensions.\n Why build for Flow\n Building for Flow can help you to increase the value of your app by allowing merchants to automate their business processes. For example, suppose that you have a review app. After a review is created, merchants might want to send a notification (using email, Slack, or SMS), award loyalty points, and more. If you build the Review created trigger, Flow allows merchants to do any of those actions with your app. By integrating with Flow, you can:\n Improve integrations between your app, Shopify, and other apps: Any task you build can be used with the triggers and actions that Flow already provides, which immediately connects your app to thousands of new features.\n Save development time: Rather than building and maintaining direct integrations with many other apps, you can integrate with Flow and provide similar value to your merchants.\n Improved visibility: Merchants can discover your templates or tasks in Flow, even if they don't have your app installed. Additionally, when you integrate with Flow, you receive a Works with Flow badge on your listing in the Shopify App Store. Your app will also be listed in the Flow app directory.\n What you can build\n As a Partner you can build one or more tasks related to your app for your merchants to use. These merchants need to have both your app and Shopify Flow installed. Shopify Flow includes the following task types:\n Extension type Description Example\n Trigger An event that starts a workflow, and can be something that happens in a store or in an app. A new order is created in a user's online store.\n Condition A rule that determines whether an action will be taken. As a developer you cannot create a condition task. A condition is set to check whether the total amount paid for the order is over $200.00.\n Action A task that's executed in a store or in an app when certain conditions are met. If the total amount paid for the order is over $200.00, then a tag is added to the customer account that placed the order.\n Template A template is an example that demonstrates how your task works for a key use case, and is available through Flow's template library.\n \n To add a template, build and test in your development store. Then contact the Flow team at flow-connectors-dev@shopify.com A workflow that sends an internal email when your trigger runs.\n Plans supported\n Flow is an optional app that's available to Shopify merchants on any paid plan. Flow is widely adopted by Shopify merchants, especially those with stores on Shopify Plus.\n Flow features differ by plan. For apps, the primary difference is that if you have a custom app, your Flow app extensions are available only to a Shopify Plus store that has your app installed.\n Getting started\n Learn more about triggers\n Connect your app to Shopify Flow so that your app can send an event that starts a workflow.\n Learn more about actions\n Connect your app to Shopify Flow so that your app receives data when a workflow action runs.\n Lifecycle events\n Get notified about events related to your Flow triggers and actions.\n Migrate legacy Flow extensions\n Learn how to migrate your existing extensions from the Partner Dashboard to CLI-managed.\n Was this section helpful?\n YesNo\n ON THIS PAGE\n Why build for Flow\n What you can build\n Plans supported\n Getting started\n Updates & News\n Developer changelog",
                    "filename": "docs/apps/flow/content.txt",
                    "start_index": 0,
                    "end_index": 3844,
                    "start_line": 1,
                    "end_line": 40,
                    "max_line": 40,
                    "git_instance": "github",
                    "repo_name": "shopify_documentation",
                    "sha": ""
                }
            ]
        },
        "mmr_code_snippets_initial": [
            {
                "code": "export type AppUsageRecord = AppCharge & Node & {\n  __typename?: 'AppUsageRecord';\n  /** The amount of the app charge. */\n  amount: Money;\n  /** A globally unique identifier. */\n  id: Scalars['ID'];\n  /** The name of the app charge. */\n  name: Scalars['String'];\n  /** Whether the app purchase was a test transaction. */\n  test: Scalars['Boolean'];\n};\n\n/** An app event for an app usage charge. */\nexport type AppUsageRecordEvent = {\n  /**\n   * An app charge. This charge varies based on how much the merchant uses the app\n   * or a service that the app integrates with.\n   */\n  charge: AppUsageRecord;\n};\n\n/** A transaction corresponding to an app usage charge. */\nexport type AppUsageSale = Node & Transaction & {\n  __typename?: 'AppUsageSale';\n  /** The app associated with the sale. */\n  app: App;\n  /** The ID of the [app charge](/tutorials/bill-for-your-app-using-graphql-admin-api) associated with the transaction. Example value: `gid://shopify/AppUsageRecord/1234`. This value might be `null` for transactions that occurred before September 2020. */\n  chargeId?: Maybe<Scalars['ID']>;\n  /** The date and time when the transaction was recorded. */\n  createdAt: Scalars['DateTime'];\n  /** The total amount that the merchant paid, excluding taxes. */\n  grossAmount?: Maybe<Money>;\n  /** The transaction ID. */\n  id: Scalars['ID'];\n  /** The net amount that is added to or deducted from your payout. */\n  netAmount: Money;\n  /** The shop associated with the transaction. */\n  shop?: Maybe<Shop>;\n  /** The amount that Shopify retained from the sale. */\n  shopifyFee?: Maybe<Money>;\n};\n\n/** A conversation with a merchant through the Experts Marketplace. */\nexport type Conversation = Node & {\n  __typename?: 'Conversation';\n  /** The date and time the conversation was started. */\n  createdAt: Scalars['DateTime'];\n  /** The URL to access this conversation in the Partner Dashboard. */\n  dashboardUrl: Scalars['Url'];\n  /** Whether the conversation has unread messages. */\n  hasUnreadMessages: Scalars['Boolean'];\n  /** A globally unique identifier. */\n  id: Scalars['ID'];\n  /** The date and time of the most recent conversation event. Example events: a message being sent, or a proposal being accepted. */\n  lastEventAt: Scalars['DateTime'];\n  /** The merchant account involved in the conversation. */\n  merchantUser: MerchantUser;\n  /** The messages exchanged within the conversation. */\n  messages: MessageConnection;\n  /** The status of the Experts Marketplace conversation. */\n  status: ConversationStatus;\n};\n\n\n/** A conversation with a merchant through the Experts Marketplace. */\nexport type ConversationMessagesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  sentAtMax?: InputMaybe<Scalars['DateTime']>;\n  sentAtMin?: InputMaybe<Scalars['DateTime']>;\n};\n\n/** The connection type for Conversation. */",
                "filename": "web/server/src/modules/api-shopify-partners/graphql/generated/index.ts",
                "start_index": 12984,
                "end_index": 15918,
                "start_line": 336,
                "end_line": 410,
                "max_line": 1838,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export * from './slack';",
                "filename": "web/server/src/modules/slack/index.ts",
                "start_index": 0,
                "end_index": 24,
                "start_line": 1,
                "end_line": 1,
                "max_line": 1,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n    const body = TriggerRequestBody.parse(req.body);\n\n    const user = await userModel.findOne({ myshopify_domain: body.shop });\n\n    if (!user) {\n        const response: TriggerResponseBodyType = {\n            status: 'error',\n            error: 'User not found',\n        };\n        return res.status(400).json(TriggerResponseBody.parse(response));\n    }\n\n    const activeFunnels = await FunnelsModel.aggregate([\n        {\n            $match: { shop: body.shop, status: true, triggers: { $exists: true } },\n        },\n    ]);\n    const appliedDiscountPercentageOutOf100 = FunnelsService.calculateCheckoutDiscountPercentageOutOf100({\n        checkout: {\n            total_line_items_price: body.purchase.totalLineItemsPrice.toFixed(2),\n            subtotal_price: body.purchase.subtotalPrice.toFixed(2),\n        },\n    });\n\n    const shopifyService = new ShopifyService({ shop: body.shop, accessToken: user.accessToken });\n    const checkout = await shopifyService\n        .getCheckout({ referenceId: body.purchase.referenceId })\n        .catch((err) => ignoreMissingScopeErrorRest({ shop: body.shop, scope: 'read_checkouts', err }))\n        // Catch 404 errors in case store is using a custom checkout.\n        // The store riva-home-furnishings.myshopify.com has a custom checkout, when\n        // we tried to fetch the checkout from the Shopify API, it threw a 404 error.\n        // This prevented the offers from being displayed.\n        // I think this is a bug from Shopify, but for now we'll use this workaround.\n        .catch((err) =>\n            ignoreStatusCodeError({\n                shop: body.shop,\n                logName: 'getCheckout() in /trigger',\n                statusCodeToIgnore: 404,\n                err,\n            })\n        );\n    const storefrontSessionService = new StorefrontSessionService();\n    const triggeredFunnel = await FunnelsService.getTriggeredFunnel({\n        activeFunnels,\n        purchaseData: {\n            totalPrice: body.purchase.totalPrice,\n            lineItems: body.purchase.lineItems,\n            customerId: body.purchase.customerId,\n            referenceId: body.purchase.referenceId, // TODO\n            locale: body.purchase.language, // TODO: this is expected to be \"en-US\" internally, but passing \"en\" works fine. Make this clearer.\n            isDefaultStoreCurrency: user.currency === body.purchase.currencyCode,\n            destinationCountryCode: body.purchase.destinationCountryCode,\n            destinationProvinceCode: body.purchase.destinationProvinceCode,\n            appliedDiscountCodes: body.purchase.appliedDiscountCodes,\n            appliedDiscountPercentageOutOf100,\n        },\n        shopify: shopifyService,\n        storefrontSessionService,\n        isThankYouPage: true,\n    });",
                "filename": "web/server/src/modules/ty-ext-widgets-public/ty-ext-widgets-public.controller.ts",
                "start_index": 3213,
                "end_index": 5972,
                "start_line": 2,
                "end_line": 215,
                "max_line": 220,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { getModelForClass, modelOptions, prop } from '@typegoose/typegoose';\nimport { REGEX_MYSHOPIFY } from '../../utils/regexes';\n\n/**\n * Responsible for the relevant fields pertaining to how the rest of the AfterSell ecosystem interacts with Rokt.\n */\n@modelOptions({ schemaOptions: { _id: false } })\nexport class AfterSellSettings {\n    @prop({ required: false, default: true })\n    overrideStorewidePopup!: boolean;\n}\n\n/**\n * This links a shop using AfterSell with a Rokt account. All other data is stored\n * on Rokt servers and can be retrieved using the `appInstallationId`.\n */\nclass RoktAccount {\n    @prop({ required: true, unique: true, match: REGEX_MYSHOPIFY })\n    shop!: string;\n\n    @prop({ required: true })\n    appInstallationId!: string;\n\n    @prop({ required: false })\n    accountId!: string;\n\n    @prop({ required: true })\n    createdAt!: string;\n\n    @prop({ required: false, default: null })\n    updatedAt!: string;\n\n    @prop({ required: false, default: null })\n    deletedAt!: string;\n\n    @prop({ required: true, default: {} })\n    afterSellSettings!: AfterSellSettings;\n}\n\nexport const RoktAccountModel = getModelForClass(RoktAccount);",
                "filename": "web/server/src/modules/rokt/rokt-accounts.model.ts",
                "start_index": 0,
                "end_index": 1161,
                "start_line": 1,
                "end_line": 40,
                "max_line": 40,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": ".\n   */\n  productSavedSearches: SavedSearchConnection;\n  /** A list of tags that have been added to products. */\n  productTags: StringConnection;\n  /** The list of types added to products. */\n  productTypes: StringConnection;\n  /**\n   * List of the shop's product variants.\n   * @deprecated Use `QueryRoot.productVariants` instead.\n   */\n  productVariants: ProductVariantConnection;\n  /** The list of vendors added to products. */\n  productVendors: StringConnection;\n  /**\n   * List of the shop's products.\n   * @deprecated Use `QueryRoot.products`.\n   */\n  products: ProductConnection;\n  /** The number of publications for the shop. */\n  publicationCount: Scalars['Int'];\n  /** The shop's limits for specific resources. For example, the maximum number ofvariants allowed per product, or the maximum number of locations allowed. */\n  resourceLimits: ShopResourceLimits;\n  /** The URL of the rich text editor that can be used for mobile devices. */\n  richTextEditorUrl: Scalars['URL'];\n  /** Fetches a list of admin search results by a specified query. */\n  search: SearchResultConnection;\n  /** The list of search filter options for the shop. These can be used to filter productvisibility for the shop. */\n  searchFilters: SearchFilterOptions;\n  /** Whether the shop has outstanding setup steps. */\n  setupRequired: Scalars['Boolean'];\n  /** The list of countries that the shop ships to. */\n  shipsToCountries: Array<CountryCode>;\n  /** The list of all legal policies associated with a shop. */\n  shopPolicies: Array<ShopPolicy>;\n  /**\n   * Shopify Payments account information, including balances and payouts.\n   * @deprecated Use `QueryRoot.shopifyPaymentsAccount` instead.\n   */\n  shopifyPaymentsAccount?: Maybe<ShopifyPaymentsAccount>;\n  /** The paginated list of the shop's staff members. */\n  staffMembers: StaffMemberConnection;\n  /** The storefront access token of a private application. These are scoped per-application. */\n  storefrontAccessTokens: StorefrontAccessTokenConnection;\n  /**\n   * The URL of the shop's storefront.\n   * @deprecated Use `url` instead.\n   */\n  storefrontUrl: Scalars['URL'];\n  /** Whether the shop charges taxes for shipping. */\n  taxShipping: Scalars['Boolean'];\n  /** Whether applicable taxes are included in the shop's product prices. */\n  taxesIncluded: Scalars['Boolean'];\n  /** The shop's time zone abbreviation. */\n  timezoneAbbreviation: Scalars['String'];\n  /** The shop's time zone offset. */\n  timezoneOffset: Scalars['String'];\n  /** The shop's time zone offset expressed as a number of minutes. */\n  timezoneOffsetMinutes: Scalars['Int'];\n  /** Whether transactional SMS sent by Shopify have been disabled for a shop. */\n  transactionalSmsDisabled: Scalars['Boolean'];\n  /** The translations associated with the resource. */\n  translations: Array<Translation>;\n  /** The shop's unit system for weights and measures. */\n  unitSystem: UnitSystem;\n  /** Fetches a list of images uploaded to the shop by their IDs. */\n  uploadedImagesByIds:",
                "filename": "web/server/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1508377,
                "end_index": 1511363,
                "start_line": 29,
                "end_line": 37850,
                "max_line": 44790,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { FirstPromoterApi, TrackSaleReqBody } from '../api-firstpromoter/api-firstpromoter';\nimport { ShopifyPartnersApi } from '../api-shopify-partners';\nimport { FirstPromoterPartnersBindingModel } from './firstpromoter-partners-bindings.model';\nimport { FirstPromoterTrackedSale, FirstPromoterTrackedSaleModel } from './firstpromoter-tracked-sales.model';",
                "filename": "web/server/src/modules/firstpromoter/firstpromoter.ts",
                "start_index": 0,
                "end_index": 358,
                "start_line": 1,
                "end_line": 4,
                "max_line": 68,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "@modelOptions({ schemaOptions: { _id: false } })\nexport class CheckoutTriggers {\n    @prop({ required: true })\n    showToAllCustomersTrigger!: Trigger;\n\n    @prop({ required: true })\n    productAndOrCollectionTrigger!: ProductAndCollectionTrigger;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nexport class UpsellProductVariant {\n    @prop({ required: true })\n    id!: number;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nclass UpsellProduct {\n    @prop({ required: true })\n    id!: number;\n\n    @prop({ required: true, type: UpsellProductVariant })\n    variants!: UpsellProductVariant[];\n}\n\n//Allow mixed types for product/ProductFull since they don't exist initially, otherwise it will throw an error when null\n@modelOptions({ schemaOptions: { _id: false }, options: { allowMixed: Severity.ALLOW } })\nexport class UpsellOffer {\n    @prop({ required: true })\n    _id!: string;\n\n    @prop({ required: true })\n    priority!: number;\n\n    @prop({ required: false })\n    isUpsellPositionOption?: boolean;\n\n    @prop({ required: false })\n    customTitle?: string;\n\n    @prop({ required: false, default: '' })\n    customDescription!: string;\n\n    @prop({ required: true })\n    hideIfAlreadyInCart!: boolean;\n\n    @prop({ required: true })\n    discount!: Discount;\n\n    @prop({ required: true })\n    triggers!: CheckoutTriggers;\n\n    @prop({ required: true })\n    product!: UpsellProduct;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nexport class UpsellWidgetConfig {\n    @prop({ required: true, enum: CheckoutUpsellType, default: CheckoutUpsellType.SINGLE })\n    upsellType!: CheckoutUpsellType;\n\n    @prop({ required: true })\n    isUpsellPositionOption!: boolean;\n\n    @prop({ required: false, default: '' })\n    offerTitle!: string;\n\n    @prop({ required: true, default: false })\n    isShowBorder!: boolean;\n\n    @prop({ required: true, default: false })\n    useOutlinedButton!: boolean;\n\n    @prop({ required: true, type: UpsellOffer })\n    offers!: UpsellOffer[];\n\n    @prop({ required: true })\n    customizeNumberOfOffers!: boolean;\n\n    @prop({ required: true })\n    numberOfOffersToShow!: number;\n\n    @prop({ required: true })\n    continuouslyLoadOffers!: boolean;\n\n    @prop({ required: true, default: false })\n    isDefaultAccepted!: boolean;\n\n    @prop({ required: false })\n    skipDiscountIfOtherDiscountsAlreadyApplied?: boolean;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nexport class RewardsWidgetConfig {\n    @prop({ required: true, enum: RewardBasis })\n    rewardBasis!: RewardBasis;\n\n    @prop({ required: true })\n    minimumAmount!: number;\n\n    @prop({ required: true })\n    itemCount!: string;\n\n    @prop({ required: true })\n    textBeforeAchieving!: string;\n\n    @prop({ required: true })\n    textAfterAchieving!: string;\n\n    @prop({ required: true })\n    barForegroundColor!: string;\n\n    @prop({ required: true })\n    barBackgroundColor!: string;\n\n    @prop({ required: false })\n    triggers?: CheckoutTriggers;\n}",
                "filename": "web/server/src/modules/checkout-widgets/checkout-widgets.model.ts",
                "start_index": 2760,
                "end_index": 5722,
                "start_line": 73,
                "end_line": 498,
                "max_line": 565,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "ned or exchanged. */\n  Product = 'PRODUCT',\n  /** A shipping cost. */\n  Shipping = 'SHIPPING',\n  /** A tip added by the customer. */\n  Tip = 'TIP',\n  /** An unknown sale line. Represents new types that may be added in future versions. */\n  Unknown = 'UNKNOWN'\n}\n\n/** The tax allocated to a sale from a single tax line. */\nexport type SaleTax = {\n  __typename?: 'SaleTax';\n  /** The portion of the total tax amount on the related sale that comes from the associated tax line. */\n  amount: MoneyBag;\n  /** The unique ID for the sale tax. */\n  id: Scalars['ID'];\n  /** The tax line associated with the sale. */\n  taxLine: TaxLine;\n};\n\n/** A contract between a merchant and a customer to do business. Shopify creates a sales agreement whenever an order is placed, edited, or refunded. A sales agreement has one or more sales records, which provide itemized details about the initial agreement or subsequent changes made to the order. For example, when a customer places an order, Shopify creates the order, generates a sales agreement, and records a sale for each line item purchased in the order. A sale record is specific to a type of order line. Order lines can represent different things such as a purchased product, a tip added by a customer, shipping costs collected at checkout, and more. */\nexport type SalesAgreement = {\n  /** The application that created the agreement. */\n  app?: Maybe<App>;\n  /** The date and time at which the agreement occured. */\n  happenedAt: Scalars['DateTime'];\n  /** The unique ID for the agreement. */\n  id: Scalars['ID'];\n  /** The reason the agremeent was created. */\n  reason: OrderActionType;\n  /** The sales associated with the agreement. */\n  sales: SaleConnection;\n  /** The staff member associated with the agreement. */\n  user?: Maybe<StaffMember>;\n};\n\n\n/** A contract between a merchant and a customer to do business. Shopify creates a sales agreement whenever an order is placed, edited, or refunded. A sales agreement has one or more sales records, which provide itemized details about the initial agreement or subsequent changes made to the order. For example, when a customer places an order, Shopify creates the order, generates a sales agreement, and records a sale for each line item purchased in the order. A sale record is specific to a type of order line. Order lines can represent different things such as a purchased product, a tip added by a customer, shipping costs collected at checkout, and more. */\nexport type SalesAgreementSalesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  reverse?: InputMaybe<Scalars['Boolean']>;\n};\n\n/**\n * An auto-generated type for paginating through multiple SalesAgreements.\n *\n */\nexport type SalesAgreementConnection = {\n  __typename?: 'SalesAgreementConnection';\n  /** A list of edges. */\n  edges: Array<SalesAgreementEdge>;\n  /** A list of the nodes contained in SalesAgreementEdge.",
                "filename": "web/server/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1414566,
                "end_index": 1417561,
                "start_line": 35486,
                "end_line": 35541,
                "max_line": 44790,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n    const user: {\n        currency: string;\n        plan_name: string;\n        is_active: boolean;\n        first_installed: Date;\n        onBoardingCardClosed: boolean;\n    } | null = await UserModel.findOne(\n        { myshopify_domain: myshopifyDomain },\n        { currency: 1, plan_name: 1, is_active: 1, first_installed: 1, onBoardingCardClosed: 1 }\n    );\n    if (!user) {\n        throw new Error(`User does not exist. Attempted to sync properties for user: \"${myshopifyDomain}\"`);\n    }\n\n    const funnels: {\n        status: boolean;\n        triggers: Funnel['triggers'];\n        hasUpsellDefault: boolean;\n        hasUpsellAdditional: boolean;\n        hasDownsell: boolean;\n        hasTyPageWidgets: boolean;\n    }[] = await FunnelsModel.aggregate([\n        { $match: { shop: myshopifyDomain } },\n        {\n            $lookup: {\n                from: 'widgets',\n                as: 'hasActiveTyPageWidgets',\n                let: { thankyou_page: '$thankyou_page' },\n                pipeline: [\n                    { $match: { $expr: { $eq: ['$$thankyou_page', '$templateId'] } } },\n                    { $match: { active: true } },\n                    { $project: { _id: 1 } },\n                    { $limit: 1 },\n                ],\n            },\n        },\n        {\n            $project: {\n                status: 1,\n                triggers: 1,\n                hasUpsellDefault: { $gt: ['$upsell_default', null] },\n                hasUpsellAdditional: { $gt: ['$upsell_additional', null] },\n                hasDownsell: { $gt: ['$downsell', null] },\n                hasTyPageWidgets: {\n                    $cond: { if: { $gt: [{ $size: '$hasActiveTyPageWidgets' }, 0] }, then: true, else: false },\n                },\n            },\n        },\n    ]);\n    const publishedFunnels = funnels.filter((funnel) => funnel.status);\n\n    interface Analytics {\n        revenue: number;\n        impressions: number;\n        acceptedOffers: number;\n    }\n    const analyticsLast30DaysArr = await AnalyticsModel.aggregate([\n        { $match: { shop: myshopifyDomain, date: { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) } } },\n        {\n            $group: {\n                _id: { $cond: { if: { $gt: ['$type', null] }, then: 'oneClick', else: 'tyPage' } },\n                revenue: { $sum: '$data.revenue' },\n                impressions: { $sum: '$data.impressions' },\n                acceptedOffers: { $sum: '$data.numberOfOrders' },\n            },\n        },\n    ]);\n    const oneClickAnalytics: Analytics = analyticsLast30DaysArr.find((analytics) => analytics._id === 'oneClick') ?? {\n        revenue: 0,\n        impressions: 0,\n        acceptedOffers: 0,\n    };\n    const tyPageAnalytics: Analytics = analyticsLast30DaysArr.find((analytics) => analytics._id === 'tyPage') ?? {\n        revenue: 0,\n        impressions: 0,\n        acceptedOffers: 0,\n    };",
                "filename": "web/server/src/modules/mixpanel/mixpanel-calculate.ts",
                "start_index": 528,
                "end_index": 3395,
                "start_line": 1,
                "end_line": 200,
                "max_line": 205,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "try-point for queries. This acts as the public, top-level API from which all queries must start. */\nexport type QueryRootConversationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  createdAtMax?: InputMaybe<Scalars['DateTime']>;\n  createdAtMin?: InputMaybe<Scalars['DateTime']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  lastEventAtMax?: InputMaybe<Scalars['DateTime']>;\n  lastEventAtMin?: InputMaybe<Scalars['DateTime']>;\n  statuses?: InputMaybe<Array<ConversationStatus>>;\n  unreadOnly?: InputMaybe<Scalars['Boolean']>;\n};\n\n\n/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */\nexport type QueryRootJobArgs = {\n  id: Scalars['ID'];\n};\n\n\n/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */\nexport type QueryRootJobsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  createdAtMax?: InputMaybe<Scalars['DateTime']>;\n  createdAtMin?: InputMaybe<Scalars['DateTime']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  lastEventAtMax?: InputMaybe<Scalars['DateTime']>;\n  lastEventAtMin?: InputMaybe<Scalars['DateTime']>;\n  shopId?: InputMaybe<Scalars['ID']>;\n  statuses?: InputMaybe<Array<JobStatus>>;\n};\n\n\n/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */\nexport type QueryRootTransactionArgs = {\n  id: Scalars['ID'];\n};\n\n\n/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */\nexport type QueryRootTransactionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  appId?: InputMaybe<Scalars['ID']>;\n  before?: InputMaybe<Scalars['String']>;\n  createdAtMax?: InputMaybe<Scalars['DateTime']>;\n  createdAtMin?: InputMaybe<Scalars['DateTime']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  myshopifyDomain?: InputMaybe<Scalars['String']>;\n  shopId?: InputMaybe<Scalars['ID']>;\n  types?: InputMaybe<Array<TransactionType>>;\n};\n\n/** A transaction corresponding to a shop referral adjustment. */\nexport type ReferralAdjustment = Node & Transaction & {\n  __typename?: 'ReferralAdjustment';\n  /** The net amount that is added to or deducted from your payout. */\n  amount: Money;\n  /** The referral type. */\n  category: ReferralCategory;\n  /** The date and time when the transaction was recorded. */\n  createdAt: Scalars['DateTime'];\n  /** The transaction ID. */\n  id: Scalars['ID'];\n  /** The referred shop. */\n  shop?: Maybe<Shop>;\n};\n\n/** The referral type. */\nexport enum ReferralC",
                "filename": "web/server/src/modules/api-shopify-partners/graphql/generated/index.ts",
                "start_index": 38683,
                "end_index": 41404,
                "start_line": 1162,
                "end_line": 1280,
                "max_line": 1838,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "reranked_doc_snippets_initial": [
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/server` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 999,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# AfterSell\n\n### All Docs on Notion \ud83d\udc49 [AfterSell Notion Docs](https://www.notion.so/aftersell/AfterSell-Docs-9d43566167b5426d86b5983925872953?pvs=4)",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 148,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <!-- Shopify App Bridge [START] -->\n        <meta name=\"shopify-api-key\" content=\"%SHOPIFY_API_KEY%\" />",
                "filename": "web/client/index.html",
                "start_index": 38,
                "end_index": 156,
                "start_line": 4,
                "end_line": 6,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"step__sections\">\n                                <div class=\"section\">\n                                    <div class=\"section__header os-header\">\n                                        <svg\n                                            width=\"56\"\n                                            height=\"56\"\n                                            viewBox=\"0 0 56 56\"\n                                            fill=\"none\"\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                            <circle cx=\"28\" cy=\"28\" r=\"26\" stroke=\"#E5E5E5\" stroke-width=\"2.29412\" />\n                                            <path\n                                                fill-rule=\"evenodd\"\n                                                clip-rule=\"evenodd\"\n                                                d=\"M22.4811 37.3603L16.3636 31.3947C15.5663 30.6172 15.5663 29.3605 16.3636 28.583C17.1609 27.8055 18.4497 27.8055 19.247 28.583L23.8066 33.0293L36.6493 18.7538C37.3834 17.9186 38.6701 17.8231 39.5225 18.537C40.379 19.2529 40.4789 20.5056 39.7448 21.3388L25.4706 37.2469C25.1015 37.6685 24.5672 37.9191 24.0003 37.9409C23.3825 37.9429 22.8625 37.7341 22.4811 37.3603Z\"\n                                                fill=\"#008060\"\n                                                stroke=\"#E5E5E5\"\n                                                stroke-width=\"0.764706\"\n                                            />\n                                        </svg>\n                                        <div class=\"os-header__heading\">\n                                            <span class=\"os-order-number\"> Order #1001 </span>\n                                            <h2 class=\"os-header__title\" id=\"main-header\" tabindex=\"-1\">\n                                                Thank you {{Customer Name}}!\n                                            </h2>\n                                        </div>\n                                    </div>\n                                </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245858,
                "end_index": 247957,
                "start_line": 6161,
                "end_line": 6451,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<body class=\"aftersell-preview\">\n        <a href=\"#main-header\" class=\"skip-to-content\"> Skip to content </a>\n\n        <header class=\"banner\" data-header=\"\" role=\"banner\">\n            <div class=\"wrap\">\n                <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n            </div>\n        </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241387,
                "end_index": 241804,
                "start_line": 6077,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# [[[ --- CLIENT --- ]]]\nFROM node:18.16.1-alpine AS client\nARG SHOPIFY_API_KEY\nENV SHOPIFY_API_KEY=$SHOPIFY_API_KEY\nARG HOST\nENV HOST=$HOST\nARG NODE_ENV\nENV NODE_ENV=$NODE_ENV\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/client/package.json ./web/client/package.json\nCOPY web/client/yarn.lock ./web/client/yarn.lock\nRUN cd web/client && yarn install --frozen-lockfile --production=false\nCOPY extensions-web-common/package.json ./extensions-web-common/package.json\nCOPY extensions-web-common/yarn.lock ./extensions-web-common/yarn.lock\nRUN cd extensions-web-common && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY extensions/post-purchase ./extensions/post-purchase\nCOPY extensions-web-common/post-purchase ./extensions-web-common/post-purchase\nCOPY extensions-web-common/checkout ./extensions-web-common/checkout\nCOPY extensions-web-common/shared ./extensions-web-common/shared\nCOPY extensions-web-common/ty-page ./extensions-web-common/ty-page\nCOPY web/client ./web/client\nRUN cd web/client && yarn build\n\n# [[[ --- TY PAGE --- ]]]\nFROM node:18.16.1-alpine AS ty-page\nARG HOST\nENV HOST=$HOST\nWORKDIR /usr/src/app\nCOPY web/widgets/package.json ./web/widgets/package.json\nCOPY web/widgets/yarn.lock ./web/widgets/yarn.lock\nRUN cd web/widgets && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY web/widgets ./web/widgets\nRUN cd web/widgets && yarn build\n\n# [[[ --- SERVER --- ]]]\nFROM node:18.16.1-alpine AS server\nWORKDIR /usr/src/app\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=false\nCOPY web/server ./web/server\nCOPY web/common ./web/common\nRUN cd web/server && yarn build\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM node:18.16.1-alpine AS final\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=true\nCOPY --from=server /usr/src/app/web/server/build ./web/server/build\nCOPY --from=ty-page /usr/src/app/web/widgets/dist ./web/server/build/server/dist\nCOPY --from=client /usr/src/app/web/client/dist ./web/server/build/server/dist/client\nCOPY package.json ./package.json\nCMD [\"yarn\", \"start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2514,
                "start_line": 1,
                "end_line": 61,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<tbody class=\"total-line-table__tbody\">\n                                            <tr class=\"total-line total-line--subtotal\">\n                                                <th class=\"total-line__name\" scope=\"row\">Subtotal</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-subtotal-price-target=\"4299\"\n                                                    >\n                                                        $42.99\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--shipping\">\n                                                <th class=\"total-line__name\" scope=\"row\">\n                                                    <span> Shipping </span>\n                                                </th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-shipping-target=\"0\"\n                                                    >\n                                                        Free\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--taxes\" data-checkout-taxes=\"\">\n                                                <th class=\"total-line__name\" scope=\"row\">Taxes</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-taxes-target=\"774\"\n                                                        >$7.74</span\n                                                    >\n                                                </td>\n                                            </tr>\n                                        </tbody>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 333285,
                "end_index": 335837,
                "start_line": 6396,
                "end_line": 6433,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<aside class=\"sidebar\" role=\"complementary\">\n                    <div class=\"sidebar__header\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323196,
                "end_index": 323511,
                "start_line": 6285,
                "end_line": 6493,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"section__content\">\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Contact information</h3>\n\n                                                            <p class=\"as-dummy-line\"></p>\n\n                                                            <h3 class=\"heading-3\">Shipping address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n\n                                                            <h3 class=\"heading-3\">Shipping method</h3>\n                                                            <p class=\"as-dummy-line as-w40\"></p>\n                                                        </div>\n                                                    </div>\n\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Payment method</h3>\n                                                            <ul class=\"payment-method-list\">\n                                                                <li class=\"payment-method-list__item\">\n                                                                    <p class=\"as-dummy-line as-w80\"></p>\n                                                                </li>\n                                                            </ul>\n\n                                                            <h3 class=\"heading-3\">Billing address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n                                                        </div>\n                                                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318877,
                "end_index": 321837,
                "start_line": 6191,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Shopify Function development with Rust\n\n## Dependencies\n\n-   [Install Rust](https://www.rust-lang.org/tools/install)\n    -   On Windows, Rust requires the [Microsoft C++ Build Tools](https://docs.microsoft.com/en-us/windows/dev-environment/rust/setup). Be sure to select the _Desktop development with C++_ workload when installing them.\n-   Install [`cargo-wasi`](https://bytecodealliance.github.io/cargo-wasi/)\n    -   `cargo install cargo-wasi`\n-   On Macs with Apple Silicon, you'll also need to install the Binaryen toolchain and set the `WASM_OPT` environment variable. ([related issue](https://github.com/bytecodealliance/cargo-wasi/issues/112))\n    -   `brew install binaryen`\n    -   Add `export WASM_OPT=/opt/homebrew/bin/wasm-opt` to your `.bashrc` or `.zshrc`\n\n## Building the function\n\nYou can build this individual function using `cargo wasi`.\n\n```shell\ncargo wasi build --release\n```\n\nThe Shopify CLI `build` command will also execute this, based on the configuration in `shopify.function.extension.toml`.\n\n## Testing\n\n> Requires Node v16+\n\n1. Create a temporary JSON file (e.g., `a.json`) in the following format:\n\n```json\n{\n    \"data\": {\n        \"foo\": \"bar\"\n    },\n    \"secretKey\": \"abc123\"\n}\n```\n\n2. Run the following command\n\n```\nyarn test:new-hmac < a.json\n```\n\n3. Copy the generated HMAC into the test file",
                "filename": "extensions/upsell-offer-discount-function/README.md",
                "start_index": 0,
                "end_index": 1329,
                "start_line": 1,
                "end_line": 44,
                "max_line": 44,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script>\n            !(function (f, b, e, v, n, t, s) {\n                if (f.fbq) return;\n                n = f.fbq = function () {\n                    n.callMethod ? n.callMethod.apply(n, arguments) : n.queue.push(arguments);\n                };\n                if (!f._fbq) f._fbq = n;\n                n.push = n;\n                n.loaded = !0;\n                n.version = '2.0';\n                n.queue = [];\n                t = b.createElement(e);\n                t.async = !0;\n                t.src = v;\n                s = b.getElementsByTagName(e)[0];\n                s.parentNode.insertBefore(t, s);\n            })(window, document, 'script', 'https://connect.facebook.net/en_US/fbevents.js');\n            fbq('init', '895262111044943');\n            fbq('track', 'PageView');\n        </script>\n        <!-- End Facebook Pixel Code -->\n        <!-- Reddit Pixel -->\n        <script>\n            !(function (w, d) {\n                if (!w.rdt) {\n                    var p = (w.rdt = function () {\n                        p.sendEvent ? p.sendEvent.apply(p, arguments) : p.callQueue.push(arguments);\n                    });\n                    p.callQueue = [];\n                    var t = d.createElement('script');\n                    (t.src = 'https://www.redditstatic.com/ads/pixel.js'), (t.async = !0);\n                    var s = d.getElementsByTagName('script')[0];\n                    s.parentNode.insertBefore(t, s);\n                }\n            })(window, document);\n            rdt('init', 't2_dp3wj8bg');\n            rdt('track', 'PageVisit');\n        </script>\n        <!-- End Reddit Pixel -->\n\n        <!-- Dev HMR [START] -->\n        <script type=\"module\">\n            if (!import.meta.env || !import.meta.env.PROD) {\n                // For embedded development, the iframe loads an HTML file from the server. Normally for\n                // development, the HTML file is served by the dev server, which injects the HMR script.\n                // This script adds the HMR script to the iframe to allow HMR in embedded development.\n                const script = document.createElement('script');\n                script.setAttribute('type', 'module');\n                script.setAttribute('src', './src/dev-hmr.ts');\n                document.getElementsByTagName('head')[0].append(script);\n            }\n        </script>\n        <!-- Dev HMR [END] -->\n\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com/\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" crossorigin=\"anonymous\" />\n        <link\n            href=\"https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap\"\n        />\n    </head>",
                "filename": "web/client/index.html",
                "start_index": 6232,
                "end_index": 8924,
                "start_line": 7,
                "end_line": 178,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"main\">\n                    <header class=\"main__header\" role=\"banner\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245397,
                "end_index": 245703,
                "start_line": 6153,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"hidden\">\n                            <span class=\"visually-hidden\" id=\"forwarding-external-new-window-message\">\n                                Opens external website in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-new-window-message\">\n                                Opens in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-external-message\">\n                                Opens external website.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"checkout-context-step-one\">\n                                Customer information - Checkout\n                            </span>\n                        </div>\n                    </main>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 322226,
                "end_index": 323078,
                "start_line": 6265,
                "end_line": 6282,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"sidebar__content\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323532,
                "end_index": 323562,
                "start_line": 6291,
                "end_line": 6291,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box\">\n                                            <div class=\"content-box__row content-box__row--no-border\">\n                                                <h2>Customer information</h2>\n                                            </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318496,
                "end_index": 318753,
                "start_line": 6192,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"section__content\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 248049,
                "end_index": 248079,
                "start_line": 6191,
                "end_line": 6215,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<html\n    lang=\"en\"\n    dir=\"ltr\"\n    class=\"js desktop page--no-banner page--logo-main page--show page--show card-fields cors svg opacity placeholder no-touchevents displaytable display-table generatedcontent cssanimations flexbox no-flexboxtweener anyflexbox shopemoji floating-labels\"\n>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 0,
                "end_index": 289,
                "start_line": 1,
                "end_line": 6518,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box__row text-container\">\n                                                <h2 class=\"heading-2 os-step__title\" id=\"main-header\" tabindex=\"-1\">\n                                                    Your order is confirmed\n                                                </h2>\n                                                <p class=\"os-step__description\">\n                                                    You\u2019ll receive an email when your order is ready.\n                                                </p>\n                                            </div>\n                                        </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 317828,
                "end_index": 318454,
                "start_line": 6200,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "solution_task": {
            "structured_resp": "Understand:\nThe feature request is to create a `SlackConnection` model in a Node.js application using TypeScript and Typegoose. The model should have attributes `merchant_id`, `slack_workspace`, `enabled`, `created_at`, and `updated_at`, with presence validations for `merchant_id` and `slack_workspace`. Additionally, a database migration should be created for the `SlackConnection` table with an index on `merchant_id`. The model should be integrated with Retool and Zapier, and existing Slack merchants should be added to the `SlackConnection` model. A DRI should be designated for updates, and a communication plan should be established for the new model and integrations.\n\nPlan:\n- Define the `SlackConnection` model using Typegoose with the specified attributes and validations.\n- Create a database migration file to create the `SlackConnection` table with the necessary columns and index.\n- Integrate the `SlackConnection` model with Retool and Zapier.\n- Write a script or use a migration tool to add existing Slack merchants to the new model.\n- Assign a DRI and establish a communication plan for the new model and integrations.\n\nIdentify Tools:\n- Typegoose for defining the MongoDB model.\n- MongoDB or a similar database migration tool for creating the database migration.\n- Retool and Zapier for integrations.\n\nImplement:\n- Define the `SlackConnection` model:\n```typescript\nimport { getModelForClass, prop, index } from '@typegoose/typegoose';\n\n@index({ merchant_id: 1 })\nclass SlackConnection {\n  @prop({ required: true })\n  public merchant_id!: string;\n\n  @prop({ required: true })\n  public slack_workspace!: string;\n\n  @prop({ required: true, default: false })\n  public enabled!: boolean;\n\n  @prop({ default: () => new Date() })\n  public created_at!: Date;\n\n  @prop({ default: () => new Date() })\n  public updated_at!: Date;\n}\n\nconst SlackConnectionModel = getModelForClass(SlackConnection);\nexport default SlackConnectionModel;\n```\n\n- Create a database migration file (e.g., `20230401123456-create-slack-connection.ts`):\n```typescript\nmodule.exports = {\n  up: async (db, client) => {\n    await db.createCollection('slack_connections', {\n      validator: {\n        $jsonSchema: {\n          bsonType: 'object',\n          required: ['merchant_id', 'slack_workspace'],\n          properties: {\n            merchant_id: {\n              bsonType: 'string',\n              description: 'must be a string and is required',\n            },\n            slack_workspace: {\n              bsonType: 'string',\n              description: 'must be a string and is required',\n            },\n            enabled: {\n              bsonType: 'bool',\n              description: 'must be a boolean and is required',\n            },\n            created_at: {\n              bsonType: 'date',\n              description: 'must be a date and is required',\n            },\n            updated_at: {\n              bsonType: 'date',\n              description: 'must be a date and is required',\n            },\n          },\n        },\n      },\n    });\n    await db.collection('slack_connections').createIndex({ merchant_id: 1 });\n  },\n  down: async (db, client) => {\n    await db.collection('slack_connections').drop();\n  },\n};\n```\n\n- Integrate with Retool and Zapier:\n  - Use the Retool platform to create a new resource that connects to the MongoDB database and interacts with the `SlackConnection` model.\n  - Set up a Zapier integration that triggers on certain events (e.g., new SlackConnection created) and performs actions as needed.\n\n- Add existing Slack merchants to the `SlackConnection` model:\n  - This step requires additional information on how existing Slack merchants are stored and how they should be migrated.\n\n- Designate a DRI and establish a communication plan:\n  - Assign a team member as the DRI to oversee the implementation and updates of the `SlackConnection` model.\n  - Develop a communication plan to inform stakeholders about the new model and integrations, including documentation and training materials as needed.",
            "response": "To enhance our Node.js application's integration with Slack, we are introducing a new `SlackConnection` model. This model will facilitate better management of Slack integrations for merchants and ensure seamless connectivity between our application, Retool, and Zapier. The model will include essential fields such as `merchant_id`, `slack_workspace`, and status flags, and will be backed by a robust database schema with appropriate validations and indexing.\n\nHere are the steps to implement the new model and integrations:\n\n- Define the `SlackConnection` model in TypeScript using Typegoose, ensuring that `merchant_id` and `slack_workspace` are required fields, and include `enabled`, `created_at`, and `updated_at` attributes:\n```typescript\nimport { getModelForClass, prop, index } from '@typegoose/typegoose';\n\n@index({ merchant_id: 1 })\nclass SlackConnection {\n  @prop({ required: true })\n  public merchant_id!: string;\n\n  @prop({ required: true })\n  public slack_workspace!: string;\n\n  @prop({ required: true, default: false })\n  public enabled!: boolean;\n\n  @prop({ default: () => new Date() })\n  public created_at!: Date;\n\n  @prop({ default: () => new Date() })\n  public updated_at!: Date;\n}\n\nconst SlackConnectionModel = getModelForClass(SlackConnection);\nexport default SlackConnectionModel;\n```\n\n- Create a database migration to establish the `SlackConnection` table with an index on `merchant_id` to optimize queries:\n```typescript\nmodule.exports = {\n  up: async (db, client) => {\n    // Migration logic to create the collection and index\n  },\n  down: async (db, client) => {\n    // Logic to revert the migration\n  },\n};\n```\n\n- Set up the `SlackConnection` model within Retool by creating a new resource that connects to the MongoDB database, allowing for administrative operations on the Slack connections.\n\n- Configure Zapier to interact with the `SlackConnection` model, triggering workflows based on events such as the creation of new connections.\n\n- Migrate existing Slack merchants to the new `SlackConnection` model, ensuring a smooth transition and continuity of service. (Details on the migration process will depend on the current storage and management of Slack merchant data.)\n\n- Appoint a Directly Responsible Individual (DRI) to manage the rollout and maintenance of the `SlackConnection` model and integrations, and develop a communication plan to keep all stakeholders informed about the changes and how to utilize the new system."
        },
        "snippet_processor_task": {},
        "bouncer_response": {
            "score": 3,
            "criteria": "The RESPONSE should provide actionable and creative guidance to aid in the development or enhancement of the feature request described in the PROMPT. It should address the specific needs and context presented, offering clear and comprehensive suggestions or solutions.",
            "supporting_evidence": "The RESPONSE provides a detailed implementation plan for the `SlackConnection` model, including code examples for defining the model in TypeScript and setting up a database migration. However, the RESPONSE fails to address the specific context of the PROMPT, which indicates that the application is written in Ruby (as evidenced by the `slack_connection.rb` file in the GitHub pull request) and not in Node.js or TypeScript. Additionally, the RESPONSE does not address the tasks of setting up Retool, adding all existing Slack merchants, setting up Zapier, appointing a DRI, or communicating the changes, which are all part of the feature request. The RESPONSE also assumes the use of MongoDB, which is not mentioned in the PROMPT. Therefore, while the RESPONSE provides some actionable steps, it is not fully aligned with the PROMPT's requirements and context.",
            "clarification_questions": "NONE"
        },
        "end_time": 1714257319.850197,
        "result": "Doesn't seem like we have fully grasped all the specifics of this ticket \ud83d\ude41.                   But we've outlined some ideas that might help you get started:\n\nTo enhance our Node.js application's integration with Slack, we are introducing a new `SlackConnection` model. This model will facilitate better management of Slack integrations for merchants and ensure seamless connectivity between our application, Retool, and Zapier. The model will include essential fields such as `merchant_id`, `slack_workspace`, and status flags, and will be backed by a robust database schema with appropriate validations and indexing.\n\nHere are the steps to implement the new model and integrations:\n\n- Define the `SlackConnection` model in TypeScript using Typegoose, ensuring that `merchant_id` and `slack_workspace` are required fields, and include `enabled`, `created_at`, and `updated_at` attributes:\n```typescript\nimport { getModelForClass, prop, index } from '@typegoose/typegoose';\n\n@index({ merchant_id: 1 })\nclass SlackConnection {\n  @prop({ required: true })\n  public merchant_id!: string;\n\n  @prop({ required: true })\n  public slack_workspace!: string;\n\n  @prop({ required: true, default: false })\n  public enabled!: boolean;\n\n  @prop({ default: () => new Date() })\n  public created_at!: Date;\n\n  @prop({ default: () => new Date() })\n  public updated_at!: Date;\n}\n\nconst SlackConnectionModel = getModelForClass(SlackConnection);\nexport default SlackConnectionModel;\n```\n\n- Create a database migration to establish the `SlackConnection` table with an index on `merchant_id` to optimize queries:\n```typescript\nmodule.exports = {\n  up: async (db, client) => {\n    // Migration logic to create the collection and index\n  },\n  down: async (db, client) => {\n    // Logic to revert the migration\n  },\n};\n```\n\n- Set up the `SlackConnection` model within Retool by creating a new resource that connects to the MongoDB database, allowing for administrative operations on the Slack connections.\n\n- Configure Zapier to interact with the `SlackConnection` model, triggering workflows based on events such as the creation of new connections.\n\n- Migrate existing Slack merchants to the new `SlackConnection` model, ensuring a smooth transition and continuity of service. (Details on the migration process will depend on the current storage and management of Slack merchant data.)\n\n- Appoint a Directly Responsible Individual (DRI) to manage the rollout and maintenance of the `SlackConnection` model and integrations, and develop a communication plan to keep all stakeholders informed about the changes and how to utilize the new system."
    }
}