{
    "id": "BEAM-3220",
    "repo_name": "testbed/aftersell",
    "title": "Create SlackConnection model",
    "body": "\nAll tasks - this ticket correlates to the first\n\n* Add model for this\n* Make a Retool to add to this model\n* Add all existing Slack merchants\n* Setup Zapier\n* DRI to update on X cadence\n* Communicate this\n---\nGlossary:\ngithub_pr_1: https://github.com/beam-commerce/aftersell/pull/1120\n\n\n---\nThe ticket above is a subticket of the following ticket:\nTitle: Sync CS Sales enablement data to Intercom\nBody:\n\n",
    "classification": "feature request",
    "state": "closed",
    "repo_link": "https://github.com/testbed/aftersell.git",
    "requested_commit": null,
    "issue_tracker_identifier": "",
    "ai_cost": {
        "issue_classifier": 0.0002115,
        "issue_summarizer": 0.00658,
        "search_embedding": 1.469e-05,
        "documentation_agent": 0.00487,
        "repo_summary": 0.0984065,
        "issue_star_solver": 0.15096150000000003,
        "snippet_processor": 0.017980000000000003,
        "bouncer": 0.02289
    },
    "attachments": [
        {
            "title": "chore(server): create model to represent Slack channel support [BEAM-3220]",
            "url": "https://github.com/beam-commerce/aftersell/pull/1120",
            "content": "",
            "placeholder_tag": "github_pr_1",
            "content_type": "ExternalAssetsType.GITHUB_PR"
        }
    ],
    "inline_assets": [],
    "linked_issue_ids": [
        "ENG-74"
    ],
    "comments": [],
    "issue_summary": "- Create `SlackConnection` model\n- Implement Retool integration for `SlackConnection` model\n- Migrate existing Slack merchants to `SlackConnection` model\n- Configure Zapier for `SlackConnection` model\n- Define DRI (Directly Responsible Individual) update frequency for `SlackConnection` model\n- Communication plan for `SlackConnection` model updates\n\nRelated GitHub PR: [github_pr_1](https://github.com/beam-commerce/aftersell/pull/1120)",
    "repo_summary": "The software project is a complex web application called AfterSell, which consists of multiple directories and components:\n\n1. The project structure includes directories like `web`, `extensions-web-common`, `docs`, and others, containing various configuration files, code, and documentation.\n\n2. The project uses Node.js with TypeScript for server-side development and React for client-side development.\n\n3. The project includes different modules such as `shopify`, `kiflo`, `checkout-widgets`, `mixpanel`, and `rokt`, each handling specific functionalities like syncing data, calculating discounts, and integrating with external services.\n\n4. The project uses MongoDB with Mongoose for database operations and Typegoose for defining models, such as `CheckoutTriggers`, `UpsellOffer`, and `RoktAccount`.\n\n5. The project utilizes Docker for containerization, with separate build stages for the client, TY page, and server components.\n\n6. The project follows a secure approach for implementing checkout upsell discounts, involving the generation and verification of `TamperProofCartAttribute` to ensure data integrity.\n\n7. The project includes detailed documentation explaining the implementation of checkout upsell discounts, including type definitions and security considerations.\n\n8. The project's codebase contains functions for interacting with external APIs, aggregating data, and handling business logic related to user settings, analytics, and external service integrations.\n\n9. The project uses Jest for testing and includes scripts for building, testing, and running different parts of the application.\n\n10. The project's components are interconnected, with data flow between modules like `shopify`, `kiflo`, and `rokt`, to provide a seamless user experience and integrated functionalities.\n\nOverall, the project is a sophisticated web application with various modules, services, and components working together to provide a comprehensive e-commerce solution.",
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1714392944.379193,
        "classification": "feature request",
        "initial_code_snippets": [
            {
                "code": "{\n    const user: {\n        currency: string;\n        plan_name: string;\n        is_active: boolean;\n        first_installed: Date;\n        onBoardingCardClosed: boolean;\n    } | null = await UserModel.findOne(\n        { myshopify_domain: myshopifyDomain },\n        { currency: 1, plan_name: 1, is_active: 1, first_installed: 1, onBoardingCardClosed: 1 }\n    );\n    if (!user) {\n        throw new Error(`User does not exist. Attempted to sync properties for user: \"${myshopifyDomain}\"`);\n    }\n\n    const funnels: {\n        status: boolean;\n        triggers: Funnel['triggers'];\n        hasUpsellDefault: boolean;\n        hasUpsellAdditional: boolean;\n        hasDownsell: boolean;\n        hasTyPageWidgets: boolean;\n    }[] = await FunnelsModel.aggregate([\n        { $match: { shop: myshopifyDomain } },\n        {\n            $lookup: {\n                from: 'widgets',\n                as: 'hasActiveTyPageWidgets',\n                let: { thankyou_page: '$thankyou_page' },\n                pipeline: [\n                    { $match: { $expr: { $eq: ['$$thankyou_page', '$templateId'] } } },\n                    { $match: { active: true } },\n                    { $project: { _id: 1 } },\n                    { $limit: 1 },\n                ],\n            },\n        },\n        {\n            $project: {\n                status: 1,\n                triggers: 1,\n                hasUpsellDefault: { $gt: ['$upsell_default', null] },\n                hasUpsellAdditional: { $gt: ['$upsell_additional', null] },\n                hasDownsell: { $gt: ['$downsell', null] },\n                hasTyPageWidgets: {\n                    $cond: { if: { $gt: [{ $size: '$hasActiveTyPageWidgets' }, 0] }, then: true, else: false },\n                },\n            },\n        },\n    ]);\n    const publishedFunnels = funnels.filter((funnel) => funnel.status);\n\n    interface Analytics {\n        revenue: number;\n        impressions: number;\n        acceptedOffers: number;\n    }\n    const analyticsLast30DaysArr = await AnalyticsModel.aggregate([\n        { $match: { shop: myshopifyDomain, date: { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) } } },\n        {\n            $group: {\n                _id: { $cond: { if: { $gt: ['$type', null] }, then: 'oneClick', else: 'tyPage' } },\n                revenue: { $sum: '$data.revenue' },\n                impressions: { $sum: '$data.impressions' },\n                acceptedOffers: { $sum: '$data.numberOfOrders' },\n            },\n        },\n    ]);\n    const oneClickAnalytics: Analytics = analyticsLast30DaysArr.find((analytics) => analytics._id === 'oneClick') ?? {\n        revenue: 0,\n        impressions: 0,\n        acceptedOffers: 0,\n    };\n    const tyPageAnalytics: Analytics = analyticsLast30DaysArr.find((analytics) => analytics._id === 'tyPage') ?? {\n        revenue: 0,\n        impressions: 0,\n        acceptedOffers: 0,\n    };",
                "filename": "web/server/src/modules/mixpanel/mixpanel-calculate.ts",
                "start_index": 528,
                "end_index": 3395,
                "start_line": 1,
                "end_line": 200,
                "max_line": 205,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { getModelForClass, modelOptions, prop } from '@typegoose/typegoose';\nimport { REGEX_MYSHOPIFY } from '../../utils/regexes';\n\n/**\n * Responsible for the relevant fields pertaining to how the rest of the AfterSell ecosystem interacts with Rokt.\n */\n@modelOptions({ schemaOptions: { _id: false } })\nexport class AfterSellSettings {\n    @prop({ required: false, default: true })\n    overrideStorewidePopup!: boolean;\n}\n\n/**\n * This links a shop using AfterSell with a Rokt account. All other data is stored\n * on Rokt servers and can be retrieved using the `appInstallationId`.\n */\nclass RoktAccount {\n    @prop({ required: true, unique: true, match: REGEX_MYSHOPIFY })\n    shop!: string;\n\n    @prop({ required: true })\n    appInstallationId!: string;\n\n    @prop({ required: false })\n    accountId!: string;\n\n    @prop({ required: true })\n    createdAt!: string;\n\n    @prop({ required: false, default: null })\n    updatedAt!: string;\n\n    @prop({ required: false, default: null })\n    deletedAt!: string;\n\n    @prop({ required: true, default: {} })\n    afterSellSettings!: AfterSellSettings;\n}\n\nexport const RoktAccountModel = getModelForClass(RoktAccount);",
                "filename": "web/server/src/modules/rokt/rokt-accounts.model.ts",
                "start_index": 0,
                "end_index": 1161,
                "start_line": 1,
                "end_line": 40,
                "max_line": 40,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export type AppUsageRecord = AppCharge & Node & {\n  __typename?: 'AppUsageRecord';\n  /** The amount of the app charge. */\n  amount: Money;\n  /** A globally unique identifier. */\n  id: Scalars['ID'];\n  /** The name of the app charge. */\n  name: Scalars['String'];\n  /** Whether the app purchase was a test transaction. */\n  test: Scalars['Boolean'];\n};\n\n/** An app event for an app usage charge. */\nexport type AppUsageRecordEvent = {\n  /**\n   * An app charge. This charge varies based on how much the merchant uses the app\n   * or a service that the app integrates with.\n   */\n  charge: AppUsageRecord;\n};\n\n/** A transaction corresponding to an app usage charge. */\nexport type AppUsageSale = Node & Transaction & {\n  __typename?: 'AppUsageSale';\n  /** The app associated with the sale. */\n  app: App;\n  /** The ID of the [app charge](/tutorials/bill-for-your-app-using-graphql-admin-api) associated with the transaction. Example value: `gid://shopify/AppUsageRecord/1234`. This value might be `null` for transactions that occurred before September 2020. */\n  chargeId?: Maybe<Scalars['ID']>;\n  /** The date and time when the transaction was recorded. */\n  createdAt: Scalars['DateTime'];\n  /** The total amount that the merchant paid, excluding taxes. */\n  grossAmount?: Maybe<Money>;\n  /** The transaction ID. */\n  id: Scalars['ID'];\n  /** The net amount that is added to or deducted from your payout. */\n  netAmount: Money;\n  /** The shop associated with the transaction. */\n  shop?: Maybe<Shop>;\n  /** The amount that Shopify retained from the sale. */\n  shopifyFee?: Maybe<Money>;\n};\n\n/** A conversation with a merchant through the Experts Marketplace. */\nexport type Conversation = Node & {\n  __typename?: 'Conversation';\n  /** The date and time the conversation was started. */\n  createdAt: Scalars['DateTime'];\n  /** The URL to access this conversation in the Partner Dashboard. */\n  dashboardUrl: Scalars['Url'];\n  /** Whether the conversation has unread messages. */\n  hasUnreadMessages: Scalars['Boolean'];\n  /** A globally unique identifier. */\n  id: Scalars['ID'];\n  /** The date and time of the most recent conversation event. Example events: a message being sent, or a proposal being accepted. */\n  lastEventAt: Scalars['DateTime'];\n  /** The merchant account involved in the conversation. */\n  merchantUser: MerchantUser;\n  /** The messages exchanged within the conversation. */\n  messages: MessageConnection;\n  /** The status of the Experts Marketplace conversation. */\n  status: ConversationStatus;\n};\n\n\n/** A conversation with a merchant through the Experts Marketplace. */\nexport type ConversationMessagesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  sentAtMax?: InputMaybe<Scalars['DateTime']>;\n  sentAtMin?: InputMaybe<Scalars['DateTime']>;\n};\n\n/** The connection type for Conversation. */",
                "filename": "web/server/src/modules/api-shopify-partners/graphql/generated/index.ts",
                "start_index": 12984,
                "end_index": 15918,
                "start_line": 336,
                "end_line": 410,
                "max_line": 1838,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { FirstPromoterApi, TrackSaleReqBody } from '../api-firstpromoter/api-firstpromoter';\nimport { ShopifyPartnersApi } from '../api-shopify-partners';\nimport { FirstPromoterPartnersBindingModel } from './firstpromoter-partners-bindings.model';\nimport { FirstPromoterTrackedSale, FirstPromoterTrackedSaleModel } from './firstpromoter-tracked-sales.model';",
                "filename": "web/server/src/modules/firstpromoter/firstpromoter.ts",
                "start_index": 0,
                "end_index": 358,
                "start_line": 1,
                "end_line": 4,
                "max_line": 68,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "static async createAfterSellPlan({\n        sanitizedNewAfterSellPlan,\n    }: {\n        sanitizedNewAfterSellPlan: AfterSellPlan;\n    }): Promise<Result> {\n        const validationResult = BillingValidationService.validateAfterSellPlanLogic({\n            sanitizedAfterSellPlan: sanitizedNewAfterSellPlan,\n        });\n        if (!validationResult.isValid) {\n            return {\n                success: false,\n                reason: validationResult.reason,\n            };\n        }\n        const createPlanResult = await AppendOnlyAfterSellPlansService.createPlan(sanitizedNewAfterSellPlan);\n        return createPlanResult;\n    }\n\n    static async getPossibleFeaturesForUser({\n        shopifyService,\n    }: {\n        shopifyService: ShopifyService;\n    }): Promise<AfterSellPaidFeature[]> {\n        const possibleFeatures: AfterSellPaidFeature[] = [AfterSellPaidFeature.POST_PURCHASE];\n        const hasCheckoutExtensibilityStoreAccess = await shopifyService.getHasCheckoutExtensibilityAccess();\n        if (hasCheckoutExtensibilityStoreAccess) {\n            possibleFeatures.push(AfterSellPaidFeature.CHECKOUT);\n        }\n        return possibleFeatures;\n    }\n\n    private static convertRestRecurringChargeToShopifyCharge(\n        recurringChargeRest: ActiveRecurringChargeRest\n    ): ShopifyChargeToValidate {\n        return {\n            chargeName: recurringChargeRest.name,\n            recurringChargeConfigOnChargeAccept: {\n                monthlyAmount: Number(recurringChargeRest.price),\n            },\n            maxMonthlyUsageAmount: recurringChargeRest.capped_amount ? Number(recurringChargeRest.capped_amount) : 0, // default to 0 if capped_amount is undefined\n        };\n    }\n}",
                "filename": "web/server/src/modules/billing/legacy-billing-v2.service.ts",
                "start_index": 14194,
                "end_index": 15893,
                "start_line": 318,
                "end_line": 360,
                "max_line": 360,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "ith Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href=\"/apps/online-store#what-integration-method-should-i-use\" target=\"_blank\">Learn more</a>.</p></div>\n   *\n   *\n   * A list of script tags.\n   *\n   */\n  scriptTags: ScriptTagConnection;\n  /** The Customer Segment. */\n  segment?: Maybe<Segment>;\n  /** The number of segments for a shop. */\n  segmentCount: Scalars['Int'];\n  /** A list of filter suggestions associated with a segment. A segment is a group of members (commonly customers) that meet specific criteria. */\n  segmentFilterSuggestions: SegmentFilterConnection;\n  /** A list of filters. */\n  segmentFilters: SegmentFilterConnection;\n  /** A list of a shop's segment migrations. */\n  segmentMigrations: SegmentMigrationConnection;\n  /** The list of suggested values that's associated with an individual segment.A segment is a group of members, such as customers, that meet specific criteria. */\n  segmentValueSuggestions: SegmentValueConnection;\n  /** A list of a shop's segments. */\n  segments: SegmentConnection;\n  /** Returns a Selling Plan Group resource by ID. */\n  sellingPlanGroup?: Maybe<SellingPlanGroup>;\n  /** List Selling Plan Groups. */\n  sellingPlanGroups: SellingPlanGroupConnection;\n  /** The server pixel configured by the app. */\n  serverPixel?: Maybe<ServerPixel>;\n  /**\n   * Returns the Shop resource corresponding to the access token used in the request. The Shop resource contains\n   * business and store management settings for the shop.\n   *\n   */\n  shop: Shop;\n  /** The shop's billing preferences. */\n  shopBillingPreferences: ShopBillingPreferences;\n  /** A list of locales available on a shop. */\n  shopLocales: Array<ShopLocale>;\n  /** The Shopify Function. */\n  shopifyFunction?: Maybe<ShopifyFunction>;\n  /** Returns the Shopify Functions for apps installed on the shop. */\n  shopifyFunctions: ShopifyFunctionConnection;\n  /** Shopify Payments account information, including balances and payouts. */\n  shopifyPaymentsAccount?: Maybe<ShopifyPaymentsAccount>;\n  /** Returns the results of a ShopifyQL query. Refer to the [ShopifyQL documentation](https://shopify.dev/api/shopifyql) for more information. */\n  shopifyqlQuery?: Maybe<ShopifyqlResponse>;\n  /** The StaffMember resource, by ID. */\n  staffMember?: Maybe<StaffMember>;\n  /**\n   * Standard metafield definitions are intended for specific, common use cases. Their namespace and keys reflect these use cases and are reserved.\n   *\n   * Refer to all available [`Standard Metafield Definition Templates`](https://shopify.dev/api/admin-graphql/latest/objects/StandardMetafieldDefinitionTemplate).\n   *\n   */\n  standardMetafieldDefinitionTemplates: StandardMetafieldDefinitionTemplateConnection;\n  /** Returns a SubscriptionBillingAttempt by ID. */\n  subscriptionBillingAttempt?: Maybe<SubscriptionBillingAttempt>;",
                "filename": "web/server/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1301486,
                "end_index": 1304418,
                "start_line": 22508,
                "end_line": 40295,
                "max_line": 44790,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export async function trackNewFirstPromoterCommissions({ app }: { app: string }) {\n    const binding = await FirstPromoterPartnersBindingModel.findOne({ app });\n    if (!binding) {\n        throw new Error(`No FirstPromoterPartnersBinding found for app: \"${app}\"`);\n    }\n\n    const firstpromoter = new FirstPromoterApi({ apiKey: binding.firstpromoterApiKey });\n    const partners = new ShopifyPartnersApi({\n        orgId: binding.partnersOrgId,\n        apiSecret: binding.partnersApiSecret,\n    });\n\n    const leads = await firstpromoter.leadsListAll();\n    const myshopifyDomains = leads.map((lead) => lead.uid);\n\n    const [partnersTransactions, partnersTransactionsErr] = await partners.getAllTransactions({\n        appId: binding.partnersAppId,\n        myshopifyDomains,\n    });\n    if (partnersTransactionsErr) throw partnersTransactionsErr;\n\n    /**\n     * We filter out transactions that have already been tracked for two reasons:\n     * 1. FirstPromoter will ignore sales that have already been tracked before so we don't\n     *    need to send unnecessary API requests.\n     * 2. There are some old sales that we tracked which did not have a transaction ID associated with them.\n     *    We don't want to track these sales again because it will cause duplicate sales in FirstPromoter.\n     *    These transaction IDs are included in the database to prevent them from being tracked again.\n     */\n    const previousTrackedSales = await FirstPromoterTrackedSaleModel.find({ app });\n    const untrackedTransactions = partnersTransactions.filter(\n        (tx) => !previousTrackedSales.some((something) => something.transactionId === tx.id)\n    );\n\n    const sales: TrackSaleReqBody[] = untrackedTransactions.map((tx) => ({\n        uid: tx.myshopifyDomain,\n        event_id: tx.id,\n        amount: tx.grossAmountCents,\n    }));\n\n    for (const sale of sales) {\n        await firstpromoter.trackSale(sale);\n\n        const trackedSaleToSave: FirstPromoterTrackedSale = {\n            app,\n            transactionId: sale.event_id,\n        };\n        /**\n         * Even if the sale was already tracked in FirstPromoter, we can upsert\n         * and perform a no-op on the document. This is useful for cases where we\n         * there are sales tracked in FirstPromoter which aren't in our Mongo.\n         * If we were to not do this, we'd end up continuously re-sending the\n         * same already tracked sales to FirstPromoter on every run of this function.\n         *\n         * See Linear issue BEAM-3079 for more details.\n         */\n        await FirstPromoterTrackedSaleModel.updateOne(\n            { transactionId: trackedSaleToSave.transactionId },\n            { $set: trackedSaleToSave },\n            { upsert: true }\n        );\n    }\n}",
                "filename": "web/server/src/modules/firstpromoter/firstpromoter.ts",
                "start_index": 360,
                "end_index": 3107,
                "start_line": 6,
                "end_line": 68,
                "max_line": 68,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "@modelOptions({ schemaOptions: { versionKey: false, _id: false } })\nclass ShopifyRecurringChargeConfig {\n    /**\n     * Set this to 0 if there should be no automatic monthly\n     * recurring charge.\n     */\n    @Min(0)\n    @prop({ required: true })\n    monthlyAmount!: number;\n\n    @IsString()\n    @IsNotEmpty()\n    @prop({ required: true })\n    terms!: string;\n\n    @ArrayUnique()\n    @IsEnum(AfterSellPaidFeature, { each: true })\n    @prop({ required: true, type: String, enum: AfterSellPaidFeature })\n    paysForFeatures!: AfterSellPaidFeature[];\n\n    @Min(0)\n    @Max(1000) // max from Shopify API\n    @prop({ required: true })\n    freeTrialDaysFromDateFeaturesFirstEnabled!: number;\n}\n\n@modelOptions({ schemaOptions: { versionKey: false, _id: false } })\nexport class ShopifyChargeConfig<ChargeName extends string = string> {\n    @IsString()\n    @IsNotEmpty()\n    @prop({ required: true, type: () => String })\n    chargeName!: ChargeName;\n\n    @IsObject()\n    @ValidateNested()\n    @Type(() => ShopifyRecurringChargeConfig)\n    @prop({ required: true, type: () => ShopifyRecurringChargeConfig })\n    recurringChargeConfigOnChargeAccept!: ShopifyRecurringChargeConfig;\n\n    /**\n     * Set this to 0 if there should be no usage charge.\n     */\n    @Min(0)\n    @prop({ required: true })\n    maxMonthlyUsageAmount!: number;\n}\n\nexport class AfterSellPlan<PlanId extends string = string, ChargeName extends string = string> {\n    @IsString()\n    @IsNotEmpty()\n    @prop({ required: true, unique: true, type: () => String })\n    id!: PlanId;\n\n    @IsObject()\n    @ValidateNested()\n    @Type(() => ShopifyChargeConfig)\n    @prop({ required: true, type: () => ShopifyChargeConfig })\n    shopifyCharge!: ShopifyChargeConfig<ChargeName>;\n\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => UsageCharge)\n    @prop({ required: true, type: () => UsageCharge })\n    monthlyUsageCharges!: UsageCharge[];\n\n    @IsEnum(PlanManagementPageVersion)\n    @prop({ required: true, enum: PlanManagementPageVersion, type: String })\n    planManagementPageVersion!: PlanManagementPageVersion;\n\n    @IsOptional()\n    @IsBoolean()\n    @prop({ required: false })\n    isDeprecated_forceUsersToAcceptNewPlanOnNextLogin?: boolean;\n\n    @IsOptional()\n    @IsBoolean()\n    @prop({ required: false })\n    requiresPromoCode?: boolean;\n}\n\n// This is a workaround to get the name of the collection to be 'appendonlyaftersellplans'\n// instead of 'aftersellplans'\n@modelOptions({ schemaOptions: { versionKey: false } })\nclass AppendOnlyAfterSellPlan extends AfterSellPlan {}\n\nexport const AppendOnlyAfterSellPlanModel = getModelForClass(AppendOnlyAfterSellPlan);",
                "filename": "web/server/src/modules/billing/append-only-aftersell-plans.model.ts",
                "start_index": 2718,
                "end_index": 5357,
                "start_line": 37,
                "end_line": 158,
                "max_line": 158,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "nsaction = Node & Transaction & {\n  __typename?: 'LegacyTransaction';\n  /** The net amount that is added to or deducted from your payout. */\n  amount: Money;\n  /** The date and time when the transaction was recorded. */\n  createdAt: Scalars['DateTime'];\n  /** The transaction ID. */\n  id: Scalars['ID'];\n  /** The shop associated with the transaction. */\n  shop?: Maybe<Shop>;\n};\n\n/**\n * A merchant account. This might be a shop owner, a staff member, or a user that isn't associated with a shop.\n * A single merchant account can be associated with many shops.\n */\nexport type MerchantUser = Actor & Node & {\n  __typename?: 'MerchantUser';\n  /** A URL referencing the avatar associated with the actor. */\n  avatarUrl?: Maybe<Scalars['Url']>;\n  /** A globally unique identifier for the actor. Example value: `gid://partners/Shop/1234`. */\n  id: Scalars['ID'];\n  /** The user's full name. */\n  name: Scalars['String'];\n  /** The user's time zone. */\n  timezone: Scalars['String'];\n};\n\n/** A message exchanged within a conversation. */\nexport type Message = Node & {\n  __typename?: 'Message';\n  /** The message body. */\n  body?: Maybe<Scalars['String']>;\n  /** A collection of URLs pointing to files attached to the message. */\n  fileUrls: Array<Scalars['Url']>;\n  /** A globally unique identifier. */\n  id: Scalars['ID'];\n  /** The date and time the message was sent. */\n  sentAt: Scalars['DateTime'];\n  /** The organization or user that sent the message. */\n  sentBy: MessageSender;\n  /** The platform that was used to send the message. */\n  sentVia: MessageSentVia;\n};\n\n/** The connection type for Message. */\nexport type MessageConnection = {\n  __typename?: 'MessageConnection';\n  /** A list of edges. */\n  edges: Array<MessageEdge>;\n  /** Information about pagination in a connection. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type MessageEdge = {\n  __typename?: 'MessageEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node: Message;\n};\n\n/** A union of all of the types that can send messages within a conversation. */\nexport type MessageSender = MerchantUser | Organization | Shop | ShopifyEmployee | TeamMember;\n\n/** The platform that was used to send the message. */\nexport enum MessageSentVia {\n  /** The message was sent through the Partner Dashboard. */\n  Dashboard = 'DASHBOARD',\n  /** The message was sent through an email. */\n  Email = 'EMAIL'\n}\n\n/** A monetary value with currency. */\nexport type Money = {\n  __typename?: 'Money';\n  /** The decimal money amount. */\n  amount: Scalars['Decimal'];\n  /** The currency. */\n  currencyCode: Currency;\n};\n\n/** A monetary value with currency. */\nexport type MoneyInput = {\n  /** The amount of money. */\n  amount?: InputMaybe<Scalars['Decimal']>;\n  /** Currency of the money. */\n  currencyCode?: InputMaybe<Currency>;\n};\n\n/** The schema's ent",
                "filename": "web/server/src/modules/api-shopify-partners/graphql/generated/index.ts",
                "start_index": 29834,
                "end_index": 32728,
                "start_line": 956,
                "end_line": 1250,
                "max_line": 1838,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export * from './slack';",
                "filename": "web/server/src/modules/slack/index.ts",
                "start_index": 0,
                "end_index": 24,
                "start_line": 1,
                "end_line": 1,
                "max_line": 1,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "@modelOptions({ schemaOptions: { _id: false } })\nexport class CheckoutTriggers {\n    @prop({ required: true })\n    showToAllCustomersTrigger!: Trigger;\n\n    @prop({ required: true })\n    productAndOrCollectionTrigger!: ProductAndCollectionTrigger;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nexport class UpsellProductVariant {\n    @prop({ required: true })\n    id!: number;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nclass UpsellProduct {\n    @prop({ required: true })\n    id!: number;\n\n    @prop({ required: true, type: UpsellProductVariant })\n    variants!: UpsellProductVariant[];\n}\n\n//Allow mixed types for product/ProductFull since they don't exist initially, otherwise it will throw an error when null\n@modelOptions({ schemaOptions: { _id: false }, options: { allowMixed: Severity.ALLOW } })\nexport class UpsellOffer {\n    @prop({ required: true })\n    _id!: string;\n\n    @prop({ required: true })\n    priority!: number;\n\n    @prop({ required: false })\n    isUpsellPositionOption?: boolean;\n\n    @prop({ required: false })\n    customTitle?: string;\n\n    @prop({ required: false, default: '' })\n    customDescription!: string;\n\n    @prop({ required: true })\n    hideIfAlreadyInCart!: boolean;\n\n    @prop({ required: true })\n    discount!: Discount;\n\n    @prop({ required: true })\n    triggers!: CheckoutTriggers;\n\n    @prop({ required: true })\n    product!: UpsellProduct;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nexport class UpsellWidgetConfig {\n    @prop({ required: true, enum: CheckoutUpsellType, default: CheckoutUpsellType.SINGLE })\n    upsellType!: CheckoutUpsellType;\n\n    @prop({ required: true })\n    isUpsellPositionOption!: boolean;\n\n    @prop({ required: false, default: '' })\n    offerTitle!: string;\n\n    @prop({ required: true, default: false })\n    isShowBorder!: boolean;\n\n    @prop({ required: true, default: false })\n    useOutlinedButton!: boolean;\n\n    @prop({ required: true, type: UpsellOffer })\n    offers!: UpsellOffer[];\n\n    @prop({ required: true })\n    customizeNumberOfOffers!: boolean;\n\n    @prop({ required: true })\n    numberOfOffersToShow!: number;\n\n    @prop({ required: true })\n    continuouslyLoadOffers!: boolean;\n\n    @prop({ required: true, default: false })\n    isDefaultAccepted!: boolean;\n\n    @prop({ required: false })\n    skipDiscountIfOtherDiscountsAlreadyApplied?: boolean;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nexport class RewardsWidgetConfig {\n    @prop({ required: true, enum: RewardBasis })\n    rewardBasis!: RewardBasis;\n\n    @prop({ required: true })\n    minimumAmount!: number;\n\n    @prop({ required: true })\n    itemCount!: string;\n\n    @prop({ required: true })\n    textBeforeAchieving!: string;\n\n    @prop({ required: true })\n    textAfterAchieving!: string;\n\n    @prop({ required: true })\n    barForegroundColor!: string;\n\n    @prop({ required: true })\n    barBackgroundColor!: string;\n\n    @prop({ required: false })\n    triggers?: CheckoutTriggers;\n}",
                "filename": "web/server/src/modules/checkout-widgets/checkout-widgets.model.ts",
                "start_index": 2760,
                "end_index": 5722,
                "start_line": 73,
                "end_line": 498,
                "max_line": 565,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export type ConversationConnection = {\n  __typename?: 'ConversationConnection';\n  /** A list of edges. */\n  edges: Array<ConversationEdge>;\n  /** Information about pagination in a connection. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type ConversationEdge = {\n  __typename?: 'ConversationEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node: Conversation;\n};\n\n/** The status of the Experts Marketplace conversation. */\nexport enum ConversationStatus {\n  /** The conversation is active. Messages can be sent and received. */\n  Active = 'ACTIVE',\n  /** A participant in the conversation has blocked the other. Messages can't be sent or received. */\n  Blocked = 'BLOCKED'\n}\n\n/** An event that marks that an app credit was applied. */\nexport type CreditApplied = AppCreditEvent & AppEvent & {\n  __typename?: 'CreditApplied';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /**\n   * A [credit](/docs/admin-api/rest/reference/billing/applicationcredit) issued\n   * to a merchant for an app. Merchants are entitled to app credits under certain circumstances,\n   * such as when a paid app subscription is downgraded partway through its billing cycle.\n   */\n  appCredit: AppCredit;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** An event that marks that an app credit failed to apply. */\nexport type CreditFailed = AppCreditEvent & AppEvent & {\n  __typename?: 'CreditFailed';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /**\n   * A [credit](/docs/admin-api/rest/reference/billing/applicationcredit) issued\n   * to a merchant for an app. Merchants are entitled to app credits under certain circumstances,\n   * such as when a paid app subscription is downgraded partway through its billing cycle.\n   */\n  appCredit: AppCredit;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** An event that marks that an app credit is pending. */\nexport type CreditPending = AppCreditEvent & AppEvent & {\n  __typename?: 'CreditPending';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /**\n   * A [credit](/docs/admin-api/rest/reference/billing/applicationcredit) issued\n   * to a merchant for an app. Merchants are entitled to app credits under certain circumstances,\n   * such as when a paid app subscription is downgraded partway through its billing cycle.\n   */\n  appCredit: AppCredit;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** Supported monetary currencies from ISO 4217. */",
                "filename": "web/server/src/modules/api-shopify-partners/graphql/generated/index.ts",
                "start_index": 15919,
                "end_index": 18830,
                "start_line": 411,
                "end_line": 493,
                "max_line": 1838,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { z } from 'zod';\nimport { REGEX_MYSHOPIFY } from '../../utils/regexes';\n\nconst ID = z.number().positive().int();\n\nexport const TransactionCreatePayload = z.object({\n    /**\n     * This field is required by the API.\n     * We always use USD. See docs.\n     */\n    currency: z.literal('USD'),\n    properties: z.object({\n        name: z.string(),\n        amount: z.number().positive(), // includes decimal (799.99)\n        shopifyPartnersTransactionId: z.string().startsWith('gid://partners/'),\n    }),\n\n    /**\n     * The following fields are all optional on the API, however we make the `partner` and\n     * `deal` fields required because we do not want to create transactions without these.\n     * The `customer` field may or may not exist, depending on how the account was managed\n     * in Kiflo.\n     *\n     * If we do not include `partner`, but do include `deal` for which a Partner is the source,\n     * Kiflo will still attribute a Reward to the partner, but we don't want to rely on this since\n     * it seems fragile.\n     */\n    deal: z.object({\n        id: ID,\n    }),\n    partner: z.object({\n        id: ID,\n    }),\n    customer: z\n        .object({\n            id: ID,\n        })\n        .nullable(),\n});\n\nconst Lead = z.object({\n    id: ID,\n    properties: z.object({\n        myshopify_domain: z.string(),\n    }),\n    dealId: ID.nullable(),\n    partnerId: ID.nullable(),\n    customerId: ID.nullable(),\n});\n\n/**\n * This does not have a regex because the properties of a Lead are submitted by Partners.\n * We cannot enforce patterns using Kiflo properties so a Partner could submit a Lead with\n * a .myshopify.com domain that is incorrectly formatted (e.g., \"https://test.myshopify.com/\"\n * or \"test.com\"). We do not want a schema error in these cases.\n */\nexport const NiceLead = z.object({\n    id: ID,\n    properties: z.object({\n        myshopify_domain: z.string().regex(REGEX_MYSHOPIFY),\n    }),\n    dealId: ID,\n    partnerId: ID,\n    customerId: ID.nullable(),\n});\n\nexport const GetLeadsResponseBody = z.object({\n    items: z.array(Lead),\n});\n\nexport const Transaction = z.object({\n    id: ID,\n    properties: z.object({\n        name: z.string(),\n        amount: z.number().positive(), // includes decimal (799.99)\n        shopifyPartnersTransactionId: z.string().startsWith('gid://partners/'),\n    }),\n    dealId: ID.nullable(),\n    partnerId: ID.nullable(),\n    customerId: ID.nullable(),\n});\n\nexport const GetTransactionsResponseBody = z.object({\n    items: z.array(Transaction),\n});\n\nexport type LeadType = z.infer<typeof Lead>;\nexport type NiceLeadType = z.infer<typeof NiceLead>;\nexport type TransactionType = z.infer<typeof Transaction>;\nexport type TransactionCreatePayloadType = z.infer<typeof TransactionCreatePayload>;",
                "filename": "web/server/src/modules/api-kiflo/api-kiflo.dtos.ts",
                "start_index": 0,
                "end_index": 2753,
                "start_line": 1,
                "end_line": 90,
                "max_line": 90,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "ned or exchanged. */\n  Product = 'PRODUCT',\n  /** A shipping cost. */\n  Shipping = 'SHIPPING',\n  /** A tip added by the customer. */\n  Tip = 'TIP',\n  /** An unknown sale line. Represents new types that may be added in future versions. */\n  Unknown = 'UNKNOWN'\n}\n\n/** The tax allocated to a sale from a single tax line. */\nexport type SaleTax = {\n  __typename?: 'SaleTax';\n  /** The portion of the total tax amount on the related sale that comes from the associated tax line. */\n  amount: MoneyBag;\n  /** The unique ID for the sale tax. */\n  id: Scalars['ID'];\n  /** The tax line associated with the sale. */\n  taxLine: TaxLine;\n};\n\n/** A contract between a merchant and a customer to do business. Shopify creates a sales agreement whenever an order is placed, edited, or refunded. A sales agreement has one or more sales records, which provide itemized details about the initial agreement or subsequent changes made to the order. For example, when a customer places an order, Shopify creates the order, generates a sales agreement, and records a sale for each line item purchased in the order. A sale record is specific to a type of order line. Order lines can represent different things such as a purchased product, a tip added by a customer, shipping costs collected at checkout, and more. */\nexport type SalesAgreement = {\n  /** The application that created the agreement. */\n  app?: Maybe<App>;\n  /** The date and time at which the agreement occured. */\n  happenedAt: Scalars['DateTime'];\n  /** The unique ID for the agreement. */\n  id: Scalars['ID'];\n  /** The reason the agremeent was created. */\n  reason: OrderActionType;\n  /** The sales associated with the agreement. */\n  sales: SaleConnection;\n  /** The staff member associated with the agreement. */\n  user?: Maybe<StaffMember>;\n};\n\n\n/** A contract between a merchant and a customer to do business. Shopify creates a sales agreement whenever an order is placed, edited, or refunded. A sales agreement has one or more sales records, which provide itemized details about the initial agreement or subsequent changes made to the order. For example, when a customer places an order, Shopify creates the order, generates a sales agreement, and records a sale for each line item purchased in the order. A sale record is specific to a type of order line. Order lines can represent different things such as a purchased product, a tip added by a customer, shipping costs collected at checkout, and more. */\nexport type SalesAgreementSalesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  reverse?: InputMaybe<Scalars['Boolean']>;\n};\n\n/**\n * An auto-generated type for paginating through multiple SalesAgreements.\n *\n */\nexport type SalesAgreementConnection = {\n  __typename?: 'SalesAgreementConnection';\n  /** A list of edges. */\n  edges: Array<SalesAgreementEdge>;\n  /** A list of the nodes contained in SalesAgreementEdge.",
                "filename": "web/server/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1414566,
                "end_index": 1417561,
                "start_line": 35486,
                "end_line": 35541,
                "max_line": 44790,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "ategory {\n  /** The merchant was referred using an affiliate link. */\n  AffiliateStores = 'AFFILIATE_STORES',\n  /** The merchant was referred from an Intuit Channel Partner. */\n  IntuitPointOfSale = 'INTUIT_POINT_OF_SALE',\n  /** The merchant was referred to Markets Pro by a partner. */\n  MarketsPro = 'MARKETS_PRO',\n  /** The merchant was referred using the Partner POS lead form. */\n  PointOfSale = 'POINT_OF_SALE',\n  /** The merchant was referred using the Shopify Plus lead form. */\n  ShopifyPlus = 'SHOPIFY_PLUS',\n  /** The merchant was referred using a development store transfer. */\n  TransferredStores = 'TRANSFERRED_STORES'\n}\n\n/** A transaction corresponding to a shop referral. */\nexport type ReferralTransaction = Node & Transaction & {\n  __typename?: 'ReferralTransaction';\n  /** The net amount that is added to your payout. */\n  amount: Money;\n  /** The referral type. */\n  category: ReferralCategory;\n  /** The date and time when the transaction was recorded. */\n  createdAt: Scalars['DateTime'];\n  /** The transaction ID. */\n  id: Scalars['ID'];\n  /** The referred shop. */\n  shop: Shop;\n};\n\n/** An event that marks that an app was deactivated. */\nexport type RelationshipDeactivated = AppEvent & {\n  __typename?: 'RelationshipDeactivated';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** An event that marks that an app was installed. */\nexport type RelationshipInstalled = AppEvent & {\n  __typename?: 'RelationshipInstalled';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** An event that marks that an app was reactivated. */\nexport type RelationshipReactivated = AppEvent & {\n  __typename?: 'RelationshipReactivated';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** An event that marks that an app was uninstalled. */\nexport type RelationshipUninstalled = AppEvent & {\n  __typename?: 'RelationshipUninstalled';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /** More details from the merchant about why they uninstalled the app. */\n  description?: Maybe<Scalars['String']>;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A comma separated list of reasons why the merchant uninstalled the app. */\n  reason?: Maybe<Scalars['String']>;\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** A service in the Experts Marketplace. */\nexport type Service =",
                "filename": "web/server/src/modules/api-shopify-partners/graphql/generated/index.ts",
                "start_index": 41404,
                "end_index": 44367,
                "start_line": 1280,
                "end_line": 1367,
                "max_line": 1838,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { KifloApi } from '../api-kiflo';\nimport { NiceLeadType, TransactionCreatePayloadType, TransactionType } from '../api-kiflo/api-kiflo.dtos';\nimport { AppTransaction, ShopifyPartnersApi } from '../api-shopify-partners';\nimport { KIFLO_TRANSACTIONS_LOCK, LocksService } from '../locks';\nimport { XLog } from '../xlog/xlog';\n\nexport async function syncKifloTransactionsFromShopifyPartners({\n    kiflo,\n    partners,\n}: {\n    kiflo: KifloApi;\n    partners: ShopifyPartnersApi;\n}) {\n    // This code needs a lock to prevent duplicate tracking of transactions. If we did not\n    // have this lock, then the following could happen which would be bad:\n    //  - Caller A reads the list of already tracked transactions\n    //  - Caller B reads the list of already tracked transactions\n    //  - Caller A tracks new transactions that aren't in the list\n    //  - Caller B still sees only the old list of transactions and would\n    //     track the same list of transactions that Caller A already tracked\n    const result = await LocksService.withLock(KIFLO_TRANSACTIONS_LOCK, async () => {\n        const [kifloLeads, kifloLeadsErr] = await kiflo.getAllLeads();\n        if (kifloLeadsErr) throw kifloLeadsErr;\n\n        const { processable: kifloLeadsProcessable, unprocessable: kifloLeadsUnprocessable } =\n            KifloApi.segmentLeads(kifloLeads);\n        XLog.INFO_200({ kifloLeadsUnprocessable }, { logLocation: 'Kiflo::SyncTransactions::UnprocessableLeads' });\n        const myshopifyDomains = kifloLeadsProcessable.map((lead) => lead.properties.myshopify_domain);\n\n        const [partnersTxs, partnersTxsErr] = await partners.getAllTransactions({ myshopifyDomains });\n        if (partnersTxsErr) throw partnersTxsErr;\n\n        const [kifloTxs, kifloTxsErr] = await kiflo.getAllTransactions();\n        if (kifloTxsErr) throw kifloTxsErr;\n\n        const txsToAdd = partnersTxs\n            .filter((partnersTx) => !isAlreadyTrackedInKiflo({ partnersTx, kifloTxs }))\n            .map((partnersTx) => toKifloTxCreatePayload({ partnersTx, kifloLeadsProcessable }));\n\n        for (const txToAdd of txsToAdd) {\n            const [, newTxErr] = await kiflo.createTransaction(txToAdd);\n            if (newTxErr) throw newTxErr;\n        }\n    });\n    return result;\n}\n\nfunction isAlreadyTrackedInKiflo({\n    partnersTx,\n    kifloTxs,\n}: {\n    partnersTx: AppTransaction;\n    kifloTxs: TransactionType[];\n}): boolean {\n    return kifloTxs.some((kifloTx) => partnersTx.id === kifloTx.properties.shopifyPartnersTransactionId);\n}",
                "filename": "web/server/src/modules/kiflo/kiflo.ts",
                "start_index": 0,
                "end_index": 2519,
                "start_line": 1,
                "end_line": 89,
                "max_line": 89,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "{\n  __typename?: 'Service';\n  /** A unique, human-readable ID for the service. */\n  handle: Scalars['String'];\n  /** The merchant-facing name of the service. */\n  name: Scalars['String'];\n};\n\n/** A transaction corresponding to a paid invoice for a service. */\nexport type ServiceSale = Node & Transaction & {\n  __typename?: 'ServiceSale';\n  /** The date and time when the transaction was recorded. */\n  createdAt: Scalars['DateTime'];\n  /** The total amount that the merchant paid, excluding taxes. */\n  grossAmount?: Maybe<Money>;\n  /** The transaction ID. */\n  id: Scalars['ID'];\n  /** The net amount that is added to or deducted from your payout. */\n  netAmount: Money;\n  /** The shop associated with the transaction. */\n  shop?: Maybe<Shop>;\n  /** The amount that Shopify retained from the sale. */\n  shopifyFee?: Maybe<Money>;\n};\n\n/** A transaction corresponding to a refund, downgrade, or adjustment of a service sale. */\nexport type ServiceSaleAdjustment = Node & Transaction & {\n  __typename?: 'ServiceSaleAdjustment';\n  /** The date and time when the transaction was recorded. */\n  createdAt: Scalars['DateTime'];\n  /** The total amount that the merchant paid, excluding taxes. */\n  grossAmount?: Maybe<Money>;\n  /** The transaction ID. */\n  id: Scalars['ID'];\n  /** The net amount that is added to or deducted from your payout. */\n  netAmount: Money;\n  /** The shop associated with the transaction. */\n  shop?: Maybe<Shop>;\n  /** The amount that Shopify retained from the adjustment. */\n  shopifyFee?: Maybe<Money>;\n};\n\n/** A Shopify shop. */\nexport type Shop = Actor & Node & {\n  __typename?: 'Shop';\n  /** A URL referencing the avatar associated with the actor. */\n  avatarUrl?: Maybe<Scalars['Url']>;\n  /** A globally unique identifier for the actor. Example value: `gid://partners/Shop/1234`. */\n  id: Scalars['ID'];\n  /** The shop's `.myshopify.com` domain name. */\n  myshopifyDomain: Scalars['Url'];\n  /** The name of the actor. This might be a Partner organization or shop name. */\n  name: Scalars['String'];\n};\n\n/** A Shopify employee. */\nexport type ShopifyEmployee = Actor & Node & {\n  __typename?: 'ShopifyEmployee';\n  /** A URL referencing the avatar associated with the actor. */\n  avatarUrl?: Maybe<Scalars['Url']>;\n  /** A globally unique identifier for the actor. Example value: `gid://partners/Shop/1234`. */\n  id: Scalars['ID'];\n  /** The Shopify employee's full name. */\n  name: Scalars['String'];\n};\n\n/** An event that marks that a subscription is approaching its capped amount. */\nexport type Subscript",
                "filename": "web/server/src/modules/api-shopify-partners/graphql/generated/index.ts",
                "start_index": 44368,
                "end_index": 46901,
                "start_line": 1,
                "end_line": 1554,
                "max_line": 1838,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { AppendOnlyAfterSellPlansService } from '../billing/append-only-aftersell-plans.service';\nimport { MOST_RECENT_POSSIIBLE_RECURRING_CHARGE_VERSION } from '../billing/billing.constants';\nimport { applyTrialUpdates, getRequiredFreeTrialUpdatesAfterPlanAccept } from '../billing/free-trials';\nimport { AccountSettingsRequest, syncShopifyShopSettingsWithRokt } from '../rokt/rokt.api';\nimport type { ShopifyService } from '../shopify/shopify.service';\nimport UserModel from './users.model';",
                "filename": "web/server/src/modules/users/users.service.ts",
                "start_index": 0,
                "end_index": 493,
                "start_line": 1,
                "end_line": 6,
                "max_line": 105,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "async createRecurringCharge(payload: RecurringChargeCreatePayload): Promise<RecurringCharge> {\n        const response = await this.restClient.post({\n            path: 'recurring_application_charges',\n            type: DataType.JSON,\n            data: { recurring_application_charge: payload } as any,\n        });\n        return (response.body as any).recurring_application_charge;\n    }\n\n    async getHasCheckoutExtensibilityAccess(): Promise<boolean> {\n        // @ts-ignore\n        const _fetch = fetch;\n        const result = await _fetch(`https://${this.config.shop}/admin/api/2023-04/graphql.json`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Shopify-Access-Token': this.config.accessToken,\n            },\n            body: JSON.stringify({\n                query: `{\n                checkoutProfiles(first: 0) {\n                  edges {\n                    node {\n                      id\n                    }\n                  }\n                }\n                shop {\n                    plan {\n                      shopifyPlus\n                    }\n                  }\n              }`,\n            }),\n        }).then((res: any) => res.json());\n        const hasCheckoutAccess = result.data?.checkoutProfiles !== undefined;\n        return hasCheckoutAccess;\n    }\n\n    async getCheckoutProfiles(): Promise<CheckoutProfile[]> {\n        // @ts-ignore\n        const _fetch = fetch;\n        const result = await _fetch(`https://${this.config.shop}/admin/api/2023-01/graphql.json`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Shopify-Access-Token': this.config.accessToken,\n            },\n            body: JSON.stringify({\n                query: `{\n                    checkoutProfiles(first: 20) {\n                        edges {\n                            node {\n                                id\n                                name\n                                isPublished\n                            }\n                        }\n                    }\n                }`,\n            }),\n        }).then((res: any) => res.json());\n        // we will assume that the shop has checkout extensibility access\n        const checkoutProfiles = result.data.checkoutProfiles.edges.map((edge: any) => edge.node);\n        return checkoutProfiles;\n    }",
                "filename": "web/server/src/modules/shopify/shopify.service.ts",
                "start_index": 20016,
                "end_index": 22435,
                "start_line": 488,
                "end_line": 1374,
                "max_line": 1375,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "egories. */\n  allProductCategories: Array<ProductCategory>;\n  /**\n   * The token required to query the shop's reports or dashboards.\n   * @deprecated Not supported anymore.\n   */\n  analyticsToken: Scalars['String'];\n  /**\n   * The paginated list of fulfillment orders assigned to the shop locations owned by the app.\n   *\n   * Assigned fulfillment orders are fulfillment orders that are set to be fulfilled from locations\n   * managed by\n   * [fulfillment services](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)\n   * that are registered by the app.\n   * One app (api_client) can host multiple fulfillment services on a shop.\n   * Each fulfillment service manages a dedicated location on a shop.\n   * Assigned fulfillment orders can have associated\n   * [fulfillment requests](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus),\n   * or might currently not be requested to be fulfilled.\n   *\n   * The app must have `read_assigned_fulfillment_orders`\n   * [access scope](https://shopify.dev/docs/api/usage/access-scopes)\n   * to be able to retrieve fulfillment orders assigned to its locations.\n   *\n   * All assigned fulfillment orders (except those with the `CLOSED` status) will be returned by default.\n   * Perform filtering with the `assignmentStatus` argument\n   * to receive only fulfillment orders that have been requested to be fulfilled.\n   *\n   */\n  assignedFulfillmentOrders: FulfillmentOrderConnection;\n  /** The list of sales channels not currently installed on the shop. */\n  availableChannelApps: AppConnection;\n  /** The shop's billing address information. */\n  billingAddress: ShopAddress;\n  /**\n   * Exposes the number of channels.\n   * @deprecated Use `publicationCount` instead.\n   */\n  channelCount: Scalars['Int'];\n  /** List of all channel definitions associated with a shop. */\n  channelDefinitionsForInstalledChannels: Array<AvailableChannelDefinitionsByChannel>;\n  /**\n   * List of the shop's active sales channels.\n   * @deprecated Use `QueryRoot.channels` instead.\n   */\n  channels: ChannelConnection;\n  /** Specifies whether the shop supports checkouts via Checkout API. */\n  checkoutApiSupported: Scalars['Boolean'];\n  /**\n   * Return a collection by its handle.\n   * @deprecated Use `QueryRoot.collectionByHandle` instead.\n   */\n  collectionByHandle?: Maybe<Collection>;\n  /**\n   * List of the shop's collection saved searches.\n   * @deprecated Use `QueryRoot.collectionSavedSearches` instead.\n   */\n  collectionSavedSearches: SavedSearchConnection;\n  /**\n   * List of the shop's collections.\n   * @deprecated Use `QueryRoot.collections` instead.\n   */\n  collections: CollectionConnection;\n  /**\n   * The public-facing contact email address for the shop.\n   * Customers will use this email to communicate with the shop owner.\n   *\n   */\n  contactEmail: Scalars['String'];\n  /** Countries that have b",
                "filename": "web/server/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1499531,
                "end_index": 1502418,
                "start_line": 36409,
                "end_line": 37629,
                "max_line": 44790,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "initial_doc_snippets": [
            {
                "code": "# AfterSell\n\n### All Docs on Notion \ud83d\udc49 [AfterSell Notion Docs](https://www.notion.so/aftersell/AfterSell-Docs-9d43566167b5426d86b5983925872953?pvs=4)",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 148,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/server` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 999,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# [[[ --- CLIENT --- ]]]\nFROM node:18.16.1-alpine AS client\nARG SHOPIFY_API_KEY\nENV SHOPIFY_API_KEY=$SHOPIFY_API_KEY\nARG HOST\nENV HOST=$HOST\nARG NODE_ENV\nENV NODE_ENV=$NODE_ENV\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/client/package.json ./web/client/package.json\nCOPY web/client/yarn.lock ./web/client/yarn.lock\nRUN cd web/client && yarn install --frozen-lockfile --production=false\nCOPY extensions-web-common/package.json ./extensions-web-common/package.json\nCOPY extensions-web-common/yarn.lock ./extensions-web-common/yarn.lock\nRUN cd extensions-web-common && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY extensions/post-purchase ./extensions/post-purchase\nCOPY extensions-web-common/post-purchase ./extensions-web-common/post-purchase\nCOPY extensions-web-common/checkout ./extensions-web-common/checkout\nCOPY extensions-web-common/shared ./extensions-web-common/shared\nCOPY extensions-web-common/ty-page ./extensions-web-common/ty-page\nCOPY web/client ./web/client\nRUN cd web/client && yarn build\n\n# [[[ --- TY PAGE --- ]]]\nFROM node:18.16.1-alpine AS ty-page\nARG HOST\nENV HOST=$HOST\nWORKDIR /usr/src/app\nCOPY web/widgets/package.json ./web/widgets/package.json\nCOPY web/widgets/yarn.lock ./web/widgets/yarn.lock\nRUN cd web/widgets && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY web/widgets ./web/widgets\nRUN cd web/widgets && yarn build\n\n# [[[ --- SERVER --- ]]]\nFROM node:18.16.1-alpine AS server\nWORKDIR /usr/src/app\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=false\nCOPY web/server ./web/server\nCOPY web/common ./web/common\nRUN cd web/server && yarn build\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM node:18.16.1-alpine AS final\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=true\nCOPY --from=server /usr/src/app/web/server/build ./web/server/build\nCOPY --from=ty-page /usr/src/app/web/widgets/dist ./web/server/build/server/dist\nCOPY --from=client /usr/src/app/web/client/dist ./web/server/build/server/dist/client\nCOPY package.json ./package.json\nCMD [\"yarn\", \"start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2514,
                "start_line": 1,
                "end_line": 61,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <!-- Shopify App Bridge [START] -->\n        <meta name=\"shopify-api-key\" content=\"%SHOPIFY_API_KEY%\" />",
                "filename": "web/client/index.html",
                "start_index": 38,
                "end_index": 156,
                "start_line": 4,
                "end_line": 6,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<body class=\"aftersell-preview\">\n        <a href=\"#main-header\" class=\"skip-to-content\"> Skip to content </a>\n\n        <header class=\"banner\" data-header=\"\" role=\"banner\">\n            <div class=\"wrap\">\n                <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n            </div>\n        </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241387,
                "end_index": 241804,
                "start_line": 6077,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Shopify Function development with Rust\n\n## Dependencies\n\n-   [Install Rust](https://www.rust-lang.org/tools/install)\n    -   On Windows, Rust requires the [Microsoft C++ Build Tools](https://docs.microsoft.com/en-us/windows/dev-environment/rust/setup). Be sure to select the _Desktop development with C++_ workload when installing them.\n-   Install [`cargo-wasi`](https://bytecodealliance.github.io/cargo-wasi/)\n    -   `cargo install cargo-wasi`\n-   On Macs with Apple Silicon, you'll also need to install the Binaryen toolchain and set the `WASM_OPT` environment variable. ([related issue](https://github.com/bytecodealliance/cargo-wasi/issues/112))\n    -   `brew install binaryen`\n    -   Add `export WASM_OPT=/opt/homebrew/bin/wasm-opt` to your `.bashrc` or `.zshrc`\n\n## Building the function\n\nYou can build this individual function using `cargo wasi`.\n\n```shell\ncargo wasi build --release\n```\n\nThe Shopify CLI `build` command will also execute this, based on the configuration in `shopify.function.extension.toml`.\n\n## Testing\n\n> Requires Node v16+\n\n1. Create a temporary JSON file (e.g., `a.json`) in the following format:\n\n```json\n{\n    \"data\": {\n        \"foo\": \"bar\"\n    },\n    \"secretKey\": \"abc123\"\n}\n```\n\n2. Run the following command\n\n```\nyarn test:new-hmac < a.json\n```\n\n3. Copy the generated HMAC into the test file",
                "filename": "extensions/upsell-offer-discount-function/README.md",
                "start_index": 0,
                "end_index": 1329,
                "start_line": 1,
                "end_line": 44,
                "max_line": 44,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script defer src=\"./thankyoupage_bundle.js?v2\"></script>\n        <script defer src=\"/apps/aftersell_sdk.bundle.min.js?v2\"></script>\n    </head>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241237,
                "end_index": 241381,
                "start_line": 6073,
                "end_line": 6075,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"step__sections\">\n                                <div class=\"section\">\n                                    <div class=\"section__header os-header\">\n                                        <svg\n                                            width=\"56\"\n                                            height=\"56\"\n                                            viewBox=\"0 0 56 56\"\n                                            fill=\"none\"\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                            <circle cx=\"28\" cy=\"28\" r=\"26\" stroke=\"#E5E5E5\" stroke-width=\"2.29412\" />\n                                            <path\n                                                fill-rule=\"evenodd\"\n                                                clip-rule=\"evenodd\"\n                                                d=\"M22.4811 37.3603L16.3636 31.3947C15.5663 30.6172 15.5663 29.3605 16.3636 28.583C17.1609 27.8055 18.4497 27.8055 19.247 28.583L23.8066 33.0293L36.6493 18.7538C37.3834 17.9186 38.6701 17.8231 39.5225 18.537C40.379 19.2529 40.4789 20.5056 39.7448 21.3388L25.4706 37.2469C25.1015 37.6685 24.5672 37.9191 24.0003 37.9409C23.3825 37.9429 22.8625 37.7341 22.4811 37.3603Z\"\n                                                fill=\"#008060\"\n                                                stroke=\"#E5E5E5\"\n                                                stroke-width=\"0.764706\"\n                                            />\n                                        </svg>\n                                        <div class=\"os-header__heading\">\n                                            <span class=\"os-order-number\"> Order #1001 </span>\n                                            <h2 class=\"os-header__title\" id=\"main-header\" tabindex=\"-1\">\n                                                Thank you {{Customer Name}}!\n                                            </h2>\n                                        </div>\n                                    </div>\n                                </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245858,
                "end_index": 247957,
                "start_line": 6161,
                "end_line": 6451,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<aside class=\"sidebar\" role=\"complementary\">\n                    <div class=\"sidebar__header\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323196,
                "end_index": 323511,
                "start_line": 6285,
                "end_line": 6493,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<tbody class=\"total-line-table__tbody\">\n                                            <tr class=\"total-line total-line--subtotal\">\n                                                <th class=\"total-line__name\" scope=\"row\">Subtotal</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-subtotal-price-target=\"4299\"\n                                                    >\n                                                        $42.99\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--shipping\">\n                                                <th class=\"total-line__name\" scope=\"row\">\n                                                    <span> Shipping </span>\n                                                </th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-shipping-target=\"0\"\n                                                    >\n                                                        Free\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--taxes\" data-checkout-taxes=\"\">\n                                                <th class=\"total-line__name\" scope=\"row\">Taxes</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-taxes-target=\"774\"\n                                                        >$7.74</span\n                                                    >\n                                                </td>\n                                            </tr>\n                                        </tbody>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 333285,
                "end_index": 335837,
                "start_line": 6396,
                "end_line": 6433,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"section__content\">\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Contact information</h3>\n\n                                                            <p class=\"as-dummy-line\"></p>\n\n                                                            <h3 class=\"heading-3\">Shipping address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n\n                                                            <h3 class=\"heading-3\">Shipping method</h3>\n                                                            <p class=\"as-dummy-line as-w40\"></p>\n                                                        </div>\n                                                    </div>\n\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Payment method</h3>\n                                                            <ul class=\"payment-method-list\">\n                                                                <li class=\"payment-method-list__item\">\n                                                                    <p class=\"as-dummy-line as-w80\"></p>\n                                                                </li>\n                                                            </ul>\n\n                                                            <h3 class=\"heading-3\">Billing address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n                                                        </div>\n                                                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318877,
                "end_index": 321837,
                "start_line": 6191,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"main\">\n                    <header class=\"main__header\" role=\"banner\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245397,
                "end_index": 245703,
                "start_line": 6153,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script>\n            !(function (f, b, e, v, n, t, s) {\n                if (f.fbq) return;\n                n = f.fbq = function () {\n                    n.callMethod ? n.callMethod.apply(n, arguments) : n.queue.push(arguments);\n                };\n                if (!f._fbq) f._fbq = n;\n                n.push = n;\n                n.loaded = !0;\n                n.version = '2.0';\n                n.queue = [];\n                t = b.createElement(e);\n                t.async = !0;\n                t.src = v;\n                s = b.getElementsByTagName(e)[0];\n                s.parentNode.insertBefore(t, s);\n            })(window, document, 'script', 'https://connect.facebook.net/en_US/fbevents.js');\n            fbq('init', '895262111044943');\n            fbq('track', 'PageView');\n        </script>\n        <!-- End Facebook Pixel Code -->\n        <!-- Reddit Pixel -->\n        <script>\n            !(function (w, d) {\n                if (!w.rdt) {\n                    var p = (w.rdt = function () {\n                        p.sendEvent ? p.sendEvent.apply(p, arguments) : p.callQueue.push(arguments);\n                    });\n                    p.callQueue = [];\n                    var t = d.createElement('script');\n                    (t.src = 'https://www.redditstatic.com/ads/pixel.js'), (t.async = !0);\n                    var s = d.getElementsByTagName('script')[0];\n                    s.parentNode.insertBefore(t, s);\n                }\n            })(window, document);\n            rdt('init', 't2_dp3wj8bg');\n            rdt('track', 'PageVisit');\n        </script>\n        <!-- End Reddit Pixel -->\n\n        <!-- Dev HMR [START] -->\n        <script type=\"module\">\n            if (!import.meta.env || !import.meta.env.PROD) {\n                // For embedded development, the iframe loads an HTML file from the server. Normally for\n                // development, the HTML file is served by the dev server, which injects the HMR script.\n                // This script adds the HMR script to the iframe to allow HMR in embedded development.\n                const script = document.createElement('script');\n                script.setAttribute('type', 'module');\n                script.setAttribute('src', './src/dev-hmr.ts');\n                document.getElementsByTagName('head')[0].append(script);\n            }\n        </script>\n        <!-- Dev HMR [END] -->\n\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com/\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" crossorigin=\"anonymous\" />\n        <link\n            href=\"https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap\"\n        />\n    </head>",
                "filename": "web/client/index.html",
                "start_index": 6232,
                "end_index": 8924,
                "start_line": 7,
                "end_line": 178,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<html\n    lang=\"en\"\n    dir=\"ltr\"\n    class=\"js desktop page--no-banner page--logo-main page--show page--show card-fields cors svg opacity placeholder no-touchevents displaytable display-table generatedcontent cssanimations flexbox no-flexboxtweener anyflexbox shopemoji floating-labels\"\n>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 0,
                "end_index": 289,
                "start_line": 1,
                "end_line": 6518,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<tbody data-order-summary-section=\"line-items\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 325247,
                "end_index": 325294,
                "start_line": 6314,
                "end_line": 6314,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box\">\n                                            <div class=\"content-box__row content-box__row--no-border\">\n                                                <h2>Customer information</h2>\n                                            </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318496,
                "end_index": 318753,
                "start_line": 6192,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <meta charset=\"utf-8\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n        <meta\n            id=\"thankyoupage_viewport_meta\"\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, user-scalable=0\"\n        />\n        <meta name=\"referrer\" content=\"origin\" />\n\n        <title>Thank you! - Checkout</title>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 294,
                "end_index": 717,
                "start_line": 6,
                "end_line": 16,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"order-summary__sections\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323769,
                "end_index": 323806,
                "start_line": 6295,
                "end_line": 6295,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "intial_documentation_sources": {},
        "external_documentation_snippets": {},
        "mmr_code_snippets_initial": [
            {
                "code": "{\n    const user: {\n        currency: string;\n        plan_name: string;\n        is_active: boolean;\n        first_installed: Date;\n        onBoardingCardClosed: boolean;\n    } | null = await UserModel.findOne(\n        { myshopify_domain: myshopifyDomain },\n        { currency: 1, plan_name: 1, is_active: 1, first_installed: 1, onBoardingCardClosed: 1 }\n    );\n    if (!user) {\n        throw new Error(`User does not exist. Attempted to sync properties for user: \"${myshopifyDomain}\"`);\n    }\n\n    const funnels: {\n        status: boolean;\n        triggers: Funnel['triggers'];\n        hasUpsellDefault: boolean;\n        hasUpsellAdditional: boolean;\n        hasDownsell: boolean;\n        hasTyPageWidgets: boolean;\n    }[] = await FunnelsModel.aggregate([\n        { $match: { shop: myshopifyDomain } },\n        {\n            $lookup: {\n                from: 'widgets',\n                as: 'hasActiveTyPageWidgets',\n                let: { thankyou_page: '$thankyou_page' },\n                pipeline: [\n                    { $match: { $expr: { $eq: ['$$thankyou_page', '$templateId'] } } },\n                    { $match: { active: true } },\n                    { $project: { _id: 1 } },\n                    { $limit: 1 },\n                ],\n            },\n        },\n        {\n            $project: {\n                status: 1,\n                triggers: 1,\n                hasUpsellDefault: { $gt: ['$upsell_default', null] },\n                hasUpsellAdditional: { $gt: ['$upsell_additional', null] },\n                hasDownsell: { $gt: ['$downsell', null] },\n                hasTyPageWidgets: {\n                    $cond: { if: { $gt: [{ $size: '$hasActiveTyPageWidgets' }, 0] }, then: true, else: false },\n                },\n            },\n        },\n    ]);\n    const publishedFunnels = funnels.filter((funnel) => funnel.status);\n\n    interface Analytics {\n        revenue: number;\n        impressions: number;\n        acceptedOffers: number;\n    }\n    const analyticsLast30DaysArr = await AnalyticsModel.aggregate([\n        { $match: { shop: myshopifyDomain, date: { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) } } },\n        {\n            $group: {\n                _id: { $cond: { if: { $gt: ['$type', null] }, then: 'oneClick', else: 'tyPage' } },\n                revenue: { $sum: '$data.revenue' },\n                impressions: { $sum: '$data.impressions' },\n                acceptedOffers: { $sum: '$data.numberOfOrders' },\n            },\n        },\n    ]);\n    const oneClickAnalytics: Analytics = analyticsLast30DaysArr.find((analytics) => analytics._id === 'oneClick') ?? {\n        revenue: 0,\n        impressions: 0,\n        acceptedOffers: 0,\n    };\n    const tyPageAnalytics: Analytics = analyticsLast30DaysArr.find((analytics) => analytics._id === 'tyPage') ?? {\n        revenue: 0,\n        impressions: 0,\n        acceptedOffers: 0,\n    };",
                "filename": "web/server/src/modules/mixpanel/mixpanel-calculate.ts",
                "start_index": 528,
                "end_index": 3395,
                "start_line": 1,
                "end_line": 200,
                "max_line": 205,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export * from './slack';",
                "filename": "web/server/src/modules/slack/index.ts",
                "start_index": 0,
                "end_index": 24,
                "start_line": 1,
                "end_line": 1,
                "max_line": 1,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "export type ConversationConnection = {\n  __typename?: 'ConversationConnection';\n  /** A list of edges. */\n  edges: Array<ConversationEdge>;\n  /** Information about pagination in a connection. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type ConversationEdge = {\n  __typename?: 'ConversationEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node: Conversation;\n};\n\n/** The status of the Experts Marketplace conversation. */\nexport enum ConversationStatus {\n  /** The conversation is active. Messages can be sent and received. */\n  Active = 'ACTIVE',\n  /** A participant in the conversation has blocked the other. Messages can't be sent or received. */\n  Blocked = 'BLOCKED'\n}\n\n/** An event that marks that an app credit was applied. */\nexport type CreditApplied = AppCreditEvent & AppEvent & {\n  __typename?: 'CreditApplied';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /**\n   * A [credit](/docs/admin-api/rest/reference/billing/applicationcredit) issued\n   * to a merchant for an app. Merchants are entitled to app credits under certain circumstances,\n   * such as when a paid app subscription is downgraded partway through its billing cycle.\n   */\n  appCredit: AppCredit;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** An event that marks that an app credit failed to apply. */\nexport type CreditFailed = AppCreditEvent & AppEvent & {\n  __typename?: 'CreditFailed';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /**\n   * A [credit](/docs/admin-api/rest/reference/billing/applicationcredit) issued\n   * to a merchant for an app. Merchants are entitled to app credits under certain circumstances,\n   * such as when a paid app subscription is downgraded partway through its billing cycle.\n   */\n  appCredit: AppCredit;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** An event that marks that an app credit is pending. */\nexport type CreditPending = AppCreditEvent & AppEvent & {\n  __typename?: 'CreditPending';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /**\n   * A [credit](/docs/admin-api/rest/reference/billing/applicationcredit) issued\n   * to a merchant for an app. Merchants are entitled to app credits under certain circumstances,\n   * such as when a paid app subscription is downgraded partway through its billing cycle.\n   */\n  appCredit: AppCredit;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** Supported monetary currencies from ISO 4217. */",
                "filename": "web/server/src/modules/api-shopify-partners/graphql/generated/index.ts",
                "start_index": 15919,
                "end_index": 18830,
                "start_line": 411,
                "end_line": 493,
                "max_line": 1838,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "async createRecurringCharge(payload: RecurringChargeCreatePayload): Promise<RecurringCharge> {\n        const response = await this.restClient.post({\n            path: 'recurring_application_charges',\n            type: DataType.JSON,\n            data: { recurring_application_charge: payload } as any,\n        });\n        return (response.body as any).recurring_application_charge;\n    }\n\n    async getHasCheckoutExtensibilityAccess(): Promise<boolean> {\n        // @ts-ignore\n        const _fetch = fetch;\n        const result = await _fetch(`https://${this.config.shop}/admin/api/2023-04/graphql.json`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Shopify-Access-Token': this.config.accessToken,\n            },\n            body: JSON.stringify({\n                query: `{\n                checkoutProfiles(first: 0) {\n                  edges {\n                    node {\n                      id\n                    }\n                  }\n                }\n                shop {\n                    plan {\n                      shopifyPlus\n                    }\n                  }\n              }`,\n            }),\n        }).then((res: any) => res.json());\n        const hasCheckoutAccess = result.data?.checkoutProfiles !== undefined;\n        return hasCheckoutAccess;\n    }\n\n    async getCheckoutProfiles(): Promise<CheckoutProfile[]> {\n        // @ts-ignore\n        const _fetch = fetch;\n        const result = await _fetch(`https://${this.config.shop}/admin/api/2023-01/graphql.json`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Shopify-Access-Token': this.config.accessToken,\n            },\n            body: JSON.stringify({\n                query: `{\n                    checkoutProfiles(first: 20) {\n                        edges {\n                            node {\n                                id\n                                name\n                                isPublished\n                            }\n                        }\n                    }\n                }`,\n            }),\n        }).then((res: any) => res.json());\n        // we will assume that the shop has checkout extensibility access\n        const checkoutProfiles = result.data.checkoutProfiles.edges.map((edge: any) => edge.node);\n        return checkoutProfiles;\n    }",
                "filename": "web/server/src/modules/shopify/shopify.service.ts",
                "start_index": 20016,
                "end_index": 22435,
                "start_line": 488,
                "end_line": 1374,
                "max_line": 1375,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { getModelForClass, modelOptions, prop } from '@typegoose/typegoose';\nimport { REGEX_MYSHOPIFY } from '../../utils/regexes';\n\n/**\n * Responsible for the relevant fields pertaining to how the rest of the AfterSell ecosystem interacts with Rokt.\n */\n@modelOptions({ schemaOptions: { _id: false } })\nexport class AfterSellSettings {\n    @prop({ required: false, default: true })\n    overrideStorewidePopup!: boolean;\n}\n\n/**\n * This links a shop using AfterSell with a Rokt account. All other data is stored\n * on Rokt servers and can be retrieved using the `appInstallationId`.\n */\nclass RoktAccount {\n    @prop({ required: true, unique: true, match: REGEX_MYSHOPIFY })\n    shop!: string;\n\n    @prop({ required: true })\n    appInstallationId!: string;\n\n    @prop({ required: false })\n    accountId!: string;\n\n    @prop({ required: true })\n    createdAt!: string;\n\n    @prop({ required: false, default: null })\n    updatedAt!: string;\n\n    @prop({ required: false, default: null })\n    deletedAt!: string;\n\n    @prop({ required: true, default: {} })\n    afterSellSettings!: AfterSellSettings;\n}\n\nexport const RoktAccountModel = getModelForClass(RoktAccount);",
                "filename": "web/server/src/modules/rokt/rokt-accounts.model.ts",
                "start_index": 0,
                "end_index": 1161,
                "start_line": 1,
                "end_line": 40,
                "max_line": 40,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { FirstPromoterApi, TrackSaleReqBody } from '../api-firstpromoter/api-firstpromoter';\nimport { ShopifyPartnersApi } from '../api-shopify-partners';\nimport { FirstPromoterPartnersBindingModel } from './firstpromoter-partners-bindings.model';\nimport { FirstPromoterTrackedSale, FirstPromoterTrackedSaleModel } from './firstpromoter-tracked-sales.model';",
                "filename": "web/server/src/modules/firstpromoter/firstpromoter.ts",
                "start_index": 0,
                "end_index": 358,
                "start_line": 1,
                "end_line": 4,
                "max_line": 68,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "ith Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href=\"/apps/online-store#what-integration-method-should-i-use\" target=\"_blank\">Learn more</a>.</p></div>\n   *\n   *\n   * A list of script tags.\n   *\n   */\n  scriptTags: ScriptTagConnection;\n  /** The Customer Segment. */\n  segment?: Maybe<Segment>;\n  /** The number of segments for a shop. */\n  segmentCount: Scalars['Int'];\n  /** A list of filter suggestions associated with a segment. A segment is a group of members (commonly customers) that meet specific criteria. */\n  segmentFilterSuggestions: SegmentFilterConnection;\n  /** A list of filters. */\n  segmentFilters: SegmentFilterConnection;\n  /** A list of a shop's segment migrations. */\n  segmentMigrations: SegmentMigrationConnection;\n  /** The list of suggested values that's associated with an individual segment.A segment is a group of members, such as customers, that meet specific criteria. */\n  segmentValueSuggestions: SegmentValueConnection;\n  /** A list of a shop's segments. */\n  segments: SegmentConnection;\n  /** Returns a Selling Plan Group resource by ID. */\n  sellingPlanGroup?: Maybe<SellingPlanGroup>;\n  /** List Selling Plan Groups. */\n  sellingPlanGroups: SellingPlanGroupConnection;\n  /** The server pixel configured by the app. */\n  serverPixel?: Maybe<ServerPixel>;\n  /**\n   * Returns the Shop resource corresponding to the access token used in the request. The Shop resource contains\n   * business and store management settings for the shop.\n   *\n   */\n  shop: Shop;\n  /** The shop's billing preferences. */\n  shopBillingPreferences: ShopBillingPreferences;\n  /** A list of locales available on a shop. */\n  shopLocales: Array<ShopLocale>;\n  /** The Shopify Function. */\n  shopifyFunction?: Maybe<ShopifyFunction>;\n  /** Returns the Shopify Functions for apps installed on the shop. */\n  shopifyFunctions: ShopifyFunctionConnection;\n  /** Shopify Payments account information, including balances and payouts. */\n  shopifyPaymentsAccount?: Maybe<ShopifyPaymentsAccount>;\n  /** Returns the results of a ShopifyQL query. Refer to the [ShopifyQL documentation](https://shopify.dev/api/shopifyql) for more information. */\n  shopifyqlQuery?: Maybe<ShopifyqlResponse>;\n  /** The StaffMember resource, by ID. */\n  staffMember?: Maybe<StaffMember>;\n  /**\n   * Standard metafield definitions are intended for specific, common use cases. Their namespace and keys reflect these use cases and are reserved.\n   *\n   * Refer to all available [`Standard Metafield Definition Templates`](https://shopify.dev/api/admin-graphql/latest/objects/StandardMetafieldDefinitionTemplate).\n   *\n   */\n  standardMetafieldDefinitionTemplates: StandardMetafieldDefinitionTemplateConnection;\n  /** Returns a SubscriptionBillingAttempt by ID. */\n  subscriptionBillingAttempt?: Maybe<SubscriptionBillingAttempt>;",
                "filename": "web/server/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1301486,
                "end_index": 1304418,
                "start_line": 22508,
                "end_line": 40295,
                "max_line": 44790,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "import { KifloApi } from '../api-kiflo';\nimport { NiceLeadType, TransactionCreatePayloadType, TransactionType } from '../api-kiflo/api-kiflo.dtos';\nimport { AppTransaction, ShopifyPartnersApi } from '../api-shopify-partners';\nimport { KIFLO_TRANSACTIONS_LOCK, LocksService } from '../locks';\nimport { XLog } from '../xlog/xlog';\n\nexport async function syncKifloTransactionsFromShopifyPartners({\n    kiflo,\n    partners,\n}: {\n    kiflo: KifloApi;\n    partners: ShopifyPartnersApi;\n}) {\n    // This code needs a lock to prevent duplicate tracking of transactions. If we did not\n    // have this lock, then the following could happen which would be bad:\n    //  - Caller A reads the list of already tracked transactions\n    //  - Caller B reads the list of already tracked transactions\n    //  - Caller A tracks new transactions that aren't in the list\n    //  - Caller B still sees only the old list of transactions and would\n    //     track the same list of transactions that Caller A already tracked\n    const result = await LocksService.withLock(KIFLO_TRANSACTIONS_LOCK, async () => {\n        const [kifloLeads, kifloLeadsErr] = await kiflo.getAllLeads();\n        if (kifloLeadsErr) throw kifloLeadsErr;\n\n        const { processable: kifloLeadsProcessable, unprocessable: kifloLeadsUnprocessable } =\n            KifloApi.segmentLeads(kifloLeads);\n        XLog.INFO_200({ kifloLeadsUnprocessable }, { logLocation: 'Kiflo::SyncTransactions::UnprocessableLeads' });\n        const myshopifyDomains = kifloLeadsProcessable.map((lead) => lead.properties.myshopify_domain);\n\n        const [partnersTxs, partnersTxsErr] = await partners.getAllTransactions({ myshopifyDomains });\n        if (partnersTxsErr) throw partnersTxsErr;\n\n        const [kifloTxs, kifloTxsErr] = await kiflo.getAllTransactions();\n        if (kifloTxsErr) throw kifloTxsErr;\n\n        const txsToAdd = partnersTxs\n            .filter((partnersTx) => !isAlreadyTrackedInKiflo({ partnersTx, kifloTxs }))\n            .map((partnersTx) => toKifloTxCreatePayload({ partnersTx, kifloLeadsProcessable }));\n\n        for (const txToAdd of txsToAdd) {\n            const [, newTxErr] = await kiflo.createTransaction(txToAdd);\n            if (newTxErr) throw newTxErr;\n        }\n    });\n    return result;\n}\n\nfunction isAlreadyTrackedInKiflo({\n    partnersTx,\n    kifloTxs,\n}: {\n    partnersTx: AppTransaction;\n    kifloTxs: TransactionType[];\n}): boolean {\n    return kifloTxs.some((kifloTx) => partnersTx.id === kifloTx.properties.shopifyPartnersTransactionId);\n}",
                "filename": "web/server/src/modules/kiflo/kiflo.ts",
                "start_index": 0,
                "end_index": 2519,
                "start_line": 1,
                "end_line": 89,
                "max_line": 89,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "ategory {\n  /** The merchant was referred using an affiliate link. */\n  AffiliateStores = 'AFFILIATE_STORES',\n  /** The merchant was referred from an Intuit Channel Partner. */\n  IntuitPointOfSale = 'INTUIT_POINT_OF_SALE',\n  /** The merchant was referred to Markets Pro by a partner. */\n  MarketsPro = 'MARKETS_PRO',\n  /** The merchant was referred using the Partner POS lead form. */\n  PointOfSale = 'POINT_OF_SALE',\n  /** The merchant was referred using the Shopify Plus lead form. */\n  ShopifyPlus = 'SHOPIFY_PLUS',\n  /** The merchant was referred using a development store transfer. */\n  TransferredStores = 'TRANSFERRED_STORES'\n}\n\n/** A transaction corresponding to a shop referral. */\nexport type ReferralTransaction = Node & Transaction & {\n  __typename?: 'ReferralTransaction';\n  /** The net amount that is added to your payout. */\n  amount: Money;\n  /** The referral type. */\n  category: ReferralCategory;\n  /** The date and time when the transaction was recorded. */\n  createdAt: Scalars['DateTime'];\n  /** The transaction ID. */\n  id: Scalars['ID'];\n  /** The referred shop. */\n  shop: Shop;\n};\n\n/** An event that marks that an app was deactivated. */\nexport type RelationshipDeactivated = AppEvent & {\n  __typename?: 'RelationshipDeactivated';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** An event that marks that an app was installed. */\nexport type RelationshipInstalled = AppEvent & {\n  __typename?: 'RelationshipInstalled';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** An event that marks that an app was reactivated. */\nexport type RelationshipReactivated = AppEvent & {\n  __typename?: 'RelationshipReactivated';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** An event that marks that an app was uninstalled. */\nexport type RelationshipUninstalled = AppEvent & {\n  __typename?: 'RelationshipUninstalled';\n  /** A Shopify [app](/concepts/apps). */\n  app: App;\n  /** More details from the merchant about why they uninstalled the app. */\n  description?: Maybe<Scalars['String']>;\n  /** The date and time when the event took place. */\n  occurredAt: Scalars['DateTime'];\n  /** A comma separated list of reasons why the merchant uninstalled the app. */\n  reason?: Maybe<Scalars['String']>;\n  /** A Shopify shop. */\n  shop: Shop;\n  /** The type of app event. */\n  type: AppEventTypes;\n};\n\n/** A service in the Experts Marketplace. */\nexport type Service =",
                "filename": "web/server/src/modules/api-shopify-partners/graphql/generated/index.ts",
                "start_index": 41404,
                "end_index": 44367,
                "start_line": 1280,
                "end_line": 1367,
                "max_line": 1838,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "@modelOptions({ schemaOptions: { _id: false } })\nexport class CheckoutTriggers {\n    @prop({ required: true })\n    showToAllCustomersTrigger!: Trigger;\n\n    @prop({ required: true })\n    productAndOrCollectionTrigger!: ProductAndCollectionTrigger;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nexport class UpsellProductVariant {\n    @prop({ required: true })\n    id!: number;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nclass UpsellProduct {\n    @prop({ required: true })\n    id!: number;\n\n    @prop({ required: true, type: UpsellProductVariant })\n    variants!: UpsellProductVariant[];\n}\n\n//Allow mixed types for product/ProductFull since they don't exist initially, otherwise it will throw an error when null\n@modelOptions({ schemaOptions: { _id: false }, options: { allowMixed: Severity.ALLOW } })\nexport class UpsellOffer {\n    @prop({ required: true })\n    _id!: string;\n\n    @prop({ required: true })\n    priority!: number;\n\n    @prop({ required: false })\n    isUpsellPositionOption?: boolean;\n\n    @prop({ required: false })\n    customTitle?: string;\n\n    @prop({ required: false, default: '' })\n    customDescription!: string;\n\n    @prop({ required: true })\n    hideIfAlreadyInCart!: boolean;\n\n    @prop({ required: true })\n    discount!: Discount;\n\n    @prop({ required: true })\n    triggers!: CheckoutTriggers;\n\n    @prop({ required: true })\n    product!: UpsellProduct;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nexport class UpsellWidgetConfig {\n    @prop({ required: true, enum: CheckoutUpsellType, default: CheckoutUpsellType.SINGLE })\n    upsellType!: CheckoutUpsellType;\n\n    @prop({ required: true })\n    isUpsellPositionOption!: boolean;\n\n    @prop({ required: false, default: '' })\n    offerTitle!: string;\n\n    @prop({ required: true, default: false })\n    isShowBorder!: boolean;\n\n    @prop({ required: true, default: false })\n    useOutlinedButton!: boolean;\n\n    @prop({ required: true, type: UpsellOffer })\n    offers!: UpsellOffer[];\n\n    @prop({ required: true })\n    customizeNumberOfOffers!: boolean;\n\n    @prop({ required: true })\n    numberOfOffersToShow!: number;\n\n    @prop({ required: true })\n    continuouslyLoadOffers!: boolean;\n\n    @prop({ required: true, default: false })\n    isDefaultAccepted!: boolean;\n\n    @prop({ required: false })\n    skipDiscountIfOtherDiscountsAlreadyApplied?: boolean;\n}\n\n@modelOptions({ schemaOptions: { _id: false } })\nexport class RewardsWidgetConfig {\n    @prop({ required: true, enum: RewardBasis })\n    rewardBasis!: RewardBasis;\n\n    @prop({ required: true })\n    minimumAmount!: number;\n\n    @prop({ required: true })\n    itemCount!: string;\n\n    @prop({ required: true })\n    textBeforeAchieving!: string;\n\n    @prop({ required: true })\n    textAfterAchieving!: string;\n\n    @prop({ required: true })\n    barForegroundColor!: string;\n\n    @prop({ required: true })\n    barBackgroundColor!: string;\n\n    @prop({ required: false })\n    triggers?: CheckoutTriggers;\n}",
                "filename": "web/server/src/modules/checkout-widgets/checkout-widgets.model.ts",
                "start_index": 2760,
                "end_index": 5722,
                "start_line": 73,
                "end_line": 498,
                "max_line": 565,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "reranked_doc_snippets_initial": [
            {
                "code": "# AfterSell\n\n### All Docs on Notion \ud83d\udc49 [AfterSell Notion Docs](https://www.notion.so/aftersell/AfterSell-Docs-9d43566167b5426d86b5983925872953?pvs=4)",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 148,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/server` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 999,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# [[[ --- CLIENT --- ]]]\nFROM node:18.16.1-alpine AS client\nARG SHOPIFY_API_KEY\nENV SHOPIFY_API_KEY=$SHOPIFY_API_KEY\nARG HOST\nENV HOST=$HOST\nARG NODE_ENV\nENV NODE_ENV=$NODE_ENV\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/client/package.json ./web/client/package.json\nCOPY web/client/yarn.lock ./web/client/yarn.lock\nRUN cd web/client && yarn install --frozen-lockfile --production=false\nCOPY extensions-web-common/package.json ./extensions-web-common/package.json\nCOPY extensions-web-common/yarn.lock ./extensions-web-common/yarn.lock\nRUN cd extensions-web-common && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY extensions/post-purchase ./extensions/post-purchase\nCOPY extensions-web-common/post-purchase ./extensions-web-common/post-purchase\nCOPY extensions-web-common/checkout ./extensions-web-common/checkout\nCOPY extensions-web-common/shared ./extensions-web-common/shared\nCOPY extensions-web-common/ty-page ./extensions-web-common/ty-page\nCOPY web/client ./web/client\nRUN cd web/client && yarn build\n\n# [[[ --- TY PAGE --- ]]]\nFROM node:18.16.1-alpine AS ty-page\nARG HOST\nENV HOST=$HOST\nWORKDIR /usr/src/app\nCOPY web/widgets/package.json ./web/widgets/package.json\nCOPY web/widgets/yarn.lock ./web/widgets/yarn.lock\nRUN cd web/widgets && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY web/widgets ./web/widgets\nRUN cd web/widgets && yarn build\n\n# [[[ --- SERVER --- ]]]\nFROM node:18.16.1-alpine AS server\nWORKDIR /usr/src/app\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=false\nCOPY web/server ./web/server\nCOPY web/common ./web/common\nRUN cd web/server && yarn build\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM node:18.16.1-alpine AS final\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/server/package.json ./web/server/package.json\nCOPY web/server/yarn.lock ./web/server/yarn.lock\nCOPY web/server/patches ./web/server/patches\nRUN cd web/server && yarn install --frozen-lockfile --production=true\nCOPY --from=server /usr/src/app/web/server/build ./web/server/build\nCOPY --from=ty-page /usr/src/app/web/widgets/dist ./web/server/build/server/dist\nCOPY --from=client /usr/src/app/web/client/dist ./web/server/build/server/dist/client\nCOPY package.json ./package.json\nCMD [\"yarn\", \"start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2514,
                "start_line": 1,
                "end_line": 61,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <!-- Shopify App Bridge [START] -->\n        <meta name=\"shopify-api-key\" content=\"%SHOPIFY_API_KEY%\" />",
                "filename": "web/client/index.html",
                "start_index": 38,
                "end_index": 156,
                "start_line": 4,
                "end_line": 6,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<body class=\"aftersell-preview\">\n        <a href=\"#main-header\" class=\"skip-to-content\"> Skip to content </a>\n\n        <header class=\"banner\" data-header=\"\" role=\"banner\">\n            <div class=\"wrap\">\n                <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n            </div>\n        </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241387,
                "end_index": 241804,
                "start_line": 6077,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "# Shopify Function development with Rust\n\n## Dependencies\n\n-   [Install Rust](https://www.rust-lang.org/tools/install)\n    -   On Windows, Rust requires the [Microsoft C++ Build Tools](https://docs.microsoft.com/en-us/windows/dev-environment/rust/setup). Be sure to select the _Desktop development with C++_ workload when installing them.\n-   Install [`cargo-wasi`](https://bytecodealliance.github.io/cargo-wasi/)\n    -   `cargo install cargo-wasi`\n-   On Macs with Apple Silicon, you'll also need to install the Binaryen toolchain and set the `WASM_OPT` environment variable. ([related issue](https://github.com/bytecodealliance/cargo-wasi/issues/112))\n    -   `brew install binaryen`\n    -   Add `export WASM_OPT=/opt/homebrew/bin/wasm-opt` to your `.bashrc` or `.zshrc`\n\n## Building the function\n\nYou can build this individual function using `cargo wasi`.\n\n```shell\ncargo wasi build --release\n```\n\nThe Shopify CLI `build` command will also execute this, based on the configuration in `shopify.function.extension.toml`.\n\n## Testing\n\n> Requires Node v16+\n\n1. Create a temporary JSON file (e.g., `a.json`) in the following format:\n\n```json\n{\n    \"data\": {\n        \"foo\": \"bar\"\n    },\n    \"secretKey\": \"abc123\"\n}\n```\n\n2. Run the following command\n\n```\nyarn test:new-hmac < a.json\n```\n\n3. Copy the generated HMAC into the test file",
                "filename": "extensions/upsell-offer-discount-function/README.md",
                "start_index": 0,
                "end_index": 1329,
                "start_line": 1,
                "end_line": 44,
                "max_line": 44,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script defer src=\"./thankyoupage_bundle.js?v2\"></script>\n        <script defer src=\"/apps/aftersell_sdk.bundle.min.js?v2\"></script>\n    </head>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241237,
                "end_index": 241381,
                "start_line": 6073,
                "end_line": 6075,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"step__sections\">\n                                <div class=\"section\">\n                                    <div class=\"section__header os-header\">\n                                        <svg\n                                            width=\"56\"\n                                            height=\"56\"\n                                            viewBox=\"0 0 56 56\"\n                                            fill=\"none\"\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                            <circle cx=\"28\" cy=\"28\" r=\"26\" stroke=\"#E5E5E5\" stroke-width=\"2.29412\" />\n                                            <path\n                                                fill-rule=\"evenodd\"\n                                                clip-rule=\"evenodd\"\n                                                d=\"M22.4811 37.3603L16.3636 31.3947C15.5663 30.6172 15.5663 29.3605 16.3636 28.583C17.1609 27.8055 18.4497 27.8055 19.247 28.583L23.8066 33.0293L36.6493 18.7538C37.3834 17.9186 38.6701 17.8231 39.5225 18.537C40.379 19.2529 40.4789 20.5056 39.7448 21.3388L25.4706 37.2469C25.1015 37.6685 24.5672 37.9191 24.0003 37.9409C23.3825 37.9429 22.8625 37.7341 22.4811 37.3603Z\"\n                                                fill=\"#008060\"\n                                                stroke=\"#E5E5E5\"\n                                                stroke-width=\"0.764706\"\n                                            />\n                                        </svg>\n                                        <div class=\"os-header__heading\">\n                                            <span class=\"os-order-number\"> Order #1001 </span>\n                                            <h2 class=\"os-header__title\" id=\"main-header\" tabindex=\"-1\">\n                                                Thank you {{Customer Name}}!\n                                            </h2>\n                                        </div>\n                                    </div>\n                                </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245858,
                "end_index": 247957,
                "start_line": 6161,
                "end_line": 6451,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<aside class=\"sidebar\" role=\"complementary\">\n                    <div class=\"sidebar__header\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323196,
                "end_index": 323511,
                "start_line": 6285,
                "end_line": 6493,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<tbody class=\"total-line-table__tbody\">\n                                            <tr class=\"total-line total-line--subtotal\">\n                                                <th class=\"total-line__name\" scope=\"row\">Subtotal</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-subtotal-price-target=\"4299\"\n                                                    >\n                                                        $42.99\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--shipping\">\n                                                <th class=\"total-line__name\" scope=\"row\">\n                                                    <span> Shipping </span>\n                                                </th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-shipping-target=\"0\"\n                                                    >\n                                                        Free\n                                                    </span>\n                                                </td>\n                                            </tr>\n\n                                            <tr class=\"total-line total-line--taxes\" data-checkout-taxes=\"\">\n                                                <th class=\"total-line__name\" scope=\"row\">Taxes</th>\n                                                <td class=\"total-line__price\">\n                                                    <span\n                                                        class=\"order-summary__emphasis\"\n                                                        data-checkout-total-taxes-target=\"774\"\n                                                        >$7.74</span\n                                                    >\n                                                </td>\n                                            </tr>\n                                        </tbody>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 333285,
                "end_index": 335837,
                "start_line": 6396,
                "end_line": 6433,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"section__content\">\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Contact information</h3>\n\n                                                            <p class=\"as-dummy-line\"></p>\n\n                                                            <h3 class=\"heading-3\">Shipping address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n\n                                                            <h3 class=\"heading-3\">Shipping method</h3>\n                                                            <p class=\"as-dummy-line as-w40\"></p>\n                                                        </div>\n                                                    </div>\n\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Payment method</h3>\n                                                            <ul class=\"payment-method-list\">\n                                                                <li class=\"payment-method-list__item\">\n                                                                    <p class=\"as-dummy-line as-w80\"></p>\n                                                                </li>\n                                                            </ul>\n\n                                                            <h3 class=\"heading-3\">Billing address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n                                                        </div>\n                                                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318877,
                "end_index": 321837,
                "start_line": 6191,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"main\">\n                    <header class=\"main__header\" role=\"banner\">\n                        <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                        <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n                    </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245397,
                "end_index": 245703,
                "start_line": 6153,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<script>\n            !(function (f, b, e, v, n, t, s) {\n                if (f.fbq) return;\n                n = f.fbq = function () {\n                    n.callMethod ? n.callMethod.apply(n, arguments) : n.queue.push(arguments);\n                };\n                if (!f._fbq) f._fbq = n;\n                n.push = n;\n                n.loaded = !0;\n                n.version = '2.0';\n                n.queue = [];\n                t = b.createElement(e);\n                t.async = !0;\n                t.src = v;\n                s = b.getElementsByTagName(e)[0];\n                s.parentNode.insertBefore(t, s);\n            })(window, document, 'script', 'https://connect.facebook.net/en_US/fbevents.js');\n            fbq('init', '895262111044943');\n            fbq('track', 'PageView');\n        </script>\n        <!-- End Facebook Pixel Code -->\n        <!-- Reddit Pixel -->\n        <script>\n            !(function (w, d) {\n                if (!w.rdt) {\n                    var p = (w.rdt = function () {\n                        p.sendEvent ? p.sendEvent.apply(p, arguments) : p.callQueue.push(arguments);\n                    });\n                    p.callQueue = [];\n                    var t = d.createElement('script');\n                    (t.src = 'https://www.redditstatic.com/ads/pixel.js'), (t.async = !0);\n                    var s = d.getElementsByTagName('script')[0];\n                    s.parentNode.insertBefore(t, s);\n                }\n            })(window, document);\n            rdt('init', 't2_dp3wj8bg');\n            rdt('track', 'PageVisit');\n        </script>\n        <!-- End Reddit Pixel -->\n\n        <!-- Dev HMR [START] -->\n        <script type=\"module\">\n            if (!import.meta.env || !import.meta.env.PROD) {\n                // For embedded development, the iframe loads an HTML file from the server. Normally for\n                // development, the HTML file is served by the dev server, which injects the HMR script.\n                // This script adds the HMR script to the iframe to allow HMR in embedded development.\n                const script = document.createElement('script');\n                script.setAttribute('type', 'module');\n                script.setAttribute('src', './src/dev-hmr.ts');\n                document.getElementsByTagName('head')[0].append(script);\n            }\n        </script>\n        <!-- Dev HMR [END] -->\n\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com/\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" crossorigin=\"anonymous\" />\n        <link\n            href=\"https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap\"\n        />\n    </head>",
                "filename": "web/client/index.html",
                "start_index": 6232,
                "end_index": 8924,
                "start_line": 7,
                "end_line": 178,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<html\n    lang=\"en\"\n    dir=\"ltr\"\n    class=\"js desktop page--no-banner page--logo-main page--show page--show card-fields cors svg opacity placeholder no-touchevents displaytable display-table generatedcontent cssanimations flexbox no-flexboxtweener anyflexbox shopemoji floating-labels\"\n>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 0,
                "end_index": 289,
                "start_line": 1,
                "end_line": 6518,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<tbody data-order-summary-section=\"line-items\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 325247,
                "end_index": 325294,
                "start_line": 6314,
                "end_line": 6314,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"content-box\">\n                                            <div class=\"content-box__row content-box__row--no-border\">\n                                                <h2>Customer information</h2>\n                                            </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318496,
                "end_index": 318753,
                "start_line": 6192,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<head>\n        <meta charset=\"utf-8\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n        <meta\n            id=\"thankyoupage_viewport_meta\"\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, user-scalable=0\"\n        />\n        <meta name=\"referrer\" content=\"origin\" />\n\n        <title>Thank you! - Checkout</title>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 294,
                "end_index": 717,
                "start_line": 6,
                "end_line": 16,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            },
            {
                "code": "<div class=\"order-summary__sections\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323769,
                "end_index": 323806,
                "start_line": 6295,
                "end_line": 6295,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
            }
        ],
        "solution_task": {
            "structured_resp": "Understand:\n- The feature request involves creating a new model called `SlackConnection`.\n- Integration with Retool for the `SlackConnection` model is required.\n- Existing Slack merchants need to be migrated to the new `SlackConnection` model.\n- Configuration with Zapier for the `SlackConnection` model is necessary.\n- Define the update frequency for the Directly Responsible Individual (DRI) for the `SlackConnection` model.\n- A communication plan for updates to the `SlackConnection` model must be established.\n\nPlan:\n- Define the `SlackConnection` model schema.\n- Implement the Retool integration by creating API endpoints or using existing ones.\n- Write a migration script to transfer existing Slack merchant data to the new model.\n- Set up Zapier triggers and actions for the `SlackConnection` model.\n- Implement a mechanism to track and update the DRI for the `SlackConnection` model.\n- Develop a communication strategy for notifying stakeholders about updates to the `SlackConnection` model.\n\nIdentify Tools:\n- Mongoose or Typegoose for defining the `SlackConnection` model schema.\n- Retool for creating internal tools and dashboards.\n- Zapier for automation and integration with other services.\n- Node.js and TypeScript for server-side scripting.\n- MongoDB for data storage and migration.\n\nImplement:\n- Define the `SlackConnection` model schema:\n```typescript\nimport { getModelForClass, prop } from '@typegoose/typegoose';\n\nclass SlackConnection {\n    @prop({ required: true })\n    shop!: string; // Assuming 'shop' is a unique identifier for merchants\n\n    @prop({ required: true })\n    slackWorkspaceId!: string;\n\n    @prop({ required: true })\n    slackChannelId!: string;\n\n    @prop({ required: true })\n    slackBotToken!: string;\n\n    @prop({ required: false, default: null })\n    dri?: string; // Directly Responsible Individual\n\n    @prop({ required: false, default: null })\n    lastDriUpdate?: Date;\n}\n\nexport const SlackConnectionModel = getModelForClass(SlackConnection);\n```\n\n- Implement Retool integration:\n  - Create API endpoints for CRUD operations on the `SlackConnection` model.\n  - Use Retool to connect to these endpoints and manage `SlackConnection` data.\n\n- Migrate existing Slack merchants:\n```typescript\n// Pseudocode for migration script\nasync function migrateSlackMerchants() {\n    const existingSlackMerchants = await getExistingSlackMerchants(); // Fetch from current storage\n    for (const merchant of existingSlackMerchants) {\n        const slackConnection = new SlackConnectionModel({\n            shop: merchant.shop,\n            slackWorkspaceId: merchant.slackWorkspaceId,\n            slackChannelId: merchant.slackChannelId,\n            slackBotToken: merchant.slackBotToken,\n        });\n        await slackConnection.save();\n    }\n}\n```\n\n- Configure Zapier:\n  - Create a Zapier app with triggers for `SlackConnection` model events (e.g., creation, update).\n  - Define actions that Zapier can perform on the `SlackConnection` model.\n\n- Define DRI update frequency:\n  - Implement a scheduled job to prompt DRIs to confirm or update their responsibility status.\n\n- Communication plan:\n  - Establish a channel (e.g., Slack, email) for communicating updates.\n  - Send regular updates on `SlackConnection` model changes to stakeholders.\n\nNote: The provided code snippets and documentation do not directly pertain to the feature request, so they are ignored in this implementation plan.",
            "response": "To effectively implement the new `SlackConnection` model and ensure its seamless integration with Retool, migration of existing Slack merchants, and configuration with Zapier, the following steps should be taken:\n\n- Define the schema for the `SlackConnection` model, ensuring it includes all necessary fields to support the integration and functionality.\n- Develop API endpoints or utilize existing ones to facilitate the Retool integration, allowing for efficient communication between the systems.\n- Write a migration script to securely and accurately transfer existing Slack merchant data to the new `SlackConnection` model, minimizing downtime and data loss.\n- Set up and test Zapier triggers and actions specific to the `SlackConnection` model to automate workflows and enhance the model's capabilities."
        },
        "snippet_processor_task": {
            "web/server/src/modules/rokt/rokt-accounts.model.ts": [
                {
                    "chunk": {
                        "score": 7,
                        "takeaways": "Defines the structure of the RoktAccount model and its interactions within the AfterSell ecosystem using Typegoose. Relevant for understanding how models are defined and used in the project.",
                        "snippet": {
                            "code": "import { getModelForClass, modelOptions, prop } from '@typegoose/typegoose';\nimport { REGEX_MYSHOPIFY } from '../../utils/regexes';\n\n/**\n * Responsible for the relevant fields pertaining to how the rest of the AfterSell ecosystem interacts with Rokt.\n */\n@modelOptions({ schemaOptions: { _id: false } })\nexport class AfterSellSettings {\n    @prop({ required: false, default: true })\n    overrideStorewidePopup!: boolean;\n}\n\n/**\n * This links a shop using AfterSell with a Rokt account. All other data is stored\n * on Rokt servers and can be retrieved using the `appInstallationId`.\n */\nclass RoktAccount {\n    @prop({ required: true, unique: true, match: REGEX_MYSHOPIFY })\n    shop!: string;\n\n    @prop({ required: true })\n    appInstallationId!: string;\n\n    @prop({ required: false })\n    accountId!: string;\n\n    @prop({ required: true })\n    createdAt!: string;\n\n    @prop({ required: false, default: null })\n    updatedAt!: string;\n\n    @prop({ required: false, default: null })\n    deletedAt!: string;\n\n    @prop({ required: true, default: {} })\n    afterSellSettings!: AfterSellSettings;\n}\n\nexport const RoktAccountModel = getModelForClass(RoktAccount);",
                            "filename": "web/server/src/modules/rokt/rokt-accounts.model.ts",
                            "start_index": 0,
                            "end_index": 1161,
                            "start_line": 1,
                            "end_line": 40,
                            "max_line": 40,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "The snippet defines the structure of models using Typegoose, which is necessary for creating the new `SlackConnection` model."
                }
            ],
            "web/server/src/modules/slack/index.ts": [
                {
                    "chunk": {
                        "score": 5,
                        "takeaways": "The snippet exports functionality related to Slack from the 'slack' module in the project, potentially relevant for implementing the 'SlackConnection' model and integration with Retool, migration, and configuration for Zapier.",
                        "snippet": {
                            "code": "export * from './slack';",
                            "filename": "web/server/src/modules/slack/index.ts",
                            "start_index": 0,
                            "end_index": 24,
                            "start_line": 1,
                            "end_line": 1,
                            "max_line": 1,
                            "git_instance": "github",
                            "repo_name": "testbed/aftersell",
                            "sha": "2bef1cab3382ad4ba63493ce24d3793c96b2e103"
                        },
                        "section": "code_snippets"
                    },
                    "reason_for_reviewing": "This snippet exports functionality related to Slack, which is directly relevant to implementing the `SlackConnection` model and its integrations."
                }
            ]
        },
        "bouncer_response": {
            "score": 7,
            "criteria": "The RESPONSE must provide actionable, relevant guidance to more parts of the PROMPT's described issue to score higher.",
            "supporting_evidence": "The RESPONSE provides a structured approach to implementing the `SlackConnection` model, including defining the schema, developing API endpoints, writing a migration script, and setting up Zapier triggers. It also references code snippets that could be useful for creating the model and integrating with Slack. However, the RESPONSE does not address the 'DRI to update on X cadence' and 'Communicate this' tasks from the PROMPT, which are part of the feature request. Additionally, the RESPONSE does not mention the use of Retool to add to the model, which was a specific task in the PROMPT. While the RESPONSE is actionable and relevant to the majority of the tasks, it is incomplete as it does not cover all aspects of the feature request.",
            "clarification_questions": "NONE"
        },
        "end_time": 1714393108.5983481,
        "result": "To effectively implement the new `SlackConnection` model and ensure its seamless integration with Retool, migration of existing Slack merchants, and configuration with Zapier, the following steps should be taken:\n\n- Define the schema for the `SlackConnection` model, ensuring it includes all necessary fields to support the integration and functionality.\n- Develop API endpoints or utilize existing ones to facilitate the Retool integration, allowing for efficient communication between the systems.\n- Write a migration script to securely and accurately transfer existing Slack merchant data to the new `SlackConnection` model, minimizing downtime and data loss.\n- Set up and test Zapier triggers and actions specific to the `SlackConnection` model to automate workflows and enhance the model's capabilities.\n\n### Code snippets to check\n\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [server](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src) \u2192 [modules](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules) \u2192 [rokt](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/rokt)- [Lines 1 - 40](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/rokt/rokt-accounts.model.ts#L1-L40)\n\n The snippet defines the structure of models using Typegoose, which is necessary for creating the new `SlackConnection` model.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web) \u2192 [server](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server) \u2192 [src](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src) \u2192 [modules](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules) \u2192 [slack](https://github.com/testbed/aftersell/tree/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/slack)- [Lines 1 - 1](https://github.com/testbed/aftersell/blob/2bef1cab3382ad4ba63493ce24d3793c96b2e103/web/server/src/modules/slack/index.ts#L1-L1)\n\n This snippet exports functionality related to Slack, which is directly relevant to implementing the `SlackConnection` model and its integrations."
    }
}