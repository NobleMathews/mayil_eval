{
    "id": "pylint-dev__pylint-7993",
    "repo_name": "testbed/pylint-dev__pylint__2.15",
    "task_id": 3185625678530916162,
    "title": "Using custom braces in message template does not work",
    "body": "### Bug description\n\nHave any list of errors:\r\n\r\nOn pylint 1.7 w/ python3.6 - I am able to use this as my message template\r\n```\r\n$ pylint test.py --msg-template='{{ \"Category\": \"{category}\" }}'\r\nNo config file found, using default configuration\r\n************* Module [redacted].test\r\n{ \"Category\": \"convention\" }\r\n{ \"Category\": \"error\" }\r\n{ \"Category\": \"error\" }\r\n{ \"Category\": \"convention\" }\r\n{ \"Category\": \"convention\" }\r\n{ \"Category\": \"convention\" }\r\n{ \"Category\": \"error\" }\r\n```\r\n\r\nHowever, on Python3.9 with Pylint 2.12.2, I get the following:\r\n```\r\n$ pylint test.py --msg-template='{{ \"Category\": \"{category}\" }}'\r\n[redacted]/site-packages/pylint/reporters/text.py:206: UserWarning: Don't recognize the argument '{ \"Category\"' in the --msg-template. Are you sure it is supported on the current version of pylint?\r\n  warnings.warn(\r\n************* Module [redacted].test\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n```\r\n\r\nIs this intentional or a bug?\n\n### Configuration\n\n_No response_\n\n### Command used\n\n```shell\npylint test.py --msg-template='{{ \"Category\": \"{category}\" }}'\n```\n\n\n### Pylint output\n\n```shell\n[redacted]/site-packages/pylint/reporters/text.py:206: UserWarning: Don't recognize the argument '{ \"Category\"' in the --msg-template. Are you sure it is supported on the current version of pylint?\r\n  warnings.warn(\r\n************* Module [redacted].test\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n\" }\n```\n\n\n### Expected behavior\n\nExpect the dictionary to print out with `\"Category\"` as the key.\n\n### Pylint version\n\n```shell\nAffected Version:\r\npylint 2.12.2\r\nastroid 2.9.2\r\nPython 3.9.9+ (heads/3.9-dirty:a2295a4, Dec 21 2021, 22:32:52) \r\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]\r\n\r\n\r\nPreviously working version:\r\nNo config file found, using default configuration\r\npylint 1.7.4, \r\nastroid 1.6.6\r\nPython 3.6.8 (default, Nov 16 2020, 16:55:22) \r\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]\n```\n\n\n### OS / Environment\n\n_No response_\n\n### Additional dependencies\n\n_No response_\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pylint-dev__pylint__2.15.git",
    "requested_commit": "",
    "mayil_response": "Doesn't seem like we have fully grasped all the specifics of this ticket \ud83d\ude10.                   But we've outlined some ideas that might help you get started:\n\n- The issue is likely related to the handling of the `--msg-template` argument in Pylint.\n- The error message indicates that the argument parser does not recognize the custom braces in the message template.\n- The problem may be due to changes in the message template processing logic between Pylint versions `1.7.4` and `2.12.2`.\n- The relevant code is expected to be around line `206` in `text.py`, but the provided snippets do not include this file or the specific line.\n- The solution would involve modifying the message template processing function to correctly handle custom braces.\n\nSince the exact code from `text.py` is not provided, a general solution would be:\n\n- Locate the function in `text.py` that processes the `--msg-template` argument.\n- Update the function to correctly parse and handle custom braces within the template string.\n- Ensure that the updated logic is compatible with both Python `3.6` and `3.9`.\n- Test the changes with the provided command `pylint test.py --msg-template='{{ \"Category\": \"{category}\" }}'` to ensure the issue is resolved.\n\n### Code snippets to check\n\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.15/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__2.15/tree//pylint/lint)- [Lines 190 - 1141](https://github.com/testbed/pylint-dev__pylint__2.15/blob//pylint/lint/pylinter.py#L190-L1141)\n\n This snippet contains the definitions of message IDs and their descriptions, which may need to be updated or checked to ensure that the custom message template feature is working as expected.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.15/tree//pylint)- [Lines 1 - 107](https://github.com/testbed/pylint-dev__pylint__2.15/blob//pylint/constants.py#L1-L107)\n\n This snippet contains constants and configurations for pylint, including message types and versions. It may be relevant to check if there are any version-specific changes that affect the message template feature.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.15/tree//pylint) \u2192 [message](https://github.com/testbed/pylint-dev__pylint__2.15/tree//pylint/message)- [Lines 1 - 160](https://github.com/testbed/pylint-dev__pylint__2.15/blob//pylint/message/message_id_store.py#L1-L160)\n\n This snippet includes the message ID store and related exceptions, which could be relevant if the issue is related to the handling of custom message IDs or templates.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0005614999999999999,
        "snippet_processor": 0.062290000000000005,
        "issue_star_creation": 0.02021,
        "issue_star_solver": 0.05824,
        "bouncer": 0.02295
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711699866.023011,
        "relevant_snippets": [
            {
                "code": "name: \ud83e\udd14 Support question\ndescription: Questions about pylint that are not covered in the documentation\nlabels: [\"Needs triage :inbox_tray:\", \"Question\", \"Documentation :green_book:\"]\nbody:\n  - type: markdown\n    attributes:\n      value: >\n        **Thank you for wanting to report a problem with pylint documentation!**\n\n\n        Please fill out your suggestions below. If the problem seems straightforward,\n        feel free to go ahead and submit a pull request instead!\n\n\n        \u26a0 Verify first that your issue is not [already reported on GitHub][issue\n        search].\n\n        \ud83d\udcac If you are seeking community support, please consider [starting a discussion\n        on Discord][Discussions].\n\n\n        [issue search]:\n        https://github.com/pylint-dev/pylint/issues?q=is%3Aissue+is%3Aopen+\n\n        [Discussions]: https://discord.com/invite/Egy6P8AMB5\n\n  - type: textarea\n    id: question\n    attributes:\n      label: Question\n    validations:\n      required: true\n  - type: textarea\n    id: documentation\n    attributes:\n      label: Documentation for future user\n      description:\n        Where did you expect this information to be? What do we need to add or what do\n        we need to reorganize?\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: Additional context\n      description: >\n        Add any other context, links, etc. about the question here.\n      placeholder: >-\n        I asked on https://stackoverflow.com/... and the community advised me to do X, Y\n        and Z.",
                "filename": ".github/ISSUE_TEMPLATE/QUESTION.yml",
                "start_index": 0,
                "end_index": 1528,
                "start_line": 1,
                "end_line": 49,
                "max_line": 49,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.15",
                "sha": ""
            },
            {
                "code": "- type: markdown\n    attributes:\n      value: |\n        **Thank you for wanting to report a bug in pylint!**\n\n        \u26a0 Please make sure that this [issue wasn't already requested][issue search], or already implemented in the main branch.\n\n\n        [issue search]: https://github.com/pylint-dev/pylint/issues?q=is%3Aissue+is%3Aopen+\n\n  - type: textarea\n    id: what-happened\n    attributes:\n      label: Bug description\n      description:\n        What is the bug about? Please provide the code that is causing the issue, and\n        configurations used if required\n      placeholder: |\n        # Please disable message unrelated to the bug\n        # pylint: disable=missing-docstring,\n        <a> = b + 1\n    validations:\n      required: true\n  - type: textarea\n    id: configuration\n    attributes:\n      label: Configuration\n      description:\n        Please provide the part of the configuration that is causing the bug if required\n        (Leave this part blank if the configuration is not relevant)\n      placeholder: |\n        # Leave this blank if the configuration is not relevant!\n\n        [MAIN]\n        load-plugins=\n            pylint.extensions.code_style\n\n        [MESSAGE CONTROL]\n        enable=\n            useless-suppression\n\n        # ...\n      render: ini\n  - type: textarea\n    id: cmd-used\n    attributes:\n      label: Command used\n      description: What was the command used to invoke pylint?\n      placeholder: |\n        pylint a.py\n      render: shell\n    validations:\n      required: true\n  - type: textarea\n    id: current-behavior\n    attributes:\n      label: Pylint output\n      description: What is the current pylint output?\n      placeholder: |\n        ************* Module a\n        a.py:3:1: E0001: invalid syntax (<unknown>, line 1) (syntax-error)\n      render: shell\n    validations:\n      required: true\n  - type: textarea\n    id: future-behavior\n    attributes:\n      label: Expected behavior\n      description:\n        What would you expect instead? For example expected output or behavior\n    validations:\n      required: true\n  - type: textarea\n    id: python-interpreter\n    attributes:\n      label: Pylint version\n      description: >-\n        Please copy and paste the result of `pylint --version` or specify the range of\n        version affected.\n      placeholder: |\n        pylint 2.9.6\n        astroid 2.6.5\n        Python 3.8.10 (default, Jun  2 2021, 10:49:15) [GCC 9.4.0]\n      render: shell\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: OS / Environment\n      description: >-\n        Provide all relevant information below, e.g. OS version, terminal etc.\n      placeholder: Fedora 33, Cygwin, etc.\n  -",
                "filename": ".github/ISSUE_TEMPLATE/BUG-REPORT.yml",
                "start_index": 101,
                "end_index": 2795,
                "start_line": 5,
                "end_line": 97,
                "max_line": 105,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.15",
                "sha": ""
            },
            {
                "code": "name: \u2728 Feature request\ndescription: Suggest an idea for pylint\nlabels: [\"Needs triage :inbox_tray:\"]\nbody:\n  - type: markdown\n    attributes:\n      value: |\n        **Thank you for wanting to make a suggestion for pylint!**\n\n        \u26a0 Please make sure that [this feature wasn't already requested][issue search] or already implemented in the main branch.\n\n\n        [issue search]: https://github.com/pylint-dev/pylint/issues?q=is%3Aissue+is%3Aopen+\n\n  - type: textarea\n    id: current-problem\n    attributes:\n      label: Current problem\n      description:\n        What are you trying to do, that you are unable to achieve with pylint as it\n        currently stands?\n      placeholder: >-\n        I'm trying to do X and I'm missing feature Y for this to be easily achievable.\n    validations:\n      required: true\n  - type: textarea\n    id: proposed-solution\n    attributes:\n      label: Desired solution\n      description: A clear and concise description of what you want to happen.\n      placeholder: >-\n        When I do X, I want to achieve Y in a situation when Z.\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: Additional context\n      description: >\n        Add any other context, links, etc. about the feature here. Describe how the\n        feature would be used, why it is needed and what it would solve.\n\n        **HINT:** You can paste https://gist.github.com links for larger files.\n      placeholder: >-\n        I asked on https://stackoverflow.com/... and the community advised me to do X, Y\n        and Z.",
                "filename": ".github/ISSUE_TEMPLATE/FEATURE-REQUEST.yml",
                "start_index": 0,
                "end_index": 1559,
                "start_line": 1,
                "end_line": 45,
                "max_line": 45,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.15",
                "sha": ""
            },
            {
                "code": "\"R1716\": (\n            \"Simplify chained comparison between the operands\",\n            \"chained-comparison\",\n            \"This message is emitted when pylint encounters boolean operation like \"\n            '\"a < b and b < c\", suggesting instead to refactor it to \"a < b < c\"',\n        ),\n        \"R1717\": (\n            \"Consider using a dictionary comprehension\",\n            \"consider-using-dict-comprehension\",\n            \"Emitted when we detect the creation of a dictionary \"\n            \"using the dict() callable and a transient list. \"\n            \"Although there is nothing syntactically wrong with this code, \"\n            \"it is hard to read and can be simplified to a dict comprehension. \"\n            \"Also it is faster since you don't need to create another \"\n            \"transient list\",\n        ),\n        \"R1718\": (\n            \"Consider using a set comprehension\",\n            \"consider-using-set-comprehension\",\n            \"Although there is nothing syntactically wrong with this code, \"\n            \"it is hard to read and can be simplified to a set comprehension. \"\n            \"Also it is faster since you don't need to create another \"\n            \"transient list\",\n        ),\n        \"R1719\": (\n            \"The if expression can be replaced with %s\",\n            \"simplifiable-if-expression\",\n            \"Used when an if expression can be replaced with 'bool(test)' \"\n            \"or simply 'test' if the boolean cast is implicit.\",\n        ),\n        \"R1720\": (\n            'Unnecessary \"%s\" after \"raise\", %s',\n            \"no-else-raise\",\n            \"Used in order to highlight an unnecessary block of \"\n            \"code following an if containing a raise statement. \"\n            \"As such, it will warn when it encounters an else \"\n            \"following a chain of ifs, all of them containing a \"\n            \"raise statement.\",\n        ),\n        \"R1721\": (\n            \"Unnecessary use of a comprehension, use %s instead.\",\n            \"unnecessary-comprehension\",\n            \"Instead of using an identity comprehension, \"\n            \"consider using the list, dict or set constructor. \"\n            \"It is faster and simpler.\",\n        ),\n        \"R1722\": (\n            \"Consider using 'sys.exit' instead\",\n            \"consider-using-sys-exit\",\n            \"Contrary to 'exit()' or 'quit()', 'sys.exit' does not rely on the \"\n            \"site module being available (as the 'sys' module is always available).\",\n        ),\n        \"R1723\": (\n            'Unnecessary \"%s\" after \"break\", %s',\n            \"no-else-break\",\n            \"Used in order to highlight an unnecessary block of \"\n            \"code following an if containing a break statement. \"\n            \"As such, it will warn when it encounters an else \"\n            \"following a chain of ifs, all of them containing a \"\n            \"break statement.\",\n        ),",
                "filename": "pylint/checkers/refactoring/refactoring_checker.py",
                "start_index": 13759,
                "end_index": 16623,
                "start_line": 355,
                "end_line": 2175,
                "max_line": 2368,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.15",
                "sha": ""
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nfrom typing import NoReturn\n\nfrom pylint.exceptions import (\n    DeletedMessageError,\n    InvalidMessageError,\n    MessageBecameExtensionError,\n    UnknownMessageError,\n)\nfrom pylint.message._deleted_message_ids import (\n    is_deleted_msgid,\n    is_deleted_symbol,\n    is_moved_msgid,\n    is_moved_symbol,\n)",
                "filename": "pylint/message/message_id_store.py",
                "start_index": 0,
                "end_index": 576,
                "start_line": 1,
                "end_line": 160,
                "max_line": 163,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.15",
                "sha": ""
            },
            {
                "code": "name: \ud83d\udc1b Bug report\ndescription: Report a bug in pylint\nlabels: [\"Needs triage :inbox_tray:\"]\nbo",
                "filename": ".github/ISSUE_TEMPLATE/BUG-REPORT.yml",
                "start_index": 0,
                "end_index": 95,
                "start_line": 1,
                "end_line": 20,
                "max_line": 105,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.15",
                "sha": ""
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nimport os\nimport platform\nimport sys\n\nimport astroid\nimport platformdirs\n\nfrom pylint.__pkginfo__ import __version__\nfrom pylint.typing import MessageTypesFullName\n\nPY38_PLUS = sys.version_info[:2] >= (3, 8)\nPY39_PLUS = sys.version_info[:2] >= (3, 9)\nPY310_PLUS = sys.version_info[:2] >= (3, 10)\nPY312_PLUS = sys.version_info[:2] >= (3, 12)\n\nIS_PYPY = platform.python_implementation() == \"PyPy\"\n\nPY_EXTS = (\".py\", \".pyc\", \".pyo\", \".pyw\", \".so\", \".dll\")\n\nMSG_STATE_CONFIDENCE = 2\n_MSG_ORDER = \"EWRCIF\"\nMSG_STATE_SCOPE_CONFIG = 0\nMSG_STATE_SCOPE_MODULE = 1\n\n# The line/node distinction does not apply to fatal errors and reports.\n_SCOPE_EXEMPT = \"FR\"\n\nMSG_TYPES: dict[str, MessageTypesFullName] = {\n    \"I\": \"info\",\n    \"C\": \"convention\",\n    \"R\": \"refactor\",\n    \"W\": \"warning\",\n    \"E\": \"error\",\n    \"F\": \"fatal\",\n}\nMSG_TYPES_LONG: dict[str, str] = {v: k for k, v in MSG_TYPES.items()}\n\nMSG_TYPES_STATUS = {\"I\": 0, \"C\": 16, \"R\": 8, \"W\": 4, \"E\": 2, \"F\": 1}\n\n# You probably don't want to change the MAIN_CHECKER_NAME\n# This would affect rcfile generation and retro-compatibility\n# on all project using [MAIN] in their rcfile.\nMAIN_CHECKER_NAME = \"main\"\n\nDEFAULT_PYLINT_HOME = platformdirs.user_cache_dir(\"pylint\")\n\nDEFAULT_IGNORE_LIST = (\"CVS\",)\n\n\nclass WarningScope:\n    LINE = \"line-based-msg\"\n    NODE = \"node-based-msg\"\n\n\nfull_version = f\"\"\"pylint {__version__}\nastroid {astroid.__version__}\nPython {sys.version}\"\"\"\n\nHUMAN_READABLE_TYPES = {\n    \"file\": \"file\",\n    \"module\": \"module\",\n    \"const\": \"constant\",\n    \"class\": \"class\",\n    \"function\": \"function\",\n    \"method\": \"method\",\n    \"attr\": \"attribute\",\n    \"argument\": \"argument\",\n    \"variable\": \"variable\",\n    \"class_attribute\": \"class attribute\",\n    \"class_const\": \"class constant\",\n    \"inlinevar\": \"inline iteration\",\n    \"typevar\": \"type variable\",\n    \"typealias\": \"type alias\",\n}\n\n# ignore some messages when emitting useless-suppression:\n# - cyclic-import: can show false positives due to incomplete context\n# - deprecated-{module, argument, class, method, decorator}:\n#   can cause false positives for multi-interpreter projects\n#   when linting with an interpreter on a lower python version\nINCOMPATIBLE_WITH_USELESS_SUPPRESSION = frozenset(\n    [\n        \"R0401\",  # cyclic-import\n        \"W0402\",  # deprecated-module\n        \"W1505\",  # deprecated-method\n        \"W1511\",  # deprecated-argument\n        \"W1512\",  # deprecated-class\n        \"W1513\",  # deprecated-decorator\n        \"R0801\",  # duplicate-code\n    ]\n)\n\n\ndef _get_pylint_home() -> str:\n    \"\"\"Return the pylint home.\"\"\"\n    if \"PYLINTHOME\" in os.environ:\n        return os.environ[\"PYLINTHOME\"]\n    return DEFAULT_PYLINT_HOME\n\n\nPYLINT_HOME = _get_pylint_home()",
                "filename": "pylint/constants.py",
                "start_index": 0,
                "end_index": 2966,
                "start_line": 1,
                "end_line": 107,
                "max_line": 251,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.15",
                "sha": ""
            },
            {
                "code": "{\n        **DeprecatedMixin.DEPRECATED_METHOD_MESSAGE,\n        **DeprecatedMixin.DEPRECATED_ARGUMENT_MESSAGE,\n        **DeprecatedMixin.DEPRECATED_CLASS_MESSAGE,\n        **DeprecatedMixin.DEPRECATED_DECORATOR_MESSAGE,\n        \"W1501\": (\n            '\"%s\" is not a valid mode for open.',\n            \"bad-open-mode\",\n            \"Python supports: r, w, a[, x] modes with b, +, \"\n            \"and U (only with r) options. \"\n            \"See https://docs.python.org/3/library/functions.html#open\",\n        ),\n        \"W1502\": (\n            \"Using datetime.time in a boolean context.\",\n            \"boolean-datetime\",\n            \"Using datetime.time in a boolean context can hide \"\n            \"subtle bugs when the time they represent matches \"\n            \"midnight UTC. This behaviour was fixed in Python 3.5. \"\n            \"See https://bugs.python.org/issue13936 for reference.\",\n            {\"maxversion\": (3, 5)},\n        ),\n        \"W1503\": (\n            \"Redundant use of %s with constant value %r\",\n            \"redundant-unittest-assert\",\n            \"The first argument of assertTrue and assertFalse is \"\n            \"a condition. If a constant is passed as parameter, that \"\n            \"condition will be always true. In this case a warning \"\n            \"should be emitted.\",\n        ),\n        \"W1506\": (\n            \"threading.Thread needs the target function\",\n            \"bad-thread-instantiation\",\n            \"The warning is emitted when a threading.Thread class \"\n            \"is instantiated without the target function being passed as a kwarg or as a second argument. \"\n            \"By default, the first parameter is the group param, not the target param.\",\n        ),\n        \"W1507\": (\n            \"Using copy.copy(os.environ). Use os.environ.copy() instead.\",\n            \"shallow-copy-environ\",\n            \"os.environ is not a dict object but proxy object, so \"\n            \"shallow copy has still effects on original object. \"\n            \"See https://bugs.python.org/issue15373 for reference.\",\n        ),\n        \"E1507\": (\n            \"%s does not support %s type argument\",\n            \"invalid-envvar-value\",\n            \"Env manipulation functions support only string type arguments. \"\n            \"See https://docs.python.org/3/library/os.html#os.getenv.\",\n        ),\n        \"E1519\": (\n            \"singledispatch decorator should not be used with methods, \"\n            \"use singledispatchmethod instead.\",\n            \"singledispatch-method\",\n            \"singledispatch should decorate functions and not class/instance methods. \"\n            \"Use singledispatchmethod for those cases.\",\n        ),\n        \"E1520\": (\n            \"singledispatchmethod decorator should not be used with functions, \"\n            \"use singledispatch instead.\",\n            \"singledispatchmethod-function\",\n            \"singledispatchmethod should decorate class/instance methods and not functions. \"\n            \"Use singledispatch for those cases.\",\n        ),",
                "filename": "pylint/checkers/stdlib.py",
                "start_index": 11698,
                "end_index": 14678,
                "start_line": 36,
                "end_line": 483,
                "max_line": 873,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.15",
                "sha": ""
            },
            {
                "code": ",\n    \"https://github.com/pylint-dev/pylint/pull/3578\": [\n        DeletedMessage(\"W0312\", \"mixed-indentation\"),\n    ],\n    \"https://github.com/pylint-dev/pylint/pull/3577\": [\n        DeletedMessage(\n            \"C0326\",\n            \"bad-whitespace\",\n            [\n                (\"C0323\", \"no-space-after-operator\"),\n                (\"C0324\", \"no-space-after-comma\"),\n                (\"C0322\", \"no-space-before-operator\"),\n            ],\n        ),\n    ],\n    \"https://github.com/pylint-dev/pylint/pull/3571\": [\n        DeletedMessage(\"C0330\", \"bad-continuation\")\n    ],\n    \"https://pylint.readthedocs.io/en/latest/whatsnew/1/1.4.html#what-s-new-in-pylint-1-4-3\": [\n        DeletedMessage(\"R0921\", \"abstract-class-not-used\"),\n        DeletedMessage(\"R0922\", \"abstract-class-little-used\"),\n        DeletedMessage(\"W0142\", \"star-args\"),\n    ],\n    \"https://github.com/pylint-dev/pylint/issues/2409\": [\n        DeletedMessage(\"W0232\", \"no-init\"),\n    ],\n    \"https://github.com/pylint-dev/pylint/pull/6421\": [\n        DeletedMessage(\"W0111\", \"assign-to-new-keyword\"),\n    ],\n}",
                "filename": "pylint/message/_deleted_message_ids.py",
                "start_index": 4585,
                "end_index": 5660,
                "start_line": 14,
                "end_line": 131,
                "max_line": 179,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.15",
                "sha": ""
            },
            {
                "code": "\"I0022\": (\n        'Pragma \"%s\" is deprecated, use \"%s\" instead',\n        \"deprecated-pragma\",\n        \"Some inline pylint options have been renamed or reworked, \"\n        \"only the most recent form should be used. \"\n        \"NOTE:skip-all is only available with pylint >= 0.26\",\n        {\n            \"old_names\": [(\"I0014\", \"deprecated-disable-all\")],\n            \"scope\": WarningScope.LINE,\n            \"default_enabled\": False,\n        },\n    ),\n    \"E0001\": (\n        \"%s\",\n        \"syntax-error\",\n        \"Used when a syntax error is raised for a module.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0011\": (\n        \"Unrecognized file option %r\",\n        \"unrecognized-inline-option\",\n        \"Used when an unknown inline option is encountered.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"W0012\": (\n        \"Unknown option value for '%s', expected a valid pylint message and got '%s'\",\n        \"unknown-option-value\",\n        \"Used when an unknown value is encountered for an option.\",\n        {\n            \"scope\": WarningScope.LINE,\n            \"old_names\": [(\"E0012\", \"bad-option-value\")],\n        },\n    ),\n    \"R0022\": (\n        \"Useless option value for '%s', %s\",\n        \"useless-option-value\",\n        \"Used when a value for an option that is now deleted from pylint\"\n        \" is encountered.\",\n        {\n            \"scope\": WarningScope.LINE,\n            \"old_names\": [(\"E0012\", \"bad-option-value\")],\n        },\n    ),\n    \"E0013\": (\n        \"Plugin '%s' is impossible to load, is it installed ? ('%s')\",\n        \"bad-plugin-value\",\n        \"Used when a bad value is used in 'load-plugins'.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0014\": (\n        \"Out-of-place setting encountered in top level configuration-section '%s' : '%s'\",\n        \"bad-configuration-section\",\n        \"Used when we detect a setting in the top level of a toml configuration that\"\n        \" shouldn't be there.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0015\": (\n        \"Unrecognized option found: %s\",\n        \"unrecognized-option\",\n        \"Used when we detect an option that we do not recognize.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n}",
                "filename": "pylint/lint/pylinter.py",
                "start_index": 6020,
                "end_index": 8200,
                "start_line": 190,
                "end_line": 1141,
                "max_line": 1310,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.15",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "pylint/lint/pylinter.py": [
                {
                    "chunk": {
                        "code": "\"I0022\": (\n        'Pragma \"%s\" is deprecated, use \"%s\" instead',\n        \"deprecated-pragma\",\n        \"Some inline pylint options have been renamed or reworked, \"\n        \"only the most recent form should be used. \"\n        \"NOTE:skip-all is only available with pylint >= 0.26\",\n        {\n            \"old_names\": [(\"I0014\", \"deprecated-disable-all\")],\n            \"scope\": WarningScope.LINE,\n            \"default_enabled\": False,\n        },\n    ),\n    \"E0001\": (\n        \"%s\",\n        \"syntax-error\",\n        \"Used when a syntax error is raised for a module.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0011\": (\n        \"Unrecognized file option %r\",\n        \"unrecognized-inline-option\",\n        \"Used when an unknown inline option is encountered.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"W0012\": (\n        \"Unknown option value for '%s', expected a valid pylint message and got '%s'\",\n        \"unknown-option-value\",\n        \"Used when an unknown value is encountered for an option.\",\n        {\n            \"scope\": WarningScope.LINE,\n            \"old_names\": [(\"E0012\", \"bad-option-value\")],\n        },\n    ),\n    \"R0022\": (\n        \"Useless option value for '%s', %s\",\n        \"useless-option-value\",\n        \"Used when a value for an option that is now deleted from pylint\"\n        \" is encountered.\",\n        {\n            \"scope\": WarningScope.LINE,\n            \"old_names\": [(\"E0012\", \"bad-option-value\")],\n        },\n    ),\n    \"E0013\": (\n        \"Plugin '%s' is impossible to load, is it installed ? ('%s')\",\n        \"bad-plugin-value\",\n        \"Used when a bad value is used in 'load-plugins'.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0014\": (\n        \"Out-of-place setting encountered in top level configuration-section '%s' : '%s'\",\n        \"bad-configuration-section\",\n        \"Used when we detect a setting in the top level of a toml configuration that\"\n        \" shouldn't be there.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0015\": (\n        \"Unrecognized option found: %s\",\n        \"unrecognized-option\",\n        \"Used when we detect an option that we do not recognize.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n}",
                        "filename": "pylint/lint/pylinter.py",
                        "start_index": 6020,
                        "end_index": 8200,
                        "start_line": 190,
                        "end_line": 1141,
                        "max_line": 1310,
                        "git_instance": "github",
                        "repo_name": "testbed/pylint-dev__pylint__2.15",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the definitions of message IDs and their descriptions, which may need to be updated or checked to ensure that the custom message template feature is working as expected."
                }
            ],
            "pylint/constants.py": [
                {
                    "chunk": {
                        "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nimport os\nimport platform\nimport sys\n\nimport astroid\nimport platformdirs\n\nfrom pylint.__pkginfo__ import __version__\nfrom pylint.typing import MessageTypesFullName\n\nPY38_PLUS = sys.version_info[:2] >= (3, 8)\nPY39_PLUS = sys.version_info[:2] >= (3, 9)\nPY310_PLUS = sys.version_info[:2] >= (3, 10)\nPY312_PLUS = sys.version_info[:2] >= (3, 12)\n\nIS_PYPY = platform.python_implementation() == \"PyPy\"\n\nPY_EXTS = (\".py\", \".pyc\", \".pyo\", \".pyw\", \".so\", \".dll\")\n\nMSG_STATE_CONFIDENCE = 2\n_MSG_ORDER = \"EWRCIF\"\nMSG_STATE_SCOPE_CONFIG = 0\nMSG_STATE_SCOPE_MODULE = 1\n\n# The line/node distinction does not apply to fatal errors and reports.\n_SCOPE_EXEMPT = \"FR\"\n\nMSG_TYPES: dict[str, MessageTypesFullName] = {\n    \"I\": \"info\",\n    \"C\": \"convention\",\n    \"R\": \"refactor\",\n    \"W\": \"warning\",\n    \"E\": \"error\",\n    \"F\": \"fatal\",\n}\nMSG_TYPES_LONG: dict[str, str] = {v: k for k, v in MSG_TYPES.items()}\n\nMSG_TYPES_STATUS = {\"I\": 0, \"C\": 16, \"R\": 8, \"W\": 4, \"E\": 2, \"F\": 1}\n\n# You probably don't want to change the MAIN_CHECKER_NAME\n# This would affect rcfile generation and retro-compatibility\n# on all project using [MAIN] in their rcfile.\nMAIN_CHECKER_NAME = \"main\"\n\nDEFAULT_PYLINT_HOME = platformdirs.user_cache_dir(\"pylint\")\n\nDEFAULT_IGNORE_LIST = (\"CVS\",)\n\n\nclass WarningScope:\n    LINE = \"line-based-msg\"\n    NODE = \"node-based-msg\"\n\n\nfull_version = f\"\"\"pylint {__version__}\nastroid {astroid.__version__}\nPython {sys.version}\"\"\"\n\nHUMAN_READABLE_TYPES = {\n    \"file\": \"file\",\n    \"module\": \"module\",\n    \"const\": \"constant\",\n    \"class\": \"class\",\n    \"function\": \"function\",\n    \"method\": \"method\",\n    \"attr\": \"attribute\",\n    \"argument\": \"argument\",\n    \"variable\": \"variable\",\n    \"class_attribute\": \"class attribute\",\n    \"class_const\": \"class constant\",\n    \"inlinevar\": \"inline iteration\",\n    \"typevar\": \"type variable\",\n    \"typealias\": \"type alias\",\n}\n\n# ignore some messages when emitting useless-suppression:\n# - cyclic-import: can show false positives due to incomplete context\n# - deprecated-{module, argument, class, method, decorator}:\n#   can cause false positives for multi-interpreter projects\n#   when linting with an interpreter on a lower python version\nINCOMPATIBLE_WITH_USELESS_SUPPRESSION = frozenset(\n    [\n        \"R0401\",  # cyclic-import\n        \"W0402\",  # deprecated-module\n        \"W1505\",  # deprecated-method\n        \"W1511\",  # deprecated-argument\n        \"W1512\",  # deprecated-class\n        \"W1513\",  # deprecated-decorator\n        \"R0801\",  # duplicate-code\n    ]\n)\n\n\ndef _get_pylint_home() -> str:\n    \"\"\"Return the pylint home.\"\"\"\n    if \"PYLINTHOME\" in os.environ:\n        return os.environ[\"PYLINTHOME\"]\n    return DEFAULT_PYLINT_HOME\n\n\nPYLINT_HOME = _get_pylint_home()",
                        "filename": "pylint/constants.py",
                        "start_index": 0,
                        "end_index": 2966,
                        "start_line": 1,
                        "end_line": 107,
                        "max_line": 251,
                        "git_instance": "github",
                        "repo_name": "testbed/pylint-dev__pylint__2.15",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains constants and configurations for pylint, including message types and versions. It may be relevant to check if there are any version-specific changes that affect the message template feature."
                }
            ],
            "pylint/message/message_id_store.py": [
                {
                    "chunk": {
                        "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nfrom typing import NoReturn\n\nfrom pylint.exceptions import (\n    DeletedMessageError,\n    InvalidMessageError,\n    MessageBecameExtensionError,\n    UnknownMessageError,\n)\nfrom pylint.message._deleted_message_ids import (\n    is_deleted_msgid,\n    is_deleted_symbol,\n    is_moved_msgid,\n    is_moved_symbol,\n)",
                        "filename": "pylint/message/message_id_store.py",
                        "start_index": 0,
                        "end_index": 576,
                        "start_line": 1,
                        "end_line": 160,
                        "max_line": 163,
                        "git_instance": "github",
                        "repo_name": "testbed/pylint-dev__pylint__2.15",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet includes the message ID store and related exceptions, which could be relevant if the issue is related to the handling of custom message IDs or templates."
                }
            ]
        },
        "solution_task": "- The issue is likely related to the handling of the `--msg-template` argument in Pylint.\n- The error message indicates that the argument parser does not recognize the custom braces in the message template.\n- The problem may be due to changes in the message template processing logic between Pylint versions `1.7.4` and `2.12.2`.\n- The relevant code is expected to be around line `206` in `text.py`, but the provided snippets do not include this file or the specific line.\n- The solution would involve modifying the message template processing function to correctly handle custom braces.\n\nSince the exact code from `text.py` is not provided, a general solution would be:\n\n- Locate the function in `text.py` that processes the `--msg-template` argument.\n- Update the function to correctly parse and handle custom braces within the template string.\n- Ensure that the updated logic is compatible with both Python `3.6` and `3.9`.\n- Test the changes with the provided command `pylint test.py --msg-template='{{ \"Category\": \"{category}\" }}'` to ensure the issue is resolved.",
        "bouncer_response": {
            "score": 4,
            "criteria": "RESPONSES that offer some actionable advice but are incomplete or partially relevant should score between 4 and 6.",
            "supporting_evidence": "The RESPONSE provides a general direction for troubleshooting the issue with the `--msg-template` argument in Pylint, suggesting that the problem may be due to changes in the message template processing logic between versions. It correctly identifies that the relevant code is likely around line 206 in `text.py` and suggests locating and updating the function that processes the `--msg-template` argument. However, the RESPONSE does not provide specific, actionable steps to resolve the issue, nor does it address the fact that the custom braces worked in a previous version but not in the current one. The RESPONSE also includes links to code snippets, but these are not directly related to the issue at hand and do not provide a clear path to a solution. The RESPONSE is somewhat relevant but lacks the specificity and direct relevance needed to score higher.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711699953.096908,
        "result": "Doesn't seem like we have fully grasped all the specifics of this ticket \ud83d\ude10.                   But we've outlined some ideas that might help you get started:\n\n- The issue is likely related to the handling of the `--msg-template` argument in Pylint.\n- The error message indicates that the argument parser does not recognize the custom braces in the message template.\n- The problem may be due to changes in the message template processing logic between Pylint versions `1.7.4` and `2.12.2`.\n- The relevant code is expected to be around line `206` in `text.py`, but the provided snippets do not include this file or the specific line.\n- The solution would involve modifying the message template processing function to correctly handle custom braces.\n\nSince the exact code from `text.py` is not provided, a general solution would be:\n\n- Locate the function in `text.py` that processes the `--msg-template` argument.\n- Update the function to correctly parse and handle custom braces within the template string.\n- Ensure that the updated logic is compatible with both Python `3.6` and `3.9`.\n- Test the changes with the provided command `pylint test.py --msg-template='{{ \"Category\": \"{category}\" }}'` to ensure the issue is resolved.\n\n### Code snippets to check\n\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.15/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__2.15/tree//pylint/lint)- [Lines 190 - 1141](https://github.com/testbed/pylint-dev__pylint__2.15/blob//pylint/lint/pylinter.py#L190-L1141)\n\n This snippet contains the definitions of message IDs and their descriptions, which may need to be updated or checked to ensure that the custom message template feature is working as expected.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.15/tree//pylint)- [Lines 1 - 107](https://github.com/testbed/pylint-dev__pylint__2.15/blob//pylint/constants.py#L1-L107)\n\n This snippet contains constants and configurations for pylint, including message types and versions. It may be relevant to check if there are any version-specific changes that affect the message template feature.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.15/tree//pylint) \u2192 [message](https://github.com/testbed/pylint-dev__pylint__2.15/tree//pylint/message)- [Lines 1 - 160](https://github.com/testbed/pylint-dev__pylint__2.15/blob//pylint/message/message_id_store.py#L1-L160)\n\n This snippet includes the message ID store and related exceptions, which could be relevant if the issue is related to the handling of custom message IDs or templates."
    }
}