{
    "id": "django__django-12419",
    "repo_name": "testbed/django__django__3.1",
    "task_id": 4773750484614112696,
    "title": "Add secure default SECURE_REFERRER_POLICY / Referrer-policy header",
    "body": "Description\n\t\n#29406 added the ability for the SECURE_REFERRER_POLICY setting to set Referrer-Policy, released in Django 3.0.\nI propose we change the default for this to \"same-origin\" to make Django applications leak less information to third party sites.\nThe main risk of breakage here would be linked websites breaking, if they depend on verification through the Referer header. This is a pretty fragile technique since it can be spoofed.\nDocumentation: \u200bhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\nThe MDN support grid is out of date: \u200bhttps://caniuse.com/#search=Referrer-Policy\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/django__django__3.1.git",
    "requested_commit": "",
    "mayil_response": "To implement the feature request to change the default for the `SECURE_REFERRER_POLICY` setting to \"same-origin\" in Django, follow these steps:\n\n- Update the default value for `SECURE_REFERRER_POLICY` in Django's global settings module (`django/conf/global_settings.py`).\n- Modify the `SecurityMiddleware` class in `django/middleware/security.py` to use the new default value if the setting is not explicitly set in the user's project settings.\n- Update the documentation to reflect the new default value and any potential implications for users.\n- Add or update tests to cover the new default behavior.\n- Update the Django system checks in `django/core/checks/security/base.py` to ensure that the new default value is considered during checks.\n\nHere is a code snippet to update the `SECURE_REFERRER_POLICY` default value:\n\n```python\n# In django/conf/global_settings.py\nSECURE_REFERRER_POLICY = \"same-origin\"\n```\n\nAnd in `django/middleware/security.py`, ensure that the `SecurityMiddleware` class uses the new default:\n\n```python\nclass SecurityMiddleware(MiddlewareMixin):\n    # ...\n    def __init__(self, get_response):\n        # ...\n        self.referrer_policy = getattr(settings, 'SECURE_REFERRER_POLICY', 'same-origin')\n        # ...\n```\n\nFinally, update the documentation and tests accordingly:\n\n- Documentation should be updated to explain the new default value for `SECURE_REFERRER_POLICY` and its implications.\n- Tests should be added or updated in `tests/middleware/test_security.py` (assuming a standard Django test layout) to assert that the `Referrer-Policy` header defaults to \"same-origin\" when not explicitly set.\n\nRemember to follow the Django contribution guidelines for submitting patches or pull requests if you are contributing this change back to the Django project.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__3.1/tree//django) \u2192 [middleware](https://github.com/testbed/django__django__3.1/tree//django/middleware)- [Lines 1 - 66](https://github.com/testbed/django__django__3.1/blob//django/middleware/security.py#L1-L66)\n\n This snippet contains the SecurityMiddleware class where the 'Referrer-Policy' header is set, which is directly related to the issue of setting a secure default SECURE_REFERRER_POLICY.\n-  \u2192 [django](https://github.com/testbed/django__django__3.1/tree//django) \u2192 [core](https://github.com/testbed/django__django__3.1/tree//django/core) \u2192 [checks](https://github.com/testbed/django__django__3.1/tree//django/core/checks) \u2192 [security](https://github.com/testbed/django__django__3.1/tree//django/core/checks/security)- [Lines 1 - 281](https://github.com/testbed/django__django__3.1/blob//django/core/checks/security/base.py#L1-L281)\n\n This snippet contains the list of valid values for the 'Referrer-Policy' header, which is relevant to the issue as it may be necessary to validate or update the list of supported policies. \n\n\n   - [Lines 155 - 283](https://github.com/testbed/django__django__3.1/blob//django/core/checks/security/base.py#L155-L283)\n\n This snippet contains the check_referrer_policy function which is used to validate the SECURE_REFERRER_POLICY setting, and may need to be reviewed or updated in light of changing the default value.\n-  \u2192 [django](https://github.com/testbed/django__django__3.1/tree//django) \u2192 [conf](https://github.com/testbed/django__django__3.1/tree//django/conf)- [Lines 482 - 580](https://github.com/testbed/django__django__3.1/blob//django/conf/global_settings.py#L482-L580)\n\n This snippet from global_settings.py may need to be updated to change the default value of SECURE_REFERRER_POLICY to 'same-origin'.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0009895,
        "snippet_processor": 0.046430000000000006,
        "issue_star_creation": 0.04236,
        "issue_star_solver": 0.05262,
        "bouncer": 0.024470000000000002
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711731397.998647,
        "relevant_snippets": [
            {
                "code": "\"\"\"\nClickjacking Protection Middleware.\n\nThis module provides a middleware that implements protection against a\nmalicious site loading resources from your site in a hidden frame.\n\"\"\"\n\nfrom django.conf import settings\nfrom django.utils.deprecation import MiddlewareMixin\n\n\nclass XFrameOptionsMiddleware(MiddlewareMixin):\n    \"\"\"\n    Set the X-Frame-Options HTTP header in HTTP responses.\n\n    Do not set the header if it's already set or if the response contains\n    a xframe_options_exempt value set to True.\n\n    By default, set the X-Frame-Options header to 'DENY', meaning the response\n    cannot be displayed in a frame, regardless of the site attempting to do so.\n    To enable the response to be loaded on a frame within the same site, set\n    X_FRAME_OPTIONS in your project's Django settings to 'SAMEORIGIN'.\n    \"\"\"\n\n    def process_response(self, request, response):\n        # Don't set it if it's already in the response\n        if response.get(\"X-Frame-Options\") is not None:\n            return response\n\n        # Don't set it if they used @xframe_options_exempt\n        if getattr(response, \"xframe_options_exempt\", False):\n            return response\n\n        response.headers[\"X-Frame-Options\"] = self.get_xframe_options_value(\n            request,\n            response,\n        )\n        return response\n\n    def get_xframe_options_value(self, request, response):\n        \"\"\"\n        Get the value to set for the X_FRAME_OPTIONS header. Use the value from\n        the X_FRAME_OPTIONS setting, or 'DENY' if not set.\n\n        This method can be overridden if needed, allowing it to vary based on\n        the request or response.\n        \"\"\"\n        return getattr(settings, \"X_FRAME_OPTIONS\", \"DENY\").upper()",
                "filename": "django/middleware/clickjacking.py",
                "start_index": 0,
                "end_index": 1723,
                "start_line": 1,
                "end_line": 48,
                "max_line": 48,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "import re\n\nfrom django.conf import settings\nfrom django.http import HttpResponsePermanentRedirect\nfrom django.utils.deprecation import MiddlewareMixin\n\n\nclass SecurityMiddleware(MiddlewareMixin):\n    def __init__(self, get_response):\n        super().__init__(get_response)\n        self.sts_seconds = settings.SECURE_HSTS_SECONDS\n        self.sts_include_subdomains = settings.SECURE_HSTS_INCLUDE_SUBDOMAINS\n        self.sts_preload = settings.SECURE_HSTS_PRELOAD\n        self.content_type_nosniff = settings.SECURE_CONTENT_TYPE_NOSNIFF\n        self.redirect = settings.SECURE_SSL_REDIRECT\n        self.redirect_host = settings.SECURE_SSL_HOST\n        self.redirect_exempt = [re.compile(r) for r in settings.SECURE_REDIRECT_EXEMPT]\n        self.referrer_policy = settings.SECURE_REFERRER_POLICY\n        self.cross_origin_opener_policy = settings.SECURE_CROSS_ORIGIN_OPENER_POLICY\n\n    def process_request(self, request):\n        path = request.path.lstrip(\"/\")\n        if (\n            self.redirect\n            and not request.is_secure()\n            and not any(pattern.search(path) for pattern in self.redirect_exempt)\n        ):\n            host = self.redirect_host or request.get_host()\n            return HttpResponsePermanentRedirect(\n                \"https://%s%s\" % (host, request.get_full_path())\n            )\n\n    def process_response(self, request, response):\n        if (\n            self.sts_seconds\n            and request.is_secure()\n            and \"Strict-Transport-Security\" not in response\n        ):\n            sts_header = \"max-age=%s\" % self.sts_seconds\n            if self.sts_include_subdomains:\n                sts_header += \"; includeSubDomains\"\n            if self.sts_preload:\n                sts_header += \"; preload\"\n            response.headers[\"Strict-Transport-Security\"] = sts_header\n\n        if self.content_type_nosniff:\n            response.headers.setdefault(\"X-Content-Type-Options\", \"nosniff\")\n\n        if self.referrer_policy:\n            # Support a comma-separated string or iterable of values to allow\n            # fallback.\n            response.headers.setdefault(\n                \"Referrer-Policy\",\n                \",\".join(\n                    [v.strip() for v in self.referrer_policy.split(\",\")]\n                    if isinstance(self.referrer_policy, str)\n                    else self.referrer_policy\n                ),\n            )\n\n        if self.cross_origin_opener_policy:\n            response.setdefault(\n                \"Cross-Origin-Opener-Policy\",\n                self.cross_origin_opener_policy,\n            )\n        return response",
                "filename": "django/middleware/security.py",
                "start_index": 0,
                "end_index": 2598,
                "start_line": 1,
                "end_line": 66,
                "max_line": 66,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "from django.conf import settings\nfrom django.core.exceptions import ImproperlyConfigured\n\nfrom .. import Error, Tags, Warning, register\n\nCROSS_ORIGIN_OPENER_POLICY_VALUES = {\n    \"same-origin\",\n    \"same-origin-allow-popups\",\n    \"unsafe-none\",\n}\nREFERRER_POLICY_VALUES = {\n    \"no-referrer\",\n    \"no-referrer-when-downgrade\",\n    \"origin\",\n    \"origin-when-cross-origin\",\n    \"same-origin\",\n    \"strict-origin\",\n    \"strict-origin-when-cross-origin\",\n    \"unsafe-url\",\n}\n\nSECRET_KEY_INSECURE_PREFIX = \"django-insecure-\"\nSECRET_KEY_MIN_LENGTH = 50\nSECRET_KEY_MIN_UNIQUE_CHARACTERS = 5\n\nSECRET_KEY_WARNING_MSG = (\n    f\"Your %s has less than {SECRET_KEY_MIN_LENGTH} characters, less than \"\n    f\"{SECRET_KEY_MIN_UNIQUE_CHARACTERS} unique characters, or it's prefixed \"\n    f\"with '{SECRET_KEY_INSECURE_PREFIX}' indicating that it was generated \"\n    f\"automatically by Django. Please generate a long and random value, \"\n    f\"otherwise many of Django's security-critical features will be \"\n    f\"vulnerable to attack.\"\n)\n\nW001 = Warning(\n    \"You do not have 'django.middleware.security.SecurityMiddleware' \"\n    \"in your MIDDLEWARE so the SECURE_HSTS_SECONDS, \"\n    \"SECURE_CONTENT_TYPE_NOSNIFF, SECURE_REFERRER_POLICY, \"\n    \"SECURE_CROSS_ORIGIN_OPENER_POLICY, and SECURE_SSL_REDIRECT settings will \"\n    \"have no effect.\",\n    id=\"security.W001\",\n)\n\nW002 = Warning(\n    \"You do not have \"\n    \"'django.middleware.clickjacking.XFrameOptionsMiddleware' in your \"\n    \"MIDDLEWARE, so your pages will not be served with an \"\n    \"'x-frame-options' header. Unless there is a good reason for your \"\n    \"site to be served in a frame, you should consider enabling this \"\n    \"header to help prevent clickjacking attacks.\",\n    id=\"security.W002\",\n)\n\nW004 = Warning(\n    \"You have not set a value for the SECURE_HSTS_SECONDS setting. \"\n    \"If your entire site is served only over SSL, you may want to consider \"\n    \"setting a value and enabling HTTP Strict Transport Security. \"\n    \"Be sure to read the documentation first; enabling HSTS carelessly \"\n    \"can cause serious, irreversible problems.\",\n    id=\"security.W004\",\n)\n\nW005 = Warning(\n    \"You have not set the SECURE_HSTS_INCLUDE_SUBDOMAINS setting to True. \"\n    \"Without this, your site is potentially vulnerable to attack \"\n    \"via an insecure connection to a subdomain. Only set this to True if \"\n    \"you are certain that all subdomains of your domain should be served \"\n    \"exclusively via SSL.\",\n    id=\"security.W005\",\n)\n\nW006 = Warning(\n    \"Your SECURE_CONTENT_TYPE_NOSNIFF setting is not set to True, \"\n    \"so your pages will not be served with an \"\n    \"'X-Content-Type-Options: nosniff' header. \"\n    \"You should consider enabling this header to prevent the \"\n    \"browser from identifying content types incorrectly.\",\n    id=\"security.W006\",\n)",
                "filename": "django/core/checks/security/base.py",
                "start_index": 0,
                "end_index": 2816,
                "start_line": 1,
                "end_line": 281,
                "max_line": 283,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "@register(Tags.security, deploy=True)\ndef check_referrer_policy(app_configs, **kwargs):\n    if _security_middleware():\n        if settings.SECURE_REFERRER_POLICY is None:\n            return [W022]\n        # Support a comma-separated string or iterable of values to allow fallback.\n        if isinstance(settings.SECURE_REFERRER_POLICY, str):\n            values = {v.strip() for v in settings.SECURE_REFERRER_POLICY.split(\",\")}\n        else:\n            values = set(settings.SECURE_REFERRER_POLICY)\n        if not values <= REFERRER_POLICY_VALUES:\n            return [E023]\n    return []\n\n\n@register(Tags.security, deploy=True)\ndef check_cross_origin_opener_policy(app_configs, **kwargs):\n    if (\n        _security_middleware()\n        and settings.SECURE_CROSS_ORIGIN_OPENER_POLICY is not None\n        and settings.SECURE_CROSS_ORIGIN_OPENER_POLICY\n        not in CROSS_ORIGIN_OPENER_POLICY_VALUES\n    ):\n        return [E024]\n    return []",
                "filename": "django/core/checks/security/base.py",
                "start_index": 8197,
                "end_index": 9139,
                "start_line": 155,
                "end_line": 283,
                "max_line": 283,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "def _origin_verified(self, request):\n        request_origin = request.META[\"HTTP_ORIGIN\"]\n        try:\n            good_host = request.get_host()\n        except DisallowedHost:\n            pass\n        else:\n            good_origin = \"%s://%s\" % (\n                \"https\" if request.is_secure() else \"http\",\n                good_host,\n            )\n            if request_origin == good_origin:\n                return True\n        if request_origin in self.allowed_origins_exact:\n            return True\n        try:\n            parsed_origin = urlparse(request_origin)\n        except ValueError:\n            return False\n        request_scheme = parsed_origin.scheme\n        request_netloc = parsed_origin.netloc\n        return any(\n            is_same_domain(request_netloc, host)\n            for host in self.allowed_origin_subdomains.get(request_scheme, ())\n        )\n\n    def _check_referer(self, request):\n        referer = request.META.get(\"HTTP_REFERER\")\n        if referer is None:\n            raise RejectRequest(REASON_NO_REFERER)\n\n        try:\n            referer = urlparse(referer)\n        except ValueError:\n            raise RejectRequest(REASON_MALFORMED_REFERER)\n\n        # Make sure we have a valid URL for Referer.\n        if \"\" in (referer.scheme, referer.netloc):\n            raise RejectRequest(REASON_MALFORMED_REFERER)\n\n        # Ensure that our Referer is also secure.\n        if referer.scheme != \"https\":\n            raise RejectRequest(REASON_INSECURE_REFERER)\n\n        if any(\n            is_same_domain(referer.netloc, host)\n            for host in self.csrf_trusted_origins_hosts\n        ):\n            return\n        # Allow matching the configured cookie domain.\n        good_referer = (\n            settings.SESSION_COOKIE_DOMAIN\n            if settings.CSRF_USE_SESSIONS\n            else settings.CSRF_COOKIE_DOMAIN\n        )\n        if good_referer is None:\n            # If no cookie domain is configured, allow matching the current\n            # host:port exactly if it's permitted by ALLOWED_HOSTS.\n            try:\n                # request.get_host() includes the port.\n                good_referer = request.get_host()\n            except DisallowedHost:\n                raise RejectRequest(REASON_BAD_REFERER % referer.geturl())\n        else:\n            server_port = request.get_port()\n            if server_port not in (\"443\", \"80\"):\n                good_referer = \"%s:%s\" % (good_referer, server_port)\n\n        if not is_same_domain(referer.netloc, good_referer):\n            raise RejectRequest(REASON_BAD_REFERER % referer.geturl())\n\n    def _bad_token_message(self, reason, token_source):\n        if token_source != \"POST\":\n            # Assume it is a settings.CSRF_HEADER_NAME value.\n            header_name = HttpHeaders.parse_header_name(token_source)\n            token_source = f\"the {header_name!r} HTTP header\"\n        return f\"CSRF token from {token_source} {reason}.\"",
                "filename": "django/middleware/csrf.py",
                "start_index": 10130,
                "end_index": 13056,
                "start_line": 270,
                "end_line": 346,
                "max_line": 482,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "\"\"\"\nCross Site Request Forgery Middleware.\n\nThis module provides a middleware that implements protection\nagainst request forgeries from other sites.\n\"\"\"\nimport logging\nimport string\nfrom collections import defaultdict\nfrom urllib.parse import urlparse\n\nfrom django.conf import settings\nfrom django.core.exceptions import DisallowedHost, ImproperlyConfigured\nfrom django.http import HttpHeaders, UnreadablePostError\nfrom django.urls import get_callable\nfrom django.utils.cache import patch_vary_headers\nfrom django.utils.crypto import constant_time_compare, get_random_string\nfrom django.utils.deprecation import MiddlewareMixin\nfrom django.utils.functional import cached_property\nfrom django.utils.http import is_same_domain\nfrom django.utils.log import log_response\nfrom django.utils.regex_helper import _lazy_re_compile\n\nlogger = logging.getLogger(\"django.security.csrf\")\n# This matches if any character is not in CSRF_ALLOWED_CHARS.\ninvalid_token_chars_re = _lazy_re_compile(\"[^a-zA-Z0-9]\")\n\nREASON_BAD_ORIGIN = \"Origin checking failed - %s does not match any trusted origins.\"\nREASON_NO_REFERER = \"Referer checking failed - no Referer.\"\nREASON_BAD_REFERER = \"Referer checking failed - %s does not match any trusted origins.\"\nREASON_NO_CSRF_COOKIE = \"CSRF cookie not set.\"\nREASON_CSRF_TOKEN_MISSING = \"CSRF token missing.\"\nREASON_MALFORMED_REFERER = \"Referer checking failed - Referer is malformed.\"\nREASON_INSECURE_REFERER = (\n    \"Referer checking failed - Referer is insecure while host is secure.\"\n)\n# The reason strings below are for passing to InvalidTokenFormat. They are\n# phrases without a subject because they can be in reference to either the CSRF\n# cookie or non-cookie token.\nREASON_INCORRECT_LENGTH = \"has incorrect length\"\nREASON_INVALID_CHARACTERS = \"has invalid characters\"\n\nCSRF_SECRET_LENGTH = 32\nCSRF_TOKEN_LENGTH = 2 * CSRF_SECRET_LENGTH\nCSRF_ALLOWED_CHARS = string.ascii_letters + string.digits\nCSRF_SESSION_KEY = \"_csrftoken\"\n\n\ndef _get_failure_view():\n    \"\"\"Return the view to be used for CSRF rejections.\"\"\"\n    return get_callable(settings.CSRF_FAILURE_VIEW)\n\n\ndef _get_new_csrf_string():\n    return get_random_string(CSRF_SECRET_LENGTH, allowed_chars=CSRF_ALLOWED_CHARS)\n\n\ndef _mask_cipher_secret(secret):\n    \"\"\"\n    Given a secret (assumed to be a string of CSRF_ALLOWED_CHARS), generate a\n    token by adding a mask and applying it to the secret.\n    \"\"\"\n    mask = _get_new_csrf_string()\n    chars = CSRF_ALLOWED_CHARS\n    pairs = zip((chars.index(x) for x in secret), (chars.index(x) for x in mask))\n    cipher = \"\".join(chars[(x + y) % len(chars)] for x, y in pairs)\n    return mask + cipher",
                "filename": "django/middleware/csrf.py",
                "start_index": 0,
                "end_index": 2628,
                "start_line": 1,
                "end_line": 67,
                "max_line": 482,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "\"\"\"\n    Require a present and correct csrfmiddlewaretoken for POST requests that\n    have a CSRF cookie, and set an outgoing CSRF cookie.\n\n    This middleware should be used in conjunction with the {% csrf_token %}\n    template tag.\n    \"\"\"\n\n    @cached_property\n    def csrf_trusted_origins_hosts(self):\n        return [\n            urlparse(origin).netloc.lstrip(\"*\")\n            for origin in settings.CSRF_TRUSTED_ORIGINS\n        ]\n\n    @cached_property\n    def allowed_origins_exact(self):\n        return {origin for origin in settings.CSRF_TRUSTED_ORIGINS if \"*\" not in origin}\n\n    @cached_property\n    def allowed_origin_subdomains(self):\n        \"\"\"\n        A mapping of allowed schemes to list of allowed netlocs, where all\n        subdomains of the netloc are allowed.\n        \"\"\"\n        allowed_origin_subdomains = defaultdict(list)\n        for parsed in (\n            urlparse(origin)\n            for origin in settings.CSRF_TRUSTED_ORIGINS\n            if \"*\" in origin\n        ):\n            allowed_origin_subdomains[parsed.scheme].append(parsed.netloc.lstrip(\"*\"))\n        return allowed_origin_subdomains\n\n    # The _accept and _reject methods currently only exist for the sake of the\n    # requires_csrf_token decorator.\n    def _accept(self, request):\n        # Avoid checking the request twice by adding a custom attribute to\n        # request.  This will be relevant when both decorator and middleware\n        # are used.\n        request.csrf_processing_done = True\n        return None\n\n    def _reject(self, request, reason):\n        response = _get_failure_view()(request, reason=reason)\n        log_response(\n            \"Forbidden (%s): %s\",\n            reason,\n            request.path,\n            response=response,\n            request=request,\n            logger=logger,\n        )\n        return response",
                "filename": "django/middleware/csrf.py",
                "start_index": 6140,
                "end_index": 7974,
                "start_line": 1,
                "end_line": 482,
                "max_line": 482,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "from functools import wraps\n\nfrom asgiref.sync import iscoroutinefunction\n\n\ndef xframe_options_deny(view_func):\n    \"\"\"\n    Modify a view function so its response has the X-Frame-Options HTTP\n    header set to 'DENY' as long as the response doesn't already have that\n    header set. Usage:\n\n    @xframe_options_deny\n    def some_view(request):\n        ...\n    \"\"\"\n\n    if iscoroutinefunction(view_func):\n\n        async def _view_wrapper(*args, **kwargs):\n            response = await view_func(*args, **kwargs)\n            if response.get(\"X-Frame-Options\") is None:\n                response[\"X-Frame-Options\"] = \"DENY\"\n            return response\n\n    else:\n\n        def _view_wrapper(*args, **kwargs):\n            response = view_func(*args, **kwargs)\n            if response.get(\"X-Frame-Options\") is None:\n                response[\"X-Frame-Options\"] = \"DENY\"\n            return response\n\n    return wraps(view_func)(_view_wrapper)\n\n\ndef xframe_options_sameorigin(view_func):\n    \"\"\"\n    Modify a view function so its response has the X-Frame-Options HTTP\n    header set to 'SAMEORIGIN' as long as the response doesn't already have\n    that header set. Usage:\n\n    @xframe_options_sameorigin\n    def some_view(request):\n        ...\n    \"\"\"\n\n    if iscoroutinefunction(view_func):\n\n        async def _view_wrapper(*args, **kwargs):\n            response = await view_func(*args, **kwargs)\n            if response.get(\"X-Frame-Options\") is None:\n                response[\"X-Frame-Options\"] = \"SAMEORIGIN\"\n            return response\n\n    else:\n\n        def _view_wrapper(*args, **kwargs):\n            response = view_func(*args, **kwargs)\n            if response.get(\"X-Frame-Options\") is None:\n                response[\"X-Frame-Options\"] = \"SAMEORIGIN\"\n            return response\n\n    return wraps(view_func)(_view_wrapper)\n\n\ndef xframe_options_exempt(view_func):\n    \"\"\"\n    Modify a view function by setting a response variable that instructs\n    XFrameOptionsMiddleware to NOT set the X-Frame-Options HTTP header. Usage:\n\n    @xframe_options_exempt\n    def some_view(request):\n        ...\n    \"\"\"\n\n    if iscoroutinefunction(view_func):\n\n        async def _view_wrapper(*args, **kwargs):\n            response = await view_func(*args, **kwargs)\n            response.xframe_options_exempt = True\n            return response\n\n    else:\n\n        def _view_wrapper(*args, **kwargs):\n            response = view_func(*args, **kwargs)\n            response.xframe_options_exempt = True\n            return response\n\n    return wraps(view_func)(_view_wrapper)",
                "filename": "django/views/decorators/clickjacking.py",
                "start_index": 0,
                "end_index": 2554,
                "start_line": 1,
                "end_line": 90,
                "max_line": 90,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "# A string like \"example.com\", or None for standard domain cookie.\nSESSION_COOKIE_DOMAIN = None\n# Whether the session cookie should be secure (https:// only).\nSESSION_COOKIE_SECURE = False\n# The path of the session cookie.\nSESSION_COOKIE_PATH = \"/\"\n# Whether to use the HttpOnly flag.\nSESSION_COOKIE_HTTPONLY = True\n# Whether to set the flag restricting cookie leaks on cross-site requests.\n# This can be 'Lax', 'Strict', 'None', or False to disable the flag.\nSESSION_COOKIE_SAMESITE = \"Lax\"\n# Whether to save the session data on every request.\nSESSION_SAVE_EVERY_REQUEST = False\n# Whether a user's session cookie expires when the web browser is closed.\nSESSION_EXPIRE_AT_BROWSER_CLOSE = False\n# The module to store session data\nSESSION_ENGINE = \"django.contrib.sessions.backends.db\"\n# Directory to store session files if using the file session module. If None,\n# the backend will use a sensible default.\nSESSION_FILE_PATH = None\n# class to serialize session data\nSESSION_SERIALIZER = \"django.contrib.sessions.serializers.JSONSerializer\"\n\n#########\n# CACHE #\n#########\n\n# The cache backends to use.\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.locmem.LocMemCache\",\n    }\n}\nCACHE_MIDDLEWARE_KEY_PREFIX = \"\"\nCACHE_MIDDLEWARE_SECONDS = 600\nCACHE_MIDDLEWARE_ALIAS = \"default\"\n\n##################\n# AUTHENTICATION #\n##################\n\nAUTH_USER_MODEL = \"auth.User\"\n\nAUTHENTICATION_BACKENDS = [\"django.contrib.auth.backends.ModelBackend\"]\n\nLOGIN_URL = \"/accounts/login/\"\n\nLOGIN_REDIRECT_URL = \"/accounts/profile/\"\n\nLOGOUT_REDIRECT_URL = None\n\n# The number of seconds a password reset link is valid for (default: 3 days).\nPASSWORD_RESET_TIMEOUT = 60 * 60 * 24 * 3\n\n# the first hasher in this list is the preferred algorithm.  any\n# password using different algorithms will be converted automatically\n# upon login\nPASSWORD_HASHERS = [\n    \"django.contrib.auth.hashers.PBKDF2PasswordHasher\",\n    \"django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher\",\n    \"django.contrib.auth.hashers.Argon2PasswordHasher\",\n    \"django.contrib.auth.hashers.BCryptSHA256PasswordHasher\",\n    \"django.contrib.auth.hashers.ScryptPasswordHasher\",\n]\n\nAUTH_PASSWORD_VALIDATORS = []\n\n###########\n# SIGNING #\n###########\n\nSIGNING_BACKEND = \"django.core.signing.TimestampSigner\"\n\n########\n# CSRF #\n########\n\n# Dotted path to callable to be used as view when a request is\n# rejected by the CSRF middleware.\nCSRF_FAILURE_VIEW = \"django.views.csrf.csrf_failure\"\n\n# Settings for CSRF cookie.\nCSRF_COOKIE_NAME = \"csrftoken\"\nCSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52\nCSRF_COOKIE_DOMAIN = None\nCSRF_COOKIE_PATH = \"/\"\nCSRF_COOKIE_SECURE = False\nCSRF_COOKIE_HTTPONLY = False\nCSRF_COOKIE_SAMESITE = \"Lax\"\nCSRF_HEADER_NAME = \"HTTP_X_CSRFTOKEN\"\nCSRF_TRUSTED_ORIGINS = []\nCSRF_USE_SESSIONS = False\n\n############\n# MESSAGES #\n############\n\n# Class to use as messages backend\nMESSAGE_STORAGE = \"django.contrib.messages.storage.fallback.FallbackStorage\"",
                "filename": "django/conf/global_settings.py",
                "start_index": 17386,
                "end_index": 20317,
                "start_line": 482,
                "end_line": 580,
                "max_line": 667,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "from django.conf import settings\n\nfrom .. import Tags, Warning, register\n\n\ndef add_session_cookie_message(message):\n    return message + (\n        \" Using a secure-only session cookie makes it more difficult for \"\n        \"network traffic sniffers to hijack user sessions.\"\n    )\n\n\nW010 = Warning(\n    add_session_cookie_message(\n        \"You have 'django.contrib.sessions' in your INSTALLED_APPS, \"\n        \"but you have not set SESSION_COOKIE_SECURE to True.\"\n    ),\n    id=\"security.W010\",\n)\n\nW011 = Warning(\n    add_session_cookie_message(\n        \"You have 'django.contrib.sessions.middleware.SessionMiddleware' \"\n        \"in your MIDDLEWARE, but you have not set \"\n        \"SESSION_COOKIE_SECURE to True.\"\n    ),\n    id=\"security.W011\",\n)\n\nW012 = Warning(\n    add_session_cookie_message(\"SESSION_COOKIE_SECURE is not set to True.\"),\n    id=\"security.W012\",\n)\n\n\ndef add_httponly_message(message):\n    return message + (\n        \" Using an HttpOnly session cookie makes it more difficult for \"\n        \"cross-site scripting attacks to hijack user sessions.\"\n    )\n\n\nW013 = Warning(\n    add_httponly_message(\n        \"You have 'django.contrib.sessions' in your INSTALLED_APPS, \"\n        \"but you have not set SESSION_COOKIE_HTTPONLY to True.\",\n    ),\n    id=\"security.W013\",\n)\n\nW014 = Warning(\n    add_httponly_message(\n        \"You have 'django.contrib.sessions.middleware.SessionMiddleware' \"\n        \"in your MIDDLEWARE, but you have not set \"\n        \"SESSION_COOKIE_HTTPONLY to True.\"\n    ),\n    id=\"security.W014\",\n)\n\nW015 = Warning(\n    add_httponly_message(\"SESSION_COOKIE_HTTPONLY is not set to True.\"),\n    id=\"security.W015\",\n)\n\n\n@register(Tags.security, deploy=True)\ndef check_session_cookie_secure(app_configs, **kwargs):\n    if settings.SESSION_COOKIE_SECURE is True:\n        return []\n    errors = []\n    if _session_app():\n        errors.append(W010)\n    if _session_middleware():\n        errors.append(W011)\n    if len(errors) > 1:\n        errors = [W012]\n    return errors\n\n\n@register(Tags.security, deploy=True)\ndef check_session_cookie_httponly(app_configs, **kwargs):\n    if settings.SESSION_COOKIE_HTTPONLY is True:\n        return []\n    errors = []\n    if _session_app():\n        errors.append(W013)\n    if _session_middleware():\n        errors.append(W014)\n    if len(errors) > 1:\n        errors = [W015]\n    return errors\n\n\ndef _session_middleware():\n    return \"django.contrib.sessions.middleware.SessionMiddleware\" in settings.MIDDLEWARE\n\n\ndef _session_app():\n    return \"django.contrib.sessions\" in settings.INSTALLED_APPS",
                "filename": "django/core/checks/security/sessions.py",
                "start_index": 0,
                "end_index": 2553,
                "start_line": 1,
                "end_line": 99,
                "max_line": 99,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "django/middleware/security.py": [
                {
                    "chunk": {
                        "code": "import re\n\nfrom django.conf import settings\nfrom django.http import HttpResponsePermanentRedirect\nfrom django.utils.deprecation import MiddlewareMixin\n\n\nclass SecurityMiddleware(MiddlewareMixin):\n    def __init__(self, get_response):\n        super().__init__(get_response)\n        self.sts_seconds = settings.SECURE_HSTS_SECONDS\n        self.sts_include_subdomains = settings.SECURE_HSTS_INCLUDE_SUBDOMAINS\n        self.sts_preload = settings.SECURE_HSTS_PRELOAD\n        self.content_type_nosniff = settings.SECURE_CONTENT_TYPE_NOSNIFF\n        self.redirect = settings.SECURE_SSL_REDIRECT\n        self.redirect_host = settings.SECURE_SSL_HOST\n        self.redirect_exempt = [re.compile(r) for r in settings.SECURE_REDIRECT_EXEMPT]\n        self.referrer_policy = settings.SECURE_REFERRER_POLICY\n        self.cross_origin_opener_policy = settings.SECURE_CROSS_ORIGIN_OPENER_POLICY\n\n    def process_request(self, request):\n        path = request.path.lstrip(\"/\")\n        if (\n            self.redirect\n            and not request.is_secure()\n            and not any(pattern.search(path) for pattern in self.redirect_exempt)\n        ):\n            host = self.redirect_host or request.get_host()\n            return HttpResponsePermanentRedirect(\n                \"https://%s%s\" % (host, request.get_full_path())\n            )\n\n    def process_response(self, request, response):\n        if (\n            self.sts_seconds\n            and request.is_secure()\n            and \"Strict-Transport-Security\" not in response\n        ):\n            sts_header = \"max-age=%s\" % self.sts_seconds\n            if self.sts_include_subdomains:\n                sts_header += \"; includeSubDomains\"\n            if self.sts_preload:\n                sts_header += \"; preload\"\n            response.headers[\"Strict-Transport-Security\"] = sts_header\n\n        if self.content_type_nosniff:\n            response.headers.setdefault(\"X-Content-Type-Options\", \"nosniff\")\n\n        if self.referrer_policy:\n            # Support a comma-separated string or iterable of values to allow\n            # fallback.\n            response.headers.setdefault(\n                \"Referrer-Policy\",\n                \",\".join(\n                    [v.strip() for v in self.referrer_policy.split(\",\")]\n                    if isinstance(self.referrer_policy, str)\n                    else self.referrer_policy\n                ),\n            )\n\n        if self.cross_origin_opener_policy:\n            response.setdefault(\n                \"Cross-Origin-Opener-Policy\",\n                self.cross_origin_opener_policy,\n            )\n        return response",
                        "filename": "django/middleware/security.py",
                        "start_index": 0,
                        "end_index": 2598,
                        "start_line": 1,
                        "end_line": 66,
                        "max_line": 66,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the SecurityMiddleware class where the 'Referrer-Policy' header is set, which is directly related to the issue of setting a secure default SECURE_REFERRER_POLICY."
                }
            ],
            "django/core/checks/security/base.py": [
                {
                    "chunk": {
                        "code": "from django.conf import settings\nfrom django.core.exceptions import ImproperlyConfigured\n\nfrom .. import Error, Tags, Warning, register\n\nCROSS_ORIGIN_OPENER_POLICY_VALUES = {\n    \"same-origin\",\n    \"same-origin-allow-popups\",\n    \"unsafe-none\",\n}\nREFERRER_POLICY_VALUES = {\n    \"no-referrer\",\n    \"no-referrer-when-downgrade\",\n    \"origin\",\n    \"origin-when-cross-origin\",\n    \"same-origin\",\n    \"strict-origin\",\n    \"strict-origin-when-cross-origin\",\n    \"unsafe-url\",\n}\n\nSECRET_KEY_INSECURE_PREFIX = \"django-insecure-\"\nSECRET_KEY_MIN_LENGTH = 50\nSECRET_KEY_MIN_UNIQUE_CHARACTERS = 5\n\nSECRET_KEY_WARNING_MSG = (\n    f\"Your %s has less than {SECRET_KEY_MIN_LENGTH} characters, less than \"\n    f\"{SECRET_KEY_MIN_UNIQUE_CHARACTERS} unique characters, or it's prefixed \"\n    f\"with '{SECRET_KEY_INSECURE_PREFIX}' indicating that it was generated \"\n    f\"automatically by Django. Please generate a long and random value, \"\n    f\"otherwise many of Django's security-critical features will be \"\n    f\"vulnerable to attack.\"\n)\n\nW001 = Warning(\n    \"You do not have 'django.middleware.security.SecurityMiddleware' \"\n    \"in your MIDDLEWARE so the SECURE_HSTS_SECONDS, \"\n    \"SECURE_CONTENT_TYPE_NOSNIFF, SECURE_REFERRER_POLICY, \"\n    \"SECURE_CROSS_ORIGIN_OPENER_POLICY, and SECURE_SSL_REDIRECT settings will \"\n    \"have no effect.\",\n    id=\"security.W001\",\n)\n\nW002 = Warning(\n    \"You do not have \"\n    \"'django.middleware.clickjacking.XFrameOptionsMiddleware' in your \"\n    \"MIDDLEWARE, so your pages will not be served with an \"\n    \"'x-frame-options' header. Unless there is a good reason for your \"\n    \"site to be served in a frame, you should consider enabling this \"\n    \"header to help prevent clickjacking attacks.\",\n    id=\"security.W002\",\n)\n\nW004 = Warning(\n    \"You have not set a value for the SECURE_HSTS_SECONDS setting. \"\n    \"If your entire site is served only over SSL, you may want to consider \"\n    \"setting a value and enabling HTTP Strict Transport Security. \"\n    \"Be sure to read the documentation first; enabling HSTS carelessly \"\n    \"can cause serious, irreversible problems.\",\n    id=\"security.W004\",\n)\n\nW005 = Warning(\n    \"You have not set the SECURE_HSTS_INCLUDE_SUBDOMAINS setting to True. \"\n    \"Without this, your site is potentially vulnerable to attack \"\n    \"via an insecure connection to a subdomain. Only set this to True if \"\n    \"you are certain that all subdomains of your domain should be served \"\n    \"exclusively via SSL.\",\n    id=\"security.W005\",\n)\n\nW006 = Warning(\n    \"Your SECURE_CONTENT_TYPE_NOSNIFF setting is not set to True, \"\n    \"so your pages will not be served with an \"\n    \"'X-Content-Type-Options: nosniff' header. \"\n    \"You should consider enabling this header to prevent the \"\n    \"browser from identifying content types incorrectly.\",\n    id=\"security.W006\",\n)",
                        "filename": "django/core/checks/security/base.py",
                        "start_index": 0,
                        "end_index": 2816,
                        "start_line": 1,
                        "end_line": 281,
                        "max_line": 283,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the list of valid values for the 'Referrer-Policy' header, which is relevant to the issue as it may be necessary to validate or update the list of supported policies."
                },
                {
                    "chunk": {
                        "code": "@register(Tags.security, deploy=True)\ndef check_referrer_policy(app_configs, **kwargs):\n    if _security_middleware():\n        if settings.SECURE_REFERRER_POLICY is None:\n            return [W022]\n        # Support a comma-separated string or iterable of values to allow fallback.\n        if isinstance(settings.SECURE_REFERRER_POLICY, str):\n            values = {v.strip() for v in settings.SECURE_REFERRER_POLICY.split(\",\")}\n        else:\n            values = set(settings.SECURE_REFERRER_POLICY)\n        if not values <= REFERRER_POLICY_VALUES:\n            return [E023]\n    return []\n\n\n@register(Tags.security, deploy=True)\ndef check_cross_origin_opener_policy(app_configs, **kwargs):\n    if (\n        _security_middleware()\n        and settings.SECURE_CROSS_ORIGIN_OPENER_POLICY is not None\n        and settings.SECURE_CROSS_ORIGIN_OPENER_POLICY\n        not in CROSS_ORIGIN_OPENER_POLICY_VALUES\n    ):\n        return [E024]\n    return []",
                        "filename": "django/core/checks/security/base.py",
                        "start_index": 8197,
                        "end_index": 9139,
                        "start_line": 155,
                        "end_line": 283,
                        "max_line": 283,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the check_referrer_policy function which is used to validate the SECURE_REFERRER_POLICY setting, and may need to be reviewed or updated in light of changing the default value."
                }
            ],
            "django/conf/global_settings.py": [
                {
                    "chunk": {
                        "code": "# A string like \"example.com\", or None for standard domain cookie.\nSESSION_COOKIE_DOMAIN = None\n# Whether the session cookie should be secure (https:// only).\nSESSION_COOKIE_SECURE = False\n# The path of the session cookie.\nSESSION_COOKIE_PATH = \"/\"\n# Whether to use the HttpOnly flag.\nSESSION_COOKIE_HTTPONLY = True\n# Whether to set the flag restricting cookie leaks on cross-site requests.\n# This can be 'Lax', 'Strict', 'None', or False to disable the flag.\nSESSION_COOKIE_SAMESITE = \"Lax\"\n# Whether to save the session data on every request.\nSESSION_SAVE_EVERY_REQUEST = False\n# Whether a user's session cookie expires when the web browser is closed.\nSESSION_EXPIRE_AT_BROWSER_CLOSE = False\n# The module to store session data\nSESSION_ENGINE = \"django.contrib.sessions.backends.db\"\n# Directory to store session files if using the file session module. If None,\n# the backend will use a sensible default.\nSESSION_FILE_PATH = None\n# class to serialize session data\nSESSION_SERIALIZER = \"django.contrib.sessions.serializers.JSONSerializer\"\n\n#########\n# CACHE #\n#########\n\n# The cache backends to use.\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.locmem.LocMemCache\",\n    }\n}\nCACHE_MIDDLEWARE_KEY_PREFIX = \"\"\nCACHE_MIDDLEWARE_SECONDS = 600\nCACHE_MIDDLEWARE_ALIAS = \"default\"\n\n##################\n# AUTHENTICATION #\n##################\n\nAUTH_USER_MODEL = \"auth.User\"\n\nAUTHENTICATION_BACKENDS = [\"django.contrib.auth.backends.ModelBackend\"]\n\nLOGIN_URL = \"/accounts/login/\"\n\nLOGIN_REDIRECT_URL = \"/accounts/profile/\"\n\nLOGOUT_REDIRECT_URL = None\n\n# The number of seconds a password reset link is valid for (default: 3 days).\nPASSWORD_RESET_TIMEOUT = 60 * 60 * 24 * 3\n\n# the first hasher in this list is the preferred algorithm.  any\n# password using different algorithms will be converted automatically\n# upon login\nPASSWORD_HASHERS = [\n    \"django.contrib.auth.hashers.PBKDF2PasswordHasher\",\n    \"django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher\",\n    \"django.contrib.auth.hashers.Argon2PasswordHasher\",\n    \"django.contrib.auth.hashers.BCryptSHA256PasswordHasher\",\n    \"django.contrib.auth.hashers.ScryptPasswordHasher\",\n]\n\nAUTH_PASSWORD_VALIDATORS = []\n\n###########\n# SIGNING #\n###########\n\nSIGNING_BACKEND = \"django.core.signing.TimestampSigner\"\n\n########\n# CSRF #\n########\n\n# Dotted path to callable to be used as view when a request is\n# rejected by the CSRF middleware.\nCSRF_FAILURE_VIEW = \"django.views.csrf.csrf_failure\"\n\n# Settings for CSRF cookie.\nCSRF_COOKIE_NAME = \"csrftoken\"\nCSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52\nCSRF_COOKIE_DOMAIN = None\nCSRF_COOKIE_PATH = \"/\"\nCSRF_COOKIE_SECURE = False\nCSRF_COOKIE_HTTPONLY = False\nCSRF_COOKIE_SAMESITE = \"Lax\"\nCSRF_HEADER_NAME = \"HTTP_X_CSRFTOKEN\"\nCSRF_TRUSTED_ORIGINS = []\nCSRF_USE_SESSIONS = False\n\n############\n# MESSAGES #\n############\n\n# Class to use as messages backend\nMESSAGE_STORAGE = \"django.contrib.messages.storage.fallback.FallbackStorage\"",
                        "filename": "django/conf/global_settings.py",
                        "start_index": 17386,
                        "end_index": 20317,
                        "start_line": 482,
                        "end_line": 580,
                        "max_line": 667,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet from global_settings.py may need to be updated to change the default value of SECURE_REFERRER_POLICY to 'same-origin'."
                }
            ]
        },
        "solution_task": "To implement the feature request to change the default for the `SECURE_REFERRER_POLICY` setting to \"same-origin\" in Django, follow these steps:\n\n- Update the default value for `SECURE_REFERRER_POLICY` in Django's global settings module (`django/conf/global_settings.py`).\n- Modify the `SecurityMiddleware` class in `django/middleware/security.py` to use the new default value if the setting is not explicitly set in the user's project settings.\n- Update the documentation to reflect the new default value and any potential implications for users.\n- Add or update tests to cover the new default behavior.\n- Update the Django system checks in `django/core/checks/security/base.py` to ensure that the new default value is considered during checks.\n\nHere is a code snippet to update the `SECURE_REFERRER_POLICY` default value:\n\n```python\n# In django/conf/global_settings.py\nSECURE_REFERRER_POLICY = \"same-origin\"\n```\n\nAnd in `django/middleware/security.py`, ensure that the `SecurityMiddleware` class uses the new default:\n\n```python\nclass SecurityMiddleware(MiddlewareMixin):\n    # ...\n    def __init__(self, get_response):\n        # ...\n        self.referrer_policy = getattr(settings, 'SECURE_REFERRER_POLICY', 'same-origin')\n        # ...\n```\n\nFinally, update the documentation and tests accordingly:\n\n- Documentation should be updated to explain the new default value for `SECURE_REFERRER_POLICY` and its implications.\n- Tests should be added or updated in `tests/middleware/test_security.py` (assuming a standard Django test layout) to assert that the `Referrer-Policy` header defaults to \"same-origin\" when not explicitly set.\n\nRemember to follow the Django contribution guidelines for submitting patches or pull requests if you are contributing this change back to the Django project.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE must provide precise, actionable guidance and directly address all aspects of the described feature request to facilitate its successful implementation or improvement.",
            "supporting_evidence": "The RESPONSE provides a comprehensive and actionable plan for implementing the feature request to change the default for the `SECURE_REFERRER_POLICY` setting to \"same-origin\" in Django. It includes specific steps such as updating the global settings module, modifying the `SecurityMiddleware` class, updating documentation, adding or updating tests, and updating the Django system checks. The RESPONSE also provides code snippets to guide the implementation process and references to the relevant parts of the Django codebase that need to be reviewed or updated. The only reason it does not score a 10 is that it does not mention the need to communicate the change to the Django community, which is an important step in the process of changing a default setting.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711731595.627337,
        "result": "To implement the feature request to change the default for the `SECURE_REFERRER_POLICY` setting to \"same-origin\" in Django, follow these steps:\n\n- Update the default value for `SECURE_REFERRER_POLICY` in Django's global settings module (`django/conf/global_settings.py`).\n- Modify the `SecurityMiddleware` class in `django/middleware/security.py` to use the new default value if the setting is not explicitly set in the user's project settings.\n- Update the documentation to reflect the new default value and any potential implications for users.\n- Add or update tests to cover the new default behavior.\n- Update the Django system checks in `django/core/checks/security/base.py` to ensure that the new default value is considered during checks.\n\nHere is a code snippet to update the `SECURE_REFERRER_POLICY` default value:\n\n```python\n# In django/conf/global_settings.py\nSECURE_REFERRER_POLICY = \"same-origin\"\n```\n\nAnd in `django/middleware/security.py`, ensure that the `SecurityMiddleware` class uses the new default:\n\n```python\nclass SecurityMiddleware(MiddlewareMixin):\n    # ...\n    def __init__(self, get_response):\n        # ...\n        self.referrer_policy = getattr(settings, 'SECURE_REFERRER_POLICY', 'same-origin')\n        # ...\n```\n\nFinally, update the documentation and tests accordingly:\n\n- Documentation should be updated to explain the new default value for `SECURE_REFERRER_POLICY` and its implications.\n- Tests should be added or updated in `tests/middleware/test_security.py` (assuming a standard Django test layout) to assert that the `Referrer-Policy` header defaults to \"same-origin\" when not explicitly set.\n\nRemember to follow the Django contribution guidelines for submitting patches or pull requests if you are contributing this change back to the Django project.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__3.1/tree//django) \u2192 [middleware](https://github.com/testbed/django__django__3.1/tree//django/middleware)- [Lines 1 - 66](https://github.com/testbed/django__django__3.1/blob//django/middleware/security.py#L1-L66)\n\n This snippet contains the SecurityMiddleware class where the 'Referrer-Policy' header is set, which is directly related to the issue of setting a secure default SECURE_REFERRER_POLICY.\n-  \u2192 [django](https://github.com/testbed/django__django__3.1/tree//django) \u2192 [core](https://github.com/testbed/django__django__3.1/tree//django/core) \u2192 [checks](https://github.com/testbed/django__django__3.1/tree//django/core/checks) \u2192 [security](https://github.com/testbed/django__django__3.1/tree//django/core/checks/security)- [Lines 1 - 281](https://github.com/testbed/django__django__3.1/blob//django/core/checks/security/base.py#L1-L281)\n\n This snippet contains the list of valid values for the 'Referrer-Policy' header, which is relevant to the issue as it may be necessary to validate or update the list of supported policies. \n\n\n   - [Lines 155 - 283](https://github.com/testbed/django__django__3.1/blob//django/core/checks/security/base.py#L155-L283)\n\n This snippet contains the check_referrer_policy function which is used to validate the SECURE_REFERRER_POLICY setting, and may need to be reviewed or updated in light of changing the default value.\n-  \u2192 [django](https://github.com/testbed/django__django__3.1/tree//django) \u2192 [conf](https://github.com/testbed/django__django__3.1/tree//django/conf)- [Lines 482 - 580](https://github.com/testbed/django__django__3.1/blob//django/conf/global_settings.py#L482-L580)\n\n This snippet from global_settings.py may need to be updated to change the default value of SECURE_REFERRER_POLICY to 'same-origin'."
    }
}