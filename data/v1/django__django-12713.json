{
    "id": "django__django-12713",
    "repo_name": "testbed/django__django__3.1",
    "task_id": 1663194590242419895,
    "title": "Allow overridding widget in formfield_for_manytomany().",
    "body": "Description\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nIt does not work when I set widget param to function formfield_for_manytomany().\nThis is different from the formfield_for_foreignkey() function.\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/django__django__3.1.git",
    "requested_commit": "",
    "mayil_response": "- Modify the `formfield_for_manytomany` method in `django/contrib/admin/options.py` to handle the `widget` parameter correctly by setting the `formfield.widget` to `kwargs['widget']` if provided:\n\n```python\ndef formfield_for_manytomany(self, db_field, request, **kwargs):\n    # ... existing implementation ...\n\n    if \"widget\" in kwargs:\n        form_field.widget = kwargs['widget']\n    else:\n        # existing logic to determine the widget\n        if db_field.name in autocomplete_fields:\n            kwargs[\"widget\"] = AutocompleteSelectMultiple(\n                db_field,\n                self.admin_site,\n                using=db,\n            )\n        # ... rest of the existing logic ...\n\n    # ... rest of the existing method ...\n    return form_field\n```\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__3.1/tree//django) \u2192 [contrib](https://github.com/testbed/django__django__3.1/tree//django/contrib) \u2192 [admin](https://github.com/testbed/django__django__3.1/tree//django/contrib/admin)- [Lines 297 - 2516](https://github.com/testbed/django__django__3.1/blob//django/contrib/admin/options.py#L297-L2516)\n\n This snippet contains the formfield_for_manytomany function where the widget parameter is set, which is directly related to the issue. \n\n\n   - [Lines 125 - 218](https://github.com/testbed/django__django__3.1/blob//django/contrib/admin/options.py#L125-L218)\n\n This snippet shows how formfield_for_manytomany is used within the context of formfield_for_dbfield, which may be relevant for understanding how the widget parameter is handled. \n\n\n   - [Lines 101 - 121](https://github.com/testbed/django__django__3.1/blob//django/contrib/admin/options.py#L101-L121)\n\n This snippet shows the FORMFIELD_FOR_DBFIELD_DEFAULTS which might be relevant if the default widget needs to be overridden for ManyToManyField.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0005205,
        "snippet_processor": 0.056010000000000004,
        "issue_star_creation": 0.02105,
        "issue_star_solver": 0.06346,
        "bouncer": 0.02602
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711731137.222605,
        "relevant_snippets": [
            {
                "code": "class ManyToManyRawIdWidget(ForeignKeyRawIdWidget):\n    \"\"\"\n    A Widget for displaying ManyToMany ids in the \"raw_id\" interface rather than\n    in a <select multiple> box.\n    \"\"\"\n\n    template_name = \"admin/widgets/many_to_many_raw_id.html\"\n\n    def get_context(self, name, value, attrs):\n        context = super().get_context(name, value, attrs)\n        if self.admin_site.is_registered(self.rel.model):\n            # The related object is registered with the same AdminSite\n            context[\"widget\"][\"attrs\"][\"class\"] = \"vManyToManyRawIdAdminField\"\n        return context\n\n    def url_parameters(self):\n        return self.base_url_parameters()\n\n    def label_and_url_for_value(self, value):\n        return \"\", \"\"\n\n    def value_from_datadict(self, data, files, name):\n        value = data.get(name)\n        if value:\n            return value.split(\",\")\n\n    def format_value(self, value):\n        return \",\".join(str(v) for v in value) if value else \"\"",
                "filename": "django/contrib/admin/widgets.py",
                "start_index": 6909,
                "end_index": 7870,
                "start_line": 215,
                "end_line": 242,
                "max_line": 595,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "def formfield_for_manytomany(self, db_field, request, **kwargs):\n        \"\"\"\n        Get a form Field for a ManyToManyField.\n        \"\"\"\n        # If it uses an intermediary model that isn't auto created, don't show\n        # a field in admin.\n        if not db_field.remote_field.through._meta.auto_created:\n            return None\n        db = kwargs.get(\"using\")\n\n        if \"widget\" not in kwargs:\n            autocomplete_fields = self.get_autocomplete_fields(request)\n            if db_field.name in autocomplete_fields:\n                kwargs[\"widget\"] = AutocompleteSelectMultiple(\n                    db_field,\n                    self.admin_site,\n                    using=db,\n                )\n            elif db_field.name in self.raw_id_fields:\n                kwargs[\"widget\"] = widgets.ManyToManyRawIdWidget(\n                    db_field.remote_field,\n                    self.admin_site,\n                    using=db,\n                )\n            elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:\n                kwargs[\"widget\"] = widgets.FilteredSelectMultiple(\n                    db_field.verbose_name, db_field.name in self.filter_vertical\n                )\n        if \"queryset\" not in kwargs:\n            queryset = self.get_field_queryset(db, db_field, request)\n            if queryset is not None:\n                kwargs[\"queryset\"] = queryset\n\n        form_field = db_field.formfield(**kwargs)\n        if (\n            isinstance(form_field.widget, SelectMultiple)\n            and form_field.widget.allow_multiple_selected\n            and not isinstance(\n                form_field.widget, (CheckboxSelectMultiple, AutocompleteSelectMultiple)\n            )\n        ):\n            msg = _(\n                \"Hold down \u201cControl\u201d, or \u201cCommand\u201d on a Mac, to select more than one.\"\n            )\n            help_text = form_field.help_text\n            form_field.help_text = (\n                format_lazy(\"{} {}\", help_text, msg) if help_text else msg\n            )\n        return form_field\n\n    def get_autocomplete_fields(self, request):\n        \"\"\"\n        Return a list of ForeignKey and/or ManyToMany fields which should use\n        an autocomplete widget.\n        \"\"\"\n        return self.autocomplete_fields\n\n    def get_view_on_site_url(self, obj=None):\n        if obj is None or not self.view_on_site:\n            return None\n\n        if callable(self.view_on_site):\n            return self.view_on_site(obj)\n        elif hasattr(obj, \"get_absolute_url\"):\n            # use the ContentType lookup if view_on_site is True\n            return reverse(\n                \"admin:view_on_site\",\n                kwargs={\n                    \"content_type_id\": get_content_type_for_model(obj).pk,\n                    \"object_id\": obj.pk,\n                },\n                current_app=self.admin_site.name,\n            )\n\n    de",
                "filename": "django/contrib/admin/options.py",
                "start_index": 11231,
                "end_index": 14103,
                "start_line": 297,
                "end_line": 2516,
                "max_line": 2529,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "class RelatedFieldWidgetWrapper(forms.Widget):",
                "filename": "django/contrib/admin/widgets.py",
                "start_index": 7873,
                "end_index": 7919,
                "start_line": 245,
                "end_line": 245,
                "max_line": 595,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "class MultiWidget(Widget):",
                "filename": "django/forms/widgets.py",
                "start_index": 27909,
                "end_index": 27935,
                "start_line": 875,
                "end_line": 875,
                "max_line": 1200,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "# by adding to ModelAdmin.formfield_overrides.\n\nFORMFIELD_FOR_DBFIELD_DEFAULTS = {\n    models.DateTimeField: {\n        \"form_class\": forms.SplitDateTimeField,\n        \"widget\": widgets.AdminSplitDateTime,\n    },\n    models.DateField: {\"widget\": widgets.AdminDateWidget},\n    models.TimeField: {\"widget\": widgets.AdminTimeWidget},\n    models.TextField: {\"widget\": widgets.AdminTextareaWidget},\n    models.URLField: {\"widget\": widgets.AdminURLFieldWidget},\n    models.IntegerField: {\"widget\": widgets.AdminIntegerFieldWidget},\n    models.BigIntegerField: {\"widget\": widgets.AdminBigIntegerFieldWidget},\n    models.CharField: {\"widget\": widgets.AdminTextInputWidget},\n    models.ImageField: {\"widget\": widgets.AdminFileWidget},\n    models.FileField: {\"widget\": widgets.AdminFileWidget},\n    models.EmailField: {\"widget\": widgets.AdminEmailInputWidget},\n    models.UUIDField: {\"widget\": widgets.AdminUUIDInputWidget},\n}\n\ncsrf_protect_m = method_decorator(csrf_protect)",
                "filename": "django/contrib/admin/options.py",
                "start_index": 2992,
                "end_index": 3956,
                "start_line": 101,
                "end_line": 121,
                "max_line": 2529,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "class ForeignKeyRawIdWidget(forms.TextInput):\n    \"\"\"\n    A Widget for displaying ForeignKeys in the \"raw_id\" interface rather than\n    in a <select> box.\n    \"\"\"\n\n    template_name = \"admin/widgets/foreign_key_raw_id.html\"\n\n    def __init__(self, rel, admin_site, attrs=None, using=None):\n        self.rel = rel\n        self.admin_site = admin_site\n        self.db = using\n        super().__init__(attrs)\n\n    def get_context(self, name, value, attrs):\n        context = super().get_context(name, value, attrs)\n        rel_to = self.rel.model\n        if self.admin_site.is_registered(rel_to):\n            # The related object is registered with the same AdminSite\n            related_url = reverse(\n                \"admin:%s_%s_changelist\"\n                % (\n                    rel_to._meta.app_label,\n                    rel_to._meta.model_name,\n                ),\n                current_app=self.admin_site.name,\n            )\n\n            params = self.url_parameters()\n            if params:\n                related_url += \"?\" + urlencode(params)\n            context[\"related_url\"] = related_url\n            context[\"link_title\"] = _(\"Lookup\")\n            # The JavaScript code looks for this class.\n            css_class = \"vForeignKeyRawIdAdminField\"\n            if isinstance(self.rel.get_related_field(), UUIDField):\n                css_class += \" vUUIDField\"\n            context[\"widget\"][\"attrs\"].setdefault(\"class\", css_class)\n        else:\n            context[\"related_url\"] = None\n        if context[\"widget\"][\"value\"]:\n            context[\"link_label\"], context[\"link_url\"] = self.label_and_url_for_value(\n                value\n            )\n        else:\n            context[\"link_label\"] = None\n        return context\n\n    def base_url_parameters(self):\n        limit_choices_to = self.rel.limit_choices_to\n        if callable(limit_choices_to):\n            limit_choices_to = limit_choices_to()\n        return url_params_from_lookup_dict(limit_choices_to)\n\n    def url_parameters(self):\n        from django.contrib.admin.views.main import TO_FIELD_VAR\n\n        params = self.base_url_parameters()\n        params.update({TO_FIELD_VAR: self.rel.get_related_field().name})\n        return params\n\n    def label_and_url_for_value(self, value):\n        key = self.rel.get_related_field().name\n        try:\n            obj = self.rel.model._default_manager.using(self.db).get(**{key: value})\n        except (ValueError, self.rel.model.DoesNotExist, ValidationError):\n            return \"\", \"\"\n\n        try:\n            url = reverse(\n                \"%s:%s_%s_change\"\n                % (\n                    self.admin_site.name,\n                    obj._meta.app_label,\n                    obj._meta.object_name.lower(),\n                ),\n                args=(obj.pk,),\n            )\n        except NoReverseMatch:\n            url = \"\"  # Admin not registered for target model.\n\n        return Truncator(obj).words(14), url",
                "filename": "django/contrib/admin/widgets.py",
                "start_index": 3966,
                "end_index": 6906,
                "start_line": 131,
                "end_line": 212,
                "max_line": 595,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "\"\"\"\n        Hook for specifying the form Field instance for a given database Field\n        instance.\n\n        If kwargs are given, they're passed to the form Field's constructor.\n        \"\"\"\n        # If the field specifies choices, we don't need to look for special\n        # admin widgets - we just need to use a select widget of some kind.\n        if db_field.choices:\n            return self.formfield_for_choice_field(db_field, request, **kwargs)\n\n        # ForeignKey or ManyToManyFields\n        if isinstance(db_field, (models.ForeignKey, models.ManyToManyField)):\n            # Combine the field kwargs with any options for formfield_overrides.\n            # Make sure the passed in **kwargs override anything in\n            # formfield_overrides because **kwargs is more specific, and should\n            # always win.\n            if db_field.__class__ in self.formfield_overrides:\n                kwargs = {**self.formfield_overrides[db_field.__class__], **kwargs}\n\n            # Get the correct formfield.\n            if isinstance(db_field, models.ForeignKey):\n                formfield = self.formfield_for_foreignkey(db_field, request, **kwargs)\n            elif isinstance(db_field, models.ManyToManyField):\n                formfield = self.formfield_for_manytomany(db_field, request, **kwargs)\n\n            # For non-raw_id fields, wrap the widget with a wrapper that adds\n            # extra HTML -- the \"add other\" interface -- to the end of the\n            # rendered output. formfield can be None if it came from a\n            # OneToOneField with parent_link=True or a M2M intermediary.\n            if formfield and db_field.name not in self.raw_id_fields:\n                try:\n                    related_modeladmin = self.admin_site.get_model_admin(\n                        db_field.remote_field.model\n                    )\n                except NotRegistered:\n                    wrapper_kwargs = {}\n                else:\n                    wrapper_kwargs = {\n                        \"can_add_related\": related_modeladmin.has_add_permission(\n                            request\n                        ),\n                        \"can_change_related\": related_modeladmin.has_change_permission(\n                            request\n                        ),\n                        \"can_delete_related\": related_modeladmin.has_delete_permission(\n                            request\n                        ),\n                        \"can_view_related\": related_modeladmin.has_view_permission(\n                            request\n                        ),\n                    }\n                formfield.widget = widgets.RelatedFieldWidgetWrapper(\n                    formfield.widget,\n                    db_field.remote_field,\n                    self.admin_site,\n                    **wrapper_kwargs,\n                )\n\n            return formfield\n\n        # If we've got overrides for the formfield defined, use 'em. **kwargs",
                "filename": "django/contrib/admin/options.py",
                "start_index": 5042,
                "end_index": 7995,
                "start_line": 125,
                "end_line": 218,
                "max_line": 2529,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "class ChoiceWidget(Widget):",
                "filename": "django/forms/widgets.py",
                "start_index": 19254,
                "end_index": 19281,
                "start_line": 612,
                "end_line": 612,
                "max_line": 1200,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "class ManyToManyField(RelatedField):",
                "filename": "django/db/models/fields/related.py",
                "start_index": 48416,
                "end_index": 48452,
                "start_line": 1324,
                "end_line": 1324,
                "max_line": 2005,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "def formfield_for_dbfield(self, db_field, request, **kwargs):",
                "filename": "django/contrib/admin/options.py",
                "start_index": 4972,
                "end_index": 5033,
                "start_line": 156,
                "end_line": 156,
                "max_line": 2529,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "django/contrib/admin/options.py": [
                {
                    "chunk": {
                        "code": "def formfield_for_manytomany(self, db_field, request, **kwargs):\n        \"\"\"\n        Get a form Field for a ManyToManyField.\n        \"\"\"\n        # If it uses an intermediary model that isn't auto created, don't show\n        # a field in admin.\n        if not db_field.remote_field.through._meta.auto_created:\n            return None\n        db = kwargs.get(\"using\")\n\n        if \"widget\" not in kwargs:\n            autocomplete_fields = self.get_autocomplete_fields(request)\n            if db_field.name in autocomplete_fields:\n                kwargs[\"widget\"] = AutocompleteSelectMultiple(\n                    db_field,\n                    self.admin_site,\n                    using=db,\n                )\n            elif db_field.name in self.raw_id_fields:\n                kwargs[\"widget\"] = widgets.ManyToManyRawIdWidget(\n                    db_field.remote_field,\n                    self.admin_site,\n                    using=db,\n                )\n            elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:\n                kwargs[\"widget\"] = widgets.FilteredSelectMultiple(\n                    db_field.verbose_name, db_field.name in self.filter_vertical\n                )\n        if \"queryset\" not in kwargs:\n            queryset = self.get_field_queryset(db, db_field, request)\n            if queryset is not None:\n                kwargs[\"queryset\"] = queryset\n\n        form_field = db_field.formfield(**kwargs)\n        if (\n            isinstance(form_field.widget, SelectMultiple)\n            and form_field.widget.allow_multiple_selected\n            and not isinstance(\n                form_field.widget, (CheckboxSelectMultiple, AutocompleteSelectMultiple)\n            )\n        ):\n            msg = _(\n                \"Hold down \u201cControl\u201d, or \u201cCommand\u201d on a Mac, to select more than one.\"\n            )\n            help_text = form_field.help_text\n            form_field.help_text = (\n                format_lazy(\"{} {}\", help_text, msg) if help_text else msg\n            )\n        return form_field\n\n    def get_autocomplete_fields(self, request):\n        \"\"\"\n        Return a list of ForeignKey and/or ManyToMany fields which should use\n        an autocomplete widget.\n        \"\"\"\n        return self.autocomplete_fields\n\n    def get_view_on_site_url(self, obj=None):\n        if obj is None or not self.view_on_site:\n            return None\n\n        if callable(self.view_on_site):\n            return self.view_on_site(obj)\n        elif hasattr(obj, \"get_absolute_url\"):\n            # use the ContentType lookup if view_on_site is True\n            return reverse(\n                \"admin:view_on_site\",\n                kwargs={\n                    \"content_type_id\": get_content_type_for_model(obj).pk,\n                    \"object_id\": obj.pk,\n                },\n                current_app=self.admin_site.name,\n            )\n\n    de",
                        "filename": "django/contrib/admin/options.py",
                        "start_index": 11231,
                        "end_index": 14103,
                        "start_line": 297,
                        "end_line": 2516,
                        "max_line": 2529,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the formfield_for_manytomany function where the widget parameter is set, which is directly related to the issue."
                },
                {
                    "chunk": {
                        "code": "\"\"\"\n        Hook for specifying the form Field instance for a given database Field\n        instance.\n\n        If kwargs are given, they're passed to the form Field's constructor.\n        \"\"\"\n        # If the field specifies choices, we don't need to look for special\n        # admin widgets - we just need to use a select widget of some kind.\n        if db_field.choices:\n            return self.formfield_for_choice_field(db_field, request, **kwargs)\n\n        # ForeignKey or ManyToManyFields\n        if isinstance(db_field, (models.ForeignKey, models.ManyToManyField)):\n            # Combine the field kwargs with any options for formfield_overrides.\n            # Make sure the passed in **kwargs override anything in\n            # formfield_overrides because **kwargs is more specific, and should\n            # always win.\n            if db_field.__class__ in self.formfield_overrides:\n                kwargs = {**self.formfield_overrides[db_field.__class__], **kwargs}\n\n            # Get the correct formfield.\n            if isinstance(db_field, models.ForeignKey):\n                formfield = self.formfield_for_foreignkey(db_field, request, **kwargs)\n            elif isinstance(db_field, models.ManyToManyField):\n                formfield = self.formfield_for_manytomany(db_field, request, **kwargs)\n\n            # For non-raw_id fields, wrap the widget with a wrapper that adds\n            # extra HTML -- the \"add other\" interface -- to the end of the\n            # rendered output. formfield can be None if it came from a\n            # OneToOneField with parent_link=True or a M2M intermediary.\n            if formfield and db_field.name not in self.raw_id_fields:\n                try:\n                    related_modeladmin = self.admin_site.get_model_admin(\n                        db_field.remote_field.model\n                    )\n                except NotRegistered:\n                    wrapper_kwargs = {}\n                else:\n                    wrapper_kwargs = {\n                        \"can_add_related\": related_modeladmin.has_add_permission(\n                            request\n                        ),\n                        \"can_change_related\": related_modeladmin.has_change_permission(\n                            request\n                        ),\n                        \"can_delete_related\": related_modeladmin.has_delete_permission(\n                            request\n                        ),\n                        \"can_view_related\": related_modeladmin.has_view_permission(\n                            request\n                        ),\n                    }\n                formfield.widget = widgets.RelatedFieldWidgetWrapper(\n                    formfield.widget,\n                    db_field.remote_field,\n                    self.admin_site,\n                    **wrapper_kwargs,\n                )\n\n            return formfield\n\n        # If we've got overrides for the formfield defined, use 'em. **kwargs",
                        "filename": "django/contrib/admin/options.py",
                        "start_index": 5042,
                        "end_index": 7995,
                        "start_line": 125,
                        "end_line": 218,
                        "max_line": 2529,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet shows how formfield_for_manytomany is used within the context of formfield_for_dbfield, which may be relevant for understanding how the widget parameter is handled."
                },
                {
                    "chunk": {
                        "code": "# by adding to ModelAdmin.formfield_overrides.\n\nFORMFIELD_FOR_DBFIELD_DEFAULTS = {\n    models.DateTimeField: {\n        \"form_class\": forms.SplitDateTimeField,\n        \"widget\": widgets.AdminSplitDateTime,\n    },\n    models.DateField: {\"widget\": widgets.AdminDateWidget},\n    models.TimeField: {\"widget\": widgets.AdminTimeWidget},\n    models.TextField: {\"widget\": widgets.AdminTextareaWidget},\n    models.URLField: {\"widget\": widgets.AdminURLFieldWidget},\n    models.IntegerField: {\"widget\": widgets.AdminIntegerFieldWidget},\n    models.BigIntegerField: {\"widget\": widgets.AdminBigIntegerFieldWidget},\n    models.CharField: {\"widget\": widgets.AdminTextInputWidget},\n    models.ImageField: {\"widget\": widgets.AdminFileWidget},\n    models.FileField: {\"widget\": widgets.AdminFileWidget},\n    models.EmailField: {\"widget\": widgets.AdminEmailInputWidget},\n    models.UUIDField: {\"widget\": widgets.AdminUUIDInputWidget},\n}\n\ncsrf_protect_m = method_decorator(csrf_protect)",
                        "filename": "django/contrib/admin/options.py",
                        "start_index": 2992,
                        "end_index": 3956,
                        "start_line": 101,
                        "end_line": 121,
                        "max_line": 2529,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet shows the FORMFIELD_FOR_DBFIELD_DEFAULTS which might be relevant if the default widget needs to be overridden for ManyToManyField."
                }
            ]
        },
        "solution_task": "- Modify the `formfield_for_manytomany` method in `django/contrib/admin/options.py` to handle the `widget` parameter correctly by setting the `formfield.widget` to `kwargs['widget']` if provided:\n\n```python\ndef formfield_for_manytomany(self, db_field, request, **kwargs):\n    # ... existing implementation ...\n\n    if \"widget\" in kwargs:\n        form_field.widget = kwargs['widget']\n    else:\n        # existing logic to determine the widget\n        if db_field.name in autocomplete_fields:\n            kwargs[\"widget\"] = AutocompleteSelectMultiple(\n                db_field,\n                self.admin_site,\n                using=db,\n            )\n        # ... rest of the existing logic ...\n\n    # ... rest of the existing method ...\n    return form_field\n```",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable solution to the problem described in the PROMPT by suggesting a modification to the `formfield_for_manytomany` method to handle the `widget` parameter correctly. It includes a code snippet that demonstrates how to implement the change, which is directly relevant to the issue of the widget parameter not being respected in the current implementation. Additionally, the RESPONSE provides links to the relevant sections of the codebase, which could be extremely helpful for someone looking to understand the context of the problem or to implement the suggested fix. The only reason it does not score a 10 is that it does not explicitly mention testing the change to ensure it does not introduce new issues, which is a critical step in bug fixing.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711731273.89342,
        "result": "- Modify the `formfield_for_manytomany` method in `django/contrib/admin/options.py` to handle the `widget` parameter correctly by setting the `formfield.widget` to `kwargs['widget']` if provided:\n\n```python\ndef formfield_for_manytomany(self, db_field, request, **kwargs):\n    # ... existing implementation ...\n\n    if \"widget\" in kwargs:\n        form_field.widget = kwargs['widget']\n    else:\n        # existing logic to determine the widget\n        if db_field.name in autocomplete_fields:\n            kwargs[\"widget\"] = AutocompleteSelectMultiple(\n                db_field,\n                self.admin_site,\n                using=db,\n            )\n        # ... rest of the existing logic ...\n\n    # ... rest of the existing method ...\n    return form_field\n```\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__3.1/tree//django) \u2192 [contrib](https://github.com/testbed/django__django__3.1/tree//django/contrib) \u2192 [admin](https://github.com/testbed/django__django__3.1/tree//django/contrib/admin)- [Lines 297 - 2516](https://github.com/testbed/django__django__3.1/blob//django/contrib/admin/options.py#L297-L2516)\n\n This snippet contains the formfield_for_manytomany function where the widget parameter is set, which is directly related to the issue. \n\n\n   - [Lines 125 - 218](https://github.com/testbed/django__django__3.1/blob//django/contrib/admin/options.py#L125-L218)\n\n This snippet shows how formfield_for_manytomany is used within the context of formfield_for_dbfield, which may be relevant for understanding how the widget parameter is handled. \n\n\n   - [Lines 101 - 121](https://github.com/testbed/django__django__3.1/blob//django/contrib/admin/options.py#L101-L121)\n\n This snippet shows the FORMFIELD_FOR_DBFIELD_DEFAULTS which might be relevant if the default widget needs to be overridden for ManyToManyField."
    }
}