{
    "id": "matplotlib__matplotlib-21550",
    "repo_name": "testbed/matplotlib__matplotlib__3.4",
    "task_id": 4604735961100785690,
    "title": "[Bug]: this example shows ok on matplotlib-3.4.3, but not in matplotlib-3.5.0 master of october 30th",
    "body": "### Bug summary\r\n\r\nthe display is not working well if swaping matplotlib-3.4.3 with matplotlib-3.5.0.dev2445+gb09aad279b, all the rest being strictly equal.\r\nit was also bad with rc1, so I tested with last master, thanks to the artefact generation\r\n\r\n### Code for reproduction\r\non jupyterlab\r\n\r\n```python\r\n\r\n\r\n`\r\n%matplotlib inline\r\nfrom ipywidgets import interact\r\nimport matplotlib.pyplot as plt\r\nimport networkx as nx\r\n# wrap a few graph generation functions so they have the same signature\r\n\r\ndef random_lobster(n, m, k, p):\r\n    return nx.random_lobster(n, p, p / m)\r\n\r\ndef powerlaw_cluster(n, m, k, p):\r\n    return nx.powerlaw_cluster_graph(n, m, p)\r\n\r\ndef erdos_renyi(n, m, k, p):\r\n    return nx.erdos_renyi_graph(n, p)\r\n\r\ndef newman_watts_strogatz(n, m, k, p):\r\n    return nx.newman_watts_strogatz_graph(n, k, p)\r\n\r\n@interact(n=(2,30), m=(1,10), k=(1,10), p=(0.0, 1.0, 0.001),\r\n        generator={'lobster': random_lobster,\r\n                   'power law': powerlaw_cluster,\r\n                   'Newman-Watts-Strogatz': newman_watts_strogatz,\r\n                   u'Erd\u0151s-R\u00e9nyi': erdos_renyi,\r\n                   })\r\ndef plot_random_graph(n, m, k, p, generator):\r\n    g = generator(n, m, k, p)\r\n    nx.draw(g)\r\n    plt.title(generator.__name__)\r\n    plt.show()\r\n    ````\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n![image](https://user-images.githubusercontent.com/4312421/139675032-1c89dac9-9975-4379-b390-8fe7317e8fcb.png)\r\n\r\n\r\n### Expected outcome\r\n\r\n![image](https://user-images.githubusercontent.com/4312421/139675329-980a0007-8533-41a6-9686-bb1b9e835d36.png)\r\n\r\n\r\n### Operating system\r\n\r\nWindows 10\r\n\r\n### Matplotlib Version\r\n\r\nmatplotlib-3.5.0.dev2445+gb09aad279b-cp39-cp39-win_amd64.whl\r\n\r\n### Matplotlib Backend\r\n\r\nmodule://matplotlib_inline.backend_inline\r\n\r\n### Python version\r\n\r\nPython 3.9.7\r\n\r\n### Jupyter version\r\n\r\n3.2.1\r\n\r\n### Other libraries\r\n\r\nwheels from cgohlke when binaries, except the  matplotlib-master from https://pipelines.actions.githubusercontent.com/radNkCxZv5fwMgK3hRdEtEflfPA62ntLWJUtB75BrsUZ7MmN7K/_apis/pipelines/1/runs/264026/signedartifactscontent?artifactName=wheels&urlExpires=2021-11-01T10%3A56%3A22.6171739Z&urlSigningMethod=HMACV1&urlSignature=0AaHHaQnK512QOq6OgHWoS%2FvuqsCMZseoyfIWyE6y6c%3D\r\n\r\npip list:\r\n<details>\r\nPackage                           Version\r\n--------------------------------- ------------------\r\nadodbapi                          2.6.1.3\r\naffine                            2.3.0\r\naiofiles                          0.6.0\r\naiohttp                           3.7.4.post0\r\naiosqlite                         0.17.0\r\nalabaster                         0.7.12\r\nalgopy                            0.5.7\r\naltair                            4.1.0\r\naltair-data-server                0.4.1\r\naltair-transform                  0.2.0\r\naltair-widgets                    0.2.2\r\naltgraph                          0.17.2\r\namply                             0.1.4\r\naniso8601                         7.0.0\r\nansiwrap                          0.8.4\r\nanyio                             3.3.4\r\nappdirs                           1.4.4\r\nargon2-cffi                       21.1.0\r\narrow                             1.2.1\r\nasciitree                         0.3.3\r\nasgi-csrf                         0.9\r\nasgiref                           3.4.1\r\nasn1crypto                        1.4.0\r\nasteval                           0.9.25\r\nastor                             0.8.1\r\nastroid                           2.6.6\r\nastroML                           1.0.1\r\nastropy                           4.3.1\r\nasync-generator                   1.10\r\nasync-timeout                     3.0.1\r\natomicwrites                      1.4.0\r\nattrs                             21.2.0\r\nautopep8                          1.5.7\r\nBabel                             2.9.1\r\nbackcall                          0.2.0\r\nbackports-abc                     0.5\r\nbackports.entry-points-selectable 1.1.0\r\nbaresql                           0.7.6\r\nbase58                            2.0.0\r\nbcrypt                            3.2.0\r\nbeautifulsoup4                    4.10.0\r\nbinaryornot                       0.4.4\r\nblack                             21.9b0\r\nbleach                            4.1.0\r\nblinker                           1.4\r\nblis                              0.7.5\r\nblosc                             1.10.6\r\nbloscpack                         0.16.0\r\nbokeh                             2.4.1\r\nbotorch                           0.4.0\r\nBottleneck                        1.3.2\r\nbqplot                            0.12.31\r\nbranca                            0.4.2\r\nbrewer2mpl                        1.4.1\r\nBrotli                            1.0.9\r\ncachelib                          0.3.0\r\ncachetools                        4.2.4\r\nCartopy                           0.20.1\r\ncatalogue                         2.0.6\r\ncertifi                           2021.10.8\r\ncffi                              1.15.0\r\ncftime                            1.5.1.1\r\nchardet                           4.0.0\r\ncharset-normalizer                2.0.7\r\nclick                             7.1.2\r\nclick-default-group               1.2.2\r\nclick-plugins                     1.1.1\r\ncligj                             0.7.2\r\ncloudpickle                       2.0.0\r\nclrmagic                          0.0.1a2\r\ncolorama                          0.4.4\r\ncolorcet                          2.0.6\r\ncookiecutter                      1.7.3\r\ncoverage                          6.0.2\r\ncramjam                           2.4.0\r\ncryptography                      35.0.0\r\ncsvs-to-sqlite                    1.2\r\ncvxopt                            1.2.7\r\ncvxpy                             1.1.15\r\ncx-Freeze                         6.5.3\r\ncycler                            0.11.0\r\ncymem                             2.0.6\r\nCython                            0.29.24\r\ncytoolz                           0.11.0\r\ndash                              2.0.0\r\ndash-core-components              2.0.0\r\ndash-html-components              2.0.0\r\ndash-table                        5.0.0\r\ndask                              2021.10.0\r\ndask-glm                          0.2.0\r\ndask-image                        0.6.0\r\ndask-labextension                 5.1.0\r\ndask-ml                           2021.10.17\r\ndask-searchcv                     0.2.0\r\ndatabases                         0.4.1\r\ndatasette                         0.59.1\r\ndatasette-graphql                 1.5\r\ndatashader                        0.13.0\r\ndatashape                         0.5.2\r\ndateparser                        1.1.0\r\ndateutils                         0.6.12\r\ndb.py                             0.5.4b1\r\ndebugpy                           1.5.1\r\ndecorator                         4.4.2\r\ndefusedxml                        0.7.1\r\nDeprecated                        1.2.13\r\ndeprecation                       2.1.0\r\ndescartes                         1.1.0\r\ndiff-match-patch                  20200713\r\ndistlib                           0.3.3\r\ndistributed                       2021.10.0\r\ndocopt                            0.6.2\r\ndocrepr                           0.1.1\r\ndocutils                          0.17.1\r\necos                              2.0.7.post1\r\nemcee                             3.1.1\r\nentrypoints                       0.3\r\net-xmlfile                        1.1.0\r\nfast-histogram                    0.10\r\nfastai                            2.5.3\r\nfastapi                           0.70.0\r\nfastcore                          1.3.26\r\nfastdownload                      0.0.5\r\nfasteners                         0.16.3\r\nfastparquet                       0.7.1\r\nfastprogress                      1.0.0\r\nfeather-format                    0.4.1\r\nfilelock                          3.3.2\r\nFiona                             1.8.20\r\nflake8                            3.9.2\r\nFlask                             2.0.2\r\nflask-accepts                     0.18.4\r\nFlask-Compress                    1.10.1\r\nFlask-Cors                        3.0.10\r\nFlask-Mail                        0.9.1\r\nflask-restx                       0.5.1\r\nFlask-Session                     0.4.0\r\nFlask-SQLAlchemy                  2.5.1\r\nflaskerize                        0.14.0\r\nflatbuffers                       2.0\r\nflit                              3.4.0\r\nflit_core                         3.4.0\r\nfolium                            0.12.1\r\nfonttools                         4.27.1\r\nformlayout                        1.2.1a1\r\nfs                                2.4.13\r\nfsspec                            2021.10.1\r\nfuture                            0.18.2\r\nfuzzywuzzy                        0.18.0\r\nGDAL                              3.3.3\r\ngeographiclib                     1.52\r\ngeopandas                         0.10.2\r\ngeopy                             2.2.0\r\ngeoviews                          1.9.2\r\ngitdb                             4.0.9\r\nGitPython                         3.1.24\r\ngmpy2                             2.0.8\r\ngpytorch                          1.5.1\r\ngraphene                          2.1.9\r\ngraphql-core                      2.3.1\r\ngraphql-relay                     2.0.1\r\ngreat-expectations                0.13.36\r\ngreenlet                          1.1.2\r\nguidata                           1.8.1a0\r\nguiqwt                            3.0.7\r\nh11                               0.12.0\r\nh2                                4.1.0\r\nh5py                              3.5.0\r\nHeapDict                          1.0.1\r\nholoviews                         1.14.6\r\nhpack                             4.0.0\r\nhtml5lib                          1.1\r\nhttpcore                          0.13.7\r\nhttpie                            2.6.0\r\nhttpx                             0.20.0\r\nhupper                            1.10.3\r\nhusl                              4.0.3\r\nhvplot                            0.7.3\r\nHypercorn                         0.11.2\r\nhyperframe                        6.0.1\r\nhypothesis                        6.24.0\r\nibis-framework                    1.4.0\r\nidlex                             1.18\r\nidna                              3.1\r\nimageio                           2.10.1\r\nimageio-ffmpeg                    0.4.2\r\nimagesize                         1.2.0\r\nimbalanced-learn                  0.8.1\r\nimportlib-metadata                4.8.0\r\ninflection                        0.5.1\r\niniconfig                         1.1.1\r\nintake                            0.6.2\r\nintervaltree                      3.0.2\r\nipycanvas                         0.9.1\r\nipykernel                         6.4.2\r\nipyleaflet                        0.14.0\r\nipympl                            0.8.2\r\nipython                           7.29.0\r\nipython-genutils                  0.2.0\r\nipython-sql                       0.4.1b1\r\nipywidgets                        7.6.5\r\nisort                             5.9.3\r\nitsdangerous                      2.0.1\r\njanus                             0.6.2\r\njedi                              0.18.0\r\nJinja2                            3.0.2\r\njinja2-time                       0.2.0\r\njoblib                            1.1.0\r\njson5                             0.9.6\r\njsonpatch                         1.32\r\njsonpointer                       2.1\r\njsonschema                        4.1.2\r\njulia                             0.5.7\r\njupyter                           1.0.0\r\njupyter-bokeh                     3.0.4\r\njupyter-client                    6.2.0\r\njupyter-console                   6.4.0\r\njupyter-core                      4.9.1\r\njupyter-lsp                       1.5.0\r\njupyter-packaging                 0.11.0\r\njupyter-server                    1.11.1\r\njupyter-server-mathjax            0.2.3\r\njupyter-server-proxy              3.1.0\r\njupyter-sphinx                    0.3.2\r\njupyterlab                        3.2.1\r\njupyterlab-git                    0.33.0\r\njupyterlab-launcher               0.13.1\r\njupyterlab-lsp                    3.9.1\r\njupyterlab-pygments               0.1.2\r\njupyterlab-server                 2.8.2\r\njupyterlab-widgets                1.0.2Note: you may need to restart the kernel to use updated packages.\r\nkeyring                           23.2.1\r\nkiwisolver                        1.3.2\r\nlazy-object-proxy                 1.6.0\r\nllvmlite                          0.37.0\r\nlmfit                             1.0.3\r\nlocket                            0.2.1\r\nloky                              3.0.0\r\nlxml                              4.6.3\r\nlz4                               3.1.3\r\nMarkdown                          3.3.4\r\nMarkupSafe                        2.0.1\r\nmarshmallow                       3.12.1\r\nmatplotlib                        3.4.3\r\nmatplotlib-inline                 0.1.3\r\nmaturin                           0.11.5\r\nmccabe                            0.6.1\r\nmercantile                        1.2.1\r\nmergedeep                         1.3.4\r\nmetakernel                        0.27.5\r\nmistune                           0.8.4\r\nmizani                            0.7.3\r\nmkl-service                       2.4.0\r\nmlxtend                           0.18.0\r\nmoviepy                           1.0.3\r\nmpl-scatter-density               0.7\r\nmpld3                             0.5.5\r\nmpldatacursor                     0.7.1\r\nmpmath                            1.2.1\r\nmsgpack                           1.0.2\r\nmsvc-runtime                      14.29.30133\r\nmultidict                         5.2.0\r\nmultipledispatch                  0.6.0\r\nmunch                             2.5.0\r\nmurmurhash                        1.0.6\r\nmypy                              0.910\r\nmypy-extensions                   0.4.3\r\nmysql-connector-python            8.0.26\r\nnbclassic                         0.3.4\r\nnbclient                          0.5.4\r\nnbconvert                         6.2.0\r\nnbconvert_reportlab               0.2\r\nnbdime                            3.1.1\r\nnbformat                          5.1.3\r\nnbval                             0.9.6\r\nnest-asyncio                      1.5.1\r\nnetCDF4                           1.5.8\r\nnetworkx                          2.6.3\r\nNLopt                             2.7.0\r\nnltk                              3.6.5\r\nnotebook                          6.4.5\r\nnumba                             0.54.1\r\nnumcodecs                         0.9.1\r\nnumdifftools                      0.9.40\r\nnumexpr                           2.7.3\r\nnumpy                             1.20.3+mkl\r\nnumpydoc                          1.1.0\r\noct2py                            5.2.0\r\noctave-kernel                     0.32.0\r\nonnxruntime                       1.9.0\r\nopenpyxl                          3.0.9\r\n\r\norjson                            3.6.4\r\nosqp                              0.6.2.post0\r\noutcome                           1.1.0\r\npackaging                         21.2\r\npalettable                        3.3.0\r\npandas                            1.3.4\r\npandas-datareader                 0.10.0\r\npandocfilters                     1.5.0\r\npanel                             0.12.4\r\npapermill                         2.3.3\r\nparam                             1.12.0\r\nparambokeh                        0.2.3\r\nparamiko                          2.8.0\r\nparamnb                           2.0.4\r\nparso                             0.8.2\r\npartd                             1.2.0\r\npathspec                          0.9.0\r\npathy                             0.6.1\r\npatsy                             0.5.2\r\npdfrw                             0.4\r\npdvega                            0.2.1.dev0\r\npefile                            2021.9.3\r\npep8                              1.7.1\r\npexpect                           4.8.0\r\npg8000                            1.21.1\r\npickleshare                       0.7.5\r\nPillow                            8.4.0\r\nPIMS                              0.5\r\nPint                              0.18\r\npip                               21.3.1\r\npipdeptree                        2.2.0\r\npkginfo                           1.7.1\r\nplatformdirs                      2.4.0\r\nplotly                            5.3.1\r\nplotnine                          0.8.0\r\npluggy                            1.0.0\r\nply                               3.11\r\nportpicker                        1.4.0\r\npoyo                              0.5.0\r\nppci                              0.5.8\r\npreshed                           3.0.6\r\nprettytable                       2.2.1\r\npriority                          2.0.0\r\nproglog                           0.1.9\r\nprometheus-client                 0.12.0\r\npromise                           2.3\r\nprompt-toolkit                    3.0.21\r\nprotobuf                          4.0.0rc1\r\npsutil                            5.8.0\r\nptpython                          3.0.20\r\nptyprocess                        0.7.0\r\nPuLP                              2.3\r\npy                                1.10.0\r\npy-lru-cache                      0.1.4\r\npyaml                             20.4.0\r\npyarrow                           6.0.0\r\nPyAudio                           0.2.11\r\npybars3                           0.9.7\r\npybind11                          2.8.1\r\npycodestyle                       2.7.0\r\npycosat                           0.6.3\r\npycparser                         2.20\r\npyct                              0.4.8\r\npydantic                          1.8.2\r\npydeck                            0.7.1\r\npydocstyle                        6.1.1\r\npyepsg                            0.4.0\r\npyerfa                            2.0.0\r\npyflakes                          2.3.1\r\npyflux                            0.4.17\r\npygame                            2.0.3\r\npygbm                             0.1.0\r\nPygments                          2.10.0\r\npyhdf                             0.10.3\r\npyinstaller                       4.5.1\r\npyinstaller-hooks-contrib         2021.3\r\npylint                            2.9.6\r\npyls-spyder                       0.4.0\r\npymc                              2.3.8\r\nPyMeta3                           0.5.1\r\npymongo                           3.12.1\r\nPyNaCl                            1.4.0\r\npynndescent                       0.5.5\r\npyodbc                            4.0.32\r\nPyOpenGL                          3.1.5\r\npypandoc                          1.5\r\npyparsing                         2.4.7\r\npyproj                            3.2.1\r\nPyQt5                             5.15.1\r\nPyQt5-sip                         12.8.1\r\npyqt5-tools                       5.15.1.1.7.5.post3\r\npyqtgraph                         0.12.2\r\nPyQtWebEngine                     5.15.1\r\npyrsistent                        0.18.0\r\npyserial                          3.5\r\npyshp                             2.1.3\r\nPySocks                           1.7.1\r\npystache                          0.5.4\r\npytest                            6.2.5\r\npython-baseconv                   1.2.2\r\npython-dateutil                   2.8.2\r\npython-dotenv                     0.19.1\r\npython-hdf4                       0.10.0+dummy\r\npython-Levenshtein                0.12.2\r\npython-lsp-black                  1.0.0\r\npython-lsp-jsonrpc                1.0.0\r\npython-lsp-server                 1.2.4\r\npython-multipart                  0.0.5\r\npython-picard                     0.7\r\npython-slugify                    5.0.2\r\npython-snappy                     0.6.0\r\npythonnet                         2.5.2\r\nPythonQwt                         0.9.2\r\npytz                              2021.3\r\npyviz-comms                       2.1.0\r\nPyWavelets                        1.1.1\r\npywin32                           302\r\npywin32-ctypes                    0.2.0\r\npywinpty                          1.1.5\r\npywinusb                          0.4.2\r\nPyYAML                            6.0\r\npyzmq                             22.3.0\r\npyzo                              4.11.3a1\r\nQDarkStyle                        3.0.2\r\nqdldl                             0.1.5.post0\r\nqpsolvers                         1.7.0\r\nqstylizer                         0.2.1\r\nQtAwesome                         1.0.3\r\nqtconsole                         5.1.1\r\nQtPy                              2.0.0.dev0\r\nquadprog                          0.1.8\r\nquantecon                         0.5.1\r\nQuart                             0.15.1\r\nrasterio                          1.2.10\r\nreadme-renderer                   30.0\r\nredis                             3.5.3\r\nregex                             2021.10.23\r\nreportlab                         3.6.2\r\nrequests                          2.26.0\r\nrequests-toolbelt                 0.9.1\r\nrequests-unixsocket               0.2.0\r\nrfc3986                           1.5.0\r\nrise                              5.7.1\r\nrope                              0.21.0\r\nrpy2                              3.4.0.dev0\r\nRtree                             0.9.7\r\nruamel.yaml                       0.17.15\r\nruamel.yaml.clib                  0.2.6\r\nRx                                1.6.1\r\nscikit-fuzzy                      0.4.1\r\nscikit-image                      0.18.3\r\nscikit-learn                      1.0.1\r\nscikit-optimize                   0.9.0\r\nscilab2py                         0.6.2\r\nscipy                             1.7.1\r\nscramp                            1.4.1\r\nscs                               2.1.4\r\nseaborn                           0.11.2\r\nSend2Trash                        1.8.0\r\nsetuptools                        58.3.0\r\nsetuptools-scm                    6.3.2\r\nshap                              0.39.0\r\nShapely                           1.8.0\r\nsimpervisor                       0.4\r\nsimplegeneric                     0.8.1\r\nsimplejson                        3.17.5\r\nsimpy                             4.0.1\r\nsix                               1.16.0\r\nsklearn-contrib-lightning         0.6.1\r\nslicer                            0.0.7\r\nslicerator                        1.0.0\r\nsmart-open                        5.2.1\r\nsmmap                             5.0.0\r\nsnakeviz                          2.1.0\r\nsniffio                           1.2.0\r\nsnowballstemmer                   2.1.0\r\nsnuggs                            1.4.7\r\nsortedcontainers                  2.4.0\r\nsounddevice                       0.4.3\r\nsoupsieve                         2.2.1\r\nspacy                             3.1.3\r\nspacy-legacy                      3.0.8\r\nSphinx                            4.2.0\r\nsphinx-rtd-theme                  1.0.0\r\nsphinxcontrib-applehelp           1.0.2\r\nsphinxcontrib-devhelp             1.0.2\r\nsphinxcontrib-htmlhelp            2.0.0\r\nsphinxcontrib-jsmath              1.0.1\r\nsphinxcontrib-qthelp              1.0.3\r\nsphinxcontrib-serializinghtml     1.1.5\r\nspyder                            5.1.5\r\nspyder-kernels                    2.1.3\r\nSQLAlchemy                        1.4.26\r\nsqlite-bro                        0.12.1\r\nsqlite-fts4                       1.0.1\r\nsqlite-utils                      3.17.1\r\nsqlparse                          0.4.2\r\nsrsly                             2.4.2\r\nstarlette                         0.16.0\r\nstatsmodels                       0.13.0\r\nstreamlit                         1.1.0\r\nstreamz                           0.6.3\r\nsupersmoother                     0.4\r\nsympy                             1.9\r\ntables                            3.6.1\r\ntabulate                          0.8.9\r\ntblib                             1.7.0\r\ntenacity                          8.0.1\r\ntermcolor                         1.1.0\r\nterminado                         0.12.1\r\ntestpath                          0.5.0\r\ntext-unidecode                    1.3\r\ntextdistance                      4.2.2\r\ntextwrap3                         0.9.2\r\nthinc                             8.0.12\r\nthreadpoolctl                     3.0.0\r\nthree-merge                       0.1.1\r\nthrift                            0.15.0\r\ntifffile                          2021.10.12\r\ntinycss2                          1.1.0\r\ntoml                              0.10.2\r\ntomli                             1.2.2\r\ntomli_w                           0.4.0\r\ntomlkit                           0.7.2\r\ntoolz                             0.11.1\r\ntorch                             1.10.0\r\ntorchaudio                        0.10.0\r\ntorchvision                       0.11.1\r\ntornado                           6.1\r\ntqdm                              4.62.3\r\ntraitlets                         5.1.1\r\ntraittypes                        0.2.1\r\ntranquilizer                      0.5.1a1\r\ntrio                              0.19.0\r\ntrio-asyncio                      0.12.0\r\ntwine                             3.4.2\r\ntwitter                           1.19.2\r\ntyper                             0.4.0\r\ntyping-extensions                 3.10.0.2\r\ntzlocal                           2.1\r\nujson                             4.2.0\r\numap-learn                        0.5.1\r\nuncertainties                     3.1.6\r\nurllib3                           1.26.7\r\nuvicorn                           0.15.0\r\nvalidators                        0.18.2\r\nvega                              3.5.0\r\nvega-datasets                     0.9.0\r\nvirtualenv                        20.9.0\r\nViTables                          3.0.2\r\nvoila                             0.2.16\r\nvoila-gridstack                   0.2.0\r\nwasabi                            0.8.2\r\nwasmer                            1.0.0\r\nwasmer_compiler_cranelift         1.0.0\r\nwasmer_compiler_singlepass        1.0.0\r\nwatchdog                          2.1.5\r\nwcwidth                           0.2.5\r\nwebencodings                      0.5.1\r\nwebsocket-client                  1.2.1\r\nWerkzeug                          2.0.2\r\nwheel                             0.37.0\r\nwidgetsnbextension                3.5.2\r\nwinpython                         4.6.20211017\r\nwinrt                             1.0.21033.1\r\nwordcloud                         1.8.1\r\nwrapt                             1.12.1\r\nwsproto                           1.0.0\r\nxarray                            0.19.0\r\nXlsxWriter                        3.0.1\r\nxlwings                           0.24.7\r\nyapf                              0.31.0\r\nyarl                              1.7.0\r\nzarr                              2.10.2\r\nzict                              2.0.0\r\nzipp                              3.6.0\r\nzstandard                         0.16.0\r\n</details>\r\n### Installation\r\n\r\npip\r\n\r\n### Conda channel\r\n\r\n_No response_\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/matplotlib__matplotlib__3.4.git",
    "requested_commit": "",
    "mayil_response": "Doesn't seem like we have fully grasped all the specifics of this ticket \ud83d\ude10.                   But we've outlined some ideas that might help you get started:\n\nBased on the provided information, the issue seems to be related to the rendering of graphs generated by `networkx` and displayed using `matplotlib` in a JupyterLab environment, particularly after upgrading Matplotlib from version 3.4.3 to 3.5.0.dev2445+gb09aad279b. The issue is visual and occurs on Windows 10 with Python 3.9.7, using the `matplotlib_inline.backend_inline` backend.\n\nTo address the issue:\n\n- Verify that the `matplotlib` and `networkx` libraries are correctly installed and are compatible with each other.\n- Ensure that the `%matplotlib inline` magic command is correctly placed at the beginning of the Jupyter notebook to configure the inline backend.\n- Check if the issue persists when using a different backend, such as `%matplotlib notebook` or `%matplotlib qt`, to isolate whether the problem is specific to the `inline` backend.\n- If the issue is specific to the `inline` backend, consider downgrading Matplotlib to the last known working version (3.4.3) as a temporary workaround.\n- Look for any open issues or bug reports on the Matplotlib GitHub repository that match the described problem. If none exist, consider opening a new issue with a detailed description and the error images.\n- As a last resort, if the issue is critical and no solution is found, consider using an alternative visualization library that is compatible with the JupyterLab environment and the current setup.\n\n### Code snippets to check\n\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.4/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.4/tree//lib/matplotlib)- [Lines 152 - 246](https://github.com/testbed/matplotlib__matplotlib__3.4/blob//lib/matplotlib/pyplot.py#L152-L246)\n\n This snippet from 'lib/matplotlib/pyplot.py' contains the function '_draw_all_if_interactive' which is part of the interactive display mechanism in Matplotlib. It is relevant because the issue may be related to how interactive figures are updated in JupyterLab when using the inline backend.\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.4/tree//galleries) \u2192 [users_explain](https://github.com/testbed/matplotlib__matplotlib__3.4/tree//galleries/users_explain) \u2192 [text](https://github.com/testbed/matplotlib__matplotlib__3.4/tree//galleries/users_explain/text)- [Lines 1 - 177](https://github.com/testbed/matplotlib__matplotlib__3.4/blob//galleries/users_explain/text/usetex.py#L1-L177)\n\n This snippet from 'galleries/users_explain/text/usetex.py' provides information on how Matplotlib uses LaTeX to render text, including the requirement to set 'text.usetex : True'. Since the issue involves a change in behavior when using LaTeX rendering between different Matplotlib versions, this snippet is relevant for understanding the expected configuration and behavior.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0035714999999999996,
        "snippet_processor": 0.16102,
        "issue_star_creation": 0.09400000000000001,
        "issue_star_solver": 0.10120000000000001,
        "bouncer": 0.08831000000000001
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711698538.1003132,
        "relevant_snippets": [
            {
                "code": "# To set up a development environment using conda run:\n#\n#   conda env create -f environment.yml\n#   conda activate mpl-dev\n#   pip install -e .\n#\nname: mpl-dev\nchannels:\n  - conda-forge\ndependencies:\n  # runtime dependencies\n  - cairocffi\n  - contourpy>=1.0.1\n  - cycler>=0.10.0\n  - fonttools>=4.22.0\n  - importlib-resources>=3.2.0\n  - kiwisolver>=1.0.1\n  - numpy>=1.21\n  - pillow>=6.2\n  - pybind11>=2.6.0\n  - pygobject\n  - pyparsing>=2.3.1\n  - pyqt\n  - python-dateutil>=2.1\n  - setuptools\n  - setuptools_scm\n  - wxpython\n  # building documentation\n  - colorspacious\n  - graphviz\n  - ipython\n  - ipywidgets\n  - numpydoc>=0.8\n  - packaging\n  - pydata-sphinx-theme\n  - pyyaml\n  - sphinx>=1.8.1,!=2.0.0\n  - sphinx-copybutton\n  - sphinx-gallery>=0.12\n  - sphinx-design\n  - pip\n  - pip:\n      - mpl-sphinx-theme\n      - sphinxcontrib-svg2pdfconverter\n      - pikepdf\n  # testing\n  - coverage\n  - flake8>=3.8\n  - flake8-docstrings>=1.4.0\n  - gtk4\n  - ipykernel\n  - nbconvert[execute]!=6.0.0,!=6.0.1,!=7.3.0,!=7.3.1\n  - nbformat!=5.0.0,!=5.0.1\n  - pandas!=0.25.0\n  - psutil\n  - pre-commit\n  - pydocstyle>=5.1.0\n  - pytest!=4.6.0,!=5.4.0\n  - pytest-cov\n  - pytest-rerunfailures\n  - pytest-timeout\n  - pytest-xdist\n  - tornado\n  - pytz\n  - black",
                "filename": "environment.yml",
                "start_index": 0,
                "end_index": 1237,
                "start_line": 1,
                "end_line": 65,
                "max_line": 65,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.4",
                "sha": ""
            },
            {
                "code": "branches:\n  except:\n    - /auto-backport-.*/\n    - /^v\\d+\\.\\d+\\.[\\dx]+-doc$/\n\nskip_commits:\n  message: /\\[ci doc\\]/\n  files:\n    - doc/\n    - galleries/\n\nclone_depth: 50\n\nimage: Visual Studio 2017\n\nenvironment:\n\n  global:\n    PYTHONFAULTHANDLER: 1\n    PYTHONIOENCODING: UTF-8\n    PYTEST_ARGS: -raR --numprocesses=auto --timeout=300 --durations=25\n                 --cov-report= --cov=lib --log-level=DEBUG\n\n  matrix:\n    - PYTHON_VERSION: \"3.9\"\n      CONDA_INSTALL_LOCN: \"C:\\\\Miniconda3-x64\"\n      TEST_ALL: \"no\"\n    - PYTHON_VERSION: \"3.10\"\n      CONDA_INSTALL_LOCN: \"C:\\\\Miniconda3-x64\"\n      TEST_ALL: \"no\"\n\n# We always use a 64-bit machine, but can build x86 distributions\n# with the PYTHON_ARCH variable\nplatform:\n    - x64\n\n# all our python builds have to happen in tests_script...\nbuild: false\n\ncache:\n  - '%LOCALAPPDATA%\\pip\\Cache'\n  - '%USERPROFILE%\\.cache\\matplotlib'\n\ninit:\n  - echo %PYTHON_VERSION% %CONDA_INSTALL_LOCN%\n\ninstall:\n  - set PATH=%CONDA_INSTALL_LOCN%;%CONDA_INSTALL_LOCN%\\scripts;%PATH%;\n  - conda config --set always_yes true\n  - conda config --set show_channel_urls yes\n  - conda config --prepend channels conda-forge\n\n  # For building, use a new environment\n  # Add python version to environment\n  # `^ ` escapes spaces for indentation\n  - echo ^ ^ - python=%PYTHON_VERSION% >> environment.yml\n  - conda env create -f environment.yml\n  - activate mpl-dev\n  - conda install -c conda-forge pywin32\n  - echo %PYTHON_VERSION% %TARGET_ARCH%\n  # Show the installed packages + versions\n  - conda list\n\ntest_script:\n  # Now build the thing..\n  - set LINK=/LIBPATH:%cd%\\lib\n  - pip install -ve .\n  # this should show no freetype dll...\n  - set \"DUMPBIN=%VS140COMNTOOLS%\\..\\..\\VC\\bin\\dumpbin.exe\"\n  - '\"%DUMPBIN%\" /DEPENDENTS lib\\matplotlib\\ft2font*.pyd | findstr freetype.*.dll && exit /b 1 || exit /b 0'\n\n  # this are optional dependencies so that we don't skip so many tests...\n  - if x%TEST_ALL% == xyes conda install -q ffmpeg inkscape miktex\n  # missing packages on conda-forge for imagemagick\n  # This install sometimes failed randomly :-(\n  #- choco install imagemagick\n\n  # Test import of tkagg backend\n  - python -c \"import matplotlib as m; m.use('tkagg'); import matplotlib.pyplot as plt; print(plt.get_backend())\"\n  # tests\n  - echo The following args are passed to pytest %PYTEST_ARGS%\n  - pytest %PYTEST_ARGS%\n\nartifacts:\n  - path: result_images\\*\n    name: result_images\n    type: zip\n\non_finish:\n  - conda install codecov\n  - codecov -e PYTHON_VERSION PLATFORM\n\non_failure:\n  # Generate a html for visual tests\n  - python tools/visualize_tests.py --no-browser\n  - echo zipping images after a failure...\n  - 7z a result_images.zip result_images\\ | grep -v \"Compressing\"\n  - appveyor PushArtifact result_images.zip\n\nmatrix:\n  fast_finish: true",
                "filename": ".appveyor.yml",
                "start_index": 285,
                "end_index": 3060,
                "start_line": 7,
                "end_line": 107,
                "max_line": 107,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.4",
                "sha": ""
            },
            {
                "code": "(  # Finally, pass this all along to setuptools to do the heavy lifting.\n    name=\"matplotlib\",\n    description=\"Python plotting package\",\n    author=\"John D. Hunter, Michael Droettboom\",\n    author_email=\"matplotlib-users@python.org\",\n    url=\"https://matplotlib.org\",\n    download_url=\"https://matplotlib.org/stable/users/installing/index.html\",\n    project_urls={\n        'Documentation': 'https://matplotlib.org',\n        'Source Code': 'https://github.com/matplotlib/matplotlib',\n        'Bug Tracker': 'https://github.com/matplotlib/matplotlib/issues',\n        'Forum': 'https://discourse.matplotlib.org/',\n        'Donate': 'https://numfocus.org/donate-to-matplotlib'\n    },\n    long_description=Path(\"README.md\").read_text(encoding=\"utf-8\"),\n    long_description_content_type=\"text/markdown\",\n    license=\"PSF\",\n    platforms=\"any\",\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Framework :: Matplotlib',\n        'Intended Audience :: Science/Research',\n        'Intended Audience :: Education',\n        'License :: OSI Approved :: Python Software Foundation License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Topic :: Scientific/Engineering :: Visualization',\n    ],\n\n    package_dir={\"\": \"lib\"},\n    packages=find_namespace_packages(\n        where=\"lib\",\n        exclude=[\"*baseline_images*\", \"*tinypages*\", \"*mpl-data*\", \"*web_backend*\"],\n    ),\n    py_modules=[\"pylab\"],\n    # Dummy extension to trigger build_ext, which will swap it out with\n    # real extensions that can depend on numpy for the build.\n    ext_modules=[Extension(\"\", [])],\n    package_data=package_data,\n\n    python_requires='>={}'.format('.'.join(str(n) for n in py_min_version)),\n    # When updating the list of dependencies, add an api_changes/development\n    # entry and also update the following places:\n    # - lib/matplotlib/__init__.py (matplotlib._check_versions())\n    # - requirements/testing/minver.txt\n    # - doc/devel/dependencies.rst\n    # - .github/workflows/tests.yml\n    # - environment.yml\n    install_requires=[\n        \"contourpy>=1.0.1\",\n        \"cycler>=0.10\",\n        \"fonttools>=4.22.0\",\n        \"kiwisolver>=1.0.1\",\n        \"numpy>=1.21\",\n        \"packaging>=20.0\",\n        \"pillow>=6.2.0\",\n        \"pyparsing>=2.3.1\",\n        \"python-dateutil>=2.7\",\n    ] + (\n        # Installing from a git checkout that is not producing a wheel.\n        [\"setuptools_scm>=7\"] if (\n            Path(__file__).with_name(\".git\").exists() and\n            os.environ.get(\"CIBUILDWHEEL\", \"0\") != \"1\"\n        ) else []\n    ),\n    extras_require={\n        ':python_version<\"3.10\"': [\n            \"importlib-resources>=3.2.0\",\n        ],\n    },",
                "filename": "setup.py",
                "start_index": 11098,
                "end_index": 13970,
                "start_line": 279,
                "end_line": 363,
                "max_line": 364,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.4",
                "sha": ""
            },
            {
                "code": "_freetype_hashes = {\n    '2.6.1':\n        '0a3c7dfbda6da1e8fce29232e8e96d987ababbbf71ebc8c75659e4132c367014',\n    '2.6.2':\n        '8da42fc4904e600be4b692555ae1dcbf532897da9c5b9fb5ebd3758c77e5c2d4',\n    '2.6.3':\n        '7942096c40ee6fea882bd4207667ad3f24bff568b96b10fd3885e11a7baad9a3',\n    '2.6.4':\n        '27f0e38347a1850ad57f84fc4dfed68ba0bc30c96a6fa6138ef84d485dd9a8d7',\n    '2.6.5':\n        '3bb24add9b9ec53636a63ea8e867ed978c4f8fdd8f1fa5ccfd41171163d4249a',\n    '2.7':\n        '7b657d5f872b0ab56461f3bd310bd1c5ec64619bd15f0d8e08282d494d9cfea4',\n    '2.7.1':\n        '162ef25aa64480b1189cdb261228e6c5c44f212aac4b4621e28cf2157efb59f5',\n    '2.8':\n        '33a28fabac471891d0523033e99c0005b95e5618dc8ffa7fa47f9dadcacb1c9b',\n    '2.8.1':\n        '876711d064a6a1bd74beb18dd37f219af26100f72daaebd2d86cb493d7cd7ec6',\n    '2.9':\n        'bf380e4d7c4f3b5b1c1a7b2bf3abb967bda5e9ab480d0df656e0e08c5019c5e6',\n    '2.9.1':\n        'ec391504e55498adceb30baceebd147a6e963f636eb617424bcfc47a169898ce',\n    '2.10.0':\n        '955e17244e9b38adb0c98df66abb50467312e6bb70eac07e49ce6bd1a20e809a',\n    '2.10.1':\n        '3a60d391fd579440561bf0e7f31af2222bc610ad6ce4d9d7bd2165bca8669110',\n    '2.11.1':\n        'f8db94d307e9c54961b39a1cc799a67d46681480696ed72ecf78d4473770f09b'\n}\n# This is the version of FreeType to use when building a local version.  It\n# must match the value in lib/matplotlib.__init__.py, and the cache path in\n# `.circleci/config.yml`. Also update the docs in\n# `docs/devel/dependencies.rst`.\nTESTING_VERSION_OF_FREETYPE = '2.6.1'\nif sys.platform.startswith('win') and platform.machine() == 'ARM64':\n    # older versions of freetype are not supported for win/arm64\n    # Matplotlib tests will not pass\n    LOCAL_FREETYPE_VERSION = '2.11.1'\nelse:\n    LOCAL_FREETYPE_VERSION = TESTING_VERSION_OF_FREETYPE\n\nLOCAL_FREETYPE_HASH = _freetype_hashes.get(LOCAL_FREETYPE_VERSION, 'unknown')\n\n# Also update the cache path in `.circleci/config.yml`.\n# Also update the docs in `docs/devel/dependencies.rst`.\nLOCAL_QHULL_VERSION = '2020.2'\nLOCAL_QHULL_HASH = (\n    'b5c2d7eb833278881b952c8a52d20179eab87766b00b865000469a45c1838b7e')\n\n\n# Matplotlib build options, which can be altered using mplsetup.cfg\nmplsetup_cfg = os.environ.get('MPLSETUPCFG') or 'mplsetup.cfg'\nconfig = configparser.ConfigParser()\nif os.path.exists(mplsetup_cfg):\n    config.read(mplsetup_cfg)\noptions = {\n    'backend': config.get('rc_options', 'backend', fallback=None),\n    'system_freetype': config.getboolean(\n        'libs', 'system_freetype',\n        fallback=sys.platform.startswith(('aix', 'os400'))\n    ),\n    'system_qhull': config.getboolean(\n        'libs', 'system_qhull', fallback=sys.platform.startswith('os400')\n    ),\n}\n\n\nif '-q' in sys.argv or '--quiet' in sys.argv:\n    def print_raw(*args, **kwargs): pass  # Suppress our own output.\nelse:\n    print_raw = print",
                "filename": "setupext.py",
                "start_index": 4447,
                "end_index": 7295,
                "start_line": 152,
                "end_line": 223,
                "max_line": 798,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.4",
                "sha": ""
            },
            {
                "code": "def _copy_docstring_and_deprecators(\n    method: Any,\n    func: Callable[_P, _R] | None = None\n) -> Callable[[Callable[_P, _R]], Callable[_P, _R]] | Callable[_P, _R]:\n    if func is None:\n        return cast('Callable[[Callable[_P, _R]], Callable[_P, _R]]',\n                    functools.partial(_copy_docstring_and_deprecators, method))\n    decorators: list[Callable[[Callable[_P, _R]], Callable[_P, _R]]] = [\n        _docstring.copy(method)\n    ]\n    # Check whether the definition of *method* includes @_api.rename_parameter\n    # or @_api.make_keyword_only decorators; if so, propagate them to the\n    # pyplot wrapper as well.\n    while hasattr(method, \"__wrapped__\"):\n        potential_decorator = _api.deprecation.DECORATORS.get(method)\n        if potential_decorator:\n            decorators.append(potential_decorator)\n        method = method.__wrapped__\n    for decorator in decorators[::-1]:\n        func = decorator(func)\n    return func\n\n\n## Global ##\n\n\n# The state controlled by {,un}install_repl_displayhook().\n_ReplDisplayHook = Enum(\"_ReplDisplayHook\", [\"NONE\", \"PLAIN\", \"IPYTHON\"])\n_REPL_DISPLAYHOOK = _ReplDisplayHook.NONE\n\n\ndef _draw_all_if_interactive() -> None:\n    if matplotlib.is_interactive():\n        draw_all()\n\n\ndef install_repl_displayhook() -> None:\n    \"\"\"\n    Connect to the display hook of the current shell.\n\n    The display hook gets called when the read-evaluate-print-loop (REPL) of\n    the shell has finished the execution of a command. We use this callback\n    to be able to automatically update a figure in interactive mode.\n\n    This works both with IPython and with vanilla python shells.\n    \"\"\"\n    global _REPL_DISPLAYHOOK\n\n    if _REPL_DISPLAYHOOK is _ReplDisplayHook.IPYTHON:\n        return\n\n    # See if we have IPython hooks around, if so use them.\n    # Use ``sys.modules.get(name)`` rather than ``name in sys.modules`` as\n    # entries can also have been explicitly set to None.\n    mod_ipython = sys.modules.get(\"IPython\")\n    if not mod_ipython:\n        _REPL_DISPLAYHOOK = _ReplDisplayHook.PLAIN\n        return\n    ip = mod_ipython.get_ipython()\n    if not ip:\n        _REPL_DISPLAYHOOK = _ReplDisplayHook.PLAIN\n        return\n\n    ip.events.register(\"post_execute\", _draw_all_if_interactive)\n    _REPL_DISPLAYHOOK = _ReplDisplayHook.IPYTHON\n\n    from IPython.core.pylabtools import backend2gui  # type: ignore\n    # trigger IPython's eventloop integration, if available\n    ipython_gui_name = backend2gui.get(get_backend())\n    if ipython_gui_name:\n        ip.enable_gui(ipython_gui_name)\n\n\ndef uninstall_repl_displayhook() -> None:\n    \"\"\"Disconnect from the display hook of the current shell.\"\"\"\n    global _REPL_DISPLAYHOOK\n    if _REPL_DISPLAYHOOK is _ReplDisplayHook.IPYTHON:\n        from IPython import get_ipython  # type: ignore\n        ip = get_ipython()\n        ip.events.unregister(\"post_execute\", _draw_all_if_interactive)\n    _REPL_DISPLAYHOOK = _ReplDisplayHook.NONE\n\n\ndraw_all = _pylab_helpers.Gcf.draw_all",
                "filename": "lib/matplotlib/pyplot.py",
                "start_index": 5125,
                "end_index": 8101,
                "start_line": 152,
                "end_line": 246,
                "max_line": 4320,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.4",
                "sha": ""
            },
            {
                "code": "if __name__ == \"__main__\":\n    data = {\n        \"v3.7.2\": \"8118151\",\n        \"v3.7.1\": \"7697899\",\n        \"v3.7.0\": \"7637593\",\n        \"v3.6.3\": \"7527665\",\n        \"v3.6.2\": \"7275322\",\n        \"v3.6.1\": \"7162185\",\n        \"v3.6.0\": \"7084615\",\n        \"v3.5.3\": \"6982547\",\n        \"v3.5.2\": \"6513224\",\n        \"v3.5.1\": \"5773480\",\n        \"v3.5.0\": \"5706396\",\n        \"v3.4.3\": \"5194481\",\n        \"v3.4.2\": \"4743323\",\n        \"v3.4.1\": \"4649959\",\n        \"v3.4.0\": \"4638398\",\n        \"v3.3.4\": \"4475376\",\n        \"v3.3.3\": \"4268928\",\n        \"v3.3.2\": \"4030140\",\n        \"v3.3.1\": \"3984190\",\n        \"v3.3.0\": \"3948793\",\n        \"v3.2.2\": \"3898017\",\n        \"v3.2.1\": \"3714460\",\n        \"v3.2.0\": \"3695547\",\n        \"v3.1.3\": \"3633844\",\n        \"v3.1.2\": \"3563226\",\n        \"v3.1.1\": \"3264781\",\n        \"v3.1.0\": \"2893252\",\n        \"v3.0.3\": \"2577644\",\n        \"v3.0.2\": \"1482099\",\n        \"v3.0.1\": \"1482098\",\n        \"v2.2.5\": \"3633833\",\n        \"v3.0.0\": \"1420605\",\n        \"v2.2.4\": \"2669103\",\n        \"v2.2.3\": \"1343133\",\n        \"v2.2.2\": \"1202077\",\n        \"v2.2.1\": \"1202050\",\n        \"v2.2.0\": \"1189358\",\n        \"v2.1.2\": \"1154287\",\n        \"v2.1.1\": \"1098480\",\n        \"v2.1.0\": \"1004650\",\n        \"v2.0.2\": \"573577\",\n        \"v2.0.1\": \"570311\",\n        \"v2.0.0\": \"248351\",\n        \"v1.5.3\": \"61948\",\n        \"v1.5.2\": \"56926\",\n        \"v1.5.1\": \"44579\",\n        \"v1.5.0\": \"32914\",\n        \"v1.4.3\": \"15423\",\n        \"v1.4.2\": \"12400\",\n        \"v1.4.1\": \"12287\",\n        \"v1.4.0\": \"11451\",\n    }\n    doc_dir = Path(__file__).parent.parent.absolute() / \"doc\"\n    target_dir = doc_dir / \"_static/zenodo_cache\"\n    citing = doc_dir / \"users/project/citing.rst\"\n    target_dir.mkdir(exist_ok=True, parents=True)\n    header = []\n    footer = []\n    with open(citing) as fin:\n        target = header\n        for ln in fin:\n            if target is not None:\n                target.append(ln.rstrip())\n            if ln.strip() == \".. START OF AUTOGENERATED\":\n                target.extend([\"\", \"\"])\n                target = None\n            if ln.strip() == \".. END OF AUTOGENERATED\":\n                target = footer\n                target.append(ln.rstrip())\n\n    with open(citing, \"w\") as fout:\n        fout.write(\"\\n\".join(header))\n        for version, doi in data.items():\n            svg_path = target_dir / f\"{doi}.svg\"\n            if not svg_path.exists():\n                url = f\"https://zenodo.org/badge/doi/10.5281/zenodo.{doi}.svg\"\n                payload = download_or_cache(url, f\"{doi}.svg\")\n                with open(svg_path, \"xb\") as svgout:\n                    svgout.write(payload.read())\n            fout.write(\n                f\"\"\"\n{version}\n   .. image:: ../../_static/zenodo_cache/{doi}.svg\n      :target:  https://doi.org/10.5281/zenodo.{doi}\"\"\"\n            )\n        fout.write(\"\\n\\n\")\n        fout.write(\"\\n\".join(footer))\n        fout.write(\"\\n\")",
                "filename": "tools/cache_zenodo_svg.py",
                "start_index": 1481,
                "end_index": 4358,
                "start_line": 64,
                "end_line": 153,
                "max_line": 153,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.4",
                "sha": ""
            },
            {
                "code": "from collections.abc import Iterable, Sequence\nfrom contextlib import ExitStack\nimport functools\nimport inspect\nimport logging\nfrom numbers import Real\nfrom operator import attrgetter\nimport types\n\nimport numpy as np\n\nimport matplotlib as mpl\nfrom matplotlib import _api, cbook, _docstring, offsetbox\nimport matplotlib.artist as martist\nimport matplotlib.axis as maxis\nfrom matplotlib.cbook import _OrderedSet, _check_1d, index_of\nimport matplotlib.collections as mcoll\nimport matplotlib.colors as mcolors\nimport matplotlib.font_manager as font_manager\nfrom matplotlib.gridspec import SubplotSpec\nimport matplotlib.image as mimage\nimport matplotlib.lines as mlines\nimport matplotlib.patches as mpatches\nfrom matplotlib.rcsetup import cycler, validate_axisbelow\nimport matplotlib.spines as mspines\nimport matplotlib.table as mtable\nimport matplotlib.text as mtext\nimport matplotlib.ticker as mticker\nimport matplotlib.transforms as mtransforms\n\n_log = logging.getLogger(__name__)",
                "filename": "lib/matplotlib/axes/_base.py",
                "start_index": 0,
                "end_index": 978,
                "start_line": 1,
                "end_line": 31,
                "max_line": 4654,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.4",
                "sha": ""
            },
            {
                "code": "def update_matplotlibrc(path):\n    # If packagers want to change the default backend, insert a `#backend: ...`\n    # line.  Otherwise, use the default `##backend: Agg` which has no effect\n    # even after decommenting, which allows _auto_backend_sentinel to be filled\n    # in at import time.\n    template_lines = path.read_text(encoding=\"utf-8\").splitlines(True)\n    backend_line_idx, = [  # Also asserts that there is a single such line.\n        idx for idx, line in enumerate(template_lines)\n        if \"#backend:\" in line]\n    template_lines[backend_line_idx] = (\n        \"#backend: {}\\n\".format(setupext.options[\"backend\"])\n        if setupext.options[\"backend\"]\n        else \"##backend: Agg\\n\")\n    path.write_text(\"\".join(template_lines), encoding=\"utf-8\")\n\n\nclass BuildPy(setuptools.command.build_py.build_py):\n    def run(self):\n        super().run()\n        if not getattr(self, 'editable_mode', False):\n            update_matplotlibrc(\n                Path(self.build_lib, \"matplotlib/mpl-data/matplotlibrc\"))\n\n\nclass Sdist(setuptools.command.sdist.sdist):\n    def make_release_tree(self, base_dir, files):\n        super().make_release_tree(base_dir, files)\n        update_matplotlibrc(\n            Path(base_dir, \"lib/matplotlib/mpl-data/matplotlibrc\"))\n\n# Start with type hint data\n# Will be further filled below by the various components.\npackage_data = {\"matplotlib\": [\"py.typed\", \"**/*.pyi\"]}\n\n# If the user just queries for information, don't bother figuring out which\n# packages to build or install.\nif not (any('--' + opt in sys.argv\n            for opt in Distribution.display_option_names + ['help'])\n        or 'clean' in sys.argv):\n    # Go through all of the packages and figure out which ones we are\n    # going to build/install.\n    print_raw()\n    print_raw(\"Edit mplsetup.cfg to change the build options; \"\n              \"suppress output with --quiet.\")\n    print_raw()\n    print_raw(\"BUILDING MATPLOTLIB\")\n\n    good_packages = []\n    for package in mpl_packages:\n        try:\n            message = package.check()\n        except setupext.Skipped as e:\n            print_status(package.name, \"no  [{e}]\".format(e=e))\n            continue\n        if message is not None:\n            print_status(package.name,\n                         \"yes [{message}]\".format(message=message))\n        good_packages.append(package)\n\n    print_raw()\n\n    # Now collect all of the information we need to build all of the packages.\n    for package in good_packages:\n        # Extension modules only get added in build_ext, as numpy will have\n        # been installed (as setup_requires) at that point.\n        data = package.get_package_data()\n        for key, val in data.items():\n            package_data.setdefault(key, [])\n            package_data[key] = list(set(val + package_data[key]))",
                "filename": "setup.py",
                "start_index": 8290,
                "end_index": 11091,
                "start_line": 209,
                "end_line": 277,
                "max_line": 364,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.4",
                "sha": ""
            },
            {
                "code": "if TYPE_CHECKING:\n    from collections.abc import Callable, Hashable, Iterable, Sequence\n    import datetime\n    import pathlib\n    import os\n    from typing import Any, BinaryIO, Literal, TypeVar\n    from typing_extensions import ParamSpec\n\n    import PIL.Image\n    from numpy.typing import ArrayLike\n\n    from matplotlib.axis import Tick\n    from matplotlib.axes._base import _AxesBase\n    from matplotlib.backend_bases import RendererBase, Event\n    from matplotlib.cm import ScalarMappable\n    from matplotlib.contour import ContourSet, QuadContourSet\n    from matplotlib.collections import (\n        Collection,\n        LineCollection,\n        BrokenBarHCollection,\n        PolyCollection,\n        PathCollection,\n        EventCollection,\n        QuadMesh,\n    )\n    from matplotlib.colorbar import Colorbar\n    from matplotlib.colors import Colormap\n    from matplotlib.container import (\n        BarContainer,\n        ErrorbarContainer,\n        StemContainer,\n    )\n    from matplotlib.figure import SubFigure\n    from matplotlib.legend import Legend\n    from matplotlib.mlab import GaussianKDE\n    from matplotlib.image import AxesImage, FigureImage\n    from matplotlib.patches import FancyArrow, StepPatch, Wedge\n    from matplotlib.quiver import Barbs, Quiver, QuiverKey\n    from matplotlib.scale import ScaleBase\n    from matplotlib.transforms import Transform, Bbox\n    from matplotlib.typing import ColorType, LineStyleType, MarkerType, HashableList\n    from matplotlib.widgets import SubplotTool\n\n    _P = ParamSpec('_P')\n    _R = TypeVar('_R')\n\n\n# We may not need the following imports here:\nfrom matplotlib.colors import Normalize\nfrom matplotlib.lines import Line2D\nfrom matplotlib.text import Text, Annotation\nfrom matplotlib.patches import Polygon, Rectangle, Circle, Arrow\nfrom matplotlib.widgets import Button, Slider, Widget\n\nfrom .ticker import (\n    TickHelper, Formatter, FixedFormatter, NullFormatter, FuncFormatter,\n    FormatStrFormatter, ScalarFormatter, LogFormatter, LogFormatterExponent,\n    LogFormatterMathtext, Locator, IndexLocator, FixedLocator, NullLocator,\n    LinearLocator, LogLocator, AutoLocator, MultipleLocator, MaxNLocator)\n\n_log = logging.getLogger(__name__)\n\n\n# Explicit rename instead of import-as for typing's sake.\ncolormaps = _colormaps\ncolor_sequences = _color_sequences\n\n\n@overload\ndef _copy_docstring_and_deprecators(\n    method: Any,\n    func: Literal[None] = None\n) -> Callable[[Callable[_P, _R]], Callable[_P, _R]]: ...\n\n\n@overload\ndef _copy_docstring_and_deprecators(\n    method: Any, func: Callable[_P, _R]) -> Callable[_P, _R]: ...",
                "filename": "lib/matplotlib/pyplot.py",
                "start_index": 2530,
                "end_index": 5122,
                "start_line": 83,
                "end_line": 160,
                "max_line": 4320,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.4",
                "sha": ""
            },
            {
                "code": "r\"\"\"\n.. redirect-from:: /tutorials/text/usetex\n\n.. _usetex:\n\n*************************\nText rendering with LaTeX\n*************************\n\nMatplotlib can use LaTeX to render text.  This is activated by setting\n``text.usetex : True`` in your rcParams, or by setting the ``usetex`` property\nto True on individual `.Text` objects.  Text handling through LaTeX is slower\nthan Matplotlib's very capable :ref:`mathtext <mathtext>`, but\nis more flexible, since different LaTeX packages (font packages, math packages,\netc.) can be used. The results can be striking, especially when you take care\nto use the same fonts in your figures as in the main document.\n\nMatplotlib's LaTeX support requires a working LaTeX_ installation.  For\nthe \\*Agg backends, dvipng_ is additionally required; for the PS backend,\nPSfrag_, dvips_ and Ghostscript_ are additionally required.  For the PDF\nand SVG backends, if LuaTeX is present, it will be used to speed up some\npost-processing steps, but note that it is not used to parse the TeX string\nitself (only LaTeX is supported).  The executables for these external\ndependencies must all be located on your :envvar:`PATH`.\n\nOnly a small number of font families (defined by the PSNFSS_ scheme) are\nsupported.  They are listed here, with the corresponding LaTeX font selection\ncommands and LaTeX packages, which are automatically used.\n\n=========================== =================================================\ngeneric family              fonts\n=========================== =================================================\nserif (``\\rmfamily``)       Computer Modern Roman, Palatino (``mathpazo``),\n                            Times (``mathptmx``),  Bookman (``bookman``),\n                            New Century Schoolbook (``newcent``),\n                            Charter (``charter``)\n\nsans-serif (``\\sffamily``)  Computer Modern Serif, Helvetica (``helvet``),\n                            Avant Garde (``avant``)\n\ncursive (``\\rmfamily``)     Zapf Chancery (``chancery``)\n\nmonospace (``\\ttfamily``)   Computer Modern Typewriter, Courier (``courier``)\n=========================== =================================================\n\nThe default font family (which does not require loading any LaTeX package) is\nComputer Modern.  All other families are Adobe fonts.  Times and Palatino each\nhave their own accompanying math fonts, while the other Adobe serif fonts make\nuse of the Computer Modern math fonts.\n\nTo enable LaTeX and select a font, use e.g.::\n\n    plt.rcParams.update({\n        \"text.usetex\": True,\n        \"font.family\": \"Helvetica\"\n    })\n\nor equivalently, set your :ref:`matplotlibrc <customizing>` to::\n\n    text.usetex : true\n    font.family : Helvetica\n\nIt is also possible to instead set ``font.family`` to one of the generic family\nnames and then configure the corresponding generic family; e.g.::\n\n    plt.rcParams.update({\n        \"text.usetex\": True,\n        \"font.family\": \"sans-serif\",\n        \"font.sans-serif\": \"Helvetica\",\n    })\n\n(this was the required approach until Matplotlib 3.5).\n\nHere is the standard example,\n:doc:`/gallery/text_labels_and_annotations/tex_demo`:\n\n.. figure:: /gallery/text_labels_and_annotations/images/sphx_glr_tex_demo_001.png\n   :target: /gallery/text_labels_and_annotations/tex_demo.html\n   :align: center\n\nNote that display math mode (``$$ e=mc^2 $$``) is not supported, but adding the\ncommand ``\\displaystyle``, as in the above demo, will produce the same results.\n\nNon-ASCII characters (e.g. the degree sign in the y-label above) are supported\nto the extent that they are supported by inputenc_.\n\n.. note::\n   For consistency with the non-usetex case, Matplotlib special-cases newlines,\n   so that single-newlines yield linebreaks (rather than being interpreted as\n   whitespace in standard LaTeX).\n\n   Matplotlib uses the underscore_ package so that underscores (``_``) are\n   printed \"as-is\" in text mode (rather than causing an error as in standard\n   LaTeX).  Underscores still introduce subscripts in math mode.\n\n.. note::\n   Certain characters require special escaping in TeX, such as::\n\n     # $ % & ~ ^ \\ { } \\( \\) \\[ \\]\n\n   Therefore, these characters will behave differently depending on\n   :rc:`text.usetex`.  As noted above, underscores (``_``) do not require\n   escaping outside of math mode.\n\nPostScript options\n==================\n\nIn order to produce encapsulated PostScript (EPS) files that can be embedded\nin a new LaTeX document, the default behavior of Matplotlib is to distill the\noutput, which removes some PostScript operators used by LaTeX that are illegal\nin an EPS file. This step produces results which may be unacceptable to some\nusers, because the text is coarsely rasterized and converted to bitmaps, which\nare not scalable like standard PostScript, and the text is not searchable. One\nworkaround is to set :rc:`ps.distiller.res` to a higher value (perhaps 6000)\nin your rc settings, which will produce larger files but may look better and\nscale reasonably. A better workaround, which requires Poppler_ or Xpdf_, can\nbe activated by changing :rc:`ps.usedistiller` to ``xpdf``. This alternative\nproduces PostScript without rasterizing text, so it scales properly, can be\nedited in Adobe Illustrator, and searched text in pdf documents.\n\n.. _usetex-hangups:\n\nPossible hangups\n================\n\n* On Windows, the :envvar:`PATH` environment variable may need to be modified\n  to include the directories containing the latex, dvipng and ghostscript\n  executables. See :ref:`environment-variables` and\n  :ref:`setting-windows-environment-variables` for details.\n\n* Using MiKTeX with Computer Modern fonts, if you get odd \\*Agg and PNG\n  results, go to MiKTeX/Options and update your format files\n\n* On Ubuntu and Gentoo, the base texlive install does not ship with\n  the type1cm package. You may need to install some of the extra\n  packages to get all the goodies that come bundled with other LaTeX\n  distributions.\n\n* Some progress has been made so Matplotlib uses the dvi files\n  directly for text layout. This allows LaTeX to be used for text\n  layout with the pdf and svg backends, as well as the \\*Agg and PS\n  backends. In the future, a LaTeX installation may be the only\n  external dependency.\n\n.. _usetex-troubleshooting:\n\nTroubleshooting\n===============\n\n* Try deleting your :file:`.matplotlib/tex.cache` directory. If you don't know\n  where to find :file:`.matplotlib`, see :ref:`locating-matplotlib-config-dir`.\n\n* Make sure LaTeX, dvipng and ghostscript are each working and on your\n  :envvar:`PATH`.\n\n* Make sure what you are trying to do is possible in a LaTeX document,\n  that your LaTeX syntax is valid and that you are using raw strings\n  if necessary to avoid unintended escape sequences.\n\n* :rc:`text.latex.preamble` is not officially supported. This\n  option provides lots of flexibility, and lots of ways to cause\n  problems. Please disable this option before reporting problems to\n  the mailing list.\n\n* If you still need help, please see :ref:`reporting-problems`.\n\n.. _dvipng: http://www.nongnu.org/dvipng/\n.. _dvips: https://tug.org/texinfohtml/dvips.html\n.. _Ghostscript: https://ghostscript.com/\n.. _inputenc: https://ctan.org/pkg/inputenc\n.. _LaTeX: http://www.tug.org\n.. _Poppler: https://poppler.freedesktop.org/\n.. _PSNFSS: http://www.ctan.org/tex-archive/macros/latex/required/psnfss/psnfss2e.pdf\n.. _PSfrag: https://ctan.org/pkg/psfrag\n.. _underscore: https://ctan.org/pkg/underscore\n.. _Xpdf: http://www.xpdfreader.com/\n\"\"\"",
                "filename": "galleries/users_explain/text/usetex.py",
                "start_index": 0,
                "end_index": 7467,
                "start_line": 1,
                "end_line": 177,
                "max_line": 177,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.4",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "lib/matplotlib/pyplot.py": [
                {
                    "chunk": {
                        "code": "def _copy_docstring_and_deprecators(\n    method: Any,\n    func: Callable[_P, _R] | None = None\n) -> Callable[[Callable[_P, _R]], Callable[_P, _R]] | Callable[_P, _R]:\n    if func is None:\n        return cast('Callable[[Callable[_P, _R]], Callable[_P, _R]]',\n                    functools.partial(_copy_docstring_and_deprecators, method))\n    decorators: list[Callable[[Callable[_P, _R]], Callable[_P, _R]]] = [\n        _docstring.copy(method)\n    ]\n    # Check whether the definition of *method* includes @_api.rename_parameter\n    # or @_api.make_keyword_only decorators; if so, propagate them to the\n    # pyplot wrapper as well.\n    while hasattr(method, \"__wrapped__\"):\n        potential_decorator = _api.deprecation.DECORATORS.get(method)\n        if potential_decorator:\n            decorators.append(potential_decorator)\n        method = method.__wrapped__\n    for decorator in decorators[::-1]:\n        func = decorator(func)\n    return func\n\n\n## Global ##\n\n\n# The state controlled by {,un}install_repl_displayhook().\n_ReplDisplayHook = Enum(\"_ReplDisplayHook\", [\"NONE\", \"PLAIN\", \"IPYTHON\"])\n_REPL_DISPLAYHOOK = _ReplDisplayHook.NONE\n\n\ndef _draw_all_if_interactive() -> None:\n    if matplotlib.is_interactive():\n        draw_all()\n\n\ndef install_repl_displayhook() -> None:\n    \"\"\"\n    Connect to the display hook of the current shell.\n\n    The display hook gets called when the read-evaluate-print-loop (REPL) of\n    the shell has finished the execution of a command. We use this callback\n    to be able to automatically update a figure in interactive mode.\n\n    This works both with IPython and with vanilla python shells.\n    \"\"\"\n    global _REPL_DISPLAYHOOK\n\n    if _REPL_DISPLAYHOOK is _ReplDisplayHook.IPYTHON:\n        return\n\n    # See if we have IPython hooks around, if so use them.\n    # Use ``sys.modules.get(name)`` rather than ``name in sys.modules`` as\n    # entries can also have been explicitly set to None.\n    mod_ipython = sys.modules.get(\"IPython\")\n    if not mod_ipython:\n        _REPL_DISPLAYHOOK = _ReplDisplayHook.PLAIN\n        return\n    ip = mod_ipython.get_ipython()\n    if not ip:\n        _REPL_DISPLAYHOOK = _ReplDisplayHook.PLAIN\n        return\n\n    ip.events.register(\"post_execute\", _draw_all_if_interactive)\n    _REPL_DISPLAYHOOK = _ReplDisplayHook.IPYTHON\n\n    from IPython.core.pylabtools import backend2gui  # type: ignore\n    # trigger IPython's eventloop integration, if available\n    ipython_gui_name = backend2gui.get(get_backend())\n    if ipython_gui_name:\n        ip.enable_gui(ipython_gui_name)\n\n\ndef uninstall_repl_displayhook() -> None:\n    \"\"\"Disconnect from the display hook of the current shell.\"\"\"\n    global _REPL_DISPLAYHOOK\n    if _REPL_DISPLAYHOOK is _ReplDisplayHook.IPYTHON:\n        from IPython import get_ipython  # type: ignore\n        ip = get_ipython()\n        ip.events.unregister(\"post_execute\", _draw_all_if_interactive)\n    _REPL_DISPLAYHOOK = _ReplDisplayHook.NONE\n\n\ndraw_all = _pylab_helpers.Gcf.draw_all",
                        "filename": "lib/matplotlib/pyplot.py",
                        "start_index": 5125,
                        "end_index": 8101,
                        "start_line": 152,
                        "end_line": 246,
                        "max_line": 4320,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.4",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet from 'lib/matplotlib/pyplot.py' contains the function '_draw_all_if_interactive' which is part of the interactive display mechanism in Matplotlib. It is relevant because the issue may be related to how interactive figures are updated in JupyterLab when using the inline backend."
                }
            ],
            "galleries/users_explain/text/usetex.py": [
                {
                    "chunk": {
                        "code": "r\"\"\"\n.. redirect-from:: /tutorials/text/usetex\n\n.. _usetex:\n\n*************************\nText rendering with LaTeX\n*************************\n\nMatplotlib can use LaTeX to render text.  This is activated by setting\n``text.usetex : True`` in your rcParams, or by setting the ``usetex`` property\nto True on individual `.Text` objects.  Text handling through LaTeX is slower\nthan Matplotlib's very capable :ref:`mathtext <mathtext>`, but\nis more flexible, since different LaTeX packages (font packages, math packages,\netc.) can be used. The results can be striking, especially when you take care\nto use the same fonts in your figures as in the main document.\n\nMatplotlib's LaTeX support requires a working LaTeX_ installation.  For\nthe \\*Agg backends, dvipng_ is additionally required; for the PS backend,\nPSfrag_, dvips_ and Ghostscript_ are additionally required.  For the PDF\nand SVG backends, if LuaTeX is present, it will be used to speed up some\npost-processing steps, but note that it is not used to parse the TeX string\nitself (only LaTeX is supported).  The executables for these external\ndependencies must all be located on your :envvar:`PATH`.\n\nOnly a small number of font families (defined by the PSNFSS_ scheme) are\nsupported.  They are listed here, with the corresponding LaTeX font selection\ncommands and LaTeX packages, which are automatically used.\n\n=========================== =================================================\ngeneric family              fonts\n=========================== =================================================\nserif (``\\rmfamily``)       Computer Modern Roman, Palatino (``mathpazo``),\n                            Times (``mathptmx``),  Bookman (``bookman``),\n                            New Century Schoolbook (``newcent``),\n                            Charter (``charter``)\n\nsans-serif (``\\sffamily``)  Computer Modern Serif, Helvetica (``helvet``),\n                            Avant Garde (``avant``)\n\ncursive (``\\rmfamily``)     Zapf Chancery (``chancery``)\n\nmonospace (``\\ttfamily``)   Computer Modern Typewriter, Courier (``courier``)\n=========================== =================================================\n\nThe default font family (which does not require loading any LaTeX package) is\nComputer Modern.  All other families are Adobe fonts.  Times and Palatino each\nhave their own accompanying math fonts, while the other Adobe serif fonts make\nuse of the Computer Modern math fonts.\n\nTo enable LaTeX and select a font, use e.g.::\n\n    plt.rcParams.update({\n        \"text.usetex\": True,\n        \"font.family\": \"Helvetica\"\n    })\n\nor equivalently, set your :ref:`matplotlibrc <customizing>` to::\n\n    text.usetex : true\n    font.family : Helvetica\n\nIt is also possible to instead set ``font.family`` to one of the generic family\nnames and then configure the corresponding generic family; e.g.::\n\n    plt.rcParams.update({\n        \"text.usetex\": True,\n        \"font.family\": \"sans-serif\",\n        \"font.sans-serif\": \"Helvetica\",\n    })\n\n(this was the required approach until Matplotlib 3.5).\n\nHere is the standard example,\n:doc:`/gallery/text_labels_and_annotations/tex_demo`:\n\n.. figure:: /gallery/text_labels_and_annotations/images/sphx_glr_tex_demo_001.png\n   :target: /gallery/text_labels_and_annotations/tex_demo.html\n   :align: center\n\nNote that display math mode (``$$ e=mc^2 $$``) is not supported, but adding the\ncommand ``\\displaystyle``, as in the above demo, will produce the same results.\n\nNon-ASCII characters (e.g. the degree sign in the y-label above) are supported\nto the extent that they are supported by inputenc_.\n\n.. note::\n   For consistency with the non-usetex case, Matplotlib special-cases newlines,\n   so that single-newlines yield linebreaks (rather than being interpreted as\n   whitespace in standard LaTeX).\n\n   Matplotlib uses the underscore_ package so that underscores (``_``) are\n   printed \"as-is\" in text mode (rather than causing an error as in standard\n   LaTeX).  Underscores still introduce subscripts in math mode.\n\n.. note::\n   Certain characters require special escaping in TeX, such as::\n\n     # $ % & ~ ^ \\ { } \\( \\) \\[ \\]\n\n   Therefore, these characters will behave differently depending on\n   :rc:`text.usetex`.  As noted above, underscores (``_``) do not require\n   escaping outside of math mode.\n\nPostScript options\n==================\n\nIn order to produce encapsulated PostScript (EPS) files that can be embedded\nin a new LaTeX document, the default behavior of Matplotlib is to distill the\noutput, which removes some PostScript operators used by LaTeX that are illegal\nin an EPS file. This step produces results which may be unacceptable to some\nusers, because the text is coarsely rasterized and converted to bitmaps, which\nare not scalable like standard PostScript, and the text is not searchable. One\nworkaround is to set :rc:`ps.distiller.res` to a higher value (perhaps 6000)\nin your rc settings, which will produce larger files but may look better and\nscale reasonably. A better workaround, which requires Poppler_ or Xpdf_, can\nbe activated by changing :rc:`ps.usedistiller` to ``xpdf``. This alternative\nproduces PostScript without rasterizing text, so it scales properly, can be\nedited in Adobe Illustrator, and searched text in pdf documents.\n\n.. _usetex-hangups:\n\nPossible hangups\n================\n\n* On Windows, the :envvar:`PATH` environment variable may need to be modified\n  to include the directories containing the latex, dvipng and ghostscript\n  executables. See :ref:`environment-variables` and\n  :ref:`setting-windows-environment-variables` for details.\n\n* Using MiKTeX with Computer Modern fonts, if you get odd \\*Agg and PNG\n  results, go to MiKTeX/Options and update your format files\n\n* On Ubuntu and Gentoo, the base texlive install does not ship with\n  the type1cm package. You may need to install some of the extra\n  packages to get all the goodies that come bundled with other LaTeX\n  distributions.\n\n* Some progress has been made so Matplotlib uses the dvi files\n  directly for text layout. This allows LaTeX to be used for text\n  layout with the pdf and svg backends, as well as the \\*Agg and PS\n  backends. In the future, a LaTeX installation may be the only\n  external dependency.\n\n.. _usetex-troubleshooting:\n\nTroubleshooting\n===============\n\n* Try deleting your :file:`.matplotlib/tex.cache` directory. If you don't know\n  where to find :file:`.matplotlib`, see :ref:`locating-matplotlib-config-dir`.\n\n* Make sure LaTeX, dvipng and ghostscript are each working and on your\n  :envvar:`PATH`.\n\n* Make sure what you are trying to do is possible in a LaTeX document,\n  that your LaTeX syntax is valid and that you are using raw strings\n  if necessary to avoid unintended escape sequences.\n\n* :rc:`text.latex.preamble` is not officially supported. This\n  option provides lots of flexibility, and lots of ways to cause\n  problems. Please disable this option before reporting problems to\n  the mailing list.\n\n* If you still need help, please see :ref:`reporting-problems`.\n\n.. _dvipng: http://www.nongnu.org/dvipng/\n.. _dvips: https://tug.org/texinfohtml/dvips.html\n.. _Ghostscript: https://ghostscript.com/\n.. _inputenc: https://ctan.org/pkg/inputenc\n.. _LaTeX: http://www.tug.org\n.. _Poppler: https://poppler.freedesktop.org/\n.. _PSNFSS: http://www.ctan.org/tex-archive/macros/latex/required/psnfss/psnfss2e.pdf\n.. _PSfrag: https://ctan.org/pkg/psfrag\n.. _underscore: https://ctan.org/pkg/underscore\n.. _Xpdf: http://www.xpdfreader.com/\n\"\"\"",
                        "filename": "galleries/users_explain/text/usetex.py",
                        "start_index": 0,
                        "end_index": 7467,
                        "start_line": 1,
                        "end_line": 177,
                        "max_line": 177,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.4",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet from 'galleries/users_explain/text/usetex.py' provides information on how Matplotlib uses LaTeX to render text, including the requirement to set 'text.usetex : True'. Since the issue involves a change in behavior when using LaTeX rendering between different Matplotlib versions, this snippet is relevant for understanding the expected configuration and behavior."
                }
            ]
        },
        "solution_task": "Based on the provided information, the issue seems to be related to the rendering of graphs generated by `networkx` and displayed using `matplotlib` in a JupyterLab environment, particularly after upgrading Matplotlib from version 3.4.3 to 3.5.0.dev2445+gb09aad279b. The issue is visual and occurs on Windows 10 with Python 3.9.7, using the `matplotlib_inline.backend_inline` backend.\n\nTo address the issue:\n\n- Verify that the `matplotlib` and `networkx` libraries are correctly installed and are compatible with each other.\n- Ensure that the `%matplotlib inline` magic command is correctly placed at the beginning of the Jupyter notebook to configure the inline backend.\n- Check if the issue persists when using a different backend, such as `%matplotlib notebook` or `%matplotlib qt`, to isolate whether the problem is specific to the `inline` backend.\n- If the issue is specific to the `inline` backend, consider downgrading Matplotlib to the last known working version (3.4.3) as a temporary workaround.\n- Look for any open issues or bug reports on the Matplotlib GitHub repository that match the described problem. If none exist, consider opening a new issue with a detailed description and the error images.\n- As a last resort, if the issue is critical and no solution is found, consider using an alternative visualization library that is compatible with the JupyterLab environment and the current setup.",
        "bouncer_response": {
            "score": 4,
            "criteria": "RESPONSES that offer some actionable advice but are incomplete or partially relevant should score between 4 and 6.",
            "supporting_evidence": "The RESPONSE provides several actionable steps to troubleshoot the issue, such as verifying library compatibility, using different backends, and downgrading Matplotlib as a temporary workaround. It also suggests checking for open issues on the Matplotlib GitHub repository and considering alternative visualization libraries if necessary. However, the RESPONSE does not address the specific nature of the bug, which seems to be a regression in a development version of Matplotlib. The provided code snippets are not directly related to the issue at hand and seem to be generic advice rather than targeted troubleshooting steps for the described bug. The RESPONSE does not offer a clear path to identifying the root cause of the rendering issue or specific steps to fix it, which limits its utility.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711698695.53308,
        "result": "Doesn't seem like we have fully grasped all the specifics of this ticket \ud83d\ude10.                   But we've outlined some ideas that might help you get started:\n\nBased on the provided information, the issue seems to be related to the rendering of graphs generated by `networkx` and displayed using `matplotlib` in a JupyterLab environment, particularly after upgrading Matplotlib from version 3.4.3 to 3.5.0.dev2445+gb09aad279b. The issue is visual and occurs on Windows 10 with Python 3.9.7, using the `matplotlib_inline.backend_inline` backend.\n\nTo address the issue:\n\n- Verify that the `matplotlib` and `networkx` libraries are correctly installed and are compatible with each other.\n- Ensure that the `%matplotlib inline` magic command is correctly placed at the beginning of the Jupyter notebook to configure the inline backend.\n- Check if the issue persists when using a different backend, such as `%matplotlib notebook` or `%matplotlib qt`, to isolate whether the problem is specific to the `inline` backend.\n- If the issue is specific to the `inline` backend, consider downgrading Matplotlib to the last known working version (3.4.3) as a temporary workaround.\n- Look for any open issues or bug reports on the Matplotlib GitHub repository that match the described problem. If none exist, consider opening a new issue with a detailed description and the error images.\n- As a last resort, if the issue is critical and no solution is found, consider using an alternative visualization library that is compatible with the JupyterLab environment and the current setup.\n\n### Code snippets to check\n\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.4/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.4/tree//lib/matplotlib)- [Lines 152 - 246](https://github.com/testbed/matplotlib__matplotlib__3.4/blob//lib/matplotlib/pyplot.py#L152-L246)\n\n This snippet from 'lib/matplotlib/pyplot.py' contains the function '_draw_all_if_interactive' which is part of the interactive display mechanism in Matplotlib. It is relevant because the issue may be related to how interactive figures are updated in JupyterLab when using the inline backend.\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.4/tree//galleries) \u2192 [users_explain](https://github.com/testbed/matplotlib__matplotlib__3.4/tree//galleries/users_explain) \u2192 [text](https://github.com/testbed/matplotlib__matplotlib__3.4/tree//galleries/users_explain/text)- [Lines 1 - 177](https://github.com/testbed/matplotlib__matplotlib__3.4/blob//galleries/users_explain/text/usetex.py#L1-L177)\n\n This snippet from 'galleries/users_explain/text/usetex.py' provides information on how Matplotlib uses LaTeX to render text, including the requirement to set 'text.usetex : True'. Since the issue involves a change in behavior when using LaTeX rendering between different Matplotlib versions, this snippet is relevant for understanding the expected configuration and behavior."
    }
}