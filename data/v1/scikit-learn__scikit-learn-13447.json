{
    "id": "scikit-learn__scikit-learn-13447",
    "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
    "task_id": 3057620430944086025,
    "title": "label_ranking_average_precision_score: sample_weighting isn't applied to items with zero true labels",
    "body": "#### Description\r\nlabel_ranking_average_precision_score offers a sample_weighting argument to allow nonuniform contribution of individual samples to the reported metric.  Separately, individual samples whose labels are the same for all classes (all true or all false) are treated as a special case (precision == 1, [line 732](https://github.com/scikit-learn/scikit-learn/blob/7b136e9/sklearn/metrics/ranking.py#L732)). However, this special case bypasses the application of sample_weight ([line 740](https://github.com/scikit-learn/scikit-learn/blob/7b136e9/sklearn/metrics/ranking.py#L740)).  So, in the case where there is both non-default sample_weighting and samples with, for instance, zero labels, the reported metric is wrong.\r\n\r\n<!-- Example: Joblib Error thrown when calling fit on LatentDirichletAllocation with evaluate_every > 0-->\r\n\r\n#### Steps/Code to Reproduce\r\nSee example in [this colab](https://colab.research.google.com/drive/19P-6UgIMZSUgBcLyR7jm9oELacrYNJE7)\r\n\r\n```\r\nimport numpy as np\r\nimport sklearn.metrics\r\n\r\n# Per sample APs are 0.5, 0.75, and 1.0 (default for zero labels).\r\ntruth = np.array([[1, 0, 0, 0], [1, 0, 0, 1], [0, 0, 0, 0]], dtype=np.bool)\r\nscores = np.array([[0.3, 0.4, 0.2, 0.1], [0.1, 0.2, 0.3, 0.4], [0.4, 0.3, 0.2, 0.1]])\r\nprint(sklearn.metrics.label_ranking_average_precision_score(\r\n    truth, scores, sample_weight=[1.0, 1.0, 0.0]))\r\n```\r\n\r\n#### Expected Results\r\nAverage of AP of first and second samples = 0.625\r\n\r\n#### Actual Results\r\nSum of AP of all three samples, divided by sum of weighting vector = 2.25/2 = 1.125\r\n\r\n#### Versions\r\nSystem:\r\n    python: 3.6.7 (default, Oct 22 2018, 11:32:17)  [GCC 8.2.0]\r\nexecutable: /usr/bin/python3\r\n   machine: Linux-4.14.79+-x86_64-with-Ubuntu-18.04-bionic\r\n\r\nBLAS:\r\n    macros: SCIPY_MKL_H=None, HAVE_CBLAS=None\r\n  lib_dirs: /usr/local/lib\r\ncblas_libs: mkl_rt, pthread\r\n\r\nPython deps:\r\n       pip: 19.0.3\r\nsetuptools: 40.8.0\r\n   sklearn: 0.20.3\r\n     numpy: 1.14.6\r\n     scipy: 1.1.0\r\n    Cython: 0.29.6\r\n    pandas: 0.22.0\r\n\r\n<!-- Thanks for contributing! -->\r\n\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/scikit-learn__scikit-learn__0.21.git",
    "requested_commit": "",
    "mayil_response": "- Modify the `label_ranking_average_precision_score` function to correctly handle the case when `sample_weight` is applied to samples with all true or all false labels.\n- Specifically, adjust the section where `aux` is multiplied by `sample_weight[i]` to ensure that the weight is applied correctly when `relevant.size == 0 or relevant.size == n_labels`.\n- The corrected code snippet should look like this:\n\n```python\n# ... existing code ...\n\nfor i, (start, stop) in enumerate(zip(y_true.indptr, y_true.indptr[1:])):\n    relevant = y_true.indices[start:stop]\n\n    if relevant.size == 0 or relevant.size == n_labels:\n        # If all labels are relevant or unrelevant, the score is also\n        # equal to 1. The label ranking has no meaning.\n        aux = 1.0\n    else:\n        # ... existing code for calculating aux ...\n\n    # Apply sample_weight regardless of the relevant.size\n    if sample_weight is not None:\n        aux *= sample_weight[i]\n    out += aux\n\n# Normalize by the sum of sample weights\nif sample_weight is None:\n    out /= n_samples\nelse:\n    out /= np.sum(sample_weight)\n\nreturn out\n```\n\n- Ensure that the normalization of the final score by the sum of sample weights is done outside the loop, as shown in the corrected snippet.\n\n### Code snippets to check\n\n-  \u2192 [sklearn](https://github.com/testbed/scikit-learn__scikit-learn__0.21/tree//sklearn) \u2192 [metrics](https://github.com/testbed/scikit-learn__scikit-learn__0.21/tree//sklearn/metrics)- [Lines 1152 - 1239](https://github.com/testbed/scikit-learn__scikit-learn__0.21/blob//sklearn/metrics/_ranking.py#L1152-L1239)\n\n This snippet contains the implementation of label_ranking_average_precision_score, which is directly related to the issue. It shows how the sample_weight is applied and where the special case for samples with all true or all false labels is handled, which is where the issue occurs. \n\n\n   - [Lines 1391 - 1398](https://github.com/testbed/scikit-learn__scikit-learn__0.21/blob//sklearn/metrics/_ranking.py#L1391-L1398)\n\n This snippet is part of the label_ranking_average_precision_score function and shows the handling of the special case where precision is set to 1 for samples with all true or all false labels. It is relevant because the issue describes that sample_weighting is bypassed in this case. \n\n\n   - [Lines 1151 - 1151](https://github.com/testbed/scikit-learn__scikit-learn__0.21/blob//sklearn/metrics/_ranking.py#L1151-L1151)\n\n This snippet shows the function signature of label_ranking_average_precision_score, which is relevant for understanding the parameters involved in the issue, including sample_weight.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0008225,
        "snippet_processor": 0.051160000000000004,
        "issue_star_creation": 0.035809999999999995,
        "issue_star_solver": 0.07194,
        "bouncer": 0.02488
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711740446.668909,
        "relevant_snippets": [
            {
                "code": "def label_ranking_average_precision_score(y_true, y_score, *, sample_weight=None):",
                "filename": "sklearn/metrics/_ranking.py",
                "start_index": 43887,
                "end_index": 43969,
                "start_line": 1151,
                "end_line": 1151,
                "max_line": 1995,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            },
            {
                "code": "with np.errstate(divide=\"ignore\", invalid=\"ignore\"):\n        loss /= (n_labels - n_positives) * n_positives\n\n    # When there is no positive or no negative labels, those values should\n    # be consider as correct, i.e. the ranking doesn't matter.\n    loss[np.logical_or(n_positives == 0, n_positives == n_labels)] = 0.0\n\n    return np.average(loss, weights=sample_weight)",
                "filename": "sklearn/metrics/_ranking.py",
                "start_index": 52571,
                "end_index": 52942,
                "start_line": 1391,
                "end_line": 1398,
                "max_line": 1995,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            },
            {
                "code": "def _binary_uninterpolated_average_precision(\n        y_true, y_score, pos_label=1, sample_weight=None\n    ):\n        precision, recall, _ = precision_recall_curve(\n            y_true, y_score, pos_label=pos_label, sample_weight=sample_weight\n        )\n        # Return the step function integral\n        # The following works because the last entry of precision is\n        # guaranteed to be 1, as returned by precision_recall_curve\n        return -np.sum(np.diff(recall) * np.array(precision)[:-1])\n\n    y_type = type_of_target(y_true, input_name=\"y_true\")\n\n    # Convert to Python primitive type to avoid NumPy type / Python str\n    # comparison. See https://github.com/numpy/numpy/issues/6784\n    present_labels = np.unique(y_true).tolist()\n\n    if y_type == \"binary\":\n        if len(present_labels) == 2 and pos_label not in present_labels:\n            raise ValueError(\n                f\"pos_label={pos_label} is not a valid label. It should be \"\n                f\"one of {present_labels}\"\n            )\n\n    elif y_type == \"multilabel-indicator\" and pos_label != 1:\n        raise ValueError(\n            \"Parameter pos_label is fixed to 1 for multilabel-indicator y_true. \"\n            \"Do not set pos_label or set pos_label to 1.\"\n        )\n\n    elif y_type == \"multiclass\":\n        if pos_label != 1:\n            raise ValueError(\n                \"Parameter pos_label is fixed to 1 for multiclass y_true. \"\n                \"Do not set pos_label or set pos_label to 1.\"\n            )\n        y_true = label_binarize(y_true, classes=present_labels)\n\n    average_precision = partial(\n        _binary_uninterpolated_average_precision, pos_label=pos_label\n    )\n    return _average_binary_score(\n        average_precision, y_true, y_score, average, sample_weight=sample_weight\n    )",
                "filename": "sklearn/metrics/_ranking.py",
                "start_index": 7615,
                "end_index": 9401,
                "start_line": 226,
                "end_line": 1975,
                "max_line": 1995,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            },
            {
                "code": "def label_ranking_loss(y_true, y_score, *, sample_weight=None):",
                "filename": "sklearn/metrics/_ranking.py",
                "start_index": 49516,
                "end_index": 49579,
                "start_line": 1317,
                "end_line": 1317,
                "max_line": 1995,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            },
            {
                "code": "@ignore_warnings(category=FutureWarning)\ndef check_classifiers_one_label(name, classifier_orig):\n    error_string_fit = \"Classifier can't train when only one class is present.\"\n    error_string_predict = \"Classifier can't predict when only one class is present.\"\n    rnd = np.random.RandomState(0)\n    X_train = rnd.uniform(size=(10, 3))\n    X_test = rnd.uniform(size=(10, 3))\n    y = np.ones(10)\n    # catch deprecation warnings\n    with ignore_warnings(category=FutureWarning):\n        classifier = clone(classifier_orig)\n        with raises(\n            ValueError, match=\"class\", may_pass=True, err_msg=error_string_fit\n        ) as cm:\n            classifier.fit(X_train, y)\n\n        if cm.raised_and_matched:\n            # ValueError was raised with proper error message\n            return\n\n        assert_array_equal(classifier.predict(X_test), y, err_msg=error_string_predict)\n\n\n@ignore_warnings(category=FutureWarning)\ndef check_classifiers_one_label_sample_weights(name, classifier_orig):\n    \"\"\"Check that classifiers accepting sample_weight fit or throws a ValueError with\n    an explicit message if the problem is reduced to one class.\n    \"\"\"\n    error_fit = (\n        f\"{name} failed when fitted on one label after sample_weight trimming. Error \"\n        \"message is not explicit, it should have 'class'.\"\n    )\n    error_predict = f\"{name} prediction results should only output the remaining class.\"\n    rnd = np.random.RandomState(0)\n    # X should be square for test on SVC with precomputed kernel\n    X_train = rnd.uniform(size=(10, 10))\n    X_test = rnd.uniform(size=(10, 10))\n    y = np.arange(10) % 2\n    sample_weight = y.copy()  # select a single class\n    classifier = clone(classifier_orig)\n\n    if has_fit_parameter(classifier, \"sample_weight\"):\n        match = [r\"\\bclass(es)?\\b\", error_predict]\n        err_type, err_msg = (AssertionError, ValueError), error_fit\n    else:\n        match = r\"\\bsample_weight\\b\"\n        err_type, err_msg = (TypeError, ValueError), None\n\n    with raises(err_type, match=match, may_pass=True, err_msg=err_msg) as cm:\n        classifier.fit(X_train, y, sample_weight=sample_weight)\n        if cm.raised_and_matched:\n            # raise the proper error type with the proper error message\n            return\n        # for estimators that do not fail, they should be able to predict the only\n        # class remaining during fit\n        assert_array_equal(\n            classifier.predict(X_test), np.ones(10), err_msg=error_predict\n        )",
                "filename": "sklearn/utils/estimator_checks.py",
                "start_index": 79371,
                "end_index": 81868,
                "start_line": 181,
                "end_line": 4639,
                "max_line": 4639,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            },
            {
                "code": "\"\"\"Compute Ranking loss measure.\n\n    Compute the average number of label pairs that are incorrectly ordered\n    given y_score weighted by the size of the label set and the number of\n    labels not in the label set.\n\n    This is similar to the error set size, but weighted by the number of\n    relevant and irrelevant labels. The best performance is achieved with\n    a ranking loss of zero.\n\n    Read more in the :ref:`User Guide <label_ranking_loss>`.\n\n    .. versionadded:: 0.17\n       A function *label_ranking_loss*\n\n    Parameters\n    ----------\n    y_true : {array-like, sparse matrix} of shape (n_samples, n_labels)\n        True binary labels in binary indicator format.\n\n    y_score : array-like of shape (n_samples, n_labels)\n        Target scores, can either be probability estimates of the positive\n        class, confidence values, or non-thresholded measure of decisions\n        (as returned by \"decision_function\" on some classifiers).\n\n    sample_weight : array-like of shape (n_samples,), default=None\n        Sample weights.\n\n    Returns\n    -------\n    loss : float\n        Average number of label pairs that are incorrectly ordered given\n        y_score weighted by the size of the label set and the number of labels not\n        in the label set.\n\n    References\n    ----------\n    .. [1] Tsoumakas, G., Katakis, I., & Vlahavas, I. (2010).\n           Mining multi-label data. In Data mining and knowledge discovery\n           handbook (pp. 667-685). Springer US.\n    \"\"\"\n    y_true = check_array(y_true, ensure_2d=False, accept_sparse=\"csr\")\n    y_score = check_array(y_score, ensure_2d=False)\n    check_consistent_length(y_true, y_score, sample_weight)\n\n    y_type = type_of_target(y_true, input_name=\"y_true\")\n    if y_type not in (\"multilabel-indicator\",):\n        raise ValueError(\"{0} format is not supported\".format(y_type))\n\n    if y_true.shape != y_score.shape:\n        raise ValueError(\"y_true and y_score have different shape\")\n\n    n_samples, n_labels = y_true.shape\n\n    y_true = csr_matrix(y_true)\n\n    loss = np.zeros(n_samples)\n    for i, (start, stop) in enumerate(zip(y_true.indptr, y_true.indptr[1:])):\n        # Sort and bin the label scores\n        unique_scores, unique_inverse = np.unique(y_score[i], return_inverse=True)\n        true_at_reversed_rank = np.bincount(\n            unique_inverse[y_true.indices[start:stop]], minlength=len(unique_scores)\n        )\n        all_at_reversed_rank = np.bincount(unique_inverse, minlength=len(unique_scores))\n        false_at_reversed_rank = all_at_reversed_rank - true_at_reversed_rank\n\n        # if the scores are ordered, it's possible to count the number of\n        # incorrectly ordered paires in linear time by cumulatively counting\n        # how many false labels of a given score have a score higher than the\n        # accumulated true labels with lower score.\n        loss[i] = np.dot(true_at_reversed_rank.cumsum(), false_at_reversed_rank)\n\n    n_positives = count_nonzero(y_true, axis=1)",
                "filename": "sklearn/metrics/_ranking.py",
                "start_index": 49584,
                "end_index": 52566,
                "start_line": 1318,
                "end_line": 1390,
                "max_line": 1995,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            },
            {
                "code": "\"\"\"Compute ranking-based average precision.\n\n    Label ranking average precision (LRAP) is the average over each ground\n    truth label assigned to each sample, of the ratio of true vs. total\n    labels with lower score.\n\n    This metric is used in multilabel ranking problem, where the goal\n    is to give better rank to the labels associated to each sample.\n\n    The obtained score is always strictly greater than 0 and\n    the best value is 1.\n\n    Read more in the :ref:`User Guide <label_ranking_average_precision>`.\n\n    Parameters\n    ----------\n    y_true : {array-like, sparse matrix} of shape (n_samples, n_labels)\n        True binary labels in binary indicator format.\n\n    y_score : array-like of shape (n_samples, n_labels)\n        Target scores, can either be probability estimates of the positive\n        class, confidence values, or non-thresholded measure of decisions\n        (as returned by \"decision_function\" on some classifiers).\n\n    sample_weight : array-like of shape (n_samples,), default=None\n        Sample weights.\n\n        .. versionadded:: 0.20\n\n    Returns\n    -------\n    score : float\n        Ranking-based average precision score.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.metrics import label_ranking_average_precision_score\n    >>> y_true = np.array([[1, 0, 0], [0, 0, 1]])\n    >>> y_score = np.array([[0.75, 0.5, 1], [1, 0.2, 0.1]])\n    >>> label_ranking_average_precision_score(y_true, y_score)\n    0.416...\n    \"\"\"\n    check_consistent_length(y_true, y_score, sample_weight)\n    y_true = check_array(y_true, ensure_2d=False, accept_sparse=\"csr\")\n    y_score = check_array(y_score, ensure_2d=False)\n\n    if y_true.shape != y_score.shape:\n        raise ValueError(\"y_true and y_score have different shape\")\n\n    # Handle badly formatted array and the degenerate case with one label\n    y_type = type_of_target(y_true, input_name=\"y_true\")\n    if y_type != \"multilabel-indicator\" and not (\n        y_type == \"binary\" and y_true.ndim == 2\n    ):\n        raise ValueError(\"{0} format is not supported\".format(y_type))\n\n    if not issparse(y_true):\n        y_true = csr_matrix(y_true)\n\n    y_score = -y_score\n\n    n_samples, n_labels = y_true.shape\n\n    out = 0.0\n    for i, (start, stop) in enumerate(zip(y_true.indptr, y_true.indptr[1:])):\n        relevant = y_true.indices[start:stop]\n\n        if relevant.size == 0 or relevant.size == n_labels:\n            # If all labels are relevant or unrelevant, the score is also\n            # equal to 1. The label ranking has no meaning.\n            aux = 1.0\n        else:\n            scores_i = y_score[i]\n            rank = rankdata(scores_i, \"max\")[relevant]\n            L = rankdata(scores_i[relevant], \"max\")\n            aux = (L / rank).mean()\n\n        if sample_weight is not None:\n            aux = aux * sample_weight[i]\n        out += aux\n\n    if sample_weight is None:\n        out /= n_samples\n    else:\n        out /= np.sum(sample_weight)\n\n    return out",
                "filename": "sklearn/metrics/_ranking.py",
                "start_index": 43974,
                "end_index": 46954,
                "start_line": 1152,
                "end_line": 1239,
                "max_line": 1995,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            },
            {
                "code": "if y_true.ndim == 1:\n        if samplewise:\n            raise ValueError(\n                \"Samplewise metrics are not available outside of \"\n                \"multilabel classification.\"\n            )\n\n        le = LabelEncoder()\n        le.fit(labels)\n        y_true = le.transform(y_true)\n        y_pred = le.transform(y_pred)\n        sorted_labels = le.classes_\n\n        # labels are now from 0 to len(labels) - 1 -> use bincount\n        tp = y_true == y_pred\n        tp_bins = y_true[tp]\n        if sample_weight is not None:\n            tp_bins_weights = np.asarray(sample_weight)[tp]\n        else:\n            tp_bins_weights = None\n\n        if len(tp_bins):\n            tp_sum = np.bincount(\n                tp_bins, weights=tp_bins_weights, minlength=len(labels)\n            )\n        else:\n            # Pathological case\n            true_sum = pred_sum = tp_sum = np.zeros(len(labels))\n        if len(y_pred):\n            pred_sum = np.bincount(y_pred, weights=sample_weight, minlength=len(labels))\n        if len(y_true):\n            true_sum = np.bincount(y_true, weights=sample_weight, minlength=len(labels))\n\n        # Retain only selected labels\n        indices = np.searchsorted(sorted_labels, labels[:n_labels])\n        tp_sum = tp_sum[indices]\n        true_sum = true_sum[indices]\n        pred_sum = pred_sum[indices]\n\n    else:\n        sum_axis = 1 if samplewise else 0\n\n        # All labels are index integers for multilabel.\n        # Select labels:\n        if not np.array_equal(labels, present_labels):\n            if np.max(labels) > np.max(present_labels):\n                raise ValueError(\n                    \"All labels must be in [0, n labels) for \"\n                    \"multilabel targets. \"\n                    \"Got %d > %d\" % (np.max(labels), np.max(present_labels))\n                )\n            if np.min(labels) < 0:\n                raise ValueError(\n                    \"All labels must be in [0, n labels) for \"\n                    \"multilabel targets. \"\n                    \"Got %d < 0\"\n                    % np.min(labels)\n                )\n\n        if n_labels is not None:\n            y_true = y_true[:, labels[:n_labels]]\n            y_pred = y_pred[:, labels[:n_labels]]\n\n        # calculate weighted counts\n        true_and_pred = y_true.multiply(y_pred)\n        tp_sum = count_nonzero(\n            true_and_pred, axis=sum_axis, sample_weight=sample_weight\n        )\n        pred_sum = count_nonzero(y_pred, axis=sum_axis, sample_weight=sample_weight)\n        true_sum = count_nonzero(y_true, axis=sum_axis, sample_weight=sample_weight)\n\n    fp = pred_sum - tp_sum\n    fn = true_sum - tp_sum\n    tp = tp_sum",
                "filename": "sklearn/metrics/_classification.py",
                "start_index": 18044,
                "end_index": 20694,
                "start_line": 516,
                "end_line": 589,
                "max_line": 3182,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            },
            {
                "code": "@ignore_warnings(category=FutureWarning)\ndef check_class_weight_balanced_linear_classifier(name, Classifier):\n    \"\"\"Test class weights with non-contiguous class labels.\"\"\"\n    # this is run on classes, not instances, though this should be changed\n    X = np.array([[-1.0, -1.0], [-1.0, 0], [-0.8, -1.0], [1.0, 1.0], [1.0, 0.0]])\n    y = np.array([1, 1, 1, -1, -1])\n\n    classifier = Classifier()\n\n    if hasattr(classifier, \"n_iter\"):\n        # This is a very small dataset, default n_iter are likely to prevent\n        # convergence\n        classifier.set_params(n_iter=1000)\n    if hasattr(classifier, \"max_iter\"):\n        classifier.set_params(max_iter=1000)\n    if hasattr(classifier, \"cv\"):\n        classifier.set_params(cv=3)\n    set_random_state(classifier)\n\n    # Let the model compute the class frequencies\n    classifier.set_params(class_weight=\"balanced\")\n    coef_balanced = classifier.fit(X, y).coef_.copy()\n\n    # Count each label occurrence to reweight manually\n    n_samples = len(y)\n    n_classes = float(len(np.unique(y)))\n\n    class_weight = {\n        1: n_samples / (np.sum(y == 1) * n_classes),\n        -1: n_samples / (np.sum(y == -1) * n_classes),\n    }\n    classifier.set_params(class_weight=class_weight)\n    coef_manual = classifier.fit(X, y).coef_.copy()\n\n    assert_allclose(\n        coef_balanced,\n        coef_manual,\n        err_msg=\"Classifier %s is not computing class_weight=balanced properly.\" % name,\n    )\n\n\n@ignore_warnings(category=FutureWarning)\ndef check_estimators_overwrite_params(name, estimator_orig):\n    X, y = make_blobs(random_state=0, n_samples=21)\n    X = _enforce_estimator_tags_X(estimator_orig, X, kernel=rbf_kernel)\n    estimator = clone(estimator_orig)\n    y = _enforce_estimator_tags_y(estimator, y)\n\n    set_random_state(estimator)\n\n    # Make a physical copy of the original estimator parameters before fitting.\n    params = estimator.get_params()\n    original_params = deepcopy(params)\n\n    # Fit the model\n    estimator.fit(X, y)\n\n    # Compare the state of the model parameters with the original parameters\n    new_params = estimator.get_params()\n    for param_name, original_value in original_params.items():\n        new_value = new_params[param_name]\n\n        # We should never change or mutate the internal state of input\n        # parameters by default. To check this we use the joblib.hash function\n        # that introspects recursively any subobjects to compute a checksum.\n        # The only exception to this rule of immutable constructor parameters\n        # is possible RandomState instance but in this check we explicitly\n        # fixed the random_state params recursively to be integer seeds.\n        assert joblib.hash(new_value) == joblib.hash(original_value), (\n            \"Estimator %s should not change or mutate \"\n            \" the parameter %s from %s to %s during fit.\"\n            % (name, param_name, original_value, new_value)\n        )",
                "filename": "sklearn/utils/estimator_checks.py",
                "start_index": 112710,
                "end_index": 115635,
                "start_line": 181,
                "end_line": 4639,
                "max_line": 4639,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            },
            {
                "code": "gbdt_no_cst = HistGradientBoostingRegressor().fit(X, y)\ngbdt_cst = HistGradientBoostingRegressor(monotonic_cst=[1, 0]).fit(X, y)\n\n# plot_partial_dependence has been removed in version 1.2. From 1.2, use\n# PartialDependenceDisplay instead.\n# disp = plot_partial_dependence(\ndisp = PartialDependenceDisplay.from_estimator(\n    gbdt_no_cst,\n    X,\n    features=[0],\n    feature_names=[\"feature 0\"],\n    line_kw={\"linewidth\": 4, \"label\": \"unconstrained\", \"color\": \"tab:blue\"},\n)\n# plot_partial_dependence(\nPartialDependenceDisplay.from_estimator(\n    gbdt_cst,\n    X,\n    features=[0],\n    line_kw={\"linewidth\": 4, \"label\": \"constrained\", \"color\": \"tab:orange\"},\n    ax=disp.axes_,\n)\ndisp.axes_[0, 0].plot(\n    X[:, 0], y, \"o\", alpha=0.5, zorder=-1, label=\"samples\", color=\"tab:green\"\n)\ndisp.axes_[0, 0].set_ylim(-3, 3)\ndisp.axes_[0, 0].set_xlim(-1, 1)\nplt.legend()\nplt.show()\n\n##############################################################################\n# Sample-weight support for Lasso and ElasticNet\n# ----------------------------------------------\n# The two linear regressors :class:`~sklearn.linear_model.Lasso` and\n# :class:`~sklearn.linear_model.ElasticNet` now support sample weights.\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import make_regression\nfrom sklearn.linear_model import Lasso\nimport numpy as np\n\nn_samples, n_features = 1000, 20\nrng = np.random.RandomState(0)\nX, y = make_regression(n_samples, n_features, random_state=rng)\nsample_weight = rng.rand(n_samples)\nX_train, X_test, y_train, y_test, sw_train, sw_test = train_test_split(\n    X, y, sample_weight, random_state=rng\n)\nreg = Lasso()\nreg.fit(X_train, y_train, sample_weight=sw_train)\nprint(reg.score(X_test, y_test, sw_test))",
                "filename": "examples/release_highlights/plot_release_highlights_0_23_0.py",
                "start_index": 5973,
                "end_index": 7708,
                "start_line": 140,
                "end_line": 189,
                "max_line": 189,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "sklearn/metrics/_ranking.py": [
                {
                    "chunk": {
                        "code": "\"\"\"Compute ranking-based average precision.\n\n    Label ranking average precision (LRAP) is the average over each ground\n    truth label assigned to each sample, of the ratio of true vs. total\n    labels with lower score.\n\n    This metric is used in multilabel ranking problem, where the goal\n    is to give better rank to the labels associated to each sample.\n\n    The obtained score is always strictly greater than 0 and\n    the best value is 1.\n\n    Read more in the :ref:`User Guide <label_ranking_average_precision>`.\n\n    Parameters\n    ----------\n    y_true : {array-like, sparse matrix} of shape (n_samples, n_labels)\n        True binary labels in binary indicator format.\n\n    y_score : array-like of shape (n_samples, n_labels)\n        Target scores, can either be probability estimates of the positive\n        class, confidence values, or non-thresholded measure of decisions\n        (as returned by \"decision_function\" on some classifiers).\n\n    sample_weight : array-like of shape (n_samples,), default=None\n        Sample weights.\n\n        .. versionadded:: 0.20\n\n    Returns\n    -------\n    score : float\n        Ranking-based average precision score.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.metrics import label_ranking_average_precision_score\n    >>> y_true = np.array([[1, 0, 0], [0, 0, 1]])\n    >>> y_score = np.array([[0.75, 0.5, 1], [1, 0.2, 0.1]])\n    >>> label_ranking_average_precision_score(y_true, y_score)\n    0.416...\n    \"\"\"\n    check_consistent_length(y_true, y_score, sample_weight)\n    y_true = check_array(y_true, ensure_2d=False, accept_sparse=\"csr\")\n    y_score = check_array(y_score, ensure_2d=False)\n\n    if y_true.shape != y_score.shape:\n        raise ValueError(\"y_true and y_score have different shape\")\n\n    # Handle badly formatted array and the degenerate case with one label\n    y_type = type_of_target(y_true, input_name=\"y_true\")\n    if y_type != \"multilabel-indicator\" and not (\n        y_type == \"binary\" and y_true.ndim == 2\n    ):\n        raise ValueError(\"{0} format is not supported\".format(y_type))\n\n    if not issparse(y_true):\n        y_true = csr_matrix(y_true)\n\n    y_score = -y_score\n\n    n_samples, n_labels = y_true.shape\n\n    out = 0.0\n    for i, (start, stop) in enumerate(zip(y_true.indptr, y_true.indptr[1:])):\n        relevant = y_true.indices[start:stop]\n\n        if relevant.size == 0 or relevant.size == n_labels:\n            # If all labels are relevant or unrelevant, the score is also\n            # equal to 1. The label ranking has no meaning.\n            aux = 1.0\n        else:\n            scores_i = y_score[i]\n            rank = rankdata(scores_i, \"max\")[relevant]\n            L = rankdata(scores_i[relevant], \"max\")\n            aux = (L / rank).mean()\n\n        if sample_weight is not None:\n            aux = aux * sample_weight[i]\n        out += aux\n\n    if sample_weight is None:\n        out /= n_samples\n    else:\n        out /= np.sum(sample_weight)\n\n    return out",
                        "filename": "sklearn/metrics/_ranking.py",
                        "start_index": 43974,
                        "end_index": 46954,
                        "start_line": 1152,
                        "end_line": 1239,
                        "max_line": 1995,
                        "git_instance": "github",
                        "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the implementation of label_ranking_average_precision_score, which is directly related to the issue. It shows how the sample_weight is applied and where the special case for samples with all true or all false labels is handled, which is where the issue occurs."
                },
                {
                    "chunk": {
                        "code": "with np.errstate(divide=\"ignore\", invalid=\"ignore\"):\n        loss /= (n_labels - n_positives) * n_positives\n\n    # When there is no positive or no negative labels, those values should\n    # be consider as correct, i.e. the ranking doesn't matter.\n    loss[np.logical_or(n_positives == 0, n_positives == n_labels)] = 0.0\n\n    return np.average(loss, weights=sample_weight)",
                        "filename": "sklearn/metrics/_ranking.py",
                        "start_index": 52571,
                        "end_index": 52942,
                        "start_line": 1391,
                        "end_line": 1398,
                        "max_line": 1995,
                        "git_instance": "github",
                        "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is part of the label_ranking_average_precision_score function and shows the handling of the special case where precision is set to 1 for samples with all true or all false labels. It is relevant because the issue describes that sample_weighting is bypassed in this case."
                },
                {
                    "chunk": {
                        "code": "def label_ranking_average_precision_score(y_true, y_score, *, sample_weight=None):",
                        "filename": "sklearn/metrics/_ranking.py",
                        "start_index": 43887,
                        "end_index": 43969,
                        "start_line": 1151,
                        "end_line": 1151,
                        "max_line": 1995,
                        "git_instance": "github",
                        "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet shows the function signature of label_ranking_average_precision_score, which is relevant for understanding the parameters involved in the issue, including sample_weight."
                }
            ]
        },
        "solution_task": "- Modify the `label_ranking_average_precision_score` function to correctly handle the case when `sample_weight` is applied to samples with all true or all false labels.\n- Specifically, adjust the section where `aux` is multiplied by `sample_weight[i]` to ensure that the weight is applied correctly when `relevant.size == 0 or relevant.size == n_labels`.\n- The corrected code snippet should look like this:\n\n```python\n# ... existing code ...\n\nfor i, (start, stop) in enumerate(zip(y_true.indptr, y_true.indptr[1:])):\n    relevant = y_true.indices[start:stop]\n\n    if relevant.size == 0 or relevant.size == n_labels:\n        # If all labels are relevant or unrelevant, the score is also\n        # equal to 1. The label ranking has no meaning.\n        aux = 1.0\n    else:\n        # ... existing code for calculating aux ...\n\n    # Apply sample_weight regardless of the relevant.size\n    if sample_weight is not None:\n        aux *= sample_weight[i]\n    out += aux\n\n# Normalize by the sum of sample weights\nif sample_weight is None:\n    out /= n_samples\nelse:\n    out /= np.sum(sample_weight)\n\nreturn out\n```\n\n- Ensure that the normalization of the final score by the sum of sample weights is done outside the loop, as shown in the corrected snippet.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable solution to the bug described in the PROMPT. It correctly identifies the need to modify the `label_ranking_average_precision_score` function to handle the case when `sample_weight` is applied to samples with all true or all false labels. The RESPONSE includes a corrected code snippet that applies the sample weight correctly and ensures that the normalization of the final score is done outside the loop, which is consistent with the expected behavior described in the PROMPT. Additionally, the RESPONSE provides links to the relevant code snippets in the scikit-learn repository, which is helpful for locating the sections of code that need to be reviewed and modified. The RESPONSE is comprehensive and addresses the main issue of sample weighting not being applied to certain samples, which is the core of the bug described.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711740588.9968672,
        "result": "- Modify the `label_ranking_average_precision_score` function to correctly handle the case when `sample_weight` is applied to samples with all true or all false labels.\n- Specifically, adjust the section where `aux` is multiplied by `sample_weight[i]` to ensure that the weight is applied correctly when `relevant.size == 0 or relevant.size == n_labels`.\n- The corrected code snippet should look like this:\n\n```python\n# ... existing code ...\n\nfor i, (start, stop) in enumerate(zip(y_true.indptr, y_true.indptr[1:])):\n    relevant = y_true.indices[start:stop]\n\n    if relevant.size == 0 or relevant.size == n_labels:\n        # If all labels are relevant or unrelevant, the score is also\n        # equal to 1. The label ranking has no meaning.\n        aux = 1.0\n    else:\n        # ... existing code for calculating aux ...\n\n    # Apply sample_weight regardless of the relevant.size\n    if sample_weight is not None:\n        aux *= sample_weight[i]\n    out += aux\n\n# Normalize by the sum of sample weights\nif sample_weight is None:\n    out /= n_samples\nelse:\n    out /= np.sum(sample_weight)\n\nreturn out\n```\n\n- Ensure that the normalization of the final score by the sum of sample weights is done outside the loop, as shown in the corrected snippet.\n\n### Code snippets to check\n\n-  \u2192 [sklearn](https://github.com/testbed/scikit-learn__scikit-learn__0.21/tree//sklearn) \u2192 [metrics](https://github.com/testbed/scikit-learn__scikit-learn__0.21/tree//sklearn/metrics)- [Lines 1152 - 1239](https://github.com/testbed/scikit-learn__scikit-learn__0.21/blob//sklearn/metrics/_ranking.py#L1152-L1239)\n\n This snippet contains the implementation of label_ranking_average_precision_score, which is directly related to the issue. It shows how the sample_weight is applied and where the special case for samples with all true or all false labels is handled, which is where the issue occurs. \n\n\n   - [Lines 1391 - 1398](https://github.com/testbed/scikit-learn__scikit-learn__0.21/blob//sklearn/metrics/_ranking.py#L1391-L1398)\n\n This snippet is part of the label_ranking_average_precision_score function and shows the handling of the special case where precision is set to 1 for samples with all true or all false labels. It is relevant because the issue describes that sample_weighting is bypassed in this case. \n\n\n   - [Lines 1151 - 1151](https://github.com/testbed/scikit-learn__scikit-learn__0.21/blob//sklearn/metrics/_ranking.py#L1151-L1151)\n\n This snippet shows the function signature of label_ranking_average_precision_score, which is relevant for understanding the parameters involved in the issue, including sample_weight."
    }
}