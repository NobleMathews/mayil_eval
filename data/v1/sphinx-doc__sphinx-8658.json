{
    "id": "sphinx-doc__sphinx-8658",
    "repo_name": "testbed/sphinx-doc__sphinx__3.5",
    "task_id": 5264655482671472806,
    "title": "Napoleon: more custom docstring section styles",
    "body": "Although the `napoleon_custom_sections` option help renders custom docstring section, the style is inconsistent with the rest of the doc.\r\n\r\nFor example, I have a custom docstring section `Side Effect`. I would like it to be displayed as `returns` or `parameters` docstring section. However, `napoleon_custom_sections` option rendesr `Side Effect` in a different style shown in the following picture.\r\n\r\n![\u5fae\u4fe1\u622a\u56fe_20201221155650](https://user-images.githubusercontent.com/24267981/102821833-c9d86900-43a5-11eb-9102-777c7ff3e478.png)\r\n\r\n\r\nIt will be really helpful if we can customize the custom sections a bit more. The following setting has a similar effect, but it renders the Parameters name instead of the custom name.\r\n```\r\nnapoleon_use_param = False\r\nnapoleon_custom_sections = [('Custom name', 'Parameters')]\r\n```\r\nI would like to do something like the following so that my Custom section has the same style as the Parameter section, and it still keeps my custom name:\r\n\r\n```\r\n\r\nnapoleon_custom_sections = [(\"Side Effects\", \"display_like_parameters\"), ...]\r\n\r\n```\r\n\r\nor\r\n\r\n```\r\nnapoleon_custom_sections = [(\"Side Effects\", \"Parameters\") ]\r\nnapoleon_custom_section_rename = False # True is default for backwards compatibility.\r\n```\r\nThe following link includes more details about the solutions:\r\n[Format custom \"Side Effects\" docstring section in-toto/in-toto#401](https://github.com/in-toto/in-toto/issues/401)\r\n\r\nOthers people have expressed a similar desire (see sphinx-contrib/napoleon#2)\r\n\r\nIf you are interested, I would like to provide a PR for this. Thanks!\r\n\r\n\r\n\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/sphinx-doc__sphinx__3.5.git",
    "requested_commit": "",
    "mayil_response": "To implement the feature request for more custom docstring section styles in the Napoleon Sphinx extension, you can follow these steps:\n\n- Modify the `napoleon_custom_sections` configuration to accept a new style option that indicates the desired rendering style, such as \"display_like_parameters\".\n- Update the `NumpyDocstring` and `GoogleDocstring` classes to handle the new style option when parsing docstrings.\n- Ensure that the custom section is rendered in the same style as the specified section (e.g., \"Parameters\") while keeping the custom name.\n\nHere's a high-level overview of the changes that need to be made:\n\n- Update the `napoleon_custom_sections` configuration to accept a tuple with the custom section name and the desired style, e.g., `(\"Side Effects\", \"display_like_parameters\")`.\n- In the `NumpyDocstring` and `GoogleDocstring` classes, add logic to check for the new style option in the custom sections.\n- Modify the parsing functions to render the custom sections with the same style as the specified section (e.g., \"Parameters\").\n- Ensure that the custom section name is preserved in the output.\n\nHere's a pseudo-code example of what the changes might look like:\n\n```python\n# In sphinx/ext/napoleon/docstring.py\n\nclass NumpyDocstring:\n    def _parse_custom_sections(self, section, use_param_style):\n        # Existing code to parse custom sections\n        # ...\n\n        # New code to handle custom style option\n        if use_param_style:\n            # Render the custom section like the \"Parameters\" section\n            self._parse_parameters_section(section)\n        else:\n            # Render the custom section with the generic style\n            self._parse_generic_section(section)\n\n# In sphinx/ext/napoleon/__init__.py\n\n# Update the napoleon_custom_sections configuration documentation\nnapoleon_custom_sections = [\n    # Existing description\n    # ...\n\n    # New style option description\n    (\"Side Effects\", \"display_like_parameters\"),  # Renders like \"Parameters\" section\n]\n\n# In the Sphinx conf.py file\n\n# Update the configuration to use the new style option\nnapoleon_custom_sections = [\n    (\"Side Effects\", \"display_like_parameters\"),\n    # Other custom sections\n]\n```\n\nRemember to update the documentation and add tests for the new feature to ensure it works as expected and does not introduce regressions.\n\nThis is a high-level overview, and the actual implementation may require more in-depth changes to the Napoleon extension's codebase. If you are not familiar with the internals of the Napoleon extension, you may need to spend some time understanding how it parses and renders docstrings before attempting to implement this feature.\n\n### Code snippets to check\n\n-  \u2192 [sphinx](https://github.com/testbed/sphinx-doc__sphinx__3.5/tree//sphinx) \u2192 [ext](https://github.com/testbed/sphinx-doc__sphinx__3.5/tree//sphinx/ext) \u2192 [napoleon](https://github.com/testbed/sphinx-doc__sphinx__3.5/tree//sphinx/ext/napoleon)- [Lines 65 - 434](https://github.com/testbed/sphinx-doc__sphinx__3.5/blob//sphinx/ext/napoleon/__init__.py#L65-L434)\n\n This snippet contains the definition of the 'napoleon_custom_sections' configuration option, which is directly related to the issue of customizing the style of custom docstring sections.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.000321,
        "snippet_processor": 0.062240000000000004,
        "issue_star_creation": 0.02068,
        "issue_star_solver": 0.07839,
        "bouncer": 0.031020000000000002
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711703125.752814,
        "relevant_snippets": [
            {
                "code": "\\\"\\\"\n                This will be included in the docs because it has a docstring\n                \\\"\\\"\\\"\n                return unicode(self).encode('utf-8')\n\n            def __unicode__(self):\n                # This will NOT be included in the docs\n                return unicode(self.__class__.__name__)\n\n    napoleon_use_admonition_for_examples : :obj:`bool` (Defaults to False)\n        True to use the ``.. admonition::`` directive for the **Example** and\n        **Examples** sections. False to use the ``.. rubric::`` directive\n        instead. One may look better than the other depending on what HTML\n        theme is used.\n\n        This `NumPy style`_ snippet will be converted as follows::\n\n            Example\n            -------\n            This is just a quick example\n\n        **If True**::\n\n            .. admonition:: Example\n\n               This is just a quick example\n\n        **If False**::\n\n            .. rubric:: Example\n\n            This is just a quick example\n\n    napoleon_use_admonition_for_notes : :obj:`bool` (Defaults to False)\n        True to use the ``.. admonition::`` directive for **Notes** sections.\n        False to use the ``.. rubric::`` directive instead.\n\n        Note\n        ----\n        The singular **Note** section will always be converted to a\n        ``.. note::`` directive.\n\n        See Also\n        --------\n        :confval:`napoleon_use_admonition_for_examples`\n\n    napoleon_use_admonition_for_references : :obj:`bool` (Defaults to False)\n        True to use the ``.. admonition::`` directive for **References**\n        sections. False to use the ``.. rubric::`` directive instead.\n\n        See Also\n        --------\n        :confval:`napoleon_use_admonition_for_examples`\n\n    napoleon_use_ivar : :obj:`bool` (Defaults to False)\n        True to use the ``:ivar:`` role for instance variables. False to use\n        the ``.. attribute::`` directive instead.\n\n        This `NumPy style`_ snippet will be converted as follows::\n\n            Attributes\n            ----------\n            attr1 : int\n                Description of `attr1`\n\n        **If True**::\n\n            :ivar attr1: Description of `attr1`\n            :vartype attr1: int\n\n        **If False**::\n\n            .. attribute:: attr1\n\n               Description of `attr1`\n\n               :type: int\n\n    napoleon_use_param : :obj:`bool` (Defaults to True)\n        True to use a ``:param:`` role for each function parameter. False to\n        use a single ``:parameters:`` role for all the parameters.\n\n        This `NumPy style`_ snippet will be converted as follows::\n\n            Parameters\n            ----------\n            arg1 : str\n                Description of `arg1`\n            arg2 : int, optional\n                Description of `arg2`, defaults to 0\n\n        **If True**::\n\n            :param arg1: Description of `arg1`\n            :type arg1: str\n            :param arg2: Description of `arg2`, defaults to 0\n            :type arg2: int, optional\n\n        **If False**::\n\n            :parameters: * **arg1** (*str*) --\n                           Description of `arg1`\n                         * **arg2** (*int, optional*) --\n                           Description of `arg2`, defaults to 0\n\n    napoleon_use_keyword : :obj:`bool` (Defaults to True)\n        True to use a ``:keyword:`` role for each function keyword argument.\n        False to use a single ``:keyword arguments:`` role for all the\n        keywords.\n\n        This behaves similarly to :confval:`napoleon_use_param`. Note unlike\n        docutils, ``:keyword:`` and ``:param:`` will not be treated the same\n        way - there will be a separate \"Keyword Arguments\" section, rendered\n        in the same fashion as \"Parameters\" section (type links created if\n        possible)\n\n        See Also\n        --------\n        :confval:`napoleon_use_param`\n\n    napoleon_use_rtype : :obj:`bool` (Defaults to True)\n        True to use the ``:rtype:`` role for the return type. False to output\n        the return type inline with the description.\n\n        This `NumPy style`_ snippet will be converted as follows::\n\n            Returns\n            -------\n            bool\n                True if successful, False otherwise\n\n        **If True**::\n\n            :returns: True if successful, False otherwise\n            :rtype: bool\n\n        **If False**::\n\n            :returns: *bool* -- True if successful, False otherwise\n\n    napoleon_preprocess_types : :obj:`bool` (Defaults to False)\n        Enable the type preprocessor.\n\n    napoleon_type_aliases : :obj:`dict` (Defaults to None)\n        Add a mapping of strings to string, translating types in numpy\n        style docstrings. Only works if ``napoleon_preprocess_types = True``.\n\n    napoleon_custom_sections : :obj:`list` (Defaults to None)\n        Add a list of custom sections to include, expanding the list of parsed sections.\n\n        The entries can either be strings or tuples, depending on the intention:\n          * To create a custom \"generic\" section, just pass a string.\n          * To create an alias for an existing section, pass a tuple containing the\n            alias name and the original, in that order.\n          * To create a custom section that displays like the parameters or returns\n            section, pass a tuple containing the custom section name and a string\n            value, \"params_style\" or \"returns_style\".\n\n        If an entry is just a string, it is interpreted as a header for a generic\n        section. If the entry is a tuple/list/indexed container, the first entry\n        is the name of the section, the second is the section key to emulate. If the\n        second entry value is \"params_style\" or \"returns_style\", the custom section\n        will be displayed like the parameters section or returns section.\n\n    napoleon_attr_annotations : :obj:`bool` (Defaults to True)\n        Use the type annotations of class attributes that are documented in the docstring\n        but do not have a type in the docstring.\n\n    \"\"\"",
                "filename": "sphinx/ext/napoleon/__init__.py",
                "start_index": 3388,
                "end_index": 9393,
                "start_line": 65,
                "end_line": 434,
                "max_line": 474,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.5",
                "sha": ""
            },
            {
                "code": "\"\"\"Sphinx napoleon extension settings in `conf.py`.\n\n    Listed below are all the settings used by napoleon and their default\n    values. These settings can be changed in the Sphinx `conf.py` file. Make\n    sure that \"sphinx.ext.napoleon\" is enabled in `conf.py`::\n\n        # conf.py\n\n        # Add any Sphinx extension module names here, as strings\n        extensions = ['sphinx.ext.napoleon']\n\n        # Napoleon settings\n        napoleon_google_docstring = True\n        napoleon_numpy_docstring = True\n        napoleon_include_init_with_doc = False\n        napoleon_include_private_with_doc = False\n        napoleon_include_special_with_doc = False\n        napoleon_use_admonition_for_examples = False\n        napoleon_use_admonition_for_notes = False\n        napoleon_use_admonition_for_references = False\n        napoleon_use_ivar = False\n        napoleon_use_param = True\n        napoleon_use_rtype = True\n        napoleon_use_keyword = True\n        napoleon_preprocess_types = False\n        napoleon_type_aliases = None\n        napoleon_custom_sections = None\n        napoleon_attr_annotations = True\n\n    .. _Google style:\n       https://google.github.io/styleguide/pyguide.html\n    .. _NumPy style:\n       https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard\n\n    Attributes\n    ----------\n    napoleon_google_docstring : :obj:`bool` (Defaults to True)\n        True to parse `Google style`_ docstrings. False to disable support\n        for Google style docstrings.\n    napoleon_numpy_docstring : :obj:`bool` (Defaults to True)\n        True to parse `NumPy style`_ docstrings. False to disable support\n        for NumPy style docstrings.\n    napoleon_include_init_with_doc : :obj:`bool` (Defaults to False)\n        True to list ``__init___`` docstrings separately from the class\n        docstring. False to fall back to Sphinx's default behavior, which\n        considers the ``__init___`` docstring as part of the class\n        documentation.\n\n        **If True**::\n\n            def __init__(self):\n                \\\"\\\"\\\"\n                This will be included in the docs because it has a docstring\n                \\\"\\\"\\\"\n\n            def __init__(self):\n                # This will NOT be included in the docs\n\n    napoleon_include_private_with_doc : :obj:`bool` (Defaults to False)\n        True to include private members (like ``_membername``) with docstrings\n        in the documentation. False to fall back to Sphinx's default behavior.\n\n        **If True**::\n\n            def _included(self):\n                \\\"\\\"\\\"\n                This will be included in the docs because it has a docstring\n                \\\"\\\"\\\"\n                pass\n\n            def _skipped(self):\n                # This will NOT be included in the docs\n                pass\n\n    napoleon_include_special_with_doc : :obj:`bool` (Defaults to False)\n        True to include special members (like ``__membername__``) with\n        docstrings in the documentation. False to fall back to Sphinx's\n        default behavior.\n\n        **If True**::\n\n            def __str__(self):\n                \\\"",
                "filename": "sphinx/ext/napoleon/__init__.py",
                "start_index": 292,
                "end_index": 3388,
                "start_line": 14,
                "end_line": 98,
                "max_line": 474,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.5",
                "sha": ""
            },
            {
                "code": "_config_values = {\n        'napoleon_google_docstring': (True, 'env'),\n        'napoleon_numpy_docstring': (True, 'env'),\n        'napoleon_include_init_with_doc': (False, 'env'),\n        'napoleon_include_private_with_doc': (False, 'env'),\n        'napoleon_include_special_with_doc': (False, 'env'),\n        'napoleon_use_admonition_for_examples': (False, 'env'),\n        'napoleon_use_admonition_for_notes': (False, 'env'),\n        'napoleon_use_admonition_for_references': (False, 'env'),\n        'napoleon_use_ivar': (False, 'env'),\n        'napoleon_use_param': (True, 'env'),\n        'napoleon_use_rtype': (True, 'env'),\n        'napoleon_use_keyword': (True, 'env'),\n        'napoleon_preprocess_types': (False, 'env'),\n        'napoleon_type_aliases': (None, 'env'),\n        'napoleon_custom_sections': (None, 'env'),\n        'napoleon_attr_annotations': (True, 'env'),\n    }\n\n    def __init__(self, **settings: Any) -> None:\n        for name, (default, _rebuild) in self._config_values.items():\n            setattr(self, name, default)\n        for name, value in settings.items():\n            setattr(self, name, value)",
                "filename": "sphinx/ext/napoleon/__init__.py",
                "start_index": 9398,
                "end_index": 10527,
                "start_line": 265,
                "end_line": 288,
                "max_line": 474,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.5",
                "sha": ""
            },
            {
                "code": "class SphinxSmartQuotes(SmartQuotes, SphinxTransform):\n    \"\"\"\n    Customized SmartQuotes to avoid transform for some extra node types.\n\n    refs: sphinx.parsers.RSTParser\n    \"\"\"\n    default_priority = 750\n\n    def apply(self, **kwargs: Any) -> None:\n        if not self.is_available():\n            return\n\n        # override default settings with :confval:`smartquotes_action`\n        self.smartquotes_action = self.config.smartquotes_action\n\n        super().apply()\n\n    def is_available(self) -> bool:\n        builders = self.config.smartquotes_excludes.get('builders', [])\n        languages = self.config.smartquotes_excludes.get('languages', [])\n\n        if self.document.settings.smart_quotes is False:\n            # disabled by 3rd party extension (workaround)\n            return False\n        if self.config.smartquotes is False:\n            # disabled by confval smartquotes\n            return False\n        if self.app.builder.name in builders:\n            # disabled by confval smartquotes_excludes['builders']\n            return False\n        if self.config.language in languages:\n            # disabled by confval smartquotes_excludes['languages']\n            return False\n\n        # confirm selected language supports smart_quotes or not\n        language = self.env.settings['language_code']\n        return any(\n            tag in smartchars.quotes\n            for tag in normalize_language_tag(language)\n        )\n\n    def get_tokens(self, txtnodes: list[Text]) -> Generator[tuple[str, str], None, None]:\n        # A generator that yields ``(texttype, nodetext)`` tuples for a list\n        # of \"Text\" nodes (interface to ``smartquotes.educate_tokens()``).\n        for txtnode in txtnodes:\n            if is_smartquotable(txtnode):\n                # SmartQuotes uses backslash escapes instead of null-escapes\n                text = re.sub(r'(?<=\\x00)([-\\\\\\'\".`])', r'\\\\\\1', str(txtnode))\n                yield 'plain', text\n            else:\n                # skip smart quotes\n                yield 'literal', txtnode.astext()\n\n\nclass DoctreeReadEvent(SphinxTransform):\n    \"\"\"Emit :event:`doctree-read` event.\"\"\"\n    default_priority = 880\n\n    def apply(self, **kwargs: Any) -> None:\n        self.app.emit('doctree-read', self.document)\n\n\nclass ManpageLink(SphinxTransform):\n    \"\"\"Find manpage section numbers and names\"\"\"\n    default_priority = 999\n\n    def apply(self, **kwargs: Any) -> None:\n        for node in self.document.findall(addnodes.manpage):\n            manpage = ' '.join([str(x) for x in node.children\n                                if isinstance(x, nodes.Text)])\n            pattern = r'^(?P<path>(?P<page>.+)[\\(\\.](?P<section>[1-9]\\w*)?\\)?)$'\n            info = {'path': manpage,\n                    'page': manpage,\n                    'section': ''}\n            r = re.match(pattern, manpage)\n            if r:\n                info = r.groupdict()\n            node.attributes.update(info)",
                "filename": "sphinx/transforms/__init__.py",
                "start_index": 10007,
                "end_index": 12936,
                "start_line": 299,
                "end_line": 376,
                "max_line": 418,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.5",
                "sha": ""
            },
            {
                "code": "\"\"\"Allow reference sections by :ref: role using its title.\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Any, cast\n\nfrom docutils import nodes\nfrom docutils.nodes import Node\n\nimport sphinx\nfrom sphinx.application import Sphinx\nfrom sphinx.domains.std import StandardDomain\nfrom sphinx.locale import __\nfrom sphinx.util import logging\nfrom sphinx.util.nodes import clean_astext\n\nlogger = logging.getLogger(__name__)\n\n\ndef get_node_depth(node: Node) -> int:\n    i = 0\n    cur_node = node\n    while cur_node.parent != node.document:\n        cur_node = cur_node.parent\n        i += 1\n    return i\n\n\ndef register_sections_as_label(app: Sphinx, document: Node) -> None:\n    domain = cast(StandardDomain, app.env.get_domain('std'))\n    for node in document.findall(nodes.section):\n        if (app.config.autosectionlabel_maxdepth and\n                get_node_depth(node) >= app.config.autosectionlabel_maxdepth):\n            continue\n        labelid = node['ids'][0]\n        docname = app.env.docname\n        title = cast(nodes.title, node[0])\n        ref_name = getattr(title, 'rawsource', title.astext())\n        if app.config.autosectionlabel_prefix_document:\n            name = nodes.fully_normalize_name(docname + ':' + ref_name)\n        else:\n            name = nodes.fully_normalize_name(ref_name)\n        sectname = clean_astext(title)\n\n        logger.debug(__('section \"%s\" gets labeled as \"%s\"'),\n                     ref_name, name,\n                     location=node, type='autosectionlabel', subtype=docname)\n        if name in domain.labels:\n            logger.warning(__('duplicate label %s, other instance in %s'),\n                           name, app.env.doc2path(domain.labels[name][0]),\n                           location=node, type='autosectionlabel', subtype=docname)\n\n        domain.anonlabels[name] = docname, labelid\n        domain.labels[name] = docname, labelid, sectname\n\n\ndef setup(app: Sphinx) -> dict[str, Any]:\n    app.add_config_value('autosectionlabel_prefix_document', False, 'env')\n    app.add_config_value('autosectionlabel_maxdepth', None, 'env')\n    app.connect('doctree-read', register_sections_as_label)\n\n    return {\n        'version': sphinx.__display_version__,\n        'parallel_read_safe': True,\n        'parallel_write_safe': True,\n    }",
                "filename": "sphinx/ext/autosectionlabel.py",
                "start_index": 0,
                "end_index": 2291,
                "start_line": 1,
                "end_line": 66,
                "max_line": 66,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.5",
                "sha": ""
            },
            {
                "code": "{\n        \"%(filename)s &#8212; %(docstitle)s\": \"\",\n        \"&#169; <a href=\\\"%(path)s\\\">Copyright</a> %(copyright)s.\": \"\",\n        \"&#169; Copyright %(copyright)s.\": \"\",\n        \", in \": \"\",\n        \"About these documents\": \"\\u098f\\u0987 \\u09a1\\u0995\\u09c1\\u09ae\\u09c7\\u09a8\\u09cd\\u099f \\u09b8\\u09ae\\u09cd\\u09aa\\u09b0\\u09cd\\u0995\\u09c7\",\n        \"Automatically generated list of changes in version %(version)s\": \"\\u09b8\\u09cd\\u09ac\\u09df\\u0982\\u0995\\u09cd\\u09b0\\u09bf\\u09df\\u09ad\\u09be\\u09ac\\u09c7 \\u09a4\\u09c8\\u09b0\\u09c0 %(version)s-\\u098f \\u09aa\\u09b0\\u09bf\\u09ac\\u09b0\\u09cd\\u09a4\\u09a8 \\u09b8\\u09ae\\u09c2\\u09b9\\u09c7\\u09b0 \\u09a4\\u09be\\u09b2\\u09bf\\u0995\\u09be\\u0964\",\n        \"C API changes\": \"C API \\u09aa\\u09b0\\u09bf\\u09ac\\u09b0\\u09cd\\u09a4\\u09a8\",\n        \"Changes in Version %(version)s &#8212; %(docstitle)s\": \"\",\n        \"Collapse sidebar\": \"\",\n        \"Complete Table of Contents\": \"\\u09aa\\u09c2\\u09b0\\u09cd\\u09a3\\u09be\\u0999\\u09cd\\u0997 \\u09b8\\u09c2\\u099a\\u09c0\\u09aa\\u09a4\\u09cd\\u09b0\",\n        \"Contents\": \"\",\n        \"Copyright\": \"\\u0995\\u09aa\\u09bf\\u09b0\\u09be\\u0987\\u099f\",\n        \"Created using <a href=\\\"https://www.sphinx-doc.org/\\\">Sphinx</a> %(sphinx_version)s.\": \"\",\n        \"Expand sidebar\": \"\",\n        \"Full index on one page\": \"\\u098f\\u0995 \\u09aa\\u09be\\u09a4\\u09be\\u09df \\u09b8\\u09ae\\u09cd\\u09aa\\u09c2\\u09b0\\u09cd\\u09a3 \\u0987\\u09a8\\u09a1\\u09c7\\u0995\\u09cd\\u09b8\",\n        \"General Index\": \"\\u09b8\\u09be\\u09a7\\u09be\\u09b0\\u09a3 \\u0987\\u09a8\\u09a1\\u09c7\\u0995\\u09cd\\u09b8\",\n        \"Global Module Index\": \"\\u0997\\u09cd\\u09b2\\u09c7\\u09be\\u09ac\\u09be\\u09b2 \\u09ae\\u09a1\\u09bf\\u0989\\u09b2 \\u0987\\u09a8\\u09a1\\u09c7\\u0995\\u09cd\\u09b8\",\n        \"Go\": \"\\u09af\\u09be\\u09a8\",\n        \"Hide Search Matches\": \"\\u0985\\u09a8\\u09c1\\u09b8\\u09a8\\u09cd\\u09a7\\u09be\\u09a8\\u09c7\\u09b0 \\u09ae\\u09cd\\u09af\\u09be\\u099a\\u0997\\u09c1\\u09b2\\u09c7\\u09be \\u09b2\\u09c1\\u0995\\u09be\\u09a8\",\n        \"Index\": \"\\u0987\\u09a8\\u09a1\\u09c7\\u0995\\u09cd\\u09b8\",\n        \"Index &ndash; %(key)s\": \"\\u0987\\u09a8\\u09a1\\u09c7\\u0995\\u09cd\\u09b8 &ndash; %(key)s\",\n        \"Index pages by letter\": \"\\u09ac\\u09b0\\u09cd\\u09a3\\u09be\\u09a8\\u09c1\\u09b8\\u09be\\u09b0\\u09c7 \\u0987\\u09a8\\u09a1\\u09c7\\u0995\\u09cd\\u09b8 \\u09aa\\u09be\\u09a4\\u09be\",\n        \"Indices and tables:\": \"\\u0987\\u09a8\\u09a1\\u09c7\\u0995\\u09cd\\u09b8 \\u0993 \\u099f\\u09c7\\u09ac\\u09bf\\u09b2 \\u09b8\\u09ae\\u09c2\\u09b9:\",\n        \"Last updated on %(last_updated)s.\": \"%(last_updated)s \\u09b8\\u09b0\\u09cd\\u09ac\\u09b6\\u09c7\\u09b7 \\u09aa\\u09b0\\u09bf\\u09ac\\u09b0\\u09cd\\u09a4\\u09a8 \\u0995\\u09b0\\u09be \\u09b9\\u09df\\u09c7\\u099b\\u09c7\\u0964\",\n        \"Library changes\": \"\\u09b2\\u09be\\u0987\\u09ac\\u09cd\\u09b0\\u09c7\\u09b0\\u09bf\\u09b0 \\u09aa\\u09b0\\u09bf\\u09ac\\u09b0\\u09cd\\u09a4\\u09a8\",\n        \"Navigation\": \"\\u09a8\\u09c7\\u09ad\\u09bf\\u0997\\u09c7\\u09b6\\u09a8\",\n        \"Next topic\": \"\\u09aa\\u09b0\\u09ac\\u09b0\\u09cd\\u09a4\\u09c0 \\u099f\\u09aa\\u09bf\\u0995\",\n        \"Other changes\": \"\\u0985\\u09a8\\u09cd\\u09af\\u09be\\u09a8\\u09cd\\u09af \\u09aa\\u09b0\\u09bf\\u09ac\\u09b0\\u09cd\\u09a4\\u09a8\"",
                "filename": "sphinx/locale/bn/LC_MESSAGES/sphinx.js",
                "start_index": 68,
                "end_index": 3072,
                "start_line": 1,
                "end_line": 31,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.5",
                "sha": ""
            },
            {
                "code": "\"\"\"Support for NumPy and Google style docstrings.\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Any\n\nimport sphinx\nfrom sphinx.application import Sphinx\nfrom sphinx.ext.napoleon.docstring import GoogleDocstring, NumpyDocstring\nfrom sphinx.util import inspect",
                "filename": "sphinx/ext/napoleon/__init__.py",
                "start_index": 0,
                "end_index": 271,
                "start_line": 1,
                "end_line": 10,
                "max_line": 474,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.5",
                "sha": ""
            },
            {
                "code": "name: Bug report\ndescription: Something is not working correctly.\nlabels: \"bug\"\n\nbody:\n  - type: textarea\n    attributes:\n      label: Describe the bug\n      description: >-\n        A clear and concise description of what the bug is, including the \n        expected behaviour and what has gone wrong.\n        \n        Please include screenshots, if applicable.\n    validations:\n      required: true\n\n  - type: textarea\n    attributes:\n      label: How to Reproduce\n      description: >-\n        Please provide steps to reproduce this bug, with the smallest possible\n        set of source files. For normal bugs this should ideally be one \n        ``index.rst`` file, and for ``sphinx.ext.autodoc`` bugs, this should\n        ideally be a single ``index.rst`` file, and a single example Python \n        module.\n      placeholder: |\n        Minimal method (you can also paste the contents of ``index.rst`` and\n        ``conf.py`` into this report):\n        ```bash\n        $ echo \"Content demonstrating the bug...\" > index.rst\n        $ echo \"\" > conf.py\n        $ sphinx-build -M html . _build\n        $ # open _build/html/index and see bla bla\n        ```\n        \n        ``git clone`` method (this is advised against, to help the Sphinx team):\n        ```bash\n        $ git clone https://github.com/.../some_project\n        $ cd some_project\n        $ pip install -r requirements.txt\n        $ cd docs\n        $ make html SPHINXOPTS=\"-D language=de\"\n        $ # open _build/html/index and see bla bla\n        ```\n    validations:\n      required: true\n\n  - type: markdown\n    attributes:\n      value: |\n        ## Environment info\n\n  - type: textarea\n    attributes:\n      label: Environment Information\n      render: text\n      description: >-\n        Install the latest Sphinx \n        ``pip install -U \"sphinx>=5.3\"``\n        then run ``sphinx-build --bug-report`` or ``python -m sphinx --bug-report``.\n        and paste the output here.\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: Sphinx extensions\n      render: python\n      description: >-\n        Attempt to reproduce your error with the smallest set of extensions possible.\n        This makes it easier to determine where the problem you are encountering is.\n        \n        e.g. ``[\"sphinx.ext.autodoc\", \"recommonmark\"]``\n    validations:\n      required: false\n  - type: textarea\n    attributes:\n      label: Additional context\n      description: >-\n        Add any other context about the problem here, for example:\n        \n        * Any other tools used (Browser, TeX, etc) with versions\n        * Reference to another issue or pull request\n        * URL to some external resource",
                "filename": ".github/ISSUE_TEMPLATE/bug-report.yml",
                "start_index": 0,
                "end_index": 2685,
                "start_line": 1,
                "end_line": 83,
                "max_line": 83,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.5",
                "sha": ""
            },
            {
                "code": "{\n        \"%(filename)s &#8212; %(docstitle)s\": \"\",\n        \"&#169; <a href=\\\"%(path)s\\\">Copyright</a> %(copyright)s.\": \"\",\n        \"&#169; Copyright %(copyright)s.\": \"\",\n        \", in \": \"\",\n        \"About these documents\": \"\\u092f\\u0940 \\u0921\\u0915\\u0941\\u092e\\u0947\\u0928\\u094d\\u091f\\u0939\\u0930\\u0941\\u0915\\u094b \\u092c\\u093e\\u0930\\u0947\\u092e\\u093e\",\n        \"Automatically generated list of changes in version %(version)s\": \"\\u092d\\u0930\\u094d\\u0938\\u0928 %(version)s \\u092e\\u093e \\u092d\\u090f\\u0915\\u093e \\u092b\\u0930\\u0915 \\u0939\\u0930\\u0941 \\u0906\\u092b\\u0948 \\u091c\\u0947\\u0928\\u0947\\u0930\\u0947\\u091f \\u092d\\u090f  \",\n        \"C API changes\": \"C API \\u0915\\u093e  \\u092a\\u0930\\u093f\\u0935\\u0930\\u094d\\u0924\\u0928\\u0939\\u0930\\u0941 \",\n        \"Changes in Version %(version)s &#8212; %(docstitle)s\": \"\",\n        \"Collapse sidebar\": \"\\u0938\\u093e\\u0907\\u0921\\u092c\\u0930 \\u0938\\u093e\\u0928\\u094b \\u092c\\u0928\\u093e\\u0909\\u0928\\u0941\\u0939\\u094b\\u0938\\u094d\",\n        \"Complete Table of Contents\": \"\\u092a\\u0941\\u0930\\u093e \\u0935\\u093f\\u0937\\u092f\\u0938\\u0942\\u091a\\u0940\",\n        \"Contents\": \"\\u0935\\u093f\\u0937\\u092f\\u0938\\u0942\\u091a\\u0940\",\n        \"Copyright\": \"\\u0915\\u092a\\u093f\\u0930\\u093e\\u0907\\u091f \",\n        \"Created using <a href=\\\"https://www.sphinx-doc.org/\\\">Sphinx</a> %(sphinx_version)s.\": \"\",\n        \"Expand sidebar\": \"\\u0938\\u093e\\u0907\\u0921\\u092c\\u0930 \\u0920\\u0941\\u0932\\u094b \\u092c\\u0928\\u093e\\u0909\\u0928\\u0941\\u0939\\u094b\\u0938\\u094d\",\n        \"Full index on one page\": \"\\u092a\\u0941\\u0930\\u093e \\u0905\\u0928\\u0941\\u0938\\u0941\\u091a\\u0940 \\u090f\\u0915\\u0948 \\u092a\\u093e\\u0928\\u093e\\u092e\\u093e\",\n        \"General Index\": \"\\u0938\\u093e\\u092e\\u093e\\u0928\\u094d\\u092f  \\u0905\\u0928\\u0941\\u0938\\u0941\\u091a\\u0940\",\n        \"Global Module Index\": \"\\u0917\\u094d\\u0932\\u094b\\u092c\\u0932 \\u092e\\u0921\\u0941\\u0932 \\u0905\\u0928\\u0941\\u0938\\u0941\\u091a\\u0940\",\n        \"Go\": \"\\u091c\\u093e\\u0928\\u0941\\u0939\\u094b\\u0938\\u094d\",\n        \"Hide Search Matches\": \"\\u0916\\u094b\\u091c\\u0947\\u0915\\u094b \\u0928\\u0924\\u093f\\u091c\\u093e\\u0939\\u0930\\u0941 \\u0932\\u0941\\u0915\\u093e\\u0909\\u0928\\u0941\\u0939\\u094b\\u0938\\u094d\",\n        \"Index\": \"\\u0905\\u0928\\u0941\\u0938\\u0941\\u091a\\u0940\",\n        \"Index &ndash; %(key)s\": \"Index &ndash; %(key)s\",\n        \"Index pages by letter\": \"\\u0905\\u0915\\u094d\\u0937\\u0930 \\u0905\\u0928\\u0941\\u0938\\u093e\\u0930 \\u0905\\u0928\\u0941\\u0938\\u0941\\u091a\\u0940\\u0915\\u093e \\u092a\\u093e\\u0928\\u093e\",\n        \"Indices and tables:\": \"\\u0907\\u0928\\u094d\\u0921\\u0940\\u0938\\u0940\\u0938\\u094d\\u0938 \\u0930 \\u0924\\u0932\\u093f\\u0915\\u093e\",\n        \"Last updated on %(last_updated)s.\": \"\\u092f\\u094b \\u092d\\u0928\\u094d\\u0926\\u093e \\u0905\\u0917\\u093e\\u0921\\u0940 %(last_updated)s \\u092e\\u093e \\u0905\\u092a\\u0921\\u0947\\u091f \\u092d\\u090f\\u0915\\u094b\",\n        \"Library changes\": \"\\u0932\\u093e\\u0908\\u092c\\u094d\\u0930\\u0947\\u0930\\u0940\\u0915\\u093e  \\u092a\\u0930\\u093f\\u0935\\u0930\\u094d\\u0924\\u0928\\u0939\\u0930\\u0941\",",
                "filename": "sphinx/locale/ne/LC_MESSAGES/sphinx.js",
                "start_index": 68,
                "end_index": 3022,
                "start_line": 1,
                "end_line": 28,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.5",
                "sha": ""
            },
            {
                "code": "\"\"\"Sphinx theme specific highlighting styles.\"\"\"\n\nfrom pygments.style import Style\nfrom pygments.styles.friendly import FriendlyStyle\nfrom pygments.token import (\n    Comment,\n    Error,\n    Generic,\n    Keyword,\n    Name,\n    Number,\n    Operator,\n    String,\n    Whitespace,\n)\n\n\nclass NoneStyle(Style):\n    \"\"\"Style without any styling.\"\"\"\n\n\nclass SphinxStyle(Style):\n    \"\"\"\n    Like friendly, but a bit darker to enhance contrast on the green\n    background.\n    \"\"\"\n\n    background_color = '#eeffcc'\n    default_style = ''\n\n    styles = FriendlyStyle.styles\n    styles.update({\n        Generic.Output: '#333',\n        Comment: 'italic #408090',\n        Number: '#208050',\n    })\n\n\nclass PyramidStyle(Style):\n    \"\"\"\n    Pylons/pyramid pygments style based on friendly style, by Blaise Laflamme.\n    \"\"\"\n\n    # work in progress...\n\n    background_color = \"#f8f8f8\"\n    default_style = \"\"\n\n    styles = {\n        Whitespace:                \"#bbbbbb\",\n        Comment:                   \"italic #60a0b0\",\n        Comment.Preproc:           \"noitalic #007020\",\n        Comment.Special:           \"noitalic bg:#fff0f0\",\n\n        Keyword:                   \"bold #007020\",\n        Keyword.Pseudo:            \"nobold\",\n        Keyword.Type:              \"nobold #902000\",\n\n        Operator:                  \"#666666\",\n        Operator.Word:             \"bold #007020\",\n\n        Name.Builtin:              \"#007020\",\n        Name.Function:             \"#06287e\",\n        Name.Class:                \"bold #0e84b5\",\n        Name.Namespace:            \"bold #0e84b5\",\n        Name.Exception:            \"#007020\",\n        Name.Variable:             \"#bb60d5\",\n        Name.Constant:             \"#60add5\",\n        Name.Label:                \"bold #002070\",\n        Name.Entity:               \"bold #d55537\",\n        Name.Attribute:            \"#0e84b5\",\n        Name.Tag:                  \"bold #062873\",\n        Name.Decorator:            \"bold #555555\",\n\n        String:                    \"#4070a0\",\n        String.Doc:                \"italic\",\n        String.Interpol:           \"italic #70a0d0\",\n        String.Escape:             \"bold #4070a0\",\n        String.Regex:              \"#235388\",\n        String.Symbol:             \"#517918\",\n        String.Other:              \"#c65d09\",\n        Number:                    \"#40a070\",\n\n        Generic.Heading:           \"bold #000080\",\n        Generic.Subheading:        \"bold #800080\",\n        Generic.Deleted:           \"#A00000\",\n        Generic.Inserted:          \"#00A000\",\n        Generic.Error:             \"#FF0000\",\n        Generic.Emph:              \"italic\",\n        Generic.Strong:            \"bold\",\n        Generic.Prompt:            \"bold #c65d09\",\n        Generic.Output:            \"#888\",\n        Generic.Traceback:         \"#04D\",\n\n        Error:                     \"#a40000 bg:#fbe3e4\",\n    }",
                "filename": "sphinx/pygments_styles.py",
                "start_index": 0,
                "end_index": 2860,
                "start_line": 1,
                "end_line": 96,
                "max_line": 96,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.5",
                "sha": ""
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "sphinx/ext/napoleon/__init__.py": [
                {
                    "chunk": {
                        "code": "\\\"\\\"\n                This will be included in the docs because it has a docstring\n                \\\"\\\"\\\"\n                return unicode(self).encode('utf-8')\n\n            def __unicode__(self):\n                # This will NOT be included in the docs\n                return unicode(self.__class__.__name__)\n\n    napoleon_use_admonition_for_examples : :obj:`bool` (Defaults to False)\n        True to use the ``.. admonition::`` directive for the **Example** and\n        **Examples** sections. False to use the ``.. rubric::`` directive\n        instead. One may look better than the other depending on what HTML\n        theme is used.\n\n        This `NumPy style`_ snippet will be converted as follows::\n\n            Example\n            -------\n            This is just a quick example\n\n        **If True**::\n\n            .. admonition:: Example\n\n               This is just a quick example\n\n        **If False**::\n\n            .. rubric:: Example\n\n            This is just a quick example\n\n    napoleon_use_admonition_for_notes : :obj:`bool` (Defaults to False)\n        True to use the ``.. admonition::`` directive for **Notes** sections.\n        False to use the ``.. rubric::`` directive instead.\n\n        Note\n        ----\n        The singular **Note** section will always be converted to a\n        ``.. note::`` directive.\n\n        See Also\n        --------\n        :confval:`napoleon_use_admonition_for_examples`\n\n    napoleon_use_admonition_for_references : :obj:`bool` (Defaults to False)\n        True to use the ``.. admonition::`` directive for **References**\n        sections. False to use the ``.. rubric::`` directive instead.\n\n        See Also\n        --------\n        :confval:`napoleon_use_admonition_for_examples`\n\n    napoleon_use_ivar : :obj:`bool` (Defaults to False)\n        True to use the ``:ivar:`` role for instance variables. False to use\n        the ``.. attribute::`` directive instead.\n\n        This `NumPy style`_ snippet will be converted as follows::\n\n            Attributes\n            ----------\n            attr1 : int\n                Description of `attr1`\n\n        **If True**::\n\n            :ivar attr1: Description of `attr1`\n            :vartype attr1: int\n\n        **If False**::\n\n            .. attribute:: attr1\n\n               Description of `attr1`\n\n               :type: int\n\n    napoleon_use_param : :obj:`bool` (Defaults to True)\n        True to use a ``:param:`` role for each function parameter. False to\n        use a single ``:parameters:`` role for all the parameters.\n\n        This `NumPy style`_ snippet will be converted as follows::\n\n            Parameters\n            ----------\n            arg1 : str\n                Description of `arg1`\n            arg2 : int, optional\n                Description of `arg2`, defaults to 0\n\n        **If True**::\n\n            :param arg1: Description of `arg1`\n            :type arg1: str\n            :param arg2: Description of `arg2`, defaults to 0\n            :type arg2: int, optional\n\n        **If False**::\n\n            :parameters: * **arg1** (*str*) --\n                           Description of `arg1`\n                         * **arg2** (*int, optional*) --\n                           Description of `arg2`, defaults to 0\n\n    napoleon_use_keyword : :obj:`bool` (Defaults to True)\n        True to use a ``:keyword:`` role for each function keyword argument.\n        False to use a single ``:keyword arguments:`` role for all the\n        keywords.\n\n        This behaves similarly to :confval:`napoleon_use_param`. Note unlike\n        docutils, ``:keyword:`` and ``:param:`` will not be treated the same\n        way - there will be a separate \"Keyword Arguments\" section, rendered\n        in the same fashion as \"Parameters\" section (type links created if\n        possible)\n\n        See Also\n        --------\n        :confval:`napoleon_use_param`\n\n    napoleon_use_rtype : :obj:`bool` (Defaults to True)\n        True to use the ``:rtype:`` role for the return type. False to output\n        the return type inline with the description.\n\n        This `NumPy style`_ snippet will be converted as follows::\n\n            Returns\n            -------\n            bool\n                True if successful, False otherwise\n\n        **If True**::\n\n            :returns: True if successful, False otherwise\n            :rtype: bool\n\n        **If False**::\n\n            :returns: *bool* -- True if successful, False otherwise\n\n    napoleon_preprocess_types : :obj:`bool` (Defaults to False)\n        Enable the type preprocessor.\n\n    napoleon_type_aliases : :obj:`dict` (Defaults to None)\n        Add a mapping of strings to string, translating types in numpy\n        style docstrings. Only works if ``napoleon_preprocess_types = True``.\n\n    napoleon_custom_sections : :obj:`list` (Defaults to None)\n        Add a list of custom sections to include, expanding the list of parsed sections.\n\n        The entries can either be strings or tuples, depending on the intention:\n          * To create a custom \"generic\" section, just pass a string.\n          * To create an alias for an existing section, pass a tuple containing the\n            alias name and the original, in that order.\n          * To create a custom section that displays like the parameters or returns\n            section, pass a tuple containing the custom section name and a string\n            value, \"params_style\" or \"returns_style\".\n\n        If an entry is just a string, it is interpreted as a header for a generic\n        section. If the entry is a tuple/list/indexed container, the first entry\n        is the name of the section, the second is the section key to emulate. If the\n        second entry value is \"params_style\" or \"returns_style\", the custom section\n        will be displayed like the parameters section or returns section.\n\n    napoleon_attr_annotations : :obj:`bool` (Defaults to True)\n        Use the type annotations of class attributes that are documented in the docstring\n        but do not have a type in the docstring.\n\n    \"\"\"",
                        "filename": "sphinx/ext/napoleon/__init__.py",
                        "start_index": 3388,
                        "end_index": 9393,
                        "start_line": 65,
                        "end_line": 434,
                        "max_line": 474,
                        "git_instance": "github",
                        "repo_name": "testbed/sphinx-doc__sphinx__3.5",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the definition of the 'napoleon_custom_sections' configuration option, which is directly related to the issue of customizing the style of custom docstring sections."
                }
            ]
        },
        "solution_task": "To implement the feature request for more custom docstring section styles in the Napoleon Sphinx extension, you can follow these steps:\n\n- Modify the `napoleon_custom_sections` configuration to accept a new style option that indicates the desired rendering style, such as \"display_like_parameters\".\n- Update the `NumpyDocstring` and `GoogleDocstring` classes to handle the new style option when parsing docstrings.\n- Ensure that the custom section is rendered in the same style as the specified section (e.g., \"Parameters\") while keeping the custom name.\n\nHere's a high-level overview of the changes that need to be made:\n\n- Update the `napoleon_custom_sections` configuration to accept a tuple with the custom section name and the desired style, e.g., `(\"Side Effects\", \"display_like_parameters\")`.\n- In the `NumpyDocstring` and `GoogleDocstring` classes, add logic to check for the new style option in the custom sections.\n- Modify the parsing functions to render the custom sections with the same style as the specified section (e.g., \"Parameters\").\n- Ensure that the custom section name is preserved in the output.\n\nHere's a pseudo-code example of what the changes might look like:\n\n```python\n# In sphinx/ext/napoleon/docstring.py\n\nclass NumpyDocstring:\n    def _parse_custom_sections(self, section, use_param_style):\n        # Existing code to parse custom sections\n        # ...\n\n        # New code to handle custom style option\n        if use_param_style:\n            # Render the custom section like the \"Parameters\" section\n            self._parse_parameters_section(section)\n        else:\n            # Render the custom section with the generic style\n            self._parse_generic_section(section)\n\n# In sphinx/ext/napoleon/__init__.py\n\n# Update the napoleon_custom_sections configuration documentation\nnapoleon_custom_sections = [\n    # Existing description\n    # ...\n\n    # New style option description\n    (\"Side Effects\", \"display_like_parameters\"),  # Renders like \"Parameters\" section\n]\n\n# In the Sphinx conf.py file\n\n# Update the configuration to use the new style option\nnapoleon_custom_sections = [\n    (\"Side Effects\", \"display_like_parameters\"),\n    # Other custom sections\n]\n```\n\nRemember to update the documentation and add tests for the new feature to ensure it works as expected and does not introduce regressions.\n\nThis is a high-level overview, and the actual implementation may require more in-depth changes to the Napoleon extension's codebase. If you are not familiar with the internals of the Napoleon extension, you may need to spend some time understanding how it parses and renders docstrings before attempting to implement this feature.",
        "bouncer_response": {
            "score": 8,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant suggestions that can directly lead to the successful implementation or improvement of the requested feature.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable plan for implementing the feature request to allow more customization of docstring section styles in the Napoleon Sphinx extension. It suggests modifying the 'napoleon_custom_sections' configuration to accept a new style option and updating the 'NumpyDocstring' and 'GoogleDocstring' classes to handle this new option. The RESPONSE also includes a high-level overview of the changes, a pseudo-code example, and a reminder to update documentation and add tests. This guidance is directly relevant to the feature request and provides clear steps for implementation. The RESPONSE also references specific code snippets to check, which is helpful for someone looking to contribute to the project.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711703209.3051798,
        "result": "To implement the feature request for more custom docstring section styles in the Napoleon Sphinx extension, you can follow these steps:\n\n- Modify the `napoleon_custom_sections` configuration to accept a new style option that indicates the desired rendering style, such as \"display_like_parameters\".\n- Update the `NumpyDocstring` and `GoogleDocstring` classes to handle the new style option when parsing docstrings.\n- Ensure that the custom section is rendered in the same style as the specified section (e.g., \"Parameters\") while keeping the custom name.\n\nHere's a high-level overview of the changes that need to be made:\n\n- Update the `napoleon_custom_sections` configuration to accept a tuple with the custom section name and the desired style, e.g., `(\"Side Effects\", \"display_like_parameters\")`.\n- In the `NumpyDocstring` and `GoogleDocstring` classes, add logic to check for the new style option in the custom sections.\n- Modify the parsing functions to render the custom sections with the same style as the specified section (e.g., \"Parameters\").\n- Ensure that the custom section name is preserved in the output.\n\nHere's a pseudo-code example of what the changes might look like:\n\n```python\n# In sphinx/ext/napoleon/docstring.py\n\nclass NumpyDocstring:\n    def _parse_custom_sections(self, section, use_param_style):\n        # Existing code to parse custom sections\n        # ...\n\n        # New code to handle custom style option\n        if use_param_style:\n            # Render the custom section like the \"Parameters\" section\n            self._parse_parameters_section(section)\n        else:\n            # Render the custom section with the generic style\n            self._parse_generic_section(section)\n\n# In sphinx/ext/napoleon/__init__.py\n\n# Update the napoleon_custom_sections configuration documentation\nnapoleon_custom_sections = [\n    # Existing description\n    # ...\n\n    # New style option description\n    (\"Side Effects\", \"display_like_parameters\"),  # Renders like \"Parameters\" section\n]\n\n# In the Sphinx conf.py file\n\n# Update the configuration to use the new style option\nnapoleon_custom_sections = [\n    (\"Side Effects\", \"display_like_parameters\"),\n    # Other custom sections\n]\n```\n\nRemember to update the documentation and add tests for the new feature to ensure it works as expected and does not introduce regressions.\n\nThis is a high-level overview, and the actual implementation may require more in-depth changes to the Napoleon extension's codebase. If you are not familiar with the internals of the Napoleon extension, you may need to spend some time understanding how it parses and renders docstrings before attempting to implement this feature.\n\n### Code snippets to check\n\n-  \u2192 [sphinx](https://github.com/testbed/sphinx-doc__sphinx__3.5/tree//sphinx) \u2192 [ext](https://github.com/testbed/sphinx-doc__sphinx__3.5/tree//sphinx/ext) \u2192 [napoleon](https://github.com/testbed/sphinx-doc__sphinx__3.5/tree//sphinx/ext/napoleon)- [Lines 65 - 434](https://github.com/testbed/sphinx-doc__sphinx__3.5/blob//sphinx/ext/napoleon/__init__.py#L65-L434)\n\n This snippet contains the definition of the 'napoleon_custom_sections' configuration option, which is directly related to the issue of customizing the style of custom docstring sections."
    }
}