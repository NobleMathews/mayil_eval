{
    "id": "django__django-15526",
    "repo_name": "testbed/django__django__4.1",
    "task_id": 281814633619858878,
    "title": "view_on_site redirect does not work for custom admin site.",
    "body": "Description\n\t\nAll reverse calls in contrib/admin/options.py have a current_app keyword argument, so they resolve with the current (possibly custom) admin site \u2013 except the reverse call in get_view_on_site_url. This lead to custom admin sites using the default admin to redirect via `view_on_site.\nThis is clearly a bug. When the default admin is handled with extra protections outside of Django (e.g. additional basic auth), users of the custom admin cannot use the \"view on site\" link because it routes through the default admin.\nPatch is easy and already here: \u200bhttps://github.com/django/django/pull/15526\nI'll try to provide a regression test as well.\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/django__django__4.1.git",
    "requested_commit": "",
    "mayil_response": "- Locate the `get_view_on_site_url` method in `django/contrib/admin/options.py`.\n- Modify the `reverse` call within the `get_view_on_site_url` method to include the `current_app` argument, setting its value to `self.admin_site.name`.\n\n```python\n# options.py (within Django admin contrib package)\n\nclass ModelAdmin:\n    # ...\n    def get_view_on_site_url(self, obj=None):\n        # ...\n        # Fixed reverse call with current_app\n        return reverse('...', args=..., current_app=self.admin_site.name)\n```\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__4.1/tree//django) \u2192 [contrib](https://github.com/testbed/django__django__4.1/tree//django/contrib) \u2192 [admin](https://github.com/testbed/django__django__4.1/tree//django/contrib/admin)- [Lines 1 - 26](https://github.com/testbed/django__django__4.1/blob//django/contrib/admin/sites.py#L1-L26)\n\n The issue is related to reverse calls in contrib/admin/options.py, which is likely to be part of the admin site functionality. This file contains the base definitions for admin sites, which may be relevant for understanding how reverse calls are handled.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.000368,
        "snippet_processor": 0.05754,
        "issue_star_creation": 0.017099999999999997,
        "issue_star_solver": 0.05033,
        "bouncer": 0.02452
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711718625.0992918,
        "relevant_snippets": [
            {
                "code": "from django.contrib import admin\nfrom django.contrib.redirects.models import Redirect\n\n\n@admin.register(Redirect)\nclass RedirectAdmin(admin.ModelAdmin):\n    list_display = (\"old_path\", \"new_path\")\n    list_filter = (\"site\",)\n    search_fields = (\"old_path\", \"new_path\")\n    radio_fields = {\"site\": admin.VERTICAL}",
                "filename": "django/contrib/redirects/admin.py",
                "start_index": 0,
                "end_index": 313,
                "start_line": 1,
                "end_line": 10,
                "max_line": 10,
                "git_instance": "github",
                "repo_name": "testbed/django__django__4.1",
                "sha": ""
            },
            {
                "code": "from django.contrib.sites.models import Site\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass Redirect(models.Model):\n    site = models.ForeignKey(Site, models.CASCADE, verbose_name=_(\"site\"))\n    old_path = models.CharField(\n        _(\"redirect from\"),\n        max_length=200,\n        db_index=True,\n        help_text=_(\n            \"This should be an absolute path, excluding the domain name. Example: \"\n            \"\u201c/events/search/\u201d.\"\n        ),\n    )\n    new_path = models.CharField(\n        _(\"redirect to\"),\n        max_length=200,\n        blank=True,\n        help_text=_(\n            \"This can be either an absolute path (as above) or a full URL \"\n            \"starting with a scheme such as \u201chttps://\u201d.\"\n        ),\n    )\n\n    class Meta:\n        verbose_name = _(\"redirect\")\n        verbose_name_plural = _(\"redirects\")\n        db_table = \"django_redirect\"\n        unique_together = [[\"site\", \"old_path\"]]\n        ordering = [\"old_path\"]\n\n    def __str__(self):\n        return \"%s ---> %s\" % (self.old_path, self.new_path)",
                "filename": "django/contrib/redirects/models.py",
                "start_index": 0,
                "end_index": 1074,
                "start_line": 1,
                "end_line": 35,
                "max_line": 35,
                "git_instance": "github",
                "repo_name": "testbed/django__django__4.1",
                "sha": ""
            },
            {
                "code": "from functools import update_wrapper\nfrom weakref import WeakSet\n\nfrom django.apps import apps\nfrom django.conf import settings\nfrom django.contrib.admin import ModelAdmin, actions\nfrom django.contrib.admin.exceptions import AlreadyRegistered, NotRegistered\nfrom django.contrib.admin.views.autocomplete import AutocompleteJsonView\nfrom django.contrib.auth import REDIRECT_FIELD_NAME\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.db.models.base import ModelBase\nfrom django.http import Http404, HttpResponsePermanentRedirect, HttpResponseRedirect\nfrom django.template.response import TemplateResponse\nfrom django.urls import NoReverseMatch, Resolver404, resolve, reverse\nfrom django.utils.decorators import method_decorator\nfrom django.utils.functional import LazyObject\nfrom django.utils.module_loading import import_string\nfrom django.utils.text import capfirst\nfrom django.utils.translation import gettext as _\nfrom django.utils.translation import gettext_lazy\nfrom django.views.decorators.cache import never_cache\nfrom django.views.decorators.common import no_append_slash\nfrom django.views.decorators.csrf import csrf_protect\nfrom django.views.i18n import JavaScriptCatalog\n\nall_sites = WeakSet()",
                "filename": "django/contrib/admin/sites.py",
                "start_index": 0,
                "end_index": 1222,
                "start_line": 1,
                "end_line": 26,
                "max_line": 612,
                "git_instance": "github",
                "repo_name": "testbed/django__django__4.1",
                "sha": ""
            },
            {
                "code": "class AdminSite:",
                "filename": "django/contrib/admin/sites.py",
                "start_index": 1225,
                "end_index": 1241,
                "start_line": 29,
                "end_line": 29,
                "max_line": 612,
                "git_instance": "github",
                "repo_name": "testbed/django__django__4.1",
                "sha": ""
            },
            {
                "code": "# The views used below are normally mapped in the AdminSite instance.\n# This URLs file is used to provide a reliable view deployment for test purposes.\n# It is also provided as a convenience to those who want to deploy these URLs\n# elsewhere.\n\nfrom django.contrib.auth import views\nfrom django.urls import path\n\nurlpatterns = [\n    path(\"login/\", views.LoginView.as_view(), name=\"login\"),\n    path(\"logout/\", views.LogoutView.as_view(), name=\"logout\"),\n    path(\n        \"password_change/\", views.PasswordChangeView.as_view(), name=\"password_change\"\n    ),\n    path(\n        \"password_change/done/\",\n        views.PasswordChangeDoneView.as_view(),\n        name=\"password_change_done\",\n    ),\n    path(\"password_reset/\", views.PasswordResetView.as_view(), name=\"password_reset\"),\n    path(\n        \"password_reset/done/\",\n        views.PasswordResetDoneView.as_view(),\n        name=\"password_reset_done\",\n    ),\n    path(\n        \"reset/<uidb64>/<token>/\",\n        views.PasswordResetConfirmView.as_view(),\n        name=\"password_reset_confirm\",\n    ),\n    path(\n        \"reset/done/\",\n        views.PasswordResetCompleteView.as_view(),\n        name=\"password_reset_complete\",\n    ),\n]",
                "filename": "django/contrib/auth/urls.py",
                "start_index": 0,
                "end_index": 1184,
                "start_line": 1,
                "end_line": 36,
                "max_line": 36,
                "git_instance": "github",
                "repo_name": "testbed/django__django__4.1",
                "sha": ""
            },
            {
                "code": "from django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"sites\", \"0001_initial\"),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name=\"Redirect\",\n            fields=[\n                (\n                    \"id\",\n                    models.AutoField(\n                        verbose_name=\"ID\",\n                        serialize=False,\n                        auto_created=True,\n                        primary_key=True,\n                    ),\n                ),\n                (\n                    \"site\",\n                    models.ForeignKey(\n                        to=\"sites.Site\",\n                        on_delete=models.CASCADE,\n                        verbose_name=\"site\",\n                    ),\n                ),\n                (\n                    \"old_path\",\n                    models.CharField(\n                        help_text=(\n                            \"This should be an absolute path, excluding the domain \"\n                            \"name. Example: \u201c/events/search/\u201d.\"\n                        ),\n                        max_length=200,\n                        verbose_name=\"redirect from\",\n                        db_index=True,\n                    ),\n                ),\n                (\n                    \"new_path\",\n                    models.CharField(\n                        help_text=(\n                            \"This can be either an absolute path (as above) or a full \"\n                            \"URL starting with \u201chttp://\u201d.\"\n                        ),\n                        max_length=200,\n                        verbose_name=\"redirect to\",\n                        blank=True,\n                    ),\n                ),\n            ],\n            options={\n                \"ordering\": [\"old_path\"],\n                \"unique_together\": {(\"site\", \"old_path\")},\n                \"db_table\": \"django_redirect\",\n                \"verbose_name\": \"redirect\",\n                \"verbose_name_plural\": \"redirects\",\n            },\n            bases=(models.Model,),\n        ),\n    ]",
                "filename": "django/contrib/redirects/migrations/0001_initial.py",
                "start_index": 0,
                "end_index": 2092,
                "start_line": 1,
                "end_line": 64,
                "max_line": 64,
                "git_instance": "github",
                "repo_name": "testbed/django__django__4.1",
                "sha": ""
            },
            {
                "code": "from urllib.parse import parse_qsl, unquote, urlparse, urlunparse\n\nfrom django import template\nfrom django.contrib.admin.utils import quote\nfrom django.urls import Resolver404, get_script_prefix, resolve\nfrom django.utils.http import urlencode\n\nregister = template.Library()\n\n\n@register.filter\ndef admin_urlname(value, arg):\n    return \"admin:%s_%s_%s\" % (value.app_label, value.model_name, arg)\n\n\n@register.filter\ndef admin_urlquote(value):\n    return quote(value)\n\n\n@register.simple_tag(takes_context=True)\ndef add_preserved_filters(context, url, popup=False, to_field=None):\n    opts = context.get(\"opts\")\n    preserved_filters = context.get(\"preserved_filters\")\n\n    parsed_url = list(urlparse(url))\n    parsed_qs = dict(parse_qsl(parsed_url[4]))\n    merged_qs = {}\n\n    if opts and preserved_filters:\n        preserved_filters = dict(parse_qsl(preserved_filters))\n\n        match_url = \"/%s\" % unquote(url).partition(get_script_prefix())[2]\n        try:\n            match = resolve(match_url)\n        except Resolver404:\n            pass\n        else:\n            current_url = \"%s:%s\" % (match.app_name, match.url_name)\n            changelist_url = \"admin:%s_%s_changelist\" % (\n                opts.app_label,\n                opts.model_name,\n            )\n            if (\n                changelist_url == current_url\n                and \"_changelist_filters\" in preserved_filters\n            ):\n                preserved_filters = dict(\n                    parse_qsl(preserved_filters[\"_changelist_filters\"])\n                )\n\n        merged_qs.update(preserved_filters)\n\n    if popup:\n        from django.contrib.admin.options import IS_POPUP_VAR\n\n        merged_qs[IS_POPUP_VAR] = 1\n    if to_field:\n        from django.contrib.admin.options import TO_FIELD_VAR\n\n        merged_qs[TO_FIELD_VAR] = to_field\n\n    merged_qs.update(parsed_qs)\n\n    parsed_url[4] = urlencode(merged_qs)\n    return urlunparse(parsed_url)",
                "filename": "django/contrib/admin/templatetags/admin_urls.py",
                "start_index": 0,
                "end_index": 1925,
                "start_line": 1,
                "end_line": 66,
                "max_line": 66,
                "git_instance": "github",
                "repo_name": "testbed/django__django__4.1",
                "sha": ""
            },
            {
                "code": "custom: https://www.djangoproject.com/fundraising/\ngithub: [django]",
                "filename": ".github/FUNDING.yml",
                "start_index": 0,
                "end_index": 67,
                "start_line": 1,
                "end_line": 2,
                "max_line": 2,
                "git_instance": "github",
                "repo_name": "testbed/django__django__4.1",
                "sha": ""
            },
            {
                "code": "class DefaultAdminSite(LazyObject):\n    def _setup(self):\n        AdminSiteClass = import_string(apps.get_app_config(\"admin\").default_site)\n        self._wrapped = AdminSiteClass()\n\n    def __repr__(self):\n        return repr(self._wrapped)\n\n\n# This global object represents the default admin site, for the common case.\n# You can provide your own AdminSite using the (Simple)AdminConfig.default_site\n# attribute. You can also instantiate AdminSite in your own code to create a\n# custom admin site.\nsite = DefaultAdminSite()",
                "filename": "django/contrib/admin/sites.py",
                "start_index": 22450,
                "end_index": 22973,
                "start_line": 599,
                "end_line": 612,
                "max_line": 612,
                "git_instance": "github",
                "repo_name": "testbed/django__django__4.1",
                "sha": ""
            },
            {
                "code": "from django.contrib import admin\nfrom django.contrib.sites.models import Site\n\n\n@admin.register(Site)\nclass SiteAdmin(admin.ModelAdmin):\n    list_display = (\"domain\", \"name\")\n    search_fields = (\"domain\", \"name\")",
                "filename": "django/contrib/sites/admin.py",
                "start_index": 0,
                "end_index": 213,
                "start_line": 1,
                "end_line": 8,
                "max_line": 8,
                "git_instance": "github",
                "repo_name": "testbed/django__django__4.1",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "django/contrib/admin/sites.py": [
                {
                    "chunk": {
                        "code": "from functools import update_wrapper\nfrom weakref import WeakSet\n\nfrom django.apps import apps\nfrom django.conf import settings\nfrom django.contrib.admin import ModelAdmin, actions\nfrom django.contrib.admin.exceptions import AlreadyRegistered, NotRegistered\nfrom django.contrib.admin.views.autocomplete import AutocompleteJsonView\nfrom django.contrib.auth import REDIRECT_FIELD_NAME\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.db.models.base import ModelBase\nfrom django.http import Http404, HttpResponsePermanentRedirect, HttpResponseRedirect\nfrom django.template.response import TemplateResponse\nfrom django.urls import NoReverseMatch, Resolver404, resolve, reverse\nfrom django.utils.decorators import method_decorator\nfrom django.utils.functional import LazyObject\nfrom django.utils.module_loading import import_string\nfrom django.utils.text import capfirst\nfrom django.utils.translation import gettext as _\nfrom django.utils.translation import gettext_lazy\nfrom django.views.decorators.cache import never_cache\nfrom django.views.decorators.common import no_append_slash\nfrom django.views.decorators.csrf import csrf_protect\nfrom django.views.i18n import JavaScriptCatalog\n\nall_sites = WeakSet()",
                        "filename": "django/contrib/admin/sites.py",
                        "start_index": 0,
                        "end_index": 1222,
                        "start_line": 1,
                        "end_line": 26,
                        "max_line": 612,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__4.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "The issue is related to reverse calls in contrib/admin/options.py, which is likely to be part of the admin site functionality. This file contains the base definitions for admin sites, which may be relevant for understanding how reverse calls are handled."
                }
            ]
        },
        "solution_task": "- Locate the `get_view_on_site_url` method in `django/contrib/admin/options.py`.\n- Modify the `reverse` call within the `get_view_on_site_url` method to include the `current_app` argument, setting its value to `self.admin_site.name`.\n\n```python\n# options.py (within Django admin contrib package)\n\nclass ModelAdmin:\n    # ...\n    def get_view_on_site_url(self, obj=None):\n        # ...\n        # Fixed reverse call with current_app\n        return reverse('...', args=..., current_app=self.admin_site.name)\n```",
        "bouncer_response": {
            "score": 9,
            "criteria": "RESPONSE provides precise, actionable guidance and directly addresses most aspects of the described bug to facilitate its resolution.",
            "supporting_evidence": "The RESPONSE directly addresses the issue described in the PROMPT by providing a clear and actionable solution to the bug in the Django admin site. It specifies the exact location of the method that needs to be modified and gives a code snippet showing how to include the 'current_app' argument in the 'reverse' call within the 'get_view_on_site_url' method. This is the exact change needed to resolve the bug described. The RESPONSE also includes a link to the relevant code in the Django repository, which is helpful for context but not necessary for the fix itself. The RESPONSE does not address the regression test mentioned in the PROMPT, but it provides a comprehensive solution to the main issue, which is why it scores a 9 instead of a 10.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711718951.246892,
        "result": "- Locate the `get_view_on_site_url` method in `django/contrib/admin/options.py`.\n- Modify the `reverse` call within the `get_view_on_site_url` method to include the `current_app` argument, setting its value to `self.admin_site.name`.\n\n```python\n# options.py (within Django admin contrib package)\n\nclass ModelAdmin:\n    # ...\n    def get_view_on_site_url(self, obj=None):\n        # ...\n        # Fixed reverse call with current_app\n        return reverse('...', args=..., current_app=self.admin_site.name)\n```\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__4.1/tree//django) \u2192 [contrib](https://github.com/testbed/django__django__4.1/tree//django/contrib) \u2192 [admin](https://github.com/testbed/django__django__4.1/tree//django/contrib/admin)- [Lines 1 - 26](https://github.com/testbed/django__django__4.1/blob//django/contrib/admin/sites.py#L1-L26)\n\n The issue is related to reverse calls in contrib/admin/options.py, which is likely to be part of the admin site functionality. This file contains the base definitions for admin sites, which may be relevant for understanding how reverse calls are handled."
    }
}