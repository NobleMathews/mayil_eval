{
    "id": "pytest-dev__pytest-6283",
    "repo_name": "testbed/pytest-dev__pytest__5.4",
    "task_id": 6640634038872816996,
    "title": "Calls to logging.xxx() in skipif causes all logging calls to be duplicated to stderr",
    "body": "Using pytest 5.2.2 / 5.3.0, when a function called from a `@pytest.mark.skipif` uses a logging function, the captured log calls are duplicated to stderr.\r\n\r\nMinimal working example:\r\n```python\r\nimport logging\r\n\r\nimport pytest\r\n\r\n\r\ndef _check_cond():\r\n    logging.warning(\"_check_cond\")\r\n    return True\r\n\r\n\r\n@pytest.mark.skipif(not _check_cond(), reason=\"_check_cond not met\")\r\ndef test_logging():\r\n    logging.warning(\"Schmift\")\r\n\r\n    assert False\r\n```\r\n\r\nResults in the following. Notice \"Schmift\" is printed both to \"Captured stderr call\" and \"Captured log call\".\r\n```\r\n$ pytest test_logging.py\r\n======================================= test session starts ========================================\r\nplatform linux -- Python 3.7.5, pytest-5.3.0, py-1.8.0, pluggy-0.13.1\r\nrootdir: /home/felix/src/pytest\r\ncollected 1 item                                                                                   \r\n\r\ntest_logging.py F                                                                            [100%]\r\n\r\n============================================= FAILURES =============================================\r\n___________________________________________ test_logging ___________________________________________\r\n\r\n    @pytest.mark.skipif(not _check_cond(), reason=\"_check_cond not met\")\r\n    def test_logging():\r\n        logging.warning(\"Schmift\")\r\n    \r\n>       assert False\r\nE       assert False\r\n\r\ntest_logging.py:15: AssertionError\r\n--------------------------------------- Captured stderr call ---------------------------------------\r\nWARNING:root:Schmift\r\n---------------------------------------- Captured log call -----------------------------------------\r\nWARNING  root:test_logging.py:13 Schmift\r\n======================================== 1 failed in 0.03s ========================================\r\n```\r\n\r\nRemoving the logging call from `_check_cond()` results in the expected behaviour, \"Schmift\" is not duplicated to stderr:\r\n```python\r\nimport logging\r\n\r\nimport pytest\r\n\r\n\r\ndef _check_cond():\r\n    # logging.warning(\"_check_cond\")\r\n    return True\r\n\r\n\r\n@pytest.mark.skipif(not _check_cond(), reason=\"_check_cond not met\")\r\ndef test_logging():\r\n    logging.warning(\"Schmift\")\r\n\r\n    assert False\r\n```\r\n\r\n```\r\n$ pytest test_logging.py\r\n======================================= test session starts ========================================\r\nplatform linux -- Python 3.7.5, pytest-5.3.0, py-1.8.0, pluggy-0.13.1\r\nrootdir: /home/felix/src/pytest\r\ncollected 1 item                                                                                   \r\n\r\ntest_logging.py F                                                                            [100%]\r\n\r\n============================================= FAILURES =============================================\r\n___________________________________________ test_logging ___________________________________________\r\n\r\n    @pytest.mark.skipif(not _check_cond(), reason=\"_check_cond not met\")\r\n    def test_logging():\r\n        logging.warning(\"Schmift\")\r\n    \r\n>       assert False\r\nE       assert False\r\n\r\ntest_logging.py:15: AssertionError\r\n---------------------------------------- Captured log call -----------------------------------------\r\nWARNING  root:test_logging.py:13 Schmift\r\n======================================== 1 failed in 0.03s =========================================\r\n```\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pytest-dev__pytest__5.4.git",
    "requested_commit": "",
    "mayil_response": "Doesn't seem like we have fully grasped all the specifics of this ticket \ud83d\ude10.                   But we've outlined some ideas that might help you get started:\n\n- Ensure that the `logging` module is configured correctly in the pytest configuration (e.g., `pytest.ini`, `conftest.py`) to avoid duplicate log messages.\n- If the `logging` configuration is not the issue, check the implementation of `_check_cond()` and `test_logging()` functions to ensure that `logging.warning()` is not called multiple times unintentionally.\n- If the issue persists, consider using a fixture to configure logging for the test session and ensure that the logging configuration is reset after each test to prevent state leakage between tests.\n- If the duplication occurs only when a test is skipped, investigate if the pytest's log capturing mechanism is interacting with the logging module in an unexpected way when `pytest.skip()` is called. This might be a bug in pytest that needs to be reported.\n- As a workaround, you can temporarily disable log capturing in pytest by using the `-s` option or by setting `log_cli = true` in the pytest configuration file to see if it affects the duplication issue.\n\n### Code snippets to check\n\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__5.4/tree//bench)- [Lines 1 - 9](https://github.com/testbed/pytest-dev__pytest__5.4/blob//bench/skip.py#L1-L9)\n\n This snippet contains a pytest.skip call within a test function, which is similar to the issue described where logging within a skipif condition causes duplication. It may be necessary to look at this snippet to understand how pytest.skip interacts with logging and whether it causes similar issues.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0012944999999999999,
        "snippet_processor": 0.0483,
        "issue_star_creation": 0.03987,
        "issue_star_solver": 0.03778,
        "bouncer": 0.03715
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711734882.7704709,
        "relevant_snippets": [
            {
                "code": "import pytest\n\nSKIP = True\n\n\n@pytest.mark.parametrize(\"x\", range(5000))\ndef test_foo(x):\n    if SKIP:\n        pytest.skip(\"heh\")",
                "filename": "bench/skip.py",
                "start_index": 0,
                "end_index": 128,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.4",
                "sha": ""
            },
            {
                "code": "# shim for pylib going away\n# if pylib is installed this file will get skipped\n# (`py/__init__.py` has higher precedence)\nimport sys\n\nimport _pytest._py.error as error\nimport _pytest._py.path as path\n\nsys.modules[\"py.error\"] = error\nsys.modules[\"py.path\"] = path",
                "filename": "src/py.py",
                "start_index": 0,
                "end_index": 262,
                "start_line": 1,
                "end_line": 10,
                "max_line": 10,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.4",
                "sha": ""
            },
            {
                "code": "rtd:\n  project: pytest",
                "filename": ".github/config.yml",
                "start_index": 0,
                "end_index": 22,
                "start_line": 1,
                "end_line": 2,
                "max_line": 2,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.4",
                "sha": ""
            },
            {
                "code": "blank_issues_enabled: false\ncontact_links:\n  - name: \u2753 Support Question\n    url: https://github.com/pytest-dev/pytest/discussions\n    about: Use GitHub's new Discussions feature for questions",
                "filename": ".github/ISSUE_TEMPLATE/config.yml",
                "start_index": 0,
                "end_index": 191,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.4",
                "sha": ""
            },
            {
                "code": "import sys\n\nif __name__ == \"__main__\":\n    import cProfile\n    import pytest  # NOQA\n    import pstats\n\n    script = sys.argv[1:] if len(sys.argv) > 1 else [\"empty.py\"]\n    cProfile.run(\"pytest.cmdline.main(%r)\" % script, \"prof\")\n    p = pstats.Stats(\"prof\")\n    p.strip_dirs()\n    p.sort_stats(\"cumulative\")\n    print(p.print_stats(500))",
                "filename": "bench/bench.py",
                "start_index": 0,
                "end_index": 338,
                "start_line": 1,
                "end_line": 13,
                "max_line": 13,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.4",
                "sha": ""
            },
            {
                "code": "import pytest\n\n\n@pytest.fixture(scope=\"module\", params=range(966))\ndef foo(request):\n    return request.param\n\n\ndef test_it(foo):\n    pass\n\n\ndef test_it2(foo):\n    pass",
                "filename": "bench/manyparam.py",
                "start_index": 0,
                "end_index": 168,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.4",
                "sha": ""
            },
            {
                "code": "-   repo: local\n    hooks:\n    -   id: rst\n        name: rst\n        entry: rst-lint --encoding utf-8\n        files: ^(RELEASING.rst|README.rst|TIDELIFT.rst)$\n        language: python\n        additional_dependencies: [pygments, restructuredtext_lint]\n    -   id: changelogs-rst\n        name: changelog filenames\n        language: fail\n        entry: 'changelog files must be named ####.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst'\n        exclude: changelog/(\\d+\\.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst|README.rst|_template.rst)\n        files: ^changelog/\n    -   id: py-deprecated\n        name: py library is deprecated\n        language: pygrep\n        entry: >\n            (?x)\\bpy\\.(\n                _code\\.|\n                builtin\\.|\n                code\\.|\n                io\\.|\n                path\\.local\\.sysfind|\n                process\\.|\n                std\\.|\n                error\\.|\n                xml\\.\n            )\n        types: [python]\n    -   id: py-path-deprecated\n        name: py.path usage is deprecated\n        exclude: docs|src/_pytest/deprecated.py|testing/deprecated_test.py|src/_pytest/legacypath.py\n        language: pygrep\n        entry: \\bpy\\.path\\.local\n        types: [python]",
                "filename": ".pre-commit-config.yaml",
                "start_index": 2166,
                "end_index": 3442,
                "start_line": 73,
                "end_line": 108,
                "max_line": 108,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.4",
                "sha": ""
            },
            {
                "code": "import datetime\nimport pathlib\nimport re\nfrom textwrap import dedent\nfrom textwrap import indent\n\nimport packaging.version\nimport platformdirs\nimport tabulate\nimport wcwidth\nfrom requests_cache import CachedResponse\nfrom requests_cache import CachedSession\nfrom requests_cache import OriginalResponse\nfrom requests_cache import SQLiteCache\nfrom tqdm import tqdm\n\n\nFILE_HEAD = r\"\"\"\n.. Note this file is autogenerated by scripts/update-plugin-list.py - usually weekly via github action\n\n.. _plugin-list:\n\nPlugin List\n===========\n\nPyPI projects that match \"pytest-\\*\" are considered plugins and are listed\nautomatically together with a manually-maintained list in `the source\ncode <https://github.com/pytest-dev/pytest/blob/main/scripts/update-plugin-list.py>`_.\nPackages classified as inactive are excluded.\n\n.. The following conditional uses a different format for this list when\n   creating a PDF, because otherwise the table gets far too wide for the\n   page.\n\n\"\"\"\nDEVELOPMENT_STATUS_CLASSIFIERS = (\n    \"Development Status :: 1 - Planning\",\n    \"Development Status :: 2 - Pre-Alpha\",\n    \"Development Status :: 3 - Alpha\",\n    \"Development Status :: 4 - Beta\",\n    \"Development Status :: 5 - Production/Stable\",\n    \"Development Status :: 6 - Mature\",\n    \"Development Status :: 7 - Inactive\",\n)\nADDITIONAL_PROJECTS = {  # set of additional projects to consider as plugins\n    \"logassert\",\n    \"nuts\",\n}\n\n\ndef escape_rst(text: str) -> str:\n    \"\"\"Rudimentary attempt to escape special RST characters to appear as\n    plain text.\"\"\"\n    text = (\n        text.replace(\"*\", \"\\\\*\")\n        .replace(\"<\", \"\\\\<\")\n        .replace(\">\", \"\\\\>\")\n        .replace(\"`\", \"\\\\`\")\n    )\n    text = re.sub(r\"_\\b\", \"\", text)\n    return text\n\n\ndef project_response_with_refresh(\n    session: CachedSession, name: str, last_serial: int\n) -> OriginalResponse | CachedResponse:\n    \"\"\"Get a http cached pypi project\n\n    force refresh in case of last serial mismatch\n    \"\"\"\n\n    response = session.get(f\"https://pypi.org/pypi/{name}/json\")\n    if int(response.headers.get(\"X-PyPI-Last-Serial\", -1)) != last_serial:\n        response = session.get(f\"https://pypi.org/pypi/{name}/json\", refresh=True)\n    return response\n\n\ndef get_session() -> CachedSession:\n    \"\"\"Configures the requests-cache session\"\"\"\n    cache_path = platformdirs.user_cache_path(\"pytest-plugin-list\")\n    cache_path.mkdir(exist_ok=True, parents=True)\n    cache_file = cache_path.joinpath(\"http_cache.sqlite3\")\n    return CachedSession(backend=SQLiteCache(cache_file))\n\n\ndef pytest_plugin_projects_from_pypi(session: CachedSession) -> dict[str, int]:\n    response = session.get(\n        \"https://pypi.org/simple\",\n        headers={\"Accept\": \"application/vnd.pypi.simple.v1+json\"},\n        refresh=True,\n    )\n    return {\n        name: p[\"_last-serial\"]\n        for p in response.json()[\"projects\"]\n        if (name := p[\"name\"]).startswith(\"pytest-\") or name in ADDITIONAL_PROJECTS\n    }",
                "filename": "scripts/update-plugin-list.py",
                "start_index": 0,
                "end_index": 2939,
                "start_line": 1,
                "end_line": 155,
                "max_line": 195,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.4",
                "sha": ""
            },
            {
                "code": "import json\nfrom pathlib import Path\n\nimport requests\n\nissues_url = \"https://api.github.com/repos/pytest-dev/pytest/issues\"\n\n\ndef get_issues():\n    issues = []\n    url = issues_url\n    while 1:\n        get_data = {\"state\": \"all\"}\n        r = requests.get(url, params=get_data)\n        data = r.json()\n        if r.status_code == 403:\n            # API request limit exceeded\n            print(data[\"message\"])\n            exit(1)\n        issues.extend(data)\n\n        # Look for next page\n        links = requests.utils.parse_header_links(r.headers[\"Link\"])\n        another_page = False\n        for link in links:\n            if link[\"rel\"] == \"next\":\n                url = link[\"url\"]\n                another_page = True\n        if not another_page:\n            return issues\n\n\ndef main(args):\n    cachefile = Path(args.cache)\n    if not cachefile.exists() or args.refresh:\n        issues = get_issues()\n        cachefile.write_text(json.dumps(issues), \"utf-8\")\n    else:\n        issues = json.loads(cachefile.read_text(\"utf-8\"))\n\n    open_issues = [x for x in issues if x[\"state\"] == \"open\"]\n\n    open_issues.sort(key=lambda x: x[\"number\"])\n    report(open_issues)\n\n\ndef _get_kind(issue):\n    labels = [label[\"name\"] for label in issue[\"labels\"]]\n    for key in (\"bug\", \"enhancement\", \"proposal\"):\n        if key in labels:\n            return key\n    return \"issue\"\n\n\ndef report(issues):\n    for issue in issues:\n        title = issue[\"title\"]\n        # body = issue[\"body\"]\n        kind = _get_kind(issue)\n        status = issue[\"state\"]\n        number = issue[\"number\"]\n        link = \"https://github.com/pytest-dev/pytest/issues/%s/\" % number\n        print(\"----\")\n        print(status, kind, link)\n        print(title)\n        # print()\n        # lines = body.split(\"\\n\")\n        # print(\"\\n\".join(lines[:3]))\n        # if len(lines) > 3 or len(body) > 240:\n        #    print(\"...\")\n    print(\"\\n\\nFound %s open issues\" % len(issues))\n\n\nif __name__ == \"__main__\":\n    import argparse\n\n    parser = argparse.ArgumentParser(\"process bitbucket issues\")\n    parser.add_argument(\n        \"--refresh\", action=\"store_true\", help=\"invalidate cache, refresh issues\"\n    )\n    parser.add_argument(\n        \"--cache\", action=\"store\", default=\"issues.json\", help=\"cache file\"\n    )\n    args = parser.parse_args()\n    main(args)",
                "filename": "extra/get_issues.py",
                "start_index": 0,
                "end_index": 2321,
                "start_line": 1,
                "end_line": 85,
                "max_line": 85,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.4",
                "sha": ""
            },
            {
                "code": "# info:\n# * https://help.github.com/en/articles/displaying-a-sponsor-button-in-your-repository\n# * https://tidelift.com/subscription/how-to-connect-tidelift-with-github\ntidelift: pypi/pytest\nopen_collective: pytest",
                "filename": ".github/FUNDING.yml",
                "start_index": 0,
                "end_index": 214,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.4",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "bench/skip.py": [
                {
                    "chunk": {
                        "code": "import pytest\n\nSKIP = True\n\n\n@pytest.mark.parametrize(\"x\", range(5000))\ndef test_foo(x):\n    if SKIP:\n        pytest.skip(\"heh\")",
                        "filename": "bench/skip.py",
                        "start_index": 0,
                        "end_index": 128,
                        "start_line": 1,
                        "end_line": 9,
                        "max_line": 9,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__5.4",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains a pytest.skip call within a test function, which is similar to the issue described where logging within a skipif condition causes duplication. It may be necessary to look at this snippet to understand how pytest.skip interacts with logging and whether it causes similar issues."
                }
            ]
        },
        "solution_task": "- Ensure that the `logging` module is configured correctly in the pytest configuration (e.g., `pytest.ini`, `conftest.py`) to avoid duplicate log messages.\n- If the `logging` configuration is not the issue, check the implementation of `_check_cond()` and `test_logging()` functions to ensure that `logging.warning()` is not called multiple times unintentionally.\n- If the issue persists, consider using a fixture to configure logging for the test session and ensure that the logging configuration is reset after each test to prevent state leakage between tests.\n- If the duplication occurs only when a test is skipped, investigate if the pytest's log capturing mechanism is interacting with the logging module in an unexpected way when `pytest.skip()` is called. This might be a bug in pytest that needs to be reported.\n- As a workaround, you can temporarily disable log capturing in pytest by using the `-s` option or by setting `log_cli = true` in the pytest configuration file to see if it affects the duplication issue.",
        "bouncer_response": {
            "score": 4,
            "criteria": "RESPONSE must provide actionable, relevant guidance to more parts of the PROMPT's described issue to score higher.",
            "supporting_evidence": "The RESPONSE provides several actionable suggestions, such as checking the logging configuration, investigating the functions and the use of fixtures, and considering the interaction between pytest's log capturing and the logging module. It also suggests a workaround using the `-s` option or setting `log_cli = true`. However, the RESPONSE fails to directly address the core issue described in the PROMPT, which is the duplication of log messages when a logging call is made within a `@pytest.mark.skipif` condition. The RESPONSE also includes a reference to a code snippet that is not directly related to the issue at hand, which could lead to confusion. The RESPONSE does not provide a clear path to resolving the specific bug described in the PROMPT.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711734991.952279,
        "result": "Doesn't seem like we have fully grasped all the specifics of this ticket \ud83d\ude10.                   But we've outlined some ideas that might help you get started:\n\n- Ensure that the `logging` module is configured correctly in the pytest configuration (e.g., `pytest.ini`, `conftest.py`) to avoid duplicate log messages.\n- If the `logging` configuration is not the issue, check the implementation of `_check_cond()` and `test_logging()` functions to ensure that `logging.warning()` is not called multiple times unintentionally.\n- If the issue persists, consider using a fixture to configure logging for the test session and ensure that the logging configuration is reset after each test to prevent state leakage between tests.\n- If the duplication occurs only when a test is skipped, investigate if the pytest's log capturing mechanism is interacting with the logging module in an unexpected way when `pytest.skip()` is called. This might be a bug in pytest that needs to be reported.\n- As a workaround, you can temporarily disable log capturing in pytest by using the `-s` option or by setting `log_cli = true` in the pytest configuration file to see if it affects the duplication issue.\n\n### Code snippets to check\n\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__5.4/tree//bench)- [Lines 1 - 9](https://github.com/testbed/pytest-dev__pytest__5.4/blob//bench/skip.py#L1-L9)\n\n This snippet contains a pytest.skip call within a test function, which is similar to the issue described where logging within a skipif condition causes duplication. It may be necessary to look at this snippet to understand how pytest.skip interacts with logging and whether it causes similar issues."
    }
}