{
    "id": "sympy__sympy-18033",
    "repo_name": "testbed/sympy__sympy__1.6",
    "task_id": 2654825283126553104,
    "title": "Remove Permutation.print_cyclic flag",
    "body": "See the discussion at https://github.com/sympy/sympy/pull/15198. The Permutation printing should be handled in the SymPy printers, not on the object itself. The flag should be a flag to the printer. Any doctest that wants to change the printing should set the flag in `init_printing`. However, whichever is set as the default should be used everywhere. \r\n\r\nSince it is publicly documented, it will need to be deprecated https://github.com/sympy/sympy/wiki/Deprecating-policy.\r\n\r\nAdditionally, it would be best if the `str` printer printed a Python valid representation and the pretty printers only (pprint/latex) printed things like (1 2 3).\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/sympy__sympy__1.6.git",
    "requested_commit": "",
    "mayil_response": "To implement the feature described in the ticket, follow these steps:\n\n- Deprecate the `Permutation.print_cyclic` flag.\n  - Update the `Permutation` class to issue a `SymPyDeprecationWarning` when `print_cyclic` is accessed or modified.\n  - Ensure that the warning message includes the version in which `print_cyclic` will be removed and suggests using the printer settings instead.\n\n- Modify the printers to accept a `perm_cyclic` flag.\n  - Update `pretty.py` and `latex.py` to check for a `perm_cyclic` setting in their respective `_print_Permutation` methods.\n  - Use the `perm_cyclic` setting from the printer's `_settings` dictionary to determine how to print the permutation.\n\n- Update the default behavior of the `str` printer.\n  - Ensure that the `str` printer prints a Python-valid representation of the permutation by default.\n\n- Update the documentation and tests.\n  - Find and update all instances in the documentation that refer to `Permutation.print_cyclic`.\n  - Update doctests and unit tests to use the new `perm_cyclic` printer setting instead of modifying the `Permutation` object.\n\nHere is a high-level overview of the changes in pseudo-code:\n\n```python\n# In sympy/combinatorics/permutations.py\nclass Permutation:\n    # ...\n    @property\n    def print_cyclic(self):\n        SymPyDeprecationWarning(\n            feature=\"Permutation.print_cyclic\",\n            useinstead=\"the perm_cyclic flag in the printer settings\",\n            issue=15201,\n            deprecated_since_version=\"1.6\"\n        ).warn()\n        return self._print_cyclic\n\n    @print_cyclic.setter\n    def print_cyclic(self, value):\n        SymPyDeprecationWarning(\n            feature=\"Permutation.print_cyclic\",\n            useinstead=\"the perm_cyclic flag in the printer settings\",\n            issue=15201,\n            deprecated_since_version=\"1.6\"\n        ).warn()\n        self._print_cyclic = value\n\n# In sympy/printing/pretty/pretty.py and sympy/printing/latex.py\n# Modify the _print_Permutation methods\ndef _print_Permutation(self, expr):\n    # ...\n    perm_cyclic = self._settings.get(\"perm_cyclic\", True)\n    if perm_cyclic:\n        return self._print_Cycle(expr)\n    else:\n        # existing logic for non-cyclic printing\n\n# In sympy/interactive/printing.py\n# Update init_printing to handle the perm_cyclic flag\ndef init_printing(perm_cyclic=None, **kwargs):\n    # ...\n    if perm_cyclic is not None:\n        Printer.set_global_settings(perm_cyclic=perm_cyclic)\n    # ...\n```\n\nRemember to update the documentation and tests accordingly.\n\n### Code snippets to check\n\n-  \u2192 [sympy](https://github.com/testbed/sympy__sympy__1.6/tree//sympy) \u2192 [printing](https://github.com/testbed/sympy__sympy__1.6/tree//sympy/printing) \u2192 [pretty](https://github.com/testbed/sympy__sympy__1.6/tree//sympy/printing/pretty)- [Lines 372 - 422](https://github.com/testbed/sympy__sympy__1.6/blob//sympy/printing/pretty/pretty.py#L372-L422)\n\n This snippet contains the deprecated Permutation.print_cyclic flag and its usage in the pretty printer, which needs to be removed and handled by the printer settings.\n-  \u2192 [sympy](https://github.com/testbed/sympy__sympy__1.6/tree//sympy) \u2192 [printing](https://github.com/testbed/sympy__sympy__1.6/tree//sympy/printing)- [Lines 370 - 448](https://github.com/testbed/sympy__sympy__1.6/blob//sympy/printing/latex.py#L370-L448)\n\n This snippet also contains the deprecated Permutation.print_cyclic flag and its usage in the LaTeX printer, which needs to be removed and handled by the printer settings.\n-  \u2192 [sympy](https://github.com/testbed/sympy__sympy__1.6/tree//sympy) \u2192 [combinatorics](https://github.com/testbed/sympy__sympy__1.6/tree//sympy/combinatorics)- [Lines 20 - 3007](https://github.com/testbed/sympy__sympy__1.6/blob//sympy/combinatorics/permutations.py#L20-L3007)\n\n This snippet from permutations.py is relevant because it contains the documentation for the Permutation class, which will need to be updated to reflect the deprecation of the print_cyclic flag and the new way of setting the printing behavior.\n-  \u2192 [sympy](https://github.com/testbed/sympy__sympy__1.6/tree//sympy) \u2192 [interactive](https://github.com/testbed/sympy__sympy__1.6/tree//sympy/interactive)- [Lines 3 - 559](https://github.com/testbed/sympy__sympy__1.6/blob//sympy/interactive/printing.py#L3-L559)\n\n This snippet from interactive/printing.py is relevant because it deals with the initialization of printing settings, which is where the new flag for controlling permutation printing should be handled.\n-  \u2192 [sympy](https://github.com/testbed/sympy__sympy__1.6/tree//sympy) \u2192 [utilities](https://github.com/testbed/sympy__sympy__1.6/tree//sympy/utilities)- [Lines 12 - 12](https://github.com/testbed/sympy__sympy__1.6/blob//sympy/utilities/exceptions.py#L12-L12)\n\n This snippet defines the SymPyDeprecationWarning class, which will be used to issue a deprecation warning for the Permutation.print_cyclic flag.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.00031,
        "snippet_processor": 0.06655,
        "issue_star_creation": 0.02579,
        "issue_star_solver": 0.07651000000000001,
        "bouncer": 0.02152
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711746038.630632,
        "relevant_snippets": [
            {
                "code": "def _print_Cycle(self, dc):\n        from sympy.combinatorics.permutations import Permutation, Cycle\n        # for Empty Cycle\n        if dc == Cycle():\n            cyc = stringPict('')\n            return prettyForm(*cyc.parens())\n\n        dc_list = Permutation(dc.list()).cyclic_form\n        # for Identity Cycle\n        if dc_list == []:\n            cyc = self._print(dc.size - 1)\n            return prettyForm(*cyc.parens())\n\n        cyc = stringPict('')\n        for i in dc_list:\n            l = self._print(str(tuple(i)).replace(',', ''))\n            cyc = prettyForm(*cyc.right(l))\n        return cyc\n\n    def _print_Permutation(self, expr):\n        from sympy.combinatorics.permutations import Permutation, Cycle\n\n        perm_cyclic = Permutation.print_cyclic\n        if perm_cyclic is not None:\n            SymPyDeprecationWarning(\n                feature=\"Permutation.print_cyclic = {}\".format(perm_cyclic),\n                useinstead=\"init_printing(perm_cyclic={})\"\n                .format(perm_cyclic),\n                issue=15201,\n                deprecated_since_version=\"1.6\").warn()\n        else:\n            perm_cyclic = self._settings.get(\"perm_cyclic\", True)\n\n        if perm_cyclic:\n            return self._print_Cycle(Cycle(expr))\n\n        lower = expr.array_form\n        upper = list(range(len(lower)))\n\n        result = stringPict('')\n        first = True\n        for u, l in zip(upper, lower):\n            s1 = self._print(u)\n            s2 = self._print(l)\n            col = prettyForm(*s1.below(s2))\n            if first:\n                first = False\n            else:\n                col = prettyForm(*col.left(\" \"))\n            result = prettyForm(*result.right(col))\n        return prettyForm(*result.parens())",
                "filename": "sympy/printing/pretty/pretty.py",
                "start_index": 12535,
                "end_index": 14276,
                "start_line": 372,
                "end_line": 422,
                "max_line": 2718,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.6",
                "sha": ""
            },
            {
                "code": "def _print_Cycle(self, expr):\n        from sympy.combinatorics.permutations import Permutation\n        if expr.size == 0:\n            return r\"\\left( \\right)\"\n        expr = Permutation(expr)\n        expr_perm = expr.cyclic_form\n        siz = expr.size\n        if expr.array_form[-1] == siz - 1:\n            expr_perm = expr_perm + [[siz - 1]]\n        term_tex = ''\n        for i in expr_perm:\n            term_tex += str(i).replace(',', r\"\\;\")\n        term_tex = term_tex.replace('[', r\"\\left( \")\n        term_tex = term_tex.replace(']', r\"\\right)\")\n        return term_tex\n\n    def _print_Permutation(self, expr):\n        from sympy.combinatorics.permutations import Permutation\n        from sympy.utilities.exceptions import SymPyDeprecationWarning\n\n        perm_cyclic = Permutation.print_cyclic\n        if perm_cyclic is not None:\n            SymPyDeprecationWarning(\n                feature=\"Permutation.print_cyclic = {}\".format(perm_cyclic),\n                useinstead=\"init_printing(perm_cyclic={})\"\n                .format(perm_cyclic),\n                issue=15201,\n                deprecated_since_version=\"1.6\").warn()\n        else:\n            perm_cyclic = self._settings.get(\"perm_cyclic\", True)\n\n        if perm_cyclic:\n            return self._print_Cycle(expr)\n\n        if expr.size == 0:\n            return r\"\\left( \\right)\"\n\n        lower = [self._print(arg) for arg in expr.array_form]\n        upper = [self._print(arg) for arg in range(len(lower))]\n\n        row1 = \" & \".join(upper)\n        row2 = \" & \".join(lower)\n        mat = r\" \\\\ \".join((row1, row2))\n        return r\"\\begin{pmatrix} %s \\end{pmatrix}\" % mat\n\n\n    def _print_AppliedPermutation(self, expr):\n        perm, var = expr.args\n        return r\"\\sigma_{%s}(%s)\" % (self._print(perm), self._print(var))\n\n    def _print_Float(self, expr):\n        # Based off of that in StrPrinter\n        dps = prec_to_dps(expr._prec)\n        strip = False if self._settings['full_prec'] else True\n        low = self._settings[\"min\"] if \"min\" in self._settings else None\n        high = self._settings[\"max\"] if \"max\" in self._settings else None\n        str_real = mlib.to_str(expr._mpf_, dps, strip_zeros=strip, min_fixed=low, max_fixed=high)\n\n        # Must always have a mul symbol (as 2.5 10^{20} just looks odd)\n        # thus we use the number separator\n        separator = self._settings['mul_symbol_latex_numbers']\n\n        if 'e' in str_real:\n            (mant, exp) = str_real.split('e')\n\n            if exp[0] == '+':\n                exp = exp[1:]\n            if self._settings['decimal_separator'] == 'comma':\n                mant = mant.replace('.','{,}')\n\n            return r\"%s%s10^{%s}\" % (mant, separator, exp)\n        elif str_real == \"+inf\":\n            return r\"\\infty\"\n        elif str_real == \"-inf\":\n            return r\"- \\infty\"\n        else:\n            if self._settings['decimal_separator'] == 'comma':\n                str_real = str_real.replace('.','{,}')\n            return str_real",
                "filename": "sympy/printing/latex.py",
                "start_index": 12209,
                "end_index": 15191,
                "start_line": 370,
                "end_line": 448,
                "max_line": 2941,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.6",
                "sha": ""
            },
            {
                "code": "class SymPyDeprecationWarning(DeprecationWarning):",
                "filename": "sympy/utilities/exceptions.py",
                "start_index": 160,
                "end_index": 210,
                "start_line": 12,
                "end_line": 12,
                "max_line": 188,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.6",
                "sha": ""
            },
            {
                "code": "# https://github.com/sympy/sympy/pull/12854",
                "filename": "sympy/matrices/matrices.py",
                "start_index": 21142,
                "end_index": 21185,
                "start_line": 587,
                "end_line": 587,
                "max_line": 2310,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.6",
                "sha": ""
            },
            {
                "code": "\"\"\"\n    A permutation, alternatively known as an 'arrangement number' or 'ordering'\n    is an arrangement of the elements of an ordered list into a one-to-one\n    mapping with itself. The permutation of a given arrangement is given by\n    indicating the positions of the elements after re-arrangement [2]_. For\n    example, if one started with elements [x, y, a, b] (in that order) and\n    they were reordered as [x, y, b, a] then the permutation would be\n    [0, 1, 3, 2]. Notice that (in SymPy) the first element is always referred\n    to as 0 and the permutation uses the indices of the elements in the\n    original ordering, not the elements (a, b, etc...) themselves.\n\n    >>> from sympy.combinatorics import Permutation\n    >>> from sympy.interactive import init_printing\n    >>> init_printing(perm_cyclic=False, pretty_print=False)\n\n    Permutations Notation\n    =====================\n\n    Permutations are commonly represented in disjoint cycle or array forms.\n\n    Array Notation and 2-line Form\n    ------------------------------------\n\n    In the 2-line form, the elements and their final positions are shown\n    as a matrix with 2 rows:\n\n    [0    1    2     ... n-1]\n    [p(0) p(1) p(2)  ... p(n-1)]\n\n    Since the first line is always range(n), where n is the size of p,\n    it is sufficient to represent the permutation by the second line,\n    referred to as the \"array form\" of the permutation. This is entered\n    in brackets as the argument to the Permutation class:\n\n    >>> p = Permutation([0, 2, 1]); p\n    Permutation([0, 2, 1])\n\n    Given i in range(p.size), the permutation maps i to i^p\n\n    >>> [i^p for i in range(p.size)]\n    [0, 2, 1]\n\n    The composite of two permutations p*q means first apply p, then q, so\n    i^(p*q) = (i^p)^q which is i^p^q according to Python precedence rules:\n\n    >>> q = Permutation([2, 1, 0])\n    >>> [i^p^q for i in range(3)]\n    [2, 0, 1]\n    >>> [i^(p*q) for i in range(3)]\n    [2, 0, 1]\n\n    One can use also the notation p(i) = i^p, but then the composition\n    rule is (p*q)(i) = q(p(i)), not p(q(i)):\n\n    >>> [(p*q)(i) for i in range(p.size)]\n    [2, 0, 1]\n    >>> [q(p(i)) for i in range(p.size)]\n    [2, 0, 1]\n    >>> [p(q(i)) for i in range(p.size)]\n    [1, 2, 0]\n\n    Disjoint Cycle Notation\n    -----------------------\n\n    In disjoint cycle notation, only the elements that have shifted are\n    indicated. In the above case, the 2 and 1 switched places. This can\n    be entered in two ways:\n\n    >>> Permutation(1, 2) == Permutation([[1, 2]]) == p\n    True\n\n    Only the relative ordering of elements in a cycle matter:\n\n    >>> Permutation(1,2,3) == Permutation(2,3,1) == Permutation(3,1,2)\n    True\n\n    The disjoint cycle notation is convenient when representing\n    permutations that have several cycles in them:\n\n    >>> Permutation(1, 2)(3, 5) == Permutation([[1, 2], [3, 5]])\n    True\n\n    It also provides some economy in entry when computing products of\n    permutations that are written in disjoint cycle notation:\n\n    >>> Permutation(1, 2)(1, 3)(2, 3)\n    Permutation([0, 3, 2, 1])\n    >>> _ == Permutation([[1, 2]])*Permutation([[1, 3]])*Permutation([[2, 3]])\n    True\n\n        Caution: when the cycles have common elements\n        between them then the order in which the\n        permutations are applied matters. The\n        convention is that the permutations are\n        applied from *right to left*. In the following, the\n        transposition of elements 2 and 3 is followed\n        by the transposition of elements 1 and 2:\n\n        >>> Permutation(1, 2)(2, 3) == Permutation([(1, 2), (2, 3)])\n        True\n        >>> Permutation(1, 2)(2, 3).list()\n        [0, 3, 1, 2]\n\n        If the first and second elements had been\n        swapped first, followed by the swapping of the second\n        and third, the result would have been [0, 2, 3, 1].\n        If, for some reason, you want to apply the cycles\n        in the order they are entered, you can simply reverse\n        the order of cycles:\n\n        >>> Permutation([(1, 2), (2, 3)][::-1]).list()\n        [0, 2, 3, 1]\n\n    Entering a singleton in a permutation is a way to indicate the size of the\n    permutation. The ``size`` keyword can also be used.\n\n    Array-form entry:\n\n    >>> Permutation([[1, 2], [9]])\n    Permutation([0, 2, 1], size=10)\n    >>> Permutation([[1, 2]], size=10)\n    Permutation([0, 2, 1], size=10)\n\n    Cyclic-form entry:\n\n    >>> Permutation(1, 2, size=10)\n    Permutation([0, 2, 1], size=10)\n    >>> Permutation(9)(1, 2)\n    Permutation([0, 2, 1], size=10)\n\n    Caution: no singleton containing an element larger than the largest\n    in any previous cycle can be entered. This is an important difference\n    in how Permutation and Cycle handle the __call__ syntax. A singleton\n    argument at the start of a Permutation performs instantiation of the\n    Permutation and is permitted:\n\n    >>> Permutation(5)\n    Permutation([], size=6)\n\n    A singleton entered after instantiation is a call to the permutation\n    -- a function call -- and if the argument is out of range it will\n    trigger an error. For this reason, it is better to start the cycle\n    with the singleton:\n\n    The following fails because there is no element 3:\n\n    >>> Permutation(1, 2)(3)\n    Traceback (most recent call last):\n    ...\n    IndexError: list index out of range\n\n    This is ok: only the call to an out of range singleton is prohibited;\n    otherwise the permutation autosizes:\n\n    >>> Permutation(3)(1, 2)\n    Permutation([0, 2, 1, 3])\n    >>> Permutation(1, 2)(3, 4) == Permutation(3, 4)(1, 2)\n    True\n\n\n    Equality testing\n    ----------------\n\n    The array forms must be the same in order for permutations to be equal:\n\n    >>> Permutation([1, 0, 2, 3]) == Permutation([1, 0])\n    False\n\n\n    Identity Permutation\n    --------------------\n\n    The identity permutation is a permutation in which no element is out of\n    place. It can be entered in a variety of ways. All the following create\n    an identity permutation of size 4:\n\n    >>> I = Permutation([0, 1, 2, 3])\n    >>> all(p == I for p in [\n    ... Permutation(3),\n    ... Permutation(range(4)),\n    ... Permutation([], size=4),\n    ... Permutation(size=4)])\n    True\n\n    Watch out for entering the range *inside* a set of brackets (which is\n    cycle notation):\n\n    >>> I == Permutation([range(4)])\n    False\n\n\n    Permutation Printing\n    ====================\n\n    There are a few things to note about how Permutations are printed.\n\n    1) If you prefer one form (array or cycle) over another, you can set\n    ``init_printing`` with the ``perm_cyclic`` flag.\n\n    >>> from sympy import init_printing\n    >>> p = Permutation(1, 2)(4, 5)(3, 4)\n    >>> p\n    Permutation([0, 2, 1, 4, 5, 3])\n\n    >>> init_printing(perm_cyclic=True, pretty_print=False)\n    >>> p\n    (1 2)(3 4 5)\n\n    2) Regardless of the setting, a list of elements in the array for cyclic\n    form can be obtained and either of those can be copied and supplied as\n    the argument to Permutation:\n\n    >>> p.array_form\n    [0, 2, 1, 4, 5, 3]\n    >>> p.cyclic_form\n    [[1, 2], [3, 4, 5]]\n    >>> Permutation(_) == p\n    True\n\n    3) Printing is economical in that as little as possible is printed while\n    retaining all information about the size of the permutation:\n\n    >>> init_printing(perm_cyclic=False, pretty_print=False)\n    >>> Permutation([1, 0, 2, 3])\n    Permutation([1, 0, 2, 3])\n    >>> Permutation([1, 0, 2, 3], size=20)\n    Permutation([1, 0], size=20)\n    >>> Permutation([1, 0, 2, 4, 3, 5, 6], size=20)\n    Permutation([1, 0, 2, 4, 3], size=20)\n\n    >>> p = Permutation([1, 0, 2, 3])\n    >>> init_printing(perm_cyclic=True, pretty_print=False)\n    >>> p\n    (3)(0 1)\n    >>> init_printing(perm_cyclic=False, pretty_print=False)\n\n    The 2 was not printed but it is still there as can be seen with the\n    array_form and size methods:\n\n    >>> p.array_form\n    [1, 0, 2, 3]\n    >>> p.size\n    4\n\n    Short introduction to other methods\n    ===================================\n\n    The permutation can act as a bijective function, telling what element is\n    located at a given position\n\n    >>> q = Permutation([5, 2, 3, 4, 1, 0])\n    >>> q.array_form[1] # the hard way\n    2\n    >>> q(1) # the easy way\n    2\n    >>> {i: q(i) for i in range(q.size)} # showing the bijection\n    {0: 5, 1: 2, 2: 3, 3: 4, 4: 1, 5: 0}\n\n    The full cyclic form (including singletons) can be obtained:\n\n    >>> p.full_cyclic_form\n    [[0, 1], [2], [3]]\n\n    Any permutation can be factored into transpositions of pairs of elements:\n\n    >>> Permutation([[1, 2], [3, 4, 5]]).transpositions()\n    [(1, 2), (3, 5), (3, 4)]\n    >>> Permutation.rmul(*[Permutation([ti], size=6) for ti in _]).cyclic_form\n    [[1, 2], [3, 4, 5]]\n\n    The number of permutations on a set of n elements is given by n! and is\n    called the cardinality.\n\n    >>> p.size\n    4\n    >>> p.cardinality\n    24\n\n    A given permutation has a rank among all the possible permutations of the\n    same elements, but what that rank is depends on how the permutations are\n    enumerated. (There are a number of different methods of doing so.) The\n    lexicographic rank is given by the rank method and this rank is used to\n    increment a permutation with addition/subtraction:\n\n    >>> p.rank()\n    6\n    >>> p + 1\n    Permutation([1, 0, 3, 2])\n    >>> p.next_lex()\n    Permutation([1, 0, 3, 2])\n    >>> _.rank()\n    7\n    >>> p.unrank_lex(p.size, rank=7)\n    Permutation([1, 0, 3, 2])\n\n    The product of two permutations p and q is defined as their composition as\n    functions, (p*q)(i) = q(p(i)) [6]_.\n\n    >>> p = Permutation([1, 0, 2, 3])\n    >>> q = Permutation([2, 3, 1, 0])\n    >>> list(q*p)\n    [2, 3, 0, 1]\n    >>> list(p*q)\n    [3, 2, 1, 0]\n    >>> [q(p(i)) for i in range(p.size)]\n    [3, 2, 1, 0]\n\n    The permutation can be 'applied' to any list-like object, not only\n    Permutations:\n\n    >>> p(['zero', 'one', 'four', 'two'])\n    ['one', 'zero', 'four', 'two']\n    >>> p('zo42')\n    ['o', 'z', '4', '2']\n\n    If you have a list of arbitrary elements, the corresponding permutation\n    can be found with the from_sequence method:\n\n    >>> Permutation.from_sequence('SymPy')\n    Permutation([1, 3, 2, 0, 4])\n\n    See Also\n    ========\n\n    Cycle\n\n    References\n    ==========\n\n    .. [1] Skiena, S. 'Permutations.' 1.1 in Implementing Discrete Mathematics\n           Combinatorics and Graph Theory with Mathematica.  Reading, MA:\n           Addison-Wesley, pp. 3-16, 1990.\n\n    .. [2] Knuth, D. E. The Art of Computer Programming, Vol. 4: Combinatorial\n           Algorithms, 1st ed. Reading, MA: Addison-Wesley, 2011.\n\n    .. [3] Wendy Myrvold and Frank Ruskey. 2001. Ranking and unranking\n           permutations in linear time. Inf. Process. Lett. 79, 6 (September 2001),\n           281-284. DOI=10.1016/S0020-0190(01)00141-7\n\n    .. [4] D. L. Kreher, D. R. Stinson 'Combinatorial Algorithms'\n           CRC Press, 1999\n\n    .. [5] Graham, R. L.; Knuth, D. E.; and Patashnik, O.\n           Concrete Mathematics: A Foundation for Computer Science, 2nd ed.\n           Reading, MA: Addison-Wesley, 1994.\n\n    .. [6] https://en.wikipedia.org/wiki/Permutation#Product_and_inverse\n\n    .. [7] https://en.wikipedia.org/wiki/Lehmer_code\n\n    \"\"\"",
                "filename": "sympy/combinatorics/permutations.py",
                "start_index": 12014,
                "end_index": 23226,
                "start_line": 20,
                "end_line": 3007,
                "max_line": 3024,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.6",
                "sha": ""
            },
            {
                "code": "from __future__ import print_function, division\n\nimport itertools\n\nfrom sympy.core import S\nfrom sympy.core.containers import Tuple\nfrom sympy.core.function import _coeff_isneg\nfrom sympy.core.mul import Mul\nfrom sympy.core.numbers import Rational\nfrom sympy.core.power import Pow\nfrom sympy.core.symbol import Symbol\nfrom sympy.core.sympify import SympifyError\nfrom sympy.printing.conventions import requires_partial\nfrom sympy.printing.precedence import PRECEDENCE, precedence, precedence_traditional\nfrom sympy.printing.printer import Printer\nfrom sympy.printing.str import sstr\nfrom sympy.utilities import default_sort_key\nfrom sympy.utilities.iterables import has_variety\nfrom sympy.utilities.exceptions import SymPyDeprecationWarning\n\nfrom sympy.printing.pretty.stringpict import prettyForm, stringPict\nfrom sympy.printing.pretty.pretty_symbology import xstr, hobj, vobj, xobj, \\\n    xsym, pretty_symbol, pretty_atom, pretty_use_unicode, greek_unicode, U, \\\n    pretty_try_use_unicode,  annotated\n\n# rename for usage from outside\npprint_use_unicode = pretty_use_unicode\npprint_try_use_unicode = pretty_try_use_unicode",
                "filename": "sympy/printing/pretty/pretty.py",
                "start_index": 0,
                "end_index": 1123,
                "start_line": 1,
                "end_line": 28,
                "max_line": 2718,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.6",
                "sha": ""
            },
            {
                "code": "from sympy.combinatorics.permutations import Permutation, Cycle\nfrom sympy.combinatorics.prufer import Prufer\nfrom sympy.combinatorics.generators import cyclic, alternating, symmetric, dihedral\nfrom sympy.combinatorics.subsets import Subset\nfrom sympy.combinatorics.partitions import (Partition, IntegerPartition,\n    RGS_rank, RGS_unrank, RGS_enum)\nfrom sympy.combinatorics.polyhedron import (Polyhedron, tetrahedron, cube,\n    octahedron, dodecahedron, icosahedron)\nfrom sympy.combinatorics.perm_groups import PermutationGroup, Coset, SymmetricPermutationGroup\nfrom sympy.combinatorics.group_constructs import DirectProduct\nfrom sympy.combinatorics.graycode import GrayCode\nfrom sympy.combinatorics.named_groups import (SymmetricGroup, DihedralGroup,\n    CyclicGroup, AlternatingGroup, AbelianGroup, RubikGroup)\nfrom sympy.combinatorics.pc_groups import PolycyclicGroup, Collector\n\n__all__ = [\n    'Permutation', 'Cycle',\n\n    'Prufer',\n\n    'cyclic', 'alternating', 'symmetric', 'dihedral',\n\n    'Subset',\n\n    'Partition', 'IntegerPartition', 'RGS_rank', 'RGS_unrank', 'RGS_enum',\n\n    'Polyhedron', 'tetrahedron', 'cube', 'octahedron', 'dodecahedron',\n    'icosahedron',\n\n    'PermutationGroup', 'Coset', 'SymmetricPermutationGroup',\n\n    'DirectProduct',\n\n    'GrayCode',\n\n    'SymmetricGroup', 'DihedralGroup', 'CyclicGroup', 'AlternatingGroup',\n    'AbelianGroup', 'RubikGroup',\n\n    'PolycyclicGroup', 'Collector',\n]",
                "filename": "sympy/combinatorics/__init__.py",
                "start_index": 0,
                "end_index": 1425,
                "start_line": 1,
                "end_line": 40,
                "max_line": 40,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.6",
                "sha": ""
            },
            {
                "code": "import sys\n    from sympy.printing.printer import Printer\n\n    if pretty_print:\n        if pretty_printer is not None:\n            stringify_func = pretty_printer\n        else:\n            from sympy.printing import pretty as stringify_func\n    else:\n        if str_printer is not None:\n            stringify_func = str_printer\n        else:\n            from sympy.printing import sstrrepr as stringify_func\n\n    # Even if ip is not passed, double check that not in IPython shell\n    in_ipython = False\n    if ip is None:\n        try:\n            ip = get_ipython()\n        except NameError:\n            pass\n        else:\n            in_ipython = (ip is not None)\n\n    if ip and not in_ipython:\n        in_ipython = _is_ipython(ip)\n\n    if in_ipython and pretty_print:\n        try:\n            import IPython\n            # IPython 1.0 deprecates the frontend module, so we import directly\n            # from the terminal module to prevent a deprecation message from being\n            # shown.\n            if V(IPython.__version__) >= '1.0':\n                from IPython.terminal.interactiveshell import TerminalInteractiveShell\n            else:\n                from IPython.frontend.terminal.interactiveshell import TerminalInteractiveShell\n            from code import InteractiveConsole\n        except ImportError:\n            pass\n        else:\n            # This will be True if we are in the qtconsole or notebook\n            if not isinstance(ip, (InteractiveConsole, TerminalInteractiveShell)) \\\n                    and 'ipython-console' not in ''.join(sys.argv):\n                if use_unicode is None:\n                    debug(\"init_printing: Setting use_unicode to True\")\n                    use_unicode = True\n                if use_latex is None:\n                    debug(\"init_printing: Setting use_latex to True\")\n                    use_latex = True\n\n    if not NO_GLOBAL and not no_global:\n        Printer.set_global_settings(order=order, use_unicode=use_unicode,\n                                    wrap_line=wrap_line, num_columns=num_columns)\n    else:\n        _stringify_func = stringify_func\n\n        if pretty_print:\n            stringify_func = lambda expr, **settings: \\\n                             _stringify_func(expr, order=order,\n                                             use_unicode=use_unicode,\n                                             wrap_line=wrap_line,\n                                             num_columns=num_columns,\n                                             **settings)\n        else:\n            stringify_func = \\\n                lambda expr, **settings: _stringify_func(\n                    expr, order=order, **settings)",
                "filename": "sympy/interactive/printing.py",
                "start_index": 19385,
                "end_index": 22064,
                "start_line": 3,
                "end_line": 559,
                "max_line": 571,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.6",
                "sha": ""
            },
            {
                "code": "\"\"\"Printing subsystem driver\n\nSymPy's printing system works the following way: Any expression can be\npassed to a designated Printer who then is responsible to return an\nadequate representation of that expression.\n\n**The basic concept is the following:**\n  1. Let the object print itself if it knows how.\n  2. Take the best fitting method defined in the printer.\n  3. As fall-back use the emptyPrinter method for the printer.\n\nWhich Method is Responsible for Printing?\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe whole printing process is started by calling ``.doprint(expr)`` on the printer\nwhich you want to use. This method looks for an appropriate method which can\nprint the given expression in the given style that the printer defines.\nWhile looking for the method, it follows these steps:\n\n1. **Let the object print itself if it knows how.**\n\n    The printer looks for a specific method in every object. The name of that method\n    depends on the specific printer and is defined under ``Printer.printmethod``.\n    For example, StrPrinter calls ``_sympystr`` and LatexPrinter calls ``_latex``.\n    Look at the documentation of the printer that you want to use.\n    The name of the method is specified there.\n\n    This was the original way of doing printing in sympy. Every class had\n    its own latex, mathml, str and repr methods, but it turned out that it\n    is hard to produce a high quality printer, if all the methods are spread\n    out that far. Therefore all printing code was combined into the different\n    printers, which works great for built-in sympy objects, but not that\n    good for user defined classes where it is inconvenient to patch the\n    printers.\n\n2. **Take the best fitting method defined in the printer.**\n\n    The printer loops through expr classes (class + its bases), and tries\n    to dispatch the work to ``_print_<EXPR_CLASS>``\n\n    e.g., suppose we have the following class hierarchy::\n\n            Basic\n            |\n            Atom\n            |\n            Number\n            |\n        Rational\n\n    then, for ``expr=Rational(...)``, the Printer will try\n    to call printer methods in the order as shown in the figure below::\n\n        p._print(expr)\n        |\n        |-- p._print_Rational(expr)\n        |\n        |-- p._print_Number(expr)\n        |\n        |-- p._print_Atom(expr)\n        |\n        `-- p._print_Basic(expr)\n\n    if ``._print_Rational`` method exists in the printer, then it is called,\n    and the result is returned back. Otherwise, the printer tries to call\n    ``._print_Number`` and so on.\n\n3. **As a fall-back use the emptyPrinter method for the printer.**\n\n    As fall-back ``self.emptyPrinter`` will be called with the expression. If\n    not defined in the Printer subclass this will be the same as ``str(expr)``.\n\nExample of Custom Printer\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. _printer_example:\n\nIn the example below, we have a printer which prints the derivative of a function\nin a shorter form.\n\n.. code-block:: python\n\n    from sympy import Symbol\n    from sympy.printing.latex import LatexPrinter, print_latex\n    from sympy.core.function import UndefinedFunction, Function\n\n\n    class MyLatexPrinter(LatexPrinter):\n        \\\"",
                "filename": "sympy/printing/printer.py",
                "start_index": 0,
                "end_index": 3194,
                "start_line": 1,
                "end_line": 110,
                "max_line": 308,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.6",
                "sha": ""
            },
            {
                "code": "from sympy.utilities.exceptions import SymPyDeprecationWarning\n\nSymPyDeprecationWarning(\n    feature=\"Import sympy.utilities.quality_unicode\",\n    useinstead=\"Import from sympy.testing.quality_unicode\",\n    issue=18095,\n    deprecated_since_version=\"1.6\").warn()\n\nfrom sympy.testing.quality_unicode import *  # noqa:F401",
                "filename": "sympy/utilities/quality_unicode.py",
                "start_index": 0,
                "end_index": 320,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.6",
                "sha": ""
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "sympy/printing/pretty/pretty.py": [
                {
                    "chunk": {
                        "code": "def _print_Cycle(self, dc):\n        from sympy.combinatorics.permutations import Permutation, Cycle\n        # for Empty Cycle\n        if dc == Cycle():\n            cyc = stringPict('')\n            return prettyForm(*cyc.parens())\n\n        dc_list = Permutation(dc.list()).cyclic_form\n        # for Identity Cycle\n        if dc_list == []:\n            cyc = self._print(dc.size - 1)\n            return prettyForm(*cyc.parens())\n\n        cyc = stringPict('')\n        for i in dc_list:\n            l = self._print(str(tuple(i)).replace(',', ''))\n            cyc = prettyForm(*cyc.right(l))\n        return cyc\n\n    def _print_Permutation(self, expr):\n        from sympy.combinatorics.permutations import Permutation, Cycle\n\n        perm_cyclic = Permutation.print_cyclic\n        if perm_cyclic is not None:\n            SymPyDeprecationWarning(\n                feature=\"Permutation.print_cyclic = {}\".format(perm_cyclic),\n                useinstead=\"init_printing(perm_cyclic={})\"\n                .format(perm_cyclic),\n                issue=15201,\n                deprecated_since_version=\"1.6\").warn()\n        else:\n            perm_cyclic = self._settings.get(\"perm_cyclic\", True)\n\n        if perm_cyclic:\n            return self._print_Cycle(Cycle(expr))\n\n        lower = expr.array_form\n        upper = list(range(len(lower)))\n\n        result = stringPict('')\n        first = True\n        for u, l in zip(upper, lower):\n            s1 = self._print(u)\n            s2 = self._print(l)\n            col = prettyForm(*s1.below(s2))\n            if first:\n                first = False\n            else:\n                col = prettyForm(*col.left(\" \"))\n            result = prettyForm(*result.right(col))\n        return prettyForm(*result.parens())",
                        "filename": "sympy/printing/pretty/pretty.py",
                        "start_index": 12535,
                        "end_index": 14276,
                        "start_line": 372,
                        "end_line": 422,
                        "max_line": 2718,
                        "git_instance": "github",
                        "repo_name": "testbed/sympy__sympy__1.6",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the deprecated Permutation.print_cyclic flag and its usage in the pretty printer, which needs to be removed and handled by the printer settings."
                }
            ],
            "sympy/printing/latex.py": [
                {
                    "chunk": {
                        "code": "def _print_Cycle(self, expr):\n        from sympy.combinatorics.permutations import Permutation\n        if expr.size == 0:\n            return r\"\\left( \\right)\"\n        expr = Permutation(expr)\n        expr_perm = expr.cyclic_form\n        siz = expr.size\n        if expr.array_form[-1] == siz - 1:\n            expr_perm = expr_perm + [[siz - 1]]\n        term_tex = ''\n        for i in expr_perm:\n            term_tex += str(i).replace(',', r\"\\;\")\n        term_tex = term_tex.replace('[', r\"\\left( \")\n        term_tex = term_tex.replace(']', r\"\\right)\")\n        return term_tex\n\n    def _print_Permutation(self, expr):\n        from sympy.combinatorics.permutations import Permutation\n        from sympy.utilities.exceptions import SymPyDeprecationWarning\n\n        perm_cyclic = Permutation.print_cyclic\n        if perm_cyclic is not None:\n            SymPyDeprecationWarning(\n                feature=\"Permutation.print_cyclic = {}\".format(perm_cyclic),\n                useinstead=\"init_printing(perm_cyclic={})\"\n                .format(perm_cyclic),\n                issue=15201,\n                deprecated_since_version=\"1.6\").warn()\n        else:\n            perm_cyclic = self._settings.get(\"perm_cyclic\", True)\n\n        if perm_cyclic:\n            return self._print_Cycle(expr)\n\n        if expr.size == 0:\n            return r\"\\left( \\right)\"\n\n        lower = [self._print(arg) for arg in expr.array_form]\n        upper = [self._print(arg) for arg in range(len(lower))]\n\n        row1 = \" & \".join(upper)\n        row2 = \" & \".join(lower)\n        mat = r\" \\\\ \".join((row1, row2))\n        return r\"\\begin{pmatrix} %s \\end{pmatrix}\" % mat\n\n\n    def _print_AppliedPermutation(self, expr):\n        perm, var = expr.args\n        return r\"\\sigma_{%s}(%s)\" % (self._print(perm), self._print(var))\n\n    def _print_Float(self, expr):\n        # Based off of that in StrPrinter\n        dps = prec_to_dps(expr._prec)\n        strip = False if self._settings['full_prec'] else True\n        low = self._settings[\"min\"] if \"min\" in self._settings else None\n        high = self._settings[\"max\"] if \"max\" in self._settings else None\n        str_real = mlib.to_str(expr._mpf_, dps, strip_zeros=strip, min_fixed=low, max_fixed=high)\n\n        # Must always have a mul symbol (as 2.5 10^{20} just looks odd)\n        # thus we use the number separator\n        separator = self._settings['mul_symbol_latex_numbers']\n\n        if 'e' in str_real:\n            (mant, exp) = str_real.split('e')\n\n            if exp[0] == '+':\n                exp = exp[1:]\n            if self._settings['decimal_separator'] == 'comma':\n                mant = mant.replace('.','{,}')\n\n            return r\"%s%s10^{%s}\" % (mant, separator, exp)\n        elif str_real == \"+inf\":\n            return r\"\\infty\"\n        elif str_real == \"-inf\":\n            return r\"- \\infty\"\n        else:\n            if self._settings['decimal_separator'] == 'comma':\n                str_real = str_real.replace('.','{,}')\n            return str_real",
                        "filename": "sympy/printing/latex.py",
                        "start_index": 12209,
                        "end_index": 15191,
                        "start_line": 370,
                        "end_line": 448,
                        "max_line": 2941,
                        "git_instance": "github",
                        "repo_name": "testbed/sympy__sympy__1.6",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet also contains the deprecated Permutation.print_cyclic flag and its usage in the LaTeX printer, which needs to be removed and handled by the printer settings."
                }
            ],
            "sympy/combinatorics/permutations.py": [
                {
                    "chunk": {
                        "code": "\"\"\"\n    A permutation, alternatively known as an 'arrangement number' or 'ordering'\n    is an arrangement of the elements of an ordered list into a one-to-one\n    mapping with itself. The permutation of a given arrangement is given by\n    indicating the positions of the elements after re-arrangement [2]_. For\n    example, if one started with elements [x, y, a, b] (in that order) and\n    they were reordered as [x, y, b, a] then the permutation would be\n    [0, 1, 3, 2]. Notice that (in SymPy) the first element is always referred\n    to as 0 and the permutation uses the indices of the elements in the\n    original ordering, not the elements (a, b, etc...) themselves.\n\n    >>> from sympy.combinatorics import Permutation\n    >>> from sympy.interactive import init_printing\n    >>> init_printing(perm_cyclic=False, pretty_print=False)\n\n    Permutations Notation\n    =====================\n\n    Permutations are commonly represented in disjoint cycle or array forms.\n\n    Array Notation and 2-line Form\n    ------------------------------------\n\n    In the 2-line form, the elements and their final positions are shown\n    as a matrix with 2 rows:\n\n    [0    1    2     ... n-1]\n    [p(0) p(1) p(2)  ... p(n-1)]\n\n    Since the first line is always range(n), where n is the size of p,\n    it is sufficient to represent the permutation by the second line,\n    referred to as the \"array form\" of the permutation. This is entered\n    in brackets as the argument to the Permutation class:\n\n    >>> p = Permutation([0, 2, 1]); p\n    Permutation([0, 2, 1])\n\n    Given i in range(p.size), the permutation maps i to i^p\n\n    >>> [i^p for i in range(p.size)]\n    [0, 2, 1]\n\n    The composite of two permutations p*q means first apply p, then q, so\n    i^(p*q) = (i^p)^q which is i^p^q according to Python precedence rules:\n\n    >>> q = Permutation([2, 1, 0])\n    >>> [i^p^q for i in range(3)]\n    [2, 0, 1]\n    >>> [i^(p*q) for i in range(3)]\n    [2, 0, 1]\n\n    One can use also the notation p(i) = i^p, but then the composition\n    rule is (p*q)(i) = q(p(i)), not p(q(i)):\n\n    >>> [(p*q)(i) for i in range(p.size)]\n    [2, 0, 1]\n    >>> [q(p(i)) for i in range(p.size)]\n    [2, 0, 1]\n    >>> [p(q(i)) for i in range(p.size)]\n    [1, 2, 0]\n\n    Disjoint Cycle Notation\n    -----------------------\n\n    In disjoint cycle notation, only the elements that have shifted are\n    indicated. In the above case, the 2 and 1 switched places. This can\n    be entered in two ways:\n\n    >>> Permutation(1, 2) == Permutation([[1, 2]]) == p\n    True\n\n    Only the relative ordering of elements in a cycle matter:\n\n    >>> Permutation(1,2,3) == Permutation(2,3,1) == Permutation(3,1,2)\n    True\n\n    The disjoint cycle notation is convenient when representing\n    permutations that have several cycles in them:\n\n    >>> Permutation(1, 2)(3, 5) == Permutation([[1, 2], [3, 5]])\n    True\n\n    It also provides some economy in entry when computing products of\n    permutations that are written in disjoint cycle notation:\n\n    >>> Permutation(1, 2)(1, 3)(2, 3)\n    Permutation([0, 3, 2, 1])\n    >>> _ == Permutation([[1, 2]])*Permutation([[1, 3]])*Permutation([[2, 3]])\n    True\n\n        Caution: when the cycles have common elements\n        between them then the order in which the\n        permutations are applied matters. The\n        convention is that the permutations are\n        applied from *right to left*. In the following, the\n        transposition of elements 2 and 3 is followed\n        by the transposition of elements 1 and 2:\n\n        >>> Permutation(1, 2)(2, 3) == Permutation([(1, 2), (2, 3)])\n        True\n        >>> Permutation(1, 2)(2, 3).list()\n        [0, 3, 1, 2]\n\n        If the first and second elements had been\n        swapped first, followed by the swapping of the second\n        and third, the result would have been [0, 2, 3, 1].\n        If, for some reason, you want to apply the cycles\n        in the order they are entered, you can simply reverse\n        the order of cycles:\n\n        >>> Permutation([(1, 2), (2, 3)][::-1]).list()\n        [0, 2, 3, 1]\n\n    Entering a singleton in a permutation is a way to indicate the size of the\n    permutation. The ``size`` keyword can also be used.\n\n    Array-form entry:\n\n    >>> Permutation([[1, 2], [9]])\n    Permutation([0, 2, 1], size=10)\n    >>> Permutation([[1, 2]], size=10)\n    Permutation([0, 2, 1], size=10)\n\n    Cyclic-form entry:\n\n    >>> Permutation(1, 2, size=10)\n    Permutation([0, 2, 1], size=10)\n    >>> Permutation(9)(1, 2)\n    Permutation([0, 2, 1], size=10)\n\n    Caution: no singleton containing an element larger than the largest\n    in any previous cycle can be entered. This is an important difference\n    in how Permutation and Cycle handle the __call__ syntax. A singleton\n    argument at the start of a Permutation performs instantiation of the\n    Permutation and is permitted:\n\n    >>> Permutation(5)\n    Permutation([], size=6)\n\n    A singleton entered after instantiation is a call to the permutation\n    -- a function call -- and if the argument is out of range it will\n    trigger an error. For this reason, it is better to start the cycle\n    with the singleton:\n\n    The following fails because there is no element 3:\n\n    >>> Permutation(1, 2)(3)\n    Traceback (most recent call last):\n    ...\n    IndexError: list index out of range\n\n    This is ok: only the call to an out of range singleton is prohibited;\n    otherwise the permutation autosizes:\n\n    >>> Permutation(3)(1, 2)\n    Permutation([0, 2, 1, 3])\n    >>> Permutation(1, 2)(3, 4) == Permutation(3, 4)(1, 2)\n    True\n\n\n    Equality testing\n    ----------------\n\n    The array forms must be the same in order for permutations to be equal:\n\n    >>> Permutation([1, 0, 2, 3]) == Permutation([1, 0])\n    False\n\n\n    Identity Permutation\n    --------------------\n\n    The identity permutation is a permutation in which no element is out of\n    place. It can be entered in a variety of ways. All the following create\n    an identity permutation of size 4:\n\n    >>> I = Permutation([0, 1, 2, 3])\n    >>> all(p == I for p in [\n    ... Permutation(3),\n    ... Permutation(range(4)),\n    ... Permutation([], size=4),\n    ... Permutation(size=4)])\n    True\n\n    Watch out for entering the range *inside* a set of brackets (which is\n    cycle notation):\n\n    >>> I == Permutation([range(4)])\n    False\n\n\n    Permutation Printing\n    ====================\n\n    There are a few things to note about how Permutations are printed.\n\n    1) If you prefer one form (array or cycle) over another, you can set\n    ``init_printing`` with the ``perm_cyclic`` flag.\n\n    >>> from sympy import init_printing\n    >>> p = Permutation(1, 2)(4, 5)(3, 4)\n    >>> p\n    Permutation([0, 2, 1, 4, 5, 3])\n\n    >>> init_printing(perm_cyclic=True, pretty_print=False)\n    >>> p\n    (1 2)(3 4 5)\n\n    2) Regardless of the setting, a list of elements in the array for cyclic\n    form can be obtained and either of those can be copied and supplied as\n    the argument to Permutation:\n\n    >>> p.array_form\n    [0, 2, 1, 4, 5, 3]\n    >>> p.cyclic_form\n    [[1, 2], [3, 4, 5]]\n    >>> Permutation(_) == p\n    True\n\n    3) Printing is economical in that as little as possible is printed while\n    retaining all information about the size of the permutation:\n\n    >>> init_printing(perm_cyclic=False, pretty_print=False)\n    >>> Permutation([1, 0, 2, 3])\n    Permutation([1, 0, 2, 3])\n    >>> Permutation([1, 0, 2, 3], size=20)\n    Permutation([1, 0], size=20)\n    >>> Permutation([1, 0, 2, 4, 3, 5, 6], size=20)\n    Permutation([1, 0, 2, 4, 3], size=20)\n\n    >>> p = Permutation([1, 0, 2, 3])\n    >>> init_printing(perm_cyclic=True, pretty_print=False)\n    >>> p\n    (3)(0 1)\n    >>> init_printing(perm_cyclic=False, pretty_print=False)\n\n    The 2 was not printed but it is still there as can be seen with the\n    array_form and size methods:\n\n    >>> p.array_form\n    [1, 0, 2, 3]\n    >>> p.size\n    4\n\n    Short introduction to other methods\n    ===================================\n\n    The permutation can act as a bijective function, telling what element is\n    located at a given position\n\n    >>> q = Permutation([5, 2, 3, 4, 1, 0])\n    >>> q.array_form[1] # the hard way\n    2\n    >>> q(1) # the easy way\n    2\n    >>> {i: q(i) for i in range(q.size)} # showing the bijection\n    {0: 5, 1: 2, 2: 3, 3: 4, 4: 1, 5: 0}\n\n    The full cyclic form (including singletons) can be obtained:\n\n    >>> p.full_cyclic_form\n    [[0, 1], [2], [3]]\n\n    Any permutation can be factored into transpositions of pairs of elements:\n\n    >>> Permutation([[1, 2], [3, 4, 5]]).transpositions()\n    [(1, 2), (3, 5), (3, 4)]\n    >>> Permutation.rmul(*[Permutation([ti], size=6) for ti in _]).cyclic_form\n    [[1, 2], [3, 4, 5]]\n\n    The number of permutations on a set of n elements is given by n! and is\n    called the cardinality.\n\n    >>> p.size\n    4\n    >>> p.cardinality\n    24\n\n    A given permutation has a rank among all the possible permutations of the\n    same elements, but what that rank is depends on how the permutations are\n    enumerated. (There are a number of different methods of doing so.) The\n    lexicographic rank is given by the rank method and this rank is used to\n    increment a permutation with addition/subtraction:\n\n    >>> p.rank()\n    6\n    >>> p + 1\n    Permutation([1, 0, 3, 2])\n    >>> p.next_lex()\n    Permutation([1, 0, 3, 2])\n    >>> _.rank()\n    7\n    >>> p.unrank_lex(p.size, rank=7)\n    Permutation([1, 0, 3, 2])\n\n    The product of two permutations p and q is defined as their composition as\n    functions, (p*q)(i) = q(p(i)) [6]_.\n\n    >>> p = Permutation([1, 0, 2, 3])\n    >>> q = Permutation([2, 3, 1, 0])\n    >>> list(q*p)\n    [2, 3, 0, 1]\n    >>> list(p*q)\n    [3, 2, 1, 0]\n    >>> [q(p(i)) for i in range(p.size)]\n    [3, 2, 1, 0]\n\n    The permutation can be 'applied' to any list-like object, not only\n    Permutations:\n\n    >>> p(['zero', 'one', 'four', 'two'])\n    ['one', 'zero', 'four', 'two']\n    >>> p('zo42')\n    ['o', 'z', '4', '2']\n\n    If you have a list of arbitrary elements, the corresponding permutation\n    can be found with the from_sequence method:\n\n    >>> Permutation.from_sequence('SymPy')\n    Permutation([1, 3, 2, 0, 4])\n\n    See Also\n    ========\n\n    Cycle\n\n    References\n    ==========\n\n    .. [1] Skiena, S. 'Permutations.' 1.1 in Implementing Discrete Mathematics\n           Combinatorics and Graph Theory with Mathematica.  Reading, MA:\n           Addison-Wesley, pp. 3-16, 1990.\n\n    .. [2] Knuth, D. E. The Art of Computer Programming, Vol. 4: Combinatorial\n           Algorithms, 1st ed. Reading, MA: Addison-Wesley, 2011.\n\n    .. [3] Wendy Myrvold and Frank Ruskey. 2001. Ranking and unranking\n           permutations in linear time. Inf. Process. Lett. 79, 6 (September 2001),\n           281-284. DOI=10.1016/S0020-0190(01)00141-7\n\n    .. [4] D. L. Kreher, D. R. Stinson 'Combinatorial Algorithms'\n           CRC Press, 1999\n\n    .. [5] Graham, R. L.; Knuth, D. E.; and Patashnik, O.\n           Concrete Mathematics: A Foundation for Computer Science, 2nd ed.\n           Reading, MA: Addison-Wesley, 1994.\n\n    .. [6] https://en.wikipedia.org/wiki/Permutation#Product_and_inverse\n\n    .. [7] https://en.wikipedia.org/wiki/Lehmer_code\n\n    \"\"\"",
                        "filename": "sympy/combinatorics/permutations.py",
                        "start_index": 12014,
                        "end_index": 23226,
                        "start_line": 20,
                        "end_line": 3007,
                        "max_line": 3024,
                        "git_instance": "github",
                        "repo_name": "testbed/sympy__sympy__1.6",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet from permutations.py is relevant because it contains the documentation for the Permutation class, which will need to be updated to reflect the deprecation of the print_cyclic flag and the new way of setting the printing behavior."
                }
            ],
            "sympy/interactive/printing.py": [
                {
                    "chunk": {
                        "code": "import sys\n    from sympy.printing.printer import Printer\n\n    if pretty_print:\n        if pretty_printer is not None:\n            stringify_func = pretty_printer\n        else:\n            from sympy.printing import pretty as stringify_func\n    else:\n        if str_printer is not None:\n            stringify_func = str_printer\n        else:\n            from sympy.printing import sstrrepr as stringify_func\n\n    # Even if ip is not passed, double check that not in IPython shell\n    in_ipython = False\n    if ip is None:\n        try:\n            ip = get_ipython()\n        except NameError:\n            pass\n        else:\n            in_ipython = (ip is not None)\n\n    if ip and not in_ipython:\n        in_ipython = _is_ipython(ip)\n\n    if in_ipython and pretty_print:\n        try:\n            import IPython\n            # IPython 1.0 deprecates the frontend module, so we import directly\n            # from the terminal module to prevent a deprecation message from being\n            # shown.\n            if V(IPython.__version__) >= '1.0':\n                from IPython.terminal.interactiveshell import TerminalInteractiveShell\n            else:\n                from IPython.frontend.terminal.interactiveshell import TerminalInteractiveShell\n            from code import InteractiveConsole\n        except ImportError:\n            pass\n        else:\n            # This will be True if we are in the qtconsole or notebook\n            if not isinstance(ip, (InteractiveConsole, TerminalInteractiveShell)) \\\n                    and 'ipython-console' not in ''.join(sys.argv):\n                if use_unicode is None:\n                    debug(\"init_printing: Setting use_unicode to True\")\n                    use_unicode = True\n                if use_latex is None:\n                    debug(\"init_printing: Setting use_latex to True\")\n                    use_latex = True\n\n    if not NO_GLOBAL and not no_global:\n        Printer.set_global_settings(order=order, use_unicode=use_unicode,\n                                    wrap_line=wrap_line, num_columns=num_columns)\n    else:\n        _stringify_func = stringify_func\n\n        if pretty_print:\n            stringify_func = lambda expr, **settings: \\\n                             _stringify_func(expr, order=order,\n                                             use_unicode=use_unicode,\n                                             wrap_line=wrap_line,\n                                             num_columns=num_columns,\n                                             **settings)\n        else:\n            stringify_func = \\\n                lambda expr, **settings: _stringify_func(\n                    expr, order=order, **settings)",
                        "filename": "sympy/interactive/printing.py",
                        "start_index": 19385,
                        "end_index": 22064,
                        "start_line": 3,
                        "end_line": 559,
                        "max_line": 571,
                        "git_instance": "github",
                        "repo_name": "testbed/sympy__sympy__1.6",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet from interactive/printing.py is relevant because it deals with the initialization of printing settings, which is where the new flag for controlling permutation printing should be handled."
                }
            ],
            "sympy/utilities/exceptions.py": [
                {
                    "chunk": {
                        "code": "class SymPyDeprecationWarning(DeprecationWarning):",
                        "filename": "sympy/utilities/exceptions.py",
                        "start_index": 160,
                        "end_index": 210,
                        "start_line": 12,
                        "end_line": 12,
                        "max_line": 188,
                        "git_instance": "github",
                        "repo_name": "testbed/sympy__sympy__1.6",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet defines the SymPyDeprecationWarning class, which will be used to issue a deprecation warning for the Permutation.print_cyclic flag."
                }
            ]
        },
        "solution_task": "To implement the feature described in the ticket, follow these steps:\n\n- Deprecate the `Permutation.print_cyclic` flag.\n  - Update the `Permutation` class to issue a `SymPyDeprecationWarning` when `print_cyclic` is accessed or modified.\n  - Ensure that the warning message includes the version in which `print_cyclic` will be removed and suggests using the printer settings instead.\n\n- Modify the printers to accept a `perm_cyclic` flag.\n  - Update `pretty.py` and `latex.py` to check for a `perm_cyclic` setting in their respective `_print_Permutation` methods.\n  - Use the `perm_cyclic` setting from the printer's `_settings` dictionary to determine how to print the permutation.\n\n- Update the default behavior of the `str` printer.\n  - Ensure that the `str` printer prints a Python-valid representation of the permutation by default.\n\n- Update the documentation and tests.\n  - Find and update all instances in the documentation that refer to `Permutation.print_cyclic`.\n  - Update doctests and unit tests to use the new `perm_cyclic` printer setting instead of modifying the `Permutation` object.\n\nHere is a high-level overview of the changes in pseudo-code:\n\n```python\n# In sympy/combinatorics/permutations.py\nclass Permutation:\n    # ...\n    @property\n    def print_cyclic(self):\n        SymPyDeprecationWarning(\n            feature=\"Permutation.print_cyclic\",\n            useinstead=\"the perm_cyclic flag in the printer settings\",\n            issue=15201,\n            deprecated_since_version=\"1.6\"\n        ).warn()\n        return self._print_cyclic\n\n    @print_cyclic.setter\n    def print_cyclic(self, value):\n        SymPyDeprecationWarning(\n            feature=\"Permutation.print_cyclic\",\n            useinstead=\"the perm_cyclic flag in the printer settings\",\n            issue=15201,\n            deprecated_since_version=\"1.6\"\n        ).warn()\n        self._print_cyclic = value\n\n# In sympy/printing/pretty/pretty.py and sympy/printing/latex.py\n# Modify the _print_Permutation methods\ndef _print_Permutation(self, expr):\n    # ...\n    perm_cyclic = self._settings.get(\"perm_cyclic\", True)\n    if perm_cyclic:\n        return self._print_Cycle(expr)\n    else:\n        # existing logic for non-cyclic printing\n\n# In sympy/interactive/printing.py\n# Update init_printing to handle the perm_cyclic flag\ndef init_printing(perm_cyclic=None, **kwargs):\n    # ...\n    if perm_cyclic is not None:\n        Printer.set_global_settings(perm_cyclic=perm_cyclic)\n    # ...\n```\n\nRemember to update the documentation and tests accordingly.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant suggestions that can directly lead to the successful implementation or improvement of the requested feature.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable plan for deprecating the Permutation.print_cyclic flag and integrating the printing behavior into the SymPy printers, as requested in the PROMPT. It includes steps for issuing a deprecation warning, modifying the printers to accept a new flag, updating the default behavior of the str printer, and updating documentation and tests. The RESPONSE also provides pseudo-code to illustrate the changes, which is directly applicable to the codebase. The inclusion of specific code snippets to check in the SymPy repository adds to the utility of the RESPONSE by guiding the developer to the relevant sections of the code that need to be modified.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711746179.626698,
        "result": "To implement the feature described in the ticket, follow these steps:\n\n- Deprecate the `Permutation.print_cyclic` flag.\n  - Update the `Permutation` class to issue a `SymPyDeprecationWarning` when `print_cyclic` is accessed or modified.\n  - Ensure that the warning message includes the version in which `print_cyclic` will be removed and suggests using the printer settings instead.\n\n- Modify the printers to accept a `perm_cyclic` flag.\n  - Update `pretty.py` and `latex.py` to check for a `perm_cyclic` setting in their respective `_print_Permutation` methods.\n  - Use the `perm_cyclic` setting from the printer's `_settings` dictionary to determine how to print the permutation.\n\n- Update the default behavior of the `str` printer.\n  - Ensure that the `str` printer prints a Python-valid representation of the permutation by default.\n\n- Update the documentation and tests.\n  - Find and update all instances in the documentation that refer to `Permutation.print_cyclic`.\n  - Update doctests and unit tests to use the new `perm_cyclic` printer setting instead of modifying the `Permutation` object.\n\nHere is a high-level overview of the changes in pseudo-code:\n\n```python\n# In sympy/combinatorics/permutations.py\nclass Permutation:\n    # ...\n    @property\n    def print_cyclic(self):\n        SymPyDeprecationWarning(\n            feature=\"Permutation.print_cyclic\",\n            useinstead=\"the perm_cyclic flag in the printer settings\",\n            issue=15201,\n            deprecated_since_version=\"1.6\"\n        ).warn()\n        return self._print_cyclic\n\n    @print_cyclic.setter\n    def print_cyclic(self, value):\n        SymPyDeprecationWarning(\n            feature=\"Permutation.print_cyclic\",\n            useinstead=\"the perm_cyclic flag in the printer settings\",\n            issue=15201,\n            deprecated_since_version=\"1.6\"\n        ).warn()\n        self._print_cyclic = value\n\n# In sympy/printing/pretty/pretty.py and sympy/printing/latex.py\n# Modify the _print_Permutation methods\ndef _print_Permutation(self, expr):\n    # ...\n    perm_cyclic = self._settings.get(\"perm_cyclic\", True)\n    if perm_cyclic:\n        return self._print_Cycle(expr)\n    else:\n        # existing logic for non-cyclic printing\n\n# In sympy/interactive/printing.py\n# Update init_printing to handle the perm_cyclic flag\ndef init_printing(perm_cyclic=None, **kwargs):\n    # ...\n    if perm_cyclic is not None:\n        Printer.set_global_settings(perm_cyclic=perm_cyclic)\n    # ...\n```\n\nRemember to update the documentation and tests accordingly.\n\n### Code snippets to check\n\n-  \u2192 [sympy](https://github.com/testbed/sympy__sympy__1.6/tree//sympy) \u2192 [printing](https://github.com/testbed/sympy__sympy__1.6/tree//sympy/printing) \u2192 [pretty](https://github.com/testbed/sympy__sympy__1.6/tree//sympy/printing/pretty)- [Lines 372 - 422](https://github.com/testbed/sympy__sympy__1.6/blob//sympy/printing/pretty/pretty.py#L372-L422)\n\n This snippet contains the deprecated Permutation.print_cyclic flag and its usage in the pretty printer, which needs to be removed and handled by the printer settings.\n-  \u2192 [sympy](https://github.com/testbed/sympy__sympy__1.6/tree//sympy) \u2192 [printing](https://github.com/testbed/sympy__sympy__1.6/tree//sympy/printing)- [Lines 370 - 448](https://github.com/testbed/sympy__sympy__1.6/blob//sympy/printing/latex.py#L370-L448)\n\n This snippet also contains the deprecated Permutation.print_cyclic flag and its usage in the LaTeX printer, which needs to be removed and handled by the printer settings.\n-  \u2192 [sympy](https://github.com/testbed/sympy__sympy__1.6/tree//sympy) \u2192 [combinatorics](https://github.com/testbed/sympy__sympy__1.6/tree//sympy/combinatorics)- [Lines 20 - 3007](https://github.com/testbed/sympy__sympy__1.6/blob//sympy/combinatorics/permutations.py#L20-L3007)\n\n This snippet from permutations.py is relevant because it contains the documentation for the Permutation class, which will need to be updated to reflect the deprecation of the print_cyclic flag and the new way of setting the printing behavior.\n-  \u2192 [sympy](https://github.com/testbed/sympy__sympy__1.6/tree//sympy) \u2192 [interactive](https://github.com/testbed/sympy__sympy__1.6/tree//sympy/interactive)- [Lines 3 - 559](https://github.com/testbed/sympy__sympy__1.6/blob//sympy/interactive/printing.py#L3-L559)\n\n This snippet from interactive/printing.py is relevant because it deals with the initialization of printing settings, which is where the new flag for controlling permutation printing should be handled.\n-  \u2192 [sympy](https://github.com/testbed/sympy__sympy__1.6/tree//sympy) \u2192 [utilities](https://github.com/testbed/sympy__sympy__1.6/tree//sympy/utilities)- [Lines 12 - 12](https://github.com/testbed/sympy__sympy__1.6/blob//sympy/utilities/exceptions.py#L12-L12)\n\n This snippet defines the SymPyDeprecationWarning class, which will be used to issue a deprecation warning for the Permutation.print_cyclic flag."
    }
}