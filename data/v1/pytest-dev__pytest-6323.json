{
    "id": "pytest-dev__pytest-6323",
    "repo_name": "testbed/pytest-dev__pytest__5.3",
    "task_id": 7982662923497909182,
    "title": "disallow absolute and non-normalized paths for mktemp",
    "body": "followup to #4202\r\n\r\nthis is an potential issue and attack vector, absolute paths are no tmpdir and escaping paths aren't either,\r\njust normalizing would also break the world\r\n\r\nso we should only ever accept normalized relative paths for it\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pytest-dev__pytest__5.3.git",
    "requested_commit": "",
    "mayil_response": "- Add the following validation logic to the `mktemp` function in Python:\n\n```python\nimport os\n\ndef mktemp(prefix=\"\", suffix=\"\", dir=None):\n    if dir is not None:\n        if os.path.isabs(dir):\n            raise ValueError(\"Absolute paths are not allowed.\")\n        if not is_normalized_relative_path(dir):\n            raise ValueError(\"Only normalized relative paths are allowed.\")\n    # Rest of the implementation...\n```\n\n- Implement the `is_normalized_relative_path` function:\n\n```python\nimport os\n\ndef is_normalized_relative_path(path):\n    return path == os.path.normpath(path) and not path.startswith(os.pardir)\n```\n\n- Ensure that the `mktemp` function uses the `is_normalized_relative_path` function to validate the `dir` parameter before proceeding with the creation of the temporary file.\n\n### Code snippets to check\n\n-  \u2192 [scripts](https://github.com/testbed/pytest-dev__pytest__5.3/tree//scripts)- [Lines 49 - 133](https://github.com/testbed/pytest-dev__pytest__5.3/blob//scripts/prepare-release-pr.py#L49-L133)\n\n This script handles the release process and may include logic for path normalization which is relevant to the issue of disallowing absolute and non-normalized paths. \n\n\n   - [Lines 1 - 46](https://github.com/testbed/pytest-dev__pytest__5.3/blob//scripts/prepare-release-pr.py#L1-L46)\n\n This script is related to the release process and may contain references to path handling which could be relevant to ensuring only normalized relative paths are accepted.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.000184,
        "snippet_processor": 0.0388,
        "issue_star_creation": 0.01779,
        "issue_star_solver": 0.02901,
        "bouncer": 0.01906
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711735160.356055,
        "relevant_snippets": [
            {
                "code": "-   repo: local\n    hooks:\n    -   id: rst\n        name: rst\n        entry: rst-lint --encoding utf-8\n        files: ^(RELEASING.rst|README.rst|TIDELIFT.rst)$\n        language: python\n        additional_dependencies: [pygments, restructuredtext_lint]\n    -   id: changelogs-rst\n        name: changelog filenames\n        language: fail\n        entry: 'changelog files must be named ####.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst'\n        exclude: changelog/(\\d+\\.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst|README.rst|_template.rst)\n        files: ^changelog/\n    -   id: py-deprecated\n        name: py library is deprecated\n        language: pygrep\n        entry: >\n            (?x)\\bpy\\.(\n                _code\\.|\n                builtin\\.|\n                code\\.|\n                io\\.|\n                path\\.local\\.sysfind|\n                process\\.|\n                std\\.|\n                error\\.|\n                xml\\.\n            )\n        types: [python]\n    -   id: py-path-deprecated\n        name: py.path usage is deprecated\n        exclude: docs|src/_pytest/deprecated.py|testing/deprecated_test.py|src/_pytest/legacypath.py\n        language: pygrep\n        entry: \\bpy\\.path\\.local\n        types: [python]",
                "filename": ".pre-commit-config.yaml",
                "start_index": 2166,
                "end_index": 3442,
                "start_line": 73,
                "end_line": 108,
                "max_line": 108,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            },
            {
                "code": "# shim for pylib going away\n# if pylib is installed this file will get skipped\n# (`py/__init__.py` has higher precedence)\nimport sys\n\nimport _pytest._py.error as error\nimport _pytest._py.path as path\n\nsys.modules[\"py.error\"] = error\nsys.modules[\"py.path\"] = path",
                "filename": "src/py.py",
                "start_index": 0,
                "end_index": 262,
                "start_line": 1,
                "end_line": 10,
                "max_line": 10,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            },
            {
                "code": "# reference: https://docs.codecov.io/docs/codecovyml-reference\ncoverage:\n  status:\n    patch: true\n    project: false\ncomment: false",
                "filename": "codecov.yml",
                "start_index": 0,
                "end_index": 132,
                "start_line": 1,
                "end_line": 6,
                "max_line": 6,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            },
            {
                "code": "version: 2\nupdates:\n- package-ecosystem: pip\n  directory: \"/testing/plugins_integration\"\n  schedule:\n    interval: weekly\n    time: \"03:00\"\n  open-pull-requests-limit: 10\n  allow:\n  - dependency-type: direct\n  - dependency-type: indirect\n- package-ecosystem: github-actions\n  directory: /\n  schedule:\n    interval: weekly\n    time: \"03:00\"\n  open-pull-requests-limit: 10",
                "filename": ".github/dependabot.yml",
                "start_index": 0,
                "end_index": 370,
                "start_line": 1,
                "end_line": 17,
                "max_line": 17,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            },
            {
                "code": "blank_issues_enabled: false\ncontact_links:\n  - name: \u2753 Support Question\n    url: https://github.com/pytest-dev/pytest/discussions\n    about: Use GitHub's new Discussions feature for questions",
                "filename": ".github/ISSUE_TEMPLATE/config.yml",
                "start_index": 0,
                "end_index": 191,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            },
            {
                "code": "def prepare_release_pr(\n    base_branch: str, is_major: bool, token: str, prerelease: str\n) -> None:\n    print()\n    print(f\"Processing release for branch {Fore.CYAN}{base_branch}\")\n\n    check_call([\"git\", \"checkout\", f\"origin/{base_branch}\"])\n\n    changelog = Path(\"changelog\")\n\n    features = list(changelog.glob(\"*.feature.rst\"))\n    breaking = list(changelog.glob(\"*.breaking.rst\"))\n    is_feature_release = bool(features or breaking)\n\n    try:\n        version = find_next_version(\n            base_branch, is_major, is_feature_release, prerelease\n        )\n    except InvalidFeatureRelease as e:\n        print(f\"{Fore.RED}{e}\")\n        raise SystemExit(1)\n\n    print(f\"Version: {Fore.CYAN}{version}\")\n\n    release_branch = f\"release-{version}\"\n\n    run(\n        [\"git\", \"config\", \"user.name\", \"pytest bot\"],\n        check=True,\n    )\n    run(\n        [\"git\", \"config\", \"user.email\", \"pytestbot@gmail.com\"],\n        check=True,\n    )\n\n    run(\n        [\"git\", \"checkout\", \"-b\", release_branch, f\"origin/{base_branch}\"],\n        check=True,\n    )\n\n    print(f\"Branch {Fore.CYAN}{release_branch}{Fore.RESET} created.\")\n\n    if is_major:\n        template_name = \"release.major.rst\"\n    elif prerelease:\n        template_name = \"release.pre.rst\"\n    elif is_feature_release:\n        template_name = \"release.minor.rst\"\n    else:\n        template_name = \"release.patch.rst\"\n\n    # important to use tox here because we have changed branches, so dependencies\n    # might have changed as well\n    cmdline = [\n        \"tox\",\n        \"-e\",\n        \"release\",\n        \"--\",\n        version,\n        template_name,\n        release_branch,  # doc_version\n        \"--skip-check-links\",\n    ]\n    print(\"Running\", \" \".join(cmdline))\n    run(\n        cmdline,\n        check=True,\n    )\n\n    oauth_url = f\"https://{token}:x-oauth-basic@github.com/{SLUG}.git\"\n    run(\n        [\"git\", \"push\", oauth_url, f\"HEAD:{release_branch}\", \"--force\"],\n        check=True,\n    )\n    print(f\"Branch {Fore.CYAN}{release_branch}{Fore.RESET} pushed.\")\n\n    body = PR_BODY.format(version=version)\n    repo = login(token)\n    pr = repo.create_pull(\n        f\"Prepare release {version}\",\n        base=base_branch,\n        head=release_branch,\n        body=body,\n    )\n    print(f\"Pull request {Fore.CYAN}{pr.url}{Fore.RESET} created.\")",
                "filename": "scripts/prepare-release-pr.py",
                "start_index": 1284,
                "end_index": 3587,
                "start_line": 49,
                "end_line": 133,
                "max_line": 174,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            },
            {
                "code": "repos:",
                "filename": ".pre-commit-config.yaml",
                "start_index": 0,
                "end_index": 6,
                "start_line": 1,
                "end_line": 1,
                "max_line": 108,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            },
            {
                "code": "\"\"\"\nThis script is part of the pytest release process which is triggered manually in the Actions\ntab of the repository.\n\nThe user will need to enter the base branch to start the release from (for example\n``6.1.x`` or ``main``) and if it should be a major release.\n\nThe appropriate version will be obtained based on the given branch automatically.\n\nAfter that, it will create a release using the `release` tox environment, and push a new PR.\n\n**Token**: currently the token from the GitHub Actions is used, pushed with\n`pytest bot <pytestbot@gmail.com>` commit author.\n\"\"\"\nimport argparse\nimport re\nfrom pathlib import Path\nfrom subprocess import check_call\nfrom subprocess import check_output\nfrom subprocess import run\n\nfrom colorama import Fore\nfrom colorama import init\nfrom github3.repos import Repository\n\n\nclass InvalidFeatureRelease(Exception):\n    pass\n\n\nSLUG = \"pytest-dev/pytest\"\n\nPR_BODY = \"\"\"\\\nCreated automatically from manual trigger.\n\nOnce all builds pass and it has been **approved** by one or more maintainers, the build\ncan be released by pushing a tag `{version}` to this repository.\n\"\"\"\n\n\ndef login(token: str) -> Repository:\n    import github3\n\n    github = github3.login(token=token)\n    owner, repo = SLUG.split(\"/\")\n    return github.repository(owner, repo)",
                "filename": "scripts/prepare-release-pr.py",
                "start_index": 0,
                "end_index": 1281,
                "start_line": 1,
                "end_line": 46,
                "max_line": 174,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            },
            {
                "code": "rtd:\n  project: pytest",
                "filename": ".github/config.yml",
                "start_index": 0,
                "end_index": 22,
                "start_line": 1,
                "end_line": 2,
                "max_line": 2,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            },
            {
                "code": "import sys\nfrom subprocess import call\n\n\ndef main():\n    \"\"\"\n    Platform agnostic wrapper script for towncrier.\n    Fixes the issue (#7251) where windows users are unable to natively run tox -e docs to build pytest docs.\n    \"\"\"\n    with open(\n        \"doc/en/_changelog_towncrier_draft.rst\", \"w\", encoding=\"utf-8\"\n    ) as draft_file:\n        return call((\"towncrier\", \"--draft\"), stdout=draft_file)\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
                "filename": "scripts/towncrier-draft-to-file.py",
                "start_index": 0,
                "end_index": 451,
                "start_line": 1,
                "end_line": 17,
                "max_line": 17,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "scripts/prepare-release-pr.py": [
                {
                    "chunk": {
                        "code": "def prepare_release_pr(\n    base_branch: str, is_major: bool, token: str, prerelease: str\n) -> None:\n    print()\n    print(f\"Processing release for branch {Fore.CYAN}{base_branch}\")\n\n    check_call([\"git\", \"checkout\", f\"origin/{base_branch}\"])\n\n    changelog = Path(\"changelog\")\n\n    features = list(changelog.glob(\"*.feature.rst\"))\n    breaking = list(changelog.glob(\"*.breaking.rst\"))\n    is_feature_release = bool(features or breaking)\n\n    try:\n        version = find_next_version(\n            base_branch, is_major, is_feature_release, prerelease\n        )\n    except InvalidFeatureRelease as e:\n        print(f\"{Fore.RED}{e}\")\n        raise SystemExit(1)\n\n    print(f\"Version: {Fore.CYAN}{version}\")\n\n    release_branch = f\"release-{version}\"\n\n    run(\n        [\"git\", \"config\", \"user.name\", \"pytest bot\"],\n        check=True,\n    )\n    run(\n        [\"git\", \"config\", \"user.email\", \"pytestbot@gmail.com\"],\n        check=True,\n    )\n\n    run(\n        [\"git\", \"checkout\", \"-b\", release_branch, f\"origin/{base_branch}\"],\n        check=True,\n    )\n\n    print(f\"Branch {Fore.CYAN}{release_branch}{Fore.RESET} created.\")\n\n    if is_major:\n        template_name = \"release.major.rst\"\n    elif prerelease:\n        template_name = \"release.pre.rst\"\n    elif is_feature_release:\n        template_name = \"release.minor.rst\"\n    else:\n        template_name = \"release.patch.rst\"\n\n    # important to use tox here because we have changed branches, so dependencies\n    # might have changed as well\n    cmdline = [\n        \"tox\",\n        \"-e\",\n        \"release\",\n        \"--\",\n        version,\n        template_name,\n        release_branch,  # doc_version\n        \"--skip-check-links\",\n    ]\n    print(\"Running\", \" \".join(cmdline))\n    run(\n        cmdline,\n        check=True,\n    )\n\n    oauth_url = f\"https://{token}:x-oauth-basic@github.com/{SLUG}.git\"\n    run(\n        [\"git\", \"push\", oauth_url, f\"HEAD:{release_branch}\", \"--force\"],\n        check=True,\n    )\n    print(f\"Branch {Fore.CYAN}{release_branch}{Fore.RESET} pushed.\")\n\n    body = PR_BODY.format(version=version)\n    repo = login(token)\n    pr = repo.create_pull(\n        f\"Prepare release {version}\",\n        base=base_branch,\n        head=release_branch,\n        body=body,\n    )\n    print(f\"Pull request {Fore.CYAN}{pr.url}{Fore.RESET} created.\")",
                        "filename": "scripts/prepare-release-pr.py",
                        "start_index": 1284,
                        "end_index": 3587,
                        "start_line": 49,
                        "end_line": 133,
                        "max_line": 174,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__5.3",
                        "sha": ""
                    },
                    "reason_for_relevance": "This script handles the release process and may include logic for path normalization which is relevant to the issue of disallowing absolute and non-normalized paths."
                },
                {
                    "chunk": {
                        "code": "\"\"\"\nThis script is part of the pytest release process which is triggered manually in the Actions\ntab of the repository.\n\nThe user will need to enter the base branch to start the release from (for example\n``6.1.x`` or ``main``) and if it should be a major release.\n\nThe appropriate version will be obtained based on the given branch automatically.\n\nAfter that, it will create a release using the `release` tox environment, and push a new PR.\n\n**Token**: currently the token from the GitHub Actions is used, pushed with\n`pytest bot <pytestbot@gmail.com>` commit author.\n\"\"\"\nimport argparse\nimport re\nfrom pathlib import Path\nfrom subprocess import check_call\nfrom subprocess import check_output\nfrom subprocess import run\n\nfrom colorama import Fore\nfrom colorama import init\nfrom github3.repos import Repository\n\n\nclass InvalidFeatureRelease(Exception):\n    pass\n\n\nSLUG = \"pytest-dev/pytest\"\n\nPR_BODY = \"\"\"\\\nCreated automatically from manual trigger.\n\nOnce all builds pass and it has been **approved** by one or more maintainers, the build\ncan be released by pushing a tag `{version}` to this repository.\n\"\"\"\n\n\ndef login(token: str) -> Repository:\n    import github3\n\n    github = github3.login(token=token)\n    owner, repo = SLUG.split(\"/\")\n    return github.repository(owner, repo)",
                        "filename": "scripts/prepare-release-pr.py",
                        "start_index": 0,
                        "end_index": 1281,
                        "start_line": 1,
                        "end_line": 46,
                        "max_line": 174,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__5.3",
                        "sha": ""
                    },
                    "reason_for_relevance": "This script is related to the release process and may contain references to path handling which could be relevant to ensuring only normalized relative paths are accepted."
                }
            ]
        },
        "solution_task": "- Add the following validation logic to the `mktemp` function in Python:\n\n```python\nimport os\n\ndef mktemp(prefix=\"\", suffix=\"\", dir=None):\n    if dir is not None:\n        if os.path.isabs(dir):\n            raise ValueError(\"Absolute paths are not allowed.\")\n        if not is_normalized_relative_path(dir):\n            raise ValueError(\"Only normalized relative paths are allowed.\")\n    # Rest of the implementation...\n```\n\n- Implement the `is_normalized_relative_path` function:\n\n```python\nimport os\n\ndef is_normalized_relative_path(path):\n    return path == os.path.normpath(path) and not path.startswith(os.pardir)\n```\n\n- Ensure that the `mktemp` function uses the `is_normalized_relative_path` function to validate the `dir` parameter before proceeding with the creation of the temporary file.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable solution to the problem described in the PROMPT by suggesting the addition of validation logic to the `mktemp` function to disallow absolute and non-normalized paths. It includes a Python code snippet that raises a ValueError if the `dir` parameter is an absolute path or not a normalized relative path, which directly addresses the issue. The RESPONSE also suggests implementing a helper function `is_normalized_relative_path` to check for normalized relative paths, which is a practical approach to the problem. Furthermore, the RESPONSE recommends ensuring that the `mktemp` function uses this helper function for validation, which is a necessary step for the solution to be effective. Lastly, the RESPONSE provides links to specific code snippets in a GitHub repository that may contain relevant path handling logic, which could be useful for the developers to review and ensure consistency with the new validation logic.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711735221.69683,
        "result": "- Add the following validation logic to the `mktemp` function in Python:\n\n```python\nimport os\n\ndef mktemp(prefix=\"\", suffix=\"\", dir=None):\n    if dir is not None:\n        if os.path.isabs(dir):\n            raise ValueError(\"Absolute paths are not allowed.\")\n        if not is_normalized_relative_path(dir):\n            raise ValueError(\"Only normalized relative paths are allowed.\")\n    # Rest of the implementation...\n```\n\n- Implement the `is_normalized_relative_path` function:\n\n```python\nimport os\n\ndef is_normalized_relative_path(path):\n    return path == os.path.normpath(path) and not path.startswith(os.pardir)\n```\n\n- Ensure that the `mktemp` function uses the `is_normalized_relative_path` function to validate the `dir` parameter before proceeding with the creation of the temporary file.\n\n### Code snippets to check\n\n-  \u2192 [scripts](https://github.com/testbed/pytest-dev__pytest__5.3/tree//scripts)- [Lines 49 - 133](https://github.com/testbed/pytest-dev__pytest__5.3/blob//scripts/prepare-release-pr.py#L49-L133)\n\n This script handles the release process and may include logic for path normalization which is relevant to the issue of disallowing absolute and non-normalized paths. \n\n\n   - [Lines 1 - 46](https://github.com/testbed/pytest-dev__pytest__5.3/blob//scripts/prepare-release-pr.py#L1-L46)\n\n This script is related to the release process and may contain references to path handling which could be relevant to ensuring only normalized relative paths are accepted."
    }
}