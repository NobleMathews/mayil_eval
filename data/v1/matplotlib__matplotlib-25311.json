{
    "id": "matplotlib__matplotlib-25311",
    "repo_name": "testbed/matplotlib__matplotlib__3.7",
    "task_id": 2928827768563493041,
    "title": "[Bug]: Unable to pickle figure with draggable legend",
    "body": "### Bug summary\r\n\r\nI am unable to pickle figure with draggable legend. Same error comes for draggable annotations.\r\n\r\n\r\n\r\n\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport pickle\r\n\r\nfig = plt.figure()\r\nax = fig.add_subplot(111)\r\n\r\ntime=[0,1,2,3,4]\r\nspeed=[40,43,45,47,48]\r\n\r\nax.plot(time,speed,label=\"speed\")\r\n\r\nleg=ax.legend()\r\nleg.set_draggable(True) #pickling works after removing this line \r\n\r\npickle.dumps(fig)\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n`TypeError: cannot pickle 'FigureCanvasQTAgg' object`\r\n\r\n### Expected outcome\r\n\r\nPickling successful\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nWindows 10\r\n\r\n### Matplotlib Version\r\n\r\n3.7.0\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n3.10\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/matplotlib__matplotlib__3.7.git",
    "requested_commit": "",
    "mayil_response": "- Remove the `leg.set_draggable(True)` call before pickling, as the draggable legend involves GUI elements that cannot be pickled.\n- If you need to store the state of the draggable legend, manually save the relevant information before pickling and restore it after unpickling.\n- Alternatively, consider using a different serialization method for GUI elements, such as saving the figure to a file using `fig.savefig` instead of using `pickle`.\n\n### Code snippets to check\n\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib)- [Lines 1 - 1536](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//lib/matplotlib/offsetbox.py#L1-L1536)\n\n This code defines the draggable behavior of artists in Matplotlib, which is directly related to the issue of pickling a figure with a draggable legend.\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib) \u2192 [backends](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib/backends)- [Lines 157 - 157](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//lib/matplotlib/backends/backend_webagg_core.py#L157-L157)\n\n The issue mentions a 'FigureCanvasQTAgg' object, which is related to the WebAgg backend. This snippet is from the WebAgg backend file and may contain relevant information for the pickling issue.\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib) \u2192 [backends](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib/backends)- [Lines 1 - 20](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//lib/matplotlib/backends/backend_tkagg.py#L1-L20)\n\n The issue mentions a 'FigureCanvasQTAgg' object, and this snippet is from the TkAgg backend file, which may be relevant to the pickling issue since it involves the FigureCanvasAgg class.\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries) \u2192 [examples](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples) \u2192 [event_handling](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples/event_handling)- [Lines 1 - 50](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//galleries/examples/event_handling/legend_picking.py#L1-L50)\n\n This example demonstrates interactive legend picking, which is related to the draggable legend feature that is causing the pickling issue.\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries) \u2192 [examples](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples) \u2192 [userdemo](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples/userdemo)- [Lines 1 - 25](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//galleries/examples/userdemo/simple_legend01.py#L1-L25)\n\n This snippet shows the use of legends in Matplotlib, which is relevant to the issue since it involves a draggable legend.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.00026,
        "snippet_processor": 0.051089999999999997,
        "issue_star_creation": 0.03065,
        "issue_star_solver": 0.08149,
        "bouncer": 0.0324
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711696931.17256,
        "relevant_snippets": [
            {
                "code": "name: Bug Report\ndescription: Report a bug or issue with Matplotlib.\ntitle: \"[Bug]: \"\nbody:\n  - type: textarea\n    id: summary\n    attributes:\n      label: Bug summary\n      description:  Describe the bug in 1-2 short sentences\n      placeholder:\n      value:\n    validations:\n      required: true\n  - type: textarea\n    id: reproduction\n    attributes:\n      label: Code for reproduction\n      description: |\n        If possible, please provide a minimum self-contained example.\n      placeholder: Paste your code here. This field is automatically formatted as Python code.\n      render: python\n    validations:\n      required: true\n  - type: textarea\n    id: actual\n    attributes:\n      label: Actual outcome\n      description: |\n        Paste the output produced by the code provided above, e.g.\n        console output, images/videos produced by the code, any relevant screenshots/screencasts, etc.\n    validations:\n      required: true\n  - type: textarea\n    id: expected\n    attributes:\n      label: Expected outcome\n      description: Describe (or provide a visual example of) the expected outcome from the code snippet.\n    validations:\n      required: true\n  - type: textarea\n    id: details\n    attributes:\n      label: Additional information\n      description: |\n        - What are the conditions under which this bug happens? input parameters, edge cases, etc?\n        - Has this worked in earlier versions?\n        - Do you know why this bug is happening?\n        - Do you maybe even know a fix?\n  - type: input\n    id: operating-system\n    attributes:\n      label: Operating system\n      description: Windows, OS/X, Arch, Debian, Ubuntu, etc.\n  - type: input\n    id: matplotlib-version\n    attributes:\n      label: Matplotlib Version\n      description: \"From Python prompt: `import matplotlib; print(matplotlib.__version__)`\"\n    validations:\n      required: true\n  - type: input\n    id: matplotlib-backend\n    attributes:\n      label: Matplotlib Backend\n      description: \"From Python prompt: `import matplotlib; print(matplotlib.get_backend())`\"\n  - type: input\n    id: python-version\n    attributes:\n      label: Python version\n      description: \"In console: `python --version`\"\n  - type: input\n    id: jupyter-version\n    attributes:\n      label: Jupyter version\n      description: \"In console: `jupyter notebook --version` or `jupyter lab --version`\"\n  - type: dropdown\n    id: install\n    attributes:\n      label: Installation\n      description: How did you install matplotlib?\n      options:\n        - pip\n        - conda\n        - Linux package manager\n        - from source (.tar.gz)\n        - git checkout",
                "filename": ".github/ISSUE_TEMPLATE/bug_report.yml",
                "start_index": 0,
                "end_index": 2631,
                "start_line": 1,
                "end_line": 86,
                "max_line": 86,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": ""
            },
            {
                "code": "\"\"\"\n==============\nLegend picking\n==============\n\nEnable picking on the legend to toggle the original line on and off\n\n.. note::\n    This example exercises the interactive capabilities of Matplotlib, and this\n    will not appear in the static documentation. Please run this code on your\n    machine to see the interactivity.\n\n    You can copy and paste individual parts, or download the entire example\n    using the link at the bottom of the page.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nt = np.linspace(0, 1)\ny1 = 2 * np.sin(2*np.pi*t)\ny2 = 4 * np.sin(2*np.pi*2*t)\n\nfig, ax = plt.subplots()\nax.set_title('Click on legend line to toggle line on/off')\nline1, = ax.plot(t, y1, lw=2, label='1 Hz')\nline2, = ax.plot(t, y2, lw=2, label='2 Hz')\nleg = ax.legend(fancybox=True, shadow=True)\n\nlines = [line1, line2]\nlined = {}  # Will map legend lines to original lines.\nfor legline, origline in zip(leg.get_lines(), lines):\n    legline.set_picker(True)  # Enable picking on the legend line.\n    lined[legline] = origline\n\n\ndef on_pick(event):\n    # On the pick event, find the original line corresponding to the legend\n    # proxy line, and toggle its visibility.\n    legline = event.artist\n    origline = lined[legline]\n    visible = not origline.get_visible()\n    origline.set_visible(visible)\n    # Change the alpha on the line in the legend, so we can see what lines\n    # have been toggled.\n    legline.set_alpha(1.0 if visible else 0.2)\n    fig.canvas.draw()\n\nfig.canvas.mpl_connect('pick_event', on_pick)\nplt.show()",
                "filename": "galleries/examples/event_handling/legend_picking.py",
                "start_index": 0,
                "end_index": 1531,
                "start_line": 1,
                "end_line": 50,
                "max_line": 50,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": ""
            },
            {
                "code": "\"\"\"\n    Helper base class for a draggable artist (legend, offsetbox).\n\n    Derived classes must override the following methods::\n\n        def save_offset(self):\n            '''\n            Called when the object is picked for dragging; should save the\n            reference position of the artist.\n            '''\n\n        def update_offset(self, dx, dy):\n            '''\n            Called during the dragging; (*dx*, *dy*) is the pixel offset from\n            the point where the mouse drag started.\n            '''\n\n    Optionally, you may override the following method::\n\n        def finalize_offset(self):\n            '''Called when the mouse is released.'''\n\n    In the current implementation of `.DraggableLegend` and\n    `DraggableAnnotation`, `update_offset` places the artists in display\n    coordinates, and `finalize_offset` recalculates their position in axes\n    coordinate and set a relevant attribute.\n    \"\"\"\n\n    def __init__(self, ref_artist, use_blit=False):\n        self.ref_artist = ref_artist\n        if not ref_artist.pickable():\n            ref_artist.set_picker(True)\n        self.got_artist = False\n        self._use_blit = use_blit and self.canvas.supports_blit\n        callbacks = ref_artist.figure._canvas_callbacks\n        self._disconnectors = [\n            functools.partial(\n                callbacks.disconnect, callbacks._connect_picklable(name, func))\n            for name, func in [\n                (\"pick_event\", self.on_pick),\n                (\"button_release_event\", self.on_release),\n                (\"motion_notify_event\", self.on_motion),\n            ]\n        ]\n\n    # A property, not an attribute, to maintain picklability.\n    canvas = property(lambda self: self.ref_artist.figure.canvas)\n\n    cids = property(lambda self: [\n        disconnect.args[0] for disconnect in self._disconnectors[:2]])\n\n    def on_motion(self, evt):\n        if self._check_still_parented() and self.got_artist:\n            dx = evt.x - self.mouse_x\n            dy = evt.y - self.mouse_y\n            self.update_offset(dx, dy)\n            if self._use_blit:\n                self.canvas.restore_region(self.background)\n                self.ref_artist.draw(\n                    self.ref_artist.figure._get_renderer())\n                self.canvas.blit()\n            else:\n                self.canvas.draw()\n\n    def on_pick(self, evt):\n        if self._check_still_parented() and evt.artist == self.ref_artist:\n            self.mouse_x = evt.mouseevent.x\n            self.mouse_y = evt.mouseevent.y\n            self.got_artist = True\n            if self._use_blit:\n                self.ref_artist.set_animated(True)\n                self.canvas.draw()\n                self.background = \\\n                    self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)\n                self.ref_artist.draw(\n                    self.ref_artist.figure._get_renderer())\n                self.canvas.blit()\n            self.save_offset()",
                "filename": "lib/matplotlib/offsetbox.py",
                "start_index": 48967,
                "end_index": 51913,
                "start_line": 1,
                "end_line": 1536,
                "max_line": 1604,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": ""
            },
            {
                "code": "def close(fig: None | int | str | Figure | Literal[\"all\"] = None) -> None:\n    \"\"\"\n    Close a figure window.\n\n    Parameters\n    ----------\n    fig : None or int or str or `.Figure`\n        The figure to close. There are a number of ways to specify this:\n\n        - *None*: the current figure\n        - `.Figure`: the given `.Figure` instance\n        - ``int``: a figure number\n        - ``str``: a figure name\n        - 'all': all figures\n\n    \"\"\"\n    if fig is None:\n        manager = _pylab_helpers.Gcf.get_active()\n        if manager is None:\n            return\n        else:\n            _pylab_helpers.Gcf.destroy(manager)\n    elif fig == 'all':\n        _pylab_helpers.Gcf.destroy_all()\n    elif isinstance(fig, int):\n        _pylab_helpers.Gcf.destroy(fig)\n    elif hasattr(fig, 'int'):\n        # if we are dealing with a type UUID, we\n        # can use its integer representation\n        _pylab_helpers.Gcf.destroy(fig.int)\n    elif isinstance(fig, str):\n        all_labels = get_figlabels()\n        if fig in all_labels:\n            num = get_fignums()[all_labels.index(fig)]\n            _pylab_helpers.Gcf.destroy(num)\n    elif isinstance(fig, Figure):\n        _pylab_helpers.Gcf.destroy_fig(fig)\n    else:\n        raise TypeError(\"close() argument must be a Figure, an int, a string, \"\n                        \"or None, not %s\" % type(fig))\n\n\ndef clf() -> None:\n    \"\"\"Clear the current figure.\"\"\"\n    gcf().clear()\n\n\ndef draw() -> None:\n    \"\"\"\n    Redraw the current figure.\n\n    This is used to update a figure that has been altered, but not\n    automatically re-drawn.  If interactive mode is on (via `.ion()`), this\n    should be only rarely needed, but there may be ways to modify the state of\n    a figure without marking it as \"stale\".  Please report these cases as bugs.\n\n    This is equivalent to calling ``fig.canvas.draw_idle()``, where ``fig`` is\n    the current figure.\n\n    See Also\n    --------\n    .FigureCanvasBase.draw_idle\n    .FigureCanvasBase.draw\n    \"\"\"\n    gcf().canvas.draw_idle()\n\n\n@_copy_docstring_and_deprecators(Figure.savefig)\ndef savefig(*args, **kwargs) -> None:\n    fig = gcf()\n    # savefig default implementation has no return, so mypy is unhappy\n    # presumably this is here because subclasses can return?\n    res = fig.savefig(*args, **kwargs)  # type: ignore[func-returns-value]\n    fig.canvas.draw_idle()  # Need this if 'transparent=True', to reset colors.\n    return res\n\n\n## Putting things in figures ##\n\n\ndef figlegend(*args, **kwargs) -> Legend:\n    return gcf().legend(*args, **kwargs)\nif Figure.legend.__doc__:\n    figlegend.__doc__ = Figure.legend.__doc__ \\\n        .replace(\" legend(\", \" figlegend(\") \\\n        .replace(\"fig.legend(\", \"plt.figlegend(\") \\\n        .replace(\"ax.plot(\", \"plt.plot(\")\n\n\n## Axes ##",
                "filename": "lib/matplotlib/pyplot.py",
                "start_index": 36978,
                "end_index": 39748,
                "start_line": 1044,
                "end_line": 1133,
                "max_line": 4320,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": ""
            },
            {
                "code": "\"\"\"\n=============================================\nEmbedding in a web application server (Flask)\n=============================================\n\nWhen using Matplotlib in a web server it is strongly recommended to not use\npyplot (pyplot maintains references to the opened figures to make\n`~.matplotlib.pyplot.show` work, but this will cause memory leaks unless the\nfigures are properly closed).\n\nSince Matplotlib 3.1, one can directly create figures using the `.Figure`\nconstructor and save them to in-memory buffers.  In older versions, it was\nnecessary to explicitly instantiate an Agg canvas (see e.g.\n:doc:`/gallery/user_interfaces/canvasagg`).\n\nThe following example uses Flask_, but other frameworks work similarly:\n\n.. _Flask: https://flask.palletsprojects.com\n\n\"\"\"\n\nimport base64\nfrom io import BytesIO\n\nfrom flask import Flask\n\nfrom matplotlib.figure import Figure\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef hello():\n    # Generate the figure **without using pyplot**.\n    fig = Figure()\n    ax = fig.subplots()\n    ax.plot([1, 2])\n    # Save it to a temporary buffer.\n    buf = BytesIO()\n    fig.savefig(buf, format=\"png\")\n    # Embed the result in the html output.\n    data = base64.b64encode(buf.getbuffer()).decode(\"ascii\")\n    return f\"<img src='data:image/png;base64,{data}'/>\"\n\n# %%\n#\n# Since the above code is a Flask application, it should be run using the\n# `flask command-line tool <https://flask.palletsprojects.com/en/latest/cli/>`_\n# Assuming that the working directory contains this script:\n#\n# Unix-like systems\n#\n# .. code-block:: console\n#\n#  FLASK_APP=web_application_server_sgskip flask run\n#\n# Windows\n#\n# .. code-block:: console\n#\n#  set FLASK_APP=web_application_server_sgskip\n#  flask run\n#\n#\n# Clickable images for HTML\n# -------------------------\n#\n# Andrew Dalke of `Dalke Scientific <http://www.dalkescientific.com>`_\n# has written a nice `article\n# <http://www.dalkescientific.com/writings/diary/archive/2005/04/24/interactive_html.html>`_\n# on how to make html click maps with Matplotlib agg PNGs.  We would\n# also like to add this functionality to SVG.  If you are interested in\n# contributing to these efforts that would be great.",
                "filename": "galleries/examples/user_interfaces/web_application_server_sgskip.py",
                "start_index": 0,
                "end_index": 2170,
                "start_line": 1,
                "end_line": 73,
                "max_line": 73,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": ""
            },
            {
                "code": "\"\"\"\n===============\nSimple Legend01\n===============\n\n\"\"\"\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\n\nax = fig.add_subplot(211)\nax.plot([1, 2, 3], label=\"test1\")\nax.plot([3, 2, 1], label=\"test2\")\n# Place a legend above this subplot, expanding itself to\n# fully use the given bounding box.\nax.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc='lower left',\n           ncols=2, mode=\"expand\", borderaxespad=0.)\n\nax = fig.add_subplot(223)\nax.plot([1, 2, 3], label=\"test1\")\nax.plot([3, 2, 1], label=\"test2\")\n# Place a legend to the right of this smaller subplot.\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)\n\nplt.show()",
                "filename": "galleries/examples/userdemo/simple_legend01.py",
                "start_index": 0,
                "end_index": 648,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": ""
            },
            {
                "code": "class FigureCanvasWebAggCore(backend_agg.FigureCanvasAgg):",
                "filename": "lib/matplotlib/backends/backend_webagg_core.py",
                "start_index": 4678,
                "end_index": 4736,
                "start_line": 157,
                "end_line": 157,
                "max_line": 519,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": ""
            },
            {
                "code": "from . import _backend_tk\nfrom .backend_agg import FigureCanvasAgg\nfrom ._backend_tk import _BackendTk, FigureCanvasTk\nfrom ._backend_tk import (  # noqa: F401 # pylint: disable=W0611\n    FigureManagerTk, NavigationToolbar2Tk)\n\n\nclass FigureCanvasTkAgg(FigureCanvasAgg, FigureCanvasTk):\n    def draw(self):\n        super().draw()\n        self.blit()\n\n    def blit(self, bbox=None):\n        _backend_tk.blit(self._tkphoto, self.renderer.buffer_rgba(),\n                         (0, 1, 2, 3), bbox=bbox)\n\n\n@_BackendTk.export\nclass _BackendTkAgg(_BackendTk):\n    FigureCanvas = FigureCanvasTkAgg",
                "filename": "lib/matplotlib/backends/backend_tkagg.py",
                "start_index": 0,
                "end_index": 591,
                "start_line": 1,
                "end_line": 20,
                "max_line": 20,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": ""
            },
            {
                "code": "name: Feature Request\ndescription: Suggest something to add to Matplotlib!\ntitle: \"[ENH]: \"\nlabels: [New feature]\nbody:\n  - type: markdown\n    attributes:\n      value: |\n         Please search the [issues](https://github.com/matplotlib/matplotlib/issues) for relevant feature requests before creating a new feature request.\n  - type: textarea\n    id: problem\n    attributes:\n      label: Problem\n      description: Briefly describe the problem this feature will solve. (2-4 sentences)\n      placeholder: |\n        * I'm always frustrated when [...] because [...]\n        * I would like it if [...] happened when I [...] because [...]\n        * Here is a sample image of what I am asking for [...]\n    validations:\n      required: true\n  - type: textarea\n    id: solution\n    attributes:\n      label: Proposed solution\n      description: Describe a way to accomplish the goals of this feature request.",
                "filename": ".github/ISSUE_TEMPLATE/feature_request.yml",
                "start_index": 0,
                "end_index": 900,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": ""
            },
            {
                "code": "class FigureCanvasAgg(FigureCanvasBase):\n    # docstring inherited",
                "filename": "lib/matplotlib/backends/backend_agg.py",
                "start_index": 13858,
                "end_index": 13924,
                "start_line": 368,
                "end_line": 382,
                "max_line": 544,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.7",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "lib/matplotlib/offsetbox.py": [
                {
                    "chunk": {
                        "code": "\"\"\"\n    Helper base class for a draggable artist (legend, offsetbox).\n\n    Derived classes must override the following methods::\n\n        def save_offset(self):\n            '''\n            Called when the object is picked for dragging; should save the\n            reference position of the artist.\n            '''\n\n        def update_offset(self, dx, dy):\n            '''\n            Called during the dragging; (*dx*, *dy*) is the pixel offset from\n            the point where the mouse drag started.\n            '''\n\n    Optionally, you may override the following method::\n\n        def finalize_offset(self):\n            '''Called when the mouse is released.'''\n\n    In the current implementation of `.DraggableLegend` and\n    `DraggableAnnotation`, `update_offset` places the artists in display\n    coordinates, and `finalize_offset` recalculates their position in axes\n    coordinate and set a relevant attribute.\n    \"\"\"\n\n    def __init__(self, ref_artist, use_blit=False):\n        self.ref_artist = ref_artist\n        if not ref_artist.pickable():\n            ref_artist.set_picker(True)\n        self.got_artist = False\n        self._use_blit = use_blit and self.canvas.supports_blit\n        callbacks = ref_artist.figure._canvas_callbacks\n        self._disconnectors = [\n            functools.partial(\n                callbacks.disconnect, callbacks._connect_picklable(name, func))\n            for name, func in [\n                (\"pick_event\", self.on_pick),\n                (\"button_release_event\", self.on_release),\n                (\"motion_notify_event\", self.on_motion),\n            ]\n        ]\n\n    # A property, not an attribute, to maintain picklability.\n    canvas = property(lambda self: self.ref_artist.figure.canvas)\n\n    cids = property(lambda self: [\n        disconnect.args[0] for disconnect in self._disconnectors[:2]])\n\n    def on_motion(self, evt):\n        if self._check_still_parented() and self.got_artist:\n            dx = evt.x - self.mouse_x\n            dy = evt.y - self.mouse_y\n            self.update_offset(dx, dy)\n            if self._use_blit:\n                self.canvas.restore_region(self.background)\n                self.ref_artist.draw(\n                    self.ref_artist.figure._get_renderer())\n                self.canvas.blit()\n            else:\n                self.canvas.draw()\n\n    def on_pick(self, evt):\n        if self._check_still_parented() and evt.artist == self.ref_artist:\n            self.mouse_x = evt.mouseevent.x\n            self.mouse_y = evt.mouseevent.y\n            self.got_artist = True\n            if self._use_blit:\n                self.ref_artist.set_animated(True)\n                self.canvas.draw()\n                self.background = \\\n                    self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)\n                self.ref_artist.draw(\n                    self.ref_artist.figure._get_renderer())\n                self.canvas.blit()\n            self.save_offset()",
                        "filename": "lib/matplotlib/offsetbox.py",
                        "start_index": 48967,
                        "end_index": 51913,
                        "start_line": 1,
                        "end_line": 1536,
                        "max_line": 1604,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.7",
                        "sha": ""
                    },
                    "reason_for_relevance": "This code defines the draggable behavior of artists in Matplotlib, which is directly related to the issue of pickling a figure with a draggable legend."
                }
            ],
            "lib/matplotlib/backends/backend_webagg_core.py": [
                {
                    "chunk": {
                        "code": "class FigureCanvasWebAggCore(backend_agg.FigureCanvasAgg):",
                        "filename": "lib/matplotlib/backends/backend_webagg_core.py",
                        "start_index": 4678,
                        "end_index": 4736,
                        "start_line": 157,
                        "end_line": 157,
                        "max_line": 519,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.7",
                        "sha": ""
                    },
                    "reason_for_relevance": "The issue mentions a 'FigureCanvasQTAgg' object, which is related to the WebAgg backend. This snippet is from the WebAgg backend file and may contain relevant information for the pickling issue."
                }
            ],
            "lib/matplotlib/backends/backend_tkagg.py": [
                {
                    "chunk": {
                        "code": "from . import _backend_tk\nfrom .backend_agg import FigureCanvasAgg\nfrom ._backend_tk import _BackendTk, FigureCanvasTk\nfrom ._backend_tk import (  # noqa: F401 # pylint: disable=W0611\n    FigureManagerTk, NavigationToolbar2Tk)\n\n\nclass FigureCanvasTkAgg(FigureCanvasAgg, FigureCanvasTk):\n    def draw(self):\n        super().draw()\n        self.blit()\n\n    def blit(self, bbox=None):\n        _backend_tk.blit(self._tkphoto, self.renderer.buffer_rgba(),\n                         (0, 1, 2, 3), bbox=bbox)\n\n\n@_BackendTk.export\nclass _BackendTkAgg(_BackendTk):\n    FigureCanvas = FigureCanvasTkAgg",
                        "filename": "lib/matplotlib/backends/backend_tkagg.py",
                        "start_index": 0,
                        "end_index": 591,
                        "start_line": 1,
                        "end_line": 20,
                        "max_line": 20,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.7",
                        "sha": ""
                    },
                    "reason_for_relevance": "The issue mentions a 'FigureCanvasQTAgg' object, and this snippet is from the TkAgg backend file, which may be relevant to the pickling issue since it involves the FigureCanvasAgg class."
                }
            ],
            "galleries/examples/event_handling/legend_picking.py": [
                {
                    "chunk": {
                        "code": "\"\"\"\n==============\nLegend picking\n==============\n\nEnable picking on the legend to toggle the original line on and off\n\n.. note::\n    This example exercises the interactive capabilities of Matplotlib, and this\n    will not appear in the static documentation. Please run this code on your\n    machine to see the interactivity.\n\n    You can copy and paste individual parts, or download the entire example\n    using the link at the bottom of the page.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nt = np.linspace(0, 1)\ny1 = 2 * np.sin(2*np.pi*t)\ny2 = 4 * np.sin(2*np.pi*2*t)\n\nfig, ax = plt.subplots()\nax.set_title('Click on legend line to toggle line on/off')\nline1, = ax.plot(t, y1, lw=2, label='1 Hz')\nline2, = ax.plot(t, y2, lw=2, label='2 Hz')\nleg = ax.legend(fancybox=True, shadow=True)\n\nlines = [line1, line2]\nlined = {}  # Will map legend lines to original lines.\nfor legline, origline in zip(leg.get_lines(), lines):\n    legline.set_picker(True)  # Enable picking on the legend line.\n    lined[legline] = origline\n\n\ndef on_pick(event):\n    # On the pick event, find the original line corresponding to the legend\n    # proxy line, and toggle its visibility.\n    legline = event.artist\n    origline = lined[legline]\n    visible = not origline.get_visible()\n    origline.set_visible(visible)\n    # Change the alpha on the line in the legend, so we can see what lines\n    # have been toggled.\n    legline.set_alpha(1.0 if visible else 0.2)\n    fig.canvas.draw()\n\nfig.canvas.mpl_connect('pick_event', on_pick)\nplt.show()",
                        "filename": "galleries/examples/event_handling/legend_picking.py",
                        "start_index": 0,
                        "end_index": 1531,
                        "start_line": 1,
                        "end_line": 50,
                        "max_line": 50,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.7",
                        "sha": ""
                    },
                    "reason_for_relevance": "This example demonstrates interactive legend picking, which is related to the draggable legend feature that is causing the pickling issue."
                }
            ],
            "galleries/examples/userdemo/simple_legend01.py": [
                {
                    "chunk": {
                        "code": "\"\"\"\n===============\nSimple Legend01\n===============\n\n\"\"\"\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\n\nax = fig.add_subplot(211)\nax.plot([1, 2, 3], label=\"test1\")\nax.plot([3, 2, 1], label=\"test2\")\n# Place a legend above this subplot, expanding itself to\n# fully use the given bounding box.\nax.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc='lower left',\n           ncols=2, mode=\"expand\", borderaxespad=0.)\n\nax = fig.add_subplot(223)\nax.plot([1, 2, 3], label=\"test1\")\nax.plot([3, 2, 1], label=\"test2\")\n# Place a legend to the right of this smaller subplot.\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)\n\nplt.show()",
                        "filename": "galleries/examples/userdemo/simple_legend01.py",
                        "start_index": 0,
                        "end_index": 648,
                        "start_line": 1,
                        "end_line": 25,
                        "max_line": 25,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.7",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet shows the use of legends in Matplotlib, which is relevant to the issue since it involves a draggable legend."
                }
            ]
        },
        "solution_task": "- Remove the `leg.set_draggable(True)` call before pickling, as the draggable legend involves GUI elements that cannot be pickled.\n- If you need to store the state of the draggable legend, manually save the relevant information before pickling and restore it after unpickling.\n- Alternatively, consider using a different serialization method for GUI elements, such as saving the figure to a file using `fig.savefig` instead of using `pickle`.",
        "bouncer_response": {
            "score": 7,
            "criteria": "The RESPONSE must provide actionable, relevant guidance to more parts of the PROMPT's described issue to score higher.",
            "supporting_evidence": "The RESPONSE provides actionable advice by suggesting the removal of the 'leg.set_draggable(True)' line before pickling, which is directly related to the bug described in the PROMPT. It also offers an alternative solution by suggesting the manual saving of the draggable legend's state or using a different serialization method such as 'fig.savefig'. Additionally, the RESPONSE provides links to code snippets that could be relevant to understanding the underlying issue with pickling draggable elements in Matplotlib. However, the RESPONSE does not address the specific 'TypeError' mentioned in the PROMPT, nor does it provide a direct solution to pickle the figure with the draggable legend intact, which would be necessary for a score of 10.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711697033.286848,
        "result": "- Remove the `leg.set_draggable(True)` call before pickling, as the draggable legend involves GUI elements that cannot be pickled.\n- If you need to store the state of the draggable legend, manually save the relevant information before pickling and restore it after unpickling.\n- Alternatively, consider using a different serialization method for GUI elements, such as saving the figure to a file using `fig.savefig` instead of using `pickle`.\n\n### Code snippets to check\n\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib)- [Lines 1 - 1536](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//lib/matplotlib/offsetbox.py#L1-L1536)\n\n This code defines the draggable behavior of artists in Matplotlib, which is directly related to the issue of pickling a figure with a draggable legend.\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib) \u2192 [backends](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib/backends)- [Lines 157 - 157](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//lib/matplotlib/backends/backend_webagg_core.py#L157-L157)\n\n The issue mentions a 'FigureCanvasQTAgg' object, which is related to the WebAgg backend. This snippet is from the WebAgg backend file and may contain relevant information for the pickling issue.\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib) \u2192 [backends](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//lib/matplotlib/backends)- [Lines 1 - 20](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//lib/matplotlib/backends/backend_tkagg.py#L1-L20)\n\n The issue mentions a 'FigureCanvasQTAgg' object, and this snippet is from the TkAgg backend file, which may be relevant to the pickling issue since it involves the FigureCanvasAgg class.\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries) \u2192 [examples](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples) \u2192 [event_handling](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples/event_handling)- [Lines 1 - 50](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//galleries/examples/event_handling/legend_picking.py#L1-L50)\n\n This example demonstrates interactive legend picking, which is related to the draggable legend feature that is causing the pickling issue.\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries) \u2192 [examples](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples) \u2192 [userdemo](https://github.com/testbed/matplotlib__matplotlib__3.7/tree//galleries/examples/userdemo)- [Lines 1 - 25](https://github.com/testbed/matplotlib__matplotlib__3.7/blob//galleries/examples/userdemo/simple_legend01.py#L1-L25)\n\n This snippet shows the use of legends in Matplotlib, which is relevant to the issue since it involves a draggable legend."
    }
}