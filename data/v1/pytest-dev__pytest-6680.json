{
    "id": "pytest-dev__pytest-6680",
    "repo_name": "testbed/pytest-dev__pytest__5.3",
    "task_id": 795782328434012216,
    "title": "Improve deprecation docs for Node.from_parent",
    "body": "In the \"Node Construction changed to Node.from_parent\" section in the deprecation docs, we definitely need to add:\r\n\r\n* [x] An example of the warning that users will see (so they can find the session on google).\r\n* [x] The warning `NODE_USE_FROM_PARENT` should point to the deprecation docs.\r\n* [x] Show a \"before -> after\" example.\r\n* [x] ensure from_parent will not support config/session\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pytest-dev__pytest__5.3.git",
    "requested_commit": "",
    "mayil_response": "To implement the requested feature, follow these steps:\n\n- Update the deprecation documentation to include the requested information.\n- Add an example of the warning message that users will see.\n- Ensure that the `NODE_USE_FROM_PARENT` warning points to the deprecation documentation.\n- Provide a \"before -> after\" example showing how to migrate from the old usage to `Node.from_parent`.\n- Make sure that `from_parent` does not support `config/session`.\n\nHere's a high-level overview of the changes that need to be made:\n\n1. Locate the deprecation documentation file (likely in the `doc/` directory or similar).\n2. Edit the documentation to include:\n   - An example of the warning message.\n   - A reference or hyperlink to the deprecation documentation where `NODE_USE_FROM_PARENT` is mentioned.\n   - A \"before -> after\" code snippet showing the correct usage of `Node.from_parent`.\n3. Update the `Node.from_parent` method (likely in a file within the `src/` directory) to ensure it does not accept `config/session` as parameters, if it currently does.\n\nHere's an example of how the documentation might look after the update:\n\n```rst\nDeprecation of Old Node Construction\n------------------------------------\n\nIn previous versions, nodes were constructed using direct instantiation. This method is now deprecated in favor of using the `Node.from_parent` method.\n\n.. warning:: Deprecated Node Construction\n\n   Constructing nodes directly is deprecated. Use `Node.from_parent` instead.\n\n   .. code-block:: python\n\n      # Before\n      node = Node(config, session, ...)\n\n      # After\n      node = Node.from_parent(parent, ...)\n\n   If you see the following warning, it means you are using the deprecated method:\n\n   .. code-block:: text\n\n      NODE_USE_FROM_PARENT: Direct node construction is deprecated, please use Node.from_parent.\n\n   For more information, see the [deprecation documentation](link-to-deprecation-docs).\n\nPlease note that `Node.from_parent` does not support passing `config` or `session` as arguments.\n```\n\nAnd here's a pseudo-code example of the change to the `Node.from_parent` method:\n\n```python\nclass Node:\n    @classmethod\n    def from_parent(cls, parent, **kw):\n        if 'config' in kw or 'session' in kw:\n            raise ValueError(\"from_parent does not accept config or session\")\n        # rest of the method implementation\n```\n\nRemember to add tests for the new behavior if they do not already exist, and update any existing tests that may be affected by this change.\n\n### Code snippets to check\n\n- - [Lines 73 - 108](https://github.com/testbed/pytest-dev__pytest__5.3/blob//.pre-commit-config.yaml#L73-L108)\n\n This snippet contains pre-commit hook configurations, including one for deprecated features. It may need to be updated to include the NODE_USE_FROM_PARENT warning or to enforce documentation standards related to deprecation.\n-  \u2192 [.github](https://github.com/testbed/pytest-dev__pytest__5.3/tree//.github)- [Lines 1 - 2](https://github.com/testbed/pytest-dev__pytest__5.3/blob//.github/config.yml#L1-L2)\n\n This snippet indicates the ReadTheDocs project configuration for pytest. It may be necessary to check this to ensure that the deprecation documentation is correctly built and displayed on the ReadTheDocs site.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.000184,
        "snippet_processor": 0.0388,
        "issue_star_creation": 0.01779,
        "issue_star_solver": 0.02901,
        "bouncer": 0.01906
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711735160.341526,
        "relevant_snippets": [
            {
                "code": "-   repo: local\n    hooks:\n    -   id: rst\n        name: rst\n        entry: rst-lint --encoding utf-8\n        files: ^(RELEASING.rst|README.rst|TIDELIFT.rst)$\n        language: python\n        additional_dependencies: [pygments, restructuredtext_lint]\n    -   id: changelogs-rst\n        name: changelog filenames\n        language: fail\n        entry: 'changelog files must be named ####.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst'\n        exclude: changelog/(\\d+\\.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst|README.rst|_template.rst)\n        files: ^changelog/\n    -   id: py-deprecated\n        name: py library is deprecated\n        language: pygrep\n        entry: >\n            (?x)\\bpy\\.(\n                _code\\.|\n                builtin\\.|\n                code\\.|\n                io\\.|\n                path\\.local\\.sysfind|\n                process\\.|\n                std\\.|\n                error\\.|\n                xml\\.\n            )\n        types: [python]\n    -   id: py-path-deprecated\n        name: py.path usage is deprecated\n        exclude: docs|src/_pytest/deprecated.py|testing/deprecated_test.py|src/_pytest/legacypath.py\n        language: pygrep\n        entry: \\bpy\\.path\\.local\n        types: [python]",
                "filename": ".pre-commit-config.yaml",
                "start_index": 2166,
                "end_index": 3442,
                "start_line": 73,
                "end_line": 108,
                "max_line": 108,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            },
            {
                "code": "\"\"\"Invoke development tasks.\"\"\"\nimport argparse\nimport os\nfrom pathlib import Path\nfrom subprocess import call\nfrom subprocess import check_call\nfrom subprocess import check_output\n\nfrom colorama import Fore\nfrom colorama import init\n\n\ndef announce(version, template_name, doc_version):\n    \"\"\"Generates a new release announcement entry in the docs.\"\"\"\n    # Get our list of authors\n    stdout = check_output([\"git\", \"describe\", \"--abbrev=0\", \"--tags\"])\n    stdout = stdout.decode(\"utf-8\")\n    last_version = stdout.strip()\n\n    stdout = check_output([\"git\", \"log\", f\"{last_version}..HEAD\", \"--format=%aN\"])\n    stdout = stdout.decode(\"utf-8\")\n\n    contributors = {\n        name\n        for name in stdout.splitlines()\n        if not name.endswith(\"[bot]\") and name != \"pytest bot\"\n    }\n\n    template_text = (\n        Path(__file__).parent.joinpath(template_name).read_text(encoding=\"UTF-8\")\n    )\n\n    contributors_text = \"\\n\".join(f\"* {name}\" for name in sorted(contributors)) + \"\\n\"\n    text = template_text.format(\n        version=version, contributors=contributors_text, doc_version=doc_version\n    )\n\n    target = Path(__file__).parent.joinpath(f\"../doc/en/announce/release-{version}.rst\")\n    target.write_text(text, encoding=\"UTF-8\")\n    print(f\"{Fore.CYAN}[generate.announce] {Fore.RESET}Generated {target.name}\")\n\n    # Update index with the new release entry\n    index_path = Path(__file__).parent.joinpath(\"../doc/en/announce/index.rst\")\n    lines = index_path.read_text(encoding=\"UTF-8\").splitlines()\n    indent = \"   \"\n    for index, line in enumerate(lines):\n        if line.startswith(f\"{indent}release-\"):\n            new_line = indent + target.stem\n            if line != new_line:\n                lines.insert(index, new_line)\n                index_path.write_text(\"\\n\".join(lines) + \"\\n\", encoding=\"UTF-8\")\n                print(\n                    f\"{Fore.CYAN}[generate.announce] {Fore.RESET}Updated {index_path.name}\"\n                )\n            else:\n                print(\n                    f\"{Fore.CYAN}[generate.announce] {Fore.RESET}Skip {index_path.name} (already contains release)\"\n                )\n            break\n\n    check_call([\"git\", \"add\", str(target)])\n\n\ndef regen(version):\n    \"\"\"Call regendoc tool to update examples and pytest output in the docs.\"\"\"\n    print(f\"{Fore.CYAN}[generate.regen] {Fore.RESET}Updating docs\")\n    check_call(\n        [\"tox\", \"-e\", \"regen\"],\n        env={**os.environ, \"SETUPTOOLS_SCM_PRETEND_VERSION_FOR_PYTEST\": version},\n    )\n\n\ndef fix_formatting():\n    \"\"\"Runs pre-commit in all files to ensure they are formatted correctly\"\"\"\n    print(\n        f\"{Fore.CYAN}[generate.fix linting] {Fore.RESET}Fixing formatting using pre-commit\"\n    )\n    call([\"pre-commit\", \"run\", \"--all-files\"])\n\n\ndef check_links():\n    \"\"\"Runs sphinx-build to check links\"\"\"\n    print(f\"{Fore.CYAN}[generate.check_links] {Fore.RESET}Checking links\")\n    check_call([\"tox\", \"-e\", \"docs-checklinks\"])",
                "filename": "scripts/release.py",
                "start_index": 0,
                "end_index": 2949,
                "start_line": 1,
                "end_line": 84,
                "max_line": 131,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            },
            {
                "code": "repos:",
                "filename": ".pre-commit-config.yaml",
                "start_index": 0,
                "end_index": 6,
                "start_line": 1,
                "end_line": 1,
                "max_line": 108,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            },
            {
                "code": "blank_issues_enabled: false\ncontact_links:\n  - name: \u2753 Support Question\n    url: https://github.com/pytest-dev/pytest/discussions\n    about: Use GitHub's new Discussions feature for questions",
                "filename": ".github/ISSUE_TEMPLATE/config.yml",
                "start_index": 0,
                "end_index": 191,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            },
            {
                "code": "rtd:\n  project: pytest",
                "filename": ".github/config.yml",
                "start_index": 0,
                "end_index": 22,
                "start_line": 1,
                "end_line": 2,
                "max_line": 2,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            },
            {
                "code": "import datetime\nimport pathlib\nimport re\nfrom textwrap import dedent\nfrom textwrap import indent\n\nimport packaging.version\nimport platformdirs\nimport tabulate\nimport wcwidth\nfrom requests_cache import CachedResponse\nfrom requests_cache import CachedSession\nfrom requests_cache import OriginalResponse\nfrom requests_cache import SQLiteCache\nfrom tqdm import tqdm\n\n\nFILE_HEAD = r\"\"\"\n.. Note this file is autogenerated by scripts/update-plugin-list.py - usually weekly via github action\n\n.. _plugin-list:\n\nPlugin List\n===========\n\nPyPI projects that match \"pytest-\\*\" are considered plugins and are listed\nautomatically together with a manually-maintained list in `the source\ncode <https://github.com/pytest-dev/pytest/blob/main/scripts/update-plugin-list.py>`_.\nPackages classified as inactive are excluded.\n\n.. The following conditional uses a different format for this list when\n   creating a PDF, because otherwise the table gets far too wide for the\n   page.\n\n\"\"\"\nDEVELOPMENT_STATUS_CLASSIFIERS = (\n    \"Development Status :: 1 - Planning\",\n    \"Development Status :: 2 - Pre-Alpha\",\n    \"Development Status :: 3 - Alpha\",\n    \"Development Status :: 4 - Beta\",\n    \"Development Status :: 5 - Production/Stable\",\n    \"Development Status :: 6 - Mature\",\n    \"Development Status :: 7 - Inactive\",\n)\nADDITIONAL_PROJECTS = {  # set of additional projects to consider as plugins\n    \"logassert\",\n    \"nuts\",\n}\n\n\ndef escape_rst(text: str) -> str:\n    \"\"\"Rudimentary attempt to escape special RST characters to appear as\n    plain text.\"\"\"\n    text = (\n        text.replace(\"*\", \"\\\\*\")\n        .replace(\"<\", \"\\\\<\")\n        .replace(\">\", \"\\\\>\")\n        .replace(\"`\", \"\\\\`\")\n    )\n    text = re.sub(r\"_\\b\", \"\", text)\n    return text\n\n\ndef project_response_with_refresh(\n    session: CachedSession, name: str, last_serial: int\n) -> OriginalResponse | CachedResponse:\n    \"\"\"Get a http cached pypi project\n\n    force refresh in case of last serial mismatch\n    \"\"\"\n\n    response = session.get(f\"https://pypi.org/pypi/{name}/json\")\n    if int(response.headers.get(\"X-PyPI-Last-Serial\", -1)) != last_serial:\n        response = session.get(f\"https://pypi.org/pypi/{name}/json\", refresh=True)\n    return response\n\n\ndef get_session() -> CachedSession:\n    \"\"\"Configures the requests-cache session\"\"\"\n    cache_path = platformdirs.user_cache_path(\"pytest-plugin-list\")\n    cache_path.mkdir(exist_ok=True, parents=True)\n    cache_file = cache_path.joinpath(\"http_cache.sqlite3\")\n    return CachedSession(backend=SQLiteCache(cache_file))\n\n\ndef pytest_plugin_projects_from_pypi(session: CachedSession) -> dict[str, int]:\n    response = session.get(\n        \"https://pypi.org/simple\",\n        headers={\"Accept\": \"application/vnd.pypi.simple.v1+json\"},\n        refresh=True,\n    )\n    return {\n        name: p[\"_last-serial\"]\n        for p in response.json()[\"projects\"]\n        if (name := p[\"name\"]).startswith(\"pytest-\") or name in ADDITIONAL_PROJECTS\n    }",
                "filename": "scripts/update-plugin-list.py",
                "start_index": 0,
                "end_index": 2939,
                "start_line": 1,
                "end_line": 155,
                "max_line": 195,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            },
            {
                "code": "def pre_release(version, template_name, doc_version, *, skip_check_links):\n    \"\"\"Generates new docs, release announcements and creates a local tag.\"\"\"\n    announce(version, template_name, doc_version)\n    regen(version)\n    changelog(version, write_out=True)\n    fix_formatting()\n    if not skip_check_links:\n        check_links()\n\n    msg = f\"Prepare release version {version}\"\n    check_call([\"git\", \"commit\", \"-a\", \"-m\", msg])\n\n    print()\n    print(f\"{Fore.CYAN}[generate.pre_release] {Fore.GREEN}All done!\")\n    print()\n    print(\"Please push your branch and open a PR.\")\n\n\ndef changelog(version, write_out=False):\n    addopts = [] if write_out else [\"--draft\"]\n    check_call([\"towncrier\", \"--yes\", \"--version\", version] + addopts)\n\n\ndef main():\n    init(autoreset=True)\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"version\", help=\"Release version\")\n    parser.add_argument(\n        \"template_name\", help=\"Name of template file to use for release announcement\"\n    )\n    parser.add_argument(\n        \"doc_version\", help=\"For prereleases, the version to link to in the docs\"\n    )\n    parser.add_argument(\"--skip-check-links\", action=\"store_true\", default=False)\n    options = parser.parse_args()\n    pre_release(\n        options.version,\n        options.template_name,\n        options.doc_version,\n        skip_check_links=options.skip_check_links,\n    )\n\n\nif __name__ == \"__main__\":\n    main()",
                "filename": "scripts/release.py",
                "start_index": 2952,
                "end_index": 4372,
                "start_line": 87,
                "end_line": 131,
                "max_line": 131,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            },
            {
                "code": "def iter_plugins():\n    session = get_session()\n    name_2_serial = pytest_plugin_projects_from_pypi(session)\n\n    for name, last_serial in tqdm(name_2_serial.items(), smoothing=0):\n        response = project_response_with_refresh(session, name, last_serial)\n        if response.status_code == 404:\n            # Some packages, like pytest-azurepipelines42, are included in https://pypi.org/simple\n            # but return 404 on the JSON API. Skip.\n            continue\n        response.raise_for_status()\n        info = response.json()[\"info\"]\n        if \"Development Status :: 7 - Inactive\" in info[\"classifiers\"]:\n            continue\n        for classifier in DEVELOPMENT_STATUS_CLASSIFIERS:\n            if classifier in info[\"classifiers\"]:\n                status = classifier[22:]\n                break\n        else:\n            status = \"N/A\"\n        requires = \"N/A\"\n        if info[\"requires_dist\"]:\n            for requirement in info[\"requires_dist\"]:\n                if re.match(r\"pytest(?![-.\\w])\", requirement):\n                    requires = requirement\n                    break\n\n        def version_sort_key(version_string):\n            \"\"\"\n            Return the sort key for the given version string\n            returned by the API.\n            \"\"\"\n            try:\n                return packaging.version.parse(version_string)\n            except packaging.version.InvalidVersion:\n                # Use a hard-coded pre-release version.\n                return packaging.version.Version(\"0.0.0alpha\")\n\n        releases = response.json()[\"releases\"]\n        for release in sorted(releases, key=version_sort_key, reverse=True):\n            if releases[release]:\n                release_date = datetime.date.fromisoformat(\n                    releases[release][-1][\"upload_time_iso_8601\"].split(\"T\")[0]\n                )\n                last_release = release_date.strftime(\"%b %d, %Y\")\n                break\n        name = f':pypi:`{info[\"name\"]}`'\n        summary = \"\"\n        if info[\"summary\"]:\n            summary = escape_rst(info[\"summary\"].replace(\"\\n\", \"\"))\n        yield {\n            \"name\": name,\n            \"summary\": summary.strip(),\n            \"last release\": last_release,\n            \"status\": status,\n            \"requires\": requires,\n        }\n\n\ndef plugin_definitions(plugins):\n    \"\"\"Return RST for the plugin list that fits better on a vertical page.\"\"\"\n\n    for plugin in plugins:\n        yield dedent(\n            f\"\"\"\n            {plugin['name']}\n               *last release*: {plugin[\"last release\"]},\n               *status*: {plugin[\"status\"]},\n               *requires*: {plugin[\"requires\"]}\n\n               {plugin[\"summary\"]}\n            \"\"\"\n        )",
                "filename": "scripts/update-plugin-list.py",
                "start_index": 2942,
                "end_index": 5644,
                "start_line": 99,
                "end_line": 171,
                "max_line": 195,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            },
            {
                "code": "# reference: https://docs.codecov.io/docs/codecovyml-reference\ncoverage:\n  status:\n    patch: true\n    project: false\ncomment: false",
                "filename": "codecov.yml",
                "start_index": 0,
                "end_index": 132,
                "start_line": 1,
                "end_line": 6,
                "max_line": 6,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            },
            {
                "code": "import sys\nfrom subprocess import call\n\n\ndef main():\n    \"\"\"\n    Platform agnostic wrapper script for towncrier.\n    Fixes the issue (#7251) where windows users are unable to natively run tox -e docs to build pytest docs.\n    \"\"\"\n    with open(\n        \"doc/en/_changelog_towncrier_draft.rst\", \"w\", encoding=\"utf-8\"\n    ) as draft_file:\n        return call((\"towncrier\", \"--draft\"), stdout=draft_file)\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
                "filename": "scripts/towncrier-draft-to-file.py",
                "start_index": 0,
                "end_index": 451,
                "start_line": 1,
                "end_line": 17,
                "max_line": 17,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__5.3",
                "sha": ""
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            ".pre-commit-config.yaml": [
                {
                    "chunk": {
                        "code": "-   repo: local\n    hooks:\n    -   id: rst\n        name: rst\n        entry: rst-lint --encoding utf-8\n        files: ^(RELEASING.rst|README.rst|TIDELIFT.rst)$\n        language: python\n        additional_dependencies: [pygments, restructuredtext_lint]\n    -   id: changelogs-rst\n        name: changelog filenames\n        language: fail\n        entry: 'changelog files must be named ####.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst'\n        exclude: changelog/(\\d+\\.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst|README.rst|_template.rst)\n        files: ^changelog/\n    -   id: py-deprecated\n        name: py library is deprecated\n        language: pygrep\n        entry: >\n            (?x)\\bpy\\.(\n                _code\\.|\n                builtin\\.|\n                code\\.|\n                io\\.|\n                path\\.local\\.sysfind|\n                process\\.|\n                std\\.|\n                error\\.|\n                xml\\.\n            )\n        types: [python]\n    -   id: py-path-deprecated\n        name: py.path usage is deprecated\n        exclude: docs|src/_pytest/deprecated.py|testing/deprecated_test.py|src/_pytest/legacypath.py\n        language: pygrep\n        entry: \\bpy\\.path\\.local\n        types: [python]",
                        "filename": ".pre-commit-config.yaml",
                        "start_index": 2166,
                        "end_index": 3442,
                        "start_line": 73,
                        "end_line": 108,
                        "max_line": 108,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__5.3",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains pre-commit hook configurations, including one for deprecated features. It may need to be updated to include the NODE_USE_FROM_PARENT warning or to enforce documentation standards related to deprecation."
                }
            ],
            ".github/config.yml": [
                {
                    "chunk": {
                        "code": "rtd:\n  project: pytest",
                        "filename": ".github/config.yml",
                        "start_index": 0,
                        "end_index": 22,
                        "start_line": 1,
                        "end_line": 2,
                        "max_line": 2,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__5.3",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet indicates the ReadTheDocs project configuration for pytest. It may be necessary to check this to ensure that the deprecation documentation is correctly built and displayed on the ReadTheDocs site."
                }
            ]
        },
        "solution_task": "To implement the requested feature, follow these steps:\n\n- Update the deprecation documentation to include the requested information.\n- Add an example of the warning message that users will see.\n- Ensure that the `NODE_USE_FROM_PARENT` warning points to the deprecation documentation.\n- Provide a \"before -> after\" example showing how to migrate from the old usage to `Node.from_parent`.\n- Make sure that `from_parent` does not support `config/session`.\n\nHere's a high-level overview of the changes that need to be made:\n\n1. Locate the deprecation documentation file (likely in the `doc/` directory or similar).\n2. Edit the documentation to include:\n   - An example of the warning message.\n   - A reference or hyperlink to the deprecation documentation where `NODE_USE_FROM_PARENT` is mentioned.\n   - A \"before -> after\" code snippet showing the correct usage of `Node.from_parent`.\n3. Update the `Node.from_parent` method (likely in a file within the `src/` directory) to ensure it does not accept `config/session` as parameters, if it currently does.\n\nHere's an example of how the documentation might look after the update:\n\n```rst\nDeprecation of Old Node Construction\n------------------------------------\n\nIn previous versions, nodes were constructed using direct instantiation. This method is now deprecated in favor of using the `Node.from_parent` method.\n\n.. warning:: Deprecated Node Construction\n\n   Constructing nodes directly is deprecated. Use `Node.from_parent` instead.\n\n   .. code-block:: python\n\n      # Before\n      node = Node(config, session, ...)\n\n      # After\n      node = Node.from_parent(parent, ...)\n\n   If you see the following warning, it means you are using the deprecated method:\n\n   .. code-block:: text\n\n      NODE_USE_FROM_PARENT: Direct node construction is deprecated, please use Node.from_parent.\n\n   For more information, see the [deprecation documentation](link-to-deprecation-docs).\n\nPlease note that `Node.from_parent` does not support passing `config` or `session` as arguments.\n```\n\nAnd here's a pseudo-code example of the change to the `Node.from_parent` method:\n\n```python\nclass Node:\n    @classmethod\n    def from_parent(cls, parent, **kw):\n        if 'config' in kw or 'session' in kw:\n            raise ValueError(\"from_parent does not accept config or session\")\n        # rest of the method implementation\n```\n\nRemember to add tests for the new behavior if they do not already exist, and update any existing tests that may be affected by this change.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant suggestions that can directly lead to the successful implementation or improvement of the requested feature.",
            "supporting_evidence": "The RESPONSE provides a comprehensive set of instructions for updating the deprecation documentation, including specific examples of what to add and how to format it. It also addresses the need to ensure that `Node.from_parent` does not support `config/session` by providing a pseudo-code example of how to enforce this in the code. Additionally, the RESPONSE includes a reminder to update tests and check for pre-commit hook configurations and ReadTheDocs project configurations, which are relevant to the documentation and codebase integrity. The only reason it does not score a 10 is that it does not provide the actual warning message example or the direct link to the deprecation documentation, which would be necessary for a complete implementation.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711735210.676076,
        "result": "To implement the requested feature, follow these steps:\n\n- Update the deprecation documentation to include the requested information.\n- Add an example of the warning message that users will see.\n- Ensure that the `NODE_USE_FROM_PARENT` warning points to the deprecation documentation.\n- Provide a \"before -> after\" example showing how to migrate from the old usage to `Node.from_parent`.\n- Make sure that `from_parent` does not support `config/session`.\n\nHere's a high-level overview of the changes that need to be made:\n\n1. Locate the deprecation documentation file (likely in the `doc/` directory or similar).\n2. Edit the documentation to include:\n   - An example of the warning message.\n   - A reference or hyperlink to the deprecation documentation where `NODE_USE_FROM_PARENT` is mentioned.\n   - A \"before -> after\" code snippet showing the correct usage of `Node.from_parent`.\n3. Update the `Node.from_parent` method (likely in a file within the `src/` directory) to ensure it does not accept `config/session` as parameters, if it currently does.\n\nHere's an example of how the documentation might look after the update:\n\n```rst\nDeprecation of Old Node Construction\n------------------------------------\n\nIn previous versions, nodes were constructed using direct instantiation. This method is now deprecated in favor of using the `Node.from_parent` method.\n\n.. warning:: Deprecated Node Construction\n\n   Constructing nodes directly is deprecated. Use `Node.from_parent` instead.\n\n   .. code-block:: python\n\n      # Before\n      node = Node(config, session, ...)\n\n      # After\n      node = Node.from_parent(parent, ...)\n\n   If you see the following warning, it means you are using the deprecated method:\n\n   .. code-block:: text\n\n      NODE_USE_FROM_PARENT: Direct node construction is deprecated, please use Node.from_parent.\n\n   For more information, see the [deprecation documentation](link-to-deprecation-docs).\n\nPlease note that `Node.from_parent` does not support passing `config` or `session` as arguments.\n```\n\nAnd here's a pseudo-code example of the change to the `Node.from_parent` method:\n\n```python\nclass Node:\n    @classmethod\n    def from_parent(cls, parent, **kw):\n        if 'config' in kw or 'session' in kw:\n            raise ValueError(\"from_parent does not accept config or session\")\n        # rest of the method implementation\n```\n\nRemember to add tests for the new behavior if they do not already exist, and update any existing tests that may be affected by this change.\n\n### Code snippets to check\n\n- - [Lines 73 - 108](https://github.com/testbed/pytest-dev__pytest__5.3/blob//.pre-commit-config.yaml#L73-L108)\n\n This snippet contains pre-commit hook configurations, including one for deprecated features. It may need to be updated to include the NODE_USE_FROM_PARENT warning or to enforce documentation standards related to deprecation.\n-  \u2192 [.github](https://github.com/testbed/pytest-dev__pytest__5.3/tree//.github)- [Lines 1 - 2](https://github.com/testbed/pytest-dev__pytest__5.3/blob//.github/config.yml#L1-L2)\n\n This snippet indicates the ReadTheDocs project configuration for pytest. It may be necessary to check this to ensure that the deprecation documentation is correctly built and displayed on the ReadTheDocs site."
    }
}