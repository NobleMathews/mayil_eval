{
    "id": "matplotlib__matplotlib-24257",
    "repo_name": "testbed/matplotlib__matplotlib__3.6",
    "task_id": 5959571121188938128,
    "title": "Document how to distribute style files in python packages",
    "body": "<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\nStyle files (actually, style *dicts*) can be distributed as python packages, as discussed e.g. in https://github.com/matplotlib/matplotlib/pull/14943#issuecomment-517321236.  This has the advantage of being relatively easy to do and that it works \"as is\" for essentially all versions of matplotlib (if your matplotlib is too old to have `matplotlib.style.use` (pre 1.5...) you can still use `rcParams.update(style_dict)`).\r\n\r\nIn today's call we agreed that this approach should be documented and that a template package (similar to https://github.com/matplotlib/matplotlib-cmap-template) could be created.\r\n\r\nIt was also pointed out during the call that this approach makes it easy to distribute colormaps together with the style, or add any additional custom logic; this may be worth documenting too.\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/matplotlib__matplotlib__3.6.git",
    "requested_commit": "",
    "mayil_response": "To distribute style files in Python packages, follow these steps:\n\n- Create a style file with the `.mplstyle` extension.\n- Place the style file in a directory within your package, for example, `mypackage/styles/`.\n- Ensure that the directory containing the style file is included in your package data in `setup.py` or `pyproject.toml`.\n- Users can then use your style by calling `plt.style.use('mypackage.styles.mystyle')`, where `mystyle` is the name of your style file without the `.mplstyle` extension.\n\nHere is an example of how to set up your package to include style files:\n\n```python\n# setup.py\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='mypackage',\n    version='0.1',\n    packages=find_packages(),\n    package_data={\n        'mypackage': ['styles/*.mplstyle'],\n    },\n    # Other setup arguments...\n)\n```\n\nAnd here is how users can use the style from your package:\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.style.use('mypackage.styles.mystyle')  # Replace 'mystyle' with your style's name\n```\n\nRemember to document the usage of your style files in your package's documentation.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.000252,
        "snippet_processor": 0.06308000000000001,
        "issue_star_creation": 0.02484,
        "issue_star_solver": 0.07439,
        "bouncer": 0.02942
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711697571.4074419,
        "relevant_snippets": [
            {
                "code": "# different styles by simply changing the imported style sheet. A style\n# sheets looks the same as a :ref:`matplotlibrc<matplotlibrc-sample>`\n# file, but in a style sheet you can only set rcParams that are related\n# to the actual style of a plot. Other rcParams, like *backend*, will be\n# ignored. :file:`matplotlibrc` files support all rcParams. The\n# rationale behind this is to make style sheets portable between\n# different machines without having to worry about dependencies which\n# might or might not be installed on another machine. For a full list of\n# rcParams see `matplotlib.rcParams`. For a list of rcParams that are\n# ignored in style sheets see `matplotlib.style.use`.\n#\n# There are a number of pre-defined styles :doc:`provided by Matplotlib\n# </gallery/style_sheets/style_sheets_reference>`. For\n# example, there's a pre-defined style called \"ggplot\", which emulates the\n# aesthetics of ggplot_ (a popular plotting package for R_). To use this\n# style, add:\n\nplt.style.use('ggplot')\n\n# %%\n# To list all available styles, use:\n\nprint(plt.style.available)\n\n# %%\n# Defining your own style\n# -----------------------\n#\n# You can create custom styles and use them by calling `.style.use` with\n# the path or URL to the style sheet.\n#\n# For example, you might want to create\n# ``./images/presentation.mplstyle`` with the following::\n#\n#    axes.titlesize : 24\n#    axes.labelsize : 20\n#    lines.linewidth : 3\n#    lines.markersize : 10\n#    xtick.labelsize : 16\n#    ytick.labelsize : 16\n#\n# Then, when you want to adapt a plot designed for a paper to one that looks\n# good in a presentation, you can just add::\n#\n#    >>> import matplotlib.pyplot as plt\n#    >>> plt.style.use('./images/presentation.mplstyle')\n#\n#\n# Distributing styles\n# -------------------\n#\n# You can include style sheets into standard importable Python packages (which\n# can be e.g. distributed on PyPI).  If your package is importable as\n# ``import mypackage``, with a ``mypackage/__init__.py`` module, and you add\n# a ``mypackage/presentation.mplstyle`` style sheet, then it can be used as\n# ``plt.style.use(\"mypackage.presentation\")``.  Subpackages (e.g.\n# ``dotted.package.name``) are also supported.\n#\n# Alternatively, you can make your style known to Matplotlib by placing\n# your ``<style-name>.mplstyle`` file into ``mpl_configdir/stylelib``.  You\n# can then load your custom style sheet with a call to\n# ``style.use(<style-name>)``.  By default ``mpl_configdir`` should be\n# ``~/.config/matplotlib``, but you can check where yours is with\n# `matplotlib.get_configdir()`; you may need to create this directory. You\n# also can change the directory where Matplotlib looks for the stylelib/\n# folder by setting the :envvar:`MPLCONFIGDIR` environment variable, see\n# :ref:`locating-matplotlib-config-dir`.\n#\n# Note that a custom style sheet in ``mpl_configdir/stylelib`` will override a\n# style sheet defined by Matplotlib if the styles have the same name.\n#",
                "filename": "galleries/users_explain/customizing.py",
                "start_index": 2957,
                "end_index": 5899,
                "start_line": 99,
                "end_line": 269,
                "max_line": 269,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.6",
                "sha": ""
            },
            {
                "code": "# Once your ``<style-name>.mplstyle`` file is in the appropriate\n# ``mpl_configdir`` you can specify your style with::\n#\n#    >>> import matplotlib.pyplot as plt\n#    >>> plt.style.use(<style-name>)\n#\n#\n# Composing styles\n# ----------------\n#\n# Style sheets are designed to be composed together. So you can have a style\n# sheet that customizes colors and a separate style sheet that alters element\n# sizes for presentations. These styles can easily be combined by passing\n# a list of styles::\n#\n#    >>> import matplotlib.pyplot as plt\n#    >>> plt.style.use(['dark_background', 'presentation'])\n#\n# Note that styles further to the right will overwrite values that are already\n# defined by styles on the left.\n#\n#\n# Temporary styling\n# -----------------\n#\n# If you only want to use a style for a specific block of code but don't want\n# to change the global styling, the style package provides a context manager\n# for limiting your changes to a specific scope. To isolate your styling\n# changes, you can write something like the following:\n\nwith plt.style.context('dark_background'):\n    plt.plot(np.sin(np.linspace(0, 2 * np.pi)), 'r-o')\nplt.show()\n\n# %%\n# .. _customizing-with-matplotlibrc-files:\n#\n# The :file:`matplotlibrc` file\n# =============================\n#\n# Matplotlib uses :file:`matplotlibrc` configuration files to customize all\n# kinds of properties, which we call 'rc settings' or 'rc parameters'. You can\n# control the defaults of almost every property in Matplotlib: figure size and\n# DPI, line width, color and style, axes, axis and grid properties, text and\n# font properties and so on. The :file:`matplotlibrc` is read at startup to\n# configure Matplotlib. Matplotlib looks for :file:`matplotlibrc` in four\n# locations, in the following order:\n#\n# 1. :file:`matplotlibrc` in the current working directory, usually used for\n#    specific customizations that you do not want to apply elsewhere.\n#\n# 2. :file:`$MATPLOTLIBRC` if it is a file, else\n#    :file:`$MATPLOTLIBRC/matplotlibrc`.\n#\n# 3. It next looks in a user-specific place, depending on your platform:\n#\n#    - On Linux and FreeBSD, it looks in\n#      :file:`.config/matplotlib/matplotlibrc` (or\n#      :file:`$XDG_CONFIG_HOME/matplotlib/matplotlibrc`) if you've customized\n#      your environment.\n#\n#    - On other platforms, it looks in :file:`.matplotlib/matplotlibrc`.\n#\n#    See :ref:`locating-matplotlib-config-dir`.\n#\n# 4. :file:`{INSTALL}/matplotlib/mpl-data/matplotlibrc`, where\n#    :file:`{INSTALL}` is something like\n#    :file:`/usr/lib/python3.9/site-packages` on Linux, and maybe\n#    :file:`C:\\\\Python39\\\\Lib\\\\site-packages` on Windows. Every time you\n#    install matplotlib, this file will be overwritten, so if you want\n#    your customizations to be saved, please move this file to your\n#    user-specific matplotlib directory.\n#\n# Once a :file:`matplotlibrc` file has been found, it will *not* search\n# any of the other paths. When a\n# :ref:`style sheet<customizing-with-style-sheets>` is given with",
                "filename": "galleries/users_explain/customizing.py",
                "start_index": 5900,
                "end_index": 8899,
                "start_line": 170,
                "end_line": 245,
                "max_line": 269,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.6",
                "sha": ""
            },
            {
                "code": "\"\"\"\n==================\nggplot style sheet\n==================\n\nThis example demonstrates the \"ggplot\" style, which adjusts the style to\nemulate ggplot_ (a popular plotting package for R_).\n\nThese settings were shamelessly stolen from [1]_ (with permission).\n\n.. [1] https://everyhue.me/posts/sane-color-scheme-for-matplotlib/\n\n.. _ggplot: https://ggplot2.tidyverse.org/\n.. _R: https://www.r-project.org/\n\n\"\"\"\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.style.use('ggplot')\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, axs = plt.subplots(ncols=2, nrows=2)\nax1, ax2, ax3, ax4 = axs.flat\n\n# scatter plot (Note: `plt.scatter` doesn't use default colors)\nx, y = np.random.normal(size=(2, 200))\nax1.plot(x, y, 'o')\n\n# sinusoidal lines with colors from default color cycle\nL = 2*np.pi\nx = np.linspace(0, L)\nncolors = len(plt.rcParams['axes.prop_cycle'])\nshift = np.linspace(0, L, ncolors, endpoint=False)\nfor s in shift:\n    ax2.plot(x, np.sin(x + s), '-')\nax2.margins(0)\n\n# bar graphs\nx = np.arange(5)\ny1, y2 = np.random.randint(1, 25, size=(2, 5))\nwidth = 0.25\nax3.bar(x, y1, width)\nax3.bar(x + width, y2, width,\n        color=list(plt.rcParams['axes.prop_cycle'])[2]['color'])\nax3.set_xticks(x + width, labels=['a', 'b', 'c', 'd', 'e'])\n\n# circles with colors from default color cycle\nfor i, color in enumerate(plt.rcParams['axes.prop_cycle']):\n    xy = np.random.normal(size=2)\n    ax4.add_patch(plt.Circle(xy, radius=0.3, color=color['color']))\nax4.axis('equal')\nax4.margins(0)\n\nplt.show()",
                "filename": "galleries/examples/style_sheets/ggplot.py",
                "start_index": 0,
                "end_index": 1527,
                "start_line": 1,
                "end_line": 57,
                "max_line": 57,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.6",
                "sha": ""
            },
            {
                "code": "for style in styles:\n        if isinstance(style, str):\n            style = style_alias.get(style, style)\n            if style == \"default\":\n                # Deprecation warnings were already handled when creating\n                # rcParamsDefault, no need to reemit them here.\n                with _api.suppress_matplotlib_deprecation_warning():\n                    # don't trigger RcParams.__getitem__('backend')\n                    style = {k: rcParamsDefault[k] for k in rcParamsDefault\n                             if k not in STYLE_BLACKLIST}\n            elif style in library:\n                style = library[style]\n            elif \".\" in style:\n                pkg, _, name = style.rpartition(\".\")\n                try:\n                    path = (importlib_resources.files(pkg)\n                            / f\"{name}.{STYLE_EXTENSION}\")\n                    style = _rc_params_in_file(path)\n                except (ModuleNotFoundError, OSError, TypeError) as exc:\n                    # There is an ambiguity whether a dotted name refers to a\n                    # package.style_name or to a dotted file path.  Currently,\n                    # we silently try the first form and then the second one;\n                    # in the future, we may consider forcing file paths to\n                    # either use Path objects or be prepended with \"./\" and use\n                    # the slash as marker for file paths.\n                    pass\n        if isinstance(style, (str, Path)):\n            try:\n                style = _rc_params_in_file(style)\n            except OSError as err:\n                raise OSError(\n                    f\"{style!r} is not a valid package style, path of style \"\n                    f\"file, URL of style file, or library style name (library \"\n                    f\"styles are listed in `style.available`)\") from err\n        filtered = {}\n        for k in style:  # don't trigger RcParams.__getitem__('backend')\n            if k in STYLE_BLACKLIST:\n                _api.warn_external(\n                    f\"Style includes a parameter, {k!r}, that is not \"\n                    f\"related to style.  Ignoring this parameter.\")\n            else:\n                filtered[k] = style[k]\n        mpl.rcParams.update(filtered)",
                "filename": "lib/matplotlib/style/core.py",
                "start_index": 3383,
                "end_index": 5637,
                "start_line": 109,
                "end_line": 151,
                "max_line": 245,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.6",
                "sha": ""
            },
            {
                "code": "def update_matplotlibrc(path):\n    # If packagers want to change the default backend, insert a `#backend: ...`\n    # line.  Otherwise, use the default `##backend: Agg` which has no effect\n    # even after decommenting, which allows _auto_backend_sentinel to be filled\n    # in at import time.\n    template_lines = path.read_text(encoding=\"utf-8\").splitlines(True)\n    backend_line_idx, = [  # Also asserts that there is a single such line.\n        idx for idx, line in enumerate(template_lines)\n        if \"#backend:\" in line]\n    template_lines[backend_line_idx] = (\n        \"#backend: {}\\n\".format(setupext.options[\"backend\"])\n        if setupext.options[\"backend\"]\n        else \"##backend: Agg\\n\")\n    path.write_text(\"\".join(template_lines), encoding=\"utf-8\")\n\n\nclass BuildPy(setuptools.command.build_py.build_py):\n    def run(self):\n        super().run()\n        if not getattr(self, 'editable_mode', False):\n            update_matplotlibrc(\n                Path(self.build_lib, \"matplotlib/mpl-data/matplotlibrc\"))\n\n\nclass Sdist(setuptools.command.sdist.sdist):\n    def make_release_tree(self, base_dir, files):\n        super().make_release_tree(base_dir, files)\n        update_matplotlibrc(\n            Path(base_dir, \"lib/matplotlib/mpl-data/matplotlibrc\"))\n\n# Start with type hint data\n# Will be further filled below by the various components.\npackage_data = {\"matplotlib\": [\"py.typed\", \"**/*.pyi\"]}\n\n# If the user just queries for information, don't bother figuring out which\n# packages to build or install.\nif not (any('--' + opt in sys.argv\n            for opt in Distribution.display_option_names + ['help'])\n        or 'clean' in sys.argv):\n    # Go through all of the packages and figure out which ones we are\n    # going to build/install.\n    print_raw()\n    print_raw(\"Edit mplsetup.cfg to change the build options; \"\n              \"suppress output with --quiet.\")\n    print_raw()\n    print_raw(\"BUILDING MATPLOTLIB\")\n\n    good_packages = []\n    for package in mpl_packages:\n        try:\n            message = package.check()\n        except setupext.Skipped as e:\n            print_status(package.name, \"no  [{e}]\".format(e=e))\n            continue\n        if message is not None:\n            print_status(package.name,\n                         \"yes [{message}]\".format(message=message))\n        good_packages.append(package)\n\n    print_raw()\n\n    # Now collect all of the information we need to build all of the packages.\n    for package in good_packages:\n        # Extension modules only get added in build_ext, as numpy will have\n        # been installed (as setup_requires) at that point.\n        data = package.get_package_data()\n        for key, val in data.items():\n            package_data.setdefault(key, [])\n            package_data[key] = list(set(val + package_data[key]))",
                "filename": "setup.py",
                "start_index": 8290,
                "end_index": 11091,
                "start_line": 209,
                "end_line": 277,
                "max_line": 364,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.6",
                "sha": ""
            },
            {
                "code": "\"\"\"\n==========================\nSolarized Light stylesheet\n==========================\n\nThis shows an example of \"Solarized_Light\" styling, which\ntries to replicate the styles of:\n\n- https://ethanschoonover.com/solarized/\n- https://github.com/jrnold/ggthemes\n- http://www.pygal.org/en/stable/documentation/builtin_styles.html#light-solarized\n\nand work of:\n\n- https://github.com/tonysyu/mpltools\n\nusing all 8 accents of the color palette - starting with blue\n\nStill TODO:\n\n- Create alpha values for bar and stacked charts. .33 or .5\n- Apply Layout Rules\n\"\"\"\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nx = np.linspace(0, 10)\nwith plt.style.context('Solarize_Light2'):\n    plt.plot(x, np.sin(x) + x + np.random.randn(50))\n    plt.plot(x, np.sin(x) + 2 * x + np.random.randn(50))\n    plt.plot(x, np.sin(x) + 3 * x + np.random.randn(50))\n    plt.plot(x, np.sin(x) + 4 + np.random.randn(50))\n    plt.plot(x, np.sin(x) + 5 * x + np.random.randn(50))\n    plt.plot(x, np.sin(x) + 6 * x + np.random.randn(50))\n    plt.plot(x, np.sin(x) + 7 * x + np.random.randn(50))\n    plt.plot(x, np.sin(x) + 8 * x + np.random.randn(50))\n    # Number of accent colors in the color scheme\n    plt.title('8 Random Lines - Line')\n    plt.xlabel('x label', fontsize=14)\n    plt.ylabel('y label', fontsize=14)\n\nplt.show()",
                "filename": "galleries/examples/style_sheets/plot_solarizedlight2.py",
                "start_index": 0,
                "end_index": 1367,
                "start_line": 1,
                "end_line": 45,
                "max_line": 45,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.6",
                "sha": ""
            },
            {
                "code": "\"\"\"\n.. redirect-from:: /users/customizing\n.. redirect-from:: /tutorials/introductory/customizing\n\n.. _customizing:\n\n=====================================================\nCustomizing Matplotlib with style sheets and rcParams\n=====================================================\n\nTips for customizing the properties and default styles of Matplotlib.\n\nThere are three ways to customize Matplotlib:\n\n1. :ref:`Setting rcParams at runtime<customizing-with-dynamic-rc-settings>`.\n2. :ref:`Using style sheets<customizing-with-style-sheets>`.\n3. :ref:`Changing your matplotlibrc file<customizing-with-matplotlibrc-files>`.\n\nSetting rcParams at runtime takes precedence over style sheets, style\nsheets take precedence over :file:`matplotlibrc` files.\n\n.. _customizing-with-dynamic-rc-settings:\n\nRuntime rc settings\n===================\n\nYou can dynamically change the default rc (runtime configuration)\nsettings in a python script or interactively from the python shell. All\nrc settings are stored in a dictionary-like variable called\n:data:`matplotlib.rcParams`, which is global to the matplotlib package.\nSee `matplotlib.rcParams` for a full list of configurable rcParams.\nrcParams can be modified directly, for example:\n\"\"\"\n\nfrom cycler import cycler\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport matplotlib as mpl\n\nmpl.rcParams['lines.linewidth'] = 2\nmpl.rcParams['lines.linestyle'] = '--'\ndata = np.random.randn(50)\nplt.plot(data)\n\n# %%\n# Note, that in order to change the usual `~.Axes.plot` color you have to\n# change the *prop_cycle* property of *axes*:\n\nmpl.rcParams['axes.prop_cycle'] = cycler(color=['r', 'g', 'b', 'y'])\nplt.plot(data)  # first color is red\n\n# %%\n# Matplotlib also provides a couple of convenience functions for modifying rc\n# settings. `matplotlib.rc` can be used to modify multiple\n# settings in a single group at once, using keyword arguments:\n\nmpl.rc('lines', linewidth=4, linestyle='-.')\nplt.plot(data)\n\n# %%\n# Temporary rc settings\n# ---------------------\n#\n# The :data:`matplotlib.rcParams` object can also be changed temporarily using\n# the `matplotlib.rc_context` context manager:\n\nwith mpl.rc_context({'lines.linewidth': 2, 'lines.linestyle': ':'}):\n    plt.plot(data)\n\n# %%\n# `matplotlib.rc_context` can also be used as a decorator to modify the\n# defaults within a function:\n\n\n@mpl.rc_context({'lines.linewidth': 3, 'lines.linestyle': '-'})\ndef plotting_function():\n    plt.plot(data)\n\nplotting_function()\n\n# %%\n# `matplotlib.rcdefaults` will restore the standard Matplotlib\n# default settings.\n#\n# There is some degree of validation when setting the values of rcParams, see\n# :mod:`matplotlib.rcsetup` for details.\n\n# %%\n# .. _customizing-with-style-sheets:\n#\n# Using style sheets\n# ==================\n#\n# Another way to change the visual appearance of plots is to set the\n# rcParams in a so-called style sheet and import that style sheet with\n# `matplotlib.style.use`. In this way you can switch easily between",
                "filename": "galleries/users_explain/customizing.py",
                "start_index": 0,
                "end_index": 2956,
                "start_line": 1,
                "end_line": 98,
                "max_line": 269,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.6",
                "sha": ""
            },
            {
                "code": "def use(style):",
                "filename": "lib/matplotlib/style/core.py",
                "start_index": 1585,
                "end_index": 1600,
                "start_line": 52,
                "end_line": 52,
                "max_line": 245,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.6",
                "sha": ""
            },
            {
                "code": "name: Bug Report\ndescription: Report a bug or issue with Matplotlib.\ntitle: \"[Bug]: \"\nbody:\n  - type: textarea\n    id: summary\n    attributes:\n      label: Bug summary\n      description:  Describe the bug in 1-2 short sentences\n      placeholder:\n      value:\n    validations:\n      required: true\n  - type: textarea\n    id: reproduction\n    attributes:\n      label: Code for reproduction\n      description: |\n        If possible, please provide a minimum self-contained example.\n      placeholder: Paste your code here. This field is automatically formatted as Python code.\n      render: python\n    validations:\n      required: true\n  - type: textarea\n    id: actual\n    attributes:\n      label: Actual outcome\n      description: |\n        Paste the output produced by the code provided above, e.g.\n        console output, images/videos produced by the code, any relevant screenshots/screencasts, etc.\n    validations:\n      required: true\n  - type: textarea\n    id: expected\n    attributes:\n      label: Expected outcome\n      description: Describe (or provide a visual example of) the expected outcome from the code snippet.\n    validations:\n      required: true\n  - type: textarea\n    id: details\n    attributes:\n      label: Additional information\n      description: |\n        - What are the conditions under which this bug happens? input parameters, edge cases, etc?\n        - Has this worked in earlier versions?\n        - Do you know why this bug is happening?\n        - Do you maybe even know a fix?\n  - type: input\n    id: operating-system\n    attributes:\n      label: Operating system\n      description: Windows, OS/X, Arch, Debian, Ubuntu, etc.\n  - type: input\n    id: matplotlib-version\n    attributes:\n      label: Matplotlib Version\n      description: \"From Python prompt: `import matplotlib; print(matplotlib.__version__)`\"\n    validations:\n      required: true\n  - type: input\n    id: matplotlib-backend\n    attributes:\n      label: Matplotlib Backend\n      description: \"From Python prompt: `import matplotlib; print(matplotlib.get_backend())`\"\n  - type: input\n    id: python-version\n    attributes:\n      label: Python version\n      description: \"In console: `python --version`\"\n  - type: input\n    id: jupyter-version\n    attributes:\n      label: Jupyter version\n      description: \"In console: `jupyter notebook --version` or `jupyter lab --version`\"\n  - type: dropdown\n    id: install\n    attributes:\n      label: Installation\n      description: How did you install matplotlib?\n      options:\n        - pip\n        - conda\n        - Linux package manager\n        - from source (.tar.gz)\n        - git checkout",
                "filename": ".github/ISSUE_TEMPLATE/bug_report.yml",
                "start_index": 0,
                "end_index": 2631,
                "start_line": 1,
                "end_line": 86,
                "max_line": 86,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.6",
                "sha": ""
            },
            {
                "code": "\"\"\"\n===========================\nFiveThirtyEight style sheet\n===========================\n\nThis shows an example of the \"fivethirtyeight\" styling, which\ntries to replicate the styles from FiveThirtyEight.com.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.style.use('fivethirtyeight')\n\nx = np.linspace(0, 10)\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\nax.plot(x, np.sin(x) + x + np.random.randn(50))\nax.plot(x, np.sin(x) + 0.5 * x + np.random.randn(50))\nax.plot(x, np.sin(x) + 2 * x + np.random.randn(50))\nax.plot(x, np.sin(x) - 0.5 * x + np.random.randn(50))\nax.plot(x, np.sin(x) - 2 * x + np.random.randn(50))\nax.plot(x, np.sin(x) + np.random.randn(50))\nax.set_title(\"'fivethirtyeight' style sheet\")\n\nplt.show()",
                "filename": "galleries/examples/style_sheets/fivethirtyeight.py",
                "start_index": 0,
                "end_index": 777,
                "start_line": 1,
                "end_line": 30,
                "max_line": 30,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.6",
                "sha": ""
            }
        ],
        "classification": "question",
        "question_answerer_task": "To distribute style files in Python packages, follow these steps:\n\n- Create a style file with the `.mplstyle` extension.\n- Place the style file in a directory within your package, for example, `mypackage/styles/`.\n- Ensure that the directory containing the style file is included in your package data in `setup.py` or `pyproject.toml`.\n- Users can then use your style by calling `plt.style.use('mypackage.styles.mystyle')`, where `mystyle` is the name of your style file without the `.mplstyle` extension.\n\nHere is an example of how to set up your package to include style files:\n\n```python\n# setup.py\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='mypackage',\n    version='0.1',\n    packages=find_packages(),\n    package_data={\n        'mypackage': ['styles/*.mplstyle'],\n    },\n    # Other setup arguments...\n)\n```\n\nAnd here is how users can use the style from your package:\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.style.use('mypackage.styles.mystyle')  # Replace 'mystyle' with your style's name\n```\n\nRemember to document the usage of your style files in your package's documentation.",
        "bouncer_response": {
            "score": 6,
            "criteria": "The RESPONSE must provide actionable, relevant guidance to more parts of the PROMPT's described issue to score higher.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable guide on how to distribute style files in Python packages, including creating a style file, placing it in the package directory, modifying the package configuration, and how users can apply the style. It also includes code examples for `setup.py` and how users can use the style, which is practical and useful. However, the RESPONSE does not address the specific points mentioned in the PROMPT about creating a template package or documenting the distribution of colormaps and custom logic alongside the style files. These were identified as important in the PROMPT and are missing from the RESPONSE.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711697616.170177,
        "result": "To distribute style files in Python packages, follow these steps:\n\n- Create a style file with the `.mplstyle` extension.\n- Place the style file in a directory within your package, for example, `mypackage/styles/`.\n- Ensure that the directory containing the style file is included in your package data in `setup.py` or `pyproject.toml`.\n- Users can then use your style by calling `plt.style.use('mypackage.styles.mystyle')`, where `mystyle` is the name of your style file without the `.mplstyle` extension.\n\nHere is an example of how to set up your package to include style files:\n\n```python\n# setup.py\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='mypackage',\n    version='0.1',\n    packages=find_packages(),\n    package_data={\n        'mypackage': ['styles/*.mplstyle'],\n    },\n    # Other setup arguments...\n)\n```\n\nAnd here is how users can use the style from your package:\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.style.use('mypackage.styles.mystyle')  # Replace 'mystyle' with your style's name\n```\n\nRemember to document the usage of your style files in your package's documentation."
    }
}