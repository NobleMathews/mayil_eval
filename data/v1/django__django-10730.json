{
    "id": "django__django-10730",
    "repo_name": "testbed/django__django__3.0",
    "task_id": 7459123082412631838,
    "title": "Infinite loop in ExceptionReporter.get_traceback_frames()",
    "body": "Description\n\t\nThe following code generates a cause/context cycle (exc_value.__cause__.__context__ is exc_value):\nexcept WrapperException as exc:\n\traise exc.__cause__\nThe \u200bwhile exc_value loop then never terminates.\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/django__django__3.0.git",
    "requested_commit": "",
    "mayil_response": "- Modify the `_get_explicit_or_implicit_cause` method in `django/views/debug.py` to prevent an infinite loop by checking for cycles in the exception causes.\n- Implement a check to see if `exc_value` has already been processed by maintaining a set of visited exceptions.\n- Update the while loop in `get_traceback_frames` to use the modified `_get_explicit_or_implicit_cause` method.\n\n```python\n# Filename: django/views/debug.py\n\nclass ExceptionReporter:\n    # ...\n\n    def _get_explicit_or_implicit_cause(self, exc_value, seen_exceptions):\n        explicit = getattr(exc_value, \"__cause__\", None)\n        suppress_context = getattr(exc_value, \"__suppress_context__\", None)\n        implicit = getattr(exc_value, \"__context__\", None)\n        next_exc = explicit or (None if suppress_context else implicit)\n        if next_exc in seen_exceptions:\n            return None  # Break the cycle\n        return next_exc\n\n    def get_traceback_frames(self):\n        # Get the exception and all its causes\n        exceptions = []\n        exc_value = self.exc_value\n        seen_exceptions = set()  # Set to keep track of seen exceptions\n        while exc_value:\n            if exc_value in seen_exceptions:\n                warnings.warn(\n                    \"Cycle in the exception chain detected: exception '%s' \"\n                    \"encountered again.\" % exc_value,\n                    ExceptionCycleWarning,\n                )\n                break  # Break the loop if we've seen this exception before\n            seen_exceptions.add(exc_value)\n            exceptions.append(exc_value)\n            exc_value = self._get_explicit_or_implicit_cause(exc_value, seen_exceptions)\n\n        # ... rest of the method remains unchanged ...\n```\n\n- Ensure that the `seen_exceptions` set is passed to the `_get_explicit_or_implicit_cause` method within the while loop.\n- This change will prevent the infinite loop by breaking out of the loop if a cycle is detected in the exception causes.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__3.0/tree//django) \u2192 [views](https://github.com/testbed/django__django__3.0/tree//django/views)- [Lines 491 - 528](https://github.com/testbed/django__django__3.0/blob//django/views/debug.py#L491-L528)\n\n This snippet contains the 'get_traceback_frames' method where the infinite loop occurs due to a cycle in the exception chain. It is directly related to the issue and likely needs modification to fix the bug. \n\n\n   - [Lines 310 - 310](https://github.com/testbed/django__django__3.0/blob//django/views/debug.py#L310-L310)\n\n This snippet defines the 'ExceptionReporter' class where the 'get_traceback_frames' method is located. Understanding the context of the class may be necessary for a developer to solve the issue. \n\n\n   - [Lines 311 - 629](https://github.com/testbed/django__django__3.0/blob//django/views/debug.py#L311-L629)\n\n This snippet shows the '__init__' method of the 'ExceptionReporter' class, which initializes 'exc_value'. Understanding how 'exc_value' is set could be relevant to solving the issue.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0002705,
        "snippet_processor": 0.04281,
        "issue_star_creation": 0.01565,
        "issue_star_solver": 0.03757,
        "bouncer": 0.03152
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711731017.788147,
        "relevant_snippets": [
            {
                "code": "def _get_explicit_or_implicit_cause(self, exc_value):\n        explicit = getattr(exc_value, \"__cause__\", None)\n        suppress_context = getattr(exc_value, \"__suppress_context__\", None)\n        implicit = getattr(exc_value, \"__context__\", None)\n        return explicit or (None if suppress_context else implicit)\n\n    def get_traceback_frames(self):\n        # Get the exception and all its causes\n        exceptions = []\n        exc_value = self.exc_value\n        while exc_value:\n            exceptions.append(exc_value)\n            exc_value = self._get_explicit_or_implicit_cause(exc_value)\n            if exc_value in exceptions:\n                warnings.warn(\n                    \"Cycle in the exception chain detected: exception '%s' \"\n                    \"encountered again.\" % exc_value,\n                    ExceptionCycleWarning,\n                )\n                # Avoid infinite loop if there's a cyclic reference (#29393).\n                break\n\n        frames = []\n        # No exceptions were supplied to ExceptionReporter\n        if not exceptions:\n            return frames\n\n        # In case there's just one exception, take the traceback from self.tb\n        exc_value = exceptions.pop()\n        tb = self.tb if not exceptions else exc_value.__traceback__\n        while True:\n            frames.extend(self.get_exception_traceback_frames(exc_value, tb))\n            try:\n                exc_value = exceptions.pop()\n            except IndexError:\n                break\n            tb = exc_value.__traceback__\n        return frames",
                "filename": "django/views/debug.py",
                "start_index": 18979,
                "end_index": 20529,
                "start_line": 491,
                "end_line": 528,
                "max_line": 665,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "def get_exception_traceback_frames(self, exc_value, tb):",
                "filename": "django/views/debug.py",
                "start_index": 20535,
                "end_index": 20591,
                "start_line": 530,
                "end_line": 530,
                "max_line": 665,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "exc_cause = self._get_explicit_or_implicit_cause(exc_value)\n        exc_cause_explicit = getattr(exc_value, \"__cause__\", True)\n        if tb is None:\n            yield {\n                \"exc_cause\": exc_cause,\n                \"exc_cause_explicit\": exc_cause_explicit,\n                \"tb\": None,\n                \"type\": \"user\",\n            }",
                "filename": "django/views/debug.py",
                "start_index": 20600,
                "end_index": 20941,
                "start_line": 531,
                "end_line": 604,
                "max_line": 665,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "while tb is not None:\n            # Support for __traceback_hide__ which is used by a few libraries\n            # to hide internal frames.\n            if tb.tb_frame.f_locals.get(\"__traceback_hide__\"):\n                tb = tb.tb_next\n                continue\n            filename = tb.tb_frame.f_code.co_filename\n            function = tb.tb_frame.f_code.co_name\n            lineno = tb.tb_lineno - 1\n            loader = tb.tb_frame.f_globals.get(\"__loader__\")\n            module_name = tb.tb_frame.f_globals.get(\"__name__\") or \"\"\n            (\n                pre_context_lineno,\n                pre_context,\n                context_line,\n                post_context,\n            ) = self._get_lines_from_file(\n                filename,\n                lineno,\n                7,\n                loader,\n                module_name,\n            )\n            if pre_context_lineno is None:\n                pre_context_lineno = lineno\n                pre_context = []\n                context_line = \"<source code not available>\"\n                post_context = []\n\n            colno = tb_area_colno = \"\"\n            if PY311:\n                _, _, start_column, end_column = next(\n                    itertools.islice(\n                        tb.tb_frame.f_code.co_positions(), tb.tb_lasti // 2, None\n                    )\n                )\n                if start_column and end_column:\n                    underline = \"^\" * (end_column - start_column)\n                    spaces = \" \" * (start_column + len(str(lineno + 1)) + 2)\n                    colno = f\"\\n{spaces}{underline}\"\n                    tb_area_spaces = \" \" * (\n                        4\n                        + start_column\n                        - (len(context_line) - len(context_line.lstrip()))\n                    )\n                    tb_area_colno = f\"\\n{tb_area_spaces}{underline}\"\n            yield {\n                \"exc_cause\": exc_cause,\n                \"exc_cause_explicit\": exc_cause_explicit,\n                \"tb\": tb,\n                \"type\": \"django\" if module_name.startswith(\"django.\") else \"user\",\n                \"filename\": filename,\n                \"function\": function,\n                \"lineno\": lineno + 1,\n                \"vars\": self.filter.get_traceback_frame_variables(\n                    self.request, tb.tb_frame\n                ),\n                \"id\": id(tb),\n                \"pre_context\": pre_context,\n                \"context_line\": context_line,\n                \"post_context\": post_context,\n                \"pre_context_lineno\": pre_context_lineno + 1,\n                \"colno\": colno,\n                \"tb_area_colno\": tb_area_colno,\n            }\n            tb = tb.tb_next",
                "filename": "django/views/debug.py",
                "start_index": 20950,
                "end_index": 23634,
                "start_line": 540,
                "end_line": 605,
                "max_line": 665,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "class ExceptionReporter:",
                "filename": "django/views/debug.py",
                "start_index": 11709,
                "end_index": 11733,
                "start_line": 310,
                "end_line": 310,
                "max_line": 665,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "def get_traceback_data(self):",
                "filename": "django/views/debug.py",
                "start_index": 12856,
                "end_index": 12885,
                "start_line": 344,
                "end_line": 344,
                "max_line": 665,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "class SafeExceptionReporterFilter:",
                "filename": "django/views/debug.py",
                "start_index": 3361,
                "end_index": 3395,
                "start_line": 108,
                "end_line": 108,
                "max_line": 665,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "\"\"\"Organize and coordinate reporting on exceptions.\"\"\"\n\n    @property\n    def html_template_path(self):\n        return builtin_template_path(\"technical_500.html\")\n\n    @property\n    def text_template_path(self):\n        return builtin_template_path(\"technical_500.txt\")\n\n    def __init__(self, request, exc_type, exc_value, tb, is_email=False):\n        self.request = request\n        self.filter = get_exception_reporter_filter(self.request)\n        self.exc_type = exc_type\n        self.exc_value = exc_value\n        self.tb = tb\n        self.is_email = is_email\n\n        self.template_info = getattr(self.exc_value, \"template_debug\", None)\n        self.template_does_not_exist = False\n        self.postmortem = None\n\n    def _get_raw_insecure_uri(self):\n        \"\"\"\n        Return an absolute URI from variables available in this request. Skip\n        allowed hosts protection, so may return insecure URI.\n        \"\"\"\n        return \"{scheme}://{host}{path}\".format(\n            scheme=self.request.scheme,\n            host=self.request._get_raw_host(),\n            path=self.request.get_full_path(),\n        )",
                "filename": "django/views/debug.py",
                "start_index": 11738,
                "end_index": 12850,
                "start_line": 311,
                "end_line": 629,
                "max_line": 665,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "\"\"\"Return a dictionary containing traceback information.\"\"\"\n        if self.exc_type and issubclass(self.exc_type, TemplateDoesNotExist):\n            self.template_does_not_exist = True\n            self.postmortem = self.exc_value.chain or [self.exc_value]\n\n        frames = self.get_traceback_frames()\n        for i, frame in enumerate(frames):\n            if \"vars\" in frame:\n                frame_vars = []\n                for k, v in frame[\"vars\"]:\n                    v = pprint(v)\n                    # Trim large blobs of data\n                    if len(v) > 4096:\n                        v = \"%s\u2026 <trimmed %d bytes string>\" % (v[0:4096], len(v))\n                    frame_vars.append((k, v))\n                frame[\"vars\"] = frame_vars\n            frames[i] = frame\n\n        unicode_hint = \"\"\n        if self.exc_type and issubclass(self.exc_type, UnicodeError):\n            start = getattr(self.exc_value, \"start\", None)\n            end = getattr(self.exc_value, \"end\", None)\n            if start is not None and end is not None:\n                unicode_str = self.exc_value.args[1]\n                unicode_hint = force_str(\n                    unicode_str[max(start - 5, 0) : min(end + 5, len(unicode_str))],\n                    \"ascii\",\n                    errors=\"replace\",\n                )\n        from django import get_version\n\n        if self.request is None:\n            user_str = None\n        else:\n            try:\n                user_str = str(self.request.user)\n            except Exception:\n                # request.user may raise OperationalError if the database is\n                # unavailable, for example.\n                user_str = \"[unable to retrieve the current user]\"\n\n        c = {\n            \"is_email\": self.is_email,\n            \"unicode_hint\": unicode_hint,\n            \"frames\": frames,\n            \"request\": self.request,\n            \"request_meta\": self.filter.get_safe_request_meta(self.request),\n            \"request_COOKIES_items\": self.filter.get_safe_cookies(self.request).items(),\n            \"user_str\": user_str,\n            \"filtered_POST_items\": list(\n                self.filter.get_post_parameters(self.request).items()\n            ),\n            \"settings\": self.filter.get_safe_settings(),\n            \"sys_executable\": sys.executable,\n            \"sys_version_info\": \"%d.%d.%d\" % sys.version_info[0:3],\n            \"server_time\": timezone.now(),\n            \"django_version_info\": get_version(),\n            \"sys_path\": sys.path,\n            \"template_info\": self.template_info,\n            \"template_does_not_exist\": self.template_does_not_exist,\n            \"postmortem\": self.postmortem,\n        }\n        if self.request is not None:\n            c[\"request_GET_items\"] = self.request.GET.items()\n            c[\"request_FILES_items\"] = self.request.FILES.items()\n            c[\"request_insecure_uri\"] = self._get_raw_insecure_uri()\n            c[\"raising_view_name\"] = get_caller(self.request)",
                "filename": "django/views/debug.py",
                "start_index": 12894,
                "end_index": 15850,
                "start_line": 345,
                "end_line": 411,
                "max_line": 665,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "def __exit__(self, exc_type, exc_value, traceback):",
                "filename": "django/db/transaction.py",
                "start_index": 7407,
                "end_index": 7458,
                "start_line": 224,
                "end_line": 224,
                "max_line": 340,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "django/views/debug.py": [
                {
                    "chunk": {
                        "code": "def _get_explicit_or_implicit_cause(self, exc_value):\n        explicit = getattr(exc_value, \"__cause__\", None)\n        suppress_context = getattr(exc_value, \"__suppress_context__\", None)\n        implicit = getattr(exc_value, \"__context__\", None)\n        return explicit or (None if suppress_context else implicit)\n\n    def get_traceback_frames(self):\n        # Get the exception and all its causes\n        exceptions = []\n        exc_value = self.exc_value\n        while exc_value:\n            exceptions.append(exc_value)\n            exc_value = self._get_explicit_or_implicit_cause(exc_value)\n            if exc_value in exceptions:\n                warnings.warn(\n                    \"Cycle in the exception chain detected: exception '%s' \"\n                    \"encountered again.\" % exc_value,\n                    ExceptionCycleWarning,\n                )\n                # Avoid infinite loop if there's a cyclic reference (#29393).\n                break\n\n        frames = []\n        # No exceptions were supplied to ExceptionReporter\n        if not exceptions:\n            return frames\n\n        # In case there's just one exception, take the traceback from self.tb\n        exc_value = exceptions.pop()\n        tb = self.tb if not exceptions else exc_value.__traceback__\n        while True:\n            frames.extend(self.get_exception_traceback_frames(exc_value, tb))\n            try:\n                exc_value = exceptions.pop()\n            except IndexError:\n                break\n            tb = exc_value.__traceback__\n        return frames",
                        "filename": "django/views/debug.py",
                        "start_index": 18979,
                        "end_index": 20529,
                        "start_line": 491,
                        "end_line": 528,
                        "max_line": 665,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the 'get_traceback_frames' method where the infinite loop occurs due to a cycle in the exception chain. It is directly related to the issue and likely needs modification to fix the bug."
                },
                {
                    "chunk": {
                        "code": "class ExceptionReporter:",
                        "filename": "django/views/debug.py",
                        "start_index": 11709,
                        "end_index": 11733,
                        "start_line": 310,
                        "end_line": 310,
                        "max_line": 665,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet defines the 'ExceptionReporter' class where the 'get_traceback_frames' method is located. Understanding the context of the class may be necessary for a developer to solve the issue."
                },
                {
                    "chunk": {
                        "code": "\"\"\"Organize and coordinate reporting on exceptions.\"\"\"\n\n    @property\n    def html_template_path(self):\n        return builtin_template_path(\"technical_500.html\")\n\n    @property\n    def text_template_path(self):\n        return builtin_template_path(\"technical_500.txt\")\n\n    def __init__(self, request, exc_type, exc_value, tb, is_email=False):\n        self.request = request\n        self.filter = get_exception_reporter_filter(self.request)\n        self.exc_type = exc_type\n        self.exc_value = exc_value\n        self.tb = tb\n        self.is_email = is_email\n\n        self.template_info = getattr(self.exc_value, \"template_debug\", None)\n        self.template_does_not_exist = False\n        self.postmortem = None\n\n    def _get_raw_insecure_uri(self):\n        \"\"\"\n        Return an absolute URI from variables available in this request. Skip\n        allowed hosts protection, so may return insecure URI.\n        \"\"\"\n        return \"{scheme}://{host}{path}\".format(\n            scheme=self.request.scheme,\n            host=self.request._get_raw_host(),\n            path=self.request.get_full_path(),\n        )",
                        "filename": "django/views/debug.py",
                        "start_index": 11738,
                        "end_index": 12850,
                        "start_line": 311,
                        "end_line": 629,
                        "max_line": 665,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet shows the '__init__' method of the 'ExceptionReporter' class, which initializes 'exc_value'. Understanding how 'exc_value' is set could be relevant to solving the issue."
                }
            ]
        },
        "solution_task": "- Modify the `_get_explicit_or_implicit_cause` method in `django/views/debug.py` to prevent an infinite loop by checking for cycles in the exception causes.\n- Implement a check to see if `exc_value` has already been processed by maintaining a set of visited exceptions.\n- Update the while loop in `get_traceback_frames` to use the modified `_get_explicit_or_implicit_cause` method.\n\n```python\n# Filename: django/views/debug.py\n\nclass ExceptionReporter:\n    # ...\n\n    def _get_explicit_or_implicit_cause(self, exc_value, seen_exceptions):\n        explicit = getattr(exc_value, \"__cause__\", None)\n        suppress_context = getattr(exc_value, \"__suppress_context__\", None)\n        implicit = getattr(exc_value, \"__context__\", None)\n        next_exc = explicit or (None if suppress_context else implicit)\n        if next_exc in seen_exceptions:\n            return None  # Break the cycle\n        return next_exc\n\n    def get_traceback_frames(self):\n        # Get the exception and all its causes\n        exceptions = []\n        exc_value = self.exc_value\n        seen_exceptions = set()  # Set to keep track of seen exceptions\n        while exc_value:\n            if exc_value in seen_exceptions:\n                warnings.warn(\n                    \"Cycle in the exception chain detected: exception '%s' \"\n                    \"encountered again.\" % exc_value,\n                    ExceptionCycleWarning,\n                )\n                break  # Break the loop if we've seen this exception before\n            seen_exceptions.add(exc_value)\n            exceptions.append(exc_value)\n            exc_value = self._get_explicit_or_implicit_cause(exc_value, seen_exceptions)\n\n        # ... rest of the method remains unchanged ...\n```\n\n- Ensure that the `seen_exceptions` set is passed to the `_get_explicit_or_implicit_cause` method within the while loop.\n- This change will prevent the infinite loop by breaking out of the loop if a cycle is detected in the exception causes.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable solution to the infinite loop problem in the ExceptionReporter.get_traceback_frames() method. It suggests modifying the '_get_explicit_or_implicit_cause' method to check for cycles in exception causes and to maintain a set of visited exceptions to prevent reprocessing the same exception. The provided code snippet is directly relevant and offers a clear implementation strategy, including the addition of a warning when a cycle is detected. The RESPONSE also correctly identifies the relevant code snippets to check in the Django repository, which is useful for a developer addressing the bug. The only reason it does not score a 10 is that it does not explicitly mention testing the changes to ensure they resolve the issue without introducing new ones.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711731131.65617,
        "result": "- Modify the `_get_explicit_or_implicit_cause` method in `django/views/debug.py` to prevent an infinite loop by checking for cycles in the exception causes.\n- Implement a check to see if `exc_value` has already been processed by maintaining a set of visited exceptions.\n- Update the while loop in `get_traceback_frames` to use the modified `_get_explicit_or_implicit_cause` method.\n\n```python\n# Filename: django/views/debug.py\n\nclass ExceptionReporter:\n    # ...\n\n    def _get_explicit_or_implicit_cause(self, exc_value, seen_exceptions):\n        explicit = getattr(exc_value, \"__cause__\", None)\n        suppress_context = getattr(exc_value, \"__suppress_context__\", None)\n        implicit = getattr(exc_value, \"__context__\", None)\n        next_exc = explicit or (None if suppress_context else implicit)\n        if next_exc in seen_exceptions:\n            return None  # Break the cycle\n        return next_exc\n\n    def get_traceback_frames(self):\n        # Get the exception and all its causes\n        exceptions = []\n        exc_value = self.exc_value\n        seen_exceptions = set()  # Set to keep track of seen exceptions\n        while exc_value:\n            if exc_value in seen_exceptions:\n                warnings.warn(\n                    \"Cycle in the exception chain detected: exception '%s' \"\n                    \"encountered again.\" % exc_value,\n                    ExceptionCycleWarning,\n                )\n                break  # Break the loop if we've seen this exception before\n            seen_exceptions.add(exc_value)\n            exceptions.append(exc_value)\n            exc_value = self._get_explicit_or_implicit_cause(exc_value, seen_exceptions)\n\n        # ... rest of the method remains unchanged ...\n```\n\n- Ensure that the `seen_exceptions` set is passed to the `_get_explicit_or_implicit_cause` method within the while loop.\n- This change will prevent the infinite loop by breaking out of the loop if a cycle is detected in the exception causes.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__3.0/tree//django) \u2192 [views](https://github.com/testbed/django__django__3.0/tree//django/views)- [Lines 491 - 528](https://github.com/testbed/django__django__3.0/blob//django/views/debug.py#L491-L528)\n\n This snippet contains the 'get_traceback_frames' method where the infinite loop occurs due to a cycle in the exception chain. It is directly related to the issue and likely needs modification to fix the bug. \n\n\n   - [Lines 310 - 310](https://github.com/testbed/django__django__3.0/blob//django/views/debug.py#L310-L310)\n\n This snippet defines the 'ExceptionReporter' class where the 'get_traceback_frames' method is located. Understanding the context of the class may be necessary for a developer to solve the issue. \n\n\n   - [Lines 311 - 629](https://github.com/testbed/django__django__3.0/blob//django/views/debug.py#L311-L629)\n\n This snippet shows the '__init__' method of the 'ExceptionReporter' class, which initializes 'exc_value'. Understanding how 'exc_value' is set could be relevant to solving the issue."
    }
}