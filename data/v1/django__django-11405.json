{
    "id": "django__django-11405",
    "repo_name": "testbed/django__django__3.0",
    "task_id": 4158607265394757950,
    "title": "Queryset ordering and Meta.ordering are mutable on expressions with reverse().",
    "body": "Description\n\t\nQueryset order and Meta.ordering are mutable with reverse().\nBug revealed by running ./runtests.py ordering.test --reverse (reproduced at a2c31e12da272acc76f3a3a0157fae9a7f6477ac).\nIt seems that test added in f218a2ff455b5f7391dd38038994f2c5f8b0eca1 wasn't correct because order mutates on queryset execution in \u200bSQLCompiler.get_order_by().\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/django__django__3.0.git",
    "requested_commit": "",
    "mayil_response": "- Review the `SQLCompiler.get_order_by` method in `django/db/models/sql/compiler.py` to ensure that the queryset's `ordering` is not being mutated unexpectedly when `reverse()` is called.\n- Check if `reverse_ordering` method in `django/db/models/expressions.py` properly toggles the `descending` attribute without causing side effects to the original queryset.\n- Verify that the `reverse()` method on a queryset correctly creates a new queryset with reversed ordering, rather than mutating the existing queryset.\n- Ensure that the `Meta.ordering` attribute in the model definition is respected and not overridden unintentionally when `reverse()` is applied to a queryset.\n- Investigate the test case added in commit `f218a2ff455b5f7391dd38038994f2c5f8b0eca1` to see if it accurately tests the immutability of queryset ordering after `reverse()` is called.\n- If the test case is not correct, update it to properly test the expected behavior of `reverse()` in combination with `Meta.ordering`.\n- Run `./runtests.py ordering.test --reverse` to confirm that the issue is resolved and no other related tests are failing.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__3.0/tree//django) \u2192 [db](https://github.com/testbed/django__django__3.0/tree//django/db) \u2192 [models](https://github.com/testbed/django__django__3.0/tree//django/db/models) \u2192 [sql](https://github.com/testbed/django__django__3.0/tree//django/db/models/sql)- [Lines 317 - 341](https://github.com/testbed/django__django__3.0/blob//django/db/models/sql/compiler.py#L317-L341)\n\n This snippet from 'django/db/models/sql/compiler.py' shows the logic for determining the ordering of a queryset, which is directly related to the issue of queryset ordering being mutable when using reverse(). \n\n\n   - [Lines 459 - 1596](https://github.com/testbed/django__django__3.0/blob//django/db/models/sql/compiler.py#L459-L1596)\n\n This snippet from 'django/db/models/sql/compiler.py' is involved in the process of compiling the order by clause, which could be affected by the reverse() method and thus is relevant to the issue.\n-  \u2192 [django](https://github.com/testbed/django__django__3.0/tree//django) \u2192 [db](https://github.com/testbed/django__django__3.0/tree//django/db) \u2192 [models](https://github.com/testbed/django__django__3.0/tree//django/db/models)- [Lines 448 - 1694](https://github.com/testbed/django__django__3.0/blob//django/db/models/expressions.py#L448-L1694)\n\n This snippet from 'django/db/models/expressions.py' contains the 'reverse_ordering' method, which is likely to be involved in the issue since the bug report mentions that the order mutates on queryset execution with reverse().\n-  \u2192 [django](https://github.com/testbed/django__django__3.0/tree//django) \u2192 [db](https://github.com/testbed/django__django__3.0/tree//django/db) \u2192 [models](https://github.com/testbed/django__django__3.0/tree//django/db/models) \u2192 [sql](https://github.com/testbed/django__django__3.0/tree//django/db/models/sql)- [Lines 2182 - 2232](https://github.com/testbed/django__django__3.0/blob//django/db/models/sql/query.py#L2182-L2232)\n\n This snippet from 'django/db/models/sql/query.py' includes the 'add_ordering' method, which is relevant to the issue as it deals with how ordering is added to a queryset and may be part of the mutation problem when reversed.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0004595,
        "snippet_processor": 0.04646,
        "issue_star_creation": 0.024209999999999995,
        "issue_star_solver": 0.05283,
        "bouncer": 0.03115
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711728609.513238,
        "relevant_snippets": [
            {
                "code": "if self.query.extra_order_by:\n            ordering = self.query.extra_order_by\n        elif not self.query.default_ordering:\n            ordering = self.query.order_by\n        elif self.query.order_by:\n            ordering = self.query.order_by\n        elif (meta := self.query.get_meta()) and meta.ordering:\n            ordering = meta.ordering\n            self._meta_ordering = ordering\n        else:\n            ordering = []\n        if self.query.standard_ordering:\n            default_order, _ = ORDER_DIR[\"ASC\"]\n        else:\n            default_order, _ = ORDER_DIR[\"DESC\"]\n\n        selected_exprs = {}\n        # Avoid computing `selected_exprs` if there is no `ordering` as it's\n        # relatively expensive.\n        if ordering and (select := self.select):\n            for ordinal, (expr, _, alias) in enumerate(select, start=1):\n                pos_expr = PositionRef(ordinal, alias, expr)\n                if alias:\n                    selected_exprs[alias] = pos_expr\n                selected_exprs[expr] = pos_expr",
                "filename": "django/db/models/sql/compiler.py",
                "start_index": 13331,
                "end_index": 14359,
                "start_line": 317,
                "end_line": 341,
                "max_line": 2099,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "@deconstructible(path=\"django.db.models.OrderBy\")",
                "filename": "django/db/models/expressions.py",
                "start_index": 54945,
                "end_index": 54994,
                "start_line": 1606,
                "end_line": 1606,
                "max_line": 1890,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "def reverse_ordering(self):\n        self.descending = not self.descending\n        if self.nulls_first:\n            self.nulls_last = True\n            self.nulls_first = None\n        elif self.nulls_last:\n            self.nulls_first = True\n            self.nulls_last = None\n        return self\n\n    def asc(self):\n        self.descending = False\n\n    def desc(self):\n        self.descending = True",
                "filename": "django/db/models/expressions.py",
                "start_index": 57932,
                "end_index": 58330,
                "start_line": 448,
                "end_line": 1694,
                "max_line": 1890,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "from django.db.models.expressions import OrderByList\n\n\nclass OrderableAggMixin:\n    def __init__(self, *expressions, ordering=(), **extra):\n        if isinstance(ordering, (list, tuple)):\n            self.order_by = OrderByList(*ordering)\n        else:\n            self.order_by = OrderByList(ordering)\n        super().__init__(*expressions, **extra)\n\n    def resolve_expression(self, *args, **kwargs):\n        self.order_by = self.order_by.resolve_expression(*args, **kwargs)\n        return super().resolve_expression(*args, **kwargs)\n\n    def get_source_expressions(self):\n        if self.order_by.source_expressions:\n            return super().get_source_expressions() + [self.order_by]\n        return super().get_source_expressions()\n\n    def set_source_expressions(self, exprs):\n        if isinstance(exprs[-1], OrderByList):\n            *exprs, self.order_by = exprs\n        return super().set_source_expressions(exprs)\n\n    def as_sql(self, compiler, connection):\n        order_by_sql, order_by_params = compiler.compile(self.order_by)\n        sql, sql_params = super().as_sql(compiler, connection, ordering=order_by_sql)\n        return sql, (*sql_params, *order_by_params)",
                "filename": "django/contrib/postgres/aggregates/mixins.py",
                "start_index": 0,
                "end_index": 1180,
                "start_line": 1,
                "end_line": 29,
                "max_line": 29,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "@total_ordering",
                "filename": "django/db/models/fields/__init__.py",
                "start_index": 2908,
                "end_index": 2923,
                "start_line": 113,
                "end_line": 662,
                "max_line": 2869,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "@total_ordering",
                "filename": "django/contrib/gis/geos/mutable_list.py",
                "start_index": 351,
                "end_index": 366,
                "start_line": 14,
                "end_line": 14,
                "max_line": 314,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "@total_ordering",
                "filename": "django/contrib/gis/measure.py",
                "start_index": 2124,
                "end_index": 2139,
                "start_line": 51,
                "end_line": 51,
                "max_line": 368,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "for expr, is_ref in self._order_by_pairs():\n            resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)\n            if not is_ref and self.query.combinator and self.select:\n                src = resolved.expression\n                expr_src = expr.expression\n                for sel_expr, _, col_alias in self.select:\n                    if src == sel_expr:\n                        # When values() is used the exact alias must be used to\n                        # reference annotations.\n                        if (\n                            self.query.has_select_fields\n                            and col_alias in self.query.annotation_select\n                            and not (\n                                isinstance(expr_src, F) and col_alias == expr_src.name\n                            )\n                        ):\n                            continue\n                        resolved.set_source_expressions(\n                            [Ref(col_alias if col_alias else src.target.column, src)]\n                        )\n                        break\n                else:\n                    # Add column used in ORDER BY clause to the selected\n                    # columns and to each combined query.\n                    order_by_idx = len(self.query.select) + 1\n                    col_alias = f\"__orderbycol{order_by_idx}\"\n                    for q in self.query.combined_queries:\n                        # If fields were explicitly selected through values()\n                        # combined queries cannot be augmented.\n                        if q.has_select_fields:\n                            raise DatabaseError(\n                                \"ORDER BY term does not match any column in \"\n                                \"the result set.\"\n                            )\n                        q.add_annotation(expr_src, col_alias)\n                    self.query.add_select_col(resolved, col_alias)\n                    resolved.set_source_expressions([Ref(col_alias, src)])\n            sql, params = self.compile(resolved)\n            # Don't add the same column twice, but the order direction is\n            # not taken into account so we strip it. When this entire method\n            # is refactored into expressions, then we can check each part as we\n            # generate it.\n            without_ordering = self.ordering_parts.search(sql)[1]\n            params_hash = make_hashable(params)\n            if (without_ordering, params_hash) in seen:\n                continue\n            seen.add((without_ordering, params_hash))\n            result.append((resolved, (sql, params, is_ref)))\n        return result",
                "filename": "django/db/models/sql/compiler.py",
                "start_index": 19393,
                "end_index": 22060,
                "start_line": 459,
                "end_line": 1596,
                "max_line": 2099,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "def add_ordering(self, *ordering):\n        \"\"\"\n        Add items from the 'ordering' sequence to the query's \"order by\"\n        clause. These items are either field names (not column names) --\n        possibly with a direction prefix ('-' or '?') -- or OrderBy\n        expressions.\n\n        If 'ordering' is empty, clear all ordering from the query.\n        \"\"\"\n        errors = []\n        for item in ordering:\n            if isinstance(item, str):\n                if item == \"?\":\n                    continue\n                item = item.removeprefix(\"-\")\n                if item in self.annotations:\n                    continue\n                if self.extra and item in self.extra:\n                    continue\n                # names_to_path() validates the lookup. A descriptive\n                # FieldError will be raise if it's not.\n                self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)\n            elif not hasattr(item, \"resolve_expression\"):\n                errors.append(item)\n            if getattr(item, \"contains_aggregate\", False):\n                raise FieldError(\n                    \"Using an aggregate in order_by() without also including \"\n                    \"it in annotate() is not allowed: %s\" % item\n                )\n        if errors:\n            raise FieldError(\"Invalid order_by arguments: %s\" % errors)\n        if ordering:\n            self.order_by += ordering\n        else:\n            self.default_ordering = False\n\n    def clear_ordering(self, force=False, clear_default=True):\n        \"\"\"\n        Remove any ordering settings if the current query allows it without\n        side effects, set 'force' to True to clear the ordering regardless.\n        If 'clear_default' is True, there will be no ordering in the resulting\n        query (not even the model's default).\n        \"\"\"\n        if not force and (\n            self.is_sliced or self.distinct_fields or self.select_for_update\n        ):\n            return\n        self.order_by = ()\n        self.extra_order_by = ()\n        if clear_default:\n            self.default_ordering = False",
                "filename": "django/db/models/sql/query.py",
                "start_index": 92006,
                "end_index": 94104,
                "start_line": 2182,
                "end_line": 2232,
                "max_line": 2687,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "class SQLCompiler:\n    # Multiline ordering SQL clause may appear from RawSQL.",
                "filename": "django/db/models/sql/compiler.py",
                "start_index": 1202,
                "end_index": 1280,
                "start_line": 39,
                "end_line": 40,
                "max_line": 2099,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "django/db/models/sql/compiler.py": [
                {
                    "chunk": {
                        "code": "if self.query.extra_order_by:\n            ordering = self.query.extra_order_by\n        elif not self.query.default_ordering:\n            ordering = self.query.order_by\n        elif self.query.order_by:\n            ordering = self.query.order_by\n        elif (meta := self.query.get_meta()) and meta.ordering:\n            ordering = meta.ordering\n            self._meta_ordering = ordering\n        else:\n            ordering = []\n        if self.query.standard_ordering:\n            default_order, _ = ORDER_DIR[\"ASC\"]\n        else:\n            default_order, _ = ORDER_DIR[\"DESC\"]\n\n        selected_exprs = {}\n        # Avoid computing `selected_exprs` if there is no `ordering` as it's\n        # relatively expensive.\n        if ordering and (select := self.select):\n            for ordinal, (expr, _, alias) in enumerate(select, start=1):\n                pos_expr = PositionRef(ordinal, alias, expr)\n                if alias:\n                    selected_exprs[alias] = pos_expr\n                selected_exprs[expr] = pos_expr",
                        "filename": "django/db/models/sql/compiler.py",
                        "start_index": 13331,
                        "end_index": 14359,
                        "start_line": 317,
                        "end_line": 341,
                        "max_line": 2099,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet from 'django/db/models/sql/compiler.py' shows the logic for determining the ordering of a queryset, which is directly related to the issue of queryset ordering being mutable when using reverse()."
                },
                {
                    "chunk": {
                        "code": "for expr, is_ref in self._order_by_pairs():\n            resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)\n            if not is_ref and self.query.combinator and self.select:\n                src = resolved.expression\n                expr_src = expr.expression\n                for sel_expr, _, col_alias in self.select:\n                    if src == sel_expr:\n                        # When values() is used the exact alias must be used to\n                        # reference annotations.\n                        if (\n                            self.query.has_select_fields\n                            and col_alias in self.query.annotation_select\n                            and not (\n                                isinstance(expr_src, F) and col_alias == expr_src.name\n                            )\n                        ):\n                            continue\n                        resolved.set_source_expressions(\n                            [Ref(col_alias if col_alias else src.target.column, src)]\n                        )\n                        break\n                else:\n                    # Add column used in ORDER BY clause to the selected\n                    # columns and to each combined query.\n                    order_by_idx = len(self.query.select) + 1\n                    col_alias = f\"__orderbycol{order_by_idx}\"\n                    for q in self.query.combined_queries:\n                        # If fields were explicitly selected through values()\n                        # combined queries cannot be augmented.\n                        if q.has_select_fields:\n                            raise DatabaseError(\n                                \"ORDER BY term does not match any column in \"\n                                \"the result set.\"\n                            )\n                        q.add_annotation(expr_src, col_alias)\n                    self.query.add_select_col(resolved, col_alias)\n                    resolved.set_source_expressions([Ref(col_alias, src)])\n            sql, params = self.compile(resolved)\n            # Don't add the same column twice, but the order direction is\n            # not taken into account so we strip it. When this entire method\n            # is refactored into expressions, then we can check each part as we\n            # generate it.\n            without_ordering = self.ordering_parts.search(sql)[1]\n            params_hash = make_hashable(params)\n            if (without_ordering, params_hash) in seen:\n                continue\n            seen.add((without_ordering, params_hash))\n            result.append((resolved, (sql, params, is_ref)))\n        return result",
                        "filename": "django/db/models/sql/compiler.py",
                        "start_index": 19393,
                        "end_index": 22060,
                        "start_line": 459,
                        "end_line": 1596,
                        "max_line": 2099,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet from 'django/db/models/sql/compiler.py' is involved in the process of compiling the order by clause, which could be affected by the reverse() method and thus is relevant to the issue."
                }
            ],
            "django/db/models/expressions.py": [
                {
                    "chunk": {
                        "code": "def reverse_ordering(self):\n        self.descending = not self.descending\n        if self.nulls_first:\n            self.nulls_last = True\n            self.nulls_first = None\n        elif self.nulls_last:\n            self.nulls_first = True\n            self.nulls_last = None\n        return self\n\n    def asc(self):\n        self.descending = False\n\n    def desc(self):\n        self.descending = True",
                        "filename": "django/db/models/expressions.py",
                        "start_index": 57932,
                        "end_index": 58330,
                        "start_line": 448,
                        "end_line": 1694,
                        "max_line": 1890,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet from 'django/db/models/expressions.py' contains the 'reverse_ordering' method, which is likely to be involved in the issue since the bug report mentions that the order mutates on queryset execution with reverse()."
                }
            ],
            "django/db/models/sql/query.py": [
                {
                    "chunk": {
                        "code": "def add_ordering(self, *ordering):\n        \"\"\"\n        Add items from the 'ordering' sequence to the query's \"order by\"\n        clause. These items are either field names (not column names) --\n        possibly with a direction prefix ('-' or '?') -- or OrderBy\n        expressions.\n\n        If 'ordering' is empty, clear all ordering from the query.\n        \"\"\"\n        errors = []\n        for item in ordering:\n            if isinstance(item, str):\n                if item == \"?\":\n                    continue\n                item = item.removeprefix(\"-\")\n                if item in self.annotations:\n                    continue\n                if self.extra and item in self.extra:\n                    continue\n                # names_to_path() validates the lookup. A descriptive\n                # FieldError will be raise if it's not.\n                self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)\n            elif not hasattr(item, \"resolve_expression\"):\n                errors.append(item)\n            if getattr(item, \"contains_aggregate\", False):\n                raise FieldError(\n                    \"Using an aggregate in order_by() without also including \"\n                    \"it in annotate() is not allowed: %s\" % item\n                )\n        if errors:\n            raise FieldError(\"Invalid order_by arguments: %s\" % errors)\n        if ordering:\n            self.order_by += ordering\n        else:\n            self.default_ordering = False\n\n    def clear_ordering(self, force=False, clear_default=True):\n        \"\"\"\n        Remove any ordering settings if the current query allows it without\n        side effects, set 'force' to True to clear the ordering regardless.\n        If 'clear_default' is True, there will be no ordering in the resulting\n        query (not even the model's default).\n        \"\"\"\n        if not force and (\n            self.is_sliced or self.distinct_fields or self.select_for_update\n        ):\n            return\n        self.order_by = ()\n        self.extra_order_by = ()\n        if clear_default:\n            self.default_ordering = False",
                        "filename": "django/db/models/sql/query.py",
                        "start_index": 92006,
                        "end_index": 94104,
                        "start_line": 2182,
                        "end_line": 2232,
                        "max_line": 2687,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet from 'django/db/models/sql/query.py' includes the 'add_ordering' method, which is relevant to the issue as it deals with how ordering is added to a queryset and may be part of the mutation problem when reversed."
                }
            ]
        },
        "solution_task": "- Review the `SQLCompiler.get_order_by` method in `django/db/models/sql/compiler.py` to ensure that the queryset's `ordering` is not being mutated unexpectedly when `reverse()` is called.\n- Check if `reverse_ordering` method in `django/db/models/expressions.py` properly toggles the `descending` attribute without causing side effects to the original queryset.\n- Verify that the `reverse()` method on a queryset correctly creates a new queryset with reversed ordering, rather than mutating the existing queryset.\n- Ensure that the `Meta.ordering` attribute in the model definition is respected and not overridden unintentionally when `reverse()` is applied to a queryset.\n- Investigate the test case added in commit `f218a2ff455b5f7391dd38038994f2c5f8b0eca1` to see if it accurately tests the immutability of queryset ordering after `reverse()` is called.\n- If the test case is not correct, update it to properly test the expected behavior of `reverse()` in combination with `Meta.ordering`.\n- Run `./runtests.py ordering.test --reverse` to confirm that the issue is resolved and no other related tests are failing.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a detailed and structured approach to addressing the bug related to queryset ordering and Meta.ordering being mutable when reverse() is called. It suggests reviewing specific methods in the Django codebase that are likely to be the source of the bug, such as `SQLCompiler.get_order_by`, `reverse_ordering`, and the `reverse()` method on a queryset. Additionally, it advises checking the `Meta.ordering` attribute and investigating the test case that may not be correctly testing the immutability of queryset ordering. The RESPONSE also includes running tests to confirm the resolution of the issue, which is a crucial step in the debugging process. The inclusion of code snippets with direct links to the relevant lines in the Django repository adds significant value, as it guides the developer to the exact locations in the code that require attention. The RESPONSE is comprehensive and directly addresses all aspects of the described bug, facilitating its resolution.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711728822.417999,
        "result": "- Review the `SQLCompiler.get_order_by` method in `django/db/models/sql/compiler.py` to ensure that the queryset's `ordering` is not being mutated unexpectedly when `reverse()` is called.\n- Check if `reverse_ordering` method in `django/db/models/expressions.py` properly toggles the `descending` attribute without causing side effects to the original queryset.\n- Verify that the `reverse()` method on a queryset correctly creates a new queryset with reversed ordering, rather than mutating the existing queryset.\n- Ensure that the `Meta.ordering` attribute in the model definition is respected and not overridden unintentionally when `reverse()` is applied to a queryset.\n- Investigate the test case added in commit `f218a2ff455b5f7391dd38038994f2c5f8b0eca1` to see if it accurately tests the immutability of queryset ordering after `reverse()` is called.\n- If the test case is not correct, update it to properly test the expected behavior of `reverse()` in combination with `Meta.ordering`.\n- Run `./runtests.py ordering.test --reverse` to confirm that the issue is resolved and no other related tests are failing.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__3.0/tree//django) \u2192 [db](https://github.com/testbed/django__django__3.0/tree//django/db) \u2192 [models](https://github.com/testbed/django__django__3.0/tree//django/db/models) \u2192 [sql](https://github.com/testbed/django__django__3.0/tree//django/db/models/sql)- [Lines 317 - 341](https://github.com/testbed/django__django__3.0/blob//django/db/models/sql/compiler.py#L317-L341)\n\n This snippet from 'django/db/models/sql/compiler.py' shows the logic for determining the ordering of a queryset, which is directly related to the issue of queryset ordering being mutable when using reverse(). \n\n\n   - [Lines 459 - 1596](https://github.com/testbed/django__django__3.0/blob//django/db/models/sql/compiler.py#L459-L1596)\n\n This snippet from 'django/db/models/sql/compiler.py' is involved in the process of compiling the order by clause, which could be affected by the reverse() method and thus is relevant to the issue.\n-  \u2192 [django](https://github.com/testbed/django__django__3.0/tree//django) \u2192 [db](https://github.com/testbed/django__django__3.0/tree//django/db) \u2192 [models](https://github.com/testbed/django__django__3.0/tree//django/db/models)- [Lines 448 - 1694](https://github.com/testbed/django__django__3.0/blob//django/db/models/expressions.py#L448-L1694)\n\n This snippet from 'django/db/models/expressions.py' contains the 'reverse_ordering' method, which is likely to be involved in the issue since the bug report mentions that the order mutates on queryset execution with reverse().\n-  \u2192 [django](https://github.com/testbed/django__django__3.0/tree//django) \u2192 [db](https://github.com/testbed/django__django__3.0/tree//django/db) \u2192 [models](https://github.com/testbed/django__django__3.0/tree//django/db/models) \u2192 [sql](https://github.com/testbed/django__django__3.0/tree//django/db/models/sql)- [Lines 2182 - 2232](https://github.com/testbed/django__django__3.0/blob//django/db/models/sql/query.py#L2182-L2232)\n\n This snippet from 'django/db/models/sql/query.py' includes the 'add_ordering' method, which is relevant to the issue as it deals with how ordering is added to a queryset and may be part of the mutation problem when reversed."
    }
}