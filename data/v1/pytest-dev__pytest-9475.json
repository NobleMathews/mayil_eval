{
    "id": "pytest-dev__pytest-9475",
    "repo_name": "testbed/pytest-dev__pytest__7.1",
    "task_id": 7054792659178252498,
    "title": "[prerelease] `deselected` addition to `assert_outcomes()` is backwards-incompatible",
    "body": "#9133 added a new `deselected` parameter to `assert_outcomes()`, cc @okken.\r\n\r\nHowever, this actually is an incompatible change: Doing e.g. `result = testdir.runpytest(\"-k\", \"test_not_found_by_ini\")` followed by `result.assert_outcomes(passed=2)` worked fine before, but now fails because the now included `'deselected': ...` does not equal `'deselected': 0`.\r\n\r\nThis breaks pytest-bdd: https://github.com/pytest-dev/pytest-bdd/issues/466 - I could swear I also saw another project in #9415 fail after fixing the initial issue it had, but then Christmas and stuff came along and now I don't remember which one it was, and of course can't find it anymore.\r\n\r\nA (quite) [rough search](https://sourcegraph.com/search?q=context:global+%28testdir%7Cpytester%29%5C..*-k+lang:python+-file:.*/%3Ftesting/%28test_terminal%7Cacceptance_test%7Ctest_runner%7Ctest_collection%7Ctest_pytester%7Ctest_debugging%7Ctest_mark%7Cdeprecated_test%7Ctest_terminal%7Cpython/%29.*+-repo:pytest-dev/pytest-bdd&patternType=regexp) reveals that more projects might be affected by this (excludes to avoid matches in copies of pytest's source code).\r\n\r\nSome examples I could dig up (but haven't verified):\r\n\r\n- [test_parametrization.py - schemathesis/schemathesis - Sourcegraph](https://sourcegraph.com/github.com/schemathesis/schemathesis/-/blob/test/test_parametrization.py?L445:14)\r\n- [test_ipa_run_tests.py - freeipa/freeipa - Sourcegraph](https://sourcegraph.com/github.com/freeipa/freeipa/-/blob/ipatests/test_ipatests_plugins/test_ipa_run_tests.py?L117:17) (maybe)\r\n- [test_parametrized.py - pytest-dev/pytest-play - Sourcegraph](https://sourcegraph.com/github.com/pytest-dev/pytest-play/-/blob/tests/test_parametrized.py?L94:14)\r\n\r\nI think the change in itself makes sense, but at the same time fixes like https://github.com/pytest-dev/pytest-bdd/pull/470 are a bit cumbersome.\r\n\r\nTwo questions:\r\n\r\n- What should we do about this for 7.0? (even if the answer just is \"live with it and document it as backwards-incompatible in the changelog)\r\n- What (if anything) should we do about this so that it doesn't happen again for future releases? I guess not much we can do, as long as we want to assume 0 for outcomes which have not been given...\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pytest-dev__pytest__7.1.git",
    "requested_commit": "",
    "mayil_response": "To address the issue with the `assert_outcomes()` function in the pytest-bdd project, where the addition of the `deselected` parameter is causing backward compatibility issues, follow these steps:\n\n- Modify the `assert_outcomes()` method in the `Result` class to set a default value for the `deselected` parameter. This will ensure that if the parameter is not provided, it defaults to `0`, which is the expected behavior for backward compatibility.\n\n```python\nclass Result:\n    def assert_outcomes(self, passed=0, failed=0, skipped=0, deselected=0):\n        # ... existing implementation ...\n```\n\n- Ensure that all calls to `assert_outcomes()` within the pytest-bdd codebase are updated to include the `deselected` parameter if they rely on its value. If the value of `deselected` is not important for the test, it can be omitted, and the default value will be used.\n\n- If the `assert_outcomes()` function is part of a public API and used by external projects, consider adding a deprecation warning when the `deselected` parameter is not provided, indicating that in future versions, it will be required to explicitly set this parameter.\n\n- Update the documentation and any migration guides to reflect the change and inform users about the new parameter and its default value.\n\n- Since the issue is related to pytest version 7.0, ensure that the documentation highlights this change as part of the release notes for that version.\n\n- No changes are required in the provided configuration files (`.github/config.yml`, `.github/ISSUE_TEMPLATE/config.yml`, `.pre-commit-config.yaml`, `.github/dependabot.yml`, `codecov.yml`) or scripts (`update-plugin-list.py`, `prepare-release-pr.py`) as they are not relevant to the issue at hand.\n\n### Code snippets to check\n\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__7.1/tree//bench)- [Lines 1 - 14](https://github.com/testbed/pytest-dev__pytest__7.1/blob//bench/manyparam.py#L1-L14)\n\n This code snippet is an example of a test file that might be affected by the change in `assert_outcomes()` behavior, as it contains multiple tests that could be deselected based on a `-k` expression.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0021904999999999997,
        "snippet_processor": 0.05927,
        "issue_star_creation": 0.07475000000000001,
        "issue_star_solver": 0.04054,
        "bouncer": 0.05904
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711734377.2030132,
        "relevant_snippets": [
            {
                "code": "rtd:\n  project: pytest",
                "filename": ".github/config.yml",
                "start_index": 0,
                "end_index": 22,
                "start_line": 1,
                "end_line": 2,
                "max_line": 2,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.1",
                "sha": ""
            },
            {
                "code": "blank_issues_enabled: false\ncontact_links:\n  - name: \u2753 Support Question\n    url: https://github.com/pytest-dev/pytest/discussions\n    about: Use GitHub's new Discussions feature for questions",
                "filename": ".github/ISSUE_TEMPLATE/config.yml",
                "start_index": 0,
                "end_index": 191,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.1",
                "sha": ""
            },
            {
                "code": "import pytest\n\n\n@pytest.fixture(scope=\"module\", params=range(966))\ndef foo(request):\n    return request.param\n\n\ndef test_it(foo):\n    pass\n\n\ndef test_it2(foo):\n    pass",
                "filename": "bench/manyparam.py",
                "start_index": 0,
                "end_index": 168,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.1",
                "sha": ""
            },
            {
                "code": "-   repo: local\n    hooks:\n    -   id: rst\n        name: rst\n        entry: rst-lint --encoding utf-8\n        files: ^(RELEASING.rst|README.rst|TIDELIFT.rst)$\n        language: python\n        additional_dependencies: [pygments, restructuredtext_lint]\n    -   id: changelogs-rst\n        name: changelog filenames\n        language: fail\n        entry: 'changelog files must be named ####.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst'\n        exclude: changelog/(\\d+\\.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst|README.rst|_template.rst)\n        files: ^changelog/\n    -   id: py-deprecated\n        name: py library is deprecated\n        language: pygrep\n        entry: >\n            (?x)\\bpy\\.(\n                _code\\.|\n                builtin\\.|\n                code\\.|\n                io\\.|\n                path\\.local\\.sysfind|\n                process\\.|\n                std\\.|\n                error\\.|\n                xml\\.\n            )\n        types: [python]\n    -   id: py-path-deprecated\n        name: py.path usage is deprecated\n        exclude: docs|src/_pytest/deprecated.py|testing/deprecated_test.py|src/_pytest/legacypath.py\n        language: pygrep\n        entry: \\bpy\\.path\\.local\n        types: [python]",
                "filename": ".pre-commit-config.yaml",
                "start_index": 2166,
                "end_index": 3442,
                "start_line": 73,
                "end_line": 108,
                "max_line": 108,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.1",
                "sha": ""
            },
            {
                "code": "import datetime\nimport pathlib\nimport re\nfrom textwrap import dedent\nfrom textwrap import indent\n\nimport packaging.version\nimport platformdirs\nimport tabulate\nimport wcwidth\nfrom requests_cache import CachedResponse\nfrom requests_cache import CachedSession\nfrom requests_cache import OriginalResponse\nfrom requests_cache import SQLiteCache\nfrom tqdm import tqdm\n\n\nFILE_HEAD = r\"\"\"\n.. Note this file is autogenerated by scripts/update-plugin-list.py - usually weekly via github action\n\n.. _plugin-list:\n\nPlugin List\n===========\n\nPyPI projects that match \"pytest-\\*\" are considered plugins and are listed\nautomatically together with a manually-maintained list in `the source\ncode <https://github.com/pytest-dev/pytest/blob/main/scripts/update-plugin-list.py>`_.\nPackages classified as inactive are excluded.\n\n.. The following conditional uses a different format for this list when\n   creating a PDF, because otherwise the table gets far too wide for the\n   page.\n\n\"\"\"\nDEVELOPMENT_STATUS_CLASSIFIERS = (\n    \"Development Status :: 1 - Planning\",\n    \"Development Status :: 2 - Pre-Alpha\",\n    \"Development Status :: 3 - Alpha\",\n    \"Development Status :: 4 - Beta\",\n    \"Development Status :: 5 - Production/Stable\",\n    \"Development Status :: 6 - Mature\",\n    \"Development Status :: 7 - Inactive\",\n)\nADDITIONAL_PROJECTS = {  # set of additional projects to consider as plugins\n    \"logassert\",\n    \"nuts\",\n}\n\n\ndef escape_rst(text: str) -> str:\n    \"\"\"Rudimentary attempt to escape special RST characters to appear as\n    plain text.\"\"\"\n    text = (\n        text.replace(\"*\", \"\\\\*\")\n        .replace(\"<\", \"\\\\<\")\n        .replace(\">\", \"\\\\>\")\n        .replace(\"`\", \"\\\\`\")\n    )\n    text = re.sub(r\"_\\b\", \"\", text)\n    return text\n\n\ndef project_response_with_refresh(\n    session: CachedSession, name: str, last_serial: int\n) -> OriginalResponse | CachedResponse:\n    \"\"\"Get a http cached pypi project\n\n    force refresh in case of last serial mismatch\n    \"\"\"\n\n    response = session.get(f\"https://pypi.org/pypi/{name}/json\")\n    if int(response.headers.get(\"X-PyPI-Last-Serial\", -1)) != last_serial:\n        response = session.get(f\"https://pypi.org/pypi/{name}/json\", refresh=True)\n    return response\n\n\ndef get_session() -> CachedSession:\n    \"\"\"Configures the requests-cache session\"\"\"\n    cache_path = platformdirs.user_cache_path(\"pytest-plugin-list\")\n    cache_path.mkdir(exist_ok=True, parents=True)\n    cache_file = cache_path.joinpath(\"http_cache.sqlite3\")\n    return CachedSession(backend=SQLiteCache(cache_file))\n\n\ndef pytest_plugin_projects_from_pypi(session: CachedSession) -> dict[str, int]:\n    response = session.get(\n        \"https://pypi.org/simple\",\n        headers={\"Accept\": \"application/vnd.pypi.simple.v1+json\"},\n        refresh=True,\n    )\n    return {\n        name: p[\"_last-serial\"]\n        for p in response.json()[\"projects\"]\n        if (name := p[\"name\"]).startswith(\"pytest-\") or name in ADDITIONAL_PROJECTS\n    }",
                "filename": "scripts/update-plugin-list.py",
                "start_index": 0,
                "end_index": 2939,
                "start_line": 1,
                "end_line": 155,
                "max_line": 195,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.1",
                "sha": ""
            },
            {
                "code": "# shim for pylib going away\n# if pylib is installed this file will get skipped\n# (`py/__init__.py` has higher precedence)\nimport sys\n\nimport _pytest._py.error as error\nimport _pytest._py.path as path\n\nsys.modules[\"py.error\"] = error\nsys.modules[\"py.path\"] = path",
                "filename": "src/py.py",
                "start_index": 0,
                "end_index": 262,
                "start_line": 1,
                "end_line": 10,
                "max_line": 10,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.1",
                "sha": ""
            },
            {
                "code": "-   repo: https://github.com/psf/black\n    rev: 23.7.0\n    hooks:\n    -   id: black\n        args: [--safe, --quiet]\n-   repo: https://github.com/asottile/blacken-docs\n    rev: 1.16.0\n    hooks:\n    -   id: blacken-docs\n        additional_dependencies: [black==23.7.0]\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: fix-encoding-pragma\n        args: [--remove]\n    -   id: check-yaml\n    -   id: debug-statements\n        exclude: _pytest/(debugging|hookspec).py\n        language_version: python3\n-   repo: https://github.com/PyCQA/autoflake\n    rev: v2.2.0\n    hooks:\n    -   id: autoflake\n        name: autoflake\n        args: [\"--in-place\", \"--remove-unused-variables\", \"--remove-all-unused-imports\"]\n        language: python\n        files: \\.py$\n-   repo: https://github.com/PyCQA/flake8\n    rev: 6.1.0\n    hooks:\n    -   id: flake8\n        language_version: python3\n        additional_dependencies:\n          - flake8-typing-imports==1.12.0\n          - flake8-docstrings==1.5.0\n-   repo: https://github.com/asottile/reorder-python-imports\n    rev: v3.10.0\n    hooks:\n    -   id: reorder-python-imports\n        args: ['--application-directories=.:src', --py38-plus]\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v3.10.1\n    hooks:\n    -   id: pyupgrade\n        args: [--py38-plus]\n-   repo: https://github.com/asottile/setup-cfg-fmt\n    rev: v2.4.0\n    hooks:\n    -   id: setup-cfg-fmt\n        args: [\"--max-py-version=3.12\", \"--include-version-classifiers\"]\n-   repo: https://github.com/pre-commit/pygrep-hooks\n    rev: v1.10.0\n    hooks:\n    -   id: python-use-type-annotations\n-   repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.5.1\n    hooks:\n    -   id: mypy\n        files: ^(src/|testing/)\n        args: []\n        additional_dependencies:\n          - iniconfig>=1.1.0\n          - attrs>=19.2.0\n          - packaging\n          - tomli\n          - types-pkg_resources\n            # for mypy running on python>=3.11 since exceptiongroup is only a dependency\n            # on <3.11\n          - exceptiongroup>=1.0.0rc8",
                "filename": ".pre-commit-config.yaml",
                "start_index": 7,
                "end_index": 2165,
                "start_line": 2,
                "end_line": 72,
                "max_line": 108,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.1",
                "sha": ""
            },
            {
                "code": "\"\"\"\nThis script is part of the pytest release process which is triggered manually in the Actions\ntab of the repository.\n\nThe user will need to enter the base branch to start the release from (for example\n``6.1.x`` or ``main``) and if it should be a major release.\n\nThe appropriate version will be obtained based on the given branch automatically.\n\nAfter that, it will create a release using the `release` tox environment, and push a new PR.\n\n**Token**: currently the token from the GitHub Actions is used, pushed with\n`pytest bot <pytestbot@gmail.com>` commit author.\n\"\"\"\nimport argparse\nimport re\nfrom pathlib import Path\nfrom subprocess import check_call\nfrom subprocess import check_output\nfrom subprocess import run\n\nfrom colorama import Fore\nfrom colorama import init\nfrom github3.repos import Repository\n\n\nclass InvalidFeatureRelease(Exception):\n    pass\n\n\nSLUG = \"pytest-dev/pytest\"\n\nPR_BODY = \"\"\"\\\nCreated automatically from manual trigger.\n\nOnce all builds pass and it has been **approved** by one or more maintainers, the build\ncan be released by pushing a tag `{version}` to this repository.\n\"\"\"\n\n\ndef login(token: str) -> Repository:\n    import github3\n\n    github = github3.login(token=token)\n    owner, repo = SLUG.split(\"/\")\n    return github.repository(owner, repo)",
                "filename": "scripts/prepare-release-pr.py",
                "start_index": 0,
                "end_index": 1281,
                "start_line": 1,
                "end_line": 46,
                "max_line": 174,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.1",
                "sha": ""
            },
            {
                "code": "version: 2\nupdates:\n- package-ecosystem: pip\n  directory: \"/testing/plugins_integration\"\n  schedule:\n    interval: weekly\n    time: \"03:00\"\n  open-pull-requests-limit: 10\n  allow:\n  - dependency-type: direct\n  - dependency-type: indirect\n- package-ecosystem: github-actions\n  directory: /\n  schedule:\n    interval: weekly\n    time: \"03:00\"\n  open-pull-requests-limit: 10",
                "filename": ".github/dependabot.yml",
                "start_index": 0,
                "end_index": 370,
                "start_line": 1,
                "end_line": 17,
                "max_line": 17,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.1",
                "sha": ""
            },
            {
                "code": "# reference: https://docs.codecov.io/docs/codecovyml-reference\ncoverage:\n  status:\n    patch: true\n    project: false\ncomment: false",
                "filename": "codecov.yml",
                "start_index": 0,
                "end_index": 132,
                "start_line": 1,
                "end_line": 6,
                "max_line": 6,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.1",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "bench/manyparam.py": [
                {
                    "chunk": {
                        "code": "import pytest\n\n\n@pytest.fixture(scope=\"module\", params=range(966))\ndef foo(request):\n    return request.param\n\n\ndef test_it(foo):\n    pass\n\n\ndef test_it2(foo):\n    pass",
                        "filename": "bench/manyparam.py",
                        "start_index": 0,
                        "end_index": 168,
                        "start_line": 1,
                        "end_line": 14,
                        "max_line": 14,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__7.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This code snippet is an example of a test file that might be affected by the change in `assert_outcomes()` behavior, as it contains multiple tests that could be deselected based on a `-k` expression."
                }
            ]
        },
        "solution_task": "To address the issue with the `assert_outcomes()` function in the pytest-bdd project, where the addition of the `deselected` parameter is causing backward compatibility issues, follow these steps:\n\n- Modify the `assert_outcomes()` method in the `Result` class to set a default value for the `deselected` parameter. This will ensure that if the parameter is not provided, it defaults to `0`, which is the expected behavior for backward compatibility.\n\n```python\nclass Result:\n    def assert_outcomes(self, passed=0, failed=0, skipped=0, deselected=0):\n        # ... existing implementation ...\n```\n\n- Ensure that all calls to `assert_outcomes()` within the pytest-bdd codebase are updated to include the `deselected` parameter if they rely on its value. If the value of `deselected` is not important for the test, it can be omitted, and the default value will be used.\n\n- If the `assert_outcomes()` function is part of a public API and used by external projects, consider adding a deprecation warning when the `deselected` parameter is not provided, indicating that in future versions, it will be required to explicitly set this parameter.\n\n- Update the documentation and any migration guides to reflect the change and inform users about the new parameter and its default value.\n\n- Since the issue is related to pytest version 7.0, ensure that the documentation highlights this change as part of the release notes for that version.\n\n- No changes are required in the provided configuration files (`.github/config.yml`, `.github/ISSUE_TEMPLATE/config.yml`, `.pre-commit-config.yaml`, `.github/dependabot.yml`, `codecov.yml`) or scripts (`update-plugin-list.py`, `prepare-release-pr.py`) as they are not relevant to the issue at hand.",
        "bouncer_response": {
            "score": 7,
            "criteria": "The RESPONSE must provide actionable, relevant guidance to more parts of the PROMPT's described issue to score higher.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable solution to the backward compatibility issue caused by the addition of the `deselected` parameter to the `assert_outcomes()` function. It suggests modifying the method to include a default value for the new parameter, which directly addresses the problem described in the PROMPT. The RESPONSE also recommends updating calls within the pytest-bdd codebase, adding a deprecation warning, updating documentation, and ensuring the change is highlighted in the release notes. These are all relevant and actionable steps that would help resolve the issue. However, the RESPONSE includes a section about code snippets to check with a link that is not actionable or verifiable, which does not contribute to resolving the issue and thus prevents the RESPONSE from scoring higher.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711734458.9481652,
        "result": "To address the issue with the `assert_outcomes()` function in the pytest-bdd project, where the addition of the `deselected` parameter is causing backward compatibility issues, follow these steps:\n\n- Modify the `assert_outcomes()` method in the `Result` class to set a default value for the `deselected` parameter. This will ensure that if the parameter is not provided, it defaults to `0`, which is the expected behavior for backward compatibility.\n\n```python\nclass Result:\n    def assert_outcomes(self, passed=0, failed=0, skipped=0, deselected=0):\n        # ... existing implementation ...\n```\n\n- Ensure that all calls to `assert_outcomes()` within the pytest-bdd codebase are updated to include the `deselected` parameter if they rely on its value. If the value of `deselected` is not important for the test, it can be omitted, and the default value will be used.\n\n- If the `assert_outcomes()` function is part of a public API and used by external projects, consider adding a deprecation warning when the `deselected` parameter is not provided, indicating that in future versions, it will be required to explicitly set this parameter.\n\n- Update the documentation and any migration guides to reflect the change and inform users about the new parameter and its default value.\n\n- Since the issue is related to pytest version 7.0, ensure that the documentation highlights this change as part of the release notes for that version.\n\n- No changes are required in the provided configuration files (`.github/config.yml`, `.github/ISSUE_TEMPLATE/config.yml`, `.pre-commit-config.yaml`, `.github/dependabot.yml`, `codecov.yml`) or scripts (`update-plugin-list.py`, `prepare-release-pr.py`) as they are not relevant to the issue at hand.\n\n### Code snippets to check\n\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__7.1/tree//bench)- [Lines 1 - 14](https://github.com/testbed/pytest-dev__pytest__7.1/blob//bench/manyparam.py#L1-L14)\n\n This code snippet is an example of a test file that might be affected by the change in `assert_outcomes()` behavior, as it contains multiple tests that could be deselected based on a `-k` expression."
    }
}