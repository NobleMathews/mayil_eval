{
    "id": "astropy__astropy-14042",
    "repo_name": "testbed/astropy__astropy__5.1",
    "task_id": 6806694681015340791,
    "title": "Degrees Celsius should be supported by FITS units",
    "body": "<!-- This comments are hidden when you submit the issue,\r\nso you do not need to remove them! -->\r\n\r\n<!-- Please be sure to check out our contributing guidelines,\r\nhttps://github.com/astropy/astropy/blob/main/CONTRIBUTING.md .\r\nPlease be sure to check out our code of conduct,\r\nhttps://github.com/astropy/astropy/blob/main/CODE_OF_CONDUCT.md . -->\r\n\r\n<!-- Please have a search on our GitHub repository to see if a similar\r\nissue has already been posted.\r\nIf a similar issue is closed, have a quick look to see if you are satisfied\r\nby the resolution.\r\nIf not please go ahead and open an issue! -->\r\n\r\n### Description\r\n\r\nThe FITS standards says that units should follow IAU recommendations. These note that:\r\n\r\n> The degree Celsius (`\u00b0C` in the original PDF, `oC` in the web page???) is used in specifying temperature for meteorological purposes, but otherwise the kelvin (K) should be used.\r\n\r\nHowever, astropy does not support `u.deg_C` for fits:\r\n\r\n```\r\nimport astropy.units as u\r\n\r\nu.deg_C.to_string(\"fits\") # exception\r\n```\r\n\r\n\r\n### Additional context\r\nSee \r\n* https://www.iau.org/publications/proceedings_rules/units/\r\n* https://www.iau.org/static/publications/stylemanual1989.pdf\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/astropy__astropy__5.1.git",
    "requested_commit": "",
    "mayil_response": "- Add a new entry for \"deg_C\" in the FITS unit format mapping within the `astropy.units.format.fits` module to support the conversion of `u.deg_C.to_string(\"fits\")`.\n- Ensure that the new entry follows the FITS standard and IAU recommendations for unit representation.\n- Update the `_generate_unit_names` method in `fits.py` to include the mapping for \"deg_C\" to its FITS-compliant string representation, which could be \"C\" or another appropriate string based on the FITS standard.\n- Add a unit test to verify that `u.deg_C.to_string(\"fits\")` returns the correct FITS-compliant string without raising an exception.\n\n### Code snippets to check\n\n-  \u2192 [astropy](https://github.com/testbed/astropy__astropy__5.1/tree//astropy) \u2192 [units](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/units) \u2192 [format](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/units/format)- [Lines 3 - 122](https://github.com/testbed/astropy__astropy__5.1/blob//astropy/units/format/fits.py#L3-L122)\n\n This snippet contains the FITS unit format handling, including a mapping for 'Celsius' and 'deg C' to 'u.deg_C', which is directly related to the issue of supporting degrees Celsius in FITS units.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0004969999999999999,
        "snippet_processor": 0.060770000000000005,
        "issue_star_creation": 0.030649999999999997,
        "issue_star_solver": 0.0659,
        "bouncer": 0.0239
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711736156.04212,
        "relevant_snippets": [
            {
                "code": "\"\"\"\n    The FITS standard unit format.\n\n    This supports the format defined in the Units section of the `FITS\n    Standard <https://fits.gsfc.nasa.gov/fits_standard.html>`_.\n    \"\"\"\n\n    @staticmethod\n    def _generate_unit_names():\n        from astropy import units as u\n\n        # add some units up-front for which we don't want to use prefixes\n        # and that have different names from the astropy default.\n        names = {\n            \"Celsius\": u.deg_C,\n            \"deg C\": u.deg_C,\n        }\n        deprecated_names = set()\n        bases = [\n            \"m\", \"g\", \"s\", \"rad\", \"sr\", \"K\", \"A\", \"mol\", \"cd\",\n            \"Hz\", \"J\", \"W\", \"V\", \"N\", \"Pa\", \"C\", \"Ohm\", \"S\",\n            \"F\", \"Wb\", \"T\", \"H\", \"lm\", \"lx\", \"a\", \"yr\", \"eV\",\n            \"pc\", \"Jy\", \"mag\", \"R\", \"bit\", \"byte\", \"G\", \"barn\",\n        ]  # fmt: skip\n        deprecated_bases = []\n        prefixes = [\n            \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"u\", \"m\", \"c\", \"d\",\n            \"\", \"da\", \"h\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\",\n        ]  # fmt: skip\n\n        special_cases = {\"dbyte\": u.Unit(\"dbyte\", 0.1 * u.byte)}\n\n        for base in bases + deprecated_bases:\n            for prefix in prefixes:\n                key = prefix + base\n                if keyword.iskeyword(key):\n                    continue\n                elif key in special_cases:\n                    names[key] = special_cases[key]\n                else:\n                    names[key] = getattr(u, key)\n        for base in deprecated_bases:\n            for prefix in prefixes:\n                deprecated_names.add(prefix + base)\n        simple_units = [\n            \"deg\", \"arcmin\", \"arcsec\", \"mas\", \"min\", \"h\", \"d\", \"Ry\",\n            \"solMass\", \"u\", \"solLum\", \"solRad\", \"AU\", \"lyr\", \"count\",\n            \"ct\", \"photon\", \"ph\", \"pixel\", \"pix\", \"D\", \"Sun\", \"chan\",\n            \"bin\", \"voxel\", \"adu\", \"beam\", \"erg\", \"Angstrom\", \"angstrom\",\n        ]  # fmt: skip\n        deprecated_units = []\n\n        for unit in simple_units + deprecated_units:\n            names[unit] = getattr(u, unit)\n        for unit in deprecated_units:\n            deprecated_names.add(unit)\n\n        return names, deprecated_names, []\n\n    @classmethod\n    def _validate_unit(cls, unit, detailed_exception=True):\n        if unit not in cls._units:\n            if detailed_exception:\n                raise ValueError(\n                    f\"Unit '{unit}' not supported by the FITS standard. \"\n                    + utils.did_you_mean_units(\n                        unit,\n                        cls._units,\n                        cls._deprecated_units,\n                        cls._to_decomposed_alternative,\n                    ),\n                )\n            else:\n                raise ValueError()\n\n        if unit in cls._deprecated_units:\n            utils.unit_deprecation_warning(\n                unit, cls._units[unit], \"FITS\", cls._to_decomposed_alternative\n            )",
                "filename": "astropy/units/format/fits.py",
                "start_index": 225,
                "end_index": 3130,
                "start_line": 3,
                "end_line": 122,
                "max_line": 152,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "\"\"\"\n    Support the units in `Office of Guest Investigator Programs (OGIP)\n    FITS files\n    <https://heasarc.gsfc.nasa.gov/docs/heasarc/ofwg/docs/general/ogip_93_001/>`__.\n    \"\"\"\n\n    _tokens = (\n        \"DIVISION\",\n        \"OPEN_PAREN\",\n        \"CLOSE_PAREN\",\n        \"WHITESPACE\",\n        \"STARSTAR\",\n        \"STAR\",\n        \"SIGN\",\n        \"UFLOAT\",\n        \"LIT10\",\n        \"UINT\",\n        \"UNKNOWN\",\n        \"UNIT\",\n    )\n\n    @staticmethod\n    def _generate_unit_names():\n        from astropy import units as u\n\n        names = {}\n        deprecated_names = set()\n        bases = [\n            \"A\", \"C\", \"cd\", \"eV\", \"F\", \"g\", \"H\", \"Hz\", \"J\",\n            \"Jy\", \"K\", \"lm\", \"lx\", \"m\", \"mol\", \"N\", \"ohm\", \"Pa\",\n            \"pc\", \"rad\", \"s\", \"S\", \"sr\", \"T\", \"V\", \"W\", \"Wb\",\n        ]  # fmt: skip\n        deprecated_bases = []\n        prefixes = [\n            \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"u\", \"m\", \"c\", \"d\",\n            \"\", \"da\", \"h\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\",\n        ]  # fmt: skip\n\n        for base in bases + deprecated_bases:\n            for prefix in prefixes:\n                key = prefix + base\n                if keyword.iskeyword(key):\n                    continue\n                names[key] = getattr(u, key)\n        for base in deprecated_bases:\n            for prefix in prefixes:\n                deprecated_names.add(prefix + base)\n        simple_units = [\n            \"angstrom\", \"arcmin\", \"arcsec\", \"AU\", \"barn\", \"bin\",\n            \"byte\", \"chan\", \"count\", \"day\", \"deg\", \"erg\", \"G\",\n            \"h\", \"lyr\", \"mag\", \"min\", \"photon\", \"pixel\",\n            \"voxel\", \"yr\",\n        ]  # fmt: skip\n        for unit in simple_units:\n            names[unit] = getattr(u, unit)\n\n        # Create a separate, disconnected unit for the special case of\n        # Crab and mCrab, since OGIP doesn't define their quantities.\n        Crab = u.def_unit([\"Crab\"], prefixes=False, doc=\"Crab (X-ray flux)\")\n        mCrab = u.Unit(10**-3 * Crab)\n        names[\"Crab\"] = Crab\n        names[\"mCrab\"] = mCrab\n\n        deprecated_units = [\"Crab\", \"mCrab\"]\n        for unit in deprecated_units:\n            deprecated_names.add(unit)\n        functions = [\n            \"log\", \"ln\", \"exp\", \"sqrt\", \"sin\", \"cos\", \"tan\", \"asin\",\n            \"acos\", \"atan\", \"sinh\", \"cosh\", \"tanh\",\n        ]  # fmt: skip\n        for name in functions:\n            names[name] = name\n\n        return names, deprecated_names, functions",
                "filename": "astropy/units/format/ogip.py",
                "start_index": 792,
                "end_index": 3213,
                "start_line": 13,
                "end_line": 104,
                "max_line": 427,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "# Licensed under a 3-clause BSD style license - see LICNSE.rst\n\n# This module includes files automatically generated from ply (these end in\n# _lextab.py and _parsetab.py). To generate these files, remove them from this\n# folder, then build astropy and run the tests in-place:\n#\n#   python setup.py build_ext --inplace\n#   pytest astropy/units\n#\n# You can then commit the changes to the re-generated _lextab.py and\n# _parsetab.py files.\n\n\"\"\"\nHandles units in `Office of Guest Investigator Programs (OGIP)\nFITS files\n<https://heasarc.gsfc.nasa.gov/docs/heasarc/ofwg/docs/general/ogip_93_001/>`__.\n\"\"\"\n\nimport copy\nimport keyword\nimport math\nimport warnings\nfrom fractions import Fraction\n\nfrom astropy.utils import parsing\n\nfrom . import core, generic, utils",
                "filename": "astropy/units/format/ogip.py",
                "start_index": 0,
                "end_index": 756,
                "start_line": 1,
                "end_line": 27,
                "max_line": 427,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\n\"\"\"\nHandles the \"FITS\" unit format.\n\"\"\"\n\n\nimport copy\nimport keyword\n\nimport numpy as np\n\nfrom . import core, generic, utils",
                "filename": "astropy/units/format/fits.py",
                "start_index": 0,
                "end_index": 189,
                "start_line": 1,
                "end_line": 13,
                "max_line": 152,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "VELOCITY_FRAMES[\"CMBDIPOL\"] = Galactic(\n    l=263.85 * u.deg,\n    b=48.25 * u.deg,\n    distance=0 * u.km,\n    radial_velocity=-(3.346e-3 / 2.725 * c).to(u.km / u.s),\n)\n\n\n# Mapping from CTYPE axis name to UCD1\n\nCTYPE_TO_UCD1 = {\n    # Celestial coordinates\n    \"RA\": \"pos.eq.ra\",\n    \"DEC\": \"pos.eq.dec\",\n    \"GLON\": \"pos.galactic.lon\",\n    \"GLAT\": \"pos.galactic.lat\",\n    \"ELON\": \"pos.ecliptic.lon\",\n    \"ELAT\": \"pos.ecliptic.lat\",\n    \"TLON\": \"pos.bodyrc.lon\",\n    \"TLAT\": \"pos.bodyrc.lat\",\n    \"HPLT\": \"custom:pos.helioprojective.lat\",\n    \"HPLN\": \"custom:pos.helioprojective.lon\",\n    \"HPRZ\": \"custom:pos.helioprojective.z\",\n    \"HGLN\": \"custom:pos.heliographic.stonyhurst.lon\",\n    \"HGLT\": \"custom:pos.heliographic.stonyhurst.lat\",\n    \"CRLN\": \"custom:pos.heliographic.carrington.lon\",\n    \"CRLT\": \"custom:pos.heliographic.carrington.lat\",\n    \"SOLX\": \"custom:pos.heliocentric.x\",\n    \"SOLY\": \"custom:pos.heliocentric.y\",\n    \"SOLZ\": \"custom:pos.heliocentric.z\",\n    # Spectral coordinates (WCS paper 3)\n    \"FREQ\": \"em.freq\",  # Frequency\n    \"ENER\": \"em.energy\",  # Energy\n    \"WAVN\": \"em.wavenumber\",  # Wavenumber\n    \"WAVE\": \"em.wl\",  # Vacuum wavelength\n    \"VRAD\": \"spect.dopplerVeloc.radio\",  # Radio velocity\n    \"VOPT\": \"spect.dopplerVeloc.opt\",  # Optical velocity\n    \"ZOPT\": \"src.redshift\",  # Redshift\n    \"AWAV\": \"em.wl\",  # Air wavelength\n    \"VELO\": \"spect.dopplerVeloc\",  # Apparent radial velocity\n    \"BETA\": \"custom:spect.doplerVeloc.beta\",  # Beta factor (v/c)\n    \"STOKES\": \"phys.polarization.stokes\",  # STOKES parameters\n    # Time coordinates (https://www.aanda.org/articles/aa/pdf/2015/02/aa24653-14.pdf)\n    \"TIME\": \"time\",\n    \"TAI\": \"time\",\n    \"TT\": \"time\",\n    \"TDT\": \"time\",\n    \"ET\": \"time\",\n    \"IAT\": \"time\",\n    \"UT1\": \"time\",\n    \"UTC\": \"time\",\n    \"GMT\": \"time\",\n    \"GPS\": \"time\",\n    \"TCG\": \"time\",\n    \"TCB\": \"time\",\n    \"TDB\": \"time\",\n    \"LOCAL\": \"time\",\n    # Distance coordinates\n    \"DIST\": \"pos.distance\",\n    \"DSUN\": \"custom:pos.distance.sunToObserver\"\n    # UT() and TT() are handled separately in world_axis_physical_types\n}\n\n# Keep a list of additional custom mappings that have been registered. This\n# is kept as a list in case nested context managers are used\nCTYPE_TO_UCD1_CUSTOM = []",
                "filename": "astropy/wcs/wcsapi/fitswcs.py",
                "start_index": 2995,
                "end_index": 5238,
                "start_line": 97,
                "end_line": 162,
                "max_line": 805,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "# Licensed under a 3-clause BSD style license - see LICNSE.rst\n\n# This module includes files automatically generated from ply (these end in\n# _lextab.py and _parsetab.py). To generate these files, remove them from this\n# folder, then build astropy and run the tests in-place:\n#\n#   python setup.py build_ext --inplace\n#   pytest astropy/units\n#\n# You can then commit the changes to the re-generated _lextab.py and\n# _parsetab.py files.\n\n\"\"\"Handles the CDS string format for units.\"\"\"\n\nimport re\n\nfrom astropy.units.utils import is_effectively_unity\nfrom astropy.utils import classproperty, parsing\nfrom astropy.utils.misc import did_you_mean\n\nfrom . import core, utils\nfrom .base import Base",
                "filename": "astropy/units/format/cds.py",
                "start_index": 0,
                "end_index": 691,
                "start_line": 1,
                "end_line": 22,
                "max_line": 340,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "[\n        ([\"A\"], u.A, \"Ampere\"),\n        ([\"a\"], u.a, \"year\", [\"P\"]),\n        ([\"a0\"], _si.a0, \"Bohr radius\"),\n        ([\"al\"], u.lyr, \"Light year\", [\"c\", \"d\"]),\n        ([\"lyr\"], u.lyr, \"Light year\"),\n        ([\"alpha\"], _si.alpha, \"Fine structure constant\"),\n        (([\"AA\", \"\u00c5\"], [\"Angstrom\", \"Angstroem\"]), u.AA, \"Angstrom\"),\n        ([\"arcmin\", \"arcm\"], u.arcminute, \"minute of arc\"),\n        ([\"arcsec\", \"arcs\"], u.arcsecond, \"second of arc\"),\n        ([\"atm\"], _si.atm, \"atmosphere\"),\n        ([\"AU\", \"au\"], u.au, \"astronomical unit\"),\n        ([\"bar\"], u.bar, \"bar\"),\n        ([\"barn\"], u.barn, \"barn\"),\n        ([\"bit\"], u.bit, \"bit\"),\n        ([\"byte\"], u.byte, \"byte\"),\n        ([\"C\"], u.C, \"Coulomb\"),\n        ([\"c\"], _si.c, \"speed of light\", [\"p\"]),\n        ([\"cal\"], 4.1854 * u.J, \"calorie\"),\n        ([\"cd\"], u.cd, \"candela\"),\n        ([\"ct\"], u.ct, \"count\"),\n        ([\"D\"], u.D, \"Debye (dipole)\"),\n        ([\"d\"], u.d, \"Julian day\", [\"c\"]),\n        (([\"deg\", \"\u00b0\"], [\"degree\"]), u.degree, \"degree\"),\n        ([\"dyn\"], u.dyn, \"dyne\"),\n        ([\"e\"], _si.e, \"electron charge\", [\"m\"]),\n        ([\"eps0\"], _si.eps0, \"electric constant\"),\n        ([\"erg\"], u.erg, \"erg\"),\n        ([\"eV\"], u.eV, \"electron volt\"),\n        ([\"F\"], u.F, \"Farad\"),\n        ([\"G\"], _si.G, \"Gravitation constant\"),\n        ([\"g\"], u.g, \"gram\"),\n        ([\"gauss\"], u.G, \"Gauss\"),\n        ([\"geoMass\", \"Mgeo\"], u.M_earth, \"Earth mass\"),\n        ([\"H\"], u.H, \"Henry\"),\n        ([\"h\"], u.h, \"hour\", [\"p\"]),\n        ([\"hr\"], u.h, \"hour\"),\n        ([\"\\\\h\"], _si.h, \"Planck constant\"),\n        ([\"Hz\"], u.Hz, \"Hertz\"),\n        ([\"inch\"], 0.0254 * u.m, \"inch\"),\n        ([\"J\"], u.J, \"Joule\"),\n        ([\"JD\"], u.d, \"Julian day\", [\"M\"]),\n        ([\"jovMass\", \"Mjup\"], u.M_jup, \"Jupiter mass\"),\n        ([\"Jy\"], u.Jy, \"Jansky\"),\n        ([\"K\"], u.K, \"Kelvin\"),\n        ([\"k\"], _si.k_B, \"Boltzmann\"),\n        ([\"l\"], u.l, \"litre\", [\"a\"]),\n        ([\"lm\"], u.lm, \"lumen\"),\n        ([\"Lsun\", \"solLum\"], u.solLum, \"solar luminosity\"),\n        ([\"lx\"], u.lx, \"lux\"),\n        ([\"m\"], u.m, \"meter\"),\n        ([\"mag\"], u.mag, \"magnitude\"),\n        ([\"me\"], _si.m_e, \"electron mass\"),\n        ([\"min\"], u.minute, \"minute\"),\n        ([\"MJD\"], u.d, \"Julian day\"),\n        ([\"mmHg\"], 133.322387415 * u.Pa, \"millimeter of mercury\"),\n        ([\"mol\"], u.mol, \"mole\"),\n        ([\"mp\"], _si.m_p, \"proton mass\"),\n        ([\"Msun\", \"solMass\"], u.solMass, \"solar mass\"),\n        (([\"mu0\", \"\u00b50\"], []), _si.mu0, \"magnetic constant\"),\n        ([\"muB\"], _si.muB, \"Bohr magneton\"),\n        ([\"N\"], u.N, \"Newton\"),\n        ([\"Ohm\"], u.Ohm, \"Ohm\"),\n        ([\"Pa\"], u.Pa, \"Pascal\"),\n        ([\"pc\"], u.pc, \"parsec\"),\n        ([\"ph\"], u.ph, \"photon\"),\n        ([\"pi\"], u.Unit(np.pi), \"\u03c0\"),\n        ([\"pix\"], u.pix, \"pixel\"),\n        ([\"ppm\"], u.Unit(1e-6), \"parts per million\"),\n        ([\"R\"], _si.R, \"gas constant\"),\n        ([\"rad\"], u.radian, \"radian\"),\n        ([\"Rgeo\"], _si.R_earth, \"Earth equatorial radius\"),",
                "filename": "astropy/units/cds.py",
                "start_index": 1609,
                "end_index": 4581,
                "start_line": 43,
                "end_line": 119,
                "max_line": 196,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "else:\n                kwargs[\"unit\"] = self.wcs.cunit[ispec]\n\n                if self.wcs.restfrq > 0:\n                    if ctype == \"VELO\":\n                        kwargs[\"doppler_convention\"] = \"relativistic\"\n                        kwargs[\"doppler_rest\"] = self.wcs.restfrq * u.Hz\n                    elif ctype == \"VRAD\":\n                        kwargs[\"doppler_convention\"] = \"radio\"\n                        kwargs[\"doppler_rest\"] = self.wcs.restfrq * u.Hz\n                    elif ctype == \"VOPT\":\n                        kwargs[\"doppler_convention\"] = \"optical\"\n                        kwargs[\"doppler_rest\"] = self.wcs.restwav * u.m\n\n                def spectralcoord_from_value(value):\n                    if isinstance(value, SpectralCoord):\n                        return value\n                    return SpectralCoord(\n                        value, observer=observer, target=target, **kwargs\n                    )\n\n                def value_from_spectralcoord(spectralcoord):\n                    # TODO: check target is consistent between WCS and SpectralCoord,\n                    # if they are not the transformation doesn't make conceptual sense.\n                    if (\n                        observer is None\n                        or spectralcoord.observer is None\n                        or spectralcoord.target is None\n                    ):\n                        if observer is None:\n                            msg = \"No observer defined on WCS\"\n                        elif spectralcoord.observer is None:\n                            msg = \"No observer defined on SpectralCoord\"\n                        else:\n                            msg = \"No target defined on SpectralCoord\"\n                        warnings.warn(\n                            f\"{msg}, SpectralCoord \"\n                            \"will be converted without any velocity \"\n                            \"frame change\",\n                            AstropyUserWarning,\n                        )\n                        return spectralcoord.to_value(**kwargs)\n                    else:\n                        return spectralcoord.with_observer_stationary_relative_to(\n                            observer\n                        ).to_value(**kwargs)\n\n                classes[\"spectral\"] = (u.Quantity, (), {}, spectralcoord_from_value)\n                components[self.wcs.spec] = (\"spectral\", 0, value_from_spectralcoord)",
                "filename": "astropy/wcs/wcsapi/fitswcs.py",
                "start_index": 23147,
                "end_index": 25564,
                "start_line": 226,
                "end_line": 684,
                "max_line": 805,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "('(?P<t_UFLOAT>((\\\\d+\\\\.\\\\d*)|(\\\\.\\\\d+))([eE][+-\u2212]?\\\\d+)?)|(?P<t_UINT>\\\\d+)|(?P<t_SIGN>[+\u2212-])|(?P<t_EASTWEST>[EW]$)|(?P<t_NORTHSOUTH>[NS]$)|(?P<t_SIMPLE_UNIT>(?:Earcmin)|(?:Earcsec)|(?:Edeg)|(?:Erad)|(?:Garcmin)|(?:Garcsec)|(?:Gdeg)|(?:Grad)|(?:Marcmin)|(?:Marcsec)|(?:Mdeg)|(?:Mrad)|(?:Parcmin)|(?:Parcsec)|(?:Pdeg)|(?:Prad)|(?:Tarcmin)|(?:Tarcsec)|(?:Tdeg)|(?:Trad)|(?:Yarcmin)|(?:Yarcsec)|(?:Ydeg)|(?:Yrad)|(?:Zarcmin)|(?:Zarcsec)|(?:Zdeg)|(?:Zrad)|(?:aarcmin)|(?:aarcsec)|(?:adeg)|(?:arad)|(?:arcmin)|(?:arcminute)|(?:arcsec)|(?:arcsecond)|(?:attoarcminute)|(?:attoarcsecond)|(?:attodegree)|(?:attoradian)|(?:carcmin)|(?:carcsec)|(?:cdeg)|(?:centiarcminute)|(?:centiarcsecond)|(?:centidegree)|(?:centiradian)|(?:crad)|(?:cy)|(?:cycle)|(?:daarcmin)|(?:daarcsec)|(?:dadeg)|(?:darad)|(?:darcmin)|(?:darcsec)|(?:ddeg)|(?:decaarcminute)|(?:decaarcsecond)|(?:decadegree)|(?:decaradian)|(?:deciarcminute)|(?:deciarcsecond)|(?:decidegree)|(?:deciradian)|(?:dekaarcminute)|(?:dekaarcsecond)|(?:dekadegree)|(?:dekaradian)|(?:drad)|(?:exaarcminute)|(?:exaarcsecond)|(?:exadegree)|(?:exaradian)|(?:farcmin)|(?:farcsec)|(?:fdeg)|(?:femtoarcminute)|(?:femtoarcsecond)|(?:femtodegree)|(?:femtoradian)|(?:frad)|(?:gigaarcminute)|(?:gigaarcsecond)|(?:gigadegree)|(?:gigaradian)|(?:harcmin)|(?:harcsec)|(?:hdeg)|(?:hectoarcminute)|(?:hectoarcsecond)|(?:hectodegree)|(?:hectoradian)|(?:hrad)|(?:karcmin)|(?:karcsec)|(?:kdeg)|(?:kiloarcminute)|(?:kiloarcsecond)|(?:kilodegree)|(?:kiloradian)|(?:krad)|(?:marcmin)|(?:marcsec)|(?:mas)|(?:mdeg)|(?:megaarcminute)|(?:megaarcsecond)|(?:megadegree)|(?:megaradian)|(?:microarcminute)|(?:microarcsecond)|(?:microdegree)|(?:microradian)|(?:milliarcminute)|(?:milliarcsecond)|(?:millidegree)|(?:milliradian)|(?:mrad)|(?:nanoarcminute)|(?:nanoarcsecond)|(?:nanodegree)|(?:nanoradian)|(?:narcmin)|(?:narcsec)|(?:ndeg)|(?:nrad)|(?:parcmin)|(?:parcsec)|(?:pdeg)|(?:petaarcminute)|(?:petaarcsecond)|(?:petadegree)|(?:petaradian)|(?:picoarcminute)|(?:picoarcsecond)|(?:picodegree)|(?:picoradian)|(?:prad)|(?:rad)|(?:radian)|(?:teraarcminute)|(?:teraarcsecond)|(?:teradegree)|(?:teraradian)|(?:uarcmin)|(?:uarcsec)|(?:uas)|(?:udeg)|(?:urad)|(?:yarcmin)|(?:yarcsec)|(?:ydeg)|(?:yoctoarcminute)|(?:yoctoarcsecond)|(?:yoctodegree)|(?:yoctoradian)|(?:yottaarcminute)|(?:yottaarcsecond)|(?:yottadegree)|(?:yottaradian)|(?:yrad)|(?:zarcmin)|(?:zarcsec)|(?:zdeg)|(?:zeptoarcminute)|(?:zeptoarcsecond)|(?:zeptodegree)|(?:zeptoradian)|(?:zettaarcminute)|(?:zettaarcsecond)|(?:zettadegree)|(?:zettaradian)|(?:zrad))|(?P<t_MINUTE>m(in(ute(s)?)?)?|\u2032|\\\\\\'|\u1d50)|(?P<t_SECOND>s(ec(ond(s)?)?)?|\u2033|\\\\\"|\u02e2)|(?P<t_DEGREE>d(eg(ree(s)?)?)?|\u00b0)|(?P<t_HOUR>hour(s)?|h(r)?|\u02b0)|(?P<t_COLON>:)', [None, ('t_U",
                "filename": "astropy/coordinates/angle_lextab.py",
                "start_index": 714,
                "end_index": 3407,
                "start_line": 18,
                "end_line": 18,
                "max_line": 21,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "name: Feature request\ndescription: Suggest an idea to improve astropy.\nlabels: \"Feature Request\"\nbody:\n  - type: markdown\n    attributes:\n      value: >-\n        Thanks for taking the time to fill out this feature request!\n        Please have a search on our GitHub repository to see if a similar\n        issue has already been posted. If a similar issue is closed, have a\n        quick look to see if you are satisfied by the resolution.\n        If not please go ahead and open an issue!\n  - type: textarea\n    attributes:\n      label: What is the problem this feature will solve?\n      description: >-\n        What are you trying to do, that you are unable to achieve with astropy\n        and its affiliated packages as it currently stands?\n  - type: textarea\n    attributes:\n      label: Describe the desired outcome\n      description: >-\n        Clear and concise description of what you want to happen. Please use examples\n        of real world use cases that this would help with, and how it solves the\n        problem described above. If you want to, you can suggest a draft design or API\n        so we can have a deeper discussion on the feature.\n  - type: textarea\n    attributes:\n      label: Additional context\n      description: >-\n        Add any other context, links, etc. relevant to the feature request.\n        You may also include screenshots if necessary.",
                "filename": ".github/ISSUE_TEMPLATE/feature_request.yaml",
                "start_index": 0,
                "end_index": 1374,
                "start_line": 1,
                "end_line": 32,
                "max_line": 32,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "astropy/units/format/fits.py": [
                {
                    "chunk": {
                        "code": "\"\"\"\n    The FITS standard unit format.\n\n    This supports the format defined in the Units section of the `FITS\n    Standard <https://fits.gsfc.nasa.gov/fits_standard.html>`_.\n    \"\"\"\n\n    @staticmethod\n    def _generate_unit_names():\n        from astropy import units as u\n\n        # add some units up-front for which we don't want to use prefixes\n        # and that have different names from the astropy default.\n        names = {\n            \"Celsius\": u.deg_C,\n            \"deg C\": u.deg_C,\n        }\n        deprecated_names = set()\n        bases = [\n            \"m\", \"g\", \"s\", \"rad\", \"sr\", \"K\", \"A\", \"mol\", \"cd\",\n            \"Hz\", \"J\", \"W\", \"V\", \"N\", \"Pa\", \"C\", \"Ohm\", \"S\",\n            \"F\", \"Wb\", \"T\", \"H\", \"lm\", \"lx\", \"a\", \"yr\", \"eV\",\n            \"pc\", \"Jy\", \"mag\", \"R\", \"bit\", \"byte\", \"G\", \"barn\",\n        ]  # fmt: skip\n        deprecated_bases = []\n        prefixes = [\n            \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"u\", \"m\", \"c\", \"d\",\n            \"\", \"da\", \"h\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\",\n        ]  # fmt: skip\n\n        special_cases = {\"dbyte\": u.Unit(\"dbyte\", 0.1 * u.byte)}\n\n        for base in bases + deprecated_bases:\n            for prefix in prefixes:\n                key = prefix + base\n                if keyword.iskeyword(key):\n                    continue\n                elif key in special_cases:\n                    names[key] = special_cases[key]\n                else:\n                    names[key] = getattr(u, key)\n        for base in deprecated_bases:\n            for prefix in prefixes:\n                deprecated_names.add(prefix + base)\n        simple_units = [\n            \"deg\", \"arcmin\", \"arcsec\", \"mas\", \"min\", \"h\", \"d\", \"Ry\",\n            \"solMass\", \"u\", \"solLum\", \"solRad\", \"AU\", \"lyr\", \"count\",\n            \"ct\", \"photon\", \"ph\", \"pixel\", \"pix\", \"D\", \"Sun\", \"chan\",\n            \"bin\", \"voxel\", \"adu\", \"beam\", \"erg\", \"Angstrom\", \"angstrom\",\n        ]  # fmt: skip\n        deprecated_units = []\n\n        for unit in simple_units + deprecated_units:\n            names[unit] = getattr(u, unit)\n        for unit in deprecated_units:\n            deprecated_names.add(unit)\n\n        return names, deprecated_names, []\n\n    @classmethod\n    def _validate_unit(cls, unit, detailed_exception=True):\n        if unit not in cls._units:\n            if detailed_exception:\n                raise ValueError(\n                    f\"Unit '{unit}' not supported by the FITS standard. \"\n                    + utils.did_you_mean_units(\n                        unit,\n                        cls._units,\n                        cls._deprecated_units,\n                        cls._to_decomposed_alternative,\n                    ),\n                )\n            else:\n                raise ValueError()\n\n        if unit in cls._deprecated_units:\n            utils.unit_deprecation_warning(\n                unit, cls._units[unit], \"FITS\", cls._to_decomposed_alternative\n            )",
                        "filename": "astropy/units/format/fits.py",
                        "start_index": 225,
                        "end_index": 3130,
                        "start_line": 3,
                        "end_line": 122,
                        "max_line": 152,
                        "git_instance": "github",
                        "repo_name": "testbed/astropy__astropy__5.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the FITS unit format handling, including a mapping for 'Celsius' and 'deg C' to 'u.deg_C', which is directly related to the issue of supporting degrees Celsius in FITS units."
                }
            ]
        },
        "solution_task": "- Add a new entry for \"deg_C\" in the FITS unit format mapping within the `astropy.units.format.fits` module to support the conversion of `u.deg_C.to_string(\"fits\")`.\n- Ensure that the new entry follows the FITS standard and IAU recommendations for unit representation.\n- Update the `_generate_unit_names` method in `fits.py` to include the mapping for \"deg_C\" to its FITS-compliant string representation, which could be \"C\" or another appropriate string based on the FITS standard.\n- Add a unit test to verify that `u.deg_C.to_string(\"fits\")` returns the correct FITS-compliant string without raising an exception.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable solution to the problem described in the PROMPT. It suggests adding a new entry for \"deg_C\" in the FITS unit format mapping within the `astropy.units.format.fits` module, which is a direct and relevant action to support degrees Celsius in FITS units. The RESPONSE also advises ensuring that the new entry follows the FITS standard and IAU recommendations, which is crucial for compliance. Furthermore, it suggests updating the `_generate_unit_names` method to include the new mapping and adding a unit test to verify the functionality. This is a comprehensive approach to both implementing the feature and ensuring its correctness. The RESPONSE also provides a link to the relevant code snippet, which is helpful for locating where the changes should be made. The only reason it does not score a 10 is that it does not specify what the FITS-compliant string representation for 'deg_C' should be, which would have made the RESPONSE complete.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711736363.135881,
        "result": "- Add a new entry for \"deg_C\" in the FITS unit format mapping within the `astropy.units.format.fits` module to support the conversion of `u.deg_C.to_string(\"fits\")`.\n- Ensure that the new entry follows the FITS standard and IAU recommendations for unit representation.\n- Update the `_generate_unit_names` method in `fits.py` to include the mapping for \"deg_C\" to its FITS-compliant string representation, which could be \"C\" or another appropriate string based on the FITS standard.\n- Add a unit test to verify that `u.deg_C.to_string(\"fits\")` returns the correct FITS-compliant string without raising an exception.\n\n### Code snippets to check\n\n-  \u2192 [astropy](https://github.com/testbed/astropy__astropy__5.1/tree//astropy) \u2192 [units](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/units) \u2192 [format](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/units/format)- [Lines 3 - 122](https://github.com/testbed/astropy__astropy__5.1/blob//astropy/units/format/fits.py#L3-L122)\n\n This snippet contains the FITS unit format handling, including a mapping for 'Celsius' and 'deg C' to 'u.deg_C', which is directly related to the issue of supporting degrees Celsius in FITS units."
    }
}