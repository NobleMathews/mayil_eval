{
    "id": "sympy__sympy-15625",
    "repo_name": "testbed/sympy__sympy__1.4",
    "task_id": 3637494936057834700,
    "title": "Jupyter notebook LaTeX output breaks when processed in LaTeX, ironically",
    "body": "Steps to reproduce:\r\n\r\n* Create a Jupyter notebook (named, say, `mynotebook.ipynb`) with this content:\r\n\r\n  ```python\r\n  import sympy as sp\r\n  sp.init_printing()\r\n  1\r\n  ```\r\n\r\n* Convert it to LaTeX (you can remove the `--execute` flag if you saved the result in the notebook):\r\n\r\n      python3 -m nbconvert mynotebook.ipynb --execute --to pdf\r\n\r\nThis creates the error (originating from LaTeX):\r\n\r\n```\r\n...\r\n! LaTeX Error: Bad math environment delimiter.\r\n\r\nSee the LaTeX manual or LaTeX Companion for explanation.\r\nType  H <return>  for immediate help.\r\n ...                                              \r\n                                                  \r\nl.300     $$\\begin{equation*}\r\n                             1\\end{equation*}$$\r\n? \r\n! Emergency stop.\r\n ...                                              \r\n                                                  \r\nl.300     $$\\begin{equation*}\r\n                             1\\end{equation*}$$\r\n...\r\n```\r\n\r\nIf you only convert `--to latex`, you'll see that this LaTeX code is generated:\r\n\r\n```latex\r\n...\r\n\\texttt{\\color{outcolor}Out[{\\color{outcolor}1}]:}\r\n    \r\n    $$\\begin{equation*}1\\end{equation*}$$\r\n...\r\n```\r\n\r\nThe reason for this error message is that the `equation*` environment is meant to be used in text mode, but sandwiching the whole thing between `$$` switches to math mode.\r\n\r\nIn this case the `$$` should simply be removed, but a general solution to this problem might be more involved.\nLaTeX printing: $$...$$ -> $\\displaystyle ...$\n#### References to other Issues or PRs\r\n\r\nSame thing for IPython: https://github.com/ipython/ipython/pull/11357\r\n\r\nSomewhat related: https://github.com/jupyter/nbconvert/pull/892\r\n\r\n#### Brief description of what is fixed or changed\r\n\r\nChange the LaTeX wrapping from `$$`...`$$` to `$\\displaystyle `...`$`\r\n\r\n#### Other comments\r\n\r\nThis left-aligns expressions when exporting to LaTeX.\r\n\r\nBefore:\r\n\r\n![grafik](https://user-images.githubusercontent.com/705404/46369833-5642c800-c684-11e8-9d11-600ab87c3dc2.png)\r\n\r\nAfter:\r\n\r\n![grafik](https://user-images.githubusercontent.com/705404/46369898-7bcfd180-c684-11e8-8e71-275a7ba45bca.png)\r\n\r\n#### Release Notes\r\n\r\n<!-- BEGIN RELEASE NOTES -->\r\n* printing\r\n  * change from `$$`...`$$` to `$\\displaystyle `...`$` to allow left-aligning in LaTeX documents\r\n<!-- END RELEASE NOTES -->\r\n\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/sympy__sympy__1.4.git",
    "requested_commit": "",
    "mayil_response": "- The issue is caused by using double dollar signs `$$` around the `\\begin{equation*}...\\end{equation*}` environment, which is incorrect in LaTeX as the `equation*` environment already denotes a math environment.\n- To fix the issue, remove the double dollar signs from around the `\\begin{equation*}...\\end{equation*}` in the Jupyter notebook `mynotebook.ipynb`.\n- The corrected LaTeX snippet should be:\n  ```latex\n  \\begin{equation*}\n  1\n  \\end{equation*}\n  ```\n- Ensure that the `init_printing` function from SymPy is correctly configured to output LaTeX that is compatible with the LaTeX conversion process in Jupyter nbconvert.\n\n### Code snippets to check\n\n-  \u2192 [sympy](https://github.com/testbed/sympy__sympy__1.4/tree//sympy) \u2192 [printing](https://github.com/testbed/sympy__sympy__1.4/tree//sympy/printing)- [Lines 111 - 172](https://github.com/testbed/sympy__sympy__1.4/blob//sympy/printing/preview.py#L111-L172)\n\n This snippet contains the LaTeX string generation for previewing, which includes the '$\\displaystyle' that needs to be changed as per the issue description.\n-  \u2192 [sympy](https://github.com/testbed/sympy__sympy__1.4/tree//sympy) \u2192 [interactive](https://github.com/testbed/sympy__sympy__1.4/tree//sympy/interactive)- [Lines 36 - 117](https://github.com/testbed/sympy__sympy__1.4/blob//sympy/interactive/printing.py#L36-L117)\n\n This snippet is part of the IPython interactive session setup for printing and may need to be reviewed to ensure the LaTeX output is consistent with the desired changes. \n\n\n   - [Lines 182 - 521](https://github.com/testbed/sympy__sympy__1.4/blob//sympy/interactive/printing.py#L182-L521)\n\n This snippet includes functions that handle LaTeX rendering in IPython, which may be affected by the changes in LaTeX output formatting. \n\n\n   - [Lines 252 - 315](https://github.com/testbed/sympy__sympy__1.4/blob//sympy/interactive/printing.py#L252-L315)\n\n This snippet is involved in setting up the printing format for IPython and may need adjustments to accommodate the changes in LaTeX output.\n-  \u2192 [sympy](https://github.com/testbed/sympy__sympy__1.4/tree//sympy) \u2192 [printing](https://github.com/testbed/sympy__sympy__1.4/tree//sympy/printing)- [Lines 1 - 85](https://github.com/testbed/sympy__sympy__1.4/blob//sympy/printing/latex.py#L1-L85)\n\n This snippet defines the LaTeX printer and may contain the logic for wrapping expressions in LaTeX, which is relevant to the issue.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0002605,
        "snippet_processor": 0.05954,
        "issue_star_creation": 0.022940000000000002,
        "issue_star_solver": 0.06557,
        "bouncer": 0.02279
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711748357.695827,
        "relevant_snippets": [
            {
                "code": "# Ported from latex2sympy by @augustt198\n# https://github.com/augustt198/latex2sympy\n# See license in LICENSE.txt\n\nimport sympy\nfrom sympy.external import import_module\nfrom sympy.printing.str import StrPrinter\n\nfrom .errors import LaTeXParsingError\n\n\nLaTeXParser = LaTeXLexer = MathErrorListener = None\n\ntry:\n    LaTeXParser = import_module('sympy.parsing.latex._antlr.latexparser',\n                                import_kwargs={'fromlist': ['LaTeXParser']}).LaTeXParser\n    LaTeXLexer = import_module('sympy.parsing.latex._antlr.latexlexer',\n                               import_kwargs={'fromlist': ['LaTeXLexer']}).LaTeXLexer\nexcept Exception:\n    pass\n\nErrorListener = import_module('antlr4.error.ErrorListener',\n                              warn_not_installed=True,\n                              import_kwargs={'fromlist': ['ErrorListener']}\n                              )\n\n\n\nif ErrorListener:\n    class MathErrorListener(ErrorListener.ErrorListener):  # type: ignore\n        def __init__(self, src):\n            super(ErrorListener.ErrorListener, self).__init__()\n            self.src = src\n\n        def syntaxError(self, recog, symbol, line, col, msg, e):\n            fmt = \"%s\\n%s\\n%s\"\n            marker = \"~\" * col + \"^\"\n\n            if msg.startswith(\"missing\"):\n                err = fmt % (msg, self.src, marker)\n            elif msg.startswith(\"no viable\"):\n                err = fmt % (\"I expected something else here\", self.src, marker)\n            elif msg.startswith(\"mismatched\"):\n                names = LaTeXParser.literalNames\n                expected = [\n                    names[i] for i in e.getExpectedTokens() if i < len(names)\n                ]\n                if len(expected) < 10:\n                    expected = \" \".join(expected)\n                    err = (fmt % (\"I expected one of these: \" + expected, self.src,\n                                  marker))\n                else:\n                    err = (fmt % (\"I expected something else here\", self.src,\n                                  marker))\n            else:\n                err = fmt % (\"I don't understand this\", self.src, marker)\n            raise LaTeXParsingError(err)",
                "filename": "sympy/parsing/latex/_parse_latex_antlr.py",
                "start_index": 0,
                "end_index": 2169,
                "start_line": 1,
                "end_line": 57,
                "max_line": 558,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.4",
                "sha": ""
            },
            {
                "code": "def parse_latex(sympy):\n    antlr4 = import_module('antlr4', warn_not_installed=True)\n\n    if None in [antlr4, MathErrorListener]:\n        raise ImportError(\"LaTeX parsing requires the antlr4 python package,\"\n                          \" provided by pip (antlr4-python2-runtime or\"\n                          \" antlr4-python3-runtime) or\"\n                          \" conda (antlr-python-runtime)\")\n\n    matherror = MathErrorListener(sympy)\n\n    stream = antlr4.InputStream(sympy)\n    lex = LaTeXLexer(stream)\n    lex.removeErrorListeners()\n    lex.addErrorListener(matherror)\n\n    tokens = antlr4.CommonTokenStream(lex)\n    parser = LaTeXParser(tokens)\n\n    # remove default console error listener\n    parser.removeErrorListeners()\n    parser.addErrorListener(matherror)\n\n    relation = parser.math().relation()\n    expr = convert_relation(relation)\n\n    return expr\n\n\ndef convert_relation(rel):\n    if rel.expr():\n        return convert_expr(rel.expr())\n\n    lh = convert_relation(rel.relation(0))\n    rh = convert_relation(rel.relation(1))\n    if rel.LT():\n        return sympy.StrictLessThan(lh, rh)\n    elif rel.LTE():\n        return sympy.LessThan(lh, rh)\n    elif rel.GT():\n        return sympy.StrictGreaterThan(lh, rh)\n    elif rel.GTE():\n        return sympy.GreaterThan(lh, rh)\n    elif rel.EQUAL():\n        return sympy.Eq(lh, rh)\n\n\ndef convert_expr(expr):\n    return convert_add(expr.additive())\n\n\ndef convert_add(add):\n    if add.ADD():\n        lh = convert_add(add.additive(0))\n        rh = convert_add(add.additive(1))\n        return sympy.Add(lh, rh, evaluate=False)\n    elif add.SUB():\n        lh = convert_add(add.additive(0))\n        rh = convert_add(add.additive(1))\n        return sympy.Add(lh, -1 * rh, evaluate=False)\n    else:\n        return convert_mp(add.mp())\n\n\ndef convert_mp(mp):\n    if hasattr(mp, 'mp'):\n        mp_left = mp.mp(0)\n        mp_right = mp.mp(1)\n    else:\n        mp_left = mp.mp_nofunc(0)\n        mp_right = mp.mp_nofunc(1)\n\n    if mp.MUL() or mp.CMD_TIMES() or mp.CMD_CDOT():\n        lh = convert_mp(mp_left)\n        rh = convert_mp(mp_right)\n        return sympy.Mul(lh, rh, evaluate=False)\n    elif mp.DIV() or mp.CMD_DIV() or mp.COLON():\n        lh = convert_mp(mp_left)\n        rh = convert_mp(mp_right)\n        return sympy.Mul(lh, sympy.Pow(rh, -1, evaluate=False), evaluate=False)\n    else:\n        if hasattr(mp, 'unary'):\n            return convert_unary(mp.unary())\n        else:\n            return convert_unary(mp.unary_nofunc())",
                "filename": "sympy/parsing/latex/_parse_latex_antlr.py",
                "start_index": 2172,
                "end_index": 4657,
                "start_line": 60,
                "end_line": 144,
                "max_line": 558,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.4",
                "sha": ""
            },
            {
                "code": "\"\"\"\nA Printer which converts an expression into its LaTeX equivalent.\n\"\"\"\n\nfrom __future__ import print_function, division\n\nfrom typing import Any, Dict\n\nimport itertools\n\nfrom sympy.core import S, Add, Symbol, Mod\nfrom sympy.core.alphabets import greeks\nfrom sympy.core.containers import Tuple\nfrom sympy.core.function import _coeff_isneg, AppliedUndef, Derivative\nfrom sympy.core.operations import AssocOp\nfrom sympy.core.sympify import SympifyError\nfrom sympy.logic.boolalg import true\n\n# sympy.printing imports\nfrom sympy.printing.precedence import precedence_traditional\nfrom sympy.printing.printer import Printer\nfrom sympy.printing.conventions import split_super_sub, requires_partial\nfrom sympy.printing.precedence import precedence, PRECEDENCE\n\nimport mpmath.libmp as mlib\nfrom mpmath.libmp import prec_to_dps\n\nfrom sympy.core.compatibility import default_sort_key\nfrom sympy.utilities.iterables import has_variety\n\nimport re\n\n# Hand-picked functions which can be used directly in both LaTeX and MathJax\n# Complete list at\n# https://docs.mathjax.org/en/latest/tex.html#supported-latex-commands\n# This variable only contains those functions which sympy uses.\naccepted_latex_functions = ['arcsin', 'arccos', 'arctan', 'sin', 'cos', 'tan',\n                            'sinh', 'cosh', 'tanh', 'sqrt', 'ln', 'log', 'sec',\n                            'csc', 'cot', 'coth', 're', 'im', 'frac', 'root',\n                            'arg',\n                            ]\n\ntex_greek_dictionary = {\n    'Alpha': 'A',\n    'Beta': 'B',\n    'Gamma': r'\\Gamma',\n    'Delta': r'\\Delta',\n    'Epsilon': 'E',\n    'Zeta': 'Z',\n    'Eta': 'H',\n    'Theta': r'\\Theta',\n    'Iota': 'I',\n    'Kappa': 'K',\n    'Lambda': r'\\Lambda',\n    'Mu': 'M',\n    'Nu': 'N',\n    'Xi': r'\\Xi',\n    'omicron': 'o',\n    'Omicron': 'O',\n    'Pi': r'\\Pi',\n    'Rho': 'P',\n    'Sigma': r'\\Sigma',\n    'Tau': 'T',\n    'Upsilon': r'\\Upsilon',\n    'Phi': r'\\Phi',\n    'Chi': 'X',\n    'Psi': r'\\Psi',\n    'Omega': r'\\Omega',\n    'lamda': r'\\lambda',\n    'Lamda': r'\\Lambda',\n    'khi': r'\\chi',\n    'Khi': r'X',\n    'varepsilon': r'\\varepsilon',\n    'varkappa': r'\\varkappa',\n    'varphi': r'\\varphi',\n    'varpi': r'\\varpi',\n    'varrho': r'\\varrho',\n    'varsigma': r'\\varsigma',\n    'vartheta': r'\\vartheta',\n}\n\nother_symbols = set(['aleph', 'beth', 'daleth', 'gimel', 'ell', 'eth', 'hbar',\n                     'hslash', 'mho', 'wp', ])\n\n# Variable name modifiers",
                "filename": "sympy/printing/latex.py",
                "start_index": 0,
                "end_index": 2428,
                "start_line": 1,
                "end_line": 85,
                "max_line": 2941,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.4",
                "sha": ""
            },
            {
                "code": "# https://github.com/sympy/sympy/pull/12854",
                "filename": "sympy/matrices/matrices.py",
                "start_index": 21142,
                "end_index": 21185,
                "start_line": 587,
                "end_line": 587,
                "max_line": 2310,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.4",
                "sha": ""
            },
            {
                "code": "# encoding: utf-8\n\n# *** GENERATED BY `setup.py antlr`, DO NOT EDIT BY HAND ***\n#\n# Generated from ../LaTeX.g4, derived from latex2sympy\n#     latex2sympy is licensed under the MIT license\n#     https://github.com/augustt198/latex2sympy/blob/master/LICENSE.txt\n#\n# Generated with antlr4\n#    antlr4 is licensed under the BSD-3-Clause License\n#    https://github.com/antlr/antlr4/blob/master/LICENSE.txt",
                "filename": "sympy/parsing/latex/_antlr/__init__.py",
                "start_index": 1,
                "end_index": 403,
                "start_line": 2,
                "end_line": 12,
                "max_line": 12,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.4",
                "sha": ""
            },
            {
                "code": "special = [ 'pyglet' ]\n\n    if viewer is None:\n        if output == \"png\":\n            viewer = \"pyglet\"\n        else:\n            # sorted in order from most pretty to most ugly\n            # very discussable, but indeed 'gv' looks awful :)\n            # TODO add candidates for windows to list\n            candidates = {\n                \"dvi\": [ \"evince\", \"okular\", \"kdvi\", \"xdvi\" ],\n                \"ps\": [ \"evince\", \"okular\", \"gsview\", \"gv\" ],\n                \"pdf\": [ \"evince\", \"okular\", \"kpdf\", \"acroread\", \"xpdf\", \"gv\" ],\n            }\n\n            try:\n                for candidate in candidates[output]:\n                    path = find_executable(candidate)\n                    if path is not None:\n                        viewer = path\n                        break\n                else:\n                    raise SystemError(\n                        \"No viewers found for '%s' output format.\" % output)\n            except KeyError:\n                raise SystemError(\"Invalid output format: %s\" % output)\n    else:\n        if viewer == \"file\":\n            if filename is None:\n                raise ValueError(\"filename has to be specified if viewer=\\\"file\\\"\")\n        elif viewer == \"BytesIO\":\n            if outputbuffer is None:\n                raise ValueError(\"outputbuffer has to be a BytesIO \"\n                                 \"compatible object if viewer=\\\"BytesIO\\\"\")\n        elif viewer not in special and not find_executable(viewer):\n            raise SystemError(\"Unrecognized viewer: %s\" % viewer)\n\n\n    if preamble is None:\n        actual_packages = packages + (\"amsmath\", \"amsfonts\")\n        if euler:\n            actual_packages += (\"euler\",)\n        package_includes = \"\\n\" + \"\\n\".join([\"\\\\usepackage{%s}\" % p\n                                             for p in actual_packages])\n\n        preamble = r\"\"\"\\documentclass[varwidth,12pt]{standalone}\n%s\n\n\\begin{document}\n\"\"\" % (package_includes)\n    else:\n        if packages:\n            raise ValueError(\"The \\\"packages\\\" keyword must not be set if a \"\n                             \"custom LaTeX preamble was specified\")\n    latex_main = preamble + '\\n%s\\n\\n' + r\"\\end{document}\"\n\n    if isinstance(expr, str):\n        latex_string = expr\n    else:\n        latex_string = ('$\\\\displaystyle ' +\n                        latex(expr, mode='plain', **latex_settings) +\n                        '$')",
                "filename": "sympy/printing/preview.py",
                "start_index": 4340,
                "end_index": 6710,
                "start_line": 111,
                "end_line": 172,
                "max_line": 329,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.4",
                "sha": ""
            },
            {
                "code": "\"\"\"Setup printing in IPython interactive session. \"\"\"\n    try:\n        from IPython.lib.latextools import latex_to_png\n    except ImportError:\n        pass\n\n    # Guess best font color if none was given based on the ip.colors string.\n    # From the IPython documentation:\n    #   It has four case-insensitive values: 'nocolor', 'neutral', 'linux',\n    #   'lightbg'. The default is neutral, which should be legible on either\n    #   dark or light terminal backgrounds. linux is optimised for dark\n    #   backgrounds and lightbg for light ones.\n    if forecolor is None:\n        color = ip.colors.lower()\n        if color == 'lightbg':\n            forecolor = 'Black'\n        elif color == 'linux':\n            forecolor = 'White'\n        else:\n            # No idea, go with gray.\n            forecolor = 'Gray'\n        debug(\"init_printing: Automatic foreground color:\", forecolor)\n\n    preamble = \"\\\\documentclass[varwidth,%s]{standalone}\\n\" \\\n               \"\\\\usepackage{amsmath,amsfonts}%s\\\\begin{document}\"\n    if euler:\n        addpackages = '\\\\usepackage{euler}'\n    else:\n        addpackages = ''\n    if use_latex == \"svg\":\n        addpackages = addpackages + \"\\n\\\\special{color %s}\" % forecolor\n\n    preamble = preamble % (fontsize, addpackages)\n\n    imagesize = 'tight'\n    offset = \"0cm,0cm\"\n    resolution = round(150*scale)\n    dvi = r\"-T %s -D %d -bg %s -fg %s -O %s\" % (\n        imagesize, resolution, backcolor, forecolor, offset)\n    dvioptions = dvi.split()\n\n    svg_scale = 150/72*scale\n    dvioptions_svg = [\"--no-fonts\", \"--scale={}\".format(svg_scale)]\n\n    debug(\"init_printing: DVIOPTIONS:\", dvioptions)\n    debug(\"init_printing: DVIOPTIONS_SVG:\", dvioptions_svg)\n    debug(\"init_printing: PREAMBLE:\", preamble)\n\n    latex = latex_printer or default_latex\n\n    def _print_plain(arg, p, cycle):\n        \"\"\"caller for pretty, for use in IPython 0.11\"\"\"\n        if _can_print_latex(arg):\n            p.text(stringify_func(arg))\n        else:\n            p.text(IPython.lib.pretty.pretty(arg))\n\n    def _preview_wrapper(o):\n        exprbuffer = BytesIO()\n        try:\n            preview(o, output='png', viewer='BytesIO',\n                    outputbuffer=exprbuffer, preamble=preamble,\n                    dvioptions=dvioptions)\n        except Exception as e:\n            # IPython swallows exceptions\n            debug(\"png printing:\", \"_preview_wrapper exception raised:\",\n                  repr(e))\n            raise\n        return exprbuffer.getvalue()\n\n    def _svg_wrapper(o):\n        exprbuffer = BytesIO()\n        try:\n            preview(o, output='svg', viewer='BytesIO',\n                    outputbuffer=exprbuffer, preamble=preamble,\n                    dvioptions=dvioptions_svg)\n        except Exception as e:\n            # IPython swallows exceptions\n            debug(\"svg printing:\", \"_preview_wrapper exception raised:\",\n                  repr(e))\n            raise\n        return exprbuffer.getvalue().decode('utf-8')",
                "filename": "sympy/interactive/printing.py",
                "start_index": 1012,
                "end_index": 3970,
                "start_line": 36,
                "end_line": 117,
                "max_line": 571,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.4",
                "sha": ""
            },
            {
                "code": "def _print_latex_png(o):\n        \"\"\"\n        A function that returns a png rendered by an external latex\n        distribution, falling back to matplotlib rendering\n        \"\"\"\n        if _can_print_latex(o):\n            s = latex(o, mode=latex_mode, **settings)\n            if latex_mode == 'plain':\n                s = '$\\\\displaystyle %s$' % s\n            try:\n                return _preview_wrapper(s)\n            except RuntimeError as e:\n                debug('preview failed with:', repr(e),\n                      ' Falling back to matplotlib backend')\n                if latex_mode != 'inline':\n                    s = latex(o, mode='inline', **settings)\n                return _matplotlib_wrapper(s)\n\n    def _print_latex_svg(o):\n        \"\"\"\n        A function that returns a svg rendered by an external latex\n        distribution, no fallback available.\n        \"\"\"\n        if _can_print_latex(o):\n            s = latex(o, mode=latex_mode, **settings)\n            if latex_mode == 'plain':\n                s = '$\\\\displaystyle %s$' % s\n            try:\n                return _svg_wrapper(s)\n            except RuntimeError as e:\n                debug('preview failed with:', repr(e),\n                      ' No fallback available.')\n\n    def _print_latex_matplotlib(o):\n        \"\"\"\n        A function that returns a png rendered by mathtext\n        \"\"\"\n        if _can_print_latex(o):\n            s = latex(o, mode='inline', **settings)\n            return _matplotlib_wrapper(s)\n\n    def _print_latex_text(o):\n        \"\"\"\n        A function to generate the latex representation of sympy expressions.\n        \"\"\"\n        if _can_print_latex(o):\n            s = latex(o, mode=latex_mode, **settings)\n            if latex_mode == 'plain':\n                return '$\\\\displaystyle %s$' % s\n            return s\n\n    def _result_display(self, arg):\n        \"\"\"IPython's pretty-printer display hook, for use in IPython 0.10\n\n           This function was adapted from:\n\n            ipython/IPython/hooks.py:155\n\n        \"\"\"\n        if self.rc.pprint:\n            out = stringify_func(arg)\n\n            if '\\n' in out:\n                print\n\n            print(out)\n        else:\n            print(repr(arg))\n\n    import IPython",
                "filename": "sympy/interactive/printing.py",
                "start_index": 6744,
                "end_index": 8973,
                "start_line": 182,
                "end_line": 521,
                "max_line": 571,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.4",
                "sha": ""
            },
            {
                "code": "\"\"\"\nA print function that pretty prints SymPy objects.\n\n:moduleauthor: Brian Granger\n\nUsage\n=====\n\nTo use this extension, execute:\n\n    %load_ext sympy.interactive.ipythonprinting\n\nOnce the extension is loaded, SymPy Basic objects are automatically\npretty-printed in the terminal and rendered in LaTeX in the Qt console and\nnotebook.\n\n\"\"\"\n#-----------------------------------------------------------------------------\n#  Copyright (C) 2008  The IPython Development Team\n#\n#  Distributed under the terms of the BSD License.  The full license is in\n#  the file COPYING, distributed as part of this software.\n#-----------------------------------------------------------------------------\n\n#-----------------------------------------------------------------------------\n# Imports\n#-----------------------------------------------------------------------------\n\nimport warnings\n\nfrom sympy.interactive.printing import init_printing\nfrom sympy.utilities.exceptions import SymPyDeprecationWarning\n\n#-----------------------------------------------------------------------------\n# Definitions of special display functions for use with IPython\n#-----------------------------------------------------------------------------\n\ndef load_ipython_extension(ip):\n    \"\"\"Load the extension in IPython.\"\"\"\n    # Since Python filters deprecation warnings by default,\n    # we add a filter to make sure this message will be shown.\n    warnings.simplefilter(\"once\", SymPyDeprecationWarning)\n    SymPyDeprecationWarning(\n        feature=\"using %load_ext sympy.interactive.ipythonprinting\",\n        useinstead=\"from sympy import init_printing ; init_printing()\",\n        deprecated_since_version=\"0.7.3\",\n        issue=7013\n    ).warn()\n    init_printing(ip=ip)",
                "filename": "sympy/interactive/ipythonprinting.py",
                "start_index": 0,
                "end_index": 1735,
                "start_line": 1,
                "end_line": 49,
                "max_line": 49,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.4",
                "sha": ""
            },
            {
                "code": "if V(IPython.__version__) >= '0.11':\n        from sympy.core.basic import Basic\n        from sympy.matrices.matrices import MatrixBase\n        from sympy.physics.vector import Vector, Dyadic\n        from sympy.tensor.array import NDimArray\n\n        printable_types = [Basic, MatrixBase, float, tuple, list, set,\n                frozenset, dict, Vector, Dyadic, NDimArray, int]\n\n        plaintext_formatter = ip.display_formatter.formatters['text/plain']\n\n        for cls in printable_types:\n            plaintext_formatter.for_type(cls, _print_plain)\n\n        svg_formatter = ip.display_formatter.formatters['image/svg+xml']\n        if use_latex in ('svg', ):\n            debug(\"init_printing: using svg formatter\")\n            for cls in printable_types:\n                svg_formatter.for_type(cls, _print_latex_svg)\n        else:\n            debug(\"init_printing: not using any svg formatter\")\n            for cls in printable_types:\n                # Better way to set this, but currently does not work in IPython\n                #png_formatter.for_type(cls, None)\n                if cls in svg_formatter.type_printers:\n                    svg_formatter.type_printers.pop(cls)\n\n        png_formatter = ip.display_formatter.formatters['image/png']\n        if use_latex in (True, 'png'):\n            debug(\"init_printing: using png formatter\")\n            for cls in printable_types:\n                png_formatter.for_type(cls, _print_latex_png)\n        elif use_latex == 'matplotlib':\n            debug(\"init_printing: using matplotlib formatter\")\n            for cls in printable_types:\n                png_formatter.for_type(cls, _print_latex_matplotlib)\n        else:\n            debug(\"init_printing: not using any png formatter\")\n            for cls in printable_types:\n                # Better way to set this, but currently does not work in IPython\n                #png_formatter.for_type(cls, None)\n                if cls in png_formatter.type_printers:\n                    png_formatter.type_printers.pop(cls)\n\n        latex_formatter = ip.display_formatter.formatters['text/latex']\n        if use_latex in (True, 'mathjax'):\n            debug(\"init_printing: using mathjax formatter\")\n            for cls in printable_types:\n                latex_formatter.for_type(cls, _print_latex_text)\n            for typ in sympy_latex_types:\n                typ._repr_latex_ = typ._repr_latex_orig\n        else:\n            debug(\"init_printing: not using text/latex formatter\")\n            for cls in printable_types:\n                # Better way to set this, but currently does not work in IPython\n                #latex_formatter.for_type(cls, None)\n                if cls in latex_formatter.type_printers:\n                    latex_formatter.type_printers.pop(cls)\n\n            for typ in sympy_latex_types:\n                typ._repr_latex_ = None\n\n    else:\n        ip.set_hook('result_display', _result_display)",
                "filename": "sympy/interactive/printing.py",
                "start_index": 8978,
                "end_index": 11897,
                "start_line": 252,
                "end_line": 315,
                "max_line": 571,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.4",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "sympy/printing/preview.py": [
                {
                    "chunk": {
                        "code": "special = [ 'pyglet' ]\n\n    if viewer is None:\n        if output == \"png\":\n            viewer = \"pyglet\"\n        else:\n            # sorted in order from most pretty to most ugly\n            # very discussable, but indeed 'gv' looks awful :)\n            # TODO add candidates for windows to list\n            candidates = {\n                \"dvi\": [ \"evince\", \"okular\", \"kdvi\", \"xdvi\" ],\n                \"ps\": [ \"evince\", \"okular\", \"gsview\", \"gv\" ],\n                \"pdf\": [ \"evince\", \"okular\", \"kpdf\", \"acroread\", \"xpdf\", \"gv\" ],\n            }\n\n            try:\n                for candidate in candidates[output]:\n                    path = find_executable(candidate)\n                    if path is not None:\n                        viewer = path\n                        break\n                else:\n                    raise SystemError(\n                        \"No viewers found for '%s' output format.\" % output)\n            except KeyError:\n                raise SystemError(\"Invalid output format: %s\" % output)\n    else:\n        if viewer == \"file\":\n            if filename is None:\n                raise ValueError(\"filename has to be specified if viewer=\\\"file\\\"\")\n        elif viewer == \"BytesIO\":\n            if outputbuffer is None:\n                raise ValueError(\"outputbuffer has to be a BytesIO \"\n                                 \"compatible object if viewer=\\\"BytesIO\\\"\")\n        elif viewer not in special and not find_executable(viewer):\n            raise SystemError(\"Unrecognized viewer: %s\" % viewer)\n\n\n    if preamble is None:\n        actual_packages = packages + (\"amsmath\", \"amsfonts\")\n        if euler:\n            actual_packages += (\"euler\",)\n        package_includes = \"\\n\" + \"\\n\".join([\"\\\\usepackage{%s}\" % p\n                                             for p in actual_packages])\n\n        preamble = r\"\"\"\\documentclass[varwidth,12pt]{standalone}\n%s\n\n\\begin{document}\n\"\"\" % (package_includes)\n    else:\n        if packages:\n            raise ValueError(\"The \\\"packages\\\" keyword must not be set if a \"\n                             \"custom LaTeX preamble was specified\")\n    latex_main = preamble + '\\n%s\\n\\n' + r\"\\end{document}\"\n\n    if isinstance(expr, str):\n        latex_string = expr\n    else:\n        latex_string = ('$\\\\displaystyle ' +\n                        latex(expr, mode='plain', **latex_settings) +\n                        '$')",
                        "filename": "sympy/printing/preview.py",
                        "start_index": 4340,
                        "end_index": 6710,
                        "start_line": 111,
                        "end_line": 172,
                        "max_line": 329,
                        "git_instance": "github",
                        "repo_name": "testbed/sympy__sympy__1.4",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the LaTeX string generation for previewing, which includes the '$\\displaystyle' that needs to be changed as per the issue description."
                }
            ],
            "sympy/interactive/printing.py": [
                {
                    "chunk": {
                        "code": "\"\"\"Setup printing in IPython interactive session. \"\"\"\n    try:\n        from IPython.lib.latextools import latex_to_png\n    except ImportError:\n        pass\n\n    # Guess best font color if none was given based on the ip.colors string.\n    # From the IPython documentation:\n    #   It has four case-insensitive values: 'nocolor', 'neutral', 'linux',\n    #   'lightbg'. The default is neutral, which should be legible on either\n    #   dark or light terminal backgrounds. linux is optimised for dark\n    #   backgrounds and lightbg for light ones.\n    if forecolor is None:\n        color = ip.colors.lower()\n        if color == 'lightbg':\n            forecolor = 'Black'\n        elif color == 'linux':\n            forecolor = 'White'\n        else:\n            # No idea, go with gray.\n            forecolor = 'Gray'\n        debug(\"init_printing: Automatic foreground color:\", forecolor)\n\n    preamble = \"\\\\documentclass[varwidth,%s]{standalone}\\n\" \\\n               \"\\\\usepackage{amsmath,amsfonts}%s\\\\begin{document}\"\n    if euler:\n        addpackages = '\\\\usepackage{euler}'\n    else:\n        addpackages = ''\n    if use_latex == \"svg\":\n        addpackages = addpackages + \"\\n\\\\special{color %s}\" % forecolor\n\n    preamble = preamble % (fontsize, addpackages)\n\n    imagesize = 'tight'\n    offset = \"0cm,0cm\"\n    resolution = round(150*scale)\n    dvi = r\"-T %s -D %d -bg %s -fg %s -O %s\" % (\n        imagesize, resolution, backcolor, forecolor, offset)\n    dvioptions = dvi.split()\n\n    svg_scale = 150/72*scale\n    dvioptions_svg = [\"--no-fonts\", \"--scale={}\".format(svg_scale)]\n\n    debug(\"init_printing: DVIOPTIONS:\", dvioptions)\n    debug(\"init_printing: DVIOPTIONS_SVG:\", dvioptions_svg)\n    debug(\"init_printing: PREAMBLE:\", preamble)\n\n    latex = latex_printer or default_latex\n\n    def _print_plain(arg, p, cycle):\n        \"\"\"caller for pretty, for use in IPython 0.11\"\"\"\n        if _can_print_latex(arg):\n            p.text(stringify_func(arg))\n        else:\n            p.text(IPython.lib.pretty.pretty(arg))\n\n    def _preview_wrapper(o):\n        exprbuffer = BytesIO()\n        try:\n            preview(o, output='png', viewer='BytesIO',\n                    outputbuffer=exprbuffer, preamble=preamble,\n                    dvioptions=dvioptions)\n        except Exception as e:\n            # IPython swallows exceptions\n            debug(\"png printing:\", \"_preview_wrapper exception raised:\",\n                  repr(e))\n            raise\n        return exprbuffer.getvalue()\n\n    def _svg_wrapper(o):\n        exprbuffer = BytesIO()\n        try:\n            preview(o, output='svg', viewer='BytesIO',\n                    outputbuffer=exprbuffer, preamble=preamble,\n                    dvioptions=dvioptions_svg)\n        except Exception as e:\n            # IPython swallows exceptions\n            debug(\"svg printing:\", \"_preview_wrapper exception raised:\",\n                  repr(e))\n            raise\n        return exprbuffer.getvalue().decode('utf-8')",
                        "filename": "sympy/interactive/printing.py",
                        "start_index": 1012,
                        "end_index": 3970,
                        "start_line": 36,
                        "end_line": 117,
                        "max_line": 571,
                        "git_instance": "github",
                        "repo_name": "testbed/sympy__sympy__1.4",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is part of the IPython interactive session setup for printing and may need to be reviewed to ensure the LaTeX output is consistent with the desired changes."
                },
                {
                    "chunk": {
                        "code": "def _print_latex_png(o):\n        \"\"\"\n        A function that returns a png rendered by an external latex\n        distribution, falling back to matplotlib rendering\n        \"\"\"\n        if _can_print_latex(o):\n            s = latex(o, mode=latex_mode, **settings)\n            if latex_mode == 'plain':\n                s = '$\\\\displaystyle %s$' % s\n            try:\n                return _preview_wrapper(s)\n            except RuntimeError as e:\n                debug('preview failed with:', repr(e),\n                      ' Falling back to matplotlib backend')\n                if latex_mode != 'inline':\n                    s = latex(o, mode='inline', **settings)\n                return _matplotlib_wrapper(s)\n\n    def _print_latex_svg(o):\n        \"\"\"\n        A function that returns a svg rendered by an external latex\n        distribution, no fallback available.\n        \"\"\"\n        if _can_print_latex(o):\n            s = latex(o, mode=latex_mode, **settings)\n            if latex_mode == 'plain':\n                s = '$\\\\displaystyle %s$' % s\n            try:\n                return _svg_wrapper(s)\n            except RuntimeError as e:\n                debug('preview failed with:', repr(e),\n                      ' No fallback available.')\n\n    def _print_latex_matplotlib(o):\n        \"\"\"\n        A function that returns a png rendered by mathtext\n        \"\"\"\n        if _can_print_latex(o):\n            s = latex(o, mode='inline', **settings)\n            return _matplotlib_wrapper(s)\n\n    def _print_latex_text(o):\n        \"\"\"\n        A function to generate the latex representation of sympy expressions.\n        \"\"\"\n        if _can_print_latex(o):\n            s = latex(o, mode=latex_mode, **settings)\n            if latex_mode == 'plain':\n                return '$\\\\displaystyle %s$' % s\n            return s\n\n    def _result_display(self, arg):\n        \"\"\"IPython's pretty-printer display hook, for use in IPython 0.10\n\n           This function was adapted from:\n\n            ipython/IPython/hooks.py:155\n\n        \"\"\"\n        if self.rc.pprint:\n            out = stringify_func(arg)\n\n            if '\\n' in out:\n                print\n\n            print(out)\n        else:\n            print(repr(arg))\n\n    import IPython",
                        "filename": "sympy/interactive/printing.py",
                        "start_index": 6744,
                        "end_index": 8973,
                        "start_line": 182,
                        "end_line": 521,
                        "max_line": 571,
                        "git_instance": "github",
                        "repo_name": "testbed/sympy__sympy__1.4",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet includes functions that handle LaTeX rendering in IPython, which may be affected by the changes in LaTeX output formatting."
                },
                {
                    "chunk": {
                        "code": "if V(IPython.__version__) >= '0.11':\n        from sympy.core.basic import Basic\n        from sympy.matrices.matrices import MatrixBase\n        from sympy.physics.vector import Vector, Dyadic\n        from sympy.tensor.array import NDimArray\n\n        printable_types = [Basic, MatrixBase, float, tuple, list, set,\n                frozenset, dict, Vector, Dyadic, NDimArray, int]\n\n        plaintext_formatter = ip.display_formatter.formatters['text/plain']\n\n        for cls in printable_types:\n            plaintext_formatter.for_type(cls, _print_plain)\n\n        svg_formatter = ip.display_formatter.formatters['image/svg+xml']\n        if use_latex in ('svg', ):\n            debug(\"init_printing: using svg formatter\")\n            for cls in printable_types:\n                svg_formatter.for_type(cls, _print_latex_svg)\n        else:\n            debug(\"init_printing: not using any svg formatter\")\n            for cls in printable_types:\n                # Better way to set this, but currently does not work in IPython\n                #png_formatter.for_type(cls, None)\n                if cls in svg_formatter.type_printers:\n                    svg_formatter.type_printers.pop(cls)\n\n        png_formatter = ip.display_formatter.formatters['image/png']\n        if use_latex in (True, 'png'):\n            debug(\"init_printing: using png formatter\")\n            for cls in printable_types:\n                png_formatter.for_type(cls, _print_latex_png)\n        elif use_latex == 'matplotlib':\n            debug(\"init_printing: using matplotlib formatter\")\n            for cls in printable_types:\n                png_formatter.for_type(cls, _print_latex_matplotlib)\n        else:\n            debug(\"init_printing: not using any png formatter\")\n            for cls in printable_types:\n                # Better way to set this, but currently does not work in IPython\n                #png_formatter.for_type(cls, None)\n                if cls in png_formatter.type_printers:\n                    png_formatter.type_printers.pop(cls)\n\n        latex_formatter = ip.display_formatter.formatters['text/latex']\n        if use_latex in (True, 'mathjax'):\n            debug(\"init_printing: using mathjax formatter\")\n            for cls in printable_types:\n                latex_formatter.for_type(cls, _print_latex_text)\n            for typ in sympy_latex_types:\n                typ._repr_latex_ = typ._repr_latex_orig\n        else:\n            debug(\"init_printing: not using text/latex formatter\")\n            for cls in printable_types:\n                # Better way to set this, but currently does not work in IPython\n                #latex_formatter.for_type(cls, None)\n                if cls in latex_formatter.type_printers:\n                    latex_formatter.type_printers.pop(cls)\n\n            for typ in sympy_latex_types:\n                typ._repr_latex_ = None\n\n    else:\n        ip.set_hook('result_display', _result_display)",
                        "filename": "sympy/interactive/printing.py",
                        "start_index": 8978,
                        "end_index": 11897,
                        "start_line": 252,
                        "end_line": 315,
                        "max_line": 571,
                        "git_instance": "github",
                        "repo_name": "testbed/sympy__sympy__1.4",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is involved in setting up the printing format for IPython and may need adjustments to accommodate the changes in LaTeX output."
                }
            ],
            "sympy/printing/latex.py": [
                {
                    "chunk": {
                        "code": "\"\"\"\nA Printer which converts an expression into its LaTeX equivalent.\n\"\"\"\n\nfrom __future__ import print_function, division\n\nfrom typing import Any, Dict\n\nimport itertools\n\nfrom sympy.core import S, Add, Symbol, Mod\nfrom sympy.core.alphabets import greeks\nfrom sympy.core.containers import Tuple\nfrom sympy.core.function import _coeff_isneg, AppliedUndef, Derivative\nfrom sympy.core.operations import AssocOp\nfrom sympy.core.sympify import SympifyError\nfrom sympy.logic.boolalg import true\n\n# sympy.printing imports\nfrom sympy.printing.precedence import precedence_traditional\nfrom sympy.printing.printer import Printer\nfrom sympy.printing.conventions import split_super_sub, requires_partial\nfrom sympy.printing.precedence import precedence, PRECEDENCE\n\nimport mpmath.libmp as mlib\nfrom mpmath.libmp import prec_to_dps\n\nfrom sympy.core.compatibility import default_sort_key\nfrom sympy.utilities.iterables import has_variety\n\nimport re\n\n# Hand-picked functions which can be used directly in both LaTeX and MathJax\n# Complete list at\n# https://docs.mathjax.org/en/latest/tex.html#supported-latex-commands\n# This variable only contains those functions which sympy uses.\naccepted_latex_functions = ['arcsin', 'arccos', 'arctan', 'sin', 'cos', 'tan',\n                            'sinh', 'cosh', 'tanh', 'sqrt', 'ln', 'log', 'sec',\n                            'csc', 'cot', 'coth', 're', 'im', 'frac', 'root',\n                            'arg',\n                            ]\n\ntex_greek_dictionary = {\n    'Alpha': 'A',\n    'Beta': 'B',\n    'Gamma': r'\\Gamma',\n    'Delta': r'\\Delta',\n    'Epsilon': 'E',\n    'Zeta': 'Z',\n    'Eta': 'H',\n    'Theta': r'\\Theta',\n    'Iota': 'I',\n    'Kappa': 'K',\n    'Lambda': r'\\Lambda',\n    'Mu': 'M',\n    'Nu': 'N',\n    'Xi': r'\\Xi',\n    'omicron': 'o',\n    'Omicron': 'O',\n    'Pi': r'\\Pi',\n    'Rho': 'P',\n    'Sigma': r'\\Sigma',\n    'Tau': 'T',\n    'Upsilon': r'\\Upsilon',\n    'Phi': r'\\Phi',\n    'Chi': 'X',\n    'Psi': r'\\Psi',\n    'Omega': r'\\Omega',\n    'lamda': r'\\lambda',\n    'Lamda': r'\\Lambda',\n    'khi': r'\\chi',\n    'Khi': r'X',\n    'varepsilon': r'\\varepsilon',\n    'varkappa': r'\\varkappa',\n    'varphi': r'\\varphi',\n    'varpi': r'\\varpi',\n    'varrho': r'\\varrho',\n    'varsigma': r'\\varsigma',\n    'vartheta': r'\\vartheta',\n}\n\nother_symbols = set(['aleph', 'beth', 'daleth', 'gimel', 'ell', 'eth', 'hbar',\n                     'hslash', 'mho', 'wp', ])\n\n# Variable name modifiers",
                        "filename": "sympy/printing/latex.py",
                        "start_index": 0,
                        "end_index": 2428,
                        "start_line": 1,
                        "end_line": 85,
                        "max_line": 2941,
                        "git_instance": "github",
                        "repo_name": "testbed/sympy__sympy__1.4",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet defines the LaTeX printer and may contain the logic for wrapping expressions in LaTeX, which is relevant to the issue."
                }
            ]
        },
        "solution_task": "- The issue is caused by using double dollar signs `$$` around the `\\begin{equation*}...\\end{equation*}` environment, which is incorrect in LaTeX as the `equation*` environment already denotes a math environment.\n- To fix the issue, remove the double dollar signs from around the `\\begin{equation*}...\\end{equation*}` in the Jupyter notebook `mynotebook.ipynb`.\n- The corrected LaTeX snippet should be:\n  ```latex\n  \\begin{equation*}\n  1\n  \\end{equation*}\n  ```\n- Ensure that the `init_printing` function from SymPy is correctly configured to output LaTeX that is compatible with the LaTeX conversion process in Jupyter nbconvert.",
        "bouncer_response": {
            "score": 7,
            "criteria": "The RESPONSE must provide actionable, relevant guidance to more parts of the PROMPT's described issue to score higher.",
            "supporting_evidence": "The RESPONSE provides a clear explanation of the cause of the issue, which is the incorrect use of double dollar signs around the equation environment in LaTeX. It offers actionable advice by instructing to remove the double dollar signs and presents the corrected LaTeX snippet. Additionally, it suggests ensuring that the 'init_printing' function from SymPy is correctly configured, which is relevant to the problem. The RESPONSE also includes references to specific code snippets that may need to be reviewed or changed, which is helpful for someone looking to fix the issue in the codebase. However, the RESPONSE does not address the broader context of the problem, such as the need for a general solution that would prevent similar issues in the future or how to implement the proposed changes in the Jupyter nbconvert tool. Therefore, while the RESPONSE is quite useful, it is not comprehensive enough to warrant a higher score.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711748554.8660932,
        "result": "- The issue is caused by using double dollar signs `$$` around the `\\begin{equation*}...\\end{equation*}` environment, which is incorrect in LaTeX as the `equation*` environment already denotes a math environment.\n- To fix the issue, remove the double dollar signs from around the `\\begin{equation*}...\\end{equation*}` in the Jupyter notebook `mynotebook.ipynb`.\n- The corrected LaTeX snippet should be:\n  ```latex\n  \\begin{equation*}\n  1\n  \\end{equation*}\n  ```\n- Ensure that the `init_printing` function from SymPy is correctly configured to output LaTeX that is compatible with the LaTeX conversion process in Jupyter nbconvert.\n\n### Code snippets to check\n\n-  \u2192 [sympy](https://github.com/testbed/sympy__sympy__1.4/tree//sympy) \u2192 [printing](https://github.com/testbed/sympy__sympy__1.4/tree//sympy/printing)- [Lines 111 - 172](https://github.com/testbed/sympy__sympy__1.4/blob//sympy/printing/preview.py#L111-L172)\n\n This snippet contains the LaTeX string generation for previewing, which includes the '$\\displaystyle' that needs to be changed as per the issue description.\n-  \u2192 [sympy](https://github.com/testbed/sympy__sympy__1.4/tree//sympy) \u2192 [interactive](https://github.com/testbed/sympy__sympy__1.4/tree//sympy/interactive)- [Lines 36 - 117](https://github.com/testbed/sympy__sympy__1.4/blob//sympy/interactive/printing.py#L36-L117)\n\n This snippet is part of the IPython interactive session setup for printing and may need to be reviewed to ensure the LaTeX output is consistent with the desired changes. \n\n\n   - [Lines 182 - 521](https://github.com/testbed/sympy__sympy__1.4/blob//sympy/interactive/printing.py#L182-L521)\n\n This snippet includes functions that handle LaTeX rendering in IPython, which may be affected by the changes in LaTeX output formatting. \n\n\n   - [Lines 252 - 315](https://github.com/testbed/sympy__sympy__1.4/blob//sympy/interactive/printing.py#L252-L315)\n\n This snippet is involved in setting up the printing format for IPython and may need adjustments to accommodate the changes in LaTeX output.\n-  \u2192 [sympy](https://github.com/testbed/sympy__sympy__1.4/tree//sympy) \u2192 [printing](https://github.com/testbed/sympy__sympy__1.4/tree//sympy/printing)- [Lines 1 - 85](https://github.com/testbed/sympy__sympy__1.4/blob//sympy/printing/latex.py#L1-L85)\n\n This snippet defines the LaTeX printer and may contain the logic for wrapping expressions in LaTeX, which is relevant to the issue."
    }
}