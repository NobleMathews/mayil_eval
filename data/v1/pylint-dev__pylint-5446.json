{
    "id": "pylint-dev__pylint-5446",
    "repo_name": "testbed/pylint-dev__pylint__2.13",
    "task_id": 5982731514796133745,
    "title": "The duplicate-code (R0801) can't be disabled",
    "body": "Originally reported by: **Anonymous**\n\n---\n\nIt's seems like it's not possible to disable the duplicate code check on portions of a file. Looking at the source, I can see why as it's not a trivial thing to do (if you want to maintain the same scope semantics as other #pylint:enable/disable comments. This would be nice to have though (or I guess I could just cleanup my duplicate code).\n\n---\n- Bitbucket: https://bitbucket.org/logilab/pylint/issue/214\n\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pylint-dev__pylint__2.13.git",
    "requested_commit": "",
    "mayil_response": "- Review the `pylint/checkers/similar.py` file to understand how the `duplicate-code` check is implemented and how it can be enabled or disabled.\n- Ensure that the `Similar` checker class in `pylint/checkers/similar.py` respects the `#pylint:enable` and `#pylint:disable` comments.\n- If the `Similar` checker does not currently support enabling/disabling for portions of a file, modify the `__init__` method and other relevant methods to check for these comments and enable/disable the check accordingly.\n- Implement a method to parse the file and maintain the state of enabled/disabled checks based on the `#pylint:enable/disable` comments encountered.\n- Ensure that the state of the check is updated correctly when a `#pylint:enable` or `#pylint:disable` comment is found, and that the state persists only within the scope of the comment.\n- Add tests to verify that the `duplicate-code` check can be enabled or disabled for specific sections of a file using the `#pylint:enable/disable` comments.\n\n### Code snippets to check\n\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.13/tree//pylint) \u2192 [checkers](https://github.com/testbed/pylint-dev__pylint__2.13/tree//pylint/checkers)- [Lines 765 - 841](https://github.com/testbed/pylint-dev__pylint__2.13/blob//pylint/checkers/similar.py#L765-L841)\n\n This snippet contains the configuration and initialization of the similarity checker, which is directly related to the issue of disabling duplicate code checks.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.000454,
        "snippet_processor": 0.044250000000000005,
        "issue_star_creation": 0.026639999999999997,
        "issue_star_solver": 0.04192,
        "bouncer": 0.02031
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711700224.3904278,
        "relevant_snippets": [
            {
                "code": "\"https://github.com/pylint-dev/pylint/pull/4942\":",
                "filename": "pylint/message/_deleted_message_ids.py",
                "start_index": 576,
                "end_index": 625,
                "start_line": 21,
                "end_line": 21,
                "max_line": 179,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.13",
                "sha": ""
            },
            {
                "code": "name: \u2728 Feature request\ndescription: Suggest an idea for pylint\nlabels: [\"Needs triage :inbox_tray:\"]\nbody:\n  - type: markdown\n    attributes:\n      value: |\n        **Thank you for wanting to make a suggestion for pylint!**\n\n        \u26a0 Please make sure that [this feature wasn't already requested][issue search] or already implemented in the main branch.\n\n\n        [issue search]: https://github.com/pylint-dev/pylint/issues?q=is%3Aissue+is%3Aopen+\n\n  - type: textarea\n    id: current-problem\n    attributes:\n      label: Current problem\n      description:\n        What are you trying to do, that you are unable to achieve with pylint as it\n        currently stands?\n      placeholder: >-\n        I'm trying to do X and I'm missing feature Y for this to be easily achievable.\n    validations:\n      required: true\n  - type: textarea\n    id: proposed-solution\n    attributes:\n      label: Desired solution\n      description: A clear and concise description of what you want to happen.\n      placeholder: >-\n        When I do X, I want to achieve Y in a situation when Z.\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: Additional context\n      description: >\n        Add any other context, links, etc. about the feature here. Describe how the\n        feature would be used, why it is needed and what it would solve.\n\n        **HINT:** You can paste https://gist.github.com links for larger files.\n      placeholder: >-\n        I asked on https://stackoverflow.com/... and the community advised me to do X, Y\n        and Z.",
                "filename": ".github/ISSUE_TEMPLATE/FEATURE-REQUEST.yml",
                "start_index": 0,
                "end_index": 1559,
                "start_line": 1,
                "end_line": 45,
                "max_line": 45,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.13",
                "sha": ""
            },
            {
                "code": "name: \ud83e\udd14 Support question\ndescription: Questions about pylint that are not covered in the documentation\nlabels: [\"Needs triage :inbox_tray:\", \"Question\", \"Documentation :green_book:\"]\nbody:\n  - type: markdown\n    attributes:\n      value: >\n        **Thank you for wanting to report a problem with pylint documentation!**\n\n\n        Please fill out your suggestions below. If the problem seems straightforward,\n        feel free to go ahead and submit a pull request instead!\n\n\n        \u26a0 Verify first that your issue is not [already reported on GitHub][issue\n        search].\n\n        \ud83d\udcac If you are seeking community support, please consider [starting a discussion\n        on Discord][Discussions].\n\n\n        [issue search]:\n        https://github.com/pylint-dev/pylint/issues?q=is%3Aissue+is%3Aopen+\n\n        [Discussions]: https://discord.com/invite/Egy6P8AMB5\n\n  - type: textarea\n    id: question\n    attributes:\n      label: Question\n    validations:\n      required: true\n  - type: textarea\n    id: documentation\n    attributes:\n      label: Documentation for future user\n      description:\n        Where did you expect this information to be? What do we need to add or what do\n        we need to reorganize?\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: Additional context\n      description: >\n        Add any other context, links, etc. about the question here.\n      placeholder: >-\n        I asked on https://stackoverflow.com/... and the community advised me to do X, Y\n        and Z.",
                "filename": ".github/ISSUE_TEMPLATE/QUESTION.yml",
                "start_index": 0,
                "end_index": 1528,
                "start_line": 1,
                "end_line": 49,
                "max_line": 49,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.13",
                "sha": ""
            },
            {
                "code": "{\n    # Everything until the next comment is from the PY3K+ checker",
                "filename": "pylint/message/_deleted_message_ids.py",
                "start_index": 504,
                "end_index": 571,
                "start_line": 19,
                "end_line": 20,
                "max_line": 179,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.13",
                "sha": ""
            },
            {
                "code": "name: \ud83d\udc1b Bug report\ndescription: Report a bug in pylint\nlabels: [\"Needs triage :inbox_tray:\"]\nbo",
                "filename": ".github/ISSUE_TEMPLATE/BUG-REPORT.yml",
                "start_index": 0,
                "end_index": 95,
                "start_line": 1,
                "end_line": 20,
                "max_line": 105,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.13",
                "sha": ""
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt",
                "filename": "script/__init__.py",
                "start_index": 0,
                "end_index": 230,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.13",
                "sha": ""
            },
            {
                "code": "\"\"\"Checks for similarities and duplicated code.\n\n    This computation may be memory / CPU intensive, so you\n    should disable it if you experience some problems.\n    \"\"\"\n\n    # configuration section name\n    name = \"similarities\"\n    # messages\n    msgs = MSGS\n    # configuration options\n    # for available dict keys/values see the optik parser 'add_option' method\n    options: Options = (\n        (\n            \"min-similarity-lines\",\n            {\n                \"default\": DEFAULT_MIN_SIMILARITY_LINE,\n                \"type\": \"int\",\n                \"metavar\": \"<int>\",\n                \"help\": \"Minimum lines number of a similarity.\",\n            },\n        ),\n        (\n            \"ignore-comments\",\n            {\n                \"default\": True,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Comments are removed from the similarity computation\",\n            },\n        ),\n        (\n            \"ignore-docstrings\",\n            {\n                \"default\": True,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Docstrings are removed from the similarity computation\",\n            },\n        ),\n        (\n            \"ignore-imports\",\n            {\n                \"default\": True,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Imports are removed from the similarity computation\",\n            },\n        ),\n        (\n            \"ignore-signatures\",\n            {\n                \"default\": True,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Signatures are removed from the similarity computation\",\n            },\n        ),\n    )\n    # reports\n    reports = ((\"RP0801\", \"Duplication\", report_similarities),)\n\n    def __init__(self, linter: PyLinter) -> None:\n        BaseRawFileChecker.__init__(self, linter)\n        Similar.__init__(\n            self,\n            min_lines=self.linter.config.min_similarity_lines,\n            ignore_comments=self.linter.config.ignore_comments,\n            ignore_docstrings=self.linter.config.ignore_docstrings,\n            ignore_imports=self.linter.config.ignore_imports,\n            ignore_signatures=self.linter.config.ignore_signatures,\n        )\n\n    def open(self) -> None:\n        \"\"\"Init the checkers: reset linesets and statistics information.\"\"\"\n        self.linesets = []\n        self.linter.stats.reset_duplicated_lines()",
                "filename": "pylint/checkers/similar.py",
                "start_index": 27721,
                "end_index": 30192,
                "start_line": 765,
                "end_line": 841,
                "max_line": 960,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.13",
                "sha": ""
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nfrom astroid import nodes\n\nfrom pylint.checkers import BaseRawFileChecker\n\nif TYPE_CHECKING:\n    from pylint.lint import PyLinter\n\n\ndef is_line_commented(line: bytes) -> bool:\n    \"\"\"Checks if a `# symbol that is not part of a string was found in line.\"\"\"\n\n    comment_idx = line.find(b\"#\")\n    if comment_idx == -1:\n        return False\n    if comment_part_of_string(line, comment_idx):\n        return is_line_commented(line[:comment_idx] + line[comment_idx + 1 :])\n    return True\n\n\ndef comment_part_of_string(line: bytes, comment_idx: int) -> bool:\n    \"\"\"Checks if the symbol at comment_idx is part of a string.\"\"\"\n\n    if (\n        line[:comment_idx].count(b\"'\") % 2 == 1\n        and line[comment_idx:].count(b\"'\") % 2 == 1\n    ) or (\n        line[:comment_idx].count(b'\"') % 2 == 1\n        and line[comment_idx:].count(b'\"') % 2 == 1\n    ):\n        return True\n    return False\n\n\nclass CommentChecker(BaseRawFileChecker):\n    name = \"empty-comment\"\n    msgs = {\n        \"R2044\": (\n            \"Line with empty comment\",\n            \"empty-comment\",\n            (\n                \"Used when a # symbol appears on a line not followed by an actual comment\"\n            ),\n        )\n    }\n    options = ()\n\n    def process_module(self, node: nodes.Module) -> None:\n        with node.stream() as stream:\n            for line_num, line in enumerate(stream):\n                line = line.rstrip()\n                if line.endswith(b\"#\"):\n                    if not is_line_commented(line[:-1]):\n                        self.add_message(\"empty-comment\", line=line_num + 1)\n\n\ndef register(linter: PyLinter) -> None:\n    linter.register_checker(CommentChecker(linter))",
                "filename": "pylint/extensions/empty_comment.py",
                "start_index": 0,
                "end_index": 1964,
                "start_line": 1,
                "end_line": 65,
                "max_line": 65,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.13",
                "sha": ""
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\n\"\"\"Basic checker for Python code.\"\"\"\n\nfrom __future__ import annotations\n\nimport collections\nimport itertools\nfrom collections.abc import Iterator\nfrom typing import TYPE_CHECKING, Literal, cast\n\nimport astroid\nfrom astroid import nodes, objects, util\n\nfrom pylint import utils as lint_utils\nfrom pylint.checkers import BaseChecker, utils\nfrom pylint.interfaces import HIGH, INFERENCE, Confidence\nfrom pylint.reporters.ureports import nodes as reporter_nodes\nfrom pylint.utils import LinterStats\n\nif TYPE_CHECKING:\n    from pylint.lint.pylinter import PyLinter\n\n\nclass _BasicChecker(BaseChecker):\n    \"\"\"Permits separating multiple checks with the same checker name into\n    classes/file.\n    \"\"\"\n\n    name = \"basic\"\n\n\nREVERSED_PROTOCOL_METHOD = \"__reversed__\"\nSEQUENCE_PROTOCOL_METHODS = (\"__getitem__\", \"__len__\")\nREVERSED_METHODS = (SEQUENCE_PROTOCOL_METHODS, (REVERSED_PROTOCOL_METHOD,))\n# A mapping from qname -> symbol, to be used when generating messages\n# about dangerous default values as arguments\nDEFAULT_ARGUMENT_SYMBOLS = dict(\n    zip(\n        [\".\".join([\"builtins\", x]) for x in (\"set\", \"dict\", \"list\")],\n        [\"set()\", \"{}\", \"[]\"],\n    ),\n    **{\n        x: f\"{x}()\"\n        for x in (\n            \"collections.deque\",\n            \"collections.ChainMap\",\n            \"collections.Counter\",\n            \"collections.OrderedDict\",\n            \"collections.defaultdict\",\n            \"collections.UserDict\",\n            \"collections.UserList\",\n        )\n    },\n)",
                "filename": "pylint/checkers/base/basic_checker.py",
                "start_index": 0,
                "end_index": 1709,
                "start_line": 1,
                "end_line": 976,
                "max_line": 976,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.13",
                "sha": ""
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\n\"\"\"Looks for try/except statements with too much code in the try clause.\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nfrom astroid import nodes\n\nfrom pylint import checkers\nfrom pylint.checkers import utils\nfrom pylint.interfaces import HIGH\n\nif TYPE_CHECKING:\n    from pylint.lint import PyLinter",
                "filename": "pylint/extensions/consider_refactoring_into_while_condition.py",
                "start_index": 0,
                "end_index": 558,
                "start_line": 1,
                "end_line": 18,
                "max_line": 93,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.13",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "pylint/checkers/similar.py": [
                {
                    "chunk": {
                        "code": "\"\"\"Checks for similarities and duplicated code.\n\n    This computation may be memory / CPU intensive, so you\n    should disable it if you experience some problems.\n    \"\"\"\n\n    # configuration section name\n    name = \"similarities\"\n    # messages\n    msgs = MSGS\n    # configuration options\n    # for available dict keys/values see the optik parser 'add_option' method\n    options: Options = (\n        (\n            \"min-similarity-lines\",\n            {\n                \"default\": DEFAULT_MIN_SIMILARITY_LINE,\n                \"type\": \"int\",\n                \"metavar\": \"<int>\",\n                \"help\": \"Minimum lines number of a similarity.\",\n            },\n        ),\n        (\n            \"ignore-comments\",\n            {\n                \"default\": True,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Comments are removed from the similarity computation\",\n            },\n        ),\n        (\n            \"ignore-docstrings\",\n            {\n                \"default\": True,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Docstrings are removed from the similarity computation\",\n            },\n        ),\n        (\n            \"ignore-imports\",\n            {\n                \"default\": True,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Imports are removed from the similarity computation\",\n            },\n        ),\n        (\n            \"ignore-signatures\",\n            {\n                \"default\": True,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Signatures are removed from the similarity computation\",\n            },\n        ),\n    )\n    # reports\n    reports = ((\"RP0801\", \"Duplication\", report_similarities),)\n\n    def __init__(self, linter: PyLinter) -> None:\n        BaseRawFileChecker.__init__(self, linter)\n        Similar.__init__(\n            self,\n            min_lines=self.linter.config.min_similarity_lines,\n            ignore_comments=self.linter.config.ignore_comments,\n            ignore_docstrings=self.linter.config.ignore_docstrings,\n            ignore_imports=self.linter.config.ignore_imports,\n            ignore_signatures=self.linter.config.ignore_signatures,\n        )\n\n    def open(self) -> None:\n        \"\"\"Init the checkers: reset linesets and statistics information.\"\"\"\n        self.linesets = []\n        self.linter.stats.reset_duplicated_lines()",
                        "filename": "pylint/checkers/similar.py",
                        "start_index": 27721,
                        "end_index": 30192,
                        "start_line": 765,
                        "end_line": 841,
                        "max_line": 960,
                        "git_instance": "github",
                        "repo_name": "testbed/pylint-dev__pylint__2.13",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the configuration and initialization of the similarity checker, which is directly related to the issue of disabling duplicate code checks."
                }
            ]
        },
        "solution_task": "- Review the `pylint/checkers/similar.py` file to understand how the `duplicate-code` check is implemented and how it can be enabled or disabled.\n- Ensure that the `Similar` checker class in `pylint/checkers/similar.py` respects the `#pylint:enable` and `#pylint:disable` comments.\n- If the `Similar` checker does not currently support enabling/disabling for portions of a file, modify the `__init__` method and other relevant methods to check for these comments and enable/disable the check accordingly.\n- Implement a method to parse the file and maintain the state of enabled/disabled checks based on the `#pylint:enable/disable` comments encountered.\n- Ensure that the state of the check is updated correctly when a `#pylint:enable` or `#pylint:disable` comment is found, and that the state persists only within the scope of the comment.\n- Add tests to verify that the `duplicate-code` check can be enabled or disabled for specific sections of a file using the `#pylint:enable/disable` comments.",
        "bouncer_response": {
            "score": 7,
            "criteria": "The RESPONSE delivers clear, actionable guidance that is relevant to the issue described in the PROMPT. It provides a step-by-step approach to address the inability to disable the duplicate-code check for portions of a file in pylint.",
            "supporting_evidence": "The RESPONSE suggests reviewing the relevant source file to understand the implementation, which is a necessary first step in addressing the bug. It then provides a series of actionable steps, including modifying the checker class to respect enable/disable comments, implementing a method to parse and maintain the state of checks, and adding tests to verify the functionality. These steps are directly related to the issue and would likely lead to a resolution if implemented correctly. The RESPONSE also includes a link to the code snippet where the issue is likely to be addressed, which is helpful for the developer tasked with fixing the bug.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711700280.577002,
        "result": "- Review the `pylint/checkers/similar.py` file to understand how the `duplicate-code` check is implemented and how it can be enabled or disabled.\n- Ensure that the `Similar` checker class in `pylint/checkers/similar.py` respects the `#pylint:enable` and `#pylint:disable` comments.\n- If the `Similar` checker does not currently support enabling/disabling for portions of a file, modify the `__init__` method and other relevant methods to check for these comments and enable/disable the check accordingly.\n- Implement a method to parse the file and maintain the state of enabled/disabled checks based on the `#pylint:enable/disable` comments encountered.\n- Ensure that the state of the check is updated correctly when a `#pylint:enable` or `#pylint:disable` comment is found, and that the state persists only within the scope of the comment.\n- Add tests to verify that the `duplicate-code` check can be enabled or disabled for specific sections of a file using the `#pylint:enable/disable` comments.\n\n### Code snippets to check\n\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.13/tree//pylint) \u2192 [checkers](https://github.com/testbed/pylint-dev__pylint__2.13/tree//pylint/checkers)- [Lines 765 - 841](https://github.com/testbed/pylint-dev__pylint__2.13/blob//pylint/checkers/similar.py#L765-L841)\n\n This snippet contains the configuration and initialization of the similarity checker, which is directly related to the issue of disabling duplicate code checks."
    }
}