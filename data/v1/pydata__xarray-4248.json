{
    "id": "pydata__xarray-4248",
    "repo_name": "testbed/pydata__xarray__0.12",
    "task_id": 4829758177056984746,
    "title": "Feature request: show units in dataset overview",
    "body": "Here's a hypothetical dataset:\r\n\r\n```\r\n<xarray.Dataset>\r\nDimensions:  (time: 3, x: 988, y: 822)\r\nCoordinates:\r\n  * x         (x) float64 ...\r\n  * y         (y) float64 ...\r\n  * time      (time) datetime64[ns] ...\r\nData variables:\r\n    rainfall  (time, y, x) float32 ...\r\n    max_temp  (time, y, x) float32 ...\r\n```\r\n\r\nIt would be really nice if the units of the coordinates and of the data variables were shown in the `Dataset` repr, for example as:\r\n\r\n```\r\n<xarray.Dataset>\r\nDimensions:  (time: 3, x: 988, y: 822)\r\nCoordinates:\r\n  * x, in metres         (x)            float64 ...\r\n  * y, in metres         (y)            float64 ...\r\n  * time                 (time)         datetime64[ns] ...\r\nData variables:\r\n    rainfall, in mm      (time, y, x)   float32 ...\r\n    max_temp, in deg C   (time, y, x)   float32 ...\r\n```\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pydata__xarray__0.12.git",
    "requested_commit": "",
    "mayil_response": "To implement the feature request of showing units in the dataset overview, you will need to modify the `xarray` library's representation (`repr`) functions for `Dataset` and `DataArray` objects. The relevant code is located in the `formatting.py` and `formatting_html.py` files.\n\nHere's a high-level overview of the steps to implement the feature:\n\n- Modify the `summarize_variable` function in `formatting.py` to include units in the variable summary.\n- Extract the units from the attributes of the `DataArray` objects that are part of the `Dataset`.\n- Append the units to the variable name in the summary string.\n- Ensure that the HTML representation (`_repr_html_`) is also updated if necessary.\n\nHere's a more detailed implementation:\n\n1. In `formatting.py`, locate the `summarize_variable` function.\n2. Modify the function to check for a `'units'` attribute in the `DataArray` and append it to the variable name if it exists.\n\n```python\ndef summarize_variable(\n    name: Hashable,\n    var,\n    col_width: int,\n    max_width: int | None = None,\n    is_index: bool = False,\n):\n    # ... existing code ...\n\n    # Check for 'units' attribute and append to name if it exists\n    units = var.attrs.get('units', '')\n    if units:\n        name = f\"{name}, in {units}\"\n\n    # ... existing code ...\n```\n\n3. Ensure that the HTML representation in `formatting_html.py` is also updated if it includes variable names without units.\n\n4. Add tests to `asv_bench/benchmarks/repr.py` to ensure that the units are displayed correctly in the representation.\n\n5. Update the documentation to inform users of the new feature.\n\nRemember to follow the contribution guidelines of the `xarray` project when making changes, and submit a pull request with your modifications.\n\n### Code snippets to check\n\n-  \u2192 [xarray](https://github.com/testbed/pydata__xarray__0.12/tree//xarray) \u2192 [core](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/core)- [Lines 626 - 877](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting.py#L626-L877)\n\n This snippet contains the 'dataset_repr' function which is responsible for generating the string representation of the dataset. Modifying this function will likely be necessary to include units in the dataset overview. \n\n\n   - [Lines 240 - 316](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting.py#L240-L316)\n\n This snippet contains functions related to the representation of variables within a dataset, such as 'summarize_variable'. It may be necessary to modify these functions to include units in the variable summaries. \n\n\n   - [Lines 401 - 877](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting.py#L401-L877)\n\n This snippet contains functions like 'coords_repr' and 'indexes_repr' that are involved in creating the string representation of coordinates and indexes. These functions might need to be updated to include units in the coordinates section of the dataset overview.\n-  \u2192 [xarray](https://github.com/testbed/pydata__xarray__0.12/tree//xarray) \u2192 [core](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/core)- [Lines 451 - 2555](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/dataset.py#L451-L2555)\n\n This snippet from 'xarray/core/dataset.py' includes the '__repr__' and '_repr_html_' methods of the Dataset class, which call the 'formatting.dataset_repr' function. Changes to the representation will likely require updates here as well.\n-  \u2192 [xarray](https://github.com/testbed/pydata__xarray__0.12/tree//xarray) \u2192 [core](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/core)- [Lines 254 - 342](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting_html.py#L254-L342)\n\n This snippet from 'xarray/core/formatting_html.py' includes functions that generate the HTML representation of datasets and arrays. If the feature request includes updating the HTML representation to show units, this snippet will be relevant.",
    "ai_cost": {
        "search_embedding": 2.6e-07,
        "issue_classifier": 0.0007295,
        "snippet_processor": 0.07126,
        "issue_star_creation": 0.05117,
        "issue_star_solver": 0.07,
        "bouncer": 0.04018000000000001
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711759604.7616808,
        "relevant_snippets": [
            {
                "code": "name: \ud83d\udca1 Feature Request\ndescription: Suggest an idea for xarray\nlabels: [enhancement]\nbody:\n  - type: textarea\n    id: description\n    attributes:\n      label: Is your feature request related to a problem?\n      description: |\n        Please do a quick search of existing issues to make sure that this has not been asked before.\n        Please provide a clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\n    validations:\n      required: true\n  - type: textarea\n    id: solution\n    attributes:\n      label: Describe the solution you'd like\n      description: |\n        A clear and concise description of what you want to happen.\n  - type: textarea\n    id: alternatives\n    attributes:\n      label: Describe alternatives you've considered\n      description: |\n        A clear and concise description of any alternative solutions or features you've considered.\n    validations:\n      required: false\n  - type: textarea\n    id: additional-context\n    attributes:\n      label: Additional context\n      description: |\n        Add any other context about the feature request here.\n    validations:\n      required: false",
                "filename": ".github/ISSUE_TEMPLATE/newfeature.yml",
                "start_index": 0,
                "end_index": 1154,
                "start_line": 1,
                "end_line": 35,
                "max_line": 35,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": ""
            },
            {
                "code": "import numpy as np\nimport pandas as pd\n\nimport xarray as xr\n\n\nclass Repr:\n    def setup(self):\n        a = np.arange(0, 100)\n        data_vars = dict()\n        for i in a:\n            data_vars[f\"long_variable_name_{i}\"] = xr.DataArray(\n                name=f\"long_variable_name_{i}\",\n                data=np.arange(0, 20),\n                dims=[f\"long_coord_name_{i}_x\"],\n                coords={f\"long_coord_name_{i}_x\": np.arange(0, 20) * 2},\n            )\n        self.ds = xr.Dataset(data_vars)\n        self.ds.attrs = {f\"attr_{k}\": 2 for k in a}\n\n    def time_repr(self):\n        repr(self.ds)\n\n    def time_repr_html(self):\n        self.ds._repr_html_()\n\n\nclass ReprMultiIndex:\n    def setup(self):\n        index = pd.MultiIndex.from_product(\n            [range(1000), range(1000)], names=(\"level_0\", \"level_1\")\n        )\n        series = pd.Series(range(1000 * 1000), index=index)\n        self.da = xr.DataArray(series)\n\n    def time_repr(self):\n        repr(self.da)\n\n    def time_repr_html(self):\n        self.da._repr_html_()",
                "filename": "asv_bench/benchmarks/repr.py",
                "start_index": 0,
                "end_index": 1036,
                "start_line": 1,
                "end_line": 40,
                "max_line": 40,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": ""
            },
            {
                "code": "cursive_repr(\"<recursive array>\")\ndef array_repr(arr):\n    from xarray.core.variable import Variable\n\n    max_rows = OPTIONS[\"display_max_rows\"]\n\n    # used for DataArray, Variable and IndexVariable\n    if hasattr(arr, \"name\") and arr.name is not None:\n        name_str = f\"{arr.name!r} \"\n    else:\n        name_str = \"\"\n\n    if (\n        isinstance(arr, Variable)\n        or _get_boolean_with_default(\"display_expand_data\", default=True)\n        or isinstance(arr.variable._data, MemoryCachedArray)\n    ):\n        data_repr = short_data_repr(arr)\n    else:\n        data_repr = inline_variable_array_repr(arr.variable, OPTIONS[\"display_width\"])\n\n    start = f\"<xarray.{type(arr).__name__} {name_str}\"\n    dims = dim_summary_limited(arr, col_width=len(start) + 1, max_rows=max_rows)\n    summary = [\n        f\"{start}({dims})>\",\n        data_repr,\n    ]\n\n    if hasattr(arr, \"coords\"):\n        if arr.coords:\n            col_width = _calculate_col_width(arr.coords)\n            summary.append(\n                coords_repr(arr.coords, col_width=col_width, max_rows=max_rows)\n            )\n\n        unindexed_dims_str = unindexed_dims_repr(\n            arr.dims, arr.coords, max_rows=max_rows\n        )\n        if unindexed_dims_str:\n            summary.append(unindexed_dims_str)\n\n        display_default_indexes = _get_boolean_with_default(\n            \"display_default_indexes\", False\n        )\n\n        xindexes = filter_nondefault_indexes(\n            _get_indexes_dict(arr.xindexes), not display_default_indexes\n        )\n\n        if xindexes:\n            summary.append(indexes_repr(xindexes, max_rows=max_rows))\n\n    if arr.attrs:\n        summary.append(attrs_repr(arr.attrs, max_rows=max_rows))\n\n    return \"\\n\".join(summary)\n\n\n@recursive_repr(\"<recursive Dataset>\")\ndef dataset_repr(ds):\n    summary = [f\"<xarray.{type(ds).__name__}>\"]\n\n    col_width = _calculate_col_width(ds.variables)\n    max_rows = OPTIONS[\"display_max_rows\"]\n\n    dims_start = pretty_print(\"Dimensions:\", col_width)\n    dims_values = dim_summary_limited(ds, col_width=col_width + 1, max_rows=max_rows)\n    summary.append(f\"{dims_start}({dims_values})\")\n\n    if ds.coords:\n        summary.append(coords_repr(ds.coords, col_width=col_width, max_rows=max_rows))\n\n    unindexed_dims_str = unindexed_dims_repr(ds.dims, ds.coords, max_rows=max_rows)\n    if unindexed_dims_str:\n        summary.append(unindexed_dims_str)\n\n    summary.append(data_vars_repr(ds.data_vars, col_width=col_width, max_rows=max_rows))\n\n    display_default_indexes = _get_boolean_with_default(\n        \"display_default_indexes\", False\n    )\n    xindexes = filter_nondefault_indexes(\n        _get_indexes_dict(ds.xindexes), not display_default_indexes\n    )\n    if xindexes:\n        summary.append(indexes_repr(xindexes, max_rows=max_rows))\n\n    if ds.attrs:\n        summary.append(attrs_repr(ds.attrs, max_rows=max_rows))\n\n    return \"\\n\".join(summary)\n\n\ndef",
                "filename": "xarray/core/formatting.py",
                "start_index": 20303,
                "end_index": 23207,
                "start_line": 626,
                "end_line": 877,
                "max_line": 893,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": ""
            },
            {
                "code": "class DatasetCoordinates(Coordinates):",
                "filename": "xarray/core/coordinates.py",
                "start_index": 17806,
                "end_index": 17844,
                "start_line": 532,
                "end_line": 532,
                "max_line": 846,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": ""
            },
            {
                "code": "def __repr__(self) -> str:\n        return formatting.dataset_repr(self)\n\n    def _repr_html_(self) -> str:\n        if OPTIONS[\"display_style\"] == \"text\":\n            return f\"<pre>{escape(repr(self))}</pre>\"\n        return formatting_html.dataset_repr(self)\n\n    def info(self, buf: IO | None = None) -> None:\n        \"\"\"\n        Concise summary of a Dataset variables and attributes.\n\n        Parameters\n        ----------\n        buf : file-like, default: sys.stdout\n            writable buffer\n\n        See Also\n        --------\n        pandas.DataFrame.assign\n        ncdump : netCDF's ncdump\n        \"\"\"\n        if buf is None:  # pragma: no cover\n            buf = sys.stdout\n\n        lines = []\n        lines.append(\"xarray.Dataset {\")\n        lines.append(\"dimensions:\")\n        for name, size in self.dims.items():\n            lines.append(f\"\\t{name} = {size} ;\")\n        lines.append(\"\\nvariables:\")\n        for name, da in self.variables.items():\n            dims = \", \".join(map(str, da.dims))\n            lines.append(f\"\\t{da.dtype} {name}({dims}) ;\")\n            for k, v in da.attrs.items():\n                lines.append(f\"\\t\\t{name}:{k} = {v} ;\")\n        lines.append(\"\\n// global attributes:\")\n        for k, v in self.attrs.items():\n            lines.append(f\"\\t:{k} = {v} ;\")\n        lines.append(\"}\")\n\n        buf.write(\"\\n\".join(lines))\n\n    @property\n    def chunks(self) -> Mapping[Hashable, tuple[int, ...]]:\n        \"\"\"\n        Mapping from dimension names to block lengths for this dataset's data, or None if\n        the underlying data is not a dask array.\n        Cannot be modified directly, but can be modified by calling .chunk().\n\n        Same as Dataset.chunksizes, but maintained for backwards compatibility.\n\n        See Also\n        --------\n        Dataset.chunk\n        Dataset.chunksizes\n        xarray.unify_chunks\n        \"\"\"\n        return get_chunksizes(self.variables.values())\n\n    @property\n    def chunksizes(self) -> Mapping[Hashable, tuple[int, ...]]:\n        \"\"\"\n        Mapping from dimension names to block lengths for this dataset's data, or None if\n        the underlying data is not a dask array.\n        Cannot be modified directly, but can be modified by calling .chunk().\n\n        Same as Dataset.chunks.\n\n        See Also\n        --------\n        Dataset.chunk\n        Dataset.chunks\n        xarray.unify_chunks\n        \"\"\"\n        return get_chunksizes(self.variables.values())",
                "filename": "xarray/core/dataset.py",
                "start_index": 87924,
                "end_index": 90361,
                "start_line": 451,
                "end_line": 2555,
                "max_line": 10260,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": ""
            },
            {
                "code": "def inline_dask_repr(array):\n    \"\"\"Similar to dask.array.DataArray.__repr__, but without\n    redundant information that's already printed by the repr\n    function of the xarray wrapper.\n    \"\"\"\n    assert isinstance(array, array_type(\"dask\")), array\n\n    chunksize = tuple(c[0] for c in array.chunks)\n\n    if hasattr(array, \"_meta\"):\n        meta = array._meta\n        identifier = (type(meta).__module__, type(meta).__name__)\n        meta_repr = _KNOWN_TYPE_REPRS.get(identifier, \".\".join(identifier))\n        meta_string = f\", meta={meta_repr}\"\n    else:\n        meta_string = \"\"\n\n    return f\"dask.array<chunksize={chunksize}{meta_string}>\"\n\n\ndef inline_sparse_repr(array):\n    \"\"\"Similar to sparse.COO.__repr__, but without the redundant shape/dtype.\"\"\"\n    sparse_array_type = array_type(\"sparse\")\n    assert isinstance(array, sparse_array_type), array\n    return \"<{}: nnz={:d}, fill_value={!s}>\".format(\n        type(array).__name__, array.nnz, array.fill_value\n    )\n\n\ndef inline_variable_array_repr(var, max_width):\n    \"\"\"Build a one-line summary of a variable's data.\"\"\"\n    if hasattr(var._data, \"_repr_inline_\"):\n        return var._data._repr_inline_(max_width)\n    if var._in_memory:\n        return format_array_flat(var, max_width)\n    dask_array_type = array_type(\"dask\")\n    if isinstance(var._data, dask_array_type):\n        return inline_dask_repr(var.data)\n    sparse_array_type = array_type(\"sparse\")\n    if isinstance(var._data, sparse_array_type):\n        return inline_sparse_repr(var.data)\n    if hasattr(var._data, \"__array_function__\"):\n        return maybe_truncate(repr(var._data).replace(\"\\n\", \" \"), max_width)\n    # internal xarray array type\n    return \"...\"\n\n\ndef summarize_variable(\n    name: Hashable,\n    var,\n    col_width: int,\n    max_width: int | None = None,\n    is_index: bool = False,\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    variable = getattr(var, \"variable\", var)\n\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n\n    marker = \"*\" if is_index else \" \"\n    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n\n    if variable.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, variable.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{variable.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(variable, values_width)\n\n    return front_str + values_str",
                "filename": "xarray/core/formatting.py",
                "start_index": 8342,
                "end_index": 11003,
                "start_line": 240,
                "end_line": 316,
                "max_line": 893,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": ""
            },
            {
                "code": "index_section = partial(\n    _mapping_section,\n    name=\"Indexes\",\n    details_func=summarize_indexes,\n    max_items_collapse=0,\n    expand_option_name=\"display_expand_indexes\",\n)\n\nattr_section = partial(\n    _mapping_section,\n    name=\"Attributes\",\n    details_func=summarize_attrs,\n    max_items_collapse=10,\n    expand_option_name=\"display_expand_attrs\",\n)\n\n\ndef _get_indexes_dict(indexes):\n    return {\n        tuple(index_vars.keys()): idx for idx, index_vars in indexes.group_by_index()\n    }\n\n\ndef _obj_repr(obj, header_components, sections):\n    \"\"\"Return HTML repr of an xarray object.\n\n    If CSS is not injected (untrusted notebook), fallback to the plain text repr.\n\n    \"\"\"\n    header = f\"<div class='xr-header'>{''.join(h for h in header_components)}</div>\"\n    sections = \"\".join(f\"<li class='xr-section-item'>{s}</li>\" for s in sections)\n\n    icons_svg, css_style = _load_static_files()\n    return (\n        \"<div>\"\n        f\"{icons_svg}<style>{css_style}</style>\"\n        f\"<pre class='xr-text-repr-fallback'>{escape(repr(obj))}</pre>\"\n        \"<div class='xr-wrap' style='display:none'>\"\n        f\"{header}\"\n        f\"<ul class='xr-sections'>{sections}</ul>\"\n        \"</div>\"\n        \"</div>\"\n    )\n\n\ndef array_repr(arr):\n    dims = OrderedDict((k, v) for k, v in zip(arr.dims, arr.shape))\n    if hasattr(arr, \"xindexes\"):\n        indexed_dims = arr.xindexes.dims\n    else:\n        indexed_dims = {}\n\n    obj_type = f\"xarray.{type(arr).__name__}\"\n    arr_name = f\"'{arr.name}'\" if getattr(arr, \"name\", None) else \"\"\n\n    header_components = [\n        f\"<div class='xr-obj-type'>{obj_type}</div>\",\n        f\"<div class='xr-array-name'>{arr_name}</div>\",\n        format_dims(dims, indexed_dims),\n    ]\n\n    sections = [array_section(arr)]\n\n    if hasattr(arr, \"coords\"):\n        sections.append(coord_section(arr.coords))\n\n    if hasattr(arr, \"xindexes\"):\n        indexes = _get_indexes_dict(arr.xindexes)\n        sections.append(index_section(indexes))\n\n    sections.append(attr_section(arr.attrs))\n\n    return _obj_repr(arr, header_components, sections)\n\n\ndef dataset_repr(ds):\n    obj_type = f\"xarray.{type(ds).__name__}\"\n\n    header_components = [f\"<div class='xr-obj-type'>{escape(obj_type)}</div>\"]\n\n    sections = [\n        dim_section(ds),\n        coord_section(ds.coords),\n        datavar_section(ds.data_vars),\n        index_section(_get_indexes_dict(ds.xindexes)),\n        attr_section(ds.attrs),\n    ]\n\n    return _obj_repr(ds, header_components, sections)",
                "filename": "xarray/core/formatting_html.py",
                "start_index": 7729,
                "end_index": 10213,
                "start_line": 254,
                "end_line": 342,
                "max_line": 342,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": ""
            },
            {
                "code": "def coords_repr(coords, col_width=None, max_rows=None):\n    if col_width is None:\n        col_width = _calculate_col_width(coords)\n    return _mapping_repr(\n        coords,\n        title=\"Coordinates\",\n        summarizer=summarize_variable,\n        expand_option_name=\"display_expand_coords\",\n        col_width=col_width,\n        indexes=coords.xindexes,\n        max_rows=max_rows,\n    )\n\n\ndef inline_index_repr(index, max_width=None):\n    if hasattr(index, \"_repr_inline_\"):\n        repr_ = index._repr_inline_(max_width=max_width)\n    else:\n        # fallback for the `pandas.Index` subclasses from\n        # `Indexes.get_pandas_indexes` / `xr_obj.indexes`\n        repr_ = repr(index)\n\n    return repr_\n\n\ndef summarize_index(\n    names: tuple[Hashable, ...],\n    index,\n    col_width: int,\n    max_width: int | None = None,\n) -> str:\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n\n    def prefixes(length: int) -> list[str]:\n        if length in (0, 1):\n            return [\" \"]\n\n        return [\"\u250c\"] + [\"\u2502\"] * max(length - 2, 0) + [\"\u2514\"]\n\n    preformatted = [\n        pretty_print(f\"  {prefix} {name}\", col_width)\n        for prefix, name in zip(prefixes(len(names)), names)\n    ]\n\n    head, *tail = preformatted\n    index_width = max_width - len(head)\n    repr_ = inline_index_repr(index, max_width=index_width)\n    return \"\\n\".join([head + repr_] + [line.rstrip() for line in tail])\n\n\ndef filter_nondefault_indexes(indexes, filter_indexes: bool):\n    from xarray.core.indexes import PandasIndex, PandasMultiIndex\n\n    if not filter_indexes:\n        return indexes\n\n    default_indexes = (PandasIndex, PandasMultiIndex)\n\n    return {\n        key: index\n        for key, index in indexes.items()\n        if not isinstance(index, default_indexes)\n    }\n\n\ndef indexes_repr(indexes, max_rows: int | None = None) -> str:\n    col_width = _calculate_col_width(chain.from_iterable(indexes))\n\n    return _mapping_repr(\n        indexes,\n        \"Indexes\",\n        summarize_index,\n        \"display_expand_indexes\",\n        col_width=col_width,\n        max_rows=max_rows,\n    )\n\n\ndef dim_summary(obj):\n    elements = [f\"{k}: {v}\" for k, v in obj.sizes.items()]\n    return \", \".join(elements)\n\n\ndef",
                "filename": "xarray/core/formatting.py",
                "start_index": 13636,
                "end_index": 15850,
                "start_line": 401,
                "end_line": 877,
                "max_line": 893,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": ""
            },
            {
                "code": "blank_issues_enabled: false\ncontact_links:\n  - name: \u2753 Usage question\n    url: https://github.com/pydata/xarray/discussions\n    about: |\n      Ask questions and discuss with other community members here.\n      If you have a question like \"How do I concatenate a list of datasets?\" then\n      please include a self-contained reproducible example if possible.\n  - name: \ud83d\uddfa\ufe0f Raster analysis usage question\n    url: https://github.com/corteva/rioxarray/discussions\n    about: |\n      If you are using the rioxarray extension (engine='rasterio'), or have questions about\n      raster analysis such as geospatial formats, coordinate reprojection, etc.,\n      please use the rioxarray discussion forum.",
                "filename": ".github/ISSUE_TEMPLATE/config.yml",
                "start_index": 0,
                "end_index": 694,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": ""
            },
            {
                "code": "def _implementation(self, func, dim, **kwargs):\n        raise NotImplementedError(\"Use `Dataset.weighted` or `DataArray.weighted`\")\n\n    def sum_of_weights(\n        self,\n        dim: Dims = None,\n        keep_attrs: bool | None = None,\n    ) -> T_Xarray:\n        return self._implementation(\n            self._sum_of_weights, dim=dim, keep_attrs=keep_attrs\n        )\n\n    def sum_of_squares(\n        self,\n        dim: Dims = None,\n        skipna: bool | None = None,\n        keep_attrs: bool | None = None,\n    ) -> T_Xarray:\n        return self._implementation(\n            self._sum_of_squares, dim=dim, skipna=skipna, keep_attrs=keep_attrs\n        )\n\n    def sum(\n        self,\n        dim: Dims = None,\n        skipna: bool | None = None,\n        keep_attrs: bool | None = None,\n    ) -> T_Xarray:\n        return self._implementation(\n            self._weighted_sum, dim=dim, skipna=skipna, keep_attrs=keep_attrs\n        )\n\n    def mean(\n        self,\n        dim: Dims = None,\n        skipna: bool | None = None,\n        keep_attrs: bool | None = None,\n    ) -> T_Xarray:\n        return self._implementation(\n            self._weighted_mean, dim=dim, skipna=skipna, keep_attrs=keep_attrs\n        )\n\n    def var(\n        self,\n        dim: Dims = None,\n        skipna: bool | None = None,\n        keep_attrs: bool | None = None,\n    ) -> T_Xarray:\n        return self._implementation(\n            self._weighted_var, dim=dim, skipna=skipna, keep_attrs=keep_attrs\n        )\n\n    def std(\n        self,\n        dim: Dims = None,\n        skipna: bool | None = None,\n        keep_attrs: bool | None = None,\n    ) -> T_Xarray:\n        return self._implementation(\n            self._weighted_std, dim=dim, skipna=skipna, keep_attrs=keep_attrs\n        )\n\n    def quantile(\n        self,\n        q: ArrayLike,\n        *,\n        dim: Dims = None,\n        keep_attrs: bool | None = None,\n        skipna: bool = True,\n    ) -> T_Xarray:\n        return self._implementation(\n            self._weighted_quantile, q=q, dim=dim, skipna=skipna, keep_attrs=keep_attrs\n        )\n\n    def __repr__(self) -> str:\n        \"\"\"provide a nice str repr of our Weighted object\"\"\"\n\n        klass = self.__class__.__name__\n        weight_dims = \", \".join(map(str, self.weights.dims))\n        return f\"{klass} with weights along dimensions: {weight_dims}\"",
                "filename": "xarray/core/weighted.py",
                "start_index": 15410,
                "end_index": 17743,
                "start_line": 448,
                "end_line": 527,
                "max_line": 573,
                "git_instance": "github",
                "repo_name": "testbed/pydata__xarray__0.12",
                "sha": ""
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "xarray/core/formatting.py": [
                {
                    "chunk": {
                        "code": "cursive_repr(\"<recursive array>\")\ndef array_repr(arr):\n    from xarray.core.variable import Variable\n\n    max_rows = OPTIONS[\"display_max_rows\"]\n\n    # used for DataArray, Variable and IndexVariable\n    if hasattr(arr, \"name\") and arr.name is not None:\n        name_str = f\"{arr.name!r} \"\n    else:\n        name_str = \"\"\n\n    if (\n        isinstance(arr, Variable)\n        or _get_boolean_with_default(\"display_expand_data\", default=True)\n        or isinstance(arr.variable._data, MemoryCachedArray)\n    ):\n        data_repr = short_data_repr(arr)\n    else:\n        data_repr = inline_variable_array_repr(arr.variable, OPTIONS[\"display_width\"])\n\n    start = f\"<xarray.{type(arr).__name__} {name_str}\"\n    dims = dim_summary_limited(arr, col_width=len(start) + 1, max_rows=max_rows)\n    summary = [\n        f\"{start}({dims})>\",\n        data_repr,\n    ]\n\n    if hasattr(arr, \"coords\"):\n        if arr.coords:\n            col_width = _calculate_col_width(arr.coords)\n            summary.append(\n                coords_repr(arr.coords, col_width=col_width, max_rows=max_rows)\n            )\n\n        unindexed_dims_str = unindexed_dims_repr(\n            arr.dims, arr.coords, max_rows=max_rows\n        )\n        if unindexed_dims_str:\n            summary.append(unindexed_dims_str)\n\n        display_default_indexes = _get_boolean_with_default(\n            \"display_default_indexes\", False\n        )\n\n        xindexes = filter_nondefault_indexes(\n            _get_indexes_dict(arr.xindexes), not display_default_indexes\n        )\n\n        if xindexes:\n            summary.append(indexes_repr(xindexes, max_rows=max_rows))\n\n    if arr.attrs:\n        summary.append(attrs_repr(arr.attrs, max_rows=max_rows))\n\n    return \"\\n\".join(summary)\n\n\n@recursive_repr(\"<recursive Dataset>\")\ndef dataset_repr(ds):\n    summary = [f\"<xarray.{type(ds).__name__}>\"]\n\n    col_width = _calculate_col_width(ds.variables)\n    max_rows = OPTIONS[\"display_max_rows\"]\n\n    dims_start = pretty_print(\"Dimensions:\", col_width)\n    dims_values = dim_summary_limited(ds, col_width=col_width + 1, max_rows=max_rows)\n    summary.append(f\"{dims_start}({dims_values})\")\n\n    if ds.coords:\n        summary.append(coords_repr(ds.coords, col_width=col_width, max_rows=max_rows))\n\n    unindexed_dims_str = unindexed_dims_repr(ds.dims, ds.coords, max_rows=max_rows)\n    if unindexed_dims_str:\n        summary.append(unindexed_dims_str)\n\n    summary.append(data_vars_repr(ds.data_vars, col_width=col_width, max_rows=max_rows))\n\n    display_default_indexes = _get_boolean_with_default(\n        \"display_default_indexes\", False\n    )\n    xindexes = filter_nondefault_indexes(\n        _get_indexes_dict(ds.xindexes), not display_default_indexes\n    )\n    if xindexes:\n        summary.append(indexes_repr(xindexes, max_rows=max_rows))\n\n    if ds.attrs:\n        summary.append(attrs_repr(ds.attrs, max_rows=max_rows))\n\n    return \"\\n\".join(summary)\n\n\ndef",
                        "filename": "xarray/core/formatting.py",
                        "start_index": 20303,
                        "end_index": 23207,
                        "start_line": 626,
                        "end_line": 877,
                        "max_line": 893,
                        "git_instance": "github",
                        "repo_name": "testbed/pydata__xarray__0.12",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the 'dataset_repr' function which is responsible for generating the string representation of the dataset. Modifying this function will likely be necessary to include units in the dataset overview."
                },
                {
                    "chunk": {
                        "code": "def inline_dask_repr(array):\n    \"\"\"Similar to dask.array.DataArray.__repr__, but without\n    redundant information that's already printed by the repr\n    function of the xarray wrapper.\n    \"\"\"\n    assert isinstance(array, array_type(\"dask\")), array\n\n    chunksize = tuple(c[0] for c in array.chunks)\n\n    if hasattr(array, \"_meta\"):\n        meta = array._meta\n        identifier = (type(meta).__module__, type(meta).__name__)\n        meta_repr = _KNOWN_TYPE_REPRS.get(identifier, \".\".join(identifier))\n        meta_string = f\", meta={meta_repr}\"\n    else:\n        meta_string = \"\"\n\n    return f\"dask.array<chunksize={chunksize}{meta_string}>\"\n\n\ndef inline_sparse_repr(array):\n    \"\"\"Similar to sparse.COO.__repr__, but without the redundant shape/dtype.\"\"\"\n    sparse_array_type = array_type(\"sparse\")\n    assert isinstance(array, sparse_array_type), array\n    return \"<{}: nnz={:d}, fill_value={!s}>\".format(\n        type(array).__name__, array.nnz, array.fill_value\n    )\n\n\ndef inline_variable_array_repr(var, max_width):\n    \"\"\"Build a one-line summary of a variable's data.\"\"\"\n    if hasattr(var._data, \"_repr_inline_\"):\n        return var._data._repr_inline_(max_width)\n    if var._in_memory:\n        return format_array_flat(var, max_width)\n    dask_array_type = array_type(\"dask\")\n    if isinstance(var._data, dask_array_type):\n        return inline_dask_repr(var.data)\n    sparse_array_type = array_type(\"sparse\")\n    if isinstance(var._data, sparse_array_type):\n        return inline_sparse_repr(var.data)\n    if hasattr(var._data, \"__array_function__\"):\n        return maybe_truncate(repr(var._data).replace(\"\\n\", \" \"), max_width)\n    # internal xarray array type\n    return \"...\"\n\n\ndef summarize_variable(\n    name: Hashable,\n    var,\n    col_width: int,\n    max_width: int | None = None,\n    is_index: bool = False,\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    variable = getattr(var, \"variable\", var)\n\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n\n    marker = \"*\" if is_index else \" \"\n    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n\n    if variable.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, variable.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{variable.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(variable, values_width)\n\n    return front_str + values_str",
                        "filename": "xarray/core/formatting.py",
                        "start_index": 8342,
                        "end_index": 11003,
                        "start_line": 240,
                        "end_line": 316,
                        "max_line": 893,
                        "git_instance": "github",
                        "repo_name": "testbed/pydata__xarray__0.12",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains functions related to the representation of variables within a dataset, such as 'summarize_variable'. It may be necessary to modify these functions to include units in the variable summaries."
                },
                {
                    "chunk": {
                        "code": "def coords_repr(coords, col_width=None, max_rows=None):\n    if col_width is None:\n        col_width = _calculate_col_width(coords)\n    return _mapping_repr(\n        coords,\n        title=\"Coordinates\",\n        summarizer=summarize_variable,\n        expand_option_name=\"display_expand_coords\",\n        col_width=col_width,\n        indexes=coords.xindexes,\n        max_rows=max_rows,\n    )\n\n\ndef inline_index_repr(index, max_width=None):\n    if hasattr(index, \"_repr_inline_\"):\n        repr_ = index._repr_inline_(max_width=max_width)\n    else:\n        # fallback for the `pandas.Index` subclasses from\n        # `Indexes.get_pandas_indexes` / `xr_obj.indexes`\n        repr_ = repr(index)\n\n    return repr_\n\n\ndef summarize_index(\n    names: tuple[Hashable, ...],\n    index,\n    col_width: int,\n    max_width: int | None = None,\n) -> str:\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n\n    def prefixes(length: int) -> list[str]:\n        if length in (0, 1):\n            return [\" \"]\n\n        return [\"\u250c\"] + [\"\u2502\"] * max(length - 2, 0) + [\"\u2514\"]\n\n    preformatted = [\n        pretty_print(f\"  {prefix} {name}\", col_width)\n        for prefix, name in zip(prefixes(len(names)), names)\n    ]\n\n    head, *tail = preformatted\n    index_width = max_width - len(head)\n    repr_ = inline_index_repr(index, max_width=index_width)\n    return \"\\n\".join([head + repr_] + [line.rstrip() for line in tail])\n\n\ndef filter_nondefault_indexes(indexes, filter_indexes: bool):\n    from xarray.core.indexes import PandasIndex, PandasMultiIndex\n\n    if not filter_indexes:\n        return indexes\n\n    default_indexes = (PandasIndex, PandasMultiIndex)\n\n    return {\n        key: index\n        for key, index in indexes.items()\n        if not isinstance(index, default_indexes)\n    }\n\n\ndef indexes_repr(indexes, max_rows: int | None = None) -> str:\n    col_width = _calculate_col_width(chain.from_iterable(indexes))\n\n    return _mapping_repr(\n        indexes,\n        \"Indexes\",\n        summarize_index,\n        \"display_expand_indexes\",\n        col_width=col_width,\n        max_rows=max_rows,\n    )\n\n\ndef dim_summary(obj):\n    elements = [f\"{k}: {v}\" for k, v in obj.sizes.items()]\n    return \", \".join(elements)\n\n\ndef",
                        "filename": "xarray/core/formatting.py",
                        "start_index": 13636,
                        "end_index": 15850,
                        "start_line": 401,
                        "end_line": 877,
                        "max_line": 893,
                        "git_instance": "github",
                        "repo_name": "testbed/pydata__xarray__0.12",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains functions like 'coords_repr' and 'indexes_repr' that are involved in creating the string representation of coordinates and indexes. These functions might need to be updated to include units in the coordinates section of the dataset overview."
                }
            ],
            "xarray/core/dataset.py": [
                {
                    "chunk": {
                        "code": "def __repr__(self) -> str:\n        return formatting.dataset_repr(self)\n\n    def _repr_html_(self) -> str:\n        if OPTIONS[\"display_style\"] == \"text\":\n            return f\"<pre>{escape(repr(self))}</pre>\"\n        return formatting_html.dataset_repr(self)\n\n    def info(self, buf: IO | None = None) -> None:\n        \"\"\"\n        Concise summary of a Dataset variables and attributes.\n\n        Parameters\n        ----------\n        buf : file-like, default: sys.stdout\n            writable buffer\n\n        See Also\n        --------\n        pandas.DataFrame.assign\n        ncdump : netCDF's ncdump\n        \"\"\"\n        if buf is None:  # pragma: no cover\n            buf = sys.stdout\n\n        lines = []\n        lines.append(\"xarray.Dataset {\")\n        lines.append(\"dimensions:\")\n        for name, size in self.dims.items():\n            lines.append(f\"\\t{name} = {size} ;\")\n        lines.append(\"\\nvariables:\")\n        for name, da in self.variables.items():\n            dims = \", \".join(map(str, da.dims))\n            lines.append(f\"\\t{da.dtype} {name}({dims}) ;\")\n            for k, v in da.attrs.items():\n                lines.append(f\"\\t\\t{name}:{k} = {v} ;\")\n        lines.append(\"\\n// global attributes:\")\n        for k, v in self.attrs.items():\n            lines.append(f\"\\t:{k} = {v} ;\")\n        lines.append(\"}\")\n\n        buf.write(\"\\n\".join(lines))\n\n    @property\n    def chunks(self) -> Mapping[Hashable, tuple[int, ...]]:\n        \"\"\"\n        Mapping from dimension names to block lengths for this dataset's data, or None if\n        the underlying data is not a dask array.\n        Cannot be modified directly, but can be modified by calling .chunk().\n\n        Same as Dataset.chunksizes, but maintained for backwards compatibility.\n\n        See Also\n        --------\n        Dataset.chunk\n        Dataset.chunksizes\n        xarray.unify_chunks\n        \"\"\"\n        return get_chunksizes(self.variables.values())\n\n    @property\n    def chunksizes(self) -> Mapping[Hashable, tuple[int, ...]]:\n        \"\"\"\n        Mapping from dimension names to block lengths for this dataset's data, or None if\n        the underlying data is not a dask array.\n        Cannot be modified directly, but can be modified by calling .chunk().\n\n        Same as Dataset.chunks.\n\n        See Also\n        --------\n        Dataset.chunk\n        Dataset.chunks\n        xarray.unify_chunks\n        \"\"\"\n        return get_chunksizes(self.variables.values())",
                        "filename": "xarray/core/dataset.py",
                        "start_index": 87924,
                        "end_index": 90361,
                        "start_line": 451,
                        "end_line": 2555,
                        "max_line": 10260,
                        "git_instance": "github",
                        "repo_name": "testbed/pydata__xarray__0.12",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet from 'xarray/core/dataset.py' includes the '__repr__' and '_repr_html_' methods of the Dataset class, which call the 'formatting.dataset_repr' function. Changes to the representation will likely require updates here as well."
                }
            ],
            "xarray/core/formatting_html.py": [
                {
                    "chunk": {
                        "code": "index_section = partial(\n    _mapping_section,\n    name=\"Indexes\",\n    details_func=summarize_indexes,\n    max_items_collapse=0,\n    expand_option_name=\"display_expand_indexes\",\n)\n\nattr_section = partial(\n    _mapping_section,\n    name=\"Attributes\",\n    details_func=summarize_attrs,\n    max_items_collapse=10,\n    expand_option_name=\"display_expand_attrs\",\n)\n\n\ndef _get_indexes_dict(indexes):\n    return {\n        tuple(index_vars.keys()): idx for idx, index_vars in indexes.group_by_index()\n    }\n\n\ndef _obj_repr(obj, header_components, sections):\n    \"\"\"Return HTML repr of an xarray object.\n\n    If CSS is not injected (untrusted notebook), fallback to the plain text repr.\n\n    \"\"\"\n    header = f\"<div class='xr-header'>{''.join(h for h in header_components)}</div>\"\n    sections = \"\".join(f\"<li class='xr-section-item'>{s}</li>\" for s in sections)\n\n    icons_svg, css_style = _load_static_files()\n    return (\n        \"<div>\"\n        f\"{icons_svg}<style>{css_style}</style>\"\n        f\"<pre class='xr-text-repr-fallback'>{escape(repr(obj))}</pre>\"\n        \"<div class='xr-wrap' style='display:none'>\"\n        f\"{header}\"\n        f\"<ul class='xr-sections'>{sections}</ul>\"\n        \"</div>\"\n        \"</div>\"\n    )\n\n\ndef array_repr(arr):\n    dims = OrderedDict((k, v) for k, v in zip(arr.dims, arr.shape))\n    if hasattr(arr, \"xindexes\"):\n        indexed_dims = arr.xindexes.dims\n    else:\n        indexed_dims = {}\n\n    obj_type = f\"xarray.{type(arr).__name__}\"\n    arr_name = f\"'{arr.name}'\" if getattr(arr, \"name\", None) else \"\"\n\n    header_components = [\n        f\"<div class='xr-obj-type'>{obj_type}</div>\",\n        f\"<div class='xr-array-name'>{arr_name}</div>\",\n        format_dims(dims, indexed_dims),\n    ]\n\n    sections = [array_section(arr)]\n\n    if hasattr(arr, \"coords\"):\n        sections.append(coord_section(arr.coords))\n\n    if hasattr(arr, \"xindexes\"):\n        indexes = _get_indexes_dict(arr.xindexes)\n        sections.append(index_section(indexes))\n\n    sections.append(attr_section(arr.attrs))\n\n    return _obj_repr(arr, header_components, sections)\n\n\ndef dataset_repr(ds):\n    obj_type = f\"xarray.{type(ds).__name__}\"\n\n    header_components = [f\"<div class='xr-obj-type'>{escape(obj_type)}</div>\"]\n\n    sections = [\n        dim_section(ds),\n        coord_section(ds.coords),\n        datavar_section(ds.data_vars),\n        index_section(_get_indexes_dict(ds.xindexes)),\n        attr_section(ds.attrs),\n    ]\n\n    return _obj_repr(ds, header_components, sections)",
                        "filename": "xarray/core/formatting_html.py",
                        "start_index": 7729,
                        "end_index": 10213,
                        "start_line": 254,
                        "end_line": 342,
                        "max_line": 342,
                        "git_instance": "github",
                        "repo_name": "testbed/pydata__xarray__0.12",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet from 'xarray/core/formatting_html.py' includes functions that generate the HTML representation of datasets and arrays. If the feature request includes updating the HTML representation to show units, this snippet will be relevant."
                }
            ]
        },
        "solution_task": "To implement the feature request of showing units in the dataset overview, you will need to modify the `xarray` library's representation (`repr`) functions for `Dataset` and `DataArray` objects. The relevant code is located in the `formatting.py` and `formatting_html.py` files.\n\nHere's a high-level overview of the steps to implement the feature:\n\n- Modify the `summarize_variable` function in `formatting.py` to include units in the variable summary.\n- Extract the units from the attributes of the `DataArray` objects that are part of the `Dataset`.\n- Append the units to the variable name in the summary string.\n- Ensure that the HTML representation (`_repr_html_`) is also updated if necessary.\n\nHere's a more detailed implementation:\n\n1. In `formatting.py`, locate the `summarize_variable` function.\n2. Modify the function to check for a `'units'` attribute in the `DataArray` and append it to the variable name if it exists.\n\n```python\ndef summarize_variable(\n    name: Hashable,\n    var,\n    col_width: int,\n    max_width: int | None = None,\n    is_index: bool = False,\n):\n    # ... existing code ...\n\n    # Check for 'units' attribute and append to name if it exists\n    units = var.attrs.get('units', '')\n    if units:\n        name = f\"{name}, in {units}\"\n\n    # ... existing code ...\n```\n\n3. Ensure that the HTML representation in `formatting_html.py` is also updated if it includes variable names without units.\n\n4. Add tests to `asv_bench/benchmarks/repr.py` to ensure that the units are displayed correctly in the representation.\n\n5. Update the documentation to inform users of the new feature.\n\nRemember to follow the contribution guidelines of the `xarray` project when making changes, and submit a pull request with your modifications.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant suggestions that can directly lead to the successful implementation or improvement of the requested feature.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable plan for implementing the feature request to show units in the dataset overview. It identifies specific files and functions within the xarray library that need to be modified, such as 'formatting.py' and 'formatting_html.py'. The RESPONSE also includes a code snippet demonstrating how to append units to the variable name in the summary string, which is directly relevant to the feature request. Additionally, the RESPONSE suggests updating the HTML representation and adding tests to ensure the feature works correctly, which are important steps in the development process. The RESPONSE also reminds the user to follow the contribution guidelines and update the documentation, which are best practices in software development. The links to code snippets are provided for reference, which can be very helpful for someone implementing this feature.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711759706.594799,
        "result": "To implement the feature request of showing units in the dataset overview, you will need to modify the `xarray` library's representation (`repr`) functions for `Dataset` and `DataArray` objects. The relevant code is located in the `formatting.py` and `formatting_html.py` files.\n\nHere's a high-level overview of the steps to implement the feature:\n\n- Modify the `summarize_variable` function in `formatting.py` to include units in the variable summary.\n- Extract the units from the attributes of the `DataArray` objects that are part of the `Dataset`.\n- Append the units to the variable name in the summary string.\n- Ensure that the HTML representation (`_repr_html_`) is also updated if necessary.\n\nHere's a more detailed implementation:\n\n1. In `formatting.py`, locate the `summarize_variable` function.\n2. Modify the function to check for a `'units'` attribute in the `DataArray` and append it to the variable name if it exists.\n\n```python\ndef summarize_variable(\n    name: Hashable,\n    var,\n    col_width: int,\n    max_width: int | None = None,\n    is_index: bool = False,\n):\n    # ... existing code ...\n\n    # Check for 'units' attribute and append to name if it exists\n    units = var.attrs.get('units', '')\n    if units:\n        name = f\"{name}, in {units}\"\n\n    # ... existing code ...\n```\n\n3. Ensure that the HTML representation in `formatting_html.py` is also updated if it includes variable names without units.\n\n4. Add tests to `asv_bench/benchmarks/repr.py` to ensure that the units are displayed correctly in the representation.\n\n5. Update the documentation to inform users of the new feature.\n\nRemember to follow the contribution guidelines of the `xarray` project when making changes, and submit a pull request with your modifications.\n\n### Code snippets to check\n\n-  \u2192 [xarray](https://github.com/testbed/pydata__xarray__0.12/tree//xarray) \u2192 [core](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/core)- [Lines 626 - 877](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting.py#L626-L877)\n\n This snippet contains the 'dataset_repr' function which is responsible for generating the string representation of the dataset. Modifying this function will likely be necessary to include units in the dataset overview. \n\n\n   - [Lines 240 - 316](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting.py#L240-L316)\n\n This snippet contains functions related to the representation of variables within a dataset, such as 'summarize_variable'. It may be necessary to modify these functions to include units in the variable summaries. \n\n\n   - [Lines 401 - 877](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting.py#L401-L877)\n\n This snippet contains functions like 'coords_repr' and 'indexes_repr' that are involved in creating the string representation of coordinates and indexes. These functions might need to be updated to include units in the coordinates section of the dataset overview.\n-  \u2192 [xarray](https://github.com/testbed/pydata__xarray__0.12/tree//xarray) \u2192 [core](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/core)- [Lines 451 - 2555](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/dataset.py#L451-L2555)\n\n This snippet from 'xarray/core/dataset.py' includes the '__repr__' and '_repr_html_' methods of the Dataset class, which call the 'formatting.dataset_repr' function. Changes to the representation will likely require updates here as well.\n-  \u2192 [xarray](https://github.com/testbed/pydata__xarray__0.12/tree//xarray) \u2192 [core](https://github.com/testbed/pydata__xarray__0.12/tree//xarray/core)- [Lines 254 - 342](https://github.com/testbed/pydata__xarray__0.12/blob//xarray/core/formatting_html.py#L254-L342)\n\n This snippet from 'xarray/core/formatting_html.py' includes functions that generate the HTML representation of datasets and arrays. If the feature request includes updating the HTML representation to show units, this snippet will be relevant."
    }
}