{
    "id": "scikit-learn__scikit-learn-13392",
    "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
    "task_id": 8161342416086074145,
    "title": "Missing multi-output checks in common tests",
    "body": "#### Description\r\nSome classifiers and regressors support multi-output, however we do not have a common test for that. We should add it. See discussion in #11458.\r\n\r\nWe should also remember to remove redundant individual tests introduced by 95993a4b2b7d067d8d7fff91ccb2463dbd427e7c. \r\n\r\n#### Example of code for individual test\r\n```\r\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\r\nfrom sklearn import datasets\r\n\r\nX, y = datasets.make_multilabel_classification(n_classes=3)\r\n\r\n# Test multi-output classifier\r\nclf = RandomForestClassifier()\r\nclf.fit(X, y.astype(str)).predict(X)\r\n\r\n# Test multi-output regressor\r\nrfr = RandomForestRegressor()\r\nrfr.fit(X, y).predict(X)[:3]\r\n```\r\n#### Expected Results\r\nNo error is thrown for these checks. Some regressors and classifiers are omitted from this check.\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/scikit-learn__scikit-learn__0.22.git",
    "requested_commit": "",
    "mayil_response": "- Create a common test function for multi-output support in `sklearn/utils/estimator_checks.py`:\n  ```python\n  def check_estimator_multioutput_support(name, estimator_orig):\n      estimator = clone(estimator_orig)\n      X, y = datasets.make_multilabel_classification(n_classes=3, random_state=42)\n      estimator.fit(X, y)\n      assert hasattr(estimator, \"predict\"), \"The estimator does not implement predict method.\"\n      y_pred = estimator.predict(X)\n      assert y_pred.shape == y.shape, \"The shape of predicted y is not the same as the true y.\"\n      if hasattr(estimator, \"predict_proba\"):\n          y_proba = estimator.predict_proba(X)\n          assert y_proba[0].shape[0] == y.shape[0], \"The shape of predict_proba does not match number of samples.\"\n      if hasattr(estimator, \"decision_function\"):\n          y_decision = estimator.decision_function(X)\n          assert y_decision.shape[0] == y.shape[0], \"The shape of decision_function does not match number of samples.\"\n  ```\n- Add the new common test to the appropriate test generators in `sklearn/utils/estimator_checks.py`:\n  - For classifiers:\n    ```python\n    if tags[\"multioutput\"]:\n        yield check_estimator_multioutput_support\n    ```\n  - For regressors:\n    ```python\n    if tags[\"multioutput\"]:\n        yield check_estimator_multioutput_support\n    ```\n- Remove redundant individual tests for multi-output support that were introduced in commit `95993a4b2b7d067d8d7fff91ccb2463dbd427e7c`. This involves deleting or commenting out the following test functions:\n  - `check_classifier_multioutput`\n  - `check_regressor_multioutput`\n  - `check_classifiers_multilabel_output_format_predict`\n  - `check_classifiers_multilabel_output_format_decision_function`\n  - Any other test that is now covered by the new common test and was added in the specified commit.\n- Ensure that the new common test is not applied to estimators that do not support multi-output. This can be done by checking the estimator tags within the test generator and skipping the test for estimators with the tag `multioutput_only` set to `False`.\n\n### Code snippets to check\n\n-  \u2192 [sklearn](https://github.com/testbed/scikit-learn__scikit-learn__0.22/tree//sklearn) \u2192 [utils](https://github.com/testbed/scikit-learn__scikit-learn__0.22/tree//sklearn/utils)- [Lines 181 - 2203](https://github.com/testbed/scikit-learn__scikit-learn__0.22/blob//sklearn/utils/estimator_checks.py#L181-L2203)\n\n This snippet contains the implementation of a common test for multioutput classifiers, which is directly related to the issue of adding common tests for multi-output support. \n\n\n   - [Lines 181 - 4639](https://github.com/testbed/scikit-learn__scikit-learn__0.22/blob//sklearn/utils/estimator_checks.py#L181-L4639)\n\n This snippet contains the implementation of a common test for multioutput regressors, which is relevant to the issue since it involves adding common tests for multi-output support. \n\n\n   - [Lines 181 - 4639](https://github.com/testbed/scikit-learn__scikit-learn__0.22/blob//sklearn/utils/estimator_checks.py#L181-L4639)\n\n This snippet is relevant as it includes a test for the output format of multioutput classifiers' predict method, which may need to be reviewed or updated when adding new common tests for multi-output support. \n\n\n   - [Lines 181 - 2872](https://github.com/testbed/scikit-learn__scikit-learn__0.22/blob//sklearn/utils/estimator_checks.py#L181-L2872)\n\n This snippet is relevant because it includes a test for the output format of multioutput classifiers' decision_function method, which may be related to the new common tests for multi-output support. \n\n\n   - [Lines 145 - 1355](https://github.com/testbed/scikit-learn__scikit-learn__0.22/blob//sklearn/utils/estimator_checks.py#L145-L1355)\n\n This snippet is relevant as it yields various classifier checks, including multioutput checks, which are part of the issue to ensure that multi-output support is properly tested.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0005394999999999999,
        "snippet_processor": 0.08021,
        "issue_star_creation": 0.03338,
        "issue_star_solver": 0.08541,
        "bouncer": 0.023790000000000002
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711739737.058663,
        "relevant_snippets": [
            {
                "code": "@ignore_warnings(category=FutureWarning)\ndef check_classifier_multioutput(name, estimator):\n    n_samples, n_labels, n_classes = 42, 5, 3\n    tags = _safe_tags(estimator)\n    estimator = clone(estimator)\n    X, y = make_multilabel_classification(\n        random_state=42, n_samples=n_samples, n_labels=n_labels, n_classes=n_classes\n    )\n    estimator.fit(X, y)\n    y_pred = estimator.predict(X)\n\n    assert y_pred.shape == (n_samples, n_classes), (\n        \"The shape of the prediction for multioutput data is \"\n        \"incorrect. Expected {}, got {}.\".format((n_samples, n_labels), y_pred.shape)\n    )\n    assert y_pred.dtype.kind == \"i\"\n\n    if hasattr(estimator, \"decision_function\"):\n        decision = estimator.decision_function(X)\n        assert isinstance(decision, np.ndarray)\n        assert decision.shape == (n_samples, n_classes), (\n            \"The shape of the decision function output for \"\n            \"multioutput data is incorrect. Expected {}, got {}.\".format(\n                (n_samples, n_classes), decision.shape\n            )\n        )\n\n        dec_pred = (decision > 0).astype(int)\n        dec_exp = estimator.classes_[dec_pred]\n        assert_array_equal(dec_exp, y_pred)\n\n    if hasattr(estimator, \"predict_proba\"):\n        y_prob = estimator.predict_proba(X)\n\n        if isinstance(y_prob, list) and not tags[\"poor_score\"]:\n            for i in range(n_classes):\n                assert y_prob[i].shape == (n_samples, 2), (\n                    \"The shape of the probability for multioutput data is\"\n                    \" incorrect. Expected {}, got {}.\".format(\n                        (n_samples, 2), y_prob[i].shape\n                    )\n                )\n                assert_array_equal(\n                    np.argmax(y_prob[i], axis=1).astype(int), y_pred[:, i]\n                )\n        elif not tags[\"poor_score\"]:\n            assert y_prob.shape == (n_samples, n_classes), (\n                \"The shape of the probability for multioutput data is\"\n                \" incorrect. Expected {}, got {}.\".format(\n                    (n_samples, n_classes), y_prob.shape\n                )\n            )\n            assert_array_equal(y_prob.round().astype(int), y_pred)\n\n    if hasattr(estimator, \"decision_function\") and hasattr(estimator, \"predict_proba\"):\n        for i in range(n_classes):\n            y_proba = estimator.predict_proba(X)[:, i]\n            y_decision = estimator.decision_function(X)\n            assert_array_equal(rankdata(y_proba), rankdata(y_decision[:, i]))",
                "filename": "sklearn/utils/estimator_checks.py",
                "start_index": 73288,
                "end_index": 75799,
                "start_line": 181,
                "end_line": 2203,
                "max_line": 4639,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            },
            {
                "code": "@ignore_warnings(category=FutureWarning)\ndef check_classifiers_multilabel_output_format_predict(name, classifier_orig):\n    \"\"\"Check the output of the `predict` method for classifiers supporting\n    multilabel-indicator targets.\"\"\"\n    classifier = clone(classifier_orig)\n    set_random_state(classifier)\n\n    n_samples, test_size, n_outputs = 100, 25, 5\n    X, y = make_multilabel_classification(\n        n_samples=n_samples,\n        n_features=2,\n        n_classes=n_outputs,\n        n_labels=3,\n        length=50,\n        allow_unlabeled=True,\n        random_state=0,\n    )\n    X = scale(X)\n\n    X_train, X_test = X[:-test_size], X[-test_size:]\n    y_train, y_test = y[:-test_size], y[-test_size:]\n    classifier.fit(X_train, y_train)\n\n    response_method_name = \"predict\"\n    predict_method = getattr(classifier, response_method_name, None)\n    if predict_method is None:\n        raise SkipTest(f\"{name} does not have a {response_method_name} method.\")\n\n    y_pred = predict_method(X_test)\n\n    # y_pred.shape -> y_test.shape with the same dtype\n    assert isinstance(y_pred, np.ndarray), (\n        f\"{name}.predict is expected to output a NumPy array. Got \"\n        f\"{type(y_pred)} instead.\"\n    )\n    assert y_pred.shape == y_test.shape, (\n        f\"{name}.predict outputs a NumPy array of shape {y_pred.shape} \"\n        f\"instead of {y_test.shape}.\"\n    )\n    assert y_pred.dtype == y_test.dtype, (\n        f\"{name}.predict does not output the same dtype than the targets. \"\n        f\"Got {y_pred.dtype} instead of {y_test.dtype}.\"\n    )",
                "filename": "sklearn/utils/estimator_checks.py",
                "start_index": 93413,
                "end_index": 94958,
                "start_line": 181,
                "end_line": 4639,
                "max_line": 4639,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            },
            {
                "code": "@ignore_warnings(category=FutureWarning)\ndef check_regressor_multioutput(name, estimator):\n    estimator = clone(estimator)\n    n_samples = n_features = 10\n\n    if not _is_pairwise_metric(estimator):\n        n_samples = n_samples + 1\n\n    X, y = make_regression(\n        random_state=42, n_targets=5, n_samples=n_samples, n_features=n_features\n    )\n    X = _enforce_estimator_tags_X(estimator, X)\n\n    estimator.fit(X, y)\n    y_pred = estimator.predict(X)\n\n    assert y_pred.dtype == np.dtype(\"float64\"), (\n        \"Multioutput predictions by a regressor are expected to be\"\n        \" floating-point precision. Got {} instead\".format(y_pred.dtype)\n    )\n    assert y_pred.shape == y.shape, (\n        \"The shape of the prediction for multioutput data is incorrect.\"\n        \" Expected {}, got {}.\"\n    )",
                "filename": "sklearn/utils/estimator_checks.py",
                "start_index": 75802,
                "end_index": 76605,
                "start_line": 181,
                "end_line": 4639,
                "max_line": 4639,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            },
            {
                "code": "@ignore_warnings(category=FutureWarning)\ndef check_classifiers_multilabel_output_format_decision_function(name, classifier_orig):\n    \"\"\"Check the output of the `decision_function` method for classifiers supporting\n    multilabel-indicator targets.\"\"\"\n    classifier = clone(classifier_orig)\n    set_random_state(classifier)\n\n    n_samples, test_size, n_outputs = 100, 25, 5\n    X, y = make_multilabel_classification(\n        n_samples=n_samples,\n        n_features=2,\n        n_classes=n_outputs,\n        n_labels=3,\n        length=50,\n        allow_unlabeled=True,\n        random_state=0,\n    )\n    X = scale(X)\n\n    X_train, X_test = X[:-test_size], X[-test_size:]\n    y_train = y[:-test_size]\n    classifier.fit(X_train, y_train)\n\n    response_method_name = \"decision_function\"\n    decision_function_method = getattr(classifier, response_method_name, None)\n    if decision_function_method is None:\n        raise SkipTest(f\"{name} does not have a {response_method_name} method.\")\n\n    y_pred = decision_function_method(X_test)\n\n    # y_pred.shape -> y_test.shape with floating dtype\n    assert isinstance(y_pred, np.ndarray), (\n        f\"{name}.decision_function is expected to output a NumPy array.\"\n        f\" Got {type(y_pred)} instead.\"\n    )\n    assert y_pred.shape == (test_size, n_outputs), (\n        f\"{name}.decision_function is expected to provide a NumPy array \"\n        f\"of shape (n_samples, n_outputs). Got {y_pred.shape} instead of \"\n        f\"{(test_size, n_outputs)}.\"\n    )\n    assert y_pred.dtype.kind == \"f\", (\n        f\"{name}.decision_function is expected to output a floating dtype.\"\n        f\" Got {y_pred.dtype} instead.\"\n    )\n\n\n@ignore_warnings(category=FutureWarning)\ndef check_get_feature_names_out_error(name, estimator_orig):\n    \"\"\"Check the error raised by get_feature_names_out when called before fit.\n\n    Unfitted estimators with get_feature_names_out should raise a NotFittedError.\n    \"\"\"\n\n    estimator = clone(estimator_orig)\n    err_msg = (\n        f\"Estimator {name} should have raised a NotFitted error when fit is called\"\n        \" before get_feature_names_out\"\n    )\n    with raises(NotFittedError, err_msg=err_msg):\n        estimator.get_feature_names_out()\n\n\n@ignore_warnings(category=FutureWarning)\ndef check_estimators_fit_returns_self(name, estimator_orig, readonly_memmap=False):\n    \"\"\"Check if self is returned when calling fit.\"\"\"\n    X, y = make_blobs(random_state=0, n_samples=21)\n    X = _enforce_estimator_tags_X(estimator_orig, X)\n\n    estimator = clone(estimator_orig)\n    y = _enforce_estimator_tags_y(estimator, y)\n\n    if readonly_memmap:\n        X, y = create_memmap_backed_data([X, y])\n\n    set_random_state(estimator)\n    assert estimator.fit(X, y) is estimator",
                "filename": "sklearn/utils/estimator_checks.py",
                "start_index": 98469,
                "end_index": 101199,
                "start_line": 181,
                "end_line": 2872,
                "max_line": 4639,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            },
            {
                "code": "def check_classifiers_classes(name, classifier_orig):\n    X_multiclass, y_multiclass = make_blobs(\n        n_samples=30, random_state=0, cluster_std=0.1\n    )\n    X_multiclass, y_multiclass = shuffle(X_multiclass, y_multiclass, random_state=7)\n    X_multiclass = StandardScaler().fit_transform(X_multiclass)\n\n    X_binary = X_multiclass[y_multiclass != 2]\n    y_binary = y_multiclass[y_multiclass != 2]\n\n    X_multiclass = _enforce_estimator_tags_X(classifier_orig, X_multiclass)\n    X_binary = _enforce_estimator_tags_X(classifier_orig, X_binary)\n\n    labels_multiclass = [\"one\", \"two\", \"three\"]\n    labels_binary = [\"one\", \"two\"]\n\n    y_names_multiclass = np.take(labels_multiclass, y_multiclass)\n    y_names_binary = np.take(labels_binary, y_binary)\n\n    problems = [(X_binary, y_binary, y_names_binary)]\n    if not _safe_tags(classifier_orig, key=\"binary_only\"):\n        problems.append((X_multiclass, y_multiclass, y_names_multiclass))\n\n    for X, y, y_names in problems:\n        for y_names_i in [y_names, y_names.astype(\"O\")]:\n            y_ = _choose_check_classifiers_labels(name, y, y_names_i)\n            check_classifiers_predictions(X, y_, name, classifier_orig)\n\n    labels_binary = [-1, 1]\n    y_names_binary = np.take(labels_binary, y_binary)\n    y_binary = _choose_check_classifiers_labels(name, y_binary, y_names_binary)\n    check_classifiers_predictions(X_binary, y_binary, name, classifier_orig)\n\n\n@ignore_warnings(category=FutureWarning)\ndef check_regressors_int(name, regressor_orig):\n    X, _ = _regression_dataset()\n    X = _enforce_estimator_tags_X(regressor_orig, X[:50])\n    rnd = np.random.RandomState(0)\n    y = rnd.randint(3, size=X.shape[0])\n    y = _enforce_estimator_tags_y(regressor_orig, y)\n    rnd = np.random.RandomState(0)\n    # separate estimators to control random seeds\n    regressor_1 = clone(regressor_orig)\n    regressor_2 = clone(regressor_orig)\n    set_random_state(regressor_1)\n    set_random_state(regressor_2)\n\n    if name in CROSS_DECOMPOSITION:\n        y_ = np.vstack([y, 2 * y + rnd.randint(2, size=len(y))])\n        y_ = y_.T\n    else:\n        y_ = y\n\n    # fit\n    regressor_1.fit(X, y_)\n    pred1 = regressor_1.predict(X)\n    regressor_2.fit(X, y_.astype(float))\n    pred2 = regressor_2.predict(X)\n    assert_allclose(pred1, pred2, atol=1e-2, err_msg=name)",
                "filename": "sklearn/utils/estimator_checks.py",
                "start_index": 105609,
                "end_index": 107920,
                "start_line": 3007,
                "end_line": 3430,
                "max_line": 4639,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            },
            {
                "code": "\"\"\"Check the output of the `predict_proba` method for classifiers supporting\n    multilabel-indicator targets.\"\"\"\n    classifier = clone(classifier_orig)\n    set_random_state(classifier)\n\n    n_samples, test_size, n_outputs = 100, 25, 5\n    X, y = make_multilabel_classification(\n        n_samples=n_samples,\n        n_features=2,\n        n_classes=n_outputs,\n        n_labels=3,\n        length=50,\n        allow_unlabeled=True,\n        random_state=0,\n    )\n    X = scale(X)\n\n    X_train, X_test = X[:-test_size], X[-test_size:]\n    y_train = y[:-test_size]\n    classifier.fit(X_train, y_train)\n\n    response_method_name = \"predict_proba\"\n    predict_proba_method = getattr(classifier, response_method_name, None)\n    if predict_proba_method is None:\n        raise SkipTest(f\"{name} does not have a {response_method_name} method.\")\n\n    y_pred = predict_proba_method(X_test)\n\n    # y_pred.shape -> 2 possibilities:\n    # - list of length n_outputs of shape (n_samples, 2);\n    # - ndarray of shape (n_samples, n_outputs).\n    # dtype should be floating",
                "filename": "sklearn/utils/estimator_checks.py",
                "start_index": 95091,
                "end_index": 96144,
                "start_line": 2715,
                "end_line": 2746,
                "max_line": 4639,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            },
            {
                "code": "def _yield_classifier_checks(classifier):\n    tags = _safe_tags(classifier)\n\n    # test classifiers can handle non-array data and pandas objects\n    yield check_classifier_data_not_an_array\n    # test classifiers trained on a single label always return this label\n    yield check_classifiers_one_label\n    yield check_classifiers_one_label_sample_weights\n    yield check_classifiers_classes\n    yield check_estimators_partial_fit_n_features\n    if tags[\"multioutput\"]:\n        yield check_classifier_multioutput\n    # basic consistency testing\n    yield check_classifiers_train\n    yield partial(check_classifiers_train, readonly_memmap=True)\n    yield partial(check_classifiers_train, readonly_memmap=True, X_dtype=\"float32\")\n    yield check_classifiers_regression_target\n    if tags[\"multilabel\"]:\n        yield check_classifiers_multilabel_representation_invariance\n        yield check_classifiers_multilabel_output_format_predict\n        yield check_classifiers_multilabel_output_format_predict_proba\n        yield check_classifiers_multilabel_output_format_decision_function\n    if not tags[\"no_validation\"]:\n        yield check_supervised_y_no_nan\n        if not tags[\"multioutput_only\"]:\n            yield check_supervised_y_2d\n    if tags[\"requires_fit\"]:\n        yield check_estimators_unfitted\n    if \"class_weight\" in classifier.get_params().keys():\n        yield check_class_weight_classifiers\n\n    yield check_non_transformer_estimators_n_iter\n    # test if predict_proba is a monotonic transformation of decision_function\n    yield check_decision_proba_consistency\n\n\n@ignore_warnings(category=FutureWarning)\ndef check_supervised_y_no_nan(name, estimator_orig):\n    # Checks that the Estimator targets are not NaN.\n    estimator = clone(estimator_orig)\n    rng = np.random.RandomState(888)\n    X = rng.standard_normal(size=(10, 5))\n\n    for value in [np.nan, np.inf]:\n        y = np.full(10, value)\n        y = _enforce_estimator_tags_y(estimator, y)\n\n        module_name = estimator.__module__\n        if module_name.startswith(\"sklearn.\") and not (\n            \"test_\" in module_name or module_name.endswith(\"_testing\")\n        ):\n            # In scikit-learn we want the error message to mention the input\n            # name and be specific about the kind of unexpected value.\n            if np.isinf(value):\n                match = (\n                    r\"Input (y|Y) contains infinity or a value too large for\"\n                    r\" dtype\\('float64'\\).\"\n                )\n            else:\n                match = r\"Input (y|Y) contains NaN.\"\n        else:\n            # Do not impose a particular error message to third-party libraries.\n            match = None\n        err_msg = (\n            f\"Estimator {name} should have raised error on fitting array y with inf\"\n            \" value.\"\n        )\n        with raises(ValueError, match=match, err_msg=err_msg):\n            estimator.fit(X, y)",
                "filename": "sklearn/utils/estimator_checks.py",
                "start_index": 4352,
                "end_index": 7266,
                "start_line": 145,
                "end_line": 1355,
                "max_line": 4639,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            },
            {
                "code": "from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.utils.estimator_checks import parametrize_with_checks\n\n\n@parametrize_with_checks([LogisticRegression(), DecisionTreeRegressor()])\ndef test_sklearn_compatible_estimator(estimator, check):\n    check(estimator)\n\n\n# %%\n# ROC AUC now supports multiclass classification\n# ----------------------------------------------\n# The :func:`~sklearn.metrics.roc_auc_score` function can also be used in multi-class\n# classification. Two averaging strategies are currently supported: the\n# one-vs-one algorithm computes the average of the pairwise ROC AUC scores, and\n# the one-vs-rest algorithm computes the average of the ROC AUC scores for each\n# class against all other classes. In both cases, the multiclass ROC AUC scores\n# are computed from the probability estimates that a sample belongs to a\n# particular class according to the model. The OvO and OvR algorithms support\n# weighting uniformly (``average='macro'``) and weighting by the prevalence\n# (``average='weighted'``).\n#\n# Read more in the :ref:`User Guide <roc_metrics>`.\n\n\nfrom sklearn.datasets import make_classification\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.svm import SVC\n\nX, y = make_classification(n_classes=4, n_informative=16)\nclf = SVC(decision_function_shape=\"ovo\", probability=True).fit(X, y)\nprint(roc_auc_score(y, clf.predict_proba(X), multi_class=\"ovo\"))",
                "filename": "examples/release_highlights/plot_release_highlights_0_22_0.py",
                "start_index": 8902,
                "end_index": 10347,
                "start_line": 83,
                "end_line": 282,
                "max_line": 282,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            },
            {
                "code": "\"\"\"\n============================================================\nComparing random forests and the multi-output meta estimator\n============================================================\n\nAn example to compare multi-output regression with random forest and\nthe :ref:`multioutput.MultiOutputRegressor <multiclass>` meta-estimator.\n\nThis example illustrates the use of the\n:ref:`multioutput.MultiOutputRegressor <multiclass>` meta-estimator\nto perform multi-output regression. A random forest regressor is used,\nwhich supports multi-output regression natively, so the results can be\ncompared.\n\nThe random forest regressor will only ever predict values within the\nrange of observations or closer to zero for each of the targets. As a\nresult the predictions are biased towards the centre of the circle.\n\nUsing a single underlying feature the model learns both the\nx and y coordinate as output.\n\n\"\"\"\n\n# Author: Tim Head <betatim@gmail.com>\n#\n# License: BSD 3 clause\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.multioutput import MultiOutputRegressor\n\n# Create a random dataset\nrng = np.random.RandomState(1)\nX = np.sort(200 * rng.rand(600, 1) - 100, axis=0)\ny = np.array([np.pi * np.sin(X).ravel(), np.pi * np.cos(X).ravel()]).T\ny += 0.5 - rng.rand(*y.shape)\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, train_size=400, test_size=200, random_state=4\n)\n\nmax_depth = 30\nregr_multirf = MultiOutputRegressor(\n    RandomForestRegressor(n_estimators=100, max_depth=max_depth, random_state=0)\n)\nregr_multirf.fit(X_train, y_train)\n\nregr_rf = RandomForestRegressor(n_estimators=100, max_depth=max_depth, random_state=2)\nregr_rf.fit(X_train, y_train)\n\n# Predict on new data\ny_multirf = regr_multirf.predict(X_test)\ny_rf = regr_rf.predict(X_test)\n\n# Plot the results\nplt.figure()\ns = 50\na = 0.4\nplt.scatter(\n    y_test[:, 0],\n    y_test[:, 1],\n    edgecolor=\"k\",\n    c=\"navy\",\n    s=s,\n    marker=\"s\",\n    alpha=a,\n    label=\"Data\",\n)\nplt.scatter(\n    y_multirf[:, 0],\n    y_multirf[:, 1],\n    edgecolor=\"k\",\n    c=\"cornflowerblue\",\n    s=s,\n    alpha=a,\n    label=\"Multi RF score=%.2f\" % regr_multirf.score(X_test, y_test),\n)\nplt.scatter(\n    y_rf[:, 0],\n    y_rf[:, 1],\n    edgecolor=\"k\",\n    c=\"c\",\n    s=s,\n    marker=\"^\",\n    alpha=a,\n    label=\"RF score=%.2f\" % regr_rf.score(X_test, y_test),\n)\nplt.xlim([-6, 6])\nplt.ylim([-6, 6])\nplt.xlabel(\"target 1\")\nplt.ylabel(\"target 2\")\nplt.title(\"Comparing random forests and the multi-output meta estimator\")\nplt.legend()\nplt.show()",
                "filename": "examples/ensemble/plot_random_forest_regression_multioutput.py",
                "start_index": 0,
                "end_index": 2609,
                "start_line": 1,
                "end_line": 97,
                "max_line": 97,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            },
            {
                "code": "def check_outlier_contamination(name, estimator_orig):\n    # Check that the contamination parameter is in (0.0, 0.5] when it is an\n    # interval constraint.\n\n    if not hasattr(estimator_orig, \"_parameter_constraints\"):\n        # Only estimator implementing parameter constraints will be checked\n        return\n\n    if \"contamination\" not in estimator_orig._parameter_constraints:\n        return\n\n    contamination_constraints = estimator_orig._parameter_constraints[\"contamination\"]\n    if not any([isinstance(c, Interval) for c in contamination_constraints]):\n        raise AssertionError(\n            \"contamination constraints should contain a Real Interval constraint.\"\n        )\n\n    for constraint in contamination_constraints:\n        if isinstance(constraint, Interval):\n            assert (\n                constraint.type == Real\n                and constraint.left >= 0.0\n                and constraint.right <= 0.5\n                and (constraint.left > 0 or constraint.closed in {\"right\", \"neither\"})\n            ), \"contamination constraint should be an interval in (0, 0.5]\"\n\n\n@ignore_warnings(category=FutureWarning)\ndef check_classifiers_multilabel_representation_invariance(name, classifier_orig):\n    X, y = make_multilabel_classification(\n        n_samples=100,\n        n_features=2,\n        n_classes=5,\n        n_labels=3,\n        length=50,\n        allow_unlabeled=True,\n        random_state=0,\n    )\n    X = scale(X)\n\n    X_train, y_train = X[:80], y[:80]\n    X_test = X[80:]\n\n    y_train_list_of_lists = y_train.tolist()\n    y_train_list_of_arrays = list(y_train)\n\n    classifier = clone(classifier_orig)\n    set_random_state(classifier)\n\n    y_pred = classifier.fit(X_train, y_train).predict(X_test)\n\n    y_pred_list_of_lists = classifier.fit(X_train, y_train_list_of_lists).predict(\n        X_test\n    )\n\n    y_pred_list_of_arrays = classifier.fit(X_train, y_train_list_of_arrays).predict(\n        X_test\n    )\n\n    assert_array_equal(y_pred, y_pred_list_of_arrays)\n    assert_array_equal(y_pred, y_pred_list_of_lists)\n\n    assert y_pred.dtype == y_pred_list_of_arrays.dtype\n    assert y_pred.dtype == y_pred_list_of_lists.dtype\n    assert type(y_pred) == type(y_pred_list_of_arrays)\n    assert type(y_pred) == type(y_pred_list_of_lists)",
                "filename": "sklearn/utils/estimator_checks.py",
                "start_index": 91144,
                "end_index": 93410,
                "start_line": 2600,
                "end_line": 2665,
                "max_line": 4639,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "sklearn/utils/estimator_checks.py": [
                {
                    "chunk": {
                        "code": "@ignore_warnings(category=FutureWarning)\ndef check_classifier_multioutput(name, estimator):\n    n_samples, n_labels, n_classes = 42, 5, 3\n    tags = _safe_tags(estimator)\n    estimator = clone(estimator)\n    X, y = make_multilabel_classification(\n        random_state=42, n_samples=n_samples, n_labels=n_labels, n_classes=n_classes\n    )\n    estimator.fit(X, y)\n    y_pred = estimator.predict(X)\n\n    assert y_pred.shape == (n_samples, n_classes), (\n        \"The shape of the prediction for multioutput data is \"\n        \"incorrect. Expected {}, got {}.\".format((n_samples, n_labels), y_pred.shape)\n    )\n    assert y_pred.dtype.kind == \"i\"\n\n    if hasattr(estimator, \"decision_function\"):\n        decision = estimator.decision_function(X)\n        assert isinstance(decision, np.ndarray)\n        assert decision.shape == (n_samples, n_classes), (\n            \"The shape of the decision function output for \"\n            \"multioutput data is incorrect. Expected {}, got {}.\".format(\n                (n_samples, n_classes), decision.shape\n            )\n        )\n\n        dec_pred = (decision > 0).astype(int)\n        dec_exp = estimator.classes_[dec_pred]\n        assert_array_equal(dec_exp, y_pred)\n\n    if hasattr(estimator, \"predict_proba\"):\n        y_prob = estimator.predict_proba(X)\n\n        if isinstance(y_prob, list) and not tags[\"poor_score\"]:\n            for i in range(n_classes):\n                assert y_prob[i].shape == (n_samples, 2), (\n                    \"The shape of the probability for multioutput data is\"\n                    \" incorrect. Expected {}, got {}.\".format(\n                        (n_samples, 2), y_prob[i].shape\n                    )\n                )\n                assert_array_equal(\n                    np.argmax(y_prob[i], axis=1).astype(int), y_pred[:, i]\n                )\n        elif not tags[\"poor_score\"]:\n            assert y_prob.shape == (n_samples, n_classes), (\n                \"The shape of the probability for multioutput data is\"\n                \" incorrect. Expected {}, got {}.\".format(\n                    (n_samples, n_classes), y_prob.shape\n                )\n            )\n            assert_array_equal(y_prob.round().astype(int), y_pred)\n\n    if hasattr(estimator, \"decision_function\") and hasattr(estimator, \"predict_proba\"):\n        for i in range(n_classes):\n            y_proba = estimator.predict_proba(X)[:, i]\n            y_decision = estimator.decision_function(X)\n            assert_array_equal(rankdata(y_proba), rankdata(y_decision[:, i]))",
                        "filename": "sklearn/utils/estimator_checks.py",
                        "start_index": 73288,
                        "end_index": 75799,
                        "start_line": 181,
                        "end_line": 2203,
                        "max_line": 4639,
                        "git_instance": "github",
                        "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the implementation of a common test for multioutput classifiers, which is directly related to the issue of adding common tests for multi-output support."
                },
                {
                    "chunk": {
                        "code": "@ignore_warnings(category=FutureWarning)\ndef check_regressor_multioutput(name, estimator):\n    estimator = clone(estimator)\n    n_samples = n_features = 10\n\n    if not _is_pairwise_metric(estimator):\n        n_samples = n_samples + 1\n\n    X, y = make_regression(\n        random_state=42, n_targets=5, n_samples=n_samples, n_features=n_features\n    )\n    X = _enforce_estimator_tags_X(estimator, X)\n\n    estimator.fit(X, y)\n    y_pred = estimator.predict(X)\n\n    assert y_pred.dtype == np.dtype(\"float64\"), (\n        \"Multioutput predictions by a regressor are expected to be\"\n        \" floating-point precision. Got {} instead\".format(y_pred.dtype)\n    )\n    assert y_pred.shape == y.shape, (\n        \"The shape of the prediction for multioutput data is incorrect.\"\n        \" Expected {}, got {}.\"\n    )",
                        "filename": "sklearn/utils/estimator_checks.py",
                        "start_index": 75802,
                        "end_index": 76605,
                        "start_line": 181,
                        "end_line": 4639,
                        "max_line": 4639,
                        "git_instance": "github",
                        "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the implementation of a common test for multioutput regressors, which is relevant to the issue since it involves adding common tests for multi-output support."
                },
                {
                    "chunk": {
                        "code": "@ignore_warnings(category=FutureWarning)\ndef check_classifiers_multilabel_output_format_predict(name, classifier_orig):\n    \"\"\"Check the output of the `predict` method for classifiers supporting\n    multilabel-indicator targets.\"\"\"\n    classifier = clone(classifier_orig)\n    set_random_state(classifier)\n\n    n_samples, test_size, n_outputs = 100, 25, 5\n    X, y = make_multilabel_classification(\n        n_samples=n_samples,\n        n_features=2,\n        n_classes=n_outputs,\n        n_labels=3,\n        length=50,\n        allow_unlabeled=True,\n        random_state=0,\n    )\n    X = scale(X)\n\n    X_train, X_test = X[:-test_size], X[-test_size:]\n    y_train, y_test = y[:-test_size], y[-test_size:]\n    classifier.fit(X_train, y_train)\n\n    response_method_name = \"predict\"\n    predict_method = getattr(classifier, response_method_name, None)\n    if predict_method is None:\n        raise SkipTest(f\"{name} does not have a {response_method_name} method.\")\n\n    y_pred = predict_method(X_test)\n\n    # y_pred.shape -> y_test.shape with the same dtype\n    assert isinstance(y_pred, np.ndarray), (\n        f\"{name}.predict is expected to output a NumPy array. Got \"\n        f\"{type(y_pred)} instead.\"\n    )\n    assert y_pred.shape == y_test.shape, (\n        f\"{name}.predict outputs a NumPy array of shape {y_pred.shape} \"\n        f\"instead of {y_test.shape}.\"\n    )\n    assert y_pred.dtype == y_test.dtype, (\n        f\"{name}.predict does not output the same dtype than the targets. \"\n        f\"Got {y_pred.dtype} instead of {y_test.dtype}.\"\n    )",
                        "filename": "sklearn/utils/estimator_checks.py",
                        "start_index": 93413,
                        "end_index": 94958,
                        "start_line": 181,
                        "end_line": 4639,
                        "max_line": 4639,
                        "git_instance": "github",
                        "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is relevant as it includes a test for the output format of multioutput classifiers' predict method, which may need to be reviewed or updated when adding new common tests for multi-output support."
                },
                {
                    "chunk": {
                        "code": "@ignore_warnings(category=FutureWarning)\ndef check_classifiers_multilabel_output_format_decision_function(name, classifier_orig):\n    \"\"\"Check the output of the `decision_function` method for classifiers supporting\n    multilabel-indicator targets.\"\"\"\n    classifier = clone(classifier_orig)\n    set_random_state(classifier)\n\n    n_samples, test_size, n_outputs = 100, 25, 5\n    X, y = make_multilabel_classification(\n        n_samples=n_samples,\n        n_features=2,\n        n_classes=n_outputs,\n        n_labels=3,\n        length=50,\n        allow_unlabeled=True,\n        random_state=0,\n    )\n    X = scale(X)\n\n    X_train, X_test = X[:-test_size], X[-test_size:]\n    y_train = y[:-test_size]\n    classifier.fit(X_train, y_train)\n\n    response_method_name = \"decision_function\"\n    decision_function_method = getattr(classifier, response_method_name, None)\n    if decision_function_method is None:\n        raise SkipTest(f\"{name} does not have a {response_method_name} method.\")\n\n    y_pred = decision_function_method(X_test)\n\n    # y_pred.shape -> y_test.shape with floating dtype\n    assert isinstance(y_pred, np.ndarray), (\n        f\"{name}.decision_function is expected to output a NumPy array.\"\n        f\" Got {type(y_pred)} instead.\"\n    )\n    assert y_pred.shape == (test_size, n_outputs), (\n        f\"{name}.decision_function is expected to provide a NumPy array \"\n        f\"of shape (n_samples, n_outputs). Got {y_pred.shape} instead of \"\n        f\"{(test_size, n_outputs)}.\"\n    )\n    assert y_pred.dtype.kind == \"f\", (\n        f\"{name}.decision_function is expected to output a floating dtype.\"\n        f\" Got {y_pred.dtype} instead.\"\n    )\n\n\n@ignore_warnings(category=FutureWarning)\ndef check_get_feature_names_out_error(name, estimator_orig):\n    \"\"\"Check the error raised by get_feature_names_out when called before fit.\n\n    Unfitted estimators with get_feature_names_out should raise a NotFittedError.\n    \"\"\"\n\n    estimator = clone(estimator_orig)\n    err_msg = (\n        f\"Estimator {name} should have raised a NotFitted error when fit is called\"\n        \" before get_feature_names_out\"\n    )\n    with raises(NotFittedError, err_msg=err_msg):\n        estimator.get_feature_names_out()\n\n\n@ignore_warnings(category=FutureWarning)\ndef check_estimators_fit_returns_self(name, estimator_orig, readonly_memmap=False):\n    \"\"\"Check if self is returned when calling fit.\"\"\"\n    X, y = make_blobs(random_state=0, n_samples=21)\n    X = _enforce_estimator_tags_X(estimator_orig, X)\n\n    estimator = clone(estimator_orig)\n    y = _enforce_estimator_tags_y(estimator, y)\n\n    if readonly_memmap:\n        X, y = create_memmap_backed_data([X, y])\n\n    set_random_state(estimator)\n    assert estimator.fit(X, y) is estimator",
                        "filename": "sklearn/utils/estimator_checks.py",
                        "start_index": 98469,
                        "end_index": 101199,
                        "start_line": 181,
                        "end_line": 2872,
                        "max_line": 4639,
                        "git_instance": "github",
                        "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is relevant because it includes a test for the output format of multioutput classifiers' decision_function method, which may be related to the new common tests for multi-output support."
                },
                {
                    "chunk": {
                        "code": "def _yield_classifier_checks(classifier):\n    tags = _safe_tags(classifier)\n\n    # test classifiers can handle non-array data and pandas objects\n    yield check_classifier_data_not_an_array\n    # test classifiers trained on a single label always return this label\n    yield check_classifiers_one_label\n    yield check_classifiers_one_label_sample_weights\n    yield check_classifiers_classes\n    yield check_estimators_partial_fit_n_features\n    if tags[\"multioutput\"]:\n        yield check_classifier_multioutput\n    # basic consistency testing\n    yield check_classifiers_train\n    yield partial(check_classifiers_train, readonly_memmap=True)\n    yield partial(check_classifiers_train, readonly_memmap=True, X_dtype=\"float32\")\n    yield check_classifiers_regression_target\n    if tags[\"multilabel\"]:\n        yield check_classifiers_multilabel_representation_invariance\n        yield check_classifiers_multilabel_output_format_predict\n        yield check_classifiers_multilabel_output_format_predict_proba\n        yield check_classifiers_multilabel_output_format_decision_function\n    if not tags[\"no_validation\"]:\n        yield check_supervised_y_no_nan\n        if not tags[\"multioutput_only\"]:\n            yield check_supervised_y_2d\n    if tags[\"requires_fit\"]:\n        yield check_estimators_unfitted\n    if \"class_weight\" in classifier.get_params().keys():\n        yield check_class_weight_classifiers\n\n    yield check_non_transformer_estimators_n_iter\n    # test if predict_proba is a monotonic transformation of decision_function\n    yield check_decision_proba_consistency\n\n\n@ignore_warnings(category=FutureWarning)\ndef check_supervised_y_no_nan(name, estimator_orig):\n    # Checks that the Estimator targets are not NaN.\n    estimator = clone(estimator_orig)\n    rng = np.random.RandomState(888)\n    X = rng.standard_normal(size=(10, 5))\n\n    for value in [np.nan, np.inf]:\n        y = np.full(10, value)\n        y = _enforce_estimator_tags_y(estimator, y)\n\n        module_name = estimator.__module__\n        if module_name.startswith(\"sklearn.\") and not (\n            \"test_\" in module_name or module_name.endswith(\"_testing\")\n        ):\n            # In scikit-learn we want the error message to mention the input\n            # name and be specific about the kind of unexpected value.\n            if np.isinf(value):\n                match = (\n                    r\"Input (y|Y) contains infinity or a value too large for\"\n                    r\" dtype\\('float64'\\).\"\n                )\n            else:\n                match = r\"Input (y|Y) contains NaN.\"\n        else:\n            # Do not impose a particular error message to third-party libraries.\n            match = None\n        err_msg = (\n            f\"Estimator {name} should have raised error on fitting array y with inf\"\n            \" value.\"\n        )\n        with raises(ValueError, match=match, err_msg=err_msg):\n            estimator.fit(X, y)",
                        "filename": "sklearn/utils/estimator_checks.py",
                        "start_index": 4352,
                        "end_index": 7266,
                        "start_line": 145,
                        "end_line": 1355,
                        "max_line": 4639,
                        "git_instance": "github",
                        "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is relevant as it yields various classifier checks, including multioutput checks, which are part of the issue to ensure that multi-output support is properly tested."
                }
            ]
        },
        "solution_task": "- Create a common test function for multi-output support in `sklearn/utils/estimator_checks.py`:\n  ```python\n  def check_estimator_multioutput_support(name, estimator_orig):\n      estimator = clone(estimator_orig)\n      X, y = datasets.make_multilabel_classification(n_classes=3, random_state=42)\n      estimator.fit(X, y)\n      assert hasattr(estimator, \"predict\"), \"The estimator does not implement predict method.\"\n      y_pred = estimator.predict(X)\n      assert y_pred.shape == y.shape, \"The shape of predicted y is not the same as the true y.\"\n      if hasattr(estimator, \"predict_proba\"):\n          y_proba = estimator.predict_proba(X)\n          assert y_proba[0].shape[0] == y.shape[0], \"The shape of predict_proba does not match number of samples.\"\n      if hasattr(estimator, \"decision_function\"):\n          y_decision = estimator.decision_function(X)\n          assert y_decision.shape[0] == y.shape[0], \"The shape of decision_function does not match number of samples.\"\n  ```\n- Add the new common test to the appropriate test generators in `sklearn/utils/estimator_checks.py`:\n  - For classifiers:\n    ```python\n    if tags[\"multioutput\"]:\n        yield check_estimator_multioutput_support\n    ```\n  - For regressors:\n    ```python\n    if tags[\"multioutput\"]:\n        yield check_estimator_multioutput_support\n    ```\n- Remove redundant individual tests for multi-output support that were introduced in commit `95993a4b2b7d067d8d7fff91ccb2463dbd427e7c`. This involves deleting or commenting out the following test functions:\n  - `check_classifier_multioutput`\n  - `check_regressor_multioutput`\n  - `check_classifiers_multilabel_output_format_predict`\n  - `check_classifiers_multilabel_output_format_decision_function`\n  - Any other test that is now covered by the new common test and was added in the specified commit.\n- Ensure that the new common test is not applied to estimators that do not support multi-output. This can be done by checking the estimator tags within the test generator and skipping the test for estimators with the tag `multioutput_only` set to `False`.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable plan to address the issue of missing multi-output checks in common tests for classifiers and regressors. It suggests creating a common test function, adding it to the test generators, and removing redundant individual tests, which aligns with the requirements outlined in the PROMPT. The RESPONSE also includes code snippets and asserts to ensure the test's correctness, which is highly relevant to the task. Furthermore, it advises on how to handle estimators that do not support multi-output, which is a critical aspect of the issue. The only reason it does not score a 10 is that it does not explicitly mention updating documentation or ensuring that the new common test is integrated into the continuous integration process, which are often important steps in resolving such issues.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711739936.859425,
        "result": "- Create a common test function for multi-output support in `sklearn/utils/estimator_checks.py`:\n  ```python\n  def check_estimator_multioutput_support(name, estimator_orig):\n      estimator = clone(estimator_orig)\n      X, y = datasets.make_multilabel_classification(n_classes=3, random_state=42)\n      estimator.fit(X, y)\n      assert hasattr(estimator, \"predict\"), \"The estimator does not implement predict method.\"\n      y_pred = estimator.predict(X)\n      assert y_pred.shape == y.shape, \"The shape of predicted y is not the same as the true y.\"\n      if hasattr(estimator, \"predict_proba\"):\n          y_proba = estimator.predict_proba(X)\n          assert y_proba[0].shape[0] == y.shape[0], \"The shape of predict_proba does not match number of samples.\"\n      if hasattr(estimator, \"decision_function\"):\n          y_decision = estimator.decision_function(X)\n          assert y_decision.shape[0] == y.shape[0], \"The shape of decision_function does not match number of samples.\"\n  ```\n- Add the new common test to the appropriate test generators in `sklearn/utils/estimator_checks.py`:\n  - For classifiers:\n    ```python\n    if tags[\"multioutput\"]:\n        yield check_estimator_multioutput_support\n    ```\n  - For regressors:\n    ```python\n    if tags[\"multioutput\"]:\n        yield check_estimator_multioutput_support\n    ```\n- Remove redundant individual tests for multi-output support that were introduced in commit `95993a4b2b7d067d8d7fff91ccb2463dbd427e7c`. This involves deleting or commenting out the following test functions:\n  - `check_classifier_multioutput`\n  - `check_regressor_multioutput`\n  - `check_classifiers_multilabel_output_format_predict`\n  - `check_classifiers_multilabel_output_format_decision_function`\n  - Any other test that is now covered by the new common test and was added in the specified commit.\n- Ensure that the new common test is not applied to estimators that do not support multi-output. This can be done by checking the estimator tags within the test generator and skipping the test for estimators with the tag `multioutput_only` set to `False`.\n\n### Code snippets to check\n\n-  \u2192 [sklearn](https://github.com/testbed/scikit-learn__scikit-learn__0.22/tree//sklearn) \u2192 [utils](https://github.com/testbed/scikit-learn__scikit-learn__0.22/tree//sklearn/utils)- [Lines 181 - 2203](https://github.com/testbed/scikit-learn__scikit-learn__0.22/blob//sklearn/utils/estimator_checks.py#L181-L2203)\n\n This snippet contains the implementation of a common test for multioutput classifiers, which is directly related to the issue of adding common tests for multi-output support. \n\n\n   - [Lines 181 - 4639](https://github.com/testbed/scikit-learn__scikit-learn__0.22/blob//sklearn/utils/estimator_checks.py#L181-L4639)\n\n This snippet contains the implementation of a common test for multioutput regressors, which is relevant to the issue since it involves adding common tests for multi-output support. \n\n\n   - [Lines 181 - 4639](https://github.com/testbed/scikit-learn__scikit-learn__0.22/blob//sklearn/utils/estimator_checks.py#L181-L4639)\n\n This snippet is relevant as it includes a test for the output format of multioutput classifiers' predict method, which may need to be reviewed or updated when adding new common tests for multi-output support. \n\n\n   - [Lines 181 - 2872](https://github.com/testbed/scikit-learn__scikit-learn__0.22/blob//sklearn/utils/estimator_checks.py#L181-L2872)\n\n This snippet is relevant because it includes a test for the output format of multioutput classifiers' decision_function method, which may be related to the new common tests for multi-output support. \n\n\n   - [Lines 145 - 1355](https://github.com/testbed/scikit-learn__scikit-learn__0.22/blob//sklearn/utils/estimator_checks.py#L145-L1355)\n\n This snippet is relevant as it yields various classifier checks, including multioutput checks, which are part of the issue to ensure that multi-output support is properly tested."
    }
}