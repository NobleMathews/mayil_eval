{
    "id": "scikit-learn__scikit-learn-12983",
    "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
    "task_id": 533028536525401497,
    "title": "[MRG] FIX gradient boosting with sklearn estimator as init",
    "body": "Fixes #10302, Fixes #12429, Fixes #2691\r\n\r\nGradient Boosting used to fail when init was a sklearn estimator, which is a bit ironic :)\r\nIssue was that the predict output didn't have the expected shape. And apparently there was no test for the init parameter with other estimator than default.\r\n\r\n*Edit* Also accept initial estimator which does not support sample weights as long as the gradient boosting is not fitted with sample weights\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/scikit-learn__scikit-learn__0.21.git",
    "requested_commit": "",
    "mayil_response": "To address the issue with the `init` parameter in `GradientBoostingClassifier` and `GradientBoostingRegressor` when using a non-default sklearn estimator that does not support sample weights, and to ensure the predict method's output shape is compatible, apply the following changes:\n\n- Modify the `fit` method in both `GradientBoostingClassifier` and `GradientBoostingRegressor` to check if the `init` estimator supports sample weights. Use the `hasattr` function to check if the `init` estimator has a `sample_weight` parameter in its `fit` method signature.\n- If the `init` estimator does not support sample weights, raise an informative error when `sample_weight` is not None.\n- Ensure that the output shape of the `predict` method from the `init` estimator is compatible with the expected shape for gradient boosting. This can be done by checking the output shape and reshaping if necessary.\n- Add test cases to cover scenarios where the `init` estimator is a non-default estimator that does or does not support sample weights.\n\nHere is a code snippet that demonstrates the proposed changes:\n\n```python\nfrom sklearn.utils.validation import check_is_fitted\nfrom sklearn.utils.validation import has_fit_parameter\n\nclass GradientBoostingClassifier(BaseEstimator):\n    # ... existing code ...\n\n    def fit(self, X, y, sample_weight=None):\n        # ... existing code before initializing raw_predictions ...\n\n        if self.init:\n            if has_fit_parameter(self.init, \"sample_weight\"):\n                self.init_.fit(X, y, sample_weight=sample_weight)\n            else:\n                if sample_weight is not None:\n                    raise ValueError(\n                        \"The initial estimator {} does not support sample weights.\"\n                        .format(self.init_.__class__.__name__)\n                    )\n                self.init_.fit(X, y)\n\n            # Ensure the init estimator's predict output has the correct shape\n            raw_predictions_init = self.init_.predict(X)\n            if raw_predictions_init.ndim == 1:\n                raw_predictions_init = raw_predictions_init[:, np.newaxis]\n            # ... continue with the rest of the fit method ...\n\n        # ... existing code ...\n\n# Similar changes should be made to GradientBoostingRegressor\n```\n\nRemember to add corresponding test cases to `sklearn/ensemble/tests/test_gradient_boosting.py` to ensure that the new behavior works as expected and that informative errors are raised when necessary.\n\n### Code snippets to check\n\n-  \u2192 [sklearn](https://github.com/testbed/scikit-learn__scikit-learn__0.21/tree//sklearn) \u2192 [ensemble](https://github.com/testbed/scikit-learn__scikit-learn__0.21/tree//sklearn/ensemble)- [Lines 458 - 525](https://github.com/testbed/scikit-learn__scikit-learn__0.21/blob//sklearn/ensemble/_gb.py#L458-L525)\n\n This snippet contains logic for fitting the initial estimator and handling the case when sample weights are not supported, which is directly related to the issue. \n\n\n   - [Lines 370 - 1782](https://github.com/testbed/scikit-learn__scikit-learn__0.21/blob//sklearn/ensemble/_gb.py#L370-L1782)\n\n This snippet includes a decorator that might be involved in the initialization process of the GradientBoosting estimator, which could be relevant to the issue. \n\n\n   - [Lines 835 - 1077](https://github.com/testbed/scikit-learn__scikit-learn__0.21/blob//sklearn/ensemble/_gb.py#L835-L1077)\n\n This snippet contains the documentation and parameters for the Gradient Boosting classifier, including the 'init' parameter, which is relevant to the issue. \n\n\n   - [Lines 1398 - 1824](https://github.com/testbed/scikit-learn__scikit-learn__0.21/blob//sklearn/ensemble/_gb.py#L1398-L1824)\n\n This snippet contains the documentation and parameters for the Gradient Boosting regressor, including the 'init' parameter, which is relevant to the issue.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0004185,
        "snippet_processor": 0.08203,
        "issue_star_creation": 0.032729999999999995,
        "issue_star_solver": 0.07929000000000001,
        "bouncer": 0.030320000000000003
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711741138.379484,
        "relevant_snippets": [
            {
                "code": "@_fit_context(\n        # GradientBoosting*.init is not validated yet\n        prefer_skip_nested_validation=False\n    )",
                "filename": "sklearn/ensemble/_gb.py",
                "start_index": 13245,
                "end_index": 13363,
                "start_line": 370,
                "end_line": 1782,
                "max_line": 1828,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            },
            {
                "code": "\"\"\"Gradient Boosting for classification.\n\n    This algorithm builds an additive model in a forward stage-wise fashion; it\n    allows for the optimization of arbitrary differentiable loss functions. In\n    each stage ``n_classes_`` regression trees are fit on the negative gradient\n    of the loss function, e.g. binary or multiclass log loss. Binary\n    classification is a special case where only a single regression tree is\n    induced.\n\n    :class:`sklearn.ensemble.HistGradientBoostingClassifier` is a much faster\n    variant of this algorithm for intermediate datasets (`n_samples >= 10_000`).\n\n    Read more in the :ref:`User Guide <gradient_boosting>`.\n\n    Parameters\n    ----------\n    loss : {'log_loss', 'exponential'}, default='log_loss'\n        The loss function to be optimized. 'log_loss' refers to binomial and\n        multinomial deviance, the same as used in logistic regression.\n        It is a good choice for classification with probabilistic outputs.\n        For loss 'exponential', gradient boosting recovers the AdaBoost algorithm.\n\n    learning_rate : float, default=0.1\n        Learning rate shrinks the contribution of each tree by `learning_rate`.\n        There is a trade-off between learning_rate and n_estimators.\n        Values must be in the range `[0.0, inf)`.\n\n    n_estimators : int, default=100\n        The number of boosting stages to perform. Gradient boosting\n        is fairly robust to over-fitting so a large number usually\n        results in better performance.\n        Values must be in the range `[1, inf)`.\n\n    subsample : float, default=1.0\n        The fraction of samples to be used for fitting the individual base\n        learners. If smaller than 1.0 this results in Stochastic Gradient\n        Boosting. `subsample` interacts with the parameter `n_estimators`.\n        Choosing `subsample < 1.0` leads to a reduction of variance\n        and an increase in bias.\n        Values must be in the range `(0.0, 1.0]`.\n\n    criterion : {'friedman_mse', 'squared_error'}, default='friedman_mse'\n        The function to measure the quality of a split. Supported criteria are\n        'friedman_mse' for the mean squared error with improvement score by\n        Friedman, 'squared_error' for mean squared error. The default value of\n        'friedman_mse' is generally the best as it can provide a better\n        approximation in some cases.\n\n        .. versionadded:: 0.18\n\n    min_samples_split : int or float, default=2\n        The minimum number of samples required to split an internal node:\n\n        - If int, values must be in the range `[2, inf)`.\n        - If float, values must be in the range `(0.0, 1.0]` and `min_samples_split`\n          will be `ceil(min_samples_split * n_samples)`.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_samples_leaf : int or float, default=1\n        The minimum number of samples required to be at a leaf node.\n        A split point at any depth will only be considered if it leaves at\n        least ``min_samples_leaf`` training samples in each of the left and\n        right branches.  This may have the effect of smoothing the model,\n        especially in regression.\n\n        - If int, values must be in the range `[1, inf)`.\n        - If float, values must be in the range `(0.0, 1.0)` and `min_samples_leaf`\n          will be `ceil(min_samples_leaf * n_samples)`.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_weight_fraction_leaf : float, default=0.0\n        The minimum weighted fraction of the sum total of weights (of all\n        the input samples) required to be at a leaf node. Samples have\n        equal weight when sample_weight is not provided.\n        Values must be in the range `[0.0, 0.5]`.\n\n    max_depth : int or None, default=3\n        Maximum depth of the individual regression estimators. The maximum\n        depth limits the number of nodes in the tree. Tune this parameter\n        for best performance; the best value depends on the interaction\n        of the input variables. If None, then nodes are expanded until\n        all leaves are pure or until all leaves contain less than\n        min_samples_split samples.\n        If int, values must be in the range `[1, inf)`.\n\n    min_impurity_decrease : float, default=0.0\n        A node will be split if this split induces a decrease of the impurity\n        greater than or equal to this value.\n        Values must be in the range `[0.0, inf)`.\n\n        The weighted impurity decrease equation is the following::\n\n            N_t / N * (impurity - N_t_R / N_t * right_impurity\n                                - N_t_L / N_t * left_impurity)\n\n        where ``N`` is the total number of samples, ``N_t`` is the number of\n        samples at the current node, ``N_t_L`` is the number of samples in the\n        left child, and ``N_t_R`` is the number of samples in the right child.\n\n        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n        if ``sample_weight`` is passed.\n\n        .. versionadded:: 0.19\n\n    init : estimator or 'zero', default=None\n        An estimator object that is used to compute the initial predictions.\n        ``init`` has to provide :term:`fit` and :term:`predict_proba`. If\n        'zero', the initial raw predictions are set to zero. By default, a\n        ``DummyEstimator`` predicting the classes priors is used.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls the random seed given to each Tree estimator at each\n        boosting iteration.\n        In addition, it controls the random permutation of the features at\n        each split (see Notes for more details).\n        It also controls the random splitting of the training data to obtain a\n        validation set if `n_iter_no_change` is not None.\n        Pass an int for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    max_features : {'sqrt', 'log2'}, int or float, default=None\n        The number of features to consider when looking for the best split:\n\n        - If int, values must be in the range `[1, inf)`.\n        - If float, values must be in the range `(0.0, 1.0]` and the features\n          considered at each split will be `max(1, int(max_features * n_features_in_))`.\n        - If 'sqrt', then `max_features=sqrt(n_features)`.\n        - If 'log2', then `max_features=log2(n_features)`.\n        - If None, then `max_features=n_features`.\n\n        Choosing `max_features < n_features` leads to a reduction of variance\n        and an increase in bias.\n\n        Note: the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    verbose : int, default=0\n        Enable verbose output. If 1 then it prints progress and performance\n        once in a while (the more trees the lower the frequency). If greater\n        than 1 then it prints progress and performance for every tree.\n        Values must be in the range `[0, inf)`.\n\n    max_leaf_nodes : int, default=None\n        Grow trees with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        Values must be in the range `[2, inf)`.\n        If `None`, then unlimited number of leaf nodes.\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just erase the\n        previous solution. See :term:`the Glossary <warm_start>`.\n\n    validation_fraction : float, default=0.1\n        The proportion of training data to set aside as validation set for\n        early stopping. Values must be in the range `(0.0, 1.0)`.\n        Only used if ``n_iter_no_change`` is set to an integer.\n\n        .. versionadded:: 0.20\n\n    n_iter_no_change : int, default=None\n        ``n_iter_no_change`` is used to decide if early stopping will be used\n        to terminate training when validation score is not improving. By\n        default it is set to None to disable early stopping. If set to a\n        number, it will set aside ``validation_fraction`` size of the training\n        data as validation and terminate training when validation score is not\n        improving in all of the previous ``n_iter_no_change`` numbers of\n        iterations. The split is stratified.\n        Values must be in the range `[1, inf)`.\n\n        .. versionadded:: 0.20\n\n    tol : float, default=1e-4\n        Tolerance for the early stopping. When the loss is not improving\n        by at least tol for ``n_iter_no_change`` iterations (if set to a\n        number), the training stops.\n        Values must be in the range `[0.0, inf)`.\n\n        .. versionadded:: 0.20\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed.\n        Values must be in the range `[0.0, inf)`.\n        See :ref:`minimal_cost_complexity_pruning` for details.\n\n        .. versionadded:: 0.22\n\n    Attributes\n    ----------\n    n_estimators_ : int\n        The number of estimators as selected by early stopping (if\n        ``n_iter_no_change`` is specified). Otherwise it is set to\n        ``n_estimators``.\n\n        .. versionadded:: 0.20\n\n    feature_importances_ : ndarray of shape (n_features,)\n        The impurity-based feature importances.\n        The higher, the more important the feature.\n        The importance of a feature is computed as the (normalized)\n        total reduction of the criterion brought by that feature.  It is also\n        known as the Gini importance.\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    oob_improvement_ : ndarray of shape (n_estimators,)\n        The improvement in loss on the out-of-bag samples\n        relative to the previous iteration.\n        ``oob_improvement_[0]`` is the improvement in\n        loss of the first stage over the ``init`` estimator.\n        Only available if ``subsample < 1.0``.\n\n    oob_scores_ : ndarray of shape (n_estimators,)\n        The full history of the loss values on the out-of-bag\n        samples. Only available if `subsample < 1.0`.\n\n        .. versionadded:: 1.3\n\n    oob_score_ : float\n        The last value of the loss on the out-of-bag samples. It is\n        the same as `oob_scores_[-1]`. Only available if `subsample < 1.0`.\n\n        .. versionadded:: 1.3\n\n    train_score_ : ndarray of shape (n_estimators,)\n        The i-th score ``train_score_[i]`` is the loss of the\n        model at iteration ``i`` on the in-bag sample.\n        If ``subsample == 1`` this is the loss on the training data.\n\n    init_ : estimator\n        The estimator that provides the initial predictions.\n        Set via the ``init`` argument or ``loss.init_estimator``.\n\n    estimators_ : ndarray of DecisionTreeRegressor of \\",
                "filename": "sklearn/ensemble/_gb.py",
                "start_index": 31581,
                "end_index": 42812,
                "start_line": 835,
                "end_line": 1077,
                "max_line": 1828,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            },
            {
                "code": "if not self._is_initialized():\n            # init state\n            self._init_state()\n\n            # fit initial model and initialize raw predictions\n            if self.init_ == \"zero\":\n                raw_predictions = np.zeros(\n                    shape=(X.shape[0], self._loss.K), dtype=np.float64\n                )\n            else:\n                # XXX clean this once we have a support_sample_weight tag\n                if sample_weight_is_none:\n                    self.init_.fit(X, y)\n                else:\n                    msg = (\n                        \"The initial estimator {} does not support sample \"\n                        \"weights.\".format(self.init_.__class__.__name__)\n                    )\n                    try:\n                        self.init_.fit(X, y, sample_weight=sample_weight)\n                    except TypeError as e:\n                        if \"unexpected keyword argument 'sample_weight'\" in str(e):\n                            # regular estimator without SW support\n                            raise ValueError(msg) from e\n                        else:  # regular estimator whose input checking failed\n                            raise\n                    except ValueError as e:\n                        if (\n                            \"pass parameters to specific steps of \"\n                            \"your pipeline using the \"\n                            \"stepname__parameter\"\n                            in str(e)\n                        ):  # pipeline\n                            raise ValueError(msg) from e\n                        else:  # regular estimator whose input checking failed\n                            raise\n\n                raw_predictions = self._loss.get_init_raw_predictions(X, self.init_)\n\n            begin_at_stage = 0\n\n            # The rng state must be preserved if warm_start is True\n            self._rng = check_random_state(self.random_state)\n\n        else:\n            # add more estimators to fitted model\n            # invariant: warm_start = True\n            if self.n_estimators < self.estimators_.shape[0]:\n                raise ValueError(\n                    \"n_estimators=%d must be larger or equal to \"\n                    \"estimators_.shape[0]=%d when \"\n                    \"warm_start==True\" % (self.n_estimators, self.estimators_.shape[0])\n                )\n            begin_at_stage = self.estimators_.shape[0]\n            # The requirements of _raw_predict\n            # are more constrained than fit. It accepts only CSR\n            # matrices. Finite values have already been checked in _validate_data.\n            X = check_array(\n                X,\n                dtype=DTYPE,\n                order=\"C\",\n                accept_sparse=\"csr\",\n                force_all_finite=False,\n            )\n            raw_predictions = self._raw_predict(X)\n            self._resize_state()\n\n        # fit the boosting stages",
                "filename": "sklearn/ensemble/_gb.py",
                "start_index": 16838,
                "end_index": 19751,
                "start_line": 458,
                "end_line": 525,
                "max_line": 1828,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            },
            {
                "code": "num_proc = make_pipeline(SimpleImputer(strategy=\"median\"), StandardScaler())\n\ncat_proc = make_pipeline(\n    SimpleImputer(strategy=\"constant\", fill_value=\"missing\"),\n    OneHotEncoder(handle_unknown=\"ignore\"),\n)\n\npreprocessor = make_column_transformer(\n    (num_proc, (\"feat1\", \"feat3\")), (cat_proc, (\"feat0\", \"feat2\"))\n)\n\nclf = make_pipeline(preprocessor, LogisticRegression())\nclf\n\n##############################################################################\n# Scalability and stability improvements to KMeans\n# ------------------------------------------------\n# The :class:`~sklearn.cluster.KMeans` estimator was entirely re-worked, and it\n# is now significantly faster and more stable. In addition, the Elkan algorithm\n# is now compatible with sparse matrices. The estimator uses OpenMP based\n# parallelism instead of relying on joblib, so the `n_jobs` parameter has no\n# effect anymore. For more details on how to control the number of threads,\n# please refer to our :ref:`parallelism` notes.\nimport scipy\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.cluster import KMeans\nfrom sklearn.datasets import make_blobs\nfrom sklearn.metrics import completeness_score\n\nrng = np.random.RandomState(0)\nX, y = make_blobs(random_state=rng)\nX = scipy.sparse.csr_matrix(X)\nX_train, X_test, _, y_test = train_test_split(X, y, random_state=rng)\nkmeans = KMeans(n_init=\"auto\").fit(X_train)\nprint(completeness_score(kmeans.predict(X_test), y_test))\n\n##############################################################################\n# Improvements to the histogram-based Gradient Boosting estimators\n# ----------------------------------------------------------------\n# Various improvements were made to\n# :class:`~sklearn.ensemble.HistGradientBoostingClassifier` and\n# :class:`~sklearn.ensemble.HistGradientBoostingRegressor`. On top of the\n# Poisson loss mentioned above, these estimators now support :ref:`sample\n# weights <sw_hgbdt>`. Also, an automatic early-stopping criterion was added:\n# early-stopping is enabled by default when the number of samples exceeds 10k.\n# Finally, users can now define :ref:`monotonic constraints\n# <monotonic_cst_gbdt>` to constrain the predictions based on the variations of\n# specific features. In the following example, we construct a target that is\n# generally positively correlated with the first feature, with some noise.\n# Applying monotoinc constraints allows the prediction to capture the global\n# effect of the first feature, instead of fitting the noise.\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import train_test_split\n\n# from sklearn.inspection import plot_partial_dependence\nfrom sklearn.inspection import PartialDependenceDisplay\nfrom sklearn.ensemble import HistGradientBoostingRegressor\n\nn_samples = 500\nrng = np.random.RandomState(0)\nX = rng.randn(n_samples, 2)\nnoise = rng.normal(loc=0.0, scale=0.01, size=n_samples)\ny = 5 * X[:, 0] + np.sin(10 * np.pi * X[:, 0]) - noise",
                "filename": "examples/release_highlights/plot_release_highlights_0_23_0.py",
                "start_index": 2976,
                "end_index": 5971,
                "start_line": 74,
                "end_line": 138,
                "max_line": 189,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            },
            {
                "code": "\"\"\"Gradient Boosting for regression.\n\n    This estimator builds an additive model in a forward stage-wise fashion; it\n    allows for the optimization of arbitrary differentiable loss functions. In\n    each stage a regression tree is fit on the negative gradient of the given\n    loss function.\n\n    :class:`sklearn.ensemble.HistGradientBoostingRegressor` is a much faster\n    variant of this algorithm for intermediate datasets (`n_samples >= 10_000`).\n\n    Read more in the :ref:`User Guide <gradient_boosting>`.\n\n    Parameters\n    ----------\n    loss : {'squared_error', 'absolute_error', 'huber', 'quantile'}, \\\n            default='squared_error'\n        Loss function to be optimized. 'squared_error' refers to the squared\n        error for regression. 'absolute_error' refers to the absolute error of\n        regression and is a robust loss function. 'huber' is a\n        combination of the two. 'quantile' allows quantile regression (use\n        `alpha` to specify the quantile).\n\n    learning_rate : float, default=0.1\n        Learning rate shrinks the contribution of each tree by `learning_rate`.\n        There is a trade-off between learning_rate and n_estimators.\n        Values must be in the range `[0.0, inf)`.\n\n    n_estimators : int, default=100\n        The number of boosting stages to perform. Gradient boosting\n        is fairly robust to over-fitting so a large number usually\n        results in better performance.\n        Values must be in the range `[1, inf)`.\n\n    subsample : float, default=1.0\n        The fraction of samples to be used for fitting the individual base\n        learners. If smaller than 1.0 this results in Stochastic Gradient\n        Boosting. `subsample` interacts with the parameter `n_estimators`.\n        Choosing `subsample < 1.0` leads to a reduction of variance\n        and an increase in bias.\n        Values must be in the range `(0.0, 1.0]`.\n\n    criterion : {'friedman_mse', 'squared_error'}, default='friedman_mse'\n        The function to measure the quality of a split. Supported criteria are\n        \"friedman_mse\" for the mean squared error with improvement score by\n        Friedman, \"squared_error\" for mean squared error. The default value of\n        \"friedman_mse\" is generally the best as it can provide a better\n        approximation in some cases.\n\n        .. versionadded:: 0.18\n\n    min_samples_split : int or float, default=2\n        The minimum number of samples required to split an internal node:\n\n        - If int, values must be in the range `[2, inf)`.\n        - If float, values must be in the range `(0.0, 1.0]` and `min_samples_split`\n          will be `ceil(min_samples_split * n_samples)`.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_samples_leaf : int or float, default=1\n        The minimum number of samples required to be at a leaf node.\n        A split point at any depth will only be considered if it leaves at\n        least ``min_samples_leaf`` training samples in each of the left and\n        right branches.  This may have the effect of smoothing the model,\n        especially in regression.\n\n        - If int, values must be in the range `[1, inf)`.\n        - If float, values must be in the range `(0.0, 1.0)` and `min_samples_leaf`\n          will be `ceil(min_samples_leaf * n_samples)`.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_weight_fraction_leaf : float, default=0.0\n        The minimum weighted fraction of the sum total of weights (of all\n        the input samples) required to be at a leaf node. Samples have\n        equal weight when sample_weight is not provided.\n        Values must be in the range `[0.0, 0.5]`.\n\n    max_depth : int or None, default=3\n        Maximum depth of the individual regression estimators. The maximum\n        depth limits the number of nodes in the tree. Tune this parameter\n        for best performance; the best value depends on the interaction\n        of the input variables. If None, then nodes are expanded until\n        all leaves are pure or until all leaves contain less than\n        min_samples_split samples.\n        If int, values must be in the range `[1, inf)`.\n\n    min_impurity_decrease : float, default=0.0\n        A node will be split if this split induces a decrease of the impurity\n        greater than or equal to this value.\n        Values must be in the range `[0.0, inf)`.\n\n        The weighted impurity decrease equation is the following::\n\n            N_t / N * (impurity - N_t_R / N_t * right_impurity\n                                - N_t_L / N_t * left_impurity)\n\n        where ``N`` is the total number of samples, ``N_t`` is the number of\n        samples at the current node, ``N_t_L`` is the number of samples in the\n        left child, and ``N_t_R`` is the number of samples in the right child.\n\n        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n        if ``sample_weight`` is passed.\n\n        .. versionadded:: 0.19\n\n    init : estimator or 'zero', default=None\n        An estimator object that is used to compute the initial predictions.\n        ``init`` has to provide :term:`fit` and :term:`predict`. If 'zero', the\n        initial raw predictions are set to zero. By default a\n        ``DummyEstimator`` is used, predicting either the average target value\n        (for loss='squared_error'), or a quantile for the other losses.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls the random seed given to each Tree estimator at each\n        boosting iteration.\n        In addition, it controls the random permutation of the features at\n        each split (see Notes for more details).\n        It also controls the random splitting of the training data to obtain a\n        validation set if `n_iter_no_change` is not None.\n        Pass an int for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    max_features : {'sqrt', 'log2'}, int or float, default=None\n        The number of features to consider when looking for the best split:\n\n        - If int, values must be in the range `[1, inf)`.\n        - If float, values must be in the range `(0.0, 1.0]` and the features\n          considered at each split will be `max(1, int(max_features * n_features_in_))`.\n        - If \"sqrt\", then `max_features=sqrt(n_features)`.\n        - If \"log2\", then `max_features=log2(n_features)`.\n        - If None, then `max_features=n_features`.\n\n        Choosing `max_features < n_features` leads to a reduction of variance\n        and an increase in bias.\n\n        Note: the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    alpha : float, default=0.9\n        The alpha-quantile of the huber loss function and the quantile\n        loss function. Only if ``loss='huber'`` or ``loss='quantile'``.\n        Values must be in the range `(0.0, 1.0)`.\n\n    verbose : int, default=0\n        Enable verbose output. If 1 then it prints progress and performance\n        once in a while (the more trees the lower the frequency). If greater\n        than 1 then it prints progress and performance for every tree.\n        Values must be in the range `[0, inf)`.\n\n    max_leaf_nodes : int, default=None\n        Grow trees with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        Values must be in the range `[2, inf)`.\n        If None, then unlimited number of leaf nodes.\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just erase the\n        previous solution. See :term:`the Glossary <warm_start>`.\n\n    validation_fraction : float, default=0.1\n        The proportion of training data to set aside as validation set for\n        early stopping. Values must be in the range `(0.0, 1.0)`.\n        Only used if ``n_iter_no_change`` is set to an integer.\n\n        .. versionadded:: 0.20\n\n    n_iter_no_change : int, default=None\n        ``n_iter_no_change`` is used to decide if early stopping will be used\n        to terminate training when validation score is not improving. By\n        default it is set to None to disable early stopping. If set to a\n        number, it will set aside ``validation_fraction`` size of the training\n        data as validation and terminate training when validation score is not\n        improving in all of the previous ``n_iter_no_change`` numbers of\n        iterations.\n        Values must be in the range `[1, inf)`.\n\n        .. versionadded:: 0.20\n\n    tol : float, default=1e-4\n        Tolerance for the early stopping. When the loss is not improving\n        by at least tol for ``n_iter_no_change`` iterations (if set to a\n        number), the training stops.\n        Values must be in the range `[0.0, inf)`.\n\n        .. versionadded:: 0.20\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed.\n        Values must be in the range `[0.0, inf)`.\n        See :ref:`minimal_cost_complexity_pruning` for details.\n\n        .. versionadded:: 0.22\n\n    Attributes\n    ----------\n    feature_importances_ : ndarray of shape (n_features,)\n        The impurity-based feature importances.\n        The higher, the more important the feature.\n        The importance of a feature is computed as the (normalized)\n        total reduction of the criterion brought by that feature.  It is also\n        known as the Gini importance.\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    oob_improvement_ : ndarray of shape (n_estimators,)\n        The improvement in loss on the out-of-bag samples\n        relative to the previous iteration.\n        ``oob_improvement_[0]`` is the improvement in\n        loss of the first stage over the ``init`` estimator.\n        Only available if ``subsample < 1.0``.\n\n    oob_scores_ : ndarray of shape (n_estimators,)\n        The full history of the loss values on the out-of-bag\n        samples. Only available if `subsample < 1.0`.\n\n        .. versionadded:: 1.3\n\n    oob_score_ : float\n        The last value of the loss on the out-of-bag samples. It is\n        the same as `oob_scores_[-1]`. Only available if `subsample < 1.0`.\n\n        .. versionadded:: 1.3\n\n    train_score_ : ndarray of shape (n_estimators,)\n        The i-th score ``train_score_[i]`` is the loss of the\n        model at iteration ``i`` on the in-bag sample.\n        If ``subsample == 1`` this is the loss on the training data.\n\n    init_ : estimator\n        The estimator that provides the initial predictions.\n        Set via the ``init`` argument or ``loss.init_estimator``.\n\n    estimators_ : ndarray of DecisionTreeRegressor of shape (n_estimators, 1)\n        The collection of fitted sub-estimators.\n\n    n_estimators_ : int\n        The number of estimators as selected by early stopping (if\n        ``n_iter_no_change`` is specified). Otherwise it is set to\n        ``n_estimators``.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    max_features_ : int\n        The inferred value of max_features.\n\n    See Also\n    --------\n    HistGradientBoostingRegressor : Histogram-based Gradient Boosting\n        Classification Tree.\n    sklearn.tree.DecisionTreeRegressor : A decision tree regressor.\n    sklearn.ensemble.RandomForestRegressor : A random forest regressor.\n\n    Notes\n    -----\n    The features are always randomly permuted at each split. Therefore,\n    the best found split may vary, even with the same training data and\n    ``max_features=n_features``, if the improvement of the criterion is\n    identical for several splits enumerated during the search of the best\n    split. To obtain a deterministic behaviour during fitting,\n    ``random_state`` has to be fixed.\n\n    References\n    ----------\n    J. Friedman, Greedy Function Approximation: A Gradient Boosting\n    Machine, The Annals of Statistics, Vol. 29, No. 5, 2001.\n\n    J. Friedman, Stochastic Gradient Boosting, 1999\n\n    T. Hastie, R. Tibshirani and J. Friedman.\n    Elements of Statistical Learning Ed. 2, Springer, 2009.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_regression\n    >>> from sklearn.ensemble import GradientBoostingRegressor\n    >>> from sklearn.model_selection import train_test_split\n    >>> X, y = make_regression(random_state=0)\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...     X, y, random_state=0)\n    >>> reg = GradientBoostingRegressor(random_state=0)\n    >>> reg.fit(X_train, y_train)\n    GradientBoostingRegressor(random_state=0)\n    >>> reg.predict(X_test[1:2])\n    array([-61...])\n    >>> reg.score(X_test, y_test)\n    0.4...\n    \"\"\"",
                "filename": "sklearn/ensemble/_gb.py",
                "start_index": 54427,
                "end_index": 67884,
                "start_line": 1398,
                "end_line": 1824,
                "max_line": 1828,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            },
            {
                "code": "gbdt_no_cst = HistGradientBoostingRegressor().fit(X, y)\ngbdt_cst = HistGradientBoostingRegressor(monotonic_cst=[1, 0]).fit(X, y)\n\n# plot_partial_dependence has been removed in version 1.2. From 1.2, use\n# PartialDependenceDisplay instead.\n# disp = plot_partial_dependence(\ndisp = PartialDependenceDisplay.from_estimator(\n    gbdt_no_cst,\n    X,\n    features=[0],\n    feature_names=[\"feature 0\"],\n    line_kw={\"linewidth\": 4, \"label\": \"unconstrained\", \"color\": \"tab:blue\"},\n)\n# plot_partial_dependence(\nPartialDependenceDisplay.from_estimator(\n    gbdt_cst,\n    X,\n    features=[0],\n    line_kw={\"linewidth\": 4, \"label\": \"constrained\", \"color\": \"tab:orange\"},\n    ax=disp.axes_,\n)\ndisp.axes_[0, 0].plot(\n    X[:, 0], y, \"o\", alpha=0.5, zorder=-1, label=\"samples\", color=\"tab:green\"\n)\ndisp.axes_[0, 0].set_ylim(-3, 3)\ndisp.axes_[0, 0].set_xlim(-1, 1)\nplt.legend()\nplt.show()\n\n##############################################################################\n# Sample-weight support for Lasso and ElasticNet\n# ----------------------------------------------\n# The two linear regressors :class:`~sklearn.linear_model.Lasso` and\n# :class:`~sklearn.linear_model.ElasticNet` now support sample weights.\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import make_regression\nfrom sklearn.linear_model import Lasso\nimport numpy as np\n\nn_samples, n_features = 1000, 20\nrng = np.random.RandomState(0)\nX, y = make_regression(n_samples, n_features, random_state=rng)\nsample_weight = rng.rand(n_samples)\nX_train, X_test, y_train, y_test, sw_train, sw_test = train_test_split(\n    X, y, sample_weight, random_state=rng\n)\nreg = Lasso()\nreg.fit(X_train, y_train, sample_weight=sw_train)\nprint(reg.score(X_test, y_test, sw_test))",
                "filename": "examples/release_highlights/plot_release_highlights_0_23_0.py",
                "start_index": 5973,
                "end_index": 7708,
                "start_line": 140,
                "end_line": 189,
                "max_line": 189,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            },
            {
                "code": "rsh.best_params_\n\n##############################################################################\n# Native support for categorical features in HistGradientBoosting estimators\n# --------------------------------------------------------------------------\n# :class:`~sklearn.ensemble.HistGradientBoostingClassifier` and\n# :class:`~sklearn.ensemble.HistGradientBoostingRegressor` now have native\n# support for categorical features: they can consider splits on non-ordered,\n# categorical data. Read more in the :ref:`User Guide\n# <categorical_support_gbdt>`.\n#\n# .. figure:: ../ensemble/images/sphx_glr_plot_gradient_boosting_categorical_001.png\n#   :target: ../ensemble/plot_gradient_boosting_categorical.html\n#   :align: center\n#\n# The plot shows that the new native support for categorical features leads to\n# fitting times that are comparable to models where the categories are treated\n# as ordered quantities, i.e. simply ordinal-encoded. Native support is also\n# more expressive than both one-hot encoding and ordinal encoding. However, to\n# use the new `categorical_features` parameter, it is still required to\n# preprocess the data within a pipeline as demonstrated in this :ref:`example\n# <sphx_glr_auto_examples_ensemble_plot_gradient_boosting_categorical.py>`.\n\n##############################################################################\n# Improved performances of HistGradientBoosting estimators\n# --------------------------------------------------------\n# The memory footprint of :class:`ensemble.HistGradientBoostingRegressor` and\n# :class:`ensemble.HistGradientBoostingClassifier` has been significantly\n# improved during calls to `fit`. In addition, histogram initialization is now\n# done in parallel which results in slight speed improvements.\n# See more in the `Benchmark page\n# <https://scikit-learn.org/scikit-learn-benchmarks/>`_.\n\n##############################################################################\n# New self-training meta-estimator\n# --------------------------------\n# A new self-training implementation, based on `Yarowski's algorithm\n# <https://doi.org/10.3115/981658.981684>`_ can now be used with any\n# classifier that implements :term:`predict_proba`. The sub-classifier\n# will behave as a\n# semi-supervised classifier, allowing it to learn from unlabeled data.\n# Read more in the :ref:`User guide <self_training>`.\n\nimport numpy as np\nfrom sklearn import datasets\nfrom sklearn.semi_supervised import SelfTrainingClassifier\nfrom sklearn.svm import SVC\n\nrng = np.random.RandomState(42)\niris = datasets.load_iris()\nrandom_unlabeled_points = rng.rand(iris.target.shape[0]) < 0.3\niris.target[random_unlabeled_points] = -1\nsvc = SVC(probability=True, gamma=\"auto\")\nself_training_model = SelfTrainingClassifier(svc)\nself_training_model.fit(iris.data, iris.target)\n\n##############################################################################\n# New SequentialFeatureSelector transformer\n# -----------------------------------------",
                "filename": "examples/release_highlights/plot_release_highlights_0_24_0.py",
                "start_index": 2991,
                "end_index": 5952,
                "start_line": 77,
                "end_line": 229,
                "max_line": 264,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            },
            {
                "code": "# datasets with a large number of training samples (> 10,000) for which the SGD\n# variant can be several orders of magnitude faster. Please check this\n# :ref:`example\n# <sphx_glr_auto_examples_miscellaneous_plot_anomaly_comparison.py>` to see how\n# it's used, and the :ref:`User Guide <sgd_online_one_class_svm>` for more\n# details.\n#\n# .. figure:: ../miscellaneous/images/sphx_glr_plot_anomaly_comparison_001.png\n#    :target: ../miscellaneous/plot_anomaly_comparison.html\n#    :align: center\n\n##############################################################################\n# Histogram-based Gradient Boosting Models are now stable\n# --------------------------------------------------------------------------\n# :class:`~sklearn.ensemble.HistGradientBoostingRegressor` and\n# :class:`~ensemble.HistGradientBoostingClassifier` are no longer experimental\n# and can simply be imported and used as::\n#\n#     from sklearn.ensemble import HistGradientBoostingClassifier\n\n##############################################################################\n# New documentation improvements\n# ------------------------------\n# This release includes many documentation improvements. Out of over 2100\n# merged pull requests, about 800 of them are improvements to our\n# documentation.",
                "filename": "examples/release_highlights/plot_release_highlights_1_0_0.py",
                "start_index": 8993,
                "end_index": 10257,
                "start_line": 216,
                "end_line": 241,
                "max_line": 241,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            },
            {
                "code": "from sklearn.pipeline import make_pipeline\n\nX, y = make_classification(random_state=0)\n\nwith TemporaryDirectory(prefix=\"sklearn_cache_\") as tmpdir:\n    estimator = make_pipeline(\n        KNeighborsTransformer(n_neighbors=10, mode=\"distance\"),\n        Isomap(n_neighbors=10, metric=\"precomputed\"),\n        memory=tmpdir,\n    )\n    estimator.fit(X)\n\n    # We can decrease the number of neighbors and the graph will not be\n    # recomputed.\n    estimator.set_params(isomap__n_neighbors=5)\n    estimator.fit(X)\n\n# %%\n# KNN Based Imputation\n# ------------------------------------\n# We now support imputation for completing missing values using k-Nearest\n# Neighbors.\n#\n# Each sample's missing values are imputed using the mean value from\n# ``n_neighbors`` nearest neighbors found in the training set. Two samples are\n# close if the features that neither is missing are close.\n# By default, a euclidean distance metric\n# that supports missing values,\n# :func:`~sklearn.metrics.pairwise.nan_euclidean_distances`, is used to find the nearest\n# neighbors.\n#\n# Read more in the :ref:`User Guide <knnimpute>`.\n\nfrom sklearn.impute import KNNImputer\n\nX = [[1, 2, np.nan], [3, 4, 3], [np.nan, 6, 5], [8, 8, 7]]\nimputer = KNNImputer(n_neighbors=2)\nprint(imputer.fit_transform(X))\n\n# %%\n# Tree pruning\n# ------------\n#\n# It is now possible to prune most tree-based estimators once the trees are\n# built. The pruning is based on minimal cost-complexity. Read more in the\n# :ref:`User Guide <minimal_cost_complexity_pruning>` for details.\n\nX, y = make_classification(random_state=0)\n\nrf = RandomForestClassifier(random_state=0, ccp_alpha=0).fit(X, y)\nprint(\n    \"Average number of nodes without pruning {:.1f}\".format(\n        np.mean([e.tree_.node_count for e in rf.estimators_])\n    )\n)\n\nrf = RandomForestClassifier(random_state=0, ccp_alpha=0.05).fit(X, y)\nprint(\n    \"Average number of nodes with pruning {:.1f}\".format(\n        np.mean([e.tree_.node_count for e in rf.estimators_])\n    )\n)\n\n# %%\n# Retrieve dataframes from OpenML\n# -------------------------------\n# :func:`datasets.fetch_openml` can now return pandas dataframe and thus\n# properly handle datasets with heterogeneous data:\n\nfrom sklearn.datasets import fetch_openml\n\ntitanic = fetch_openml(\"titanic\", version=1, as_frame=True, parser=\"pandas\")\nprint(titanic.data.head()[[\"pclass\", \"embarked\"]])\n\n# %%\n# Checking scikit-learn compatibility of an estimator\n# ---------------------------------------------------\n# Developers can check the compatibility of their scikit-learn compatible\n# estimators using :func:`~utils.estimator_checks.check_estimator`. For\n# instance, the ``check_estimator(LinearSVC())`` passes.\n#\n# We now provide a ``pytest`` specific decorator which allows ``pytest``\n# to run all checks independently and report the checks that are failing.\n#\n# ..note::\n#   This entry was slightly updated in version 0.24, where passing classes\n#   isn't supported anymore: pass instances instead.",
                "filename": "examples/release_highlights/plot_release_highlights_0_22_0.py",
                "start_index": 5945,
                "end_index": 8900,
                "start_line": 85,
                "end_line": 248,
                "max_line": 282,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            },
            {
                "code": "\"\"\"Base class for histogram-based gradient boosting estimators.\"\"\"\n\n    _parameter_constraints: dict = {\n        \"loss\": [BaseLoss],\n        \"learning_rate\": [Interval(Real, 0, None, closed=\"neither\")],\n        \"max_iter\": [Interval(Integral, 1, None, closed=\"left\")],\n        \"max_leaf_nodes\": [Interval(Integral, 2, None, closed=\"left\"), None],\n        \"max_depth\": [Interval(Integral, 1, None, closed=\"left\"), None],\n        \"min_samples_leaf\": [Interval(Integral, 1, None, closed=\"left\")],\n        \"l2_regularization\": [Interval(Real, 0, None, closed=\"left\")],\n        \"monotonic_cst\": [\"array-like\", dict, None],\n        \"interaction_cst\": [\n            list,\n            tuple,\n            StrOptions({\"pairwise\", \"no_interactions\"}),\n            None,\n        ],\n        \"n_iter_no_change\": [Interval(Integral, 1, None, closed=\"left\")],\n        \"validation_fraction\": [\n            Interval(RealNotInt, 0, 1, closed=\"neither\"),\n            Interval(Integral, 1, None, closed=\"left\"),\n            None,\n        ],\n        \"tol\": [Interval(Real, 0, None, closed=\"left\")],\n        \"max_bins\": [Interval(Integral, 2, 255, closed=\"both\")],\n        \"categorical_features\": [\"array-like\", None],\n        \"warm_start\": [\"boolean\"],\n        \"early_stopping\": [StrOptions({\"auto\"}), \"boolean\"],\n        \"scoring\": [str, callable, None],\n        \"verbose\": [\"verbose\"],\n        \"random_state\": [\"random_state\"],\n    }\n\n    @abstractmethod\n    def __init__(\n        self,\n        loss,\n        *,\n        learning_rate,\n        max_iter,\n        max_leaf_nodes,\n        max_depth,\n        min_samples_leaf,\n        l2_regularization,\n        max_bins,\n        categorical_features,\n        monotonic_cst,\n        interaction_cst,\n        warm_start,\n        early_stopping,\n        scoring,\n        validation_fraction,\n        n_iter_no_change,\n        tol,\n        verbose,\n        random_state,\n    ):\n        self.loss = loss\n        self.learning_rate = learning_rate\n        self.max_iter = max_iter\n        self.max_leaf_nodes = max_leaf_nodes\n        self.max_depth = max_depth\n        self.min_samples_leaf = min_samples_leaf\n        self.l2_regularization = l2_regularization\n        self.max_bins = max_bins\n        self.monotonic_cst = monotonic_cst\n        self.interaction_cst = interaction_cst\n        self.categorical_features = categorical_features\n        self.warm_start = warm_start\n        self.early_stopping = early_stopping\n        self.scoring = scoring\n        self.validation_fraction = validation_fraction\n        self.n_iter_no_change = n_iter_no_change\n        self.tol = tol\n        self.verbose = verbose\n        self.random_state = random_state",
                "filename": "sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py",
                "start_index": 2803,
                "end_index": 5475,
                "start_line": 88,
                "end_line": 163,
                "max_line": 2009,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "sklearn/ensemble/_gb.py": [
                {
                    "chunk": {
                        "code": "if not self._is_initialized():\n            # init state\n            self._init_state()\n\n            # fit initial model and initialize raw predictions\n            if self.init_ == \"zero\":\n                raw_predictions = np.zeros(\n                    shape=(X.shape[0], self._loss.K), dtype=np.float64\n                )\n            else:\n                # XXX clean this once we have a support_sample_weight tag\n                if sample_weight_is_none:\n                    self.init_.fit(X, y)\n                else:\n                    msg = (\n                        \"The initial estimator {} does not support sample \"\n                        \"weights.\".format(self.init_.__class__.__name__)\n                    )\n                    try:\n                        self.init_.fit(X, y, sample_weight=sample_weight)\n                    except TypeError as e:\n                        if \"unexpected keyword argument 'sample_weight'\" in str(e):\n                            # regular estimator without SW support\n                            raise ValueError(msg) from e\n                        else:  # regular estimator whose input checking failed\n                            raise\n                    except ValueError as e:\n                        if (\n                            \"pass parameters to specific steps of \"\n                            \"your pipeline using the \"\n                            \"stepname__parameter\"\n                            in str(e)\n                        ):  # pipeline\n                            raise ValueError(msg) from e\n                        else:  # regular estimator whose input checking failed\n                            raise\n\n                raw_predictions = self._loss.get_init_raw_predictions(X, self.init_)\n\n            begin_at_stage = 0\n\n            # The rng state must be preserved if warm_start is True\n            self._rng = check_random_state(self.random_state)\n\n        else:\n            # add more estimators to fitted model\n            # invariant: warm_start = True\n            if self.n_estimators < self.estimators_.shape[0]:\n                raise ValueError(\n                    \"n_estimators=%d must be larger or equal to \"\n                    \"estimators_.shape[0]=%d when \"\n                    \"warm_start==True\" % (self.n_estimators, self.estimators_.shape[0])\n                )\n            begin_at_stage = self.estimators_.shape[0]\n            # The requirements of _raw_predict\n            # are more constrained than fit. It accepts only CSR\n            # matrices. Finite values have already been checked in _validate_data.\n            X = check_array(\n                X,\n                dtype=DTYPE,\n                order=\"C\",\n                accept_sparse=\"csr\",\n                force_all_finite=False,\n            )\n            raw_predictions = self._raw_predict(X)\n            self._resize_state()\n\n        # fit the boosting stages",
                        "filename": "sklearn/ensemble/_gb.py",
                        "start_index": 16838,
                        "end_index": 19751,
                        "start_line": 458,
                        "end_line": 525,
                        "max_line": 1828,
                        "git_instance": "github",
                        "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains logic for fitting the initial estimator and handling the case when sample weights are not supported, which is directly related to the issue."
                },
                {
                    "chunk": {
                        "code": "@_fit_context(\n        # GradientBoosting*.init is not validated yet\n        prefer_skip_nested_validation=False\n    )",
                        "filename": "sklearn/ensemble/_gb.py",
                        "start_index": 13245,
                        "end_index": 13363,
                        "start_line": 370,
                        "end_line": 1782,
                        "max_line": 1828,
                        "git_instance": "github",
                        "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet includes a decorator that might be involved in the initialization process of the GradientBoosting estimator, which could be relevant to the issue."
                },
                {
                    "chunk": {
                        "code": "\"\"\"Gradient Boosting for classification.\n\n    This algorithm builds an additive model in a forward stage-wise fashion; it\n    allows for the optimization of arbitrary differentiable loss functions. In\n    each stage ``n_classes_`` regression trees are fit on the negative gradient\n    of the loss function, e.g. binary or multiclass log loss. Binary\n    classification is a special case where only a single regression tree is\n    induced.\n\n    :class:`sklearn.ensemble.HistGradientBoostingClassifier` is a much faster\n    variant of this algorithm for intermediate datasets (`n_samples >= 10_000`).\n\n    Read more in the :ref:`User Guide <gradient_boosting>`.\n\n    Parameters\n    ----------\n    loss : {'log_loss', 'exponential'}, default='log_loss'\n        The loss function to be optimized. 'log_loss' refers to binomial and\n        multinomial deviance, the same as used in logistic regression.\n        It is a good choice for classification with probabilistic outputs.\n        For loss 'exponential', gradient boosting recovers the AdaBoost algorithm.\n\n    learning_rate : float, default=0.1\n        Learning rate shrinks the contribution of each tree by `learning_rate`.\n        There is a trade-off between learning_rate and n_estimators.\n        Values must be in the range `[0.0, inf)`.\n\n    n_estimators : int, default=100\n        The number of boosting stages to perform. Gradient boosting\n        is fairly robust to over-fitting so a large number usually\n        results in better performance.\n        Values must be in the range `[1, inf)`.\n\n    subsample : float, default=1.0\n        The fraction of samples to be used for fitting the individual base\n        learners. If smaller than 1.0 this results in Stochastic Gradient\n        Boosting. `subsample` interacts with the parameter `n_estimators`.\n        Choosing `subsample < 1.0` leads to a reduction of variance\n        and an increase in bias.\n        Values must be in the range `(0.0, 1.0]`.\n\n    criterion : {'friedman_mse', 'squared_error'}, default='friedman_mse'\n        The function to measure the quality of a split. Supported criteria are\n        'friedman_mse' for the mean squared error with improvement score by\n        Friedman, 'squared_error' for mean squared error. The default value of\n        'friedman_mse' is generally the best as it can provide a better\n        approximation in some cases.\n\n        .. versionadded:: 0.18\n\n    min_samples_split : int or float, default=2\n        The minimum number of samples required to split an internal node:\n\n        - If int, values must be in the range `[2, inf)`.\n        - If float, values must be in the range `(0.0, 1.0]` and `min_samples_split`\n          will be `ceil(min_samples_split * n_samples)`.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_samples_leaf : int or float, default=1\n        The minimum number of samples required to be at a leaf node.\n        A split point at any depth will only be considered if it leaves at\n        least ``min_samples_leaf`` training samples in each of the left and\n        right branches.  This may have the effect of smoothing the model,\n        especially in regression.\n\n        - If int, values must be in the range `[1, inf)`.\n        - If float, values must be in the range `(0.0, 1.0)` and `min_samples_leaf`\n          will be `ceil(min_samples_leaf * n_samples)`.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_weight_fraction_leaf : float, default=0.0\n        The minimum weighted fraction of the sum total of weights (of all\n        the input samples) required to be at a leaf node. Samples have\n        equal weight when sample_weight is not provided.\n        Values must be in the range `[0.0, 0.5]`.\n\n    max_depth : int or None, default=3\n        Maximum depth of the individual regression estimators. The maximum\n        depth limits the number of nodes in the tree. Tune this parameter\n        for best performance; the best value depends on the interaction\n        of the input variables. If None, then nodes are expanded until\n        all leaves are pure or until all leaves contain less than\n        min_samples_split samples.\n        If int, values must be in the range `[1, inf)`.\n\n    min_impurity_decrease : float, default=0.0\n        A node will be split if this split induces a decrease of the impurity\n        greater than or equal to this value.\n        Values must be in the range `[0.0, inf)`.\n\n        The weighted impurity decrease equation is the following::\n\n            N_t / N * (impurity - N_t_R / N_t * right_impurity\n                                - N_t_L / N_t * left_impurity)\n\n        where ``N`` is the total number of samples, ``N_t`` is the number of\n        samples at the current node, ``N_t_L`` is the number of samples in the\n        left child, and ``N_t_R`` is the number of samples in the right child.\n\n        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n        if ``sample_weight`` is passed.\n\n        .. versionadded:: 0.19\n\n    init : estimator or 'zero', default=None\n        An estimator object that is used to compute the initial predictions.\n        ``init`` has to provide :term:`fit` and :term:`predict_proba`. If\n        'zero', the initial raw predictions are set to zero. By default, a\n        ``DummyEstimator`` predicting the classes priors is used.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls the random seed given to each Tree estimator at each\n        boosting iteration.\n        In addition, it controls the random permutation of the features at\n        each split (see Notes for more details).\n        It also controls the random splitting of the training data to obtain a\n        validation set if `n_iter_no_change` is not None.\n        Pass an int for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    max_features : {'sqrt', 'log2'}, int or float, default=None\n        The number of features to consider when looking for the best split:\n\n        - If int, values must be in the range `[1, inf)`.\n        - If float, values must be in the range `(0.0, 1.0]` and the features\n          considered at each split will be `max(1, int(max_features * n_features_in_))`.\n        - If 'sqrt', then `max_features=sqrt(n_features)`.\n        - If 'log2', then `max_features=log2(n_features)`.\n        - If None, then `max_features=n_features`.\n\n        Choosing `max_features < n_features` leads to a reduction of variance\n        and an increase in bias.\n\n        Note: the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    verbose : int, default=0\n        Enable verbose output. If 1 then it prints progress and performance\n        once in a while (the more trees the lower the frequency). If greater\n        than 1 then it prints progress and performance for every tree.\n        Values must be in the range `[0, inf)`.\n\n    max_leaf_nodes : int, default=None\n        Grow trees with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        Values must be in the range `[2, inf)`.\n        If `None`, then unlimited number of leaf nodes.\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just erase the\n        previous solution. See :term:`the Glossary <warm_start>`.\n\n    validation_fraction : float, default=0.1\n        The proportion of training data to set aside as validation set for\n        early stopping. Values must be in the range `(0.0, 1.0)`.\n        Only used if ``n_iter_no_change`` is set to an integer.\n\n        .. versionadded:: 0.20\n\n    n_iter_no_change : int, default=None\n        ``n_iter_no_change`` is used to decide if early stopping will be used\n        to terminate training when validation score is not improving. By\n        default it is set to None to disable early stopping. If set to a\n        number, it will set aside ``validation_fraction`` size of the training\n        data as validation and terminate training when validation score is not\n        improving in all of the previous ``n_iter_no_change`` numbers of\n        iterations. The split is stratified.\n        Values must be in the range `[1, inf)`.\n\n        .. versionadded:: 0.20\n\n    tol : float, default=1e-4\n        Tolerance for the early stopping. When the loss is not improving\n        by at least tol for ``n_iter_no_change`` iterations (if set to a\n        number), the training stops.\n        Values must be in the range `[0.0, inf)`.\n\n        .. versionadded:: 0.20\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed.\n        Values must be in the range `[0.0, inf)`.\n        See :ref:`minimal_cost_complexity_pruning` for details.\n\n        .. versionadded:: 0.22\n\n    Attributes\n    ----------\n    n_estimators_ : int\n        The number of estimators as selected by early stopping (if\n        ``n_iter_no_change`` is specified). Otherwise it is set to\n        ``n_estimators``.\n\n        .. versionadded:: 0.20\n\n    feature_importances_ : ndarray of shape (n_features,)\n        The impurity-based feature importances.\n        The higher, the more important the feature.\n        The importance of a feature is computed as the (normalized)\n        total reduction of the criterion brought by that feature.  It is also\n        known as the Gini importance.\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    oob_improvement_ : ndarray of shape (n_estimators,)\n        The improvement in loss on the out-of-bag samples\n        relative to the previous iteration.\n        ``oob_improvement_[0]`` is the improvement in\n        loss of the first stage over the ``init`` estimator.\n        Only available if ``subsample < 1.0``.\n\n    oob_scores_ : ndarray of shape (n_estimators,)\n        The full history of the loss values on the out-of-bag\n        samples. Only available if `subsample < 1.0`.\n\n        .. versionadded:: 1.3\n\n    oob_score_ : float\n        The last value of the loss on the out-of-bag samples. It is\n        the same as `oob_scores_[-1]`. Only available if `subsample < 1.0`.\n\n        .. versionadded:: 1.3\n\n    train_score_ : ndarray of shape (n_estimators,)\n        The i-th score ``train_score_[i]`` is the loss of the\n        model at iteration ``i`` on the in-bag sample.\n        If ``subsample == 1`` this is the loss on the training data.\n\n    init_ : estimator\n        The estimator that provides the initial predictions.\n        Set via the ``init`` argument or ``loss.init_estimator``.\n\n    estimators_ : ndarray of DecisionTreeRegressor of \\",
                        "filename": "sklearn/ensemble/_gb.py",
                        "start_index": 31581,
                        "end_index": 42812,
                        "start_line": 835,
                        "end_line": 1077,
                        "max_line": 1828,
                        "git_instance": "github",
                        "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the documentation and parameters for the Gradient Boosting classifier, including the 'init' parameter, which is relevant to the issue."
                },
                {
                    "chunk": {
                        "code": "\"\"\"Gradient Boosting for regression.\n\n    This estimator builds an additive model in a forward stage-wise fashion; it\n    allows for the optimization of arbitrary differentiable loss functions. In\n    each stage a regression tree is fit on the negative gradient of the given\n    loss function.\n\n    :class:`sklearn.ensemble.HistGradientBoostingRegressor` is a much faster\n    variant of this algorithm for intermediate datasets (`n_samples >= 10_000`).\n\n    Read more in the :ref:`User Guide <gradient_boosting>`.\n\n    Parameters\n    ----------\n    loss : {'squared_error', 'absolute_error', 'huber', 'quantile'}, \\\n            default='squared_error'\n        Loss function to be optimized. 'squared_error' refers to the squared\n        error for regression. 'absolute_error' refers to the absolute error of\n        regression and is a robust loss function. 'huber' is a\n        combination of the two. 'quantile' allows quantile regression (use\n        `alpha` to specify the quantile).\n\n    learning_rate : float, default=0.1\n        Learning rate shrinks the contribution of each tree by `learning_rate`.\n        There is a trade-off between learning_rate and n_estimators.\n        Values must be in the range `[0.0, inf)`.\n\n    n_estimators : int, default=100\n        The number of boosting stages to perform. Gradient boosting\n        is fairly robust to over-fitting so a large number usually\n        results in better performance.\n        Values must be in the range `[1, inf)`.\n\n    subsample : float, default=1.0\n        The fraction of samples to be used for fitting the individual base\n        learners. If smaller than 1.0 this results in Stochastic Gradient\n        Boosting. `subsample` interacts with the parameter `n_estimators`.\n        Choosing `subsample < 1.0` leads to a reduction of variance\n        and an increase in bias.\n        Values must be in the range `(0.0, 1.0]`.\n\n    criterion : {'friedman_mse', 'squared_error'}, default='friedman_mse'\n        The function to measure the quality of a split. Supported criteria are\n        \"friedman_mse\" for the mean squared error with improvement score by\n        Friedman, \"squared_error\" for mean squared error. The default value of\n        \"friedman_mse\" is generally the best as it can provide a better\n        approximation in some cases.\n\n        .. versionadded:: 0.18\n\n    min_samples_split : int or float, default=2\n        The minimum number of samples required to split an internal node:\n\n        - If int, values must be in the range `[2, inf)`.\n        - If float, values must be in the range `(0.0, 1.0]` and `min_samples_split`\n          will be `ceil(min_samples_split * n_samples)`.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_samples_leaf : int or float, default=1\n        The minimum number of samples required to be at a leaf node.\n        A split point at any depth will only be considered if it leaves at\n        least ``min_samples_leaf`` training samples in each of the left and\n        right branches.  This may have the effect of smoothing the model,\n        especially in regression.\n\n        - If int, values must be in the range `[1, inf)`.\n        - If float, values must be in the range `(0.0, 1.0)` and `min_samples_leaf`\n          will be `ceil(min_samples_leaf * n_samples)`.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_weight_fraction_leaf : float, default=0.0\n        The minimum weighted fraction of the sum total of weights (of all\n        the input samples) required to be at a leaf node. Samples have\n        equal weight when sample_weight is not provided.\n        Values must be in the range `[0.0, 0.5]`.\n\n    max_depth : int or None, default=3\n        Maximum depth of the individual regression estimators. The maximum\n        depth limits the number of nodes in the tree. Tune this parameter\n        for best performance; the best value depends on the interaction\n        of the input variables. If None, then nodes are expanded until\n        all leaves are pure or until all leaves contain less than\n        min_samples_split samples.\n        If int, values must be in the range `[1, inf)`.\n\n    min_impurity_decrease : float, default=0.0\n        A node will be split if this split induces a decrease of the impurity\n        greater than or equal to this value.\n        Values must be in the range `[0.0, inf)`.\n\n        The weighted impurity decrease equation is the following::\n\n            N_t / N * (impurity - N_t_R / N_t * right_impurity\n                                - N_t_L / N_t * left_impurity)\n\n        where ``N`` is the total number of samples, ``N_t`` is the number of\n        samples at the current node, ``N_t_L`` is the number of samples in the\n        left child, and ``N_t_R`` is the number of samples in the right child.\n\n        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n        if ``sample_weight`` is passed.\n\n        .. versionadded:: 0.19\n\n    init : estimator or 'zero', default=None\n        An estimator object that is used to compute the initial predictions.\n        ``init`` has to provide :term:`fit` and :term:`predict`. If 'zero', the\n        initial raw predictions are set to zero. By default a\n        ``DummyEstimator`` is used, predicting either the average target value\n        (for loss='squared_error'), or a quantile for the other losses.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls the random seed given to each Tree estimator at each\n        boosting iteration.\n        In addition, it controls the random permutation of the features at\n        each split (see Notes for more details).\n        It also controls the random splitting of the training data to obtain a\n        validation set if `n_iter_no_change` is not None.\n        Pass an int for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    max_features : {'sqrt', 'log2'}, int or float, default=None\n        The number of features to consider when looking for the best split:\n\n        - If int, values must be in the range `[1, inf)`.\n        - If float, values must be in the range `(0.0, 1.0]` and the features\n          considered at each split will be `max(1, int(max_features * n_features_in_))`.\n        - If \"sqrt\", then `max_features=sqrt(n_features)`.\n        - If \"log2\", then `max_features=log2(n_features)`.\n        - If None, then `max_features=n_features`.\n\n        Choosing `max_features < n_features` leads to a reduction of variance\n        and an increase in bias.\n\n        Note: the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    alpha : float, default=0.9\n        The alpha-quantile of the huber loss function and the quantile\n        loss function. Only if ``loss='huber'`` or ``loss='quantile'``.\n        Values must be in the range `(0.0, 1.0)`.\n\n    verbose : int, default=0\n        Enable verbose output. If 1 then it prints progress and performance\n        once in a while (the more trees the lower the frequency). If greater\n        than 1 then it prints progress and performance for every tree.\n        Values must be in the range `[0, inf)`.\n\n    max_leaf_nodes : int, default=None\n        Grow trees with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        Values must be in the range `[2, inf)`.\n        If None, then unlimited number of leaf nodes.\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just erase the\n        previous solution. See :term:`the Glossary <warm_start>`.\n\n    validation_fraction : float, default=0.1\n        The proportion of training data to set aside as validation set for\n        early stopping. Values must be in the range `(0.0, 1.0)`.\n        Only used if ``n_iter_no_change`` is set to an integer.\n\n        .. versionadded:: 0.20\n\n    n_iter_no_change : int, default=None\n        ``n_iter_no_change`` is used to decide if early stopping will be used\n        to terminate training when validation score is not improving. By\n        default it is set to None to disable early stopping. If set to a\n        number, it will set aside ``validation_fraction`` size of the training\n        data as validation and terminate training when validation score is not\n        improving in all of the previous ``n_iter_no_change`` numbers of\n        iterations.\n        Values must be in the range `[1, inf)`.\n\n        .. versionadded:: 0.20\n\n    tol : float, default=1e-4\n        Tolerance for the early stopping. When the loss is not improving\n        by at least tol for ``n_iter_no_change`` iterations (if set to a\n        number), the training stops.\n        Values must be in the range `[0.0, inf)`.\n\n        .. versionadded:: 0.20\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed.\n        Values must be in the range `[0.0, inf)`.\n        See :ref:`minimal_cost_complexity_pruning` for details.\n\n        .. versionadded:: 0.22\n\n    Attributes\n    ----------\n    feature_importances_ : ndarray of shape (n_features,)\n        The impurity-based feature importances.\n        The higher, the more important the feature.\n        The importance of a feature is computed as the (normalized)\n        total reduction of the criterion brought by that feature.  It is also\n        known as the Gini importance.\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    oob_improvement_ : ndarray of shape (n_estimators,)\n        The improvement in loss on the out-of-bag samples\n        relative to the previous iteration.\n        ``oob_improvement_[0]`` is the improvement in\n        loss of the first stage over the ``init`` estimator.\n        Only available if ``subsample < 1.0``.\n\n    oob_scores_ : ndarray of shape (n_estimators,)\n        The full history of the loss values on the out-of-bag\n        samples. Only available if `subsample < 1.0`.\n\n        .. versionadded:: 1.3\n\n    oob_score_ : float\n        The last value of the loss on the out-of-bag samples. It is\n        the same as `oob_scores_[-1]`. Only available if `subsample < 1.0`.\n\n        .. versionadded:: 1.3\n\n    train_score_ : ndarray of shape (n_estimators,)\n        The i-th score ``train_score_[i]`` is the loss of the\n        model at iteration ``i`` on the in-bag sample.\n        If ``subsample == 1`` this is the loss on the training data.\n\n    init_ : estimator\n        The estimator that provides the initial predictions.\n        Set via the ``init`` argument or ``loss.init_estimator``.\n\n    estimators_ : ndarray of DecisionTreeRegressor of shape (n_estimators, 1)\n        The collection of fitted sub-estimators.\n\n    n_estimators_ : int\n        The number of estimators as selected by early stopping (if\n        ``n_iter_no_change`` is specified). Otherwise it is set to\n        ``n_estimators``.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    max_features_ : int\n        The inferred value of max_features.\n\n    See Also\n    --------\n    HistGradientBoostingRegressor : Histogram-based Gradient Boosting\n        Classification Tree.\n    sklearn.tree.DecisionTreeRegressor : A decision tree regressor.\n    sklearn.ensemble.RandomForestRegressor : A random forest regressor.\n\n    Notes\n    -----\n    The features are always randomly permuted at each split. Therefore,\n    the best found split may vary, even with the same training data and\n    ``max_features=n_features``, if the improvement of the criterion is\n    identical for several splits enumerated during the search of the best\n    split. To obtain a deterministic behaviour during fitting,\n    ``random_state`` has to be fixed.\n\n    References\n    ----------\n    J. Friedman, Greedy Function Approximation: A Gradient Boosting\n    Machine, The Annals of Statistics, Vol. 29, No. 5, 2001.\n\n    J. Friedman, Stochastic Gradient Boosting, 1999\n\n    T. Hastie, R. Tibshirani and J. Friedman.\n    Elements of Statistical Learning Ed. 2, Springer, 2009.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_regression\n    >>> from sklearn.ensemble import GradientBoostingRegressor\n    >>> from sklearn.model_selection import train_test_split\n    >>> X, y = make_regression(random_state=0)\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...     X, y, random_state=0)\n    >>> reg = GradientBoostingRegressor(random_state=0)\n    >>> reg.fit(X_train, y_train)\n    GradientBoostingRegressor(random_state=0)\n    >>> reg.predict(X_test[1:2])\n    array([-61...])\n    >>> reg.score(X_test, y_test)\n    0.4...\n    \"\"\"",
                        "filename": "sklearn/ensemble/_gb.py",
                        "start_index": 54427,
                        "end_index": 67884,
                        "start_line": 1398,
                        "end_line": 1824,
                        "max_line": 1828,
                        "git_instance": "github",
                        "repo_name": "testbed/scikit-learn__scikit-learn__0.21",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the documentation and parameters for the Gradient Boosting regressor, including the 'init' parameter, which is relevant to the issue."
                }
            ]
        },
        "solution_task": "To address the issue with the `init` parameter in `GradientBoostingClassifier` and `GradientBoostingRegressor` when using a non-default sklearn estimator that does not support sample weights, and to ensure the predict method's output shape is compatible, apply the following changes:\n\n- Modify the `fit` method in both `GradientBoostingClassifier` and `GradientBoostingRegressor` to check if the `init` estimator supports sample weights. Use the `hasattr` function to check if the `init` estimator has a `sample_weight` parameter in its `fit` method signature.\n- If the `init` estimator does not support sample weights, raise an informative error when `sample_weight` is not None.\n- Ensure that the output shape of the `predict` method from the `init` estimator is compatible with the expected shape for gradient boosting. This can be done by checking the output shape and reshaping if necessary.\n- Add test cases to cover scenarios where the `init` estimator is a non-default estimator that does or does not support sample weights.\n\nHere is a code snippet that demonstrates the proposed changes:\n\n```python\nfrom sklearn.utils.validation import check_is_fitted\nfrom sklearn.utils.validation import has_fit_parameter\n\nclass GradientBoostingClassifier(BaseEstimator):\n    # ... existing code ...\n\n    def fit(self, X, y, sample_weight=None):\n        # ... existing code before initializing raw_predictions ...\n\n        if self.init:\n            if has_fit_parameter(self.init, \"sample_weight\"):\n                self.init_.fit(X, y, sample_weight=sample_weight)\n            else:\n                if sample_weight is not None:\n                    raise ValueError(\n                        \"The initial estimator {} does not support sample weights.\"\n                        .format(self.init_.__class__.__name__)\n                    )\n                self.init_.fit(X, y)\n\n            # Ensure the init estimator's predict output has the correct shape\n            raw_predictions_init = self.init_.predict(X)\n            if raw_predictions_init.ndim == 1:\n                raw_predictions_init = raw_predictions_init[:, np.newaxis]\n            # ... continue with the rest of the fit method ...\n\n        # ... existing code ...\n\n# Similar changes should be made to GradientBoostingRegressor\n```\n\nRemember to add corresponding test cases to `sklearn/ensemble/tests/test_gradient_boosting.py` to ensure that the new behavior works as expected and that informative errors are raised when necessary.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable solution to the problem of the Gradient Boosting algorithm failing when the 'init' parameter is set to a non-default sklearn estimator. It suggests modifying the 'fit' method to check if the 'init' estimator supports sample weights and to reshape the output of the 'predict' method if necessary. The RESPONSE also includes a code snippet demonstrating the proposed changes, which is directly applicable to the issue at hand. Additionally, the RESPONSE advises adding test cases to cover the new scenarios, which is an essential step in ensuring the robustness of the fix. The links to the code snippets are relevant and provide context for where the changes should be made in the codebase.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711741275.8836632,
        "result": "To address the issue with the `init` parameter in `GradientBoostingClassifier` and `GradientBoostingRegressor` when using a non-default sklearn estimator that does not support sample weights, and to ensure the predict method's output shape is compatible, apply the following changes:\n\n- Modify the `fit` method in both `GradientBoostingClassifier` and `GradientBoostingRegressor` to check if the `init` estimator supports sample weights. Use the `hasattr` function to check if the `init` estimator has a `sample_weight` parameter in its `fit` method signature.\n- If the `init` estimator does not support sample weights, raise an informative error when `sample_weight` is not None.\n- Ensure that the output shape of the `predict` method from the `init` estimator is compatible with the expected shape for gradient boosting. This can be done by checking the output shape and reshaping if necessary.\n- Add test cases to cover scenarios where the `init` estimator is a non-default estimator that does or does not support sample weights.\n\nHere is a code snippet that demonstrates the proposed changes:\n\n```python\nfrom sklearn.utils.validation import check_is_fitted\nfrom sklearn.utils.validation import has_fit_parameter\n\nclass GradientBoostingClassifier(BaseEstimator):\n    # ... existing code ...\n\n    def fit(self, X, y, sample_weight=None):\n        # ... existing code before initializing raw_predictions ...\n\n        if self.init:\n            if has_fit_parameter(self.init, \"sample_weight\"):\n                self.init_.fit(X, y, sample_weight=sample_weight)\n            else:\n                if sample_weight is not None:\n                    raise ValueError(\n                        \"The initial estimator {} does not support sample weights.\"\n                        .format(self.init_.__class__.__name__)\n                    )\n                self.init_.fit(X, y)\n\n            # Ensure the init estimator's predict output has the correct shape\n            raw_predictions_init = self.init_.predict(X)\n            if raw_predictions_init.ndim == 1:\n                raw_predictions_init = raw_predictions_init[:, np.newaxis]\n            # ... continue with the rest of the fit method ...\n\n        # ... existing code ...\n\n# Similar changes should be made to GradientBoostingRegressor\n```\n\nRemember to add corresponding test cases to `sklearn/ensemble/tests/test_gradient_boosting.py` to ensure that the new behavior works as expected and that informative errors are raised when necessary.\n\n### Code snippets to check\n\n-  \u2192 [sklearn](https://github.com/testbed/scikit-learn__scikit-learn__0.21/tree//sklearn) \u2192 [ensemble](https://github.com/testbed/scikit-learn__scikit-learn__0.21/tree//sklearn/ensemble)- [Lines 458 - 525](https://github.com/testbed/scikit-learn__scikit-learn__0.21/blob//sklearn/ensemble/_gb.py#L458-L525)\n\n This snippet contains logic for fitting the initial estimator and handling the case when sample weights are not supported, which is directly related to the issue. \n\n\n   - [Lines 370 - 1782](https://github.com/testbed/scikit-learn__scikit-learn__0.21/blob//sklearn/ensemble/_gb.py#L370-L1782)\n\n This snippet includes a decorator that might be involved in the initialization process of the GradientBoosting estimator, which could be relevant to the issue. \n\n\n   - [Lines 835 - 1077](https://github.com/testbed/scikit-learn__scikit-learn__0.21/blob//sklearn/ensemble/_gb.py#L835-L1077)\n\n This snippet contains the documentation and parameters for the Gradient Boosting classifier, including the 'init' parameter, which is relevant to the issue. \n\n\n   - [Lines 1398 - 1824](https://github.com/testbed/scikit-learn__scikit-learn__0.21/blob//sklearn/ensemble/_gb.py#L1398-L1824)\n\n This snippet contains the documentation and parameters for the Gradient Boosting regressor, including the 'init' parameter, which is relevant to the issue."
    }
}