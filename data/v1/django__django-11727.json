{
    "id": "django__django-11727",
    "repo_name": "testbed/django__django__3.1",
    "task_id": 449190334221592522,
    "title": "Allow hiding the \"Save and Add Another\" button with a `show_save_and_add_another` context variable",
    "body": "Description\n\t\nTo provide better adjustability, to introduce new context var - show_save_and_add_another.\nE.g. if I want to hide button \"Save and add another\", I can just modify extra_context - write False to the variable.\nFor other buttons - \"Save\" and \"Save and continue editing\", this already works exactly in this manner.\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/django__django__3.1.git",
    "requested_commit": "",
    "mayil_response": "To implement the feature of hiding the \"Save and Add Another\" button with a `show_save_and_add_another` context variable, you can follow these steps:\n\n- Modify the `submit_row` function in the `django/contrib/admin/templatetags/admin_modify.py` file to use the new `show_save_and_add_another` context variable.\n- Update the template that renders the submit row to respect the new context variable.\n\nHere's how you can do it:\n\n1. Update the `submit_row` function in `admin_modify.py` to check for the `show_save_and_add_another` variable in the context:\n\n```python\ndef submit_row(context):\n    ...\n    show_save_and_add_another = context.get(\"show_save_and_add_another\", True)\n    ...\n    can_save_and_add_another = (\n        has_add_permission\n        and not is_popup\n        and (not save_as or add)\n        and can_save\n        and show_save_and_add_another  # Use the context variable here\n    )\n    ...\n    ctx.update({\n        ...\n        \"show_save_and_add_another\": can_save_and_add_another,\n        ...\n    })\n    return ctx\n```\n\n2. In the template that includes the submit row (usually `submit_line.html` or similar), you will need to add a conditional statement to check the `show_save_and_add_another` variable before rendering the \"Save and Add Another\" button:\n\n```html\n{% if show_save_and_add_another %}\n    <!-- Render the \"Save and Add Another\" button here -->\n{% endif %}\n```\n\n3. When rendering the admin form in your view or admin class, pass the `show_save_and_add_another` variable in the `extra_context`:\n\n```python\nclass MyModelAdmin(admin.ModelAdmin):\n    ...\n    def change_view(self, request, object_id, form_url='', extra_context=None):\n        extra_context = extra_context or {}\n        extra_context['show_save_and_add_another'] = False  # Set to False to hide the button\n        return super().change_view(request, object_id, form_url, extra_context=extra_context)\n```\n\nBy following these steps, you will be able to control the visibility of the \"Save and Add Another\" button using the `show_save_and_add_another` context variable.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__3.1/tree//django) \u2192 [contrib](https://github.com/testbed/django__django__3.1/tree//django/contrib) \u2192 [admin](https://github.com/testbed/django__django__3.1/tree//django/contrib/admin) \u2192 [templatetags](https://github.com/testbed/django__django__3.1/tree//django/contrib/admin/templatetags)- [Lines 61 - 130](https://github.com/testbed/django__django__3.1/blob//django/contrib/admin/templatetags/admin_modify.py#L61-L130)\n\n This snippet directly references the 'show_save_and_add_another' context variable and its usage in determining whether to display the 'Save and add another' button. It is the primary location where the new context variable will be used to control the visibility of the button.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.00033,
        "snippet_processor": 0.050890000000000005,
        "issue_star_creation": 0.023889999999999998,
        "issue_star_solver": 0.04168000000000001,
        "bouncer": 0.02727
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711732771.400296,
        "relevant_snippets": [
            {
                "code": "const showAddButton = maxForms.val() === '' || (maxForms.val() - totalForms.val()) > 0;\n        if ($this.length && showAddButton) {\n            addButton.parent().show();\n        } else {\n            addButton.parent().hide();\n        }\n\n        return this;\n    }",
                "filename": "django/contrib/admin/static/admin/js/inlines.js",
                "start_index": 8516,
                "end_index": 8781,
                "start_line": 188,
                "end_line": 358,
                "max_line": 359,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "def get_context(self, name, value, attrs):\n        from django.contrib.admin.views.main import IS_POPUP_VAR, TO_FIELD_VAR\n\n        rel_opts = self.rel.model._meta\n        info = (rel_opts.app_label, rel_opts.model_name)\n        self.widget.choices = self.choices\n        related_field_name = self.rel.get_related_field().name\n        url_params = \"&\".join(\n            \"%s=%s\" % param\n            for param in [\n                (TO_FIELD_VAR, related_field_name),\n                (IS_POPUP_VAR, 1),\n            ]\n        )\n        context = {\n            \"rendered_widget\": self.widget.render(name, value, attrs),\n            \"is_hidden\": self.is_hidden,\n            \"name\": name,\n            \"url_params\": url_params,\n            \"model\": rel_opts.verbose_name,\n            \"can_add_related\": self.can_add_related,\n            \"can_change_related\": self.can_change_related,\n            \"can_delete_related\": self.can_delete_related,\n            \"can_view_related\": self.can_view_related,\n            \"model_has_limit_choices_to\": self.rel.limit_choices_to,\n        }\n        if self.can_add_related:\n            context[\"add_related_url\"] = self.get_related_url(info, \"add\")\n        if self.can_delete_related:\n            context[\"delete_related_template_url\"] = self.get_related_url(\n                info, \"delete\", \"__fk__\"\n            )\n        if self.can_view_related or self.can_change_related:\n            context[\"view_related_url_params\"] = f\"{TO_FIELD_VAR}={related_field_name}\"\n            context[\"change_related_template_url\"] = self.get_related_url(\n                info, \"change\", \"__fk__\"\n            )\n        return context\n\n    def value_from_datadict(self, data, files, name):\n        return self.widget.value_from_datadict(data, files, name)\n\n    def value_omitted_from_data(self, data, files, name):\n        return self.widget.value_omitted_from_data(data, files, name)\n\n    def id_for_label(self, id_):\n        return self.widget.id_for_label(id_)",
                "filename": "django/contrib/admin/widgets.py",
                "start_index": 9928,
                "end_index": 11900,
                "start_line": 41,
                "end_line": 351,
                "max_line": 595,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "def submit_row(context):\n    \"\"\"\n    Display the row of buttons for delete and save.\n    \"\"\"\n    add = context[\"add\"]\n    change = context[\"change\"]\n    is_popup = context[\"is_popup\"]\n    save_as = context[\"save_as\"]\n    show_save = context.get(\"show_save\", True)\n    show_save_and_add_another = context.get(\"show_save_and_add_another\", True)\n    show_save_and_continue = context.get(\"show_save_and_continue\", True)\n    has_add_permission = context[\"has_add_permission\"]\n    has_change_permission = context[\"has_change_permission\"]\n    has_view_permission = context[\"has_view_permission\"]\n    has_editable_inline_admin_formsets = context[\"has_editable_inline_admin_formsets\"]\n    can_save = (\n        (has_change_permission and change)\n        or (has_add_permission and add)\n        or has_editable_inline_admin_formsets\n    )\n    can_save_and_add_another = (\n        has_add_permission\n        and not is_popup\n        and (not save_as or add)\n        and can_save\n        and show_save_and_add_another\n    )\n    can_save_and_continue = (\n        not is_popup and can_save and has_view_permission and show_save_and_continue\n    )\n    can_change = has_change_permission or has_editable_inline_admin_formsets\n    ctx = Context(context)\n    ctx.update(\n        {\n            \"can_change\": can_change,\n            \"show_delete_link\": (\n                not is_popup\n                and context[\"has_delete_permission\"]\n                and change\n                and context.get(\"show_delete\", True)\n            ),\n            \"show_save_as_new\": not is_popup\n            and has_add_permission\n            and change\n            and save_as,\n            \"show_save_and_add_another\": can_save_and_add_another,\n            \"show_save_and_continue\": can_save_and_continue,\n            \"show_save\": show_save and can_save,\n            \"show_close\": not (show_save and can_save),\n        }\n    )\n    return ctx\n\n\n@register.tag(name=\"submit_row\")\ndef submit_row_tag(parser, token):\n    return InclusionAdminNode(\n        parser, token, func=submit_row, template_name=\"submit_line.html\"\n    )\n\n\n@register.tag(name=\"change_form_object_tools\")\ndef change_form_object_tools_tag(parser, token):\n    \"\"\"Display the row of change form object tools.\"\"\"\n    return InclusionAdminNode(\n        parser,\n        token,\n        func=lambda context: context,\n        template_name=\"change_form_object_tools.html\",\n    )",
                "filename": "django/contrib/admin/templatetags/admin_modify.py",
                "start_index": 1933,
                "end_index": 4329,
                "start_line": 61,
                "end_line": 130,
                "max_line": 150,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "def __init__(\n        self,\n        extra_context,\n        singular,\n        plural=None,\n        countervar=None,\n        counter=None,\n        message_context=None,\n        trimmed=False,\n        asvar=None,\n        tag_name=\"blocktranslate\",\n    ):\n        self.extra_context = extra_context\n        self.singular = singular\n        self.plural = plural\n        self.countervar = countervar\n        self.counter = counter\n        self.message_context = message_context\n        self.trimmed = trimmed\n        self.asvar = asvar\n        self.tag_name = tag_name\n\n    def __repr__(self):\n        return (\n            f\"<{self.__class__.__qualname__}: \"\n            f\"extra_context={self.extra_context!r} \"\n            f\"singular={self.singular!r} plural={self.plural!r}>\"\n        )\n\n    def render_token_list(self, tokens):\n        result = []\n        vars = []\n        for token in tokens:\n            if token.token_type == TokenType.TEXT:\n                result.append(token.contents.replace(\"%\", \"%%\"))\n            elif token.token_type == TokenType.VAR:\n                result.append(\"%%(%s)s\" % token.contents)\n                vars.append(token.contents)\n        msg = \"\".join(result)\n        if self.trimmed:\n            msg = translation.trim_whitespace(msg)\n        return msg, vars",
                "filename": "django/templatetags/i18n.py",
                "start_index": 3377,
                "end_index": 4668,
                "start_line": 14,
                "end_line": 146,
                "max_line": 616,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "def each_context(self, request):\n        \"\"\"\n        Return a dictionary of variables to put in the template context for\n        *every* page in the admin site.\n\n        For sites running on a subpath, use the SCRIPT_NAME value if site_url\n        hasn't been customized.\n        \"\"\"\n        script_name = request.META[\"SCRIPT_NAME\"]\n        site_url = (\n            script_name if self.site_url == \"/\" and script_name else self.site_url\n        )\n        return {\n            \"site_title\": self.site_title,\n            \"site_header\": self.site_header,\n            \"site_url\": site_url,\n            \"has_permission\": self.has_permission(request),\n            \"available_apps\": self.get_app_list(request),\n            \"is_popup\": False,\n            \"is_nav_sidebar_enabled\": self.enable_nav_sidebar,\n            \"log_entries\": self.get_log_entries(request),\n        }\n\n    def password_change(self, request, extra_context=None):\n        \"\"\"\n        Handle the \"change password\" task -- both form display and validation.\n        \"\"\"\n        from django.contrib.admin.forms import AdminPasswordChangeForm\n        from django.contrib.auth.views import PasswordChangeView\n\n        url = reverse(\"admin:password_change_done\", current_app=self.name)\n        defaults = {\n            \"form_class\": AdminPasswordChangeForm,\n            \"success_url\": url,\n            \"extra_context\": {**self.each_context(request), **(extra_context or {})},\n        }\n        if self.password_change_template is not None:\n            defaults[\"template_name\"] = self.password_change_template\n        request.current_app = self.name\n        return PasswordChangeView.as_view(**defaults)(request)\n\n    def password_change_done(self, request, extra_context=None):\n        \"\"\"\n        Display the \"success\" page after a password change.\n        \"\"\"\n        from django.contrib.auth.views import PasswordChangeDoneView\n\n        defaults = {\n            \"extra_context\": {**self.each_context(request), **(extra_context or {})},\n        }\n        if self.password_change_done_template is not None:\n            defaults[\"template_name\"] = self.password_change_done_template\n        request.current_app = self.name\n        return PasswordChangeDoneView.as_view(**defaults)(request)\n\n    def i18n_javascript(self, request, extra_context=None):\n        \"\"\"\n        Display the i18n JavaScript that the Django admin requires.\n\n        `extra_context` is unused but present for consistency with the other\n        admin views.\n        \"\"\"\n        return JavaScriptCatalog.as_view(packages=[\"django.contrib.admin\"])(request)",
                "filename": "django/contrib/admin/sites.py",
                "start_index": 12198,
                "end_index": 14782,
                "start_line": 318,
                "end_line": 380,
                "max_line": 612,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "or use in admin add/change views.\"\"\"\n        if \"fields\" in kwargs:\n            fields = kwargs.pop(\"fields\")\n        else:\n            fields = flatten_fieldsets(self.get_fieldsets(request, obj))\n        excluded = self.get_exclude(request, obj)\n        exclude = [] if excluded is None else list(excluded)\n        exclude.extend(self.get_readonly_fields(request, obj))\n        if excluded is None and hasattr(self.form, \"_meta\") and self.form._meta.exclude:\n            # Take the custom ModelForm's Meta.exclude into account only if the\n            # InlineModelAdmin doesn't define its own.\n            exclude.extend(self.form._meta.exclude)\n        # If exclude is an empty list we use None, since that's the actual\n        # default.\n        exclude = exclude or None\n        can_delete = self.can_delete and self.has_delete_permission(request, obj)\n        defaults = {\n            \"form\": self.form,\n            \"formset\": self.formset,\n            \"fk_name\": self.fk_name,\n            \"fields\": fields,\n            \"exclude\": exclude,\n            \"formfield_callback\": partial(self.formfield_for_dbfield, request=request),\n            \"extra\": self.get_extra(request, obj, **kwargs),\n            \"min_num\": self.get_min_num(request, obj, **kwargs),\n            \"max_num\": self.get_max_num(request, obj, **kwargs),\n            \"can_delete\": can_delete,\n            **kwargs,\n        }\n\n        base_model_form = defaults[\"form\"]\n        can_change = self.has_change_permission(request, obj) if request else True\n        can_add = self.has_add_permission(request, obj) if request else True\n\n        class DeleteProtectedModelForm(base_",
                "filename": "django/contrib/admin/options.py",
                "start_index": 91823,
                "end_index": 93466,
                "start_line": 2373,
                "end_line": 2407,
                "max_line": 2529,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "class Context(BaseContext):\n    \"A stack container for variable context\"\n\n    def __init__(self, dict_=None, autoescape=True, use_l10n=None, use_tz=None):\n        self.autoescape = autoescape\n        self.use_l10n = use_l10n\n        self.use_tz = use_tz\n        self.template_name = \"unknown\"\n        self.render_context = RenderContext()\n        # Set to the original template -- as opposed to extended or included\n        # templates -- during rendering, see bind_template.\n        self.template = None\n        super().__init__(dict_)\n\n    @contextmanager\n    def bind_template(self, template):\n        if self.template is not None:\n            raise RuntimeError(\"Context is already bound to a template\")\n        self.template = template\n        try:\n            yield\n        finally:\n            self.template = None\n\n    def __copy__(self):\n        duplicate = super().__copy__()\n        duplicate.render_context = copy(self.render_context)\n        return duplicate\n\n    def update(self, other_dict):\n        \"Push other_dict to the stack of dictionaries in the Context\"\n        if not hasattr(other_dict, \"__getitem__\"):\n            raise TypeError(\"other_dict must be a mapping (dictionary-like) object.\")\n        if isinstance(other_dict, BaseContext):\n            other_dict = other_dict.dicts[1:].pop()\n        return ContextDict(self, other_dict)\n\n\nclass RenderContext(BaseContext):\n    \"\"\"\n    A stack container for storing Template state.\n\n    RenderContext simplifies the implementation of template Nodes by providing a\n    safe place to store state between invocations of a node's `render` method.\n\n    The RenderContext also provides scoping rules that are more sensible for\n    'template local' variables. The render context stack is pushed before each\n    template is rendered, creating a fresh scope with nothing in it. Name\n    resolution fails if a variable is not found at the top of the RequestContext\n    stack. Thus, variables are local to a specific template and don't affect the\n    rendering of other templates as they would if they were stored in the normal\n    template context.\n    \"\"\"\n\n    template = None\n\n    def __iter__(self):\n        yield from self.dicts[-1]\n\n    def __contains__(self, key):\n        return key in self.dicts[-1]\n\n    def get(self, key, otherwise=None):\n        return self.dicts[-1].get(key, otherwise)\n\n    def __getitem__(self, key):\n        return self.dicts[-1][key]\n\n    @contextmanager\n    def push_state(self, template, isolated_context=True):\n        initial = self.template\n        self.template = template\n        if isolated_context:\n            self.push()\n        try:\n            yield\n        finally:\n            self.template = initial\n            if isolated_context:\n                self.pop()",
                "filename": "django/template/context.py",
                "start_index": 3551,
                "end_index": 6320,
                "start_line": 133,
                "end_line": 212,
                "max_line": 298,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "if IS_POPUP_VAR in request.POST:\n            to_field = request.POST.get(TO_FIELD_VAR)\n            if to_field:\n                attr = str(to_field)\n            else:\n                attr = obj._meta.pk.attname\n            value = obj.serializable_value(attr)\n            popup_response_data = json.dumps(\n                {\n                    \"value\": str(value),\n                    \"obj\": str(obj),\n                }\n            )\n            return TemplateResponse(\n                request,\n                self.popup_response_template\n                or [\n                    \"admin/%s/%s/popup_response.html\"\n                    % (opts.app_label, opts.model_name),\n                    \"admin/%s/popup_response.html\" % opts.app_label,\n                    \"admin/popup_response.html\",\n                ],\n                {\n                    \"popup_response_data\": popup_response_data,\n                },\n            )\n\n        elif \"_continue\" in request.POST or (\n            # Redirecting after \"Save as new\".\n            \"_saveasnew\" in request.POST\n            and self.save_as_continue\n            and self.has_change_permission(request, obj)\n        ):\n            msg = _(\"The {name} \u201c{obj}\u201d was added successfully.\")\n            if self.has_change_permission(request, obj):\n                msg += \" \" + _(\"You may edit it again below.\")\n            self.message_user(request, format_html(msg, **msg_dict), messages.SUCCESS)\n            if post_url_continue is None:\n                post_url_continue = obj_url\n            post_url_continue = add_preserved_filters(\n                {\"preserved_filters\": preserved_filters, \"opts\": opts},\n                post_url_continue,\n            )\n            return HttpResponseRedirect(post_url_continue)\n\n        elif \"_addanother\" in request.POST:\n            msg = format_html(\n                _(\n                    \"The {name} \u201c{obj}\u201d was added successfully. You may add another \"\n                    \"{name} below.\"\n                ),\n                **msg_dict,\n            )\n            self.message_user(request, msg, messages.SUCCESS)\n            redirect_url = request.path\n            redirect_url = add_preserved_filters(\n                {\"preserved_filters\": preserved_filters, \"opts\": opts}, redirect_url\n            )\n            return HttpResponseRedirect(redirect_url)\n\n        else:\n            msg = format_html(\n                _(\"The {name} \u201c{obj}\u201d was added successfully.\"), **msg_dict\n            )\n            self.message_user(request, msg, messages.SUCCESS)\n            return self.response_post_save_add(request, obj)\n\n    def response_c",
                "filename": "django/contrib/admin/options.py",
                "start_index": 52029,
                "end_index": 54650,
                "start_line": 1372,
                "end_line": 1439,
                "max_line": 2529,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        if self.validlink:\n            context[\"validlink\"] = True\n        else:\n            context.update(\n                {\n                    \"form\": None,\n                    \"title\": _(\"Password reset unsuccessful\"),\n                    \"validlink\": False,\n                }\n            )\n        return context",
                "filename": "django/contrib/auth/views.py",
                "start_index": 11860,
                "end_index": 12269,
                "start_line": 110,
                "end_line": 345,
                "max_line": 379,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            },
            {
                "code": "from django.core.exceptions import ImproperlyConfigured\nfrom django.forms import Form\nfrom django.forms import models as model_forms\nfrom django.http import HttpResponseRedirect\nfrom django.views.generic.base import ContextMixin, TemplateResponseMixin, View\nfrom django.views.generic.detail import (\n    BaseDetailView,\n    SingleObjectMixin,\n    SingleObjectTemplateResponseMixin,\n)\n\n\nclass FormMixin(ContextMixin):\n    \"\"\"Provide a way to show and handle a form in a request.\"\"\"\n\n    initial = {}\n    form_class = None\n    success_url = None\n    prefix = None\n\n    def get_initial(self):\n        \"\"\"Return the initial data to use for forms on this view.\"\"\"\n        return self.initial.copy()\n\n    def get_prefix(self):\n        \"\"\"Return the prefix to use for forms.\"\"\"\n        return self.prefix\n\n    def get_form_class(self):\n        \"\"\"Return the form class to use.\"\"\"\n        return self.form_class\n\n    def get_form(self, form_class=None):\n        \"\"\"Return an instance of the form to be used in this view.\"\"\"\n        if form_class is None:\n            form_class = self.get_form_class()\n        return form_class(**self.get_form_kwargs())\n\n    def get_form_kwargs(self):\n        \"\"\"Return the keyword arguments for instantiating the form.\"\"\"\n        kwargs = {\n            \"initial\": self.get_initial(),\n            \"prefix\": self.get_prefix(),\n        }\n\n        if self.request.method in (\"POST\", \"PUT\"):\n            kwargs.update(\n                {\n                    \"data\": self.request.POST,\n                    \"files\": self.request.FILES,\n                }\n            )\n        return kwargs\n\n    def get_success_url(self):\n        \"\"\"Return the URL to redirect to after processing a valid form.\"\"\"\n        if not self.success_url:\n            raise ImproperlyConfigured(\"No URL to redirect to. Provide a success_url.\")\n        return str(self.success_url)  # success_url may be lazy\n\n    def form_valid(self, form):\n        \"\"\"If the form is valid, redirect to the supplied URL.\"\"\"\n        return HttpResponseRedirect(self.get_success_url())\n\n    def form_invalid(self, form):\n        \"\"\"If the form is invalid, render the invalid form.\"\"\"\n        return self.render_to_response(self.get_context_data(form=form))\n\n    def get_context_data(self, **kwargs):\n        \"\"\"Insert the form into the context dict.\"\"\"\n        if \"form\" not in kwargs:\n            kwargs[\"form\"] = self.get_form()\n        return super().get_context_data(**kwargs)",
                "filename": "django/views/generic/edit.py",
                "start_index": 0,
                "end_index": 2454,
                "start_line": 1,
                "end_line": 73,
                "max_line": 274,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.1",
                "sha": ""
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "django/contrib/admin/templatetags/admin_modify.py": [
                {
                    "chunk": {
                        "code": "def submit_row(context):\n    \"\"\"\n    Display the row of buttons for delete and save.\n    \"\"\"\n    add = context[\"add\"]\n    change = context[\"change\"]\n    is_popup = context[\"is_popup\"]\n    save_as = context[\"save_as\"]\n    show_save = context.get(\"show_save\", True)\n    show_save_and_add_another = context.get(\"show_save_and_add_another\", True)\n    show_save_and_continue = context.get(\"show_save_and_continue\", True)\n    has_add_permission = context[\"has_add_permission\"]\n    has_change_permission = context[\"has_change_permission\"]\n    has_view_permission = context[\"has_view_permission\"]\n    has_editable_inline_admin_formsets = context[\"has_editable_inline_admin_formsets\"]\n    can_save = (\n        (has_change_permission and change)\n        or (has_add_permission and add)\n        or has_editable_inline_admin_formsets\n    )\n    can_save_and_add_another = (\n        has_add_permission\n        and not is_popup\n        and (not save_as or add)\n        and can_save\n        and show_save_and_add_another\n    )\n    can_save_and_continue = (\n        not is_popup and can_save and has_view_permission and show_save_and_continue\n    )\n    can_change = has_change_permission or has_editable_inline_admin_formsets\n    ctx = Context(context)\n    ctx.update(\n        {\n            \"can_change\": can_change,\n            \"show_delete_link\": (\n                not is_popup\n                and context[\"has_delete_permission\"]\n                and change\n                and context.get(\"show_delete\", True)\n            ),\n            \"show_save_as_new\": not is_popup\n            and has_add_permission\n            and change\n            and save_as,\n            \"show_save_and_add_another\": can_save_and_add_another,\n            \"show_save_and_continue\": can_save_and_continue,\n            \"show_save\": show_save and can_save,\n            \"show_close\": not (show_save and can_save),\n        }\n    )\n    return ctx\n\n\n@register.tag(name=\"submit_row\")\ndef submit_row_tag(parser, token):\n    return InclusionAdminNode(\n        parser, token, func=submit_row, template_name=\"submit_line.html\"\n    )\n\n\n@register.tag(name=\"change_form_object_tools\")\ndef change_form_object_tools_tag(parser, token):\n    \"\"\"Display the row of change form object tools.\"\"\"\n    return InclusionAdminNode(\n        parser,\n        token,\n        func=lambda context: context,\n        template_name=\"change_form_object_tools.html\",\n    )",
                        "filename": "django/contrib/admin/templatetags/admin_modify.py",
                        "start_index": 1933,
                        "end_index": 4329,
                        "start_line": 61,
                        "end_line": 130,
                        "max_line": 150,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet directly references the 'show_save_and_add_another' context variable and its usage in determining whether to display the 'Save and add another' button. It is the primary location where the new context variable will be used to control the visibility of the button."
                }
            ]
        },
        "solution_task": "To implement the feature of hiding the \"Save and Add Another\" button with a `show_save_and_add_another` context variable, you can follow these steps:\n\n- Modify the `submit_row` function in the `django/contrib/admin/templatetags/admin_modify.py` file to use the new `show_save_and_add_another` context variable.\n- Update the template that renders the submit row to respect the new context variable.\n\nHere's how you can do it:\n\n1. Update the `submit_row` function in `admin_modify.py` to check for the `show_save_and_add_another` variable in the context:\n\n```python\ndef submit_row(context):\n    ...\n    show_save_and_add_another = context.get(\"show_save_and_add_another\", True)\n    ...\n    can_save_and_add_another = (\n        has_add_permission\n        and not is_popup\n        and (not save_as or add)\n        and can_save\n        and show_save_and_add_another  # Use the context variable here\n    )\n    ...\n    ctx.update({\n        ...\n        \"show_save_and_add_another\": can_save_and_add_another,\n        ...\n    })\n    return ctx\n```\n\n2. In the template that includes the submit row (usually `submit_line.html` or similar), you will need to add a conditional statement to check the `show_save_and_add_another` variable before rendering the \"Save and Add Another\" button:\n\n```html\n{% if show_save_and_add_another %}\n    <!-- Render the \"Save and Add Another\" button here -->\n{% endif %}\n```\n\n3. When rendering the admin form in your view or admin class, pass the `show_save_and_add_another` variable in the `extra_context`:\n\n```python\nclass MyModelAdmin(admin.ModelAdmin):\n    ...\n    def change_view(self, request, object_id, form_url='', extra_context=None):\n        extra_context = extra_context or {}\n        extra_context['show_save_and_add_another'] = False  # Set to False to hide the button\n        return super().change_view(request, object_id, form_url, extra_context=extra_context)\n```\n\nBy following these steps, you will be able to control the visibility of the \"Save and Add Another\" button using the `show_save_and_add_another` context variable.",
        "bouncer_response": {
            "score": 9,
            "criteria": "RESPONSE delivers precise, actionable, and highly relevant suggestions that can directly lead to the successful implementation or improvement of the requested feature.",
            "supporting_evidence": "The RESPONSE provides a clear and detailed step-by-step guide on how to implement the feature request to hide the 'Save and Add Another' button using a context variable. It includes modifications to the backend Python code, updates to the Django template, and how to pass the context variable in the view or admin class. The inclusion of code snippets and the reference to the specific file and lines in the Django repository where changes need to be made are particularly useful and actionable. The RESPONSE addresses all aspects of the feature request, providing a comprehensive solution.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711732973.6229818,
        "result": "To implement the feature of hiding the \"Save and Add Another\" button with a `show_save_and_add_another` context variable, you can follow these steps:\n\n- Modify the `submit_row` function in the `django/contrib/admin/templatetags/admin_modify.py` file to use the new `show_save_and_add_another` context variable.\n- Update the template that renders the submit row to respect the new context variable.\n\nHere's how you can do it:\n\n1. Update the `submit_row` function in `admin_modify.py` to check for the `show_save_and_add_another` variable in the context:\n\n```python\ndef submit_row(context):\n    ...\n    show_save_and_add_another = context.get(\"show_save_and_add_another\", True)\n    ...\n    can_save_and_add_another = (\n        has_add_permission\n        and not is_popup\n        and (not save_as or add)\n        and can_save\n        and show_save_and_add_another  # Use the context variable here\n    )\n    ...\n    ctx.update({\n        ...\n        \"show_save_and_add_another\": can_save_and_add_another,\n        ...\n    })\n    return ctx\n```\n\n2. In the template that includes the submit row (usually `submit_line.html` or similar), you will need to add a conditional statement to check the `show_save_and_add_another` variable before rendering the \"Save and Add Another\" button:\n\n```html\n{% if show_save_and_add_another %}\n    <!-- Render the \"Save and Add Another\" button here -->\n{% endif %}\n```\n\n3. When rendering the admin form in your view or admin class, pass the `show_save_and_add_another` variable in the `extra_context`:\n\n```python\nclass MyModelAdmin(admin.ModelAdmin):\n    ...\n    def change_view(self, request, object_id, form_url='', extra_context=None):\n        extra_context = extra_context or {}\n        extra_context['show_save_and_add_another'] = False  # Set to False to hide the button\n        return super().change_view(request, object_id, form_url, extra_context=extra_context)\n```\n\nBy following these steps, you will be able to control the visibility of the \"Save and Add Another\" button using the `show_save_and_add_another` context variable.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__3.1/tree//django) \u2192 [contrib](https://github.com/testbed/django__django__3.1/tree//django/contrib) \u2192 [admin](https://github.com/testbed/django__django__3.1/tree//django/contrib/admin) \u2192 [templatetags](https://github.com/testbed/django__django__3.1/tree//django/contrib/admin/templatetags)- [Lines 61 - 130](https://github.com/testbed/django__django__3.1/blob//django/contrib/admin/templatetags/admin_modify.py#L61-L130)\n\n This snippet directly references the 'show_save_and_add_another' context variable and its usage in determining whether to display the 'Save and add another' button. It is the primary location where the new context variable will be used to control the visibility of the button."
    }
}