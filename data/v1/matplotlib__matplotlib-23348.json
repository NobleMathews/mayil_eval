{
    "id": "matplotlib__matplotlib-23348",
    "repo_name": "testbed/matplotlib__matplotlib__3.5",
    "task_id": 2075849417750825364,
    "title": "MultiCursor should be able to bind to axes in more than one figure...",
    "body": "Multicursor only works if  all the axes are in the same figure...\r\n\r\n> Each tab is its own Figure/Canvas.  MultiCursor only binds itself to one Canvas so it only sees mouse events from axes on in the figure that canvas is associated with.\r\n\r\n> The fix here is to add a check that all Axes are in the same Figure on init and raise otherwise.\r\n\r\n_Originally posted by @tacaswell in https://github.com/matplotlib/matplotlib/issues/23328#issuecomment-1165190927_\r\n\r\nand possible solution:\r\n\r\n> While I haven't looked at the details, it should be possible (and hopefully easy) for MultiCursor to just loop over all canvases of all artists (both when connecting the callbacks, and in the callbacks implementations).  mplcursors does something similar, e.g. registration over all canvases is at https://github.com/anntzer/mplcursors/blob/main/lib/mplcursors/_mplcursors.py#L256-L259.\r\n\r\n_Originally posted by @anntzer in https://github.com/matplotlib/matplotlib/issues/23328#issuecomment-1165230895_\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/matplotlib__matplotlib__3.5.git",
    "requested_commit": "",
    "mayil_response": "To implement the feature where `MultiCursor` can bind to axes in more than one figure, you can follow these steps:\n\n- Modify the `MultiCursor` class to accept multiple canvases.\n- Update the `connect` method to connect the motion and draw events to all canvases.\n- Update the `onmove` and `clear` methods to handle events from multiple canvases.\n\nHere's a high-level overview of the changes needed in the `MultiCursor` class:\n\n```python\nclass MultiCursor(Widget):\n    def __init__(self, canvas, axes, *, useblit=True, horizOn=False, vertOn=True, **lineprops):\n        # ... existing code ...\n\n        # Change to support multiple figures\n        self._canvas_infos = {\n            ax.figure.canvas: {\"cids\": [], \"background\": None} for ax in axes\n        }\n\n        # ... existing code ...\n\n    def connect(self):\n        \"\"\"Connect events to all canvases.\"\"\"\n        for canvas, info in self._canvas_infos.items():\n            info[\"cids\"] = [\n                canvas.mpl_connect('motion_notify_event', self.onmove),\n                canvas.mpl_connect('draw_event', self.clear),\n            ]\n\n    def onmove(self, event):\n        \"\"\"On mouse move event.\"\"\"\n        # Update to handle multiple canvases\n        for canvas, info in self._canvas_infos.items():\n            if event.canvas == canvas:\n                # ... existing code to update lines ...\n\n    def clear(self, event):\n        \"\"\"Clear the cursor.\"\"\"\n        # Update to handle multiple canvases\n        for canvas, info in self._canvas_infos.items():\n            if event.canvas == canvas:\n                # ... existing code to clear lines ...\n```\n\nIn the `__init__` method, the `self._canvas_infos` dictionary is updated to handle multiple canvases. The `connect` method is modified to connect the motion and draw events to all canvases in `self._canvas_infos`.\n\nThe `onmove` and `clear` methods are updated to handle events from multiple canvases by checking `event.canvas` against the canvases in `self._canvas_infos`.\n\nThis is a high-level overview, and the actual implementation may require additional adjustments to handle edge cases and ensure that the cursor lines and text annotations are correctly updated across all figures.\n\nFor further research, you can look into the following:\n- Matplotlib's event handling: https://matplotlib.org/stable/users/event_handling.html\n- The `mplcursors` library for more advanced cursor functionality: https://github.com/anntzer/mplcursors\n\n### Code snippets to check\n\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//lib/matplotlib)- [Lines 1 - 2127](https://github.com/testbed/matplotlib__matplotlib__3.5/blob//lib/matplotlib/widgets.py#L1-L2127)\n\n This snippet contains the implementation of the MultiCursor class, including the __init__ method where the check for all Axes being in the same Figure should be added as per the issue description.\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries) \u2192 [examples](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries/examples) \u2192 [widgets](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries/examples/widgets)- [Lines 1 - 39](https://github.com/testbed/matplotlib__matplotlib__3.5/blob//galleries/examples/widgets/multicursor.py#L1-L39)\n\n This snippet is an example of how the MultiCursor widget is used. It may need to be updated to reflect the changes made to the MultiCursor class or to serve as a test case to verify the fix.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0008215,
        "snippet_processor": 0.06284000000000001,
        "issue_star_creation": 0.0276,
        "issue_star_solver": 0.07291,
        "bouncer": 0.024620000000000003
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711697908.59566,
        "relevant_snippets": [
            {
                "code": "\"\"\"\n===========\nMulticursor\n===========\n\nShowing a cursor on multiple plots simultaneously.\n\nThis example generates three axes split over two different figures.  On\nhovering the cursor over data in one subplot, the values of that datapoint are\nshown in all axes.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.widgets import MultiCursor\n\nt = np.arange(0.0, 2.0, 0.01)\ns1 = np.sin(2*np.pi*t)\ns2 = np.sin(3*np.pi*t)\ns3 = np.sin(4*np.pi*t)\n\nfig, (ax1, ax2) = plt.subplots(2, sharex=True)\nax1.plot(t, s1)\nax2.plot(t, s2)\nfig, ax3 = plt.subplots()\nax3.plot(t, s3)\n\nmulti = MultiCursor(None, (ax1, ax2, ax3), color='r', lw=1)\nplt.show()\n\n# %%\n#\n# .. admonition:: References\n#\n#    The use of the following functions, methods, classes and modules is shown\n#    in this example:\n#\n#    - `matplotlib.widgets.MultiCursor`",
                "filename": "galleries/examples/widgets/multicursor.py",
                "start_index": 0,
                "end_index": 838,
                "start_line": 1,
                "end_line": 39,
                "max_line": 39,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": ""
            },
            {
                "code": "class MultiCursor(Widget):",
                "filename": "lib/matplotlib/widgets.py",
                "start_index": 73653,
                "end_index": 73679,
                "start_line": 2042,
                "end_line": 2042,
                "max_line": 4245,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": ""
            },
            {
                "code": "\"\"\"\n============\nMouse Cursor\n============\n\nThis example sets an alternative cursor on a figure canvas.\n\nNote, this is an interactive example, and must be run to see the effect.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\nfrom matplotlib.backend_tools import Cursors\n\nfig, axs = plt.subplots(len(Cursors), figsize=(6, len(Cursors) + 0.5),\n                        gridspec_kw={'hspace': 0})\nfig.suptitle('Hover over an Axes to see alternate Cursors')\n\nfor cursor, ax in zip(Cursors, axs):\n    ax.cursor_to_use = cursor\n    ax.text(0.5, 0.5, cursor.name,\n            horizontalalignment='center', verticalalignment='center')\n    ax.set(xticks=[], yticks=[])\n\n\ndef hover(event):\n    if fig.canvas.widgetlock.locked():\n        # Don't do anything if the zoom/pan tools have been enabled.\n        return\n\n    fig.canvas.set_cursor(\n        event.inaxes.cursor_to_use if event.inaxes else Cursors.POINTER)\n\n\nfig.canvas.mpl_connect('motion_notify_event', hover)\n\nplt.show()\n\n# %%\n#\n# .. admonition:: References\n#\n#    The use of the following functions, methods, classes and modules is shown\n#    in this example:\n#\n#    - `matplotlib.backend_bases.FigureCanvasBase.set_cursor`",
                "filename": "galleries/examples/widgets/mouse_cursor.py",
                "start_index": 0,
                "end_index": 1164,
                "start_line": 1,
                "end_line": 46,
                "max_line": 46,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": ""
            },
            {
                "code": "\"\"\"\n    Provide a vertical (default) and/or horizontal line cursor shared between\n    multiple Axes.\n\n    For the cursor to remain responsive you must keep a reference to it.\n\n    Parameters\n    ----------\n    canvas : object\n        This parameter is entirely unused and only kept for back-compatibility.\n\n    axes : list of `matplotlib.axes.Axes`\n        The `~.axes.Axes` to attach the cursor to.\n\n    useblit : bool, default: True\n        Use blitting for faster drawing if supported by the backend.\n        See the tutorial :ref:`blitting`\n        for details.\n\n    horizOn : bool, default: False\n        Whether to draw the horizontal line.\n\n    vertOn : bool, default: True\n        Whether to draw the vertical line.\n\n    Other Parameters\n    ----------------\n    **lineprops\n        `.Line2D` properties that control the appearance of the lines.\n        See also `~.Axes.axhline`.\n\n    Examples\n    --------\n    See :doc:`/gallery/widgets/multicursor`.\n    \"\"\"\n\n    def __init__(self, canvas, axes, *, useblit=True, horizOn=False, vertOn=True,\n                 **lineprops):\n        # canvas is stored only to provide the deprecated .canvas attribute;\n        # once it goes away the unused argument won't need to be stored at all.\n        self._canvas = canvas\n\n        self.axes = axes\n        self.horizOn = horizOn\n        self.vertOn = vertOn\n\n        self._canvas_infos = {\n            ax.figure.canvas: {\"cids\": [], \"background\": None} for ax in axes}\n\n        xmin, xmax = axes[-1].get_xlim()\n        ymin, ymax = axes[-1].get_ylim()\n        xmid = 0.5 * (xmin + xmax)\n        ymid = 0.5 * (ymin + ymax)\n\n        self.visible = True\n        self.useblit = (\n            useblit\n            and all(canvas.supports_blit for canvas in self._canvas_infos))\n\n        if self.useblit:\n            lineprops['animated'] = True\n\n        self.vlines = [ax.axvline(xmid, visible=False, **lineprops)\n                       for ax in axes]\n        self.hlines = [ax.axhline(ymid, visible=False, **lineprops)\n                       for ax in axes]\n\n        self.connect()\n\n    needclear = _api.deprecated(\"3.7\")(lambda self: False)\n\n    def connect(self):\n        \"\"\"Connect events.\"\"\"\n        for canvas, info in self._canvas_infos.items():\n            info[\"cids\"] = [\n                canvas.mpl_connect('motion_notify_event', self.onmove),\n                canvas.mpl_connect('draw_event', self.clear),\n            ]\n\n    def disconnect(self):\n        \"\"\"Disconnect events.\"\"\"\n        for canvas, info in self._canvas_infos.items():\n            for cid in info[\"cids\"]:\n                canvas.mpl_disconnect(cid)\n            info[\"cids\"].clear()",
                "filename": "lib/matplotlib/widgets.py",
                "start_index": 73684,
                "end_index": 76335,
                "start_line": 1,
                "end_line": 2127,
                "max_line": 4245,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": ""
            },
            {
                "code": "fig, ax = plt.subplots(figsize=(8, 6))\nax.set_title(\"Cursor Tracking x Position\")\n\nx = np.linspace(-5, 5, 1000)\ny = x**2\n\nline, = ax.plot(x, y)\nax.set_xlim(-5, 5)\nax.set_ylim(0, 25)\n\n# A minimum call\n# Set useblit=True on most backends for enhanced performance\n# and pass the ax parameter to the Cursor base class.\n# cursor = AnnotatedCursor(line=lin[0], ax=ax, useblit=True)\n\n# A more advanced call. Properties for text and lines are passed.\n# Watch the passed color names and the color of cursor line and text, to\n# relate the passed options to graphical elements.\n# The dataaxis parameter is still the default.\ncursor = AnnotatedCursor(\n    line=line,\n    numberformat=\"{0:.2f}\\n{1:.2f}\",\n    dataaxis='x', offset=[10, 10],\n    textprops={'color': 'blue', 'fontweight': 'bold'},\n    ax=ax,\n    useblit=True,\n    color='red',\n    linewidth=2)\n\n# Simulate a mouse move to (-2, 10), needed for online docs\nt = ax.transData\nMouseEvent(\n    \"motion_notify_event\", ax.figure.canvas, *t.transform((-2, 10))\n)._process()\n\nplt.show()\n\n# %%\n# Trouble with non-biunique functions\n# -----------------------------------\n# A call demonstrating problems with the *dataaxis=y* parameter.\n# The text now looks up the matching x value for the current cursor y position\n# instead of vice versa. Hover your cursor to y=4. There are two x values\n# producing this y value: -2 and 2. The function is only unique,\n# but not biunique. Only one value is shown in the text.\n\nfig, ax = plt.subplots(figsize=(8, 6))\nax.set_title(\"Cursor Tracking y Position\")\n\nline, = ax.plot(x, y)\nax.set_xlim(-5, 5)\nax.set_ylim(0, 25)\n\ncursor = AnnotatedCursor(\n    line=line,\n    numberformat=\"{0:.2f}\\n{1:.2f}\",\n    dataaxis='y', offset=[10, 10],\n    textprops={'color': 'blue', 'fontweight': 'bold'},\n    ax=ax,\n    useblit=True,\n    color='red', linewidth=2)\n\n# Simulate a mouse move to (-2, 10), needed for online docs\nt = ax.transData\nMouseEvent(\n    \"motion_notify_event\", ax.figure.canvas, *t.transform((-2, 10))\n)._process()\n\nplt.show()",
                "filename": "galleries/examples/widgets/annotated_cursor.py",
                "start_index": 11326,
                "end_index": 13330,
                "start_line": 288,
                "end_line": 356,
                "max_line": 356,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": ""
            },
            {
                "code": "\"\"\"\n=====================\nAdding a cursor in WX\n=====================\n\nExample to draw a cursor and report the data coords in wx.\n\"\"\"\n\nimport wx\n\nimport numpy as np\n\nfrom matplotlib.backends.backend_wx import NavigationToolbar2Wx\nfrom matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas\nfrom matplotlib.figure import Figure\n\n\nclass CanvasFrame(wx.Frame):\n    def __init__(self, ):\n        super().__init__(None, -1, 'CanvasFrame', size=(550, 350))\n\n        self.figure = Figure()\n        self.axes = self.figure.add_subplot()\n        t = np.arange(0.0, 3.0, 0.01)\n        s = np.sin(2*np.pi*t)\n\n        self.axes.plot(t, s)\n        self.axes.set_xlabel('t')\n        self.axes.set_ylabel('sin(t)')\n        self.figure_canvas = FigureCanvas(self, -1, self.figure)\n\n        # Note that event is a MplEvent\n        self.figure_canvas.mpl_connect(\n            'motion_notify_event', self.UpdateStatusBar)\n        self.figure_canvas.Bind(wx.EVT_ENTER_WINDOW, self.ChangeCursor)\n\n        self.sizer = wx.BoxSizer(wx.VERTICAL)\n        self.sizer.Add(self.figure_canvas, 1, wx.LEFT | wx.TOP | wx.GROW)\n        self.SetSizer(self.sizer)\n        self.Fit()\n\n        self.statusBar = wx.StatusBar(self, -1)\n        self.SetStatusBar(self.statusBar)\n\n        self.toolbar = NavigationToolbar2Wx(self.figure_canvas)\n        self.sizer.Add(self.toolbar, 0, wx.LEFT | wx.EXPAND)\n        self.toolbar.Show()\n\n    def ChangeCursor(self, event):\n        self.figure_canvas.SetCursor(wx.Cursor(wx.CURSOR_BULLSEYE))\n\n    def UpdateStatusBar(self, event):\n        if event.inaxes:\n            self.statusBar.SetStatusText(f\"x={event.xdata}  y={event.ydata}\")\n\n\nclass App(wx.App):\n    def OnInit(self):\n        \"\"\"Create the main window and insert the custom frame.\"\"\"\n        frame = CanvasFrame()\n        self.SetTopWindow(frame)\n        frame.Show(True)\n        return True\n\n\nif __name__ == '__main__':\n    app = App()\n    app.MainLoop()",
                "filename": "galleries/examples/user_interfaces/wxcursor_demo_sgskip.py",
                "start_index": 0,
                "end_index": 1940,
                "start_line": 1,
                "end_line": 68,
                "max_line": 68,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": ""
            },
            {
                "code": "\"\"\"\n=================\nCross-hair cursor\n=================\n\nThis example adds a cross-hair as a data cursor.  The cross-hair is\nimplemented as regular line objects that are updated on mouse move.\n\nWe show three implementations:\n\n1) A simple cursor implementation that redraws the figure on every mouse move.\n   This is a bit slow, and you may notice some lag of the cross-hair movement.\n2) A cursor that uses blitting for speedup of the rendering.\n3) A cursor that snaps to data points.\n\nFaster cursoring is possible using native GUI drawing, as in\n:doc:`/gallery/user_interfaces/wxcursor_demo_sgskip`.\n\nThe mpldatacursor__ and mplcursors__ third-party packages can be used to\nachieve a similar effect.\n\n__ https://github.com/joferkington/mpldatacursor\n__ https://github.com/anntzer/mplcursors\n\n.. redirect-from:: /gallery/misc/cursor_demo\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.backend_bases import MouseEvent\n\n\nclass Cursor:\n    \"\"\"\n    A cross hair cursor.\n    \"\"\"\n    def __init__(self, ax):\n        self.ax = ax\n        self.horizontal_line = ax.axhline(color='k', lw=0.8, ls='--')\n        self.vertical_line = ax.axvline(color='k', lw=0.8, ls='--')\n        # text location in axes coordinates\n        self.text = ax.text(0.72, 0.9, '', transform=ax.transAxes)\n\n    def set_cross_hair_visible(self, visible):\n        need_redraw = self.horizontal_line.get_visible() != visible\n        self.horizontal_line.set_visible(visible)\n        self.vertical_line.set_visible(visible)\n        self.text.set_visible(visible)\n        return need_redraw\n\n    def on_mouse_move(self, event):\n        if not event.inaxes:\n            need_redraw = self.set_cross_hair_visible(False)\n            if need_redraw:\n                self.ax.figure.canvas.draw()\n        else:\n            self.set_cross_hair_visible(True)\n            x, y = event.xdata, event.ydata\n            # update the line positions\n            self.horizontal_line.set_ydata([y])\n            self.vertical_line.set_xdata([x])\n            self.text.set_text(f'x={x:1.2f}, y={y:1.2f}')\n            self.ax.figure.canvas.draw()\n\n\nx = np.arange(0, 1, 0.01)\ny = np.sin(2 * 2 * np.pi * x)\n\nfig, ax = plt.subplots()\nax.set_title('Simple cursor')\nax.plot(x, y, 'o')\ncursor = Cursor(ax)\nfig.canvas.mpl_connect('motion_notify_event', cursor.on_mouse_move)\n\n# Simulate a mouse move to (0.5, 0.5), needed for online docs\nt = ax.transData\nMouseEvent(\n    \"motion_notify_event\", ax.figure.canvas, *t.transform((0.5, 0.5))\n)._process()\n\n# %%\n# Faster redrawing using blitting\n# \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n# This technique stores the rendered plot as a background image. Only the\n# changed artists (cross-hair lines and text) are rendered anew. They are\n# combined with the background using blitting.\n#\n# This technique is significantly faster. It requires a bit more setup because\n# the background has to be stored without the cross-hair lines (see",
                "filename": "galleries/examples/event_handling/cursor_demo.py",
                "start_index": 0,
                "end_index": 2929,
                "start_line": 1,
                "end_line": 90,
                "max_line": 242,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": ""
            },
            {
                "code": "\"\"\"\n===========\nPath editor\n===========\n\nSharing events across GUIs.\n\nThis example demonstrates a cross-GUI application using Matplotlib event\nhandling to interact with and modify objects on the canvas.\n\n.. note::\n    This example exercises the interactive capabilities of Matplotlib, and this\n    will not appear in the static documentation. Please run this code on your\n    machine to see the interactivity.\n\n    You can copy and paste individual parts, or download the entire example\n    using the link at the bottom of the page.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.backend_bases import MouseButton\nfrom matplotlib.patches import PathPatch\nfrom matplotlib.path import Path\n\nfig, ax = plt.subplots()\n\npathdata = [\n    (Path.MOVETO, (1.58, -2.57)),\n    (Path.CURVE4, (0.35, -1.1)),\n    (Path.CURVE4, (-1.75, 2.0)),\n    (Path.CURVE4, (0.375, 2.0)),\n    (Path.LINETO, (0.85, 1.15)),\n    (Path.CURVE4, (2.2, 3.2)),\n    (Path.CURVE4, (3, 0.05)),\n    (Path.CURVE4, (2.0, -0.5)),\n    (Path.CLOSEPOLY, (1.58, -2.57)),\n]\n\ncodes, verts = zip(*pathdata)\npath = Path(verts, codes)\npatch = PathPatch(\n    path, facecolor='green', edgecolor='yellow', alpha=0.5)\nax.add_patch(patch)",
                "filename": "galleries/examples/event_handling/path_editor.py",
                "start_index": 0,
                "end_index": 1206,
                "start_line": 1,
                "end_line": 45,
                "max_line": 149,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": ""
            },
            {
                "code": "class Cursor(AxesWidget):",
                "filename": "lib/matplotlib/widgets.py",
                "start_index": 70590,
                "end_index": 70615,
                "start_line": 1949,
                "end_line": 1949,
                "max_line": 4245,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": ""
            },
            {
                "code": "function on_mouse_event_closure(name) {\n        /* User Agent sniffing is bad, but WebKit is busted:\n         * https://bugs.webkit.org/show_bug.cgi?id=144526\n         * https://bugs.webkit.org/show_bug.cgi?id=181818\n         * The worst that happens here is that they get an extra browser\n         * selection when dragging, if this check fails to catch them.\n         */\n        var UA = navigator.userAgent;\n        var isWebKit = /AppleWebKit/.test(UA) && !/Chrome/.test(UA);\n        if(isWebKit) {\n            return function (event) {\n                /* This prevents the web browser from automatically changing to\n                 * the text insertion cursor when the button is pressed. We\n                 * want to control all of the cursor setting manually through\n                 * the 'cursor' event from matplotlib */\n                event.preventDefault()\n                return fig.mouse_event(event, name);\n            };\n        } else {\n            return function (event) {\n                return fig.mouse_event(event, name);\n            };\n        }\n    }\n\n    canvas_div.addEventListener(\n        'mousedown',\n        on_mouse_event_closure('button_press')\n    );\n    canvas_div.addEventListener(\n        'mouseup',\n        on_mouse_event_closure('button_release')\n    );\n    canvas_div.addEventListener(\n        'dblclick',\n        on_mouse_event_closure('dblclick')\n    );\n    // Throttle sequential mouse events to 1 every 20ms.\n    canvas_div.addEventListener(\n        'mousemove',\n        on_mouse_event_closure('motion_notify')\n    );\n\n    canvas_div.addEventListener(\n        'mouseenter',\n        on_mouse_event_closure('figure_enter')\n    );\n    canvas_div.addEventListener(\n        'mouseleave',\n        on_mouse_event_closure('figure_leave')\n    );\n\n    canvas_div.addEventListener('wheel', function (event) {\n        if (event.deltaY < 0) {\n            event.step = 1;\n        } else {\n            event.step = -1;\n        }\n        on_mouse_event_closure('scroll')(event);\n    });\n\n    canvas_div.appendChild(canvas);\n    canvas_div.appendChild(rubberband_canvas);\n\n    this.rubberband_context = rubberband_canvas.getContext('2d');\n    this.rubberband_context.strokeStyle = '#000000';\n\n    this._resize_canvas = function (width, height, forward) {\n        if (forward) {\n            canvas_div.style.width = width + 'px';\n            canvas_div.style.height = height + 'px';\n        }\n    };\n\n    // Disable right mouse context menu.\n    canvas_div.addEventListener('contextmenu', function (_e) {\n        event.preventDefault();\n        return false;\n    });\n\n    function set_focus() {\n        canvas.focus();\n        canvas_div.focus();\n    }\n\n    window.setTimeout(set_focus, 100);\n};",
                "filename": "lib/matplotlib/backends/web_backend/js/mpl.js",
                "start_index": 8227,
                "end_index": 10950,
                "start_line": 249,
                "end_line": 695,
                "max_line": 695,
                "git_instance": "github",
                "repo_name": "testbed/matplotlib__matplotlib__3.5",
                "sha": ""
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "lib/matplotlib/widgets.py": [
                {
                    "chunk": {
                        "code": "\"\"\"\n    Provide a vertical (default) and/or horizontal line cursor shared between\n    multiple Axes.\n\n    For the cursor to remain responsive you must keep a reference to it.\n\n    Parameters\n    ----------\n    canvas : object\n        This parameter is entirely unused and only kept for back-compatibility.\n\n    axes : list of `matplotlib.axes.Axes`\n        The `~.axes.Axes` to attach the cursor to.\n\n    useblit : bool, default: True\n        Use blitting for faster drawing if supported by the backend.\n        See the tutorial :ref:`blitting`\n        for details.\n\n    horizOn : bool, default: False\n        Whether to draw the horizontal line.\n\n    vertOn : bool, default: True\n        Whether to draw the vertical line.\n\n    Other Parameters\n    ----------------\n    **lineprops\n        `.Line2D` properties that control the appearance of the lines.\n        See also `~.Axes.axhline`.\n\n    Examples\n    --------\n    See :doc:`/gallery/widgets/multicursor`.\n    \"\"\"\n\n    def __init__(self, canvas, axes, *, useblit=True, horizOn=False, vertOn=True,\n                 **lineprops):\n        # canvas is stored only to provide the deprecated .canvas attribute;\n        # once it goes away the unused argument won't need to be stored at all.\n        self._canvas = canvas\n\n        self.axes = axes\n        self.horizOn = horizOn\n        self.vertOn = vertOn\n\n        self._canvas_infos = {\n            ax.figure.canvas: {\"cids\": [], \"background\": None} for ax in axes}\n\n        xmin, xmax = axes[-1].get_xlim()\n        ymin, ymax = axes[-1].get_ylim()\n        xmid = 0.5 * (xmin + xmax)\n        ymid = 0.5 * (ymin + ymax)\n\n        self.visible = True\n        self.useblit = (\n            useblit\n            and all(canvas.supports_blit for canvas in self._canvas_infos))\n\n        if self.useblit:\n            lineprops['animated'] = True\n\n        self.vlines = [ax.axvline(xmid, visible=False, **lineprops)\n                       for ax in axes]\n        self.hlines = [ax.axhline(ymid, visible=False, **lineprops)\n                       for ax in axes]\n\n        self.connect()\n\n    needclear = _api.deprecated(\"3.7\")(lambda self: False)\n\n    def connect(self):\n        \"\"\"Connect events.\"\"\"\n        for canvas, info in self._canvas_infos.items():\n            info[\"cids\"] = [\n                canvas.mpl_connect('motion_notify_event', self.onmove),\n                canvas.mpl_connect('draw_event', self.clear),\n            ]\n\n    def disconnect(self):\n        \"\"\"Disconnect events.\"\"\"\n        for canvas, info in self._canvas_infos.items():\n            for cid in info[\"cids\"]:\n                canvas.mpl_disconnect(cid)\n            info[\"cids\"].clear()",
                        "filename": "lib/matplotlib/widgets.py",
                        "start_index": 73684,
                        "end_index": 76335,
                        "start_line": 1,
                        "end_line": 2127,
                        "max_line": 4245,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.5",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the implementation of the MultiCursor class, including the __init__ method where the check for all Axes being in the same Figure should be added as per the issue description."
                }
            ],
            "galleries/examples/widgets/multicursor.py": [
                {
                    "chunk": {
                        "code": "\"\"\"\n===========\nMulticursor\n===========\n\nShowing a cursor on multiple plots simultaneously.\n\nThis example generates three axes split over two different figures.  On\nhovering the cursor over data in one subplot, the values of that datapoint are\nshown in all axes.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.widgets import MultiCursor\n\nt = np.arange(0.0, 2.0, 0.01)\ns1 = np.sin(2*np.pi*t)\ns2 = np.sin(3*np.pi*t)\ns3 = np.sin(4*np.pi*t)\n\nfig, (ax1, ax2) = plt.subplots(2, sharex=True)\nax1.plot(t, s1)\nax2.plot(t, s2)\nfig, ax3 = plt.subplots()\nax3.plot(t, s3)\n\nmulti = MultiCursor(None, (ax1, ax2, ax3), color='r', lw=1)\nplt.show()\n\n# %%\n#\n# .. admonition:: References\n#\n#    The use of the following functions, methods, classes and modules is shown\n#    in this example:\n#\n#    - `matplotlib.widgets.MultiCursor`",
                        "filename": "galleries/examples/widgets/multicursor.py",
                        "start_index": 0,
                        "end_index": 838,
                        "start_line": 1,
                        "end_line": 39,
                        "max_line": 39,
                        "git_instance": "github",
                        "repo_name": "testbed/matplotlib__matplotlib__3.5",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is an example of how the MultiCursor widget is used. It may need to be updated to reflect the changes made to the MultiCursor class or to serve as a test case to verify the fix."
                }
            ]
        },
        "solution_task": "To implement the feature where `MultiCursor` can bind to axes in more than one figure, you can follow these steps:\n\n- Modify the `MultiCursor` class to accept multiple canvases.\n- Update the `connect` method to connect the motion and draw events to all canvases.\n- Update the `onmove` and `clear` methods to handle events from multiple canvases.\n\nHere's a high-level overview of the changes needed in the `MultiCursor` class:\n\n```python\nclass MultiCursor(Widget):\n    def __init__(self, canvas, axes, *, useblit=True, horizOn=False, vertOn=True, **lineprops):\n        # ... existing code ...\n\n        # Change to support multiple figures\n        self._canvas_infos = {\n            ax.figure.canvas: {\"cids\": [], \"background\": None} for ax in axes\n        }\n\n        # ... existing code ...\n\n    def connect(self):\n        \"\"\"Connect events to all canvases.\"\"\"\n        for canvas, info in self._canvas_infos.items():\n            info[\"cids\"] = [\n                canvas.mpl_connect('motion_notify_event', self.onmove),\n                canvas.mpl_connect('draw_event', self.clear),\n            ]\n\n    def onmove(self, event):\n        \"\"\"On mouse move event.\"\"\"\n        # Update to handle multiple canvases\n        for canvas, info in self._canvas_infos.items():\n            if event.canvas == canvas:\n                # ... existing code to update lines ...\n\n    def clear(self, event):\n        \"\"\"Clear the cursor.\"\"\"\n        # Update to handle multiple canvases\n        for canvas, info in self._canvas_infos.items():\n            if event.canvas == canvas:\n                # ... existing code to clear lines ...\n```\n\nIn the `__init__` method, the `self._canvas_infos` dictionary is updated to handle multiple canvases. The `connect` method is modified to connect the motion and draw events to all canvases in `self._canvas_infos`.\n\nThe `onmove` and `clear` methods are updated to handle events from multiple canvases by checking `event.canvas` against the canvases in `self._canvas_infos`.\n\nThis is a high-level overview, and the actual implementation may require additional adjustments to handle edge cases and ensure that the cursor lines and text annotations are correctly updated across all figures.\n\nFor further research, you can look into the following:\n- Matplotlib's event handling: https://matplotlib.org/stable/users/event_handling.html\n- The `mplcursors` library for more advanced cursor functionality: https://github.com/anntzer/mplcursors",
        "bouncer_response": {
            "score": 8,
            "criteria": "The RESPONSE must provide precise, actionable guidance and directly address all aspects of the described feature request to facilitate its successful implementation or improvement.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable plan for implementing the feature where `MultiCursor` can bind to axes in more than one figure. It suggests modifying the `MultiCursor` class to handle multiple canvases, updating the `connect` method, and adjusting the `onmove` and `clear` methods to handle events from multiple canvases. The RESPONSE also includes a high-level overview of the code changes needed, which is directly relevant to the feature request. Additionally, it provides references to Matplotlib's event handling and the `mplcursors` library for further research. The inclusion of code snippets to check is a valuable resource for developers working on this feature. However, the RESPONSE does not address the suggestion from the original issue to add a check that all Axes are in the same Figure on init and raise otherwise, which is a part of the feature request. Therefore, the RESPONSE is not fully comprehensive, which is why it does not receive a perfect score.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711697968.443975,
        "result": "To implement the feature where `MultiCursor` can bind to axes in more than one figure, you can follow these steps:\n\n- Modify the `MultiCursor` class to accept multiple canvases.\n- Update the `connect` method to connect the motion and draw events to all canvases.\n- Update the `onmove` and `clear` methods to handle events from multiple canvases.\n\nHere's a high-level overview of the changes needed in the `MultiCursor` class:\n\n```python\nclass MultiCursor(Widget):\n    def __init__(self, canvas, axes, *, useblit=True, horizOn=False, vertOn=True, **lineprops):\n        # ... existing code ...\n\n        # Change to support multiple figures\n        self._canvas_infos = {\n            ax.figure.canvas: {\"cids\": [], \"background\": None} for ax in axes\n        }\n\n        # ... existing code ...\n\n    def connect(self):\n        \"\"\"Connect events to all canvases.\"\"\"\n        for canvas, info in self._canvas_infos.items():\n            info[\"cids\"] = [\n                canvas.mpl_connect('motion_notify_event', self.onmove),\n                canvas.mpl_connect('draw_event', self.clear),\n            ]\n\n    def onmove(self, event):\n        \"\"\"On mouse move event.\"\"\"\n        # Update to handle multiple canvases\n        for canvas, info in self._canvas_infos.items():\n            if event.canvas == canvas:\n                # ... existing code to update lines ...\n\n    def clear(self, event):\n        \"\"\"Clear the cursor.\"\"\"\n        # Update to handle multiple canvases\n        for canvas, info in self._canvas_infos.items():\n            if event.canvas == canvas:\n                # ... existing code to clear lines ...\n```\n\nIn the `__init__` method, the `self._canvas_infos` dictionary is updated to handle multiple canvases. The `connect` method is modified to connect the motion and draw events to all canvases in `self._canvas_infos`.\n\nThe `onmove` and `clear` methods are updated to handle events from multiple canvases by checking `event.canvas` against the canvases in `self._canvas_infos`.\n\nThis is a high-level overview, and the actual implementation may require additional adjustments to handle edge cases and ensure that the cursor lines and text annotations are correctly updated across all figures.\n\nFor further research, you can look into the following:\n- Matplotlib's event handling: https://matplotlib.org/stable/users/event_handling.html\n- The `mplcursors` library for more advanced cursor functionality: https://github.com/anntzer/mplcursors\n\n### Code snippets to check\n\n-  \u2192 [lib](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//lib) \u2192 [matplotlib](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//lib/matplotlib)- [Lines 1 - 2127](https://github.com/testbed/matplotlib__matplotlib__3.5/blob//lib/matplotlib/widgets.py#L1-L2127)\n\n This snippet contains the implementation of the MultiCursor class, including the __init__ method where the check for all Axes being in the same Figure should be added as per the issue description.\n-  \u2192 [galleries](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries) \u2192 [examples](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries/examples) \u2192 [widgets](https://github.com/testbed/matplotlib__matplotlib__3.5/tree//galleries/examples/widgets)- [Lines 1 - 39](https://github.com/testbed/matplotlib__matplotlib__3.5/blob//galleries/examples/widgets/multicursor.py#L1-L39)\n\n This snippet is an example of how the MultiCursor widget is used. It may need to be updated to reflect the changes made to the MultiCursor class or to serve as a test case to verify the fix."
    }
}