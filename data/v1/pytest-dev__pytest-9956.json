{
    "id": "pytest-dev__pytest-9956",
    "repo_name": "testbed/pytest-dev__pytest__7.2",
    "task_id": 4489345056906076056,
    "title": "Test functions that return non-None should raise a warning/error",
    "body": "Consider this test:\r\n\r\n```python\r\n# The function we're testing\r\ndef foo(a: int, b: int) -> int:\r\n  return a * 3 + b\r\n\r\n@pytest.mark.parametrize(['a', 'b', 'result'], [\r\n  [1, 2, 5],\r\n  [2, 3, 8],\r\n  [5, 3, 18],\r\n])\r\ndef test_foo(a, b, result):\r\n  return foo(a, b) == result\r\n```\r\n\r\nDid you spot the error? The second parametrization has a typo, `2 * 3 + 3` is 9, not 8. But this test actually doesn't test anything, because it returns the assertion rather than asserting it. This is a common enough mistake, and it wouldn't normally be a problem except that it can silently cause false positives in test suites.\r\n\r\nI propose that test functions that return anything except None fail with a message that cues users that they probably meant to assert rather than return. This feature could be disabled (or enabled, if there are backwards-compatibility issues) via a config flag if necessary.\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pytest-dev__pytest__7.2.git",
    "requested_commit": "",
    "mayil_response": "- Correct the typo in the parametrization data from `[2, 3, 8]` to `[2, 3, 9]` in the `@pytest.mark.parametrize` decorator for the `test_foo` function.\n- Replace the `return foo(a, b) == result` statement in the `test_foo` function with `assert foo(a, b) == result` to properly use the assertion mechanism of pytest.\n- Implement a pytest hook to check for return values in test functions and raise an error if a non-None value is returned. This can be done by creating a function like `pytest_runtest_protocol(item)` and using `pytest.fail()` if `item.function_returns_non_none()` is `True`.\n- Add a configuration flag, such as `warn_on_return_value_in_tests`, to the pytest configuration system to enable or disable the feature that checks for return values in test functions. This can be done in a function like `pytest_configure(config)` where you set `config.option.warn_on_return_value_in_tests = True` or `False` based on the desired default behavior or user configuration.\n\n### Code snippets to check\n\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__7.2/tree//bench)- [Lines 1 - 14](https://github.com/testbed/pytest-dev__pytest__7.2/blob//bench/manyparam.py#L1-L14)\n\n This snippet contains test functions which may need to be reviewed to ensure they are using assertions correctly, as per the issue description.\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__7.2/tree//bench)- [Lines 1 - 9](https://github.com/testbed/pytest-dev__pytest__7.2/blob//bench/skip.py#L1-L9)\n\n This snippet includes a test function that could potentially return a value instead of asserting, which is relevant to the issue.\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__7.2/tree//bench)- [Lines 1 - 2](https://github.com/testbed/pytest-dev__pytest__7.2/blob//bench/empty.py#L1-L2)\n\n This snippet dynamically generates test functions which should be checked to ensure they follow the correct pattern of asserting rather than returning values.\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__7.2/tree//bench)- [Lines 1 - 11](https://github.com/testbed/pytest-dev__pytest__7.2/blob//bench/xunit.py#L1-L11)\n\n This snippet also generates test functions and should be reviewed for the same reasons as the other test-related snippets.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.000239,
        "snippet_processor": 0.03833,
        "issue_star_creation": 0.025259999999999998,
        "issue_star_solver": 0.03222,
        "bouncer": 0.02645
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711733684.4704692,
        "relevant_snippets": [
            {
                "code": "import pytest\n\n\n@pytest.fixture(scope=\"module\", params=range(966))\ndef foo(request):\n    return request.param\n\n\ndef test_it(foo):\n    pass\n\n\ndef test_it2(foo):\n    pass",
                "filename": "bench/manyparam.py",
                "start_index": 0,
                "end_index": 168,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.2",
                "sha": ""
            },
            {
                "code": "import pytest\n\nSKIP = True\n\n\n@pytest.mark.parametrize(\"x\", range(5000))\ndef test_foo(x):\n    if SKIP:\n        pytest.skip(\"heh\")",
                "filename": "bench/skip.py",
                "start_index": 0,
                "end_index": 128,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.2",
                "sha": ""
            },
            {
                "code": "rtd:\n  project: pytest",
                "filename": ".github/config.yml",
                "start_index": 0,
                "end_index": 22,
                "start_line": 1,
                "end_line": 2,
                "max_line": 2,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.2",
                "sha": ""
            },
            {
                "code": "blank_issues_enabled: false\ncontact_links:\n  - name: \u2753 Support Question\n    url: https://github.com/pytest-dev/pytest/discussions\n    about: Use GitHub's new Discussions feature for questions",
                "filename": ".github/ISSUE_TEMPLATE/config.yml",
                "start_index": 0,
                "end_index": 191,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.2",
                "sha": ""
            },
            {
                "code": "for i in range(1000):\n    exec(\"def test_func_%d(): pass\" % i)",
                "filename": "bench/empty.py",
                "start_index": 0,
                "end_index": 62,
                "start_line": 1,
                "end_line": 2,
                "max_line": 2,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.2",
                "sha": ""
            },
            {
                "code": "\"\"\"\nThis script is part of the pytest release process which is triggered manually in the Actions\ntab of the repository.\n\nThe user will need to enter the base branch to start the release from (for example\n``6.1.x`` or ``main``) and if it should be a major release.\n\nThe appropriate version will be obtained based on the given branch automatically.\n\nAfter that, it will create a release using the `release` tox environment, and push a new PR.\n\n**Token**: currently the token from the GitHub Actions is used, pushed with\n`pytest bot <pytestbot@gmail.com>` commit author.\n\"\"\"\nimport argparse\nimport re\nfrom pathlib import Path\nfrom subprocess import check_call\nfrom subprocess import check_output\nfrom subprocess import run\n\nfrom colorama import Fore\nfrom colorama import init\nfrom github3.repos import Repository\n\n\nclass InvalidFeatureRelease(Exception):\n    pass\n\n\nSLUG = \"pytest-dev/pytest\"\n\nPR_BODY = \"\"\"\\\nCreated automatically from manual trigger.\n\nOnce all builds pass and it has been **approved** by one or more maintainers, the build\ncan be released by pushing a tag `{version}` to this repository.\n\"\"\"\n\n\ndef login(token: str) -> Repository:\n    import github3\n\n    github = github3.login(token=token)\n    owner, repo = SLUG.split(\"/\")\n    return github.repository(owner, repo)",
                "filename": "scripts/prepare-release-pr.py",
                "start_index": 0,
                "end_index": 1281,
                "start_line": 1,
                "end_line": 46,
                "max_line": 174,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.2",
                "sha": ""
            },
            {
                "code": "-   repo: local\n    hooks:\n    -   id: rst\n        name: rst\n        entry: rst-lint --encoding utf-8\n        files: ^(RELEASING.rst|README.rst|TIDELIFT.rst)$\n        language: python\n        additional_dependencies: [pygments, restructuredtext_lint]\n    -   id: changelogs-rst\n        name: changelog filenames\n        language: fail\n        entry: 'changelog files must be named ####.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst'\n        exclude: changelog/(\\d+\\.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst|README.rst|_template.rst)\n        files: ^changelog/\n    -   id: py-deprecated\n        name: py library is deprecated\n        language: pygrep\n        entry: >\n            (?x)\\bpy\\.(\n                _code\\.|\n                builtin\\.|\n                code\\.|\n                io\\.|\n                path\\.local\\.sysfind|\n                process\\.|\n                std\\.|\n                error\\.|\n                xml\\.\n            )\n        types: [python]\n    -   id: py-path-deprecated\n        name: py.path usage is deprecated\n        exclude: docs|src/_pytest/deprecated.py|testing/deprecated_test.py|src/_pytest/legacypath.py\n        language: pygrep\n        entry: \\bpy\\.path\\.local\n        types: [python]",
                "filename": ".pre-commit-config.yaml",
                "start_index": 2166,
                "end_index": 3442,
                "start_line": 73,
                "end_line": 108,
                "max_line": 108,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.2",
                "sha": ""
            },
            {
                "code": "# shim for pylib going away\n# if pylib is installed this file will get skipped\n# (`py/__init__.py` has higher precedence)\nimport sys\n\nimport _pytest._py.error as error\nimport _pytest._py.path as path\n\nsys.modules[\"py.error\"] = error\nsys.modules[\"py.path\"] = path",
                "filename": "src/py.py",
                "start_index": 0,
                "end_index": 262,
                "start_line": 1,
                "end_line": 10,
                "max_line": 10,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.2",
                "sha": ""
            },
            {
                "code": "for i in range(5000):\n    exec(\n        f\"\"\"\nclass Test{i}:\n    @classmethod\n    def setup_class(cls): pass\n    def test_1(self): pass\n    def test_2(self): pass\n    def test_3(self): pass\n\"\"\"\n    )",
                "filename": "bench/xunit.py",
                "start_index": 0,
                "end_index": 198,
                "start_line": 1,
                "end_line": 11,
                "max_line": 11,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.2",
                "sha": ""
            },
            {
                "code": "-   repo: https://github.com/psf/black\n    rev: 23.7.0\n    hooks:\n    -   id: black\n        args: [--safe, --quiet]\n-   repo: https://github.com/asottile/blacken-docs\n    rev: 1.16.0\n    hooks:\n    -   id: blacken-docs\n        additional_dependencies: [black==23.7.0]\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: fix-encoding-pragma\n        args: [--remove]\n    -   id: check-yaml\n    -   id: debug-statements\n        exclude: _pytest/(debugging|hookspec).py\n        language_version: python3\n-   repo: https://github.com/PyCQA/autoflake\n    rev: v2.2.0\n    hooks:\n    -   id: autoflake\n        name: autoflake\n        args: [\"--in-place\", \"--remove-unused-variables\", \"--remove-all-unused-imports\"]\n        language: python\n        files: \\.py$\n-   repo: https://github.com/PyCQA/flake8\n    rev: 6.1.0\n    hooks:\n    -   id: flake8\n        language_version: python3\n        additional_dependencies:\n          - flake8-typing-imports==1.12.0\n          - flake8-docstrings==1.5.0\n-   repo: https://github.com/asottile/reorder-python-imports\n    rev: v3.10.0\n    hooks:\n    -   id: reorder-python-imports\n        args: ['--application-directories=.:src', --py38-plus]\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v3.10.1\n    hooks:\n    -   id: pyupgrade\n        args: [--py38-plus]\n-   repo: https://github.com/asottile/setup-cfg-fmt\n    rev: v2.4.0\n    hooks:\n    -   id: setup-cfg-fmt\n        args: [\"--max-py-version=3.12\", \"--include-version-classifiers\"]\n-   repo: https://github.com/pre-commit/pygrep-hooks\n    rev: v1.10.0\n    hooks:\n    -   id: python-use-type-annotations\n-   repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.5.1\n    hooks:\n    -   id: mypy\n        files: ^(src/|testing/)\n        args: []\n        additional_dependencies:\n          - iniconfig>=1.1.0\n          - attrs>=19.2.0\n          - packaging\n          - tomli\n          - types-pkg_resources\n            # for mypy running on python>=3.11 since exceptiongroup is only a dependency\n            # on <3.11\n          - exceptiongroup>=1.0.0rc8",
                "filename": ".pre-commit-config.yaml",
                "start_index": 7,
                "end_index": 2165,
                "start_line": 2,
                "end_line": 72,
                "max_line": 108,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__7.2",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "bench/manyparam.py": [
                {
                    "chunk": {
                        "code": "import pytest\n\n\n@pytest.fixture(scope=\"module\", params=range(966))\ndef foo(request):\n    return request.param\n\n\ndef test_it(foo):\n    pass\n\n\ndef test_it2(foo):\n    pass",
                        "filename": "bench/manyparam.py",
                        "start_index": 0,
                        "end_index": 168,
                        "start_line": 1,
                        "end_line": 14,
                        "max_line": 14,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__7.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains test functions which may need to be reviewed to ensure they are using assertions correctly, as per the issue description."
                }
            ],
            "bench/skip.py": [
                {
                    "chunk": {
                        "code": "import pytest\n\nSKIP = True\n\n\n@pytest.mark.parametrize(\"x\", range(5000))\ndef test_foo(x):\n    if SKIP:\n        pytest.skip(\"heh\")",
                        "filename": "bench/skip.py",
                        "start_index": 0,
                        "end_index": 128,
                        "start_line": 1,
                        "end_line": 9,
                        "max_line": 9,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__7.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet includes a test function that could potentially return a value instead of asserting, which is relevant to the issue."
                }
            ],
            "bench/empty.py": [
                {
                    "chunk": {
                        "code": "for i in range(1000):\n    exec(\"def test_func_%d(): pass\" % i)",
                        "filename": "bench/empty.py",
                        "start_index": 0,
                        "end_index": 62,
                        "start_line": 1,
                        "end_line": 2,
                        "max_line": 2,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__7.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet dynamically generates test functions which should be checked to ensure they follow the correct pattern of asserting rather than returning values."
                }
            ],
            "bench/xunit.py": [
                {
                    "chunk": {
                        "code": "for i in range(5000):\n    exec(\n        f\"\"\"\nclass Test{i}:\n    @classmethod\n    def setup_class(cls): pass\n    def test_1(self): pass\n    def test_2(self): pass\n    def test_3(self): pass\n\"\"\"\n    )",
                        "filename": "bench/xunit.py",
                        "start_index": 0,
                        "end_index": 198,
                        "start_line": 1,
                        "end_line": 11,
                        "max_line": 11,
                        "git_instance": "github",
                        "repo_name": "testbed/pytest-dev__pytest__7.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet also generates test functions and should be reviewed for the same reasons as the other test-related snippets."
                }
            ]
        },
        "solution_task": "- Correct the typo in the parametrization data from `[2, 3, 8]` to `[2, 3, 9]` in the `@pytest.mark.parametrize` decorator for the `test_foo` function.\n- Replace the `return foo(a, b) == result` statement in the `test_foo` function with `assert foo(a, b) == result` to properly use the assertion mechanism of pytest.\n- Implement a pytest hook to check for return values in test functions and raise an error if a non-None value is returned. This can be done by creating a function like `pytest_runtest_protocol(item)` and using `pytest.fail()` if `item.function_returns_non_none()` is `True`.\n- Add a configuration flag, such as `warn_on_return_value_in_tests`, to the pytest configuration system to enable or disable the feature that checks for return values in test functions. This can be done in a function like `pytest_configure(config)` where you set `config.option.warn_on_return_value_in_tests = True` or `False` based on the desired default behavior or user configuration.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a comprehensive solution to the problem described in the PROMPT. It correctly identifies the typo in the parametrization data and provides the correct values. It also addresses the main issue of the test function returning a value instead of asserting by suggesting to replace the return statement with an assert statement. Furthermore, the RESPONSE proposes the implementation of a pytest hook to check for return values in test functions, which is a direct solution to the proposed feature of failing tests that return non-None values. The addition of a configuration flag to enable or disable this feature is also a thoughtful consideration for backward compatibility. The RESPONSE also provides relevant code snippets to check, which shows an understanding of where the proposed changes need to be reviewed and applied.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711733763.665015,
        "result": "- Correct the typo in the parametrization data from `[2, 3, 8]` to `[2, 3, 9]` in the `@pytest.mark.parametrize` decorator for the `test_foo` function.\n- Replace the `return foo(a, b) == result` statement in the `test_foo` function with `assert foo(a, b) == result` to properly use the assertion mechanism of pytest.\n- Implement a pytest hook to check for return values in test functions and raise an error if a non-None value is returned. This can be done by creating a function like `pytest_runtest_protocol(item)` and using `pytest.fail()` if `item.function_returns_non_none()` is `True`.\n- Add a configuration flag, such as `warn_on_return_value_in_tests`, to the pytest configuration system to enable or disable the feature that checks for return values in test functions. This can be done in a function like `pytest_configure(config)` where you set `config.option.warn_on_return_value_in_tests = True` or `False` based on the desired default behavior or user configuration.\n\n### Code snippets to check\n\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__7.2/tree//bench)- [Lines 1 - 14](https://github.com/testbed/pytest-dev__pytest__7.2/blob//bench/manyparam.py#L1-L14)\n\n This snippet contains test functions which may need to be reviewed to ensure they are using assertions correctly, as per the issue description.\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__7.2/tree//bench)- [Lines 1 - 9](https://github.com/testbed/pytest-dev__pytest__7.2/blob//bench/skip.py#L1-L9)\n\n This snippet includes a test function that could potentially return a value instead of asserting, which is relevant to the issue.\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__7.2/tree//bench)- [Lines 1 - 2](https://github.com/testbed/pytest-dev__pytest__7.2/blob//bench/empty.py#L1-L2)\n\n This snippet dynamically generates test functions which should be checked to ensure they follow the correct pattern of asserting rather than returning values.\n-  \u2192 [bench](https://github.com/testbed/pytest-dev__pytest__7.2/tree//bench)- [Lines 1 - 11](https://github.com/testbed/pytest-dev__pytest__7.2/blob//bench/xunit.py#L1-L11)\n\n This snippet also generates test functions and should be reviewed for the same reasons as the other test-related snippets."
    }
}