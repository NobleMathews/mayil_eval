{
    "id": "django__django-11695",
    "repo_name": "testbed/django__django__3.0",
    "task_id": 2464001243126881288,
    "title": "Rate-limit autocomplete widgets Ajax requests",
    "body": "Description\n\t \n\t\t(last modified by Federico Jaramillo Mart\u00ednez)\n\t \nThe current implementation of the Ajax autocomplete widget using Select2 in Django triggers a request for every key-press. This creates unnecessary load on servers.\nThis patch rate-limit the requests by adding a delay using the ajax.delay option provided by Select2.\n\u200bhttps://github.com/django/django/pull/11695\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/django__django__3.0.git",
    "requested_commit": "",
    "mayil_response": "To implement the rate-limiting feature for the autocomplete widgets' Ajax requests in the Django admin, you can follow these steps:\n\n- Modify the `build_attrs` method in the `widgets.py` file to include the `data-ajax--delay` attribute with the desired delay value (in milliseconds). This attribute is used by Select2 to delay the Ajax request after the last keystroke.\n\nHere's the updated `build_attrs` method:\n\n```python\ndef build_attrs(self, base_attrs, extra_attrs=None):\n    \"\"\"\n    Set select2's AJAX attributes.\n    \"\"\"\n    attrs = super().build_attrs(base_attrs, extra_attrs=extra_attrs)\n    attrs.setdefault(\"class\", \"\")\n    attrs.update(\n        {\n            \"data-ajax--cache\": \"true\",\n            \"data-ajax--delay\": 250,  # Set the delay here\n            \"data-ajax--type\": \"GET\",\n            \"data-ajax--url\": self.get_url(),\n            \"data-app-label\": self.field.model._meta.app_label,\n            \"data-model-name\": self.field.model._meta.model_name,\n            \"data-field-name\": self.field.name,\n            \"data-theme\": \"admin-autocomplete\",\n            \"data-allow-clear\": json.dumps(not self.is_required),\n            \"data-placeholder\": \"\",\n            \"lang\": self.i18n_name,\n            \"class\": attrs[\"class\"] + (\" \" if attrs[\"class\"] else \"\") + \"admin-autocomplete\",\n        }\n    )\n    return attrs\n```\n\n- Ensure that the `data-ajax--delay` attribute is being set correctly in the HTML output by checking the rendered admin form in the browser.\n\n- Test the autocomplete widget to confirm that the Ajax requests are being rate-limited as expected. The network tab in the browser's developer tools can be used to observe the delay between keystrokes and the Ajax request being sent.\n\nNo changes are required in the `autocomplete.js` file since the `data-ajax--delay` attribute is already being utilized by Select2, as long as it is set in the HTML attributes of the widget.\n\nRemember to test the changes thoroughly to ensure that the feature works as expected and does not introduce any regressions.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__3.0/tree//django) \u2192 [contrib](https://github.com/testbed/django__django__3.0/tree//django/contrib) \u2192 [admin](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin) \u2192 [static](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin/static) \u2192 [admin](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin/static/admin) \u2192 [js](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin/static/admin/js)- [Lines 1 - 33](https://github.com/testbed/django__django__3.0/blob//django/contrib/admin/static/admin/js/autocomplete.js#L1-L33)\n\n This code initializes the Select2 widget and is where the ajax configuration would be set, which is necessary for implementing the rate-limiting feature.\n-  \u2192 [django](https://github.com/testbed/django__django__3.0/tree//django) \u2192 [contrib](https://github.com/testbed/django__django__3.0/tree//django/contrib) \u2192 [admin](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin)- [Lines 1 - 526](https://github.com/testbed/django__django__3.0/blob//django/contrib/admin/widgets.py#L1-L526)\n\n This code sets the data attributes for Select2's AJAX configuration, including the delay, which is directly related to the rate-limiting feature that needs to be implemented.\n-  \u2192 [django](https://github.com/testbed/django__django__3.0/tree//django) \u2192 [contrib](https://github.com/testbed/django__django__3.0/tree//django/contrib) \u2192 [admin](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin) \u2192 [static](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin/static) \u2192 [admin](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin/static/admin) \u2192 [js](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin/static/admin/js) \u2192 [vendor](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin/static/admin/js/vendor) \u2192 [select2](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin/static/admin/js/vendor/select2)- [Lines 3557 - 6800](https://github.com/testbed/django__django__3.0/blob//django/contrib/admin/static/admin/js/vendor/select2/select2.full.js#L3557-L6800)\n\n This code defines the AjaxAdapter for Select2, which handles the AJAX requests. Adjustments here may be necessary to ensure the delay configuration is respected.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.000263,
        "snippet_processor": 0.03901,
        "issue_star_creation": 0.01774,
        "issue_star_solver": 0.07738,
        "bouncer": 0.02554
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711728338.5294561,
        "relevant_snippets": [
            {
                "code": "'use strict';\n{\n    const $ = django.jQuery;\n\n    $.fn.djangoAdminSelect2 = function() {\n        $.each(this, function(i, element) {\n            $(element).select2({\n                ajax: {\n                    data: (params) => {\n                        return {\n                            term: params.term,\n                            page: params.page,\n                            app_label: element.dataset.appLabel,\n                            model_name: element.dataset.modelName,\n                            field_name: element.dataset.fieldName\n                        };\n                    }\n                }\n            });\n        });\n        return this;\n    };\n\n    $(function() {\n        // Initialize all autocomplete widgets except the one in the template\n        // form used when a new formset is added.\n        $('.admin-autocomplete').not('[name*=__prefix__]').djangoAdminSelect2();\n    });\n\n    document.addEventListener('formset:added', (event) => {\n        $(event.target).find('.admin-autocomplete').djangoAdminSelect2();\n    });\n}",
                "filename": "django/contrib/admin/static/admin/js/autocomplete.js",
                "start_index": 0,
                "end_index": 1059,
                "start_line": 1,
                "end_line": 33,
                "max_line": 33,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "\"\"\"\n    Select widget mixin that loads options from AutocompleteJsonView via AJAX.\n\n    Renders the necessary data attributes for select2 and adds the static form\n    media.\n    \"\"\"\n\n    url_name = \"%s:autocomplete\"\n\n    def __init__(self, field, admin_site, attrs=None, choices=(), using=None):\n        self.field = field\n        self.admin_site = admin_site\n        self.db = using\n        self.choices = choices\n        self.attrs = {} if attrs is None else attrs.copy()\n        self.i18n_name = get_select2_language()\n\n    def get_url(self):\n        return reverse(self.url_name % self.admin_site.name)\n\n    def build_attrs(self, base_attrs, extra_attrs=None):\n        \"\"\"\n        Set select2's AJAX attributes.\n\n        Attributes can be set using the html5 data attribute.\n        Nested attributes require a double dash as per\n        https://select2.org/configuration/data-attributes#nested-subkey-options\n        \"\"\"\n        attrs = super().build_attrs(base_attrs, extra_attrs=extra_attrs)\n        attrs.setdefault(\"class\", \"\")\n        attrs.update(\n            {\n                \"data-ajax--cache\": \"true\",\n                \"data-ajax--delay\": 250,\n                \"data-ajax--type\": \"GET\",\n                \"data-ajax--url\": self.get_url(),\n                \"data-app-label\": self.field.model._meta.app_label,\n                \"data-model-name\": self.field.model._meta.model_name,\n                \"data-field-name\": self.field.name,\n                \"data-theme\": \"admin-autocomplete\",\n                \"data-allow-clear\": json.dumps(not self.is_required),\n                \"data-placeholder\": \"\",  # Allows clearing of the input.\n                \"lang\": self.i18n_name,\n                \"class\": attrs[\"class\"]\n                + (\" \" if attrs[\"class\"] else \"\")\n                + \"admin-autocomplete\",\n            }\n        )\n        return attrs",
                "filename": "django/contrib/admin/widgets.py",
                "start_index": 15122,
                "end_index": 16971,
                "start_line": 1,
                "end_line": 526,
                "max_line": 595,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "select.admin-autocomplete {\n    width: 20em;\n}\n\n.select2-container--admin-autocomplete.select2-container {\n    min-height: 30px;\n}\n\n.select2-container--admin-autocomplete .select2-selection--single,\n.select2-container--admin-autocomplete .select2-selection--multiple {\n    min-height: 30px;\n    padding: 0;\n}\n\n.select2-container--admin-autocomplete.select2-container--focus .select2-selection,\n.select2-container--admin-autocomplete.select2-container--open .select2-selection {\n    border-color: var(--body-quiet-color);\n    min-height: 30px;\n}\n\n.select2-container--admin-autocomplete.select2-container--focus .select2-selection.select2-selection--single,\n.select2-container--admin-autocomplete.select2-container--open .select2-selection.select2-selection--single {\n    padding: 0;\n}\n\n.select2-container--admin-autocomplete.select2-container--focus .select2-selection.select2-selection--multiple,\n.select2-container--admin-autocomplete.select2-container--open .select2-selection.select2-selection--multiple {\n    padding: 0;\n}\n\n.select2-container--admin-autocomplete .select2-selection--single {\n    background-color: var(--body-bg);\n    border: 1px solid var(--border-color);\n    border-radius: 4px;\n}\n\n.select2-container--admin-autocomplete .select2-selection--single .select2-selection__rendered {\n    color: var(--body-fg);\n    line-height: 30px;\n}\n\n.select2-container--admin-autocomplete .select2-selection--single .select2-selection__clear {\n    cursor: pointer;\n    float: right;\n    font-weight: bold;\n}\n\n.select2-container--admin-autocomplete .select2-selection--single .select2-selection__placeholder {\n    color: var(--body-quiet-color);\n}\n\n.select2-container--admin-autocomplete .select2-selection--single .select2-selection__arrow {\n    height: 26px;\n    position: absolute;\n    top: 1px;\n    right: 1px;\n    width: 20px;\n}\n\n.select2-container--admin-autocomplete .select2-selection--single .select2-selection__arrow b {\n    border-color: #888 transparent transparent transparent;\n    border-style: solid;\n    border-width: 5px 4px 0 4px;\n    height: 0;\n    left: 50%;\n    margin-left: -4px;\n    margin-top: -2px;\n    position: absolute;\n    top: 50%;\n    width: 0;\n}\n\n.select2-container--admin-autocomplete[dir=\"rtl\"] .select2-selection--single .select2-selection__clear {\n    float: left;\n}\n\n.select2-container--admin-autocomplete[dir=\"rtl\"] .select2-selection--single .select2-selection__arrow {\n    left: 1px;\n    right: auto;\n}\n\n.select2-container--admin-autocomplete.select2-container--disabled .select2-selection--single {\n    background-color: var(--darkened-bg);\n    cursor: default;\n}\n\n.select2-container--admin-autocomplete.select2-container--disabled .select2-selection--single .select2-selection__clear {\n    display: none;\n}\n\n.select2-container--admin-autocomplete.select2-container--open .select2-selection--single .select2-selection__arrow b {\n    border-color: transparent transparent #888 transparent;\n    border-width: 0 4px 5px 4px;\n}",
                "filename": "django/contrib/admin/static/admin/css/autocomplete.css",
                "start_index": 0,
                "end_index": 2967,
                "start_line": 1,
                "end_line": 275,
                "max_line": 275,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "class AutocompleteMixin:",
                "filename": "django/contrib/admin/widgets.py",
                "start_index": 15093,
                "end_index": 15117,
                "start_line": 477,
                "end_line": 477,
                "max_line": 595,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "/*global URLify*/\n'use strict';\n{\n    const $ = django.jQuery;\n    $.fn.prepopulate = function(dependencies, maxLength, allowUnicode) {\n        /*\n            Depends on urlify.js\n            Populates a selected field with the values of the dependent fields,\n            URLifies and shortens the string.\n            dependencies - array of dependent fields ids\n            maxLength - maximum length of the URLify'd string\n            allowUnicode - Unicode support of the URLify'd string\n        */\n        return this.each(function() {\n            const prepopulatedField = $(this);\n\n            const populate = function() {\n                // Bail if the field's value has been changed by the user\n                if (prepopulatedField.data('_changed')) {\n                    return;\n                }\n\n                const values = [];\n                $.each(dependencies, function(i, field) {\n                    field = $(field);\n                    if (field.val().length > 0) {\n                        values.push(field.val());\n                    }\n                });\n                prepopulatedField.val(URLify(values.join(' '), maxLength, allowUnicode));\n            };\n\n            prepopulatedField.data('_changed', false);\n            prepopulatedField.on('change', function() {\n                prepopulatedField.data('_changed', true);\n            });\n\n            if (!prepopulatedField.val()) {\n                $(dependencies.join(',')).on('keyup change focus', populate);\n            }\n        });\n    };\n}",
                "filename": "django/contrib/admin/static/admin/js/prepopulate.js",
                "start_index": 0,
                "end_index": 1530,
                "start_line": 1,
                "end_line": 43,
                "max_line": 43,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "/*! Select2 4.0.13 | https://github.com/select2/select2/blob/master/LICENSE.md */\n\n!function(){if(jQuery&&jQuery.fn&&jQuery.fn.select2&&jQuery.fn.select2.amd)var e=jQuery.fn.select2.amd;e.define(\"select2/i18n/tk\",[],function(){return{errorLoading:function(){return\"Netije \u00fd\u00fcklenmedi.\"},inputTooLong:function(e){return e.input.length-e.maximum+\" harp bozu\u0148.\"},inputTooShort:function(e){return\"\u00ddene-de i\u0148 az \"+(e.minimum-e.input.length)+\" harp \u00fdazy\u0148.\"},loadingMore:function(){return\"K\u00f6pr\u00e4k netije g\u00f6rkezil\u00fd\u00e4r\u2026\"},maximumSelected:function(e){return\"Di\u0148e \"+e.maximum+\" sanysyny sa\u00fdla\u0148.\"},noResults:function(){return\"Netije tapylmady.\"},searching:function(){return\"G\u00f6zlen\u00fd\u00e4r\u2026\"},removeAllItems:function(){return\"Remove all items\"}}}),e.define,e.require}();",
                "filename": "django/contrib/admin/static/admin/js/vendor/select2/i18n/tk.js",
                "start_index": 0,
                "end_index": 749,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "S2.define('select2/data/ajax',[\n  './array',\n  '../utils',\n  'jquery'\n], function (ArrayAdapter, Utils, $) {\n  function AjaxAdapter ($element, options) {\n    this.ajaxOptions = this._applyDefaults(options.get('ajax'));\n\n    if (this.ajaxOptions.processResults != null) {\n      this.processResults = this.ajaxOptions.processResults;\n    }\n\n    AjaxAdapter.__super__.constructor.call(this, $element, options);\n  }\n\n  Utils.Extend(AjaxAdapter, ArrayAdapter);\n\n  AjaxAdapter.prototype._applyDefaults = function (options) {\n    var defaults = {\n      data: function (params) {\n        return $.extend({}, params, {\n          q: params.term\n        });\n      },\n      transport: function (params, success, failure) {\n        var $request = $.ajax(params);\n\n        $request.then(success);\n        $request.fail(failure);\n\n        return $request;\n      }\n    };\n\n    return $.extend({}, defaults, options, true);\n  };\n\n  AjaxAdapter.prototype.processResults = function (results) {\n    return results;\n  };\n\n  AjaxAdapter.prototype.query = function (params, callback) {\n    var matches = [];\n    var self = this;\n\n    if (this._request != null) {\n      // JSONP requests cannot always be aborted\n      if ($.isFunction(this._request.abort)) {\n        this._request.abort();\n      }\n\n      this._request = null;\n    }\n\n    var options = $.extend({\n      type: 'GET'\n    }, this.ajaxOptions);\n\n    if (typeof options.url === 'function') {\n      options.url = options.url.call(this.$element, params);\n    }\n\n    if (typeof options.data === 'function') {\n      options.data = options.data.call(this.$element, params);\n    }\n\n    function request () {\n      var $request = options.transport(options, function (data) {\n        var results = self.processResults(data, params);\n\n        if (self.options.get('debug') && window.console && console.error) {\n          // Check to make sure that the response included a `results` key.\n          if (!results || !results.results || !$.isArray(results.results)) {\n            console.error(\n              'Select2: The AJAX results did not return an array in the ' +\n              '`results` key of the response.'\n            );\n          }\n        }\n\n        callback(results);\n      }, function () {\n        // Attempt to detect if a request was aborted\n        // Only works if the transport exposes a status property\n        if ('status' in $request &&\n            ($request.status === 0 || $request.status === '0')) {\n          return;\n        }\n\n        self.trigger('results:message', {\n          message: 'errorLoading'\n        });\n      });\n\n      self._request = $request;\n    }\n\n    if (this.ajaxOptions.delay && params.term != null) {\n      if (this._queryTimeout) {\n        window.clearTimeout(this._queryTimeout);\n      }\n\n      this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);\n    } else {\n      request();\n    }\n  };\n\n  return AjaxAdapter;\n});",
                "filename": "django/contrib/admin/static/admin/js/vendor/select2/select2.full.js",
                "start_index": 88523,
                "end_index": 91435,
                "start_line": 3557,
                "end_line": 6800,
                "max_line": 6820,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "class AdminTextareaWidget(forms.Textarea):\n    def __init__(self, attrs=None):\n        super().__init__(attrs={\"class\": \"vLargeTextField\", **(attrs or {})})\n\n\nclass AdminTextInputWidget(forms.TextInput):\n    def __init__(self, attrs=None):\n        super().__init__(attrs={\"class\": \"vTextField\", **(attrs or {})})\n\n\nclass AdminEmailInputWidget(forms.EmailInput):\n    def __init__(self, attrs=None):\n        super().__init__(attrs={\"class\": \"vTextField\", **(attrs or {})})\n\n\nclass AdminURLFieldWidget(forms.URLInput):\n    template_name = \"admin/widgets/url.html\"\n\n    def __init__(self, attrs=None, validator_class=URLValidator):\n        super().__init__(attrs={\"class\": \"vURLField\", **(attrs or {})})\n        self.validator = validator_class()\n\n    def get_context(self, name, value, attrs):\n        try:\n            self.validator(value if value else \"\")\n            url_valid = True\n        except ValidationError:\n            url_valid = False\n        context = super().get_context(name, value, attrs)\n        context[\"current_label\"] = _(\"Currently:\")\n        context[\"change_label\"] = _(\"Change:\")\n        context[\"widget\"][\"href\"] = (\n            smart_urlquote(context[\"widget\"][\"value\"]) if value else \"\"\n        )\n        context[\"url_valid\"] = url_valid\n        return context\n\n\nclass AdminIntegerFieldWidget(forms.NumberInput):\n    class_name = \"vIntegerField\"\n\n    def __init__(self, attrs=None):\n        super().__init__(attrs={\"class\": self.class_name, **(attrs or {})})\n\n\nclass AdminBigIntegerFieldWidget(AdminIntegerFieldWidget):\n    class_name = \"vBigIntegerField\"\n\n\nclass AdminUUIDInputWidget(forms.TextInput):\n    def __init__(self, attrs=None):\n        super().__init__(attrs={\"class\": \"vUUIDField\", **(attrs or {})})\n\n\n# Mapping of lowercase language codes [returned by Django's get_language()] to\n# language codes supported by select2.\n# See django/contrib/admin/static/admin/js/vendor/select2/i18n/*\nSELECT2_TRANSLATIONS = {\n    x.lower(): x\n    for x in [\n        \"ar\",\n        \"az\",\n        \"bg\",\n        \"ca\",\n        \"cs\",\n        \"da\",\n        \"de\",\n        \"el\",\n        \"en\",\n        \"es\",\n        \"et\",\n        \"eu\",\n        \"fa\",\n        \"fi\",\n        \"fr\",\n        \"gl\",\n        \"he\",\n        \"hi\",\n        \"hr\",\n        \"hu\",\n        \"id\",\n        \"is\",\n        \"it\",\n        \"ja\",\n        \"km\",\n        \"ko\",\n        \"lt\",\n        \"lv\",\n        \"mk\",\n        \"ms\",\n        \"nb\",\n        \"nl\",\n        \"pl\",\n        \"pt-BR\",\n        \"pt\",\n        \"ro\",\n        \"ru\",\n        \"sk\",\n        \"sr-Cyrl\",\n        \"sr\",\n        \"sv\",\n        \"th\",\n        \"tr\",\n        \"uk\",\n        \"vi\",\n    ]\n}\nSELECT2_TRANSLATIONS.update({\"zh-hans\": \"zh-CN\", \"zh-hant\": \"zh-TW\"})",
                "filename": "django/contrib/admin/widgets.py",
                "start_index": 11903,
                "end_index": 14597,
                "start_line": 354,
                "end_line": 461,
                "max_line": 595,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "/*! Select2 4.0.13 | https://github.com/select2/select2/blob/master/LICENSE.md */\n\n!function(){if(jQuery&&jQuery.fn&&jQuery.fn.select2&&jQuery.fn.select2.amd)var e=jQuery.fn.select2.amd;e.define(\"select2/i18n/eu\",[],function(){return{inputTooLong:function(e){var t=e.input.length-e.maximum,n=\"Idatzi \";return n+=1==t?\"karaktere bat\":t+\" karaktere\",n+=\" gutxiago\"},inputTooShort:function(e){var t=e.minimum-e.input.length,n=\"Idatzi \";return n+=1==t?\"karaktere bat\":t+\" karaktere\",n+=\" gehiago\"},loadingMore:function(){return\"Emaitza gehiago kargatzen\u2026\"},maximumSelected:function(e){return 1===e.maximum?\"Elementu bakarra hauta dezakezu\":e.maximum+\" elementu hauta ditzakezu soilik\"},noResults:function(){return\"Ez da bat datorrenik aurkitu\"},searching:function(){return\"Bilatzen\u2026\"},removeAllItems:function(){return\"Kendu elementu guztiak\"}}}),e.define,e.require}();",
                "filename": "django/contrib/admin/static/admin/js/vendor/select2/i18n/eu.js",
                "start_index": 0,
                "end_index": 864,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            },
            {
                "code": "S2.define('select2/data/minimumInputLength',[\n\n], function () {\n  function MinimumInputLength (decorated, $e, options) {\n    this.minimumInputLength = options.get('minimumInputLength');\n\n    decorated.call(this, $e, options);\n  }\n\n  MinimumInputLength.prototype.query = function (decorated, params, callback) {\n    params.term = params.term || '';\n\n    if (params.term.length < this.minimumInputLength) {\n      this.trigger('results:message', {\n        message: 'inputTooShort',\n        args: {\n          minimum: this.minimumInputLength,\n          input: params.term,\n          params: params\n        }\n      });\n\n      return;\n    }\n\n    decorated.call(this, params, callback);\n  };\n\n  return MinimumInputLength;\n});\n\nS2.define('select2/data/maximumInputLength',[\n\n], function () {\n  function MaximumInputLength (decorated, $e, options) {\n    this.maximumInputLength = options.get('maximumInputLength');\n\n    decorated.call(this, $e, options);\n  }\n\n  MaximumInputLength.prototype.query = function (decorated, params, callback) {\n    params.term = params.term || '';\n\n    if (this.maximumInputLength > 0 &&\n        params.term.length > this.maximumInputLength) {\n      this.trigger('results:message', {\n        message: 'inputTooLong',\n        args: {\n          maximum: this.maximumInputLength,\n          input: params.term,\n          params: params\n        }\n      });\n\n      return;\n    }\n\n    decorated.call(this, params, callback);\n  };\n\n  return MaximumInputLength;\n});\n\nS2.define('select2/data/maximumSelectionLength',[\n\n], function (){\n  function MaximumSelectionLength (decorated, $e, options) {\n    this.maximumSelectionLength = options.get('maximumSelectionLength');\n\n    decorated.call(this, $e, options);\n  }\n\n  MaximumSelectionLength.prototype.bind =\n    function (decorated, container, $container) {\n      var self = this;\n\n      decorated.call(this, container, $container);\n\n      container.on('select', function () {\n        self._checkIfMaximumSelected();\n      });\n  };\n\n  MaximumSelectionLength.prototype.query =\n    function (decorated, params, callback) {\n      var self = this;\n\n      this._checkIfMaximumSelected(function () {\n        decorated.call(self, params, callback);\n      });\n  };\n\n  MaximumSelectionLength.prototype._checkIfMaximumSelected =\n    function (_, successCallback) {\n      var self = this;\n\n      this.current(function (currentData) {\n        var count = currentData != null ? currentData.length : 0;\n        if (self.maximumSelectionLength > 0 &&\n          count >= self.maximumSelectionLength) {\n          self.trigger('results:message', {\n            message: 'maximumSelected',\n            args: {\n              maximum: self.maximumSelectionLength\n            }\n          });\n          return;\n        }\n\n        if (successCallback) {\n          successCallback();\n        }\n      });\n  };\n\n  return MaximumSelectionLength;\n});",
                "filename": "django/contrib/admin/static/admin/js/vendor/select2/select2.full.js",
                "start_index": 96782,
                "end_index": 99660,
                "start_line": 3912,
                "end_line": 6800,
                "max_line": 6820,
                "git_instance": "github",
                "repo_name": "testbed/django__django__3.0",
                "sha": ""
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "django/contrib/admin/static/admin/js/autocomplete.js": [
                {
                    "chunk": {
                        "code": "'use strict';\n{\n    const $ = django.jQuery;\n\n    $.fn.djangoAdminSelect2 = function() {\n        $.each(this, function(i, element) {\n            $(element).select2({\n                ajax: {\n                    data: (params) => {\n                        return {\n                            term: params.term,\n                            page: params.page,\n                            app_label: element.dataset.appLabel,\n                            model_name: element.dataset.modelName,\n                            field_name: element.dataset.fieldName\n                        };\n                    }\n                }\n            });\n        });\n        return this;\n    };\n\n    $(function() {\n        // Initialize all autocomplete widgets except the one in the template\n        // form used when a new formset is added.\n        $('.admin-autocomplete').not('[name*=__prefix__]').djangoAdminSelect2();\n    });\n\n    document.addEventListener('formset:added', (event) => {\n        $(event.target).find('.admin-autocomplete').djangoAdminSelect2();\n    });\n}",
                        "filename": "django/contrib/admin/static/admin/js/autocomplete.js",
                        "start_index": 0,
                        "end_index": 1059,
                        "start_line": 1,
                        "end_line": 33,
                        "max_line": 33,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This code initializes the Select2 widget and is where the ajax configuration would be set, which is necessary for implementing the rate-limiting feature."
                }
            ],
            "django/contrib/admin/widgets.py": [
                {
                    "chunk": {
                        "code": "\"\"\"\n    Select widget mixin that loads options from AutocompleteJsonView via AJAX.\n\n    Renders the necessary data attributes for select2 and adds the static form\n    media.\n    \"\"\"\n\n    url_name = \"%s:autocomplete\"\n\n    def __init__(self, field, admin_site, attrs=None, choices=(), using=None):\n        self.field = field\n        self.admin_site = admin_site\n        self.db = using\n        self.choices = choices\n        self.attrs = {} if attrs is None else attrs.copy()\n        self.i18n_name = get_select2_language()\n\n    def get_url(self):\n        return reverse(self.url_name % self.admin_site.name)\n\n    def build_attrs(self, base_attrs, extra_attrs=None):\n        \"\"\"\n        Set select2's AJAX attributes.\n\n        Attributes can be set using the html5 data attribute.\n        Nested attributes require a double dash as per\n        https://select2.org/configuration/data-attributes#nested-subkey-options\n        \"\"\"\n        attrs = super().build_attrs(base_attrs, extra_attrs=extra_attrs)\n        attrs.setdefault(\"class\", \"\")\n        attrs.update(\n            {\n                \"data-ajax--cache\": \"true\",\n                \"data-ajax--delay\": 250,\n                \"data-ajax--type\": \"GET\",\n                \"data-ajax--url\": self.get_url(),\n                \"data-app-label\": self.field.model._meta.app_label,\n                \"data-model-name\": self.field.model._meta.model_name,\n                \"data-field-name\": self.field.name,\n                \"data-theme\": \"admin-autocomplete\",\n                \"data-allow-clear\": json.dumps(not self.is_required),\n                \"data-placeholder\": \"\",  # Allows clearing of the input.\n                \"lang\": self.i18n_name,\n                \"class\": attrs[\"class\"]\n                + (\" \" if attrs[\"class\"] else \"\")\n                + \"admin-autocomplete\",\n            }\n        )\n        return attrs",
                        "filename": "django/contrib/admin/widgets.py",
                        "start_index": 15122,
                        "end_index": 16971,
                        "start_line": 1,
                        "end_line": 526,
                        "max_line": 595,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This code sets the data attributes for Select2's AJAX configuration, including the delay, which is directly related to the rate-limiting feature that needs to be implemented."
                }
            ],
            "django/contrib/admin/static/admin/js/vendor/select2/select2.full.js": [
                {
                    "chunk": {
                        "code": "S2.define('select2/data/ajax',[\n  './array',\n  '../utils',\n  'jquery'\n], function (ArrayAdapter, Utils, $) {\n  function AjaxAdapter ($element, options) {\n    this.ajaxOptions = this._applyDefaults(options.get('ajax'));\n\n    if (this.ajaxOptions.processResults != null) {\n      this.processResults = this.ajaxOptions.processResults;\n    }\n\n    AjaxAdapter.__super__.constructor.call(this, $element, options);\n  }\n\n  Utils.Extend(AjaxAdapter, ArrayAdapter);\n\n  AjaxAdapter.prototype._applyDefaults = function (options) {\n    var defaults = {\n      data: function (params) {\n        return $.extend({}, params, {\n          q: params.term\n        });\n      },\n      transport: function (params, success, failure) {\n        var $request = $.ajax(params);\n\n        $request.then(success);\n        $request.fail(failure);\n\n        return $request;\n      }\n    };\n\n    return $.extend({}, defaults, options, true);\n  };\n\n  AjaxAdapter.prototype.processResults = function (results) {\n    return results;\n  };\n\n  AjaxAdapter.prototype.query = function (params, callback) {\n    var matches = [];\n    var self = this;\n\n    if (this._request != null) {\n      // JSONP requests cannot always be aborted\n      if ($.isFunction(this._request.abort)) {\n        this._request.abort();\n      }\n\n      this._request = null;\n    }\n\n    var options = $.extend({\n      type: 'GET'\n    }, this.ajaxOptions);\n\n    if (typeof options.url === 'function') {\n      options.url = options.url.call(this.$element, params);\n    }\n\n    if (typeof options.data === 'function') {\n      options.data = options.data.call(this.$element, params);\n    }\n\n    function request () {\n      var $request = options.transport(options, function (data) {\n        var results = self.processResults(data, params);\n\n        if (self.options.get('debug') && window.console && console.error) {\n          // Check to make sure that the response included a `results` key.\n          if (!results || !results.results || !$.isArray(results.results)) {\n            console.error(\n              'Select2: The AJAX results did not return an array in the ' +\n              '`results` key of the response.'\n            );\n          }\n        }\n\n        callback(results);\n      }, function () {\n        // Attempt to detect if a request was aborted\n        // Only works if the transport exposes a status property\n        if ('status' in $request &&\n            ($request.status === 0 || $request.status === '0')) {\n          return;\n        }\n\n        self.trigger('results:message', {\n          message: 'errorLoading'\n        });\n      });\n\n      self._request = $request;\n    }\n\n    if (this.ajaxOptions.delay && params.term != null) {\n      if (this._queryTimeout) {\n        window.clearTimeout(this._queryTimeout);\n      }\n\n      this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);\n    } else {\n      request();\n    }\n  };\n\n  return AjaxAdapter;\n});",
                        "filename": "django/contrib/admin/static/admin/js/vendor/select2/select2.full.js",
                        "start_index": 88523,
                        "end_index": 91435,
                        "start_line": 3557,
                        "end_line": 6800,
                        "max_line": 6820,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__3.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This code defines the AjaxAdapter for Select2, which handles the AJAX requests. Adjustments here may be necessary to ensure the delay configuration is respected."
                }
            ]
        },
        "solution_task": "To implement the rate-limiting feature for the autocomplete widgets' Ajax requests in the Django admin, you can follow these steps:\n\n- Modify the `build_attrs` method in the `widgets.py` file to include the `data-ajax--delay` attribute with the desired delay value (in milliseconds). This attribute is used by Select2 to delay the Ajax request after the last keystroke.\n\nHere's the updated `build_attrs` method:\n\n```python\ndef build_attrs(self, base_attrs, extra_attrs=None):\n    \"\"\"\n    Set select2's AJAX attributes.\n    \"\"\"\n    attrs = super().build_attrs(base_attrs, extra_attrs=extra_attrs)\n    attrs.setdefault(\"class\", \"\")\n    attrs.update(\n        {\n            \"data-ajax--cache\": \"true\",\n            \"data-ajax--delay\": 250,  # Set the delay here\n            \"data-ajax--type\": \"GET\",\n            \"data-ajax--url\": self.get_url(),\n            \"data-app-label\": self.field.model._meta.app_label,\n            \"data-model-name\": self.field.model._meta.model_name,\n            \"data-field-name\": self.field.name,\n            \"data-theme\": \"admin-autocomplete\",\n            \"data-allow-clear\": json.dumps(not self.is_required),\n            \"data-placeholder\": \"\",\n            \"lang\": self.i18n_name,\n            \"class\": attrs[\"class\"] + (\" \" if attrs[\"class\"] else \"\") + \"admin-autocomplete\",\n        }\n    )\n    return attrs\n```\n\n- Ensure that the `data-ajax--delay` attribute is being set correctly in the HTML output by checking the rendered admin form in the browser.\n\n- Test the autocomplete widget to confirm that the Ajax requests are being rate-limited as expected. The network tab in the browser's developer tools can be used to observe the delay between keystrokes and the Ajax request being sent.\n\nNo changes are required in the `autocomplete.js` file since the `data-ajax--delay` attribute is already being utilized by Select2, as long as it is set in the HTML attributes of the widget.\n\nRemember to test the changes thoroughly to ensure that the feature works as expected and does not introduce any regressions.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE must provide precise, actionable guidance and directly address all aspects of the described feature request to facilitate its successful implementation or improvement.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable step-by-step guide to implement the rate-limiting feature for the autocomplete widget's Ajax requests in Django. It includes a specific code snippet to modify the `build_attrs` method in the `widgets.py` file, which is directly relevant to the feature request. The RESPONSE also advises on how to ensure the `data-ajax--delay` attribute is set correctly and to test the changes thoroughly, which is crucial for successful implementation. Additionally, it provides links to relevant code snippets that may need to be checked or modified, demonstrating a comprehensive approach to the feature enhancement. The RESPONSE does not require any changes to the `autocomplete.js` file, which aligns with the information provided in the PROMPT that Select2 already utilizes the `data-ajax--delay` attribute. The RESPONSE is well-structured and directly addresses the feature request, making it highly valuable for the implementation of the rate-limiting feature.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711728487.916924,
        "result": "To implement the rate-limiting feature for the autocomplete widgets' Ajax requests in the Django admin, you can follow these steps:\n\n- Modify the `build_attrs` method in the `widgets.py` file to include the `data-ajax--delay` attribute with the desired delay value (in milliseconds). This attribute is used by Select2 to delay the Ajax request after the last keystroke.\n\nHere's the updated `build_attrs` method:\n\n```python\ndef build_attrs(self, base_attrs, extra_attrs=None):\n    \"\"\"\n    Set select2's AJAX attributes.\n    \"\"\"\n    attrs = super().build_attrs(base_attrs, extra_attrs=extra_attrs)\n    attrs.setdefault(\"class\", \"\")\n    attrs.update(\n        {\n            \"data-ajax--cache\": \"true\",\n            \"data-ajax--delay\": 250,  # Set the delay here\n            \"data-ajax--type\": \"GET\",\n            \"data-ajax--url\": self.get_url(),\n            \"data-app-label\": self.field.model._meta.app_label,\n            \"data-model-name\": self.field.model._meta.model_name,\n            \"data-field-name\": self.field.name,\n            \"data-theme\": \"admin-autocomplete\",\n            \"data-allow-clear\": json.dumps(not self.is_required),\n            \"data-placeholder\": \"\",\n            \"lang\": self.i18n_name,\n            \"class\": attrs[\"class\"] + (\" \" if attrs[\"class\"] else \"\") + \"admin-autocomplete\",\n        }\n    )\n    return attrs\n```\n\n- Ensure that the `data-ajax--delay` attribute is being set correctly in the HTML output by checking the rendered admin form in the browser.\n\n- Test the autocomplete widget to confirm that the Ajax requests are being rate-limited as expected. The network tab in the browser's developer tools can be used to observe the delay between keystrokes and the Ajax request being sent.\n\nNo changes are required in the `autocomplete.js` file since the `data-ajax--delay` attribute is already being utilized by Select2, as long as it is set in the HTML attributes of the widget.\n\nRemember to test the changes thoroughly to ensure that the feature works as expected and does not introduce any regressions.\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__3.0/tree//django) \u2192 [contrib](https://github.com/testbed/django__django__3.0/tree//django/contrib) \u2192 [admin](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin) \u2192 [static](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin/static) \u2192 [admin](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin/static/admin) \u2192 [js](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin/static/admin/js)- [Lines 1 - 33](https://github.com/testbed/django__django__3.0/blob//django/contrib/admin/static/admin/js/autocomplete.js#L1-L33)\n\n This code initializes the Select2 widget and is where the ajax configuration would be set, which is necessary for implementing the rate-limiting feature.\n-  \u2192 [django](https://github.com/testbed/django__django__3.0/tree//django) \u2192 [contrib](https://github.com/testbed/django__django__3.0/tree//django/contrib) \u2192 [admin](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin)- [Lines 1 - 526](https://github.com/testbed/django__django__3.0/blob//django/contrib/admin/widgets.py#L1-L526)\n\n This code sets the data attributes for Select2's AJAX configuration, including the delay, which is directly related to the rate-limiting feature that needs to be implemented.\n-  \u2192 [django](https://github.com/testbed/django__django__3.0/tree//django) \u2192 [contrib](https://github.com/testbed/django__django__3.0/tree//django/contrib) \u2192 [admin](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin) \u2192 [static](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin/static) \u2192 [admin](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin/static/admin) \u2192 [js](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin/static/admin/js) \u2192 [vendor](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin/static/admin/js/vendor) \u2192 [select2](https://github.com/testbed/django__django__3.0/tree//django/contrib/admin/static/admin/js/vendor/select2)- [Lines 3557 - 6800](https://github.com/testbed/django__django__3.0/blob//django/contrib/admin/static/admin/js/vendor/select2/select2.full.js#L3557-L6800)\n\n This code defines the AjaxAdapter for Select2, which handles the AJAX requests. Adjustments here may be necessary to ensure the delay configuration is respected."
    }
}