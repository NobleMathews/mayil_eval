{
    "id": "sphinx-doc__sphinx-8026",
    "repo_name": "testbed/sphinx-doc__sphinx__3.2",
    "task_id": 9042622374766377420,
    "title": "More customization options for figure_language_filename for localized images",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI'm working on the localization of the [Godot Engine documentation](https://github.com/godotengine/godot-docs), and we use a [separate repository](https://github.com/godotengine/godot-docs-l10n) to hold the massive PO files that we use for Weblate and Sphinx.\r\n\r\nI'm now working on image localization ([upstream issue](https://github.com/godotengine/godot-docs-l10n/issues/5)) and I find that even though [`figure_language_filename`](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-figure_language_filename) seems to provide some customization option, it's impossible to host the localized images in the separate repository.\r\n\r\nIndeed, both the `{root}` and `{path}` substitution tokens resolve to absolute paths from the host system (e.g. `root: /home/akien/Projects/godot/godot-docs-l10n/docs/tutorials/shading/img/vs_popup`), and since I can't do post-processing of the subsituted string, I can't strip the `/home/akien/Projects/godot/godot-docs-l10n/docs/` base path to attempt using something like `../img/{language}/{rel_path}/{filename}{ext}`.\r\n\r\n**Describe the solution you'd like**\r\nI'd like the addition of one or more new path substitution tokens that can be used to customize the path to localized images more freely.\r\n\r\nFor example, for this structure:\r\n```\r\nfoo/bar/index.rst\r\nfoo/bar/img/image.png\r\n```\r\nand `index.rst` referencing `.. image:: img/image.png`, I could imagine two useful substitution tokens:\r\n```\r\nrelative_path = \"img/\"\r\nresolved_path = \"foo/bar/img/\"\r\n```\r\n\r\nAlternatively (and possible as a better solution), `{root}` and `{path}` could be changed to actually be relative to the Sphinx project's root folder, i.e. the `{resolved_path}` in my example above, i.e.:\r\n```\r\nroot = \"foo/bar/img/image\"\r\npath = \"foo/bar/img\"\r\n```\r\n(While the documentation currently states that these would be `img/image` and `img/`, which is wrong in my tests on Linux with Sphinx 1.8.5).\r\n\r\nI don't specifically need access to the file-relative path `img/` in my use case, but I imagine that some projects may benefit from it.\r\n\r\n**Describe alternatives you've considered**\r\nI don't see any alternative option that would enable the workflow I want to use with localized images not being either in the original image's folder, or in one of its subfolders.\r\n\r\n*Edit:* We came up with ~two~ three hacks that we could use to workaround the currently limited substitution tokens offered by `figure_language_filename`:\r\n- Passing a class that redefines `format()` with our custom post-processing: https://github.com/godotengine/godot-docs-l10n/issues/5#issuecomment-637569033\r\n- Symlinking all localized images from the out-of-tree location to the in-tree location where Sphinx wants it: https://github.com/godotengine/godot-docs-l10n/issues/5#issuecomment-637572793\r\n- Overriding sphinx.util.i18n.get_image_filename_for_language since apparently Python lets us do that, so we can do the post-processing we want: https://github.com/godotengine/godot-docs-l10n/issues/5#issuecomment-637589503\r\n\r\nI did not test with latest Sphinx as it's not properly supported on ReadTheDocs yet, but the relevant code seems to be unchanged from 1.8.5:\r\nhttps://github.com/sphinx-doc/sphinx/blob/3.x/sphinx/util/i18n.py#L299-L315\r\n\r\n**Additional context**\r\n- https://github.com/godotengine/godot-docs-l10n/issues/5\r\n- https://git.mahara.org/user-manual/manual/blob/07ce4e00a4d3d7d553647ecea8a2b7f856561945/source/conf.py#L30-40\r\n\r\n\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/sphinx-doc__sphinx__3.2.git",
    "requested_commit": "",
    "mayil_response": "To implement the requested feature for more customization options for `figure_language_filename` for localized images in Sphinx, you can follow these steps:\n\n- Modify the `get_image_filename_for_language` function in `sphinx/util/i18n.py` to support additional path substitution tokens that can be used to customize the path to localized images more freely.\n- Introduce new tokens such as `{relative_path}` and `{resolved_path}` as described in the feature request.\n- Update the `filename_format` string formatting to use the new tokens and ensure that `{root}` and `{path}` are relative to the Sphinx project's root folder.\n- Ensure that the new tokens are properly documented and that they work with existing functionality without breaking backward compatibility.\n\nHere is a high-level overview of the changes that need to be made to the `get_image_filename_for_language` function:\n\n```python\ndef get_image_filename_for_language(filename: str, env: BuildEnvironment) -> str:\n    filename_format = env.config.figure_language_filename\n    d = {}\n    d['root'], d['ext'] = path.splitext(filename)\n    d['basename'] = path.basename(d['root'])\n    d['language'] = env.config.language\n\n    # Calculate new tokens\n    docpath = path.dirname(env.docname)\n    d['relative_path'] = path.relpath(d['root'], start=docpath)\n    d['resolved_path'] = path.dirname(d['root'])\n\n    # Ensure that {root} and {path} are relative to the project's root\n    d['root'] = path.relpath(d['root'], start=env.srcdir)\n    d['path'] = path.relpath(d['path'], start=env.srcdir)\n\n    try:\n        return filename_format.format(**d)\n    except KeyError as exc:\n        raise SphinxError('Invalid figure_language_filename: %r' % exc) from exc\n```\n\nThis code snippet is a simplified version of the changes that need to be made. You will need to ensure that the new tokens are correctly calculated and that they work in the context of the Sphinx project's directory structure.\n\nAdditionally, you may need to handle edge cases and ensure that the new tokens do not introduce any regressions or conflicts with existing Sphinx functionality.\n\nRemember to add unit tests for the new feature to ensure that it works as expected and to prevent future regressions.\n\nLastly, update the documentation to reflect the new customization options available for `figure_language_filename`.\n\n### Code snippets to check\n\n-  \u2192 [sphinx](https://github.com/testbed/sphinx-doc__sphinx__3.2/tree//sphinx) \u2192 [util](https://github.com/testbed/sphinx-doc__sphinx__3.2/tree//sphinx/util)- [Lines 170 - 244](https://github.com/testbed/sphinx-doc__sphinx__3.2/blob//sphinx/util/i18n.py#L170-L244)\n\n This snippet contains the function 'get_image_filename_for_language' which is directly related to the handling of figure_language_filename and image localization.\n-  \u2192 [sphinx](https://github.com/testbed/sphinx-doc__sphinx__3.2/tree//sphinx) \u2192 [environment](https://github.com/testbed/sphinx-doc__sphinx__3.2/tree//sphinx/environment) \u2192 [collectors](https://github.com/testbed/sphinx-doc__sphinx__3.2/tree//sphinx/environment/collectors)- [Lines 27 - 85](https://github.com/testbed/sphinx-doc__sphinx__3.2/blob//sphinx/environment/collectors/asset.py#L27-L85)\n\n This snippet includes the 'process_doc' method which processes and rewrites image URIs, and it uses the 'get_image_filename_for_language' function, making it relevant to the issue.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0015914999999999998,
        "snippet_processor": 0.06452000000000001,
        "issue_star_creation": 0.05056,
        "issue_star_solver": 0.08367,
        "bouncer": 0.050420000000000006
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711703739.757843,
        "relevant_snippets": [
            {
                "code": "at_date(date: datetime, format: str, locale: str,\n                      formatter: Callable = babel.dates.format_date) -> str:\n    # Check if we have the tzinfo attribute. If not we cannot do any time\n    # related formats.\n    if not hasattr(date, 'tzinfo'):\n        formatter = babel.dates.format_date\n\n    try:\n        return formatter(date, format, locale=locale)\n    except (ValueError, babel.core.UnknownLocaleError):\n        # fallback to English\n        return formatter(date, format, locale='en')\n    except AttributeError:\n        logger.warning(__('Invalid date format. Quote the string by single quote '\n                          'if you want to output it directly: %s'), format)\n        return format\n\n\ndef format_date(\n    format: str, *, date: datetime | None = None, language: str,\n) -> str:\n    if date is None:\n        # If time is not specified, try to use $SOURCE_DATE_EPOCH variable\n        # See https://wiki.debian.org/ReproducibleBuilds/TimestampsProposal\n        source_date_epoch = os.getenv('SOURCE_DATE_EPOCH')\n        if source_date_epoch is not None:\n            date = datetime.utcfromtimestamp(float(source_date_epoch))\n        else:\n            date = datetime.now(timezone.utc).astimezone()\n\n    result = []\n    tokens = date_format_re.split(format)\n    for token in tokens:\n        if token in date_format_mappings:\n            babel_format = date_format_mappings.get(token, '')\n\n            # Check if we have to use a different babel formatter then\n            # format_datetime, because we only want to format a date\n            # or a time.\n            if token == '%x':\n                function = babel.dates.format_date\n            elif token == '%X':\n                function = babel.dates.format_time\n            else:\n                function = babel.dates.format_datetime\n\n            result.append(babel_format_date(date, babel_format, locale=language,\n                                            formatter=function))\n        else:\n            result.append(token)\n\n    return \"\".join(result)\n\n\ndef get_image_filename_for_language(filename: str, env: BuildEnvironment) -> str:\n    filename_format = env.config.figure_language_filename\n    d = {}\n    d['root'], d['ext'] = path.splitext(filename)\n    dirname = path.dirname(d['root'])\n    if dirname and not dirname.endswith(path.sep):\n        dirname += path.sep\n    docpath = path.dirname(env.docname)\n    if docpath and not docpath.endswith(path.sep):\n        docpath += path.sep\n    d['path'] = dirname\n    d['basename'] = path.basename(d['root'])\n    d['docpath'] = docpath\n    d['language'] = env.config.language\n    try:\n        return filename_format.format(**d)\n    except KeyError as exc:\n        raise SphinxError('Invalid figure_language_filename: %r' % exc) from exc\n\n\ndef search_ima",
                "filename": "sphinx/util/i18n.py",
                "start_index": 6531,
                "end_index": 9322,
                "start_line": 170,
                "end_line": 244,
                "max_line": 250,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.2",
                "sha": ""
            },
            {
                "code": "if self.in_title and base:\n            # Lowercase tokens forcely because some fncychap themes capitalize\n            # the options of \\sphinxincludegraphics unexpectedly (ex. WIDTH=...).\n            cmd = fr'\\lowercase{{\\sphinxincludegraphics{options}}}{{{{{base}}}{ext}}}'\n        else:\n            cmd = fr'\\sphinxincludegraphics{options}{{{{{base}}}{ext}}}'\n        # escape filepath for includegraphics, https://tex.stackexchange.com/a/202714/41112\n        if '#' in base:\n            cmd = r'{\\catcode`\\#=12' + cmd + '}'\n        self.body.append(cmd)\n        self.body.extend(post)",
                "filename": "sphinx/writers/latex.py",
                "start_index": 52323,
                "end_index": 52910,
                "start_line": 1322,
                "end_line": 1332,
                "max_line": 2127,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.2",
                "sha": ""
            },
            {
                "code": "from __future__ import annotations\n\nimport os\nfrom os import path\nfrom typing import TYPE_CHECKING, Any, cast\n\nfrom docutils import nodes\nfrom docutils.nodes import Node, make_id\nfrom docutils.parsers.rst import directives\nfrom docutils.parsers.rst.directives import images, tables\nfrom docutils.parsers.rst.directives.misc import Meta  # type: ignore[attr-defined]\nfrom docutils.parsers.rst.roles import set_classes\n\nfrom sphinx.directives import optional_int\nfrom sphinx.domains.math import MathDomain\nfrom sphinx.locale import __\nfrom sphinx.util import logging\nfrom sphinx.util.docutils import SphinxDirective\nfrom sphinx.util.nodes import set_source_info\nfrom sphinx.util.osutil import SEP, os_path, relpath\nfrom sphinx.util.typing import OptionSpec\n\nif TYPE_CHECKING:\n    from sphinx.application import Sphinx\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass Figure(images.Figure):\n    \"\"\"The figure directive which applies `:name:` option to the figure node\n    instead of the image node.\n    \"\"\"\n\n    def run(self) -> list[Node]:\n        name = self.options.pop('name', None)\n        result = super().run()\n        if len(result) == 2 or isinstance(result[0], nodes.system_message):\n            return result\n\n        assert len(result) == 1\n        figure_node = cast(nodes.figure, result[0])\n        if name:\n            # set ``name`` to figure_node if given\n            self.options['name'] = name\n            self.add_name(figure_node)\n\n        # copy lineno from image node\n        if figure_node.line is None and len(figure_node) == 2:\n            caption = cast(nodes.caption, figure_node[1])\n            figure_node.line = caption.line\n\n        return [figure_node]\n\n\nclass CSVTable(tables.CSVTable):\n    \"\"\"The csv-table directive which searches a CSV file from Sphinx project's source\n    directory when an absolute path is given via :file: option.\n    \"\"\"\n\n    def run(self) -> list[Node]:\n        if 'file' in self.options and self.options['file'].startswith((SEP, os.sep)):\n            env = self.state.document.settings.env\n            filename = self.options['file']\n            if path.exists(filename):\n                logger.warning(__('\":file:\" option for csv-table directive now recognizes '\n                                  'an absolute path as a relative path from source directory. '\n                                  'Please update your document.'),\n                               location=(env.docname, self.lineno))\n            else:\n                abspath = path.join(env.srcdir, os_path(self.options['file'][1:]))\n                docdir = path.dirname(env.doc2path(env.docname))\n                self.options['file'] = relpath(abspath, docdir)\n\n        return super().run()",
                "filename": "sphinx/directives/patches.py",
                "start_index": 0,
                "end_index": 2709,
                "start_line": 1,
                "end_line": 75,
                "max_line": 189,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.2",
                "sha": ""
            },
            {
                "code": "\"\"\"Extension to save typing and prevent hard-coding of base URLs in reST files.\n\nThis adds a new config value called ``extlinks`` that is created like this::\n\n   extlinks = {'exmpl': ('https://example.invalid/%s.html', caption), ...}\n\nNow you can use e.g. :exmpl:`foo` in your documents.  This will create a\nlink to ``https://example.invalid/foo.html``.  The link caption depends on\nthe *caption* value given:\n\n- If it is ``None``, the caption will be the full URL.\n- If it is a string, it must contain ``%s`` exactly once.  In this case the\n  caption will be *caption* with the role content substituted for ``%s``.\n\nYou can also give an explicit caption, e.g. :exmpl:`Foo <foo>`.\n\nBoth, the url string and the caption string must escape ``%`` as ``%%``.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport re\nfrom typing import Any\n\nfrom docutils import nodes, utils\nfrom docutils.nodes import Node, system_message\nfrom docutils.parsers.rst.states import Inliner\n\nimport sphinx\nfrom sphinx.application import Sphinx\nfrom sphinx.locale import __\nfrom sphinx.transforms.post_transforms import SphinxPostTransform\nfrom sphinx.util import logging, rst\nfrom sphinx.util.nodes import split_explicit_title\nfrom sphinx.util.typing import RoleFunction\n\nlogger = logging.getLogger(__name__)\n\n\nclass ExternalLinksChecker(SphinxPostTransform):\n    \"\"\"\n    For each external link, check if it can be replaced by an extlink.\n\n    We treat each ``reference`` node without ``internal`` attribute as an external link.\n    \"\"\"\n\n    default_priority = 500\n\n    def run(self, **kwargs: Any) -> None:\n        if not self.config.extlinks_detect_hardcoded_links:\n            return\n\n        for refnode in self.document.findall(nodes.reference):\n            self.check_uri(refnode)\n\n    def check_uri(self, refnode: nodes.reference) -> None:\n        \"\"\"\n        If the URI in ``refnode`` has a replacement in ``extlinks``,\n        emit a warning with a replacement suggestion.\n        \"\"\"\n        if 'internal' in refnode or 'refuri' not in refnode:\n            return\n\n        uri = refnode['refuri']\n        title = refnode.astext()\n\n        for alias, (base_uri, _caption) in self.app.config.extlinks.items():\n            uri_pattern = re.compile(re.escape(base_uri).replace('%s', '(?P<value>.+)'))\n\n            match = uri_pattern.match(uri)\n            if (\n                match and\n                match.groupdict().get('value') and\n                '/' not in match.groupdict()['value']\n            ):\n                # build a replacement suggestion\n                msg = __('hardcoded link %r could be replaced by an extlink '\n                         '(try using %r instead)')\n                value = match.groupdict().get('value')\n                if uri != title:\n                    replacement = f\":{alias}:`{rst.escape(title)} <{value}>`\"\n                else:\n                    replacement = f\":{alias}:`{value}`\"\n                logger.warning(msg, uri, replacement, location=refnode)",
                "filename": "sphinx/ext/extlinks.py",
                "start_index": 0,
                "end_index": 2976,
                "start_line": 1,
                "end_line": 84,
                "max_line": 120,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.2",
                "sha": ""
            },
            {
                "code": "{\n        \"%(filename)s &#8212; %(docstitle)s\": \"%(filename)s &#8212; %(docstitle)s\",\n        \"&#169; <a href=\\\"%(path)s\\\">Copyright</a> %(copyright)s.\": \"&#169; <a href=\\\"%(path)s\\\">Copyright</a> %(copyright)s.\",\n        \"&#169; Copyright %(copyright)s.\": \"&#169; Copyright %(copyright)s.\",\n        \", in \": \", \\u0432\",\n        \"About these documents\": \"\\u041e\\u0431 \\u044d\\u0442\\u0438\\u0445 \\u0434\\u043e\\u043a\\u0443\\u043c\\u0435\\u043d\\u0442\\u0430\\u0445\",\n        \"Automatically generated list of changes in version %(version)s\": \"\\u0410\\u0432\\u0442\\u043e\\u043c\\u0430\\u0442\\u0438\\u0447\\u0435\\u0441\\u043a\\u0438 \\u0441\\u043e\\u0437\\u0434\\u0430\\u043d\\u043d\\u044b\\u0439 \\u0441\\u043f\\u0438\\u0441\\u043e\\u043a \\u0438\\u0437\\u043c\\u0435\\u043d\\u0435\\u043d\\u0438\\u0439 \\u0432 \\u0432\\u0435\\u0440\\u0441\\u0438\\u0438 %(version)s\",\n        \"C API changes\": \"\\u0418\\u0437\\u043c\\u0435\\u043d\\u0435\\u043d\\u0438\\u044f \\u0432 API C\",\n        \"Changes in Version %(version)s &#8212; %(docstitle)s\": \"\\u0418\\u0437\\u043c\\u0435\\u043d\\u0435\\u043d\\u0438\\u044f \\u0432 \\u0432\\u0435\\u0440\\u0441\\u0438\\u0438 %(version)s &#8212; %(docstitle)s\",\n        \"Collapse sidebar\": \"\\u0421\\u0432\\u0435\\u0440\\u043d\\u0443\\u0442\\u044c \\u0431\\u043e\\u043a\\u043e\\u0432\\u0443\\u044e \\u043f\\u0430\\u043d\\u0435\\u043b\\u044c\",\n        \"Complete Table of Contents\": \"\\u041f\\u043e\\u043b\\u043d\\u043e\\u0435 \\u043e\\u0433\\u043b\\u0430\\u0432\\u043b\\u0435\\u043d\\u0438\\u0435\",\n        \"Contents\": \"\\u0421\\u043e\\u0434\\u0435\\u0440\\u0436\\u0430\\u043d\\u0438\\u0435\",\n        \"Copyright\": \"\\u0410\\u0432\\u0442\\u043e\\u0440\\u0441\\u043a\\u0438\\u0435 \\u043f\\u0440\\u0430\\u0432\\u0430\",\n        \"Created using <a href=\\\"https://www.sphinx-doc.org/\\\">Sphinx</a> %(sphinx_version)s.\": \"\",\n        \"Expand sidebar\": \"\\u0420\\u0430\\u0437\\u0432\\u0435\\u0440\\u043d\\u0443\\u0442\\u044c \\u0431\\u043e\\u043a\\u043e\\u0432\\u0443\\u044e \\u043f\\u0430\\u043d\\u0435\\u043b\\u044c\",\n        \"Full index on one page\": \"\\u041f\\u043e\\u043b\\u043d\\u044b\\u0439 \\u0430\\u043b\\u0444\\u0430\\u0432\\u0438\\u0442\\u043d\\u044b\\u0439 \\u0443\\u043a\\u0430\\u0437\\u0430\\u0442\\u0435\\u043b\\u044c \\u043d\\u0430 \\u043e\\u0434\\u043d\\u043e\\u0439 \\u0441\\u0442\\u0440\\u0430\\u043d\\u0438\\u0446\\u0435\",\n        \"General Index\": \"\\u0410\\u043b\\u0444\\u0430\\u0432\\u0438\\u0442\\u043d\\u044b\\u0439 \\u0443\\u043a\\u0430\\u0437\\u0430\\u0442\\u0435\\u043b\\u044c\",\n        \"Global Module Index\": \"\\u0410\\u043b\\u0444\\u0430\\u0432\\u0438\\u0442\\u043d\\u044b\\u0439 \\u0443\\u043a\\u0430\\u0437\\u0430\\u0442\\u0435\\u043b\\u044c \\u043c\\u043e\\u0434\\u0443\\u043b\\u0435\\u0439\",\n        \"Go\": \"\\u0418\\u0441\\u043a\\u0430\\u0442\\u044c\",\n        \"Hide Search Matches\": \"\\u0421\\u043d\\u044f\\u0442\\u044c \\u0432\\u044b\\u0434\\u0435\\u043b\\u0435\\u043d\\u0438\\u0435\",\n        \"Index\": \"\\u0410\\u043b\\u0444\\u0430\\u0432\\u0438\\u0442\\u043d\\u044b\\u0439 \\u0443\\u043a\\u0430\\u0437\\u0430\\u0442\\u0435\\u043b\\u044c\",\n        \"Index &ndash; %(key)s\": \"\\u0410\\u043b\\u0444\\u0430\\u0432\\u0438\\u0442\\u043d\\u044b\\u0439 \\u0443\\u043a\\u0430\\u0437\\u0430\\u0442\\u0435\\u043b\\u044c &ndash; %(key)s\",",
                "filename": "sphinx/locale/ru/LC_MESSAGES/sphinx.js",
                "start_index": 68,
                "end_index": 3039,
                "start_line": 1,
                "end_line": 24,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.2",
                "sha": ""
            },
            {
                "code": "{\n        \"%(filename)s &#8212; %(docstitle)s\": \"%(filename)s &#8212; %(docstitle)s\",\n        \"&#169; <a href=\\\"%(path)s\\\">Copyright</a> %(copyright)s.\": \"&#169; <a href=\\\"%(path)s\\\">\\u062d\\u0642 \\u0646\\u0634\\u0631</a> %(copyright)s.\",\n        \"&#169; Copyright %(copyright)s.\": \"&#169; \\u062d\\u0642 \\u0646\\u0634\\u0631%(copyright)s.\",\n        \", in \": \"\\u060c \\u062f\\u0631 \",\n        \"About these documents\": \"\\u062f\\u0631\\u0628\\u0627\\u0631\\u0647 \\u0627\\u06cc\\u0646 \\u0645\\u0633\\u062a\\u0646\\u062f\\u0627\\u062a\",\n        \"Automatically generated list of changes in version %(version)s\": \"\\u0644\\u06cc\\u0633\\u062a \\u062a\\u0648\\u0644\\u06cc\\u062f \\u0634\\u062f\\u0647 \\u062e\\u0648\\u062f\\u06a9\\u0627\\u0631 \\u0627\\u0632 \\u062a\\u063a\\u06cc\\u06cc\\u0631\\u0627\\u062a \\u062f\\u0631 \\u0646\\u0633\\u062e\\u0647 %(version)s\",\n        \"C API changes\": \"C API \\u062a\\u063a\\u06cc\\u06cc\\u0631\\u0627\\u062a\",\n        \"Changes in Version %(version)s &#8212; %(docstitle)s\": \"\\u062a\\u063a\\u06cc\\u06cc\\u0631\\u0627\\u062a \\u062f\\u0631 \\u0646\\u0633\\u062e\\u0647 %(version)s &#8212; %(docstitle)s\",\n        \"Collapse sidebar\": \"\\u062a\\u0627 \\u06a9\\u0631\\u062f\\u0646 \\u0646\\u0648\\u0627\\u0631 \\u06a9\\u0646\\u0627\\u0631\\u0647\",\n        \"Complete Table of Contents\": \"\\u0641\\u0647\\u0631\\u0633\\u062a \\u06a9\\u0627\\u0645\\u0644 \\u0645\\u0637\\u0627\\u0644\\u0628\",\n        \"Contents\": \"\\u0645\\u062d\\u062a\\u0648\\u0627 \\u0647\\u0627\",\n        \"Copyright\": \"\\u06a9\\u067e\\u06cc \\u0631\\u0627\\u06cc\\u062a\",\n        \"Created using <a href=\\\"https://www.sphinx-doc.org/\\\">Sphinx</a> %(sphinx_version)s.\": \"\\u0627\\u06cc\\u062c\\u0627\\u062f \\u0634\\u062f\\u0647 \\u0628\\u0627<a href=\\\"https://www.sphinx-doc.org/\\\">Sphinx</a> %(sphinx_version)s.\",\n        \"Expand sidebar\": \"\\u06af\\u0633\\u062a\\u0631\\u0634 \\u0646\\u0648\\u0627\\u0631 \\u06a9\\u0646\\u0627\\u0631\\u0647\",\n        \"Full index on one page\": \"\\u0641\\u0647\\u0631\\u0633\\u062a \\u06a9\\u0627\\u0645\\u0644 \\u062f\\u0631 \\u06cc\\u06a9 \\u0635\\u0641\\u062d\\u0647\",\n        \"General Index\": \"\\u0641\\u0647\\u0631\\u0633\\u062a \\u06a9\\u0644\\u06cc\",\n        \"Global Module Index\": \"\\u0641\\u0647\\u0631\\u0633\\u062a \\u06a9\\u0644\\u06cc \\u0645\\u0627\\u0698\\u0648\\u0644 \\u0647\\u0627\",\n        \"Go\": \"\\u0628\\u0631\\u0648\",\n        \"Hide Search Matches\": \"\\u0639\\u062f\\u0645 \\u0646\\u0645\\u0627\\u06cc\\u0634 \\u0646\\u062a\\u0627\\u06cc\\u062c \\u06cc\\u0627\\u0641\\u062a \\u0634\\u062f\\u0647\",\n        \"Index\": \"\\u0641\\u0647\\u0631\\u0633\\u062a\",\n        \"Index &ndash; %(key)s\": \"\\u0641\\u0647\\u0631\\u0633\\u062a &ndash; %(key)s\",\n        \"Index pages by letter\": \"\\u0641\\u0647\\u0631\\u0633\\u062a \\u0635\\u0641\\u062d\\u0627\\u062a \\u0628\\u0631 \\u0627\\u0633\\u0627\\u0633 \\u062d\\u0631\\u0648\\u0641\",\n        \"Indices and tables:\": \"\\u0627\\u06cc\\u0646\\u062f\\u06a9\\u0633 \\u0647\\u0627 \\u0648 \\u062c\\u062f\\u0627\\u0648\\u0644:\",\n        \"Last updated on %(last_updated)s.\": \"\\u0622\\u062e\\u0631\\u06cc\\u0646 \\u0628\\u0631\\u0648\\u0632 \\u0631\\u0633\\u0627\\u0646\\u06cc \\u062f\\u0631 %(last_updated)s .\",",
                "filename": "sphinx/locale/fa/LC_MESSAGES/sphinx.js",
                "start_index": 68,
                "end_index": 2998,
                "start_line": 1,
                "end_line": 27,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.2",
                "sha": ""
            },
            {
                "code": "\"\"\"Allow graphviz-formatted graphs to be included inline in generated documents.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport posixpath\nimport re\nimport subprocess\nfrom os import path\nfrom subprocess import CalledProcessError\nfrom typing import Any\n\nfrom docutils import nodes\nfrom docutils.nodes import Node\nfrom docutils.parsers.rst import Directive, directives\n\nimport sphinx\nfrom sphinx.application import Sphinx\nfrom sphinx.errors import SphinxError\nfrom sphinx.locale import _, __\nfrom sphinx.util import logging, sha1\nfrom sphinx.util.docutils import SphinxDirective, SphinxTranslator\nfrom sphinx.util.fileutil import copy_asset\nfrom sphinx.util.i18n import search_image_for_language\nfrom sphinx.util.nodes import set_source_info\nfrom sphinx.util.osutil import ensuredir\nfrom sphinx.util.typing import OptionSpec\nfrom sphinx.writers.html import HTML5Translator\nfrom sphinx.writers.latex import LaTeXTranslator\nfrom sphinx.writers.manpage import ManualPageTranslator\nfrom sphinx.writers.texinfo import TexinfoTranslator\nfrom sphinx.writers.text import TextTranslator\n\nlogger = logging.getLogger(__name__)\n\n\nclass GraphvizError(SphinxError):\n    category = 'Graphviz error'\n\n\nclass ClickableMapDefinition:\n    \"\"\"A manipulator for clickable map file of graphviz.\"\"\"\n    maptag_re = re.compile('<map id=\"(.*?)\"')\n    href_re = re.compile('href=\".*?\"')\n\n    def __init__(self, filename: str, content: str, dot: str = '') -> None:\n        self.id: str | None = None\n        self.filename = filename\n        self.content = content.splitlines()\n        self.clickable: list[str] = []\n\n        self.parse(dot=dot)\n\n    def parse(self, dot: str) -> None:\n        matched = self.maptag_re.match(self.content[0])\n        if not matched:\n            raise GraphvizError('Invalid clickable map file found: %s' % self.filename)\n\n        self.id = matched.group(1)\n        if self.id == '%3':\n            # graphviz generates wrong ID if graph name not specified\n            # https://gitlab.com/graphviz/graphviz/issues/1327\n            hashed = sha1(dot.encode()).hexdigest()\n            self.id = 'grapviz%s' % hashed[-10:]\n            self.content[0] = self.content[0].replace('%3', self.id)\n\n        for line in self.content:\n            if self.href_re.search(line):\n                self.clickable.append(line)\n\n    def generate_clickable_map(self) -> str:\n        \"\"\"Generate clickable map tags if clickable item exists.\n\n        If not exists, this only returns empty string.\n        \"\"\"\n        if self.clickable:\n            return '\\n'.join([self.content[0]] + self.clickable + [self.content[-1]])\n        else:\n            return ''\n\n\nclass graphviz(nodes.General, nodes.Inline, nodes.Element):\n    pass",
                "filename": "sphinx/ext/graphviz.py",
                "start_index": 0,
                "end_index": 2710,
                "start_line": 1,
                "end_line": 83,
                "max_line": 416,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.2",
                "sha": ""
            },
            {
                "code": "{\n        \"%(filename)s &#8212; %(docstitle)s\": \"%(filename)s &#8212; %(docstitle)s\",\n        \"&#169; <a href=\\\"%(path)s\\\">Copyright</a> %(copyright)s.\": \"&#169; <a href=\\\"%(path)s\\\">\\u0938\\u0930\\u094d\\u0935\\u093e\\u0927\\u093f\\u0915\\u093e\\u0930</a> %(copyright)s.\",\n        \"&#169; Copyright %(copyright)s.\": \"&#169; \\u0938\\u0930\\u094d\\u0935\\u093e\\u0927\\u093f\\u0915\\u093e\\u0930 %(copyright)s.\",\n        \", in \": \", \\u092e\\u0947\\u0902 \",\n        \"About these documents\": \"\\u0907\\u0928 \\u0932\\u0947\\u0916\\u092a\\u0924\\u094d\\u0930\\u094b\\u0902 \\u0915\\u0947 \\u092c\\u093e\\u0930\\u0947 \\u092e\\u0947\\u0902\",\n        \"Automatically generated list of changes in version %(version)s\": \"\\u0938\\u0902\\u0938\\u094d\\u0915\\u0930\\u0923 %(version)s \\u092e\\u0947\\u0902 \\u0938\\u094d\\u0935\\u0924\\u0903 \\u0930\\u091a\\u093f\\u0924 \\u092a\\u0930\\u093f\\u0935\\u0930\\u094d\\u0924\\u0928\\u094b\\u0902 \\u0915\\u0940 \\u0938\\u0942\\u091a\\u0940\",\n        \"C API changes\": \"\\u0938\\u0940 \\u0910.\\u092a\\u0940.\\u0906\\u0908. \\u092a\\u0930\\u093f\\u0935\\u0930\\u094d\\u0924\\u0928\",\n        \"Changes in Version %(version)s &#8212; %(docstitle)s\": \"\\u092a\\u0930\\u093f\\u0935\\u0930\\u094d\\u0924\\u093f\\u0924 \\u0938\\u0902\\u0938\\u094d\\u0915\\u0930\\u0923 %(version)s &#8212; %(docstitle)s\",\n        \"Collapse sidebar\": \"\\u0915\\u093f\\u0928\\u093e\\u0930\\u0947 \\u0915\\u093e \\u0938\\u094d\\u0925\\u093e\\u0928 \\u0918\\u091f\\u093e\\u090f\\u0902\",\n        \"Complete Table of Contents\": \"\\u0935\\u093f\\u0938\\u094d\\u0924\\u0943\\u0924 \\u0935\\u093f\\u0937\\u092f-\\u0938\\u0942\\u091a\\u0940\",\n        \"Contents\": \"\\u0935\\u093f\\u0937\\u092f \\u0938\\u093e\\u092e\\u093f\\u0917\\u094d\\u0930\\u0940\",\n        \"Copyright\": \"\\u0938\\u0930\\u094d\\u0935\\u093e\\u0927\\u093f\\u0915\\u093e\\u0930\",\n        \"Created using <a href=\\\"https://www.sphinx-doc.org/\\\">Sphinx</a> %(sphinx_version)s.\": \"\",\n        \"Expand sidebar\": \"\\u0915\\u093f\\u0928\\u093e\\u0930\\u0947 \\u0915\\u093e \\u0938\\u094d\\u0925\\u093e\\u0928 \\u092c\\u095d\\u093e\\u090f\\u0902\",\n        \"Full index on one page\": \"\\u090f\\u0915 \\u092a\\u0943\\u0937\\u094d\\u0920 \\u092a\\u0930 \\u092a\\u0942\\u0930\\u0940 \\u0905\\u0928\\u0941\\u0915\\u094d\\u0930\\u092e\\u0923\\u093f\\u0915\\u093e\",\n        \"General Index\": \"\\u0938\\u093e\\u092e\\u093e\\u0928\\u094d\\u092f \\u0905\\u0928\\u0941\\u0915\\u094d\\u0930\\u092e\\u093e\\u0923\\u093f\\u0915\\u093e\",\n        \"Global Module Index\": \"\\u0938\\u093e\\u0930\\u094d\\u0935\\u092d\\u094c\\u092e\\u093f\\u0915 \\u092a\\u094d\\u0930\\u092d\\u093e\\u0917 \\u0938\\u0942\\u091a\\u0940\",\n        \"Go\": \"\\u091a\\u0932\\u093f\\u090f\",\n        \"Hide Search Matches\": \"\\u0916\\u094b\\u091c\\u0947 \\u0917\\u090f \\u091c\\u094b\\u095c\\u0947 \\u091b\\u093f\\u092a\\u093e\\u090f\\u0902\",\n        \"Index\": \"\\u0905\\u0928\\u0941\\u0915\\u094d\\u0930\\u092e\\u0923\\u093f\\u0915\\u093e\",\n        \"Index &ndash; %(key)s\": \"\\u0905\\u0928\\u0941\\u0915\\u094d\\u0930\\u092e\\u0923\\u093f\\u0915\\u093e &ndash; %(key)s\",\n        \"Index pages by letter\": \"\\u0905\\u0915\\u094d\\u0937\\u0930 \\u0926\\u094d\\u0935\\u093e\\u0930\\u093e \\u0905\\u0928\\u0941\\u0915\\u094d\\u0930\\u092e\\u093f\\u0924 \\u092a\\u0943\\u0937\\u094d\\u0920\",",
                "filename": "sphinx/locale/hi/LC_MESSAGES/sphinx.js",
                "start_index": 68,
                "end_index": 3052,
                "start_line": 1,
                "end_line": 25,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.2",
                "sha": ""
            },
            {
                "code": "\"\"\"Image files collector for sphinx.environment.\"\"\"\n\n    def clear_doc(self, app: Sphinx, env: BuildEnvironment, docname: str) -> None:\n        env.images.purge_doc(docname)\n\n    def merge_other(self, app: Sphinx, env: BuildEnvironment,\n                    docnames: set[str], other: BuildEnvironment) -> None:\n        env.images.merge_other(docnames, other.images)\n\n    def process_doc(self, app: Sphinx, doctree: nodes.document) -> None:\n        \"\"\"Process and rewrite image URIs.\"\"\"\n        docname = app.env.docname\n\n        for node in doctree.findall(nodes.image):\n            # Map the mimetype to the corresponding image.  The writer may\n            # choose the best image from these candidates.  The special key * is\n            # set if there is only single candidate to be used by a writer.\n            # The special key ? is set for nonlocal URIs.\n            candidates: dict[str, str] = {}\n            node['candidates'] = candidates\n            imguri = node['uri']\n            if imguri.startswith('data:'):\n                candidates['?'] = imguri\n                continue\n            if imguri.find('://') != -1:\n                candidates['?'] = imguri\n                continue\n\n            if imguri.endswith(os.extsep + '*'):\n                # Update `node['uri']` to a relative path from srcdir\n                # from a relative path from current document.\n                rel_imgpath, full_imgpath = app.env.relfn2path(imguri, docname)\n                node['uri'] = rel_imgpath\n\n                # Search language-specific figures at first\n                i18n_imguri = get_image_filename_for_language(imguri, app.env)\n                _, full_i18n_imgpath = app.env.relfn2path(i18n_imguri, docname)\n                self.collect_candidates(app.env, full_i18n_imgpath, candidates, node)\n\n                self.collect_candidates(app.env, full_imgpath, candidates, node)\n            else:\n                # substitute imguri by figure_language_filename\n                # (ex. foo.png -> foo.en.png)\n                imguri = search_image_for_language(imguri, app.env)\n\n                # Update `node['uri']` to a relative path from srcdir\n                # from a relative path from current document.\n                node['uri'], _ = app.env.relfn2path(imguri, docname)\n                candidates['*'] = node['uri']\n\n            # map image paths to unique image names (so that they can be put\n            # into a single directory)\n            for imgpath in candidates.values():\n                app.env.dependencies[docname].add(imgpath)\n                if not os.access(path.join(app.srcdir, imgpath), os.R_OK):\n                    logger.warning(__('image file not readable: %s') % imgpath,\n                                   location=node, type='image', subtype='not_readable')\n                    continue\n                app.env.images.add_file(docname, imgpath)",
                "filename": "sphinx/environment/collectors/asset.py",
                "start_index": 724,
                "end_index": 3611,
                "start_line": 27,
                "end_line": 85,
                "max_line": 141,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.2",
                "sha": ""
            },
            {
                "code": "{\n        \"%(filename)s &#8212; %(docstitle)s\": \"%(filename)s &#8212; %(docstitle)s\",\n        \"&#169; <a href=\\\"%(path)s\\\">Copyright</a> %(copyright)s.\": \"&#169; <a href=\\\"%(path)s\\\">Copyright</a>%(copyright)s\",\n        \"&#169; Copyright %(copyright)s.\": \"&#169; Copyright %(copyright)s.\",\n        \", in \": \", \\u03c3\\u03c4\\u03bf \",\n        \"About these documents\": \"\\u03a3\\u03c7\\u03b5\\u03c4\\u03b9\\u03ba\\u03ac \\u03bc\\u03b5 \\u03b1\\u03c5\\u03c4\\u03ac \\u03c4\\u03b1 \\u03ba\\u03b5\\u03af\\u03bc\\u03b5\\u03bd\\u03b1\",\n        \"Automatically generated list of changes in version %(version)s\": \"\\u0391\\u03c5\\u03c4\\u03cc\\u03bc\\u03b1\\u03c4\\u03b1 \\u03c0\\u03b1\\u03c1\\u03b1\\u03b3\\u03cc\\u03bc\\u03b5\\u03bd\\u03b7 \\u03bb\\u03af\\u03c3\\u03c4\\u03b1 \\u03b1\\u03bb\\u03bb\\u03b1\\u03b3\\u03ce\\u03bd \\u03c3\\u03c4\\u03b7\\u03bd \\u03ad\\u03ba\\u03b4\\u03bf\\u03c3\\u03b7 %(version)s\",\n        \"C API changes\": \"\\u0391\\u03bb\\u03bb\\u03b1\\u03b3\\u03ad\\u03c2 \\u03c3\\u03c4\\u03bf API \\u03c4\\u03b7\\u03c2 C\",\n        \"Changes in Version %(version)s &#8212; %(docstitle)s\": \"\\u0391\\u03bb\\u03bb\\u03b1\\u03b3\\u03ad\\u03c2 \\u03c3\\u03c4\\u03b7\\u03bd \\u0388\\u03ba\\u03b4\\u03bf\\u03c3\\u03b7 %(version)s &#8212'\\n%(docstitle)s\",\n        \"Collapse sidebar\": \"\\u039a\\u03bb\\u03b5\\u03af\\u03c3\\u03b9\\u03bc\\u03bf \\u03c0\\u03bb\\u03b1\\u03ca\\u03bd\\u03ae\\u03c2 \\u03bc\\u03c0\\u03ac\\u03c1\\u03b1\\u03c2\",\n        \"Complete Table of Contents\": \"\\u03a0\\u03bb\\u03ae\\u03c1\\u03b7\\u03c2 \\u03a0\\u03af\\u03bd\\u03b1\\u03ba\\u03b1\\u03c2 \\u03a0\\u03b5\\u03c1\\u03b9\\u03b5\\u03c7\\u03bf\\u03bc\\u03ad\\u03bd\\u03c9\\u03bd\",\n        \"Contents\": \"\\u03a0\\u03b5\\u03c1\\u03b9\\u03b5\\u03c7\\u03cc\\u03bc\\u03b5\\u03bd\\u03b1\",\n        \"Copyright\": \"Copyright\",\n        \"Created using <a href=\\\"https://www.sphinx-doc.org/\\\">Sphinx</a> %(sphinx_version)s.\": \"\",\n        \"Expand sidebar\": \"\\u0386\\u03bd\\u03bf\\u03b9\\u03b3\\u03bc\\u03b1 \\u03c0\\u03bb\\u03b1\\u03ca\\u03bd\\u03ae\\u03c2 \\u03bc\\u03c0\\u03ac\\u03c1\\u03b1\\u03c2\",\n        \"Full index on one page\": \"\\u03a0\\u03bb\\u03ae\\u03c1\\u03b5\\u03c2 \\u03b5\\u03c5\\u03c1\\u03b5\\u03c4\\u03ae\\u03c1\\u03b9\\u03bf \\u03c3\\u03b5 \\u03bc\\u03af\\u03b1 \\u03c3\\u03b5\\u03bb\\u03af\\u03b4\\u03b1\",\n        \"General Index\": \"\\u039a\\u03b5\\u03bd\\u03c4\\u03c1\\u03b9\\u03ba\\u03cc \\u0395\\u03c5\\u03c1\\u03b5\\u03c4\\u03ae\\u03c1\\u03b9\\u03bf\\u03bf\",\n        \"Global Module Index\": \"\\u039a\\u03b1\\u03b8\\u03bf\\u03bb\\u03b9\\u03ba\\u03cc \\u0395\\u03c5\\u03c1\\u03b5\\u03c4\\u03ae\\u03c1\\u03b9\\u03bf \\u039c\\u03bf\\u03bd\\u03ac\\u03b4\\u03c9\\u03bd\",\n        \"Go\": \"\\u03a0\\u03ac\\u03bc\\u03b5\",\n        \"Hide Search Matches\": \"\\u0391\\u03c0\\u03cc\\u03ba\\u03c1\\u03c5\\u03c8\\u03b7 \\u0395\\u03c5\\u03c1\\u03b5\\u03b8\\u03ad\\u03bd\\u03c4\\u03c9\\u03bd \\u0391\\u03bd\\u03b1\\u03b6\\u03b7\\u03c4\\u03ae\\u03c3\\u03b5\\u03c9\\u03bd\",\n        \"Index\": \"\\u0395\\u03c5\\u03c1\\u03b5\\u03c4\\u03ae\\u03c1\\u03b9\\u03bf\",\n        \"Index &ndash; %(key)s\": \"\\u0395\\u03c5\\u03c1\\u03b5\\u03c4\\u03ae\\u03c1\\u03b9\\u03bf &ndash; %(key)s\",",
                "filename": "sphinx/locale/el/LC_MESSAGES/sphinx.js",
                "start_index": 68,
                "end_index": 2911,
                "start_line": 1,
                "end_line": 24,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/sphinx-doc__sphinx__3.2",
                "sha": ""
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "sphinx/util/i18n.py": [
                {
                    "chunk": {
                        "code": "at_date(date: datetime, format: str, locale: str,\n                      formatter: Callable = babel.dates.format_date) -> str:\n    # Check if we have the tzinfo attribute. If not we cannot do any time\n    # related formats.\n    if not hasattr(date, 'tzinfo'):\n        formatter = babel.dates.format_date\n\n    try:\n        return formatter(date, format, locale=locale)\n    except (ValueError, babel.core.UnknownLocaleError):\n        # fallback to English\n        return formatter(date, format, locale='en')\n    except AttributeError:\n        logger.warning(__('Invalid date format. Quote the string by single quote '\n                          'if you want to output it directly: %s'), format)\n        return format\n\n\ndef format_date(\n    format: str, *, date: datetime | None = None, language: str,\n) -> str:\n    if date is None:\n        # If time is not specified, try to use $SOURCE_DATE_EPOCH variable\n        # See https://wiki.debian.org/ReproducibleBuilds/TimestampsProposal\n        source_date_epoch = os.getenv('SOURCE_DATE_EPOCH')\n        if source_date_epoch is not None:\n            date = datetime.utcfromtimestamp(float(source_date_epoch))\n        else:\n            date = datetime.now(timezone.utc).astimezone()\n\n    result = []\n    tokens = date_format_re.split(format)\n    for token in tokens:\n        if token in date_format_mappings:\n            babel_format = date_format_mappings.get(token, '')\n\n            # Check if we have to use a different babel formatter then\n            # format_datetime, because we only want to format a date\n            # or a time.\n            if token == '%x':\n                function = babel.dates.format_date\n            elif token == '%X':\n                function = babel.dates.format_time\n            else:\n                function = babel.dates.format_datetime\n\n            result.append(babel_format_date(date, babel_format, locale=language,\n                                            formatter=function))\n        else:\n            result.append(token)\n\n    return \"\".join(result)\n\n\ndef get_image_filename_for_language(filename: str, env: BuildEnvironment) -> str:\n    filename_format = env.config.figure_language_filename\n    d = {}\n    d['root'], d['ext'] = path.splitext(filename)\n    dirname = path.dirname(d['root'])\n    if dirname and not dirname.endswith(path.sep):\n        dirname += path.sep\n    docpath = path.dirname(env.docname)\n    if docpath and not docpath.endswith(path.sep):\n        docpath += path.sep\n    d['path'] = dirname\n    d['basename'] = path.basename(d['root'])\n    d['docpath'] = docpath\n    d['language'] = env.config.language\n    try:\n        return filename_format.format(**d)\n    except KeyError as exc:\n        raise SphinxError('Invalid figure_language_filename: %r' % exc) from exc\n\n\ndef search_ima",
                        "filename": "sphinx/util/i18n.py",
                        "start_index": 6531,
                        "end_index": 9322,
                        "start_line": 170,
                        "end_line": 244,
                        "max_line": 250,
                        "git_instance": "github",
                        "repo_name": "testbed/sphinx-doc__sphinx__3.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the function 'get_image_filename_for_language' which is directly related to the handling of figure_language_filename and image localization."
                }
            ],
            "sphinx/environment/collectors/asset.py": [
                {
                    "chunk": {
                        "code": "\"\"\"Image files collector for sphinx.environment.\"\"\"\n\n    def clear_doc(self, app: Sphinx, env: BuildEnvironment, docname: str) -> None:\n        env.images.purge_doc(docname)\n\n    def merge_other(self, app: Sphinx, env: BuildEnvironment,\n                    docnames: set[str], other: BuildEnvironment) -> None:\n        env.images.merge_other(docnames, other.images)\n\n    def process_doc(self, app: Sphinx, doctree: nodes.document) -> None:\n        \"\"\"Process and rewrite image URIs.\"\"\"\n        docname = app.env.docname\n\n        for node in doctree.findall(nodes.image):\n            # Map the mimetype to the corresponding image.  The writer may\n            # choose the best image from these candidates.  The special key * is\n            # set if there is only single candidate to be used by a writer.\n            # The special key ? is set for nonlocal URIs.\n            candidates: dict[str, str] = {}\n            node['candidates'] = candidates\n            imguri = node['uri']\n            if imguri.startswith('data:'):\n                candidates['?'] = imguri\n                continue\n            if imguri.find('://') != -1:\n                candidates['?'] = imguri\n                continue\n\n            if imguri.endswith(os.extsep + '*'):\n                # Update `node['uri']` to a relative path from srcdir\n                # from a relative path from current document.\n                rel_imgpath, full_imgpath = app.env.relfn2path(imguri, docname)\n                node['uri'] = rel_imgpath\n\n                # Search language-specific figures at first\n                i18n_imguri = get_image_filename_for_language(imguri, app.env)\n                _, full_i18n_imgpath = app.env.relfn2path(i18n_imguri, docname)\n                self.collect_candidates(app.env, full_i18n_imgpath, candidates, node)\n\n                self.collect_candidates(app.env, full_imgpath, candidates, node)\n            else:\n                # substitute imguri by figure_language_filename\n                # (ex. foo.png -> foo.en.png)\n                imguri = search_image_for_language(imguri, app.env)\n\n                # Update `node['uri']` to a relative path from srcdir\n                # from a relative path from current document.\n                node['uri'], _ = app.env.relfn2path(imguri, docname)\n                candidates['*'] = node['uri']\n\n            # map image paths to unique image names (so that they can be put\n            # into a single directory)\n            for imgpath in candidates.values():\n                app.env.dependencies[docname].add(imgpath)\n                if not os.access(path.join(app.srcdir, imgpath), os.R_OK):\n                    logger.warning(__('image file not readable: %s') % imgpath,\n                                   location=node, type='image', subtype='not_readable')\n                    continue\n                app.env.images.add_file(docname, imgpath)",
                        "filename": "sphinx/environment/collectors/asset.py",
                        "start_index": 724,
                        "end_index": 3611,
                        "start_line": 27,
                        "end_line": 85,
                        "max_line": 141,
                        "git_instance": "github",
                        "repo_name": "testbed/sphinx-doc__sphinx__3.2",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet includes the 'process_doc' method which processes and rewrites image URIs, and it uses the 'get_image_filename_for_language' function, making it relevant to the issue."
                }
            ]
        },
        "solution_task": "To implement the requested feature for more customization options for `figure_language_filename` for localized images in Sphinx, you can follow these steps:\n\n- Modify the `get_image_filename_for_language` function in `sphinx/util/i18n.py` to support additional path substitution tokens that can be used to customize the path to localized images more freely.\n- Introduce new tokens such as `{relative_path}` and `{resolved_path}` as described in the feature request.\n- Update the `filename_format` string formatting to use the new tokens and ensure that `{root}` and `{path}` are relative to the Sphinx project's root folder.\n- Ensure that the new tokens are properly documented and that they work with existing functionality without breaking backward compatibility.\n\nHere is a high-level overview of the changes that need to be made to the `get_image_filename_for_language` function:\n\n```python\ndef get_image_filename_for_language(filename: str, env: BuildEnvironment) -> str:\n    filename_format = env.config.figure_language_filename\n    d = {}\n    d['root'], d['ext'] = path.splitext(filename)\n    d['basename'] = path.basename(d['root'])\n    d['language'] = env.config.language\n\n    # Calculate new tokens\n    docpath = path.dirname(env.docname)\n    d['relative_path'] = path.relpath(d['root'], start=docpath)\n    d['resolved_path'] = path.dirname(d['root'])\n\n    # Ensure that {root} and {path} are relative to the project's root\n    d['root'] = path.relpath(d['root'], start=env.srcdir)\n    d['path'] = path.relpath(d['path'], start=env.srcdir)\n\n    try:\n        return filename_format.format(**d)\n    except KeyError as exc:\n        raise SphinxError('Invalid figure_language_filename: %r' % exc) from exc\n```\n\nThis code snippet is a simplified version of the changes that need to be made. You will need to ensure that the new tokens are correctly calculated and that they work in the context of the Sphinx project's directory structure.\n\nAdditionally, you may need to handle edge cases and ensure that the new tokens do not introduce any regressions or conflicts with existing Sphinx functionality.\n\nRemember to add unit tests for the new feature to ensure that it works as expected and to prevent future regressions.\n\nLastly, update the documentation to reflect the new customization options available for `figure_language_filename`.",
        "bouncer_response": {
            "score": 8,
            "criteria": "The VALUE score should reflect how well the RESPONSE addresses the specific needs and context presented in the PROMPT, regardless of the completeness of the PROMPT itself.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable plan for implementing the requested feature for more customization options for `figure_language_filename` for localized images in Sphinx. It suggests modifying the `get_image_filename_for_language` function to support additional path substitution tokens, introduces new tokens as requested, and ensures that existing tokens are relative to the project's root. The RESPONSE also includes a code snippet to illustrate the proposed changes and emphasizes the importance of documentation and unit testing. The RESPONSE is highly relevant and offers clear suggestions that can directly lead to the successful implementation of the feature. However, it does not address the alternative solutions considered by the user, which could have been acknowledged or integrated into the proposed solution. Therefore, the RESPONSE is not entirely complete in addressing all aspects of the feature request, which is why it does not receive a perfect score.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711703840.139125,
        "result": "To implement the requested feature for more customization options for `figure_language_filename` for localized images in Sphinx, you can follow these steps:\n\n- Modify the `get_image_filename_for_language` function in `sphinx/util/i18n.py` to support additional path substitution tokens that can be used to customize the path to localized images more freely.\n- Introduce new tokens such as `{relative_path}` and `{resolved_path}` as described in the feature request.\n- Update the `filename_format` string formatting to use the new tokens and ensure that `{root}` and `{path}` are relative to the Sphinx project's root folder.\n- Ensure that the new tokens are properly documented and that they work with existing functionality without breaking backward compatibility.\n\nHere is a high-level overview of the changes that need to be made to the `get_image_filename_for_language` function:\n\n```python\ndef get_image_filename_for_language(filename: str, env: BuildEnvironment) -> str:\n    filename_format = env.config.figure_language_filename\n    d = {}\n    d['root'], d['ext'] = path.splitext(filename)\n    d['basename'] = path.basename(d['root'])\n    d['language'] = env.config.language\n\n    # Calculate new tokens\n    docpath = path.dirname(env.docname)\n    d['relative_path'] = path.relpath(d['root'], start=docpath)\n    d['resolved_path'] = path.dirname(d['root'])\n\n    # Ensure that {root} and {path} are relative to the project's root\n    d['root'] = path.relpath(d['root'], start=env.srcdir)\n    d['path'] = path.relpath(d['path'], start=env.srcdir)\n\n    try:\n        return filename_format.format(**d)\n    except KeyError as exc:\n        raise SphinxError('Invalid figure_language_filename: %r' % exc) from exc\n```\n\nThis code snippet is a simplified version of the changes that need to be made. You will need to ensure that the new tokens are correctly calculated and that they work in the context of the Sphinx project's directory structure.\n\nAdditionally, you may need to handle edge cases and ensure that the new tokens do not introduce any regressions or conflicts with existing Sphinx functionality.\n\nRemember to add unit tests for the new feature to ensure that it works as expected and to prevent future regressions.\n\nLastly, update the documentation to reflect the new customization options available for `figure_language_filename`.\n\n### Code snippets to check\n\n-  \u2192 [sphinx](https://github.com/testbed/sphinx-doc__sphinx__3.2/tree//sphinx) \u2192 [util](https://github.com/testbed/sphinx-doc__sphinx__3.2/tree//sphinx/util)- [Lines 170 - 244](https://github.com/testbed/sphinx-doc__sphinx__3.2/blob//sphinx/util/i18n.py#L170-L244)\n\n This snippet contains the function 'get_image_filename_for_language' which is directly related to the handling of figure_language_filename and image localization.\n-  \u2192 [sphinx](https://github.com/testbed/sphinx-doc__sphinx__3.2/tree//sphinx) \u2192 [environment](https://github.com/testbed/sphinx-doc__sphinx__3.2/tree//sphinx/environment) \u2192 [collectors](https://github.com/testbed/sphinx-doc__sphinx__3.2/tree//sphinx/environment/collectors)- [Lines 27 - 85](https://github.com/testbed/sphinx-doc__sphinx__3.2/blob//sphinx/environment/collectors/asset.py#L27-L85)\n\n This snippet includes the 'process_doc' method which processes and rewrites image URIs, and it uses the 'get_image_filename_for_language' function, making it relevant to the issue."
    }
}