{
    "id": "pylint-dev__pylint-8683",
    "repo_name": "testbed/pylint-dev__pylint__3.0",
    "task_id": 5904926388864237158,
    "title": "fail/warn on using parallel execution with custom plugins",
    "body": "According to documentation:\r\nhttp://pylint.pycqa.org/en/latest/user_guide/run.html#parallel-execution\r\n\r\n> There are some limitations in running checks in parallel in the current implementation. It is not possible to use custom plugins (i.e. --load-plugins option)...\r\n\r\nActually, it is possible but silently broken.\r\n`If this is still by design` then Pylint should inform a user about it in such cases.\r\nAs for now, I could run:\r\n```\r\npylint -j 10 --load-plugins plugin_foo bar.py\r\n```\r\nwithout any warning or error.\r\nUnfortunately, linting results are not the same as a single process linting, but Pylint silently pass. So, results are not predictable.\r\n\r\nProposal: emit a warning or better explicitly fail on using parallel execution with custom Pylint plugins, because people usually don't read the documentation while things works.\r\n\r\n\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pylint-dev__pylint__3.0.git",
    "requested_commit": "",
    "mayil_response": "- Add a check in the argument parsing code to detect the use of `-j` (parallel execution) with `--load-plugins` (custom plugins).\n- If both options are used together, emit a warning or raise an error to inform the user that this combination is not supported.\n- Modify the `parse_arguments` function to include this check and handle the incompatibility.\n- Example modification in `pylint/lint/run.py` or wherever the argument parsing is handled:\n\n```python\ndef parse_arguments(args):\n    # Existing argument parsing logic...\n    parsed_args = ...  # Hypothetical variable holding the parsed arguments\n\n    if parsed_args.j > 1 and parsed_args.load_plugins:\n        raise ValueError(\"Parallel execution with custom plugins is not supported.\")\n    \n    return parsed_args\n```\n\n- Ensure that the error message or warning is clear and actionable for the user.\n- Update the `load_plugin_modules` function in `pylint/lint/pylinter.py` to handle the case where plugins should not be loaded in parallel, if necessary.\n\n### Code snippets to check\n\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__3.0/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__3.0/tree//pylint/lint)- [Lines 362 - 1131](https://github.com/testbed/pylint-dev__pylint__3.0/blob//pylint/lint/pylinter.py#L362-L1131)\n\n This snippet contains the logic for loading plugin modules, which is directly related to the issue of handling custom plugins during parallel execution. \n\n\n   - [Lines 190 - 1141](https://github.com/testbed/pylint-dev__pylint__3.0/blob//pylint/lint/pylinter.py#L190-L1141)\n\n This snippet defines the error messages for pylint, including one for bad plugin values, which could be relevant for providing feedback when custom plugins are used with parallel execution.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__3.0/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__3.0/tree//pylint/lint)- [Lines 1 - 75](https://github.com/testbed/pylint-dev__pylint__3.0/blob//pylint/lint/run.py#L1-L75)\n\n This snippet is part of the module that handles the execution of pylint, including parallel execution, which is relevant to the issue.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.00046899999999999996,
        "snippet_processor": 0.049460000000000004,
        "issue_star_creation": 0.02735,
        "issue_star_solver": 0.05629,
        "bouncer": 0.028950000000000004
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711699522.879797,
        "relevant_snippets": [
            {
                "code": "name: \ud83e\udd14 Support question\ndescription: Questions about pylint that are not covered in the documentation\nlabels: [\"Needs triage :inbox_tray:\", \"Question\", \"Documentation :green_book:\"]\nbody:\n  - type: markdown\n    attributes:\n      value: >\n        **Thank you for wanting to report a problem with pylint documentation!**\n\n\n        Please fill out your suggestions below. If the problem seems straightforward,\n        feel free to go ahead and submit a pull request instead!\n\n\n        \u26a0 Verify first that your issue is not [already reported on GitHub][issue\n        search].\n\n        \ud83d\udcac If you are seeking community support, please consider [starting a discussion\n        on Discord][Discussions].\n\n\n        [issue search]:\n        https://github.com/pylint-dev/pylint/issues?q=is%3Aissue+is%3Aopen+\n\n        [Discussions]: https://discord.com/invite/Egy6P8AMB5\n\n  - type: textarea\n    id: question\n    attributes:\n      label: Question\n    validations:\n      required: true\n  - type: textarea\n    id: documentation\n    attributes:\n      label: Documentation for future user\n      description:\n        Where did you expect this information to be? What do we need to add or what do\n        we need to reorganize?\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: Additional context\n      description: >\n        Add any other context, links, etc. about the question here.\n      placeholder: >-\n        I asked on https://stackoverflow.com/... and the community advised me to do X, Y\n        and Z.",
                "filename": ".github/ISSUE_TEMPLATE/QUESTION.yml",
                "start_index": 0,
                "end_index": 1528,
                "start_line": 1,
                "end_line": 49,
                "max_line": 49,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__3.0",
                "sha": ""
            },
            {
                "code": "name: \u2728 Feature request\ndescription: Suggest an idea for pylint\nlabels: [\"Needs triage :inbox_tray:\"]\nbody:\n  - type: markdown\n    attributes:\n      value: |\n        **Thank you for wanting to make a suggestion for pylint!**\n\n        \u26a0 Please make sure that [this feature wasn't already requested][issue search] or already implemented in the main branch.\n\n\n        [issue search]: https://github.com/pylint-dev/pylint/issues?q=is%3Aissue+is%3Aopen+\n\n  - type: textarea\n    id: current-problem\n    attributes:\n      label: Current problem\n      description:\n        What are you trying to do, that you are unable to achieve with pylint as it\n        currently stands?\n      placeholder: >-\n        I'm trying to do X and I'm missing feature Y for this to be easily achievable.\n    validations:\n      required: true\n  - type: textarea\n    id: proposed-solution\n    attributes:\n      label: Desired solution\n      description: A clear and concise description of what you want to happen.\n      placeholder: >-\n        When I do X, I want to achieve Y in a situation when Z.\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: Additional context\n      description: >\n        Add any other context, links, etc. about the feature here. Describe how the\n        feature would be used, why it is needed and what it would solve.\n\n        **HINT:** You can paste https://gist.github.com links for larger files.\n      placeholder: >-\n        I asked on https://stackoverflow.com/... and the community advised me to do X, Y\n        and Z.",
                "filename": ".github/ISSUE_TEMPLATE/FEATURE-REQUEST.yml",
                "start_index": 0,
                "end_index": 1559,
                "start_line": 1,
                "end_line": 45,
                "max_line": 45,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__3.0",
                "sha": ""
            },
            {
                "code": "def load_default_plugins(self) -> None:\n        checkers.initialize(self)\n        reporters.initialize(self)\n\n    def load_plugin_modules(self, modnames: Iterable[str], force: bool = False) -> None:\n        \"\"\"Check a list of pylint plugins modules, load and register them.\n\n        If a module cannot be loaded, never try to load it again and instead\n        store the error message for later use in ``load_plugin_configuration``\n        below.\n\n        If `force` is True (useful when multiprocessing), then the plugin is\n        reloaded regardless if an entry exists in self._dynamic_plugins.\n        \"\"\"\n        for modname in modnames:\n            if modname in self._dynamic_plugins and not force:\n                continue\n            try:\n                module = astroid.modutils.load_module_from_name(modname)\n                module.register(self)\n                self._dynamic_plugins[modname] = module\n            except ModuleNotFoundError as mnf_e:\n                self._dynamic_plugins[modname] = mnf_e\n\n    def load_plugin_configuration(self) -> None:\n        \"\"\"Call the configuration hook for plugins.\n\n        This walks through the list of plugins, grabs the \"load_configuration\"\n        hook, if exposed, and calls it to allow plugins to configure specific\n        settings.\n\n        The result of attempting to load the plugin of the given name\n        is stored in the dynamic plugins dictionary in ``load_plugin_modules`` above.\n\n        ..note::\n            This function previously always tried to load modules again, which\n            led to some confusion and silent failure conditions as described\n            in GitHub issue #7264. Making it use the stored result is more efficient, and\n            means that we avoid the ``init-hook`` problems from before.\n        \"\"\"\n        for modname, module_or_error in self._dynamic_plugins.items():\n            if isinstance(module_or_error, ModuleNotFoundError):\n                self.add_message(\n                    \"bad-plugin-value\", args=(modname, module_or_error), line=0\n                )\n            elif hasattr(module_or_error, \"load_configuration\"):\n                module_or_error.load_configuration(self)\n\n        # We re-set all the dictionary values to True here to make sure the dict\n        # is pickle-able. This is only a problem in multiprocessing/parallel mode.\n        # (e.g. invoking pylint -j 2)\n        self._dynamic_plugins = {\n            modname: not isinstance(val, ModuleNotFoundError)\n            for modname, val in self._dynamic_plugins.items()\n        }",
                "filename": "pylint/lint/pylinter.py",
                "start_index": 12552,
                "end_index": 15113,
                "start_line": 362,
                "end_line": 1131,
                "max_line": 1310,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__3.0",
                "sha": ""
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nimport os\nimport sys\nimport warnings\nfrom collections.abc import Sequence\nfrom pathlib import Path\nfrom typing import ClassVar\n\nfrom pylint import config\nfrom pylint.checkers.utils import clear_lru_caches\nfrom pylint.config._pylint_config import (\n    _handle_pylint_config_commands,\n    _register_generate_config_options,\n)\nfrom pylint.config.config_initialization import _config_initialization\nfrom pylint.config.exceptions import ArgumentPreprocessingError\nfrom pylint.config.utils import _preprocess_options\nfrom pylint.constants import full_version\nfrom pylint.lint.base_options import _make_run_options\nfrom pylint.lint.pylinter import MANAGER, PyLinter\nfrom pylint.reporters.base_reporter import BaseReporter\n\ntry:\n    import multiprocessing\n    from multiprocessing import synchronize  # noqa pylint: disable=unused-import\nexcept ImportError:\n    multiprocessing = None  # type: ignore[assignment]\n\ntry:\n    from concurrent.futures import ProcessPoolExecutor\nexcept ImportError:\n    ProcessPoolExecutor = None  # type: ignore[assignment,misc]\n\n\ndef _query_cpu() -> int | None:\n    \"\"\"Try to determine number of CPUs allotted in a docker container.\n\n    This is based on discussion and copied from suggestions in\n    https://bugs.python.org/issue36054.\n    \"\"\"\n    cpu_quota, avail_cpu = None, None\n\n    if Path(\"/sys/fs/cgroup/cpu/cpu.cfs_quota_us\").is_file():\n        with open(\"/sys/fs/cgroup/cpu/cpu.cfs_quota_us\", encoding=\"utf-8\") as file:\n            # Not useful for AWS Batch based jobs as result is -1, but works on local linux systems\n            cpu_quota = int(file.read().rstrip())\n\n    if (\n        cpu_quota\n        and cpu_quota != -1\n        and Path(\"/sys/fs/cgroup/cpu/cpu.cfs_period_us\").is_file()\n    ):\n        with open(\"/sys/fs/cgroup/cpu/cpu.cfs_period_us\", encoding=\"utf-8\") as file:\n            cpu_period = int(file.read().rstrip())\n        # Divide quota by period and you should get num of allotted CPU to the container,\n        # rounded down if fractional.\n        avail_cpu = int(cpu_quota / cpu_period)\n    elif Path(\"/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n        with open(\"/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n            cpu_shares = int(file.read().rstrip())\n        # For AWS, gives correct value * 1024.\n        avail_cpu = int(cpu_shares / 1024)\n\n    # In K8s Pods also a fraction of a single core could be available\n    # As multiprocessing is not able to run only a \"fraction\" of process\n    # assume we have 1 CPU available\n    if avail_cpu == 0:\n        avail_cpu = 1\n\n    return avail_cpu",
                "filename": "pylint/lint/run.py",
                "start_index": 0,
                "end_index": 2837,
                "start_line": 1,
                "end_line": 75,
                "max_line": 242,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__3.0",
                "sha": ""
            },
            {
                "code": "(\n            \"unsafe-load-any-extension\",\n            {\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"default\": False,\n                \"hide\": True,\n                \"help\": (\n                    \"Allow loading of arbitrary C extensions. Extensions\"\n                    \" are imported into the active Python interpreter and\"\n                    \" may run arbitrary code.\"\n                ),\n            },\n        ),\n        (\n            \"limit-inference-results\",\n            {\n                \"type\": \"int\",\n                \"metavar\": \"<number-of-results>\",\n                \"default\": 100,\n                \"help\": (\n                    \"Control the amount of potential inferred values when inferring \"\n                    \"a single object. This can help the performance when dealing with \"\n                    \"large functions or complex, nested conditions.\"\n                ),\n            },\n        ),\n        (\n            \"extension-pkg-allow-list\",\n            {\n                \"type\": \"csv\",\n                \"metavar\": \"<pkg[,pkg]>\",\n                \"default\": [],\n                \"help\": (\n                    \"A comma-separated list of package or module names\"\n                    \" from where C extensions may be loaded. Extensions are\"\n                    \" loading into the active Python interpreter and may run\"\n                    \" arbitrary code.\"\n                ),\n            },\n        ),\n        (\n            \"extension-pkg-whitelist\",\n            {\n                \"type\": \"csv\",\n                \"metavar\": \"<pkg[,pkg]>\",\n                \"default\": [],\n                \"help\": (\n                    \"A comma-separated list of package or module names\"\n                    \" from where C extensions may be loaded. Extensions are\"\n                    \" loading into the active Python interpreter and may run\"\n                    \" arbitrary code. (This is an alternative name to\"\n                    \" extension-pkg-allow-list for backward compatibility.)\"\n                ),\n            },\n        ),\n        (\n            \"suggestion-mode\",\n            {\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"default\": True,\n                \"help\": (\n                    \"When enabled, pylint would attempt to guess common \"\n                    \"misconfiguration and emit user-friendly hints instead \"\n                    \"of false-positive error messages.\"\n                ),\n            },\n        ),\n        (\n            \"exit-zero\",\n            {\n                \"action\": \"store_true\",\n                \"default\": False,\n                \"metavar\": \"<flag>\",\n                \"help\": (\n                    \"Always return a 0 (non-error) status code, even if \"\n                    \"lint errors are found. This is primarily useful in \"\n                    \"continuous integration scripts.\"\n                ),\n            },\n        ),",
                "filename": "pylint/lint/base_options.py",
                "start_index": 9512,
                "end_index": 12444,
                "start_line": 3,
                "end_line": 595,
                "max_line": 596,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__3.0",
                "sha": ""
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nimport abc\nimport functools\nfrom collections.abc import Iterable, Sequence\nfrom inspect import cleandoc\nfrom tokenize import TokenInfo\nfrom typing import TYPE_CHECKING, Any\n\nfrom astroid import nodes\n\nfrom pylint.config.arguments_provider import _ArgumentsProvider\nfrom pylint.constants import _MSG_ORDER, MAIN_CHECKER_NAME, WarningScope\nfrom pylint.exceptions import InvalidMessageError\nfrom pylint.interfaces import Confidence\nfrom pylint.message.message_definition import MessageDefinition\nfrom pylint.typing import (\n    ExtraMessageOptions,\n    MessageDefinitionTuple,\n    OptionDict,\n    Options,\n    ReportsCallable,\n)\nfrom pylint.utils import get_rst_section, get_rst_title\n\nif TYPE_CHECKING:\n    from pylint.lint import PyLinter",
                "filename": "pylint/checkers/base_checker.py",
                "start_index": 0,
                "end_index": 1005,
                "start_line": 1,
                "end_line": 31,
                "max_line": 249,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__3.0",
                "sha": ""
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\n\"\"\"Pylint [options] modules_or_packages.\n\n  Check that module(s) satisfy a coding standard (and more !).\n\n    pylint --help\n\n  Display this help message and exit.\n\n    pylint --help-msg <msg-id>[,<msg-id>]\n\n  Display help messages about given message identifiers and exit.\n\"\"\"\nimport sys\n\nfrom pylint.config.exceptions import ArgumentPreprocessingError\nfrom pylint.lint.caching import load_results, save_results\nfrom pylint.lint.expand_modules import discover_package_path\nfrom pylint.lint.parallel import check_parallel\nfrom pylint.lint.pylinter import PyLinter\nfrom pylint.lint.report_functions import (\n    report_messages_by_module_stats,\n    report_messages_stats,\n    report_total_messages_stats,\n)\nfrom pylint.lint.run import Run\nfrom pylint.lint.utils import _augment_sys_path, augmented_sys_path\n\n__all__ = [\n    \"check_parallel\",\n    \"PyLinter\",\n    \"report_messages_by_module_stats\",\n    \"report_messages_stats\",\n    \"report_total_messages_stats\",\n    \"Run\",\n    \"ArgumentPreprocessingError\",\n    \"_augment_sys_path\",\n    \"augmented_sys_path\",\n    \"discover_package_path\",\n    \"save_results\",\n    \"load_results\",\n]\n\nif __name__ == \"__main__\":\n    Run(sys.argv[1:])",
                "filename": "pylint/lint/__init__.py",
                "start_index": 0,
                "end_index": 1407,
                "start_line": 1,
                "end_line": 48,
                "max_line": 48,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__3.0",
                "sha": ""
            },
            {
                "code": "\"https://github.com/pylint-dev/pylint/pull/4942\":",
                "filename": "pylint/message/_deleted_message_ids.py",
                "start_index": 576,
                "end_index": 625,
                "start_line": 21,
                "end_line": 21,
                "max_line": 179,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__3.0",
                "sha": ""
            },
            {
                "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt",
                "filename": "script/__init__.py",
                "start_index": 0,
                "end_index": 230,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__3.0",
                "sha": ""
            },
            {
                "code": "\"I0022\": (\n        'Pragma \"%s\" is deprecated, use \"%s\" instead',\n        \"deprecated-pragma\",\n        \"Some inline pylint options have been renamed or reworked, \"\n        \"only the most recent form should be used. \"\n        \"NOTE:skip-all is only available with pylint >= 0.26\",\n        {\n            \"old_names\": [(\"I0014\", \"deprecated-disable-all\")],\n            \"scope\": WarningScope.LINE,\n            \"default_enabled\": False,\n        },\n    ),\n    \"E0001\": (\n        \"%s\",\n        \"syntax-error\",\n        \"Used when a syntax error is raised for a module.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0011\": (\n        \"Unrecognized file option %r\",\n        \"unrecognized-inline-option\",\n        \"Used when an unknown inline option is encountered.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"W0012\": (\n        \"Unknown option value for '%s', expected a valid pylint message and got '%s'\",\n        \"unknown-option-value\",\n        \"Used when an unknown value is encountered for an option.\",\n        {\n            \"scope\": WarningScope.LINE,\n            \"old_names\": [(\"E0012\", \"bad-option-value\")],\n        },\n    ),\n    \"R0022\": (\n        \"Useless option value for '%s', %s\",\n        \"useless-option-value\",\n        \"Used when a value for an option that is now deleted from pylint\"\n        \" is encountered.\",\n        {\n            \"scope\": WarningScope.LINE,\n            \"old_names\": [(\"E0012\", \"bad-option-value\")],\n        },\n    ),\n    \"E0013\": (\n        \"Plugin '%s' is impossible to load, is it installed ? ('%s')\",\n        \"bad-plugin-value\",\n        \"Used when a bad value is used in 'load-plugins'.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0014\": (\n        \"Out-of-place setting encountered in top level configuration-section '%s' : '%s'\",\n        \"bad-configuration-section\",\n        \"Used when we detect a setting in the top level of a toml configuration that\"\n        \" shouldn't be there.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0015\": (\n        \"Unrecognized option found: %s\",\n        \"unrecognized-option\",\n        \"Used when we detect an option that we do not recognize.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n}",
                "filename": "pylint/lint/pylinter.py",
                "start_index": 6020,
                "end_index": 8200,
                "start_line": 190,
                "end_line": 1141,
                "max_line": 1310,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__3.0",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "pylint/lint/pylinter.py": [
                {
                    "chunk": {
                        "code": "def load_default_plugins(self) -> None:\n        checkers.initialize(self)\n        reporters.initialize(self)\n\n    def load_plugin_modules(self, modnames: Iterable[str], force: bool = False) -> None:\n        \"\"\"Check a list of pylint plugins modules, load and register them.\n\n        If a module cannot be loaded, never try to load it again and instead\n        store the error message for later use in ``load_plugin_configuration``\n        below.\n\n        If `force` is True (useful when multiprocessing), then the plugin is\n        reloaded regardless if an entry exists in self._dynamic_plugins.\n        \"\"\"\n        for modname in modnames:\n            if modname in self._dynamic_plugins and not force:\n                continue\n            try:\n                module = astroid.modutils.load_module_from_name(modname)\n                module.register(self)\n                self._dynamic_plugins[modname] = module\n            except ModuleNotFoundError as mnf_e:\n                self._dynamic_plugins[modname] = mnf_e\n\n    def load_plugin_configuration(self) -> None:\n        \"\"\"Call the configuration hook for plugins.\n\n        This walks through the list of plugins, grabs the \"load_configuration\"\n        hook, if exposed, and calls it to allow plugins to configure specific\n        settings.\n\n        The result of attempting to load the plugin of the given name\n        is stored in the dynamic plugins dictionary in ``load_plugin_modules`` above.\n\n        ..note::\n            This function previously always tried to load modules again, which\n            led to some confusion and silent failure conditions as described\n            in GitHub issue #7264. Making it use the stored result is more efficient, and\n            means that we avoid the ``init-hook`` problems from before.\n        \"\"\"\n        for modname, module_or_error in self._dynamic_plugins.items():\n            if isinstance(module_or_error, ModuleNotFoundError):\n                self.add_message(\n                    \"bad-plugin-value\", args=(modname, module_or_error), line=0\n                )\n            elif hasattr(module_or_error, \"load_configuration\"):\n                module_or_error.load_configuration(self)\n\n        # We re-set all the dictionary values to True here to make sure the dict\n        # is pickle-able. This is only a problem in multiprocessing/parallel mode.\n        # (e.g. invoking pylint -j 2)\n        self._dynamic_plugins = {\n            modname: not isinstance(val, ModuleNotFoundError)\n            for modname, val in self._dynamic_plugins.items()\n        }",
                        "filename": "pylint/lint/pylinter.py",
                        "start_index": 12552,
                        "end_index": 15113,
                        "start_line": 362,
                        "end_line": 1131,
                        "max_line": 1310,
                        "git_instance": "github",
                        "repo_name": "testbed/pylint-dev__pylint__3.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the logic for loading plugin modules, which is directly related to the issue of handling custom plugins during parallel execution."
                },
                {
                    "chunk": {
                        "code": "\"I0022\": (\n        'Pragma \"%s\" is deprecated, use \"%s\" instead',\n        \"deprecated-pragma\",\n        \"Some inline pylint options have been renamed or reworked, \"\n        \"only the most recent form should be used. \"\n        \"NOTE:skip-all is only available with pylint >= 0.26\",\n        {\n            \"old_names\": [(\"I0014\", \"deprecated-disable-all\")],\n            \"scope\": WarningScope.LINE,\n            \"default_enabled\": False,\n        },\n    ),\n    \"E0001\": (\n        \"%s\",\n        \"syntax-error\",\n        \"Used when a syntax error is raised for a module.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0011\": (\n        \"Unrecognized file option %r\",\n        \"unrecognized-inline-option\",\n        \"Used when an unknown inline option is encountered.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"W0012\": (\n        \"Unknown option value for '%s', expected a valid pylint message and got '%s'\",\n        \"unknown-option-value\",\n        \"Used when an unknown value is encountered for an option.\",\n        {\n            \"scope\": WarningScope.LINE,\n            \"old_names\": [(\"E0012\", \"bad-option-value\")],\n        },\n    ),\n    \"R0022\": (\n        \"Useless option value for '%s', %s\",\n        \"useless-option-value\",\n        \"Used when a value for an option that is now deleted from pylint\"\n        \" is encountered.\",\n        {\n            \"scope\": WarningScope.LINE,\n            \"old_names\": [(\"E0012\", \"bad-option-value\")],\n        },\n    ),\n    \"E0013\": (\n        \"Plugin '%s' is impossible to load, is it installed ? ('%s')\",\n        \"bad-plugin-value\",\n        \"Used when a bad value is used in 'load-plugins'.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0014\": (\n        \"Out-of-place setting encountered in top level configuration-section '%s' : '%s'\",\n        \"bad-configuration-section\",\n        \"Used when we detect a setting in the top level of a toml configuration that\"\n        \" shouldn't be there.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0015\": (\n        \"Unrecognized option found: %s\",\n        \"unrecognized-option\",\n        \"Used when we detect an option that we do not recognize.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n}",
                        "filename": "pylint/lint/pylinter.py",
                        "start_index": 6020,
                        "end_index": 8200,
                        "start_line": 190,
                        "end_line": 1141,
                        "max_line": 1310,
                        "git_instance": "github",
                        "repo_name": "testbed/pylint-dev__pylint__3.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet defines the error messages for pylint, including one for bad plugin values, which could be relevant for providing feedback when custom plugins are used with parallel execution."
                }
            ],
            "pylint/lint/run.py": [
                {
                    "chunk": {
                        "code": "# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n\nfrom __future__ import annotations\n\nimport os\nimport sys\nimport warnings\nfrom collections.abc import Sequence\nfrom pathlib import Path\nfrom typing import ClassVar\n\nfrom pylint import config\nfrom pylint.checkers.utils import clear_lru_caches\nfrom pylint.config._pylint_config import (\n    _handle_pylint_config_commands,\n    _register_generate_config_options,\n)\nfrom pylint.config.config_initialization import _config_initialization\nfrom pylint.config.exceptions import ArgumentPreprocessingError\nfrom pylint.config.utils import _preprocess_options\nfrom pylint.constants import full_version\nfrom pylint.lint.base_options import _make_run_options\nfrom pylint.lint.pylinter import MANAGER, PyLinter\nfrom pylint.reporters.base_reporter import BaseReporter\n\ntry:\n    import multiprocessing\n    from multiprocessing import synchronize  # noqa pylint: disable=unused-import\nexcept ImportError:\n    multiprocessing = None  # type: ignore[assignment]\n\ntry:\n    from concurrent.futures import ProcessPoolExecutor\nexcept ImportError:\n    ProcessPoolExecutor = None  # type: ignore[assignment,misc]\n\n\ndef _query_cpu() -> int | None:\n    \"\"\"Try to determine number of CPUs allotted in a docker container.\n\n    This is based on discussion and copied from suggestions in\n    https://bugs.python.org/issue36054.\n    \"\"\"\n    cpu_quota, avail_cpu = None, None\n\n    if Path(\"/sys/fs/cgroup/cpu/cpu.cfs_quota_us\").is_file():\n        with open(\"/sys/fs/cgroup/cpu/cpu.cfs_quota_us\", encoding=\"utf-8\") as file:\n            # Not useful for AWS Batch based jobs as result is -1, but works on local linux systems\n            cpu_quota = int(file.read().rstrip())\n\n    if (\n        cpu_quota\n        and cpu_quota != -1\n        and Path(\"/sys/fs/cgroup/cpu/cpu.cfs_period_us\").is_file()\n    ):\n        with open(\"/sys/fs/cgroup/cpu/cpu.cfs_period_us\", encoding=\"utf-8\") as file:\n            cpu_period = int(file.read().rstrip())\n        # Divide quota by period and you should get num of allotted CPU to the container,\n        # rounded down if fractional.\n        avail_cpu = int(cpu_quota / cpu_period)\n    elif Path(\"/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n        with open(\"/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n            cpu_shares = int(file.read().rstrip())\n        # For AWS, gives correct value * 1024.\n        avail_cpu = int(cpu_shares / 1024)\n\n    # In K8s Pods also a fraction of a single core could be available\n    # As multiprocessing is not able to run only a \"fraction\" of process\n    # assume we have 1 CPU available\n    if avail_cpu == 0:\n        avail_cpu = 1\n\n    return avail_cpu",
                        "filename": "pylint/lint/run.py",
                        "start_index": 0,
                        "end_index": 2837,
                        "start_line": 1,
                        "end_line": 75,
                        "max_line": 242,
                        "git_instance": "github",
                        "repo_name": "testbed/pylint-dev__pylint__3.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is part of the module that handles the execution of pylint, including parallel execution, which is relevant to the issue."
                }
            ]
        },
        "solution_task": "- Add a check in the argument parsing code to detect the use of `-j` (parallel execution) with `--load-plugins` (custom plugins).\n- If both options are used together, emit a warning or raise an error to inform the user that this combination is not supported.\n- Modify the `parse_arguments` function to include this check and handle the incompatibility.\n- Example modification in `pylint/lint/run.py` or wherever the argument parsing is handled:\n\n```python\ndef parse_arguments(args):\n    # Existing argument parsing logic...\n    parsed_args = ...  # Hypothetical variable holding the parsed arguments\n\n    if parsed_args.j > 1 and parsed_args.load_plugins:\n        raise ValueError(\"Parallel execution with custom plugins is not supported.\")\n    \n    return parsed_args\n```\n\n- Ensure that the error message or warning is clear and actionable for the user.\n- Update the `load_plugin_modules` function in `pylint/lint/pylinter.py` to handle the case where plugins should not be loaded in parallel, if necessary.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable solution to the problem described in the PROMPT. It suggests adding a check in the argument parsing code to detect the use of parallel execution with custom plugins and to emit a warning or raise an error if both options are used together. The RESPONSE also includes an example modification to the `parse_arguments` function, which is directly relevant to the issue. Additionally, it advises updating the `load_plugin_modules` function if necessary and provides code snippets to check, which are relevant to the issue at hand. The RESPONSE is comprehensive and addresses the main concern of the PROMPT, which is to inform the user about the incompatibility of parallel execution with custom plugins in Pylint.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711699607.423313,
        "result": "- Add a check in the argument parsing code to detect the use of `-j` (parallel execution) with `--load-plugins` (custom plugins).\n- If both options are used together, emit a warning or raise an error to inform the user that this combination is not supported.\n- Modify the `parse_arguments` function to include this check and handle the incompatibility.\n- Example modification in `pylint/lint/run.py` or wherever the argument parsing is handled:\n\n```python\ndef parse_arguments(args):\n    # Existing argument parsing logic...\n    parsed_args = ...  # Hypothetical variable holding the parsed arguments\n\n    if parsed_args.j > 1 and parsed_args.load_plugins:\n        raise ValueError(\"Parallel execution with custom plugins is not supported.\")\n    \n    return parsed_args\n```\n\n- Ensure that the error message or warning is clear and actionable for the user.\n- Update the `load_plugin_modules` function in `pylint/lint/pylinter.py` to handle the case where plugins should not be loaded in parallel, if necessary.\n\n### Code snippets to check\n\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__3.0/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__3.0/tree//pylint/lint)- [Lines 362 - 1131](https://github.com/testbed/pylint-dev__pylint__3.0/blob//pylint/lint/pylinter.py#L362-L1131)\n\n This snippet contains the logic for loading plugin modules, which is directly related to the issue of handling custom plugins during parallel execution. \n\n\n   - [Lines 190 - 1141](https://github.com/testbed/pylint-dev__pylint__3.0/blob//pylint/lint/pylinter.py#L190-L1141)\n\n This snippet defines the error messages for pylint, including one for bad plugin values, which could be relevant for providing feedback when custom plugins are used with parallel execution.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__3.0/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__3.0/tree//pylint/lint)- [Lines 1 - 75](https://github.com/testbed/pylint-dev__pylint__3.0/blob//pylint/lint/run.py#L1-L75)\n\n This snippet is part of the module that handles the execution of pylint, including parallel execution, which is relevant to the issue."
    }
}