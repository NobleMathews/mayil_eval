{
    "id": "astropy__astropy-14365",
    "repo_name": "testbed/astropy__astropy__5.1",
    "task_id": 4382268108293771560,
    "title": "ascii.qdp Table format assumes QDP commands are upper case",
    "body": "### Description\n\nascii.qdp assumes that commands in a QDP file are upper case, for example, for errors they must be \"READ SERR 1 2\" whereas QDP itself is not case sensitive and case use \"read serr 1 2\". \r\n\r\nAs many QDP files are created by hand, the expectation that all commands be all-caps should be removed.\n\n### Expected behavior\n\nThe following qdp file should read into a `Table` with errors, rather than crashing.\r\n```\r\nread serr 1 2 \r\n1 0.5 1 0.5\r\n```\n\n### How to Reproduce\n\nCreate a QDP file:\r\n```\r\n> cat > test.qdp\r\nread serr 1 2 \r\n1 0.5 1 0.5\r\n<EOF>\r\n\r\n > python\r\nPython 3.10.9 (main, Dec  7 2022, 02:03:23) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from astropy.table import Table\r\n>>> Table.read('test.qdp',format='ascii.qdp')\r\nWARNING: table_id not specified. Reading the first available table [astropy.io.ascii.qdp]\r\nTraceback (most recent call last):\r\n...\r\n    raise ValueError(f'Unrecognized QDP line: {line}')\r\nValueError: Unrecognized QDP line: read serr 1 2\r\n```\r\n\r\nRunning \"qdp test.qdp\" works just fine.\r\n\n\n### Versions\n\nPython 3.10.9 (main, Dec  7 2022, 02:03:23) [Clang 13.0.0 (clang-1300.0.29.30)]\r\nastropy 5.1\r\nNumpy 1.24.1\r\npyerfa 2.0.0.1\r\nScipy 1.10.0\r\nMatplotlib 3.6.3\r\n\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/astropy__astropy__5.1.git",
    "requested_commit": "",
    "mayil_response": "- Modify the `_line_type` function in `astropy/io/ascii/qdp.py` to ensure that QDP commands are matched in a case-insensitive manner.\n- Update the regular expression `_command_re` to use the `re.IGNORECASE` flag or use the inline `(?i)` flag within the regex pattern itself.\n- Ensure that the compiled regular expression `_line_type_re` is also using the `re.IGNORECASE` flag.\n\n```python\n# In astropy/io/ascii/qdp.py, modify the _line_type function\n\ndef _line_type(line, delimiter=None):\n    # ... [rest of the code remains unchanged] ...\n\n    # Update the command regex pattern to be case-insensitive\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n\n    # ... [rest of the code remains unchanged] ...\n\n    # Ensure the compiled regex is case-insensitive\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n\n    # ... [rest of the code remains unchanged] ...\n```\n\n- No changes are required in the other parts of the codebase as they are not relevant to the issue at hand.\n\n### Code snippets to check\n\n-  \u2192 [astropy](https://github.com/testbed/astropy__astropy__5.1/tree//astropy) \u2192 [io](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/io) \u2192 [ascii](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/io/ascii)- [Lines 1 - 85](https://github.com/testbed/astropy__astropy__5.1/blob//astropy/io/ascii/qdp.py#L1-L85)\n\n This snippet contains the _line_type function which is responsible for interpreting QDP file lines and categorizing them as 'comment', 'command', or 'data'. The issue is related to the handling of commands in different cases, which is likely to be addressed in this function. \n\n\n   - [Lines 524 - 613](https://github.com/testbed/astropy__astropy__5.1/blob//astropy/io/ascii/qdp.py#L524-L613)\n\n This snippet provides an overview of the QDP table format and mentions the commands like 'READ SERR' and 'READ TERR'. It is relevant because the issue is about the case sensitivity of such commands. \n\n\n   - [Lines 345 - 422](https://github.com/testbed/astropy__astropy__5.1/blob//astropy/io/ascii/qdp.py#L345-L422)\n\n This snippet contains the _understand_err_col function which processes column names to identify error columns. It may be relevant if the fix involves changes to how error specifications are interpreted from the QDP file.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0004969999999999999,
        "snippet_processor": 0.060770000000000005,
        "issue_star_creation": 0.030649999999999997,
        "issue_star_solver": 0.0659,
        "bouncer": 0.0239
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711736155.894058,
        "relevant_snippets": [
            {
                "code": "\"\"\"Quick and Dandy Plot table.\n\n    Example::\n\n        ! Initial comment line 1\n        ! Initial comment line 2\n        READ TERR 1\n        READ SERR 3\n        ! Table 0 comment\n        !a a(pos) a(neg) b be c d\n        53000.5   0.25  -0.5   1  1.5  3.5 2\n        54000.5   1.25  -1.5   2  2.5  4.5 3\n        NO NO NO NO NO\n        ! Table 1 comment\n        !a a(pos) a(neg) b be c d\n        54000.5   2.25  -2.5   NO  3.5  5.5 5\n        55000.5   3.25  -3.5   4  4.5  6.5 nan\n\n    The input table above contains some initial comments, the error commands,\n    then two tables.\n    This file format can contain multiple tables, separated by a line full\n    of ``NO``s. Comments are exclamation marks, and missing values are single\n    ``NO`` entries. The delimiter is usually whitespace, more rarely a comma.\n    The QDP format differentiates between data and error columns. The table\n    above has commands::\n\n        READ TERR 1\n        READ SERR 3\n\n    which mean that after data column 1 there will be two error columns\n    containing its positive and engative error bars, then data column 2 without\n    error bars, then column 3, then a column with the symmetric error of column\n    3, then the remaining data columns.\n\n    As explained below, table headers are highly inconsistent. Possible\n    comments containing column names will be ignored and columns will be called\n    ``col1``, ``col2``, etc. unless the user specifies their names with the\n    ``names=`` keyword argument,\n    When passing column names, pass **only the names of the data columns, not\n    the error columns.**\n    Error information will be encoded in the names of the table columns.\n    (e.g. ``a_perr`` and ``a_nerr`` for the positive and negative error of\n    column ``a``, ``b_err`` the symmetric error of column ``b``.)\n\n    When writing tables to this format, users can pass an ``err_specs`` keyword\n    passing a dictionary ``{'serr': [3], 'terr': [1, 2]}``, meaning that data\n    columns 1 and two will have two additional columns each with their positive\n    and negative errors, and data column 3 will have an additional column with\n    a symmetric error (just like the ``READ SERR`` and ``READ TERR`` commands\n    above)\n\n    Headers are just comments, and tables distributed by various missions\n    can differ greatly in their use of conventions. For example, light curves\n    distributed by the Swift-Gehrels mission have an extra space in one header\n    entry that makes the number of labels inconsistent with the number of cols.\n    For this reason, we ignore the comments that might encode the column names\n    and leave the name specification to the user.\n\n    Example::\n\n        >               Extra space\n        >                   |\n        >                   v\n        >!     MJD       Err (pos)       Err(neg)        Rate            Error\n        >53000.123456   2.378e-05     -2.378472e-05     NO             0.212439\n\n    These readers and writer classes will strive to understand which of the\n    comments belong to all the tables, and which ones to each single table.\n    General comments will be stored in the ``initial_comments`` meta of each\n    table. The comments of each table will be stored in the ``comments`` meta.\n\n    Example::\n\n        t = Table.read(example_qdp, format='ascii.qdp', table_id=1, names=['a', 'b', 'c', 'd'])\n\n    reads the second table (``table_id=1``) in file ``example.qdp`` containing\n    the table above. There are four column names but seven data columns, why?\n    Because the ``READ SERR`` and ``READ TERR`` commands say that there are\n    three error columns.\n    ``t.meta['initial_comments']`` will contain the initial two comment lines\n    in the file, while ``t.meta['comments']`` will contain ``Table 1 comment``\n\n    The table can be written to another file, preserving the same information,\n    as::\n\n        t.write(test_file, err_specs={'terr': [1], 'serr': [3]})\n\n    Note how the ``terr`` and ``serr`` commands are passed to the writer.\n\n    \"\"\"",
                "filename": "astropy/io/ascii/qdp.py",
                "start_index": 15414,
                "end_index": 19412,
                "start_line": 524,
                "end_line": 613,
                "max_line": 642,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\"\"\"\nThis package contains functions for reading and writing QDP tables that are\nnot meant to be used directly, but instead are available as readers/writers in\n`astropy.table`. See :ref:`astropy:table_io` for more details.\n\"\"\"\nimport copy\nimport re\nimport warnings\nfrom collections.abc import Iterable\n\nimport numpy as np\n\nfrom astropy.table import Table\nfrom astropy.utils.exceptions import AstropyUserWarning\n\nfrom . import basic, core\n\n\ndef _line_type(line, delimiter=None):\n    \"\"\"Interpret a QDP file line.\n\n    Parameters\n    ----------\n    line : str\n        a single line of the file\n\n    Returns\n    -------\n    type : str\n        Line type: \"comment\", \"command\", or \"data\"\n\n    Examples\n    --------\n    >>> _line_type(\"READ SERR 3\")\n    'command'\n    >>> _line_type(\" \\\\n    !some gibberish\")\n    'comment'\n    >>> _line_type(\"   \")\n    'comment'\n    >>> _line_type(\" 21345.45\")\n    'data,1'\n    >>> _line_type(\" 21345.45 1.53e-3 1e-3 .04 NO nan\")\n    'data,6'\n    >>> _line_type(\" 21345.45,1.53e-3,1e-3,.04,NO,nan\", delimiter=',')\n    'data,6'\n    >>> _line_type(\" 21345.45 ! a comment to disturb\")\n    'data,1'\n    >>> _line_type(\"NO NO NO NO NO\")\n    'new'\n    >>> _line_type(\"NO,NO,NO,NO,NO\", delimiter=',')\n    'new'\n    >>> _line_type(\"N O N NOON OON O\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Unrecognized QDP line...\n    >>> _line_type(\" some non-comment gibberish\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Unrecognized QDP line...\n    \"\"\"\n    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n\n    sep = delimiter\n    if delimiter is None:\n        sep = r\"\\s+\"\n    _new_re = rf\"NO({sep}NO)+\"\n    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n    line = line.strip()\n    if not line:\n        return \"comment\"\n    match = _line_type_re.match(line)\n\n    if match is None:\n        raise ValueError(f\"Unrecognized QDP line: {line}\")\n    for type_, val in match.groupdict().items():\n        if val is None:\n            continue\n        if type_ == \"data\":\n            return f\"data,{len(val.split(sep=delimiter))}\"\n        else:\n            return type_",
                "filename": "astropy/io/ascii/qdp.py",
                "start_index": 0,
                "end_index": 2446,
                "start_line": 1,
                "end_line": 85,
                "max_line": 642,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "_format_name = \"qdp\"\n    _io_registry_can_write = True\n    _io_registry_suffix = \".qdp\"\n    _description = \"Quick and Dandy Plotter\"\n\n    header_class = QDPHeader\n    data_class = QDPData\n\n    def __init__(self, table_id=None, names=None, err_specs=None, sep=None):\n        super().__init__()\n        self.table_id = table_id\n        self.names = names\n        self.err_specs = err_specs\n        self.delimiter = sep\n\n    def read(self, table):\n        self.lines = self.inputter.get_lines(table, newline=\"\\n\")\n        return _read_table_qdp(\n            self.lines,\n            table_id=self.table_id,\n            names=self.names,\n            delimiter=self.delimiter,\n        )\n\n    def write(self, table):\n        self._check_multidim_table(table)\n        lines = _write_table_qdp(table, err_specs=self.err_specs)\n        return lines",
                "filename": "astropy/io/ascii/qdp.py",
                "start_index": 19418,
                "end_index": 20256,
                "start_line": 615,
                "end_line": 642,
                "max_line": 642,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "def _write_table_qdp(table, filename=None, err_specs=None):\n    \"\"\"Write a table to a QDP file.\n\n    Parameters\n    ----------\n    table : :class:`~astropy.table.Table`\n        Input table to be written\n    filename : str\n        Output QDP file name\n\n    Other Parameters\n    ----------------\n    err_specs : dict\n        Dictionary of the format {'serr': [1], 'terr': [2, 3]}, specifying\n        which columns have symmetric and two-sided errors (see QDP format\n        specification)\n    \"\"\"\n    import io\n\n    fobj = io.StringIO()\n\n    if \"initial_comments\" in table.meta and table.meta[\"initial_comments\"] != []:\n        for line in table.meta[\"initial_comments\"]:\n            line = line.strip()\n            if not line.startswith(\"!\"):\n                line = \"!\" + line\n            print(line, file=fobj)\n\n    if err_specs is None:\n        serr_cols, terr_cols = _understand_err_col(table.colnames)\n    else:\n        serr_cols = err_specs.pop(\"serr\", [])\n        terr_cols = err_specs.pop(\"terr\", [])\n    if serr_cols != []:\n        col_string = \" \".join([str(val) for val in serr_cols])\n        print(f\"READ SERR {col_string}\", file=fobj)\n    if terr_cols != []:\n        col_string = \" \".join([str(val) for val in terr_cols])\n        print(f\"READ TERR {col_string}\", file=fobj)\n\n    if \"comments\" in table.meta and table.meta[\"comments\"] != []:\n        for line in table.meta[\"comments\"]:\n            line = line.strip()\n            if not line.startswith(\"!\"):\n                line = \"!\" + line\n            print(line, file=fobj)\n\n    colnames = table.colnames\n    print(\"!\" + \" \".join(colnames), file=fobj)\n    for row in table:\n        values = []\n        for val in row:\n            if not np.ma.is_masked(val):\n                rep = str(val)\n            else:\n                rep = \"NO\"\n            values.append(rep)\n        print(\" \".join(values), file=fobj)\n\n    full_string = fobj.getvalue()\n    fobj.close()\n\n    if filename is not None:\n        with open(filename, \"w\") as fobj:\n            print(full_string, file=fobj)\n\n    return full_string.split(\"\\n\")\n\n\nclass QDPSplitter(core.DefaultSplitter):\n    \"\"\"\n    Split on space for QDP tables.\n    \"\"\"\n\n    delimiter = \" \"\n\n\nclass QDPHeader(basic.CommentedHeaderHeader):\n    \"\"\"\n    Header that uses the :class:`astropy.io.ascii.basic.QDPSplitter`.\n    \"\"\"\n\n    splitter_class = QDPSplitter\n    comment = \"!\"\n    write_comment = \"!\"\n\n\nclass QDPData(basic.BasicData):\n    \"\"\"\n    Data that uses the :class:`astropy.io.ascii.basic.CsvSplitter`.\n    \"\"\"\n\n    splitter_class = QDPSplitter\n    fill_values = [(core.masked, \"NO\")]\n    comment = \"!\"\n    write_comment = None",
                "filename": "astropy/io/ascii/qdp.py",
                "start_index": 12748,
                "end_index": 15383,
                "start_line": 425,
                "end_line": 520,
                "max_line": 642,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "def _understand_err_col(colnames):\n    \"\"\"Get which column names are error columns.\n\n    Examples\n    --------\n    >>> colnames = ['a', 'a_err', 'b', 'b_perr', 'b_nerr']\n    >>> serr, terr = _understand_err_col(colnames)\n    >>> np.allclose(serr, [1])\n    True\n    >>> np.allclose(terr, [2])\n    True\n    >>> serr, terr = _understand_err_col(['a', 'a_nerr'])\n    Traceback (most recent call last):\n    ...\n    ValueError: Missing positive error...\n    >>> serr, terr = _understand_err_col(['a', 'a_perr'])\n    Traceback (most recent call last):\n    ...\n    ValueError: Missing negative error...\n    \"\"\"\n    shift = 0\n    serr = []\n    terr = []\n\n    for i, col in enumerate(colnames):\n        if col.endswith(\"_err\"):\n            # The previous column, but they're numbered from 1!\n            # Plus, take shift into account\n            serr.append(i - shift)\n            shift += 1\n        elif col.endswith(\"_perr\"):\n            terr.append(i - shift)\n            if len(colnames) == i + 1 or not colnames[i + 1].endswith(\"_nerr\"):\n                raise ValueError(\"Missing negative error\")\n            shift += 2\n        elif col.endswith(\"_nerr\") and not colnames[i - 1].endswith(\"_perr\"):\n            raise ValueError(\"Missing positive error\")\n    return serr, terr\n\n\ndef _read_table_qdp(qdp_file, names=None, table_id=None, delimiter=None):\n    \"\"\"Read a table from a QDP file.\n\n    Parameters\n    ----------\n    qdp_file : str\n        Input QDP file name\n\n    Other Parameters\n    ----------------\n    names : list of str\n        Name of data columns (defaults to ['col1', 'col2', ...]), _not_\n        including error columns.\n\n    table_id : int, default 0\n        Number of the table to be read from the QDP file. This is useful\n        when multiple tables present in the file. By default, the first is read.\n\n    delimiter : str\n        Any delimiter accepted by the `sep` argument of str.split()\n\n    Returns\n    -------\n    tables : list of `~astropy.table.Table`\n        List containing all the tables present inside the QDP file\n    \"\"\"\n    if table_id is None:\n        warnings.warn(\n            \"table_id not specified. Reading the first available table\",\n            AstropyUserWarning,\n        )\n        table_id = 0\n\n    tables = _get_tables_from_qdp_file(\n        qdp_file, input_colnames=names, delimiter=delimiter\n    )\n\n    return tables[table_id]",
                "filename": "astropy/io/ascii/qdp.py",
                "start_index": 10373,
                "end_index": 12745,
                "start_line": 345,
                "end_line": 422,
                "max_line": 642,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):",
                "filename": "astropy/io/ascii/qdp.py",
                "start_index": 6656,
                "end_index": 6733,
                "start_line": 237,
                "end_line": 237,
                "max_line": 642,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "\"\"\"Get all tables from a QDP file.\n\n    Parameters\n    ----------\n    qdp_file : str\n        Input QDP file name\n\n    Other Parameters\n    ----------------\n    input_colnames : list of str\n        Name of data columns (defaults to ['col1', 'col2', ...]), _not_\n        including error columns.\n    delimiter : str\n        Delimiter for the values in the table.\n\n    Returns\n    -------\n    list of `~astropy.table.Table`\n        List containing all the tables present inside the QDP file\n    \"\"\"\n    lines = _get_lines_from_file(qdp_file)\n    contents, ncol = _get_type_from_list_of_lines(lines, delimiter=delimiter)\n\n    table_list = []\n    err_specs = {}\n    colnames = None\n\n    comment_text = \"\"\n    initial_comments = \"\"\n    command_lines = \"\"\n    current_rows = None",
                "filename": "astropy/io/ascii/qdp.py",
                "start_index": 6738,
                "end_index": 7510,
                "start_line": 238,
                "end_line": 331,
                "max_line": 642,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\"\"\"\nAn extensible ASCII table reader and writer.\n\nClasses to read DAOphot table format\n\n:Copyright: Smithsonian Astrophysical Observatory (2011)\n:Author: Tom Aldcroft (aldcroft@head.cfa.harvard.edu)\n\"\"\"\n\n\nimport itertools as itt\nimport re\nfrom collections import OrderedDict, defaultdict\n\nimport numpy as np\n\nfrom . import core, fixedwidth\nfrom .misc import first_false_index, first_true_index, groupmore",
                "filename": "astropy/io/ascii/daophot.py",
                "start_index": 0,
                "end_index": 468,
                "start_line": 1,
                "end_line": 19,
                "max_line": 397,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "kwargs[\"format\"] = \"ascii.ecsv\"\n    with u.add_enabled_units(cu):\n        table = QTable.read(filename, **kwargs)\n\n    # build cosmology from table\n    return from_table(\n        table,\n        index=index,\n        move_to_meta=move_to_meta,\n        cosmology=cosmology,\n        rename=rename,\n    )",
                "filename": "astropy/cosmology/_io/ecsv.py",
                "start_index": 12005,
                "end_index": 12304,
                "start_line": 324,
                "end_line": 470,
                "max_line": 491,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "# TODO: Table column formats need to be verified upon first reading the file;\n# as it is, an invalid P format will raise a VerifyError from some deep,\n# unexpected place\nclass _FormatP(str):\n    \"\"\"For P format in variable length table.\"\"\"\n\n    # As far as I can tell from my reading of the FITS standard, a type code is\n    # *required* for P and Q formats; there is no default\n    _format_re_template = (\n        r\"(?P<repeat>\\d+)?{}(?P<dtype>[LXBIJKAEDCM])(?:\\((?P<max>\\d*)\\))?\"\n    )\n    _format_code = \"P\"\n    _format_re = re.compile(_format_re_template.format(_format_code))\n    _descriptor_format = \"2i4\"\n\n    def __new__(cls, dtype, repeat=None, max=None):\n        obj = super().__new__(cls, cls._descriptor_format)\n        obj.format = NUMPY2FITS[dtype]\n        obj.dtype = dtype\n        obj.repeat = repeat\n        obj.max = max\n        return obj\n\n    def __getnewargs__(self):\n        return (self.dtype, self.repeat, self.max)\n\n    @classmethod\n    def from_tform(cls, format):\n        m = cls._format_re.match(format)\n        if not m or m.group(\"dtype\") not in FITS2NUMPY:\n            raise VerifyError(f\"Invalid column format: {format}\")\n        repeat = m.group(\"repeat\")\n        array_dtype = m.group(\"dtype\")\n        max = m.group(\"max\")\n        if not max:\n            max = None\n        return cls(FITS2NUMPY[array_dtype], repeat=repeat, max=max)\n\n    @property\n    def tform(self):\n        repeat = \"\" if self.repeat is None else self.repeat\n        max = \"\" if self.max is None else self.max\n        return f\"{repeat}{self._format_code}{self.format}({max})\"\n\n\nclass _FormatQ(_FormatP):\n    \"\"\"Carries type description of the Q format for variable length arrays.\n\n    The Q format is like the P format but uses 64-bit integers in the array\n    descriptors, allowing for heaps stored beyond 2GB into a file.\n    \"\"\"\n\n    _format_code = \"Q\"\n    _format_re = re.compile(_FormatP._format_re_template.format(_format_code))\n    _descriptor_format = \"2i8\"",
                "filename": "astropy/io/fits/column.py",
                "start_index": 13588,
                "end_index": 15558,
                "start_line": 426,
                "end_line": 480,
                "max_line": 2763,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "astropy/io/ascii/qdp.py": [
                {
                    "chunk": {
                        "code": "# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\"\"\"\nThis package contains functions for reading and writing QDP tables that are\nnot meant to be used directly, but instead are available as readers/writers in\n`astropy.table`. See :ref:`astropy:table_io` for more details.\n\"\"\"\nimport copy\nimport re\nimport warnings\nfrom collections.abc import Iterable\n\nimport numpy as np\n\nfrom astropy.table import Table\nfrom astropy.utils.exceptions import AstropyUserWarning\n\nfrom . import basic, core\n\n\ndef _line_type(line, delimiter=None):\n    \"\"\"Interpret a QDP file line.\n\n    Parameters\n    ----------\n    line : str\n        a single line of the file\n\n    Returns\n    -------\n    type : str\n        Line type: \"comment\", \"command\", or \"data\"\n\n    Examples\n    --------\n    >>> _line_type(\"READ SERR 3\")\n    'command'\n    >>> _line_type(\" \\\\n    !some gibberish\")\n    'comment'\n    >>> _line_type(\"   \")\n    'comment'\n    >>> _line_type(\" 21345.45\")\n    'data,1'\n    >>> _line_type(\" 21345.45 1.53e-3 1e-3 .04 NO nan\")\n    'data,6'\n    >>> _line_type(\" 21345.45,1.53e-3,1e-3,.04,NO,nan\", delimiter=',')\n    'data,6'\n    >>> _line_type(\" 21345.45 ! a comment to disturb\")\n    'data,1'\n    >>> _line_type(\"NO NO NO NO NO\")\n    'new'\n    >>> _line_type(\"NO,NO,NO,NO,NO\", delimiter=',')\n    'new'\n    >>> _line_type(\"N O N NOON OON O\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Unrecognized QDP line...\n    >>> _line_type(\" some non-comment gibberish\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Unrecognized QDP line...\n    \"\"\"\n    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n\n    sep = delimiter\n    if delimiter is None:\n        sep = r\"\\s+\"\n    _new_re = rf\"NO({sep}NO)+\"\n    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n    line = line.strip()\n    if not line:\n        return \"comment\"\n    match = _line_type_re.match(line)\n\n    if match is None:\n        raise ValueError(f\"Unrecognized QDP line: {line}\")\n    for type_, val in match.groupdict().items():\n        if val is None:\n            continue\n        if type_ == \"data\":\n            return f\"data,{len(val.split(sep=delimiter))}\"\n        else:\n            return type_",
                        "filename": "astropy/io/ascii/qdp.py",
                        "start_index": 0,
                        "end_index": 2446,
                        "start_line": 1,
                        "end_line": 85,
                        "max_line": 642,
                        "git_instance": "github",
                        "repo_name": "testbed/astropy__astropy__5.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the _line_type function which is responsible for interpreting QDP file lines and categorizing them as 'comment', 'command', or 'data'. The issue is related to the handling of commands in different cases, which is likely to be addressed in this function."
                },
                {
                    "chunk": {
                        "code": "\"\"\"Quick and Dandy Plot table.\n\n    Example::\n\n        ! Initial comment line 1\n        ! Initial comment line 2\n        READ TERR 1\n        READ SERR 3\n        ! Table 0 comment\n        !a a(pos) a(neg) b be c d\n        53000.5   0.25  -0.5   1  1.5  3.5 2\n        54000.5   1.25  -1.5   2  2.5  4.5 3\n        NO NO NO NO NO\n        ! Table 1 comment\n        !a a(pos) a(neg) b be c d\n        54000.5   2.25  -2.5   NO  3.5  5.5 5\n        55000.5   3.25  -3.5   4  4.5  6.5 nan\n\n    The input table above contains some initial comments, the error commands,\n    then two tables.\n    This file format can contain multiple tables, separated by a line full\n    of ``NO``s. Comments are exclamation marks, and missing values are single\n    ``NO`` entries. The delimiter is usually whitespace, more rarely a comma.\n    The QDP format differentiates between data and error columns. The table\n    above has commands::\n\n        READ TERR 1\n        READ SERR 3\n\n    which mean that after data column 1 there will be two error columns\n    containing its positive and engative error bars, then data column 2 without\n    error bars, then column 3, then a column with the symmetric error of column\n    3, then the remaining data columns.\n\n    As explained below, table headers are highly inconsistent. Possible\n    comments containing column names will be ignored and columns will be called\n    ``col1``, ``col2``, etc. unless the user specifies their names with the\n    ``names=`` keyword argument,\n    When passing column names, pass **only the names of the data columns, not\n    the error columns.**\n    Error information will be encoded in the names of the table columns.\n    (e.g. ``a_perr`` and ``a_nerr`` for the positive and negative error of\n    column ``a``, ``b_err`` the symmetric error of column ``b``.)\n\n    When writing tables to this format, users can pass an ``err_specs`` keyword\n    passing a dictionary ``{'serr': [3], 'terr': [1, 2]}``, meaning that data\n    columns 1 and two will have two additional columns each with their positive\n    and negative errors, and data column 3 will have an additional column with\n    a symmetric error (just like the ``READ SERR`` and ``READ TERR`` commands\n    above)\n\n    Headers are just comments, and tables distributed by various missions\n    can differ greatly in their use of conventions. For example, light curves\n    distributed by the Swift-Gehrels mission have an extra space in one header\n    entry that makes the number of labels inconsistent with the number of cols.\n    For this reason, we ignore the comments that might encode the column names\n    and leave the name specification to the user.\n\n    Example::\n\n        >               Extra space\n        >                   |\n        >                   v\n        >!     MJD       Err (pos)       Err(neg)        Rate            Error\n        >53000.123456   2.378e-05     -2.378472e-05     NO             0.212439\n\n    These readers and writer classes will strive to understand which of the\n    comments belong to all the tables, and which ones to each single table.\n    General comments will be stored in the ``initial_comments`` meta of each\n    table. The comments of each table will be stored in the ``comments`` meta.\n\n    Example::\n\n        t = Table.read(example_qdp, format='ascii.qdp', table_id=1, names=['a', 'b', 'c', 'd'])\n\n    reads the second table (``table_id=1``) in file ``example.qdp`` containing\n    the table above. There are four column names but seven data columns, why?\n    Because the ``READ SERR`` and ``READ TERR`` commands say that there are\n    three error columns.\n    ``t.meta['initial_comments']`` will contain the initial two comment lines\n    in the file, while ``t.meta['comments']`` will contain ``Table 1 comment``\n\n    The table can be written to another file, preserving the same information,\n    as::\n\n        t.write(test_file, err_specs={'terr': [1], 'serr': [3]})\n\n    Note how the ``terr`` and ``serr`` commands are passed to the writer.\n\n    \"\"\"",
                        "filename": "astropy/io/ascii/qdp.py",
                        "start_index": 15414,
                        "end_index": 19412,
                        "start_line": 524,
                        "end_line": 613,
                        "max_line": 642,
                        "git_instance": "github",
                        "repo_name": "testbed/astropy__astropy__5.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet provides an overview of the QDP table format and mentions the commands like 'READ SERR' and 'READ TERR'. It is relevant because the issue is about the case sensitivity of such commands."
                },
                {
                    "chunk": {
                        "code": "def _understand_err_col(colnames):\n    \"\"\"Get which column names are error columns.\n\n    Examples\n    --------\n    >>> colnames = ['a', 'a_err', 'b', 'b_perr', 'b_nerr']\n    >>> serr, terr = _understand_err_col(colnames)\n    >>> np.allclose(serr, [1])\n    True\n    >>> np.allclose(terr, [2])\n    True\n    >>> serr, terr = _understand_err_col(['a', 'a_nerr'])\n    Traceback (most recent call last):\n    ...\n    ValueError: Missing positive error...\n    >>> serr, terr = _understand_err_col(['a', 'a_perr'])\n    Traceback (most recent call last):\n    ...\n    ValueError: Missing negative error...\n    \"\"\"\n    shift = 0\n    serr = []\n    terr = []\n\n    for i, col in enumerate(colnames):\n        if col.endswith(\"_err\"):\n            # The previous column, but they're numbered from 1!\n            # Plus, take shift into account\n            serr.append(i - shift)\n            shift += 1\n        elif col.endswith(\"_perr\"):\n            terr.append(i - shift)\n            if len(colnames) == i + 1 or not colnames[i + 1].endswith(\"_nerr\"):\n                raise ValueError(\"Missing negative error\")\n            shift += 2\n        elif col.endswith(\"_nerr\") and not colnames[i - 1].endswith(\"_perr\"):\n            raise ValueError(\"Missing positive error\")\n    return serr, terr\n\n\ndef _read_table_qdp(qdp_file, names=None, table_id=None, delimiter=None):\n    \"\"\"Read a table from a QDP file.\n\n    Parameters\n    ----------\n    qdp_file : str\n        Input QDP file name\n\n    Other Parameters\n    ----------------\n    names : list of str\n        Name of data columns (defaults to ['col1', 'col2', ...]), _not_\n        including error columns.\n\n    table_id : int, default 0\n        Number of the table to be read from the QDP file. This is useful\n        when multiple tables present in the file. By default, the first is read.\n\n    delimiter : str\n        Any delimiter accepted by the `sep` argument of str.split()\n\n    Returns\n    -------\n    tables : list of `~astropy.table.Table`\n        List containing all the tables present inside the QDP file\n    \"\"\"\n    if table_id is None:\n        warnings.warn(\n            \"table_id not specified. Reading the first available table\",\n            AstropyUserWarning,\n        )\n        table_id = 0\n\n    tables = _get_tables_from_qdp_file(\n        qdp_file, input_colnames=names, delimiter=delimiter\n    )\n\n    return tables[table_id]",
                        "filename": "astropy/io/ascii/qdp.py",
                        "start_index": 10373,
                        "end_index": 12745,
                        "start_line": 345,
                        "end_line": 422,
                        "max_line": 642,
                        "git_instance": "github",
                        "repo_name": "testbed/astropy__astropy__5.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the _understand_err_col function which processes column names to identify error columns. It may be relevant if the fix involves changes to how error specifications are interpreted from the QDP file."
                }
            ]
        },
        "solution_task": "- Modify the `_line_type` function in `astropy/io/ascii/qdp.py` to ensure that QDP commands are matched in a case-insensitive manner.\n- Update the regular expression `_command_re` to use the `re.IGNORECASE` flag or use the inline `(?i)` flag within the regex pattern itself.\n- Ensure that the compiled regular expression `_line_type_re` is also using the `re.IGNORECASE` flag.\n\n```python\n# In astropy/io/ascii/qdp.py, modify the _line_type function\n\ndef _line_type(line, delimiter=None):\n    # ... [rest of the code remains unchanged] ...\n\n    # Update the command regex pattern to be case-insensitive\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n\n    # ... [rest of the code remains unchanged] ...\n\n    # Ensure the compiled regex is case-insensitive\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n\n    # ... [rest of the code remains unchanged] ...\n```\n\n- No changes are required in the other parts of the codebase as they are not relevant to the issue at hand.",
        "bouncer_response": {
            "score": 9,
            "criteria": "RESPONSES that are highly relevant, offering clear and comprehensive guidance or solutions for the described bug, should score between 7 and 9.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable solution to the described bug by suggesting modifications to the `_line_type` function in `astropy/io/ascii/qdp.py`. It correctly identifies that the regular expression used to match QDP commands should be modified to be case-insensitive, which directly addresses the issue of the software not accepting lowercase commands. The RESPONSE also provides a code snippet showing how to implement the `re.IGNORECASE` flag in the regular expression, which is a precise and actionable guidance. Additionally, the RESPONSE points out the specific parts of the codebase to check, which is useful for developers looking to implement the fix. The only reason it does not score a 10 is that it does not explicitly mention testing the changes to ensure they resolve the issue without introducing new ones.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711736361.473235,
        "result": "- Modify the `_line_type` function in `astropy/io/ascii/qdp.py` to ensure that QDP commands are matched in a case-insensitive manner.\n- Update the regular expression `_command_re` to use the `re.IGNORECASE` flag or use the inline `(?i)` flag within the regex pattern itself.\n- Ensure that the compiled regular expression `_line_type_re` is also using the `re.IGNORECASE` flag.\n\n```python\n# In astropy/io/ascii/qdp.py, modify the _line_type function\n\ndef _line_type(line, delimiter=None):\n    # ... [rest of the code remains unchanged] ...\n\n    # Update the command regex pattern to be case-insensitive\n    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n\n    # ... [rest of the code remains unchanged] ...\n\n    # Ensure the compiled regex is case-insensitive\n    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n\n    # ... [rest of the code remains unchanged] ...\n```\n\n- No changes are required in the other parts of the codebase as they are not relevant to the issue at hand.\n\n### Code snippets to check\n\n-  \u2192 [astropy](https://github.com/testbed/astropy__astropy__5.1/tree//astropy) \u2192 [io](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/io) \u2192 [ascii](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/io/ascii)- [Lines 1 - 85](https://github.com/testbed/astropy__astropy__5.1/blob//astropy/io/ascii/qdp.py#L1-L85)\n\n This snippet contains the _line_type function which is responsible for interpreting QDP file lines and categorizing them as 'comment', 'command', or 'data'. The issue is related to the handling of commands in different cases, which is likely to be addressed in this function. \n\n\n   - [Lines 524 - 613](https://github.com/testbed/astropy__astropy__5.1/blob//astropy/io/ascii/qdp.py#L524-L613)\n\n This snippet provides an overview of the QDP table format and mentions the commands like 'READ SERR' and 'READ TERR'. It is relevant because the issue is about the case sensitivity of such commands. \n\n\n   - [Lines 345 - 422](https://github.com/testbed/astropy__astropy__5.1/blob//astropy/io/ascii/qdp.py#L345-L422)\n\n This snippet contains the _understand_err_col function which processes column names to identify error columns. It may be relevant if the fix involves changes to how error specifications are interpreted from the QDP file."
    }
}