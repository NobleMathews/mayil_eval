{
    "id": "mwaskom__seaborn-3407",
    "repo_name": "testbed/mwaskom__seaborn__0.13",
    "task_id": 8827356653396244500,
    "title": "pairplot raises KeyError with MultiIndex DataFrame",
    "body": "When trying to pairplot a MultiIndex DataFrame, `pairplot` raises a `KeyError`:\r\n\r\nMRE:\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nimport seaborn as sns\r\n\r\n\r\ndata = {\r\n    (\"A\", \"1\"): np.random.rand(100),\r\n    (\"A\", \"2\"): np.random.rand(100),\r\n    (\"B\", \"1\"): np.random.rand(100),\r\n    (\"B\", \"2\"): np.random.rand(100),\r\n}\r\ndf = pd.DataFrame(data)\r\nsns.pairplot(df)\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/seaborn/axisgrid.py) in pairplot(data, hue, hue_order, palette, vars, x_vars, y_vars, kind, diag_kind, markers, height, aspect, corner, dropna, plot_kws, diag_kws, grid_kws, size)\r\n   2142     diag_kws.setdefault(\"legend\", False)\r\n   2143     if diag_kind == \"hist\":\r\n-> 2144         grid.map_diag(histplot, **diag_kws)\r\n   2145     elif diag_kind == \"kde\":\r\n   2146         diag_kws.setdefault(\"fill\", True)\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/seaborn/axisgrid.py) in map_diag(self, func, **kwargs)\r\n   1488                 plt.sca(ax)\r\n   1489 \r\n-> 1490             vector = self.data[var]\r\n   1491             if self._hue_var is not None:\r\n   1492                 hue = self.data[self._hue_var]\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/frame.py) in __getitem__(self, key)\r\n   3765             if is_iterator(key):\r\n   3766                 key = list(key)\r\n-> 3767             indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\r\n   3768 \r\n   3769         # take() does not accept boolean indexers\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/indexes/multi.py) in _get_indexer_strict(self, key, axis_name)\r\n   2534             indexer = self._get_indexer_level_0(keyarr)\r\n   2535 \r\n-> 2536             self._raise_if_missing(key, indexer, axis_name)\r\n   2537             return self[indexer], indexer\r\n   2538 \r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/indexes/multi.py) in _raise_if_missing(self, key, indexer, axis_name)\r\n   2552                 cmask = check == -1\r\n   2553                 if cmask.any():\r\n-> 2554                     raise KeyError(f\"{keyarr[cmask]} not in index\")\r\n   2555                 # We get here when levels still contain values which are not\r\n   2556                 # actually in Index anymore\r\n\r\nKeyError: \"['1'] not in index\"\r\n```\r\n\r\nA workaround is to \"flatten\" the columns:\r\n\r\n```python\r\ndf.columns = [\"\".join(column) for column in df.columns]\r\n```\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/mwaskom__seaborn__0.13.git",
    "requested_commit": "",
    "mayil_response": "- Modify the `PairGrid` class to handle `MultiIndex` columns by flattening them before plotting.\n- In `seaborn/axisgrid.py`, within the `PairGrid` class, add a method to flatten `MultiIndex` columns:\n\n```python\ndef _flatten_multiindex(self, df):\n    if isinstance(df.columns, pd.MultiIndex):\n        df.columns = ['_'.join(map(str, col)).strip() for col in df.columns.values]\n    return df\n```\n\n- Call this method in the `PairGrid` class `__init__` method after checking if the data is a DataFrame:\n\n```python\nif not isinstance(data, pd.DataFrame):\n    raise TypeError(f\"'data' must be pandas DataFrame object, not: {type(data)}\")\ndata = self._flatten_multiindex(data)\n```\n\n- Ensure that the `_flatten_multiindex` method is called before any operations that assume the DataFrame columns are not a `MultiIndex`.\n\n### Code snippets to check\n\n-  \u2192 [seaborn](https://github.com/testbed/mwaskom__seaborn__0.13/tree//seaborn)- [Lines 2087 - 2154](https://github.com/testbed/mwaskom__seaborn__0.13/blob//seaborn/axisgrid.py#L2087-L2154)\n\n This snippet contains the 'pairplot' function definition and the call to 'grid.map_diag' where the KeyError is raised, indicating that the issue is likely within this function or its interaction with MultiIndex DataFrames. \n\n\n   - [Lines 2005 - 2326](https://github.com/testbed/mwaskom__seaborn__0.13/blob//seaborn/axisgrid.py#L2005-L2326)\n\n This snippet shows the signature of the 'pairplot' function, which is directly related to the issue as the error occurs when calling this function with a MultiIndex DataFrame. \n\n\n   - [Lines 1191 - 1266](https://github.com/testbed/mwaskom__seaborn__0.13/blob//seaborn/axisgrid.py#L1191-L1266)\n\n This snippet is part of the 'PairGrid' class which is used by 'pairplot'. It may contain relevant code for handling the data before plotting, which could be related to the issue with MultiIndex DataFrames.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.00031,
        "snippet_processor": 0.061450000000000005,
        "issue_star_creation": 0.034129999999999994,
        "issue_star_solver": 0.04283,
        "bouncer": 0.027120000000000002
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711735664.813993,
        "relevant_snippets": [
            {
                "code": "for subplots, df, scales in self._generate_pairings(data, pair_variables):",
                "filename": "seaborn/_core/plot.py",
                "start_index": 50773,
                "end_index": 50847,
                "start_line": 1414,
                "end_line": 1414,
                "max_line": 1777,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            },
            {
                "code": "\"\"\"\nDot plot with several variables\n===============================\n\n_thumb: .3, .3\n\"\"\"\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n\n# Load the dataset\ncrashes = sns.load_dataset(\"car_crashes\")\n\n# Make the PairGrid\ng = sns.PairGrid(crashes.sort_values(\"total\", ascending=False),\n                 x_vars=crashes.columns[:-3], y_vars=[\"abbrev\"],\n                 height=10, aspect=.25)\n\n# Draw a dot plot using the stripplot function\ng.map(sns.stripplot, size=10, orient=\"h\", jitter=False,\n      palette=\"flare_r\", linewidth=1, edgecolor=\"w\")\n\n# Use the same x axis limits on all columns and add better labels\ng.set(xlim=(0, 25), xlabel=\"Crashes\", ylabel=\"\")\n\n# Use semantically meaningful titles for the columns\ntitles = [\"Total crashes\", \"Speeding crashes\", \"Alcohol crashes\",\n          \"Not distracted crashes\", \"No previous crashes\"]\n\nfor ax, title in zip(g.axes.flat, titles):\n\n    # Set a different title for each axes\n    ax.set(title=title)\n\n    # Make the grid horizontal instead of vertical\n    ax.xaxis.grid(False)\n    ax.yaxis.grid(True)\n\nsns.despine(left=True, bottom=True)",
                "filename": "examples/pairgrid_dotplot.py",
                "start_index": 0,
                "end_index": 1095,
                "start_line": 1,
                "end_line": 38,
                "max_line": 38,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            },
            {
                "code": "# Avoid circular import\n    from .distributions import histplot, kdeplot\n\n    # Handle deprecations\n    if size is not None:\n        height = size\n        msg = (\"The `size` parameter has been renamed to `height`; \"\n               \"please update your code.\")\n        warnings.warn(msg, UserWarning)\n\n    if not isinstance(data, pd.DataFrame):\n        raise TypeError(\n            f\"'data' must be pandas DataFrame object, not: {type(data)}\")\n\n    plot_kws = {} if plot_kws is None else plot_kws.copy()\n    diag_kws = {} if diag_kws is None else diag_kws.copy()\n    grid_kws = {} if grid_kws is None else grid_kws.copy()\n\n    # Resolve \"auto\" diag kind\n    if diag_kind == \"auto\":\n        if hue is None:\n            diag_kind = \"kde\" if kind == \"kde\" else \"hist\"\n        else:\n            diag_kind = \"hist\" if kind == \"hist\" else \"kde\"\n\n    # Set up the PairGrid\n    grid_kws.setdefault(\"diag_sharey\", diag_kind == \"hist\")\n    grid = PairGrid(data, vars=vars, x_vars=x_vars, y_vars=y_vars, hue=hue,\n                    hue_order=hue_order, palette=palette, corner=corner,\n                    height=height, aspect=aspect, dropna=dropna, **grid_kws)\n\n    # Add the markers here as PairGrid has figured out how many levels of the\n    # hue variable are needed and we don't want to duplicate that process\n    if markers is not None:\n        if kind == \"reg\":\n            # Needed until regplot supports style\n            if grid.hue_names is None:\n                n_markers = 1\n            else:\n                n_markers = len(grid.hue_names)\n            if not isinstance(markers, list):\n                markers = [markers] * n_markers\n            if len(markers) != n_markers:\n                raise ValueError(\"markers must be a singleton or a list of \"\n                                 \"markers for each level of the hue variable\")\n            grid.hue_kws = {\"marker\": markers}\n        elif kind == \"scatter\":\n            if isinstance(markers, str):\n                plot_kws[\"marker\"] = markers\n            elif hue is not None:\n                plot_kws[\"style\"] = data[hue]\n                plot_kws[\"markers\"] = markers\n\n    # Draw the marginal plots on the diagonal\n    diag_kws = diag_kws.copy()\n    diag_kws.setdefault(\"legend\", False)\n    if diag_kind == \"hist\":\n        grid.map_diag(histplot, **diag_kws)\n    elif diag_kind == \"kde\":\n        diag_kws.setdefault(\"fill\", True)\n        diag_kws.setdefault(\"warn_singular\", False)\n        grid.map_diag(kdeplot, **diag_kws)\n\n    # Maybe plot on the off-diagonals\n    if diag_kind is not None:\n        plotter = grid.map_offdiag\n    else:\n        plotter = grid.map",
                "filename": "seaborn/axisgrid.py",
                "start_index": 76865,
                "end_index": 79487,
                "start_line": 2087,
                "end_line": 2154,
                "max_line": 2399,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            },
            {
                "code": "def pairplot(\n    data, *,\n    hue=None, hue_order=None, palette=None,\n    vars=None, x_vars=None, y_vars=None,\n    kind=\"scatter\", diag_kind=\"auto\", markers=None,\n    height=2.5, aspect=1, corner=False, dropna=False,\n    plot_kws=None, diag_kws=None, grid_kws=None, size=None,\n):",
                "filename": "seaborn/axisgrid.py",
                "start_index": 73408,
                "end_index": 73688,
                "start_line": 2005,
                "end_line": 2326,
                "max_line": 2399,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            },
            {
                "code": "\"\"\"\nScatterplot Matrix\n==================\n\n_thumb: .3, .2\n\"\"\"\nimport seaborn as sns\nsns.set_theme(style=\"ticks\")\n\ndf = sns.load_dataset(\"penguins\")\nsns.pairplot(df, hue=\"species\")",
                "filename": "examples/scatterplot_matrix.py",
                "start_index": 0,
                "end_index": 179,
                "start_line": 1,
                "end_line": 11,
                "max_line": 11,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            },
            {
                "code": "\"\"\"\nPaired categorical plots\n========================\n\n\"\"\"\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n\n# Load the example Titanic dataset\ntitanic = sns.load_dataset(\"titanic\")\n\n# Set up a grid to plot survival probability against several variables\ng = sns.PairGrid(titanic, y_vars=\"survived\",\n                 x_vars=[\"class\", \"sex\", \"who\", \"alone\"],\n                 height=5, aspect=.5)\n\n# Draw a seaborn pointplot onto each Axes\ng.map(sns.pointplot, scale=1.3, errwidth=4, color=\"xkcd:plum\")\ng.set(ylim=(0, 1))\nsns.despine(fig=g.fig, left=True)",
                "filename": "examples/paired_pointplots.py",
                "start_index": 0,
                "end_index": 559,
                "start_line": 1,
                "end_line": 20,
                "max_line": 20,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            },
            {
                "code": "\"\"\"Initialize the plot figure and PairGrid object.\n\n        Parameters\n        ----------\n        data : DataFrame\n            Tidy (long-form) dataframe where each column is a variable and\n            each row is an observation.\n        hue : string (variable name)\n            Variable in ``data`` to map plot aspects to different colors. This\n            variable will be excluded from the default x and y variables.\n        vars : list of variable names\n            Variables within ``data`` to use, otherwise use every column with\n            a numeric datatype.\n        {x, y}_vars : lists of variable names\n            Variables within ``data`` to use separately for the rows and\n            columns of the figure; i.e. to make a non-square plot.\n        hue_order : list of strings\n            Order for the levels of the hue variable in the palette\n        palette : dict or seaborn color palette\n            Set of colors for mapping the ``hue`` variable. If a dict, keys\n            should be values  in the ``hue`` variable.\n        hue_kws : dictionary of param -> list of values mapping\n            Other keyword arguments to insert into the plotting call to let\n            other plot attributes vary across levels of the hue variable (e.g.\n            the markers in a scatterplot).\n        corner : bool\n            If True, don't add axes to the upper (off-diagonal) triangle of the\n            grid, making this a \"corner\" plot.\n        height : scalar\n            Height (in inches) of each facet.\n        aspect : scalar\n            Aspect * height gives the width (in inches) of each facet.\n        layout_pad : scalar\n            Padding between axes; passed to ``fig.tight_layout``.\n        despine : boolean\n            Remove the top and right spines from the plots.\n        dropna : boolean\n            Drop missing values from the data before plotting.\n\n        See Also\n        --------\n        pairplot : Easily drawing common uses of :class:`PairGrid`.\n        FacetGrid : Subplot grid for plotting conditional relationships.\n\n        Examples\n        --------\n\n        .. include:: ../docstrings/PairGrid.rst\n\n        \"\"\"\n\n        super().__init__()\n\n        # Sort out the variables that define the grid\n        numeric_cols = self._find_numeric_cols(data)\n        if hue in numeric_cols:\n            numeric_cols.remove(hue)\n        if vars is not None:\n            x_vars = list(vars)\n            y_vars = list(vars)\n        if x_vars is None:\n            x_vars = numeric_cols\n        if y_vars is None:\n            y_vars = numeric_cols\n\n        if np.isscalar(x_vars):\n            x_vars = [x_vars]\n        if np.isscalar(y_vars):\n            y_vars = [y_vars]\n\n        self.x_vars = x_vars = list(x_vars)\n        self.y_vars = y_vars = list(y_vars)\n        self.square_grid = self.x_vars == self.y_vars\n\n        if not x_vars:\n            raise ValueError(\"No variables found for grid columns.\")",
                "filename": "seaborn/axisgrid.py",
                "start_index": 44240,
                "end_index": 47174,
                "start_line": 1191,
                "end_line": 1266,
                "max_line": 2399,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            },
            {
                "code": "\"\"\"\nPaired density and scatterplot matrix\n=====================================\n\n_thumb: .5, .5\n\"\"\"\nimport seaborn as sns\nsns.set_theme(style=\"white\")\n\ndf = sns.load_dataset(\"penguins\")\n\ng = sns.PairGrid(df, diag_sharey=False)\ng.map_upper(sns.scatterplot, s=15)\ng.map_lower(sns.kdeplot)\ng.map_diag(sns.kdeplot, lw=2)",
                "filename": "examples/pair_grid_with_kde.py",
                "start_index": 0,
                "end_index": 316,
                "start_line": 1,
                "end_line": 15,
                "max_line": 15,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            },
            {
                "code": "def _unscale_coords(\n        self, subplots: list[dict], df: DataFrame, orient: str,\n    ) -> DataFrame:\n        # TODO do we still have numbers in the variable name at this point?\n        coord_cols = [c for c in df if re.match(r\"^[xy]\\D*$\", str(c))]\n        out_df = (\n            df\n            .drop(coord_cols, axis=1)\n            .reindex(df.columns, axis=1)  # So unscaled columns retain their place\n            .copy(deep=False)\n        )\n\n        for view in subplots:\n            view_df = self._filter_subplot_data(df, view)\n            axes_df = view_df[coord_cols]\n            for var, values in axes_df.items():\n\n                axis = getattr(view[\"ax\"], f\"{str(var)[0]}axis\")\n                # TODO see https://github.com/matplotlib/matplotlib/issues/22713\n                transform = axis.get_transform().inverted().transform\n                inverted = transform(values)\n                out_df.loc[values.index, str(var)] = inverted\n\n        return out_df\n\n    def _generate_pairings(\n        self, data: PlotData, pair_variables: dict,\n    ) -> Generator[\n        tuple[list[dict], DataFrame, dict[str, Scale]], None, None\n    ]:\n        # TODO retype return with subplot_spec or similar\n\n        iter_axes = itertools.product(*[\n            pair_variables.get(axis, [axis]) for axis in \"xy\"\n        ])\n\n        for x, y in iter_axes:\n\n            subplots = []\n            for view in self._subplots:\n                if (view[\"x\"] == x) and (view[\"y\"] == y):\n                    subplots.append(view)\n\n            if data.frame.empty and data.frames:\n                out_df = data.frames[(x, y)].copy()\n            elif not pair_variables:\n                out_df = data.frame.copy()\n            else:\n                if data.frame.empty and data.frames:\n                    out_df = data.frames[(x, y)].copy()\n                else:\n                    out_df = data.frame.copy()\n\n            scales = self._scales.copy()\n            if x in out_df:\n                scales[\"x\"] = self._scales[x]\n            if y in out_df:\n                scales[\"y\"] = self._scales[y]\n\n            for axis, var in zip(\"xy\", (x, y)):\n                if axis != var:\n                    out_df = out_df.rename(columns={var: axis})\n                    cols = [col for col in out_df if re.match(rf\"{axis}\\d+\", str(col))]\n                    out_df = out_df.drop(cols, axis=1)\n\n            yield subplots, out_df, scales\n\n    def _get_subplot_index(self, df: DataFrame, subplot: dict) -> Index:\n\n        dims = df.columns.intersection([\"col\", \"row\"])\n        if dims.empty:\n            return df.index\n\n        keep_rows = pd.Series(True, df.index, dtype=bool)\n        for dim in dims:\n            keep_rows &= df[dim] == subplot[dim]\n        return df.index[keep_rows]",
                "filename": "seaborn/_core/plot.py",
                "start_index": 54067,
                "end_index": 56835,
                "start_line": 1483,
                "end_line": 1559,
                "max_line": 1777,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            },
            {
                "code": "class PairGrid(Grid):",
                "filename": "seaborn/axisgrid.py",
                "start_index": 43362,
                "end_index": 43383,
                "start_line": 1172,
                "end_line": 1172,
                "max_line": 2399,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "seaborn/axisgrid.py": [
                {
                    "chunk": {
                        "code": "# Avoid circular import\n    from .distributions import histplot, kdeplot\n\n    # Handle deprecations\n    if size is not None:\n        height = size\n        msg = (\"The `size` parameter has been renamed to `height`; \"\n               \"please update your code.\")\n        warnings.warn(msg, UserWarning)\n\n    if not isinstance(data, pd.DataFrame):\n        raise TypeError(\n            f\"'data' must be pandas DataFrame object, not: {type(data)}\")\n\n    plot_kws = {} if plot_kws is None else plot_kws.copy()\n    diag_kws = {} if diag_kws is None else diag_kws.copy()\n    grid_kws = {} if grid_kws is None else grid_kws.copy()\n\n    # Resolve \"auto\" diag kind\n    if diag_kind == \"auto\":\n        if hue is None:\n            diag_kind = \"kde\" if kind == \"kde\" else \"hist\"\n        else:\n            diag_kind = \"hist\" if kind == \"hist\" else \"kde\"\n\n    # Set up the PairGrid\n    grid_kws.setdefault(\"diag_sharey\", diag_kind == \"hist\")\n    grid = PairGrid(data, vars=vars, x_vars=x_vars, y_vars=y_vars, hue=hue,\n                    hue_order=hue_order, palette=palette, corner=corner,\n                    height=height, aspect=aspect, dropna=dropna, **grid_kws)\n\n    # Add the markers here as PairGrid has figured out how many levels of the\n    # hue variable are needed and we don't want to duplicate that process\n    if markers is not None:\n        if kind == \"reg\":\n            # Needed until regplot supports style\n            if grid.hue_names is None:\n                n_markers = 1\n            else:\n                n_markers = len(grid.hue_names)\n            if not isinstance(markers, list):\n                markers = [markers] * n_markers\n            if len(markers) != n_markers:\n                raise ValueError(\"markers must be a singleton or a list of \"\n                                 \"markers for each level of the hue variable\")\n            grid.hue_kws = {\"marker\": markers}\n        elif kind == \"scatter\":\n            if isinstance(markers, str):\n                plot_kws[\"marker\"] = markers\n            elif hue is not None:\n                plot_kws[\"style\"] = data[hue]\n                plot_kws[\"markers\"] = markers\n\n    # Draw the marginal plots on the diagonal\n    diag_kws = diag_kws.copy()\n    diag_kws.setdefault(\"legend\", False)\n    if diag_kind == \"hist\":\n        grid.map_diag(histplot, **diag_kws)\n    elif diag_kind == \"kde\":\n        diag_kws.setdefault(\"fill\", True)\n        diag_kws.setdefault(\"warn_singular\", False)\n        grid.map_diag(kdeplot, **diag_kws)\n\n    # Maybe plot on the off-diagonals\n    if diag_kind is not None:\n        plotter = grid.map_offdiag\n    else:\n        plotter = grid.map",
                        "filename": "seaborn/axisgrid.py",
                        "start_index": 76865,
                        "end_index": 79487,
                        "start_line": 2087,
                        "end_line": 2154,
                        "max_line": 2399,
                        "git_instance": "github",
                        "repo_name": "testbed/mwaskom__seaborn__0.13",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the 'pairplot' function definition and the call to 'grid.map_diag' where the KeyError is raised, indicating that the issue is likely within this function or its interaction with MultiIndex DataFrames."
                },
                {
                    "chunk": {
                        "code": "def pairplot(\n    data, *,\n    hue=None, hue_order=None, palette=None,\n    vars=None, x_vars=None, y_vars=None,\n    kind=\"scatter\", diag_kind=\"auto\", markers=None,\n    height=2.5, aspect=1, corner=False, dropna=False,\n    plot_kws=None, diag_kws=None, grid_kws=None, size=None,\n):",
                        "filename": "seaborn/axisgrid.py",
                        "start_index": 73408,
                        "end_index": 73688,
                        "start_line": 2005,
                        "end_line": 2326,
                        "max_line": 2399,
                        "git_instance": "github",
                        "repo_name": "testbed/mwaskom__seaborn__0.13",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet shows the signature of the 'pairplot' function, which is directly related to the issue as the error occurs when calling this function with a MultiIndex DataFrame."
                },
                {
                    "chunk": {
                        "code": "\"\"\"Initialize the plot figure and PairGrid object.\n\n        Parameters\n        ----------\n        data : DataFrame\n            Tidy (long-form) dataframe where each column is a variable and\n            each row is an observation.\n        hue : string (variable name)\n            Variable in ``data`` to map plot aspects to different colors. This\n            variable will be excluded from the default x and y variables.\n        vars : list of variable names\n            Variables within ``data`` to use, otherwise use every column with\n            a numeric datatype.\n        {x, y}_vars : lists of variable names\n            Variables within ``data`` to use separately for the rows and\n            columns of the figure; i.e. to make a non-square plot.\n        hue_order : list of strings\n            Order for the levels of the hue variable in the palette\n        palette : dict or seaborn color palette\n            Set of colors for mapping the ``hue`` variable. If a dict, keys\n            should be values  in the ``hue`` variable.\n        hue_kws : dictionary of param -> list of values mapping\n            Other keyword arguments to insert into the plotting call to let\n            other plot attributes vary across levels of the hue variable (e.g.\n            the markers in a scatterplot).\n        corner : bool\n            If True, don't add axes to the upper (off-diagonal) triangle of the\n            grid, making this a \"corner\" plot.\n        height : scalar\n            Height (in inches) of each facet.\n        aspect : scalar\n            Aspect * height gives the width (in inches) of each facet.\n        layout_pad : scalar\n            Padding between axes; passed to ``fig.tight_layout``.\n        despine : boolean\n            Remove the top and right spines from the plots.\n        dropna : boolean\n            Drop missing values from the data before plotting.\n\n        See Also\n        --------\n        pairplot : Easily drawing common uses of :class:`PairGrid`.\n        FacetGrid : Subplot grid for plotting conditional relationships.\n\n        Examples\n        --------\n\n        .. include:: ../docstrings/PairGrid.rst\n\n        \"\"\"\n\n        super().__init__()\n\n        # Sort out the variables that define the grid\n        numeric_cols = self._find_numeric_cols(data)\n        if hue in numeric_cols:\n            numeric_cols.remove(hue)\n        if vars is not None:\n            x_vars = list(vars)\n            y_vars = list(vars)\n        if x_vars is None:\n            x_vars = numeric_cols\n        if y_vars is None:\n            y_vars = numeric_cols\n\n        if np.isscalar(x_vars):\n            x_vars = [x_vars]\n        if np.isscalar(y_vars):\n            y_vars = [y_vars]\n\n        self.x_vars = x_vars = list(x_vars)\n        self.y_vars = y_vars = list(y_vars)\n        self.square_grid = self.x_vars == self.y_vars\n\n        if not x_vars:\n            raise ValueError(\"No variables found for grid columns.\")",
                        "filename": "seaborn/axisgrid.py",
                        "start_index": 44240,
                        "end_index": 47174,
                        "start_line": 1191,
                        "end_line": 1266,
                        "max_line": 2399,
                        "git_instance": "github",
                        "repo_name": "testbed/mwaskom__seaborn__0.13",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is part of the 'PairGrid' class which is used by 'pairplot'. It may contain relevant code for handling the data before plotting, which could be related to the issue with MultiIndex DataFrames."
                }
            ]
        },
        "solution_task": "- Modify the `PairGrid` class to handle `MultiIndex` columns by flattening them before plotting.\n- In `seaborn/axisgrid.py`, within the `PairGrid` class, add a method to flatten `MultiIndex` columns:\n\n```python\ndef _flatten_multiindex(self, df):\n    if isinstance(df.columns, pd.MultiIndex):\n        df.columns = ['_'.join(map(str, col)).strip() for col in df.columns.values]\n    return df\n```\n\n- Call this method in the `PairGrid` class `__init__` method after checking if the data is a DataFrame:\n\n```python\nif not isinstance(data, pd.DataFrame):\n    raise TypeError(f\"'data' must be pandas DataFrame object, not: {type(data)}\")\ndata = self._flatten_multiindex(data)\n```\n\n- Ensure that the `_flatten_multiindex` method is called before any operations that assume the DataFrame columns are not a `MultiIndex`.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable solution to the problem of seaborn's `pairplot` function raising a `KeyError` when used with a MultiIndex DataFrame. It suggests modifying the `PairGrid` class to handle MultiIndex columns by flattening them before plotting, which is directly related to the issue described in the PROMPT. The RESPONSE includes a method to flatten the MultiIndex and indicates where to integrate this method within the seaborn codebase. It also references specific lines of code in the seaborn repository that are relevant to the issue, which shows a deep understanding of the problem and where the solution should be applied. The RESPONSE is comprehensive and addresses the main issue of the PROMPT effectively.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711735764.018296,
        "result": "- Modify the `PairGrid` class to handle `MultiIndex` columns by flattening them before plotting.\n- In `seaborn/axisgrid.py`, within the `PairGrid` class, add a method to flatten `MultiIndex` columns:\n\n```python\ndef _flatten_multiindex(self, df):\n    if isinstance(df.columns, pd.MultiIndex):\n        df.columns = ['_'.join(map(str, col)).strip() for col in df.columns.values]\n    return df\n```\n\n- Call this method in the `PairGrid` class `__init__` method after checking if the data is a DataFrame:\n\n```python\nif not isinstance(data, pd.DataFrame):\n    raise TypeError(f\"'data' must be pandas DataFrame object, not: {type(data)}\")\ndata = self._flatten_multiindex(data)\n```\n\n- Ensure that the `_flatten_multiindex` method is called before any operations that assume the DataFrame columns are not a `MultiIndex`.\n\n### Code snippets to check\n\n-  \u2192 [seaborn](https://github.com/testbed/mwaskom__seaborn__0.13/tree//seaborn)- [Lines 2087 - 2154](https://github.com/testbed/mwaskom__seaborn__0.13/blob//seaborn/axisgrid.py#L2087-L2154)\n\n This snippet contains the 'pairplot' function definition and the call to 'grid.map_diag' where the KeyError is raised, indicating that the issue is likely within this function or its interaction with MultiIndex DataFrames. \n\n\n   - [Lines 2005 - 2326](https://github.com/testbed/mwaskom__seaborn__0.13/blob//seaborn/axisgrid.py#L2005-L2326)\n\n This snippet shows the signature of the 'pairplot' function, which is directly related to the issue as the error occurs when calling this function with a MultiIndex DataFrame. \n\n\n   - [Lines 1191 - 1266](https://github.com/testbed/mwaskom__seaborn__0.13/blob//seaborn/axisgrid.py#L1191-L1266)\n\n This snippet is part of the 'PairGrid' class which is used by 'pairplot'. It may contain relevant code for handling the data before plotting, which could be related to the issue with MultiIndex DataFrames."
    }
}