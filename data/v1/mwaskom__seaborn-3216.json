{
    "id": "mwaskom__seaborn-3216",
    "repo_name": "testbed/mwaskom__seaborn__0.13",
    "task_id": 8220132712068926953,
    "title": "Figure title being removed by seaborn objects API when plotting on subfigures",
    "body": "I recently came across an odd behaviour with the seaborn objects API when using subfigures. Here is a minimal example : \r\n```\r\nimport seaborn as sns\r\nimport seaborn.objects as so\r\nimport matplotlib.pyplot as plt\r\n\r\nfig = plt.figure(constrained_layout=True)\r\nsubfigs = fig.subfigures(1,2)\r\ntips = sns.load_dataset(\"tips\")\r\np = (\r\n    so.Plot(tips, \"total_bill\")\r\n    .add(so.Bars(), so.Hist())\r\n)\r\np.on(subfigs[0]).plot()\r\n\r\nax = subfigs[1].subplots()\r\nax.scatter([1],[1])\r\n\r\nfig.suptitle(\"Test title\")\r\nplt.show()\r\n```\r\nwhich results in the title missing from the image :\r\n![title_issue_bad](https://user-images.githubusercontent.com/1338337/210242982-57262fb0-d1d4-4aab-b400-8f59cae522f3.png)\r\n\r\nCommenting the `p.on(subfigs[0]).plot()` results in the title reappearing.\r\nI have done a bit of digging and found that changing  line 186 from the _core/subplots.py file from `figure = target.figure` to `figure = target` seems to solve the issue. Is there a specific reason to why it fetches the parent figure currently, since Subfigure is supposed to be a drop-in replacement for Figure ? I also expect this will not have the intended behaviour if we deal with subfigures of subfigures.\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/mwaskom__seaborn__0.13.git",
    "requested_commit": "",
    "mayil_response": "Doesn't seem like we have fully grasped all the specifics of this ticket \ud83d\ude15.                   But we've outlined some ideas that might help you get started:\n\n- Revert the change in `_core/subplots.py` from `figure = target` back to `figure = target.figure`.\n- Ensure that `fig.suptitle(\"Test title\")` is called after all subplots and their respective plots have been created and before `plt.show()`.\n\n### Code snippets to check\n\n-  \u2192 [seaborn](https://github.com/testbed/mwaskom__seaborn__0.13/tree//seaborn) \u2192 [_core](https://github.com/testbed/mwaskom__seaborn__0.13/tree//seaborn/_core)- [Lines 16 - 16](https://github.com/testbed/mwaskom__seaborn__0.13/blob//seaborn/_core/subplots.py#L16-L16)\n\n The issue mentions a specific line in the _core/subplots.py file which is likely part of the Subplots class. This snippet contains the class definition and is likely where the change needs to be made.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.00031,
        "snippet_processor": 0.061450000000000005,
        "issue_star_creation": 0.034129999999999994,
        "issue_star_solver": 0.04283,
        "bouncer": 0.027120000000000002
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711735664.912104,
        "relevant_snippets": [
            {
                "code": "ax = sub[\"ax\"]\n            for axis in \"xy\":\n                axis_key = sub[axis]\n\n                # ~~ Axis labels\n\n                # TODO Should we make it possible to use only one x/y label for\n                # all rows/columns in a faceted plot? Maybe using sub{axis}label,\n                # although the alignments of the labels from that method leaves\n                # something to be desired (in terms of how it defines 'centered').\n                names = [\n                    common.names.get(axis_key),\n                    *(layer[\"data\"].names.get(axis_key) for layer in layers)\n                ]\n                auto_label = next((name for name in names if name is not None), None)\n                label = self._resolve_label(p, axis_key, auto_label)\n                ax.set(**{f\"{axis}label\": label})\n\n                # ~~ Decoration visibility\n\n                # TODO there should be some override (in Plot.layout?) so that\n                # axis / tick labels can be shown on interior shared axes if desired\n\n                axis_obj = getattr(ax, f\"{axis}axis\")\n                visible_side = {\"x\": \"bottom\", \"y\": \"left\"}.get(axis)\n                show_axis_label = (\n                    sub[visible_side]\n                    or not p._pair_spec.get(\"cross\", True)\n                    or (\n                        axis in p._pair_spec.get(\"structure\", {})\n                        and bool(p._pair_spec.get(\"wrap\"))\n                    )\n                )\n                axis_obj.get_label().set_visible(show_axis_label)\n\n                show_tick_labels = (\n                    show_axis_label\n                    or subplot_spec.get(f\"share{axis}\") not in (\n                        True, \"all\", {\"x\": \"col\", \"y\": \"row\"}[axis]\n                    )\n                )\n                for group in (\"major\", \"minor\"):\n                    for t in getattr(axis_obj, f\"get_{group}ticklabels\")():\n                        t.set_visible(show_tick_labels)\n\n            # TODO we want right-side titles for row facets in most cases?\n            # Let's have what we currently call \"margin titles\" but properly using the\n            # ax.set_title interface (see my gist)\n            title_parts = []\n            for dim in [\"col\", \"row\"]:\n                if sub[dim] is not None:\n                    val = self._resolve_label(p, \"title\", f\"{sub[dim]}\")\n                    if dim in p._labels:\n                        key = self._resolve_label(p, dim, common.names.get(dim))\n                        val = f\"{key} {val}\"\n                    title_parts.append(val)\n\n            has_col = sub[\"col\"] is not None\n            has_row = sub[\"row\"] is not None\n            show_title = (\n                has_col and has_row\n                or (has_col or has_row) and p._facet_spec.get(\"wrap\")\n                or (has_col and sub[\"top\"])\n                # TODO or has_row and sub[\"right\"] and <right titles>\n                or has_row  # TODO and not <right titles>\n            )",
                "filename": "seaborn/_core/plot.py",
                "start_index": 38270,
                "end_index": 41253,
                "start_line": 1114,
                "end_line": 1733,
                "max_line": 1777,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            },
            {
                "code": "subplot_spec = p._subplot_spec.copy()\n        facet_spec = p._facet_spec.copy()\n        pair_spec = p._pair_spec.copy()\n\n        for axis in \"xy\":\n            if axis in p._shares:\n                subplot_spec[f\"share{axis}\"] = p._shares[axis]\n\n        for dim in [\"col\", \"row\"]:\n            if dim in common.frame and dim not in facet_spec[\"structure\"]:\n                order = categorical_order(common.frame[dim])\n                facet_spec[\"structure\"][dim] = order\n\n        self._subplots = subplots = Subplots(subplot_spec, facet_spec, pair_spec)\n\n        # --- Figure initialization\n        self._figure = subplots.init_figure(\n            pair_spec, self._pyplot, p._figure_spec, p._target,\n        )\n\n        # --- Figure annotation",
                "filename": "seaborn/_core/plot.py",
                "start_index": 37488,
                "end_index": 38228,
                "start_line": 1092,
                "end_line": 1112,
                "max_line": 1777,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            },
            {
                "code": "def label(self, *, title=None, **variables: str | Callable[[str], str]) -> Plot:\n        \"\"\"\n        Control the labels and titles for axes, legends, and subplots.\n\n        Additional keywords correspond to variables defined in the plot.\n        Values can be one of the following types:\n\n        - string (used literally; pass \"\" to clear the default label)\n        - function (called on the default label)\n\n        For coordinate variables, the value sets the axis label.\n        For semantic variables, the value sets the legend title.\n        For faceting variables, `title=` modifies the subplot-specific label,\n        while `col=` and/or `row=` add a label for the faceting variable.\n        When using a single subplot, `title=` sets its title.\n\n        Examples\n        --------\n        .. include:: ../docstrings/objects.Plot.label.rst\n\n\n        \"\"\"\n        new = self._clone()\n        if title is not None:\n            new._labels[\"title\"] = title\n        new._labels.update(variables)\n        return new\n\n    def layout(\n        self,\n        *,\n        size: tuple[float, float] | Default = default,\n        engine: str | None | Default = default,\n    ) -> Plot:\n        \"\"\"\n        Control the figure size and layout.\n\n        .. note::\n\n            Default figure sizes and the API for specifying the figure size are subject\n            to change in future \"experimental\" releases of the objects API. The default\n            layout engine may also change.\n\n        Parameters\n        ----------\n        size : (width, height)\n            Size of the resulting figure, in inches. Size is inclusive of legend when\n            using pyplot, but not otherwise.\n        engine : {{\"tight\", \"constrained\", None}}\n            Name of method for automatically adjusting the layout to remove overlap.\n            The default depends on whether :meth:`Plot.on` is used.\n\n        Examples\n        --------\n        .. include:: ../docstrings/objects.Plot.layout.rst\n\n        \"\"\"\n        # TODO add an \"auto\" mode for figsize that roughly scales with the rcParams\n        # figsize (so that works), but expands to prevent subplots from being squished\n        # Also should we have height=, aspect=, exclusive with figsize? Or working\n        # with figsize when only one is defined?\n\n        new = self._clone()\n\n        if size is not default:\n            new._figure_spec[\"figsize\"] = size\n        if engine is not default:\n            new._layout_spec[\"engine\"] = engine\n\n        return new\n\n    # TODO def legend (ugh)",
                "filename": "seaborn/_core/plot.py",
                "start_index": 26159,
                "end_index": 28683,
                "start_line": 769,
                "end_line": 840,
                "max_line": 1777,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            },
            {
                "code": "for sub in subplots:",
                "filename": "seaborn/_core/plot.py",
                "start_index": 38237,
                "end_index": 38257,
                "start_line": 1113,
                "end_line": 1113,
                "max_line": 1777,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            },
            {
                "code": "def _finalize_figure(self, p: Plot) -> None:\n\n        for sub in self._subplots:\n            ax = sub[\"ax\"]\n            for axis in \"xy\":\n                axis_key = sub[axis]\n                axis_obj = getattr(ax, f\"{axis}axis\")\n\n                # Axis limits\n                if axis_key in p._limits:\n                    convert_units = getattr(ax, f\"{axis}axis\").convert_units\n                    a, b = p._limits[axis_key]\n                    lo = a if a is None else convert_units(a)\n                    hi = b if b is None else convert_units(b)\n                    if isinstance(a, str):\n                        lo = cast(float, lo) - 0.5\n                    if isinstance(b, str):\n                        hi = cast(float, hi) + 0.5\n                    ax.set(**{f\"{axis}lim\": (lo, hi)})\n\n                if axis_key in self._scales:  # TODO when would it not be?\n                    self._scales[axis_key]._finalize(p, axis_obj)\n\n        if (engine := p._layout_spec.get(\"engine\", default)) is not default:\n            # None is a valid arg for Figure.set_layout_engine, hence `default`\n            set_layout_engine(self._figure, engine)\n        elif p._target is None:\n            # Don't modify the layout engine if the user supplied their own\n            # matplotlib figure and didn't specify an engine through Plot\n            # TODO switch default to \"constrained\"?\n            # TODO either way, make configurable\n            set_layout_engine(self._figure, \"tight\")",
                "filename": "seaborn/_core/plot.py",
                "start_index": 64787,
                "end_index": 66267,
                "start_line": 1746,
                "end_line": 1777,
                "max_line": 1777,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            },
            {
                "code": "if title_parts:\n                title = \" | \".join(title_parts)\n                title_text = ax.set_title(title)\n                title_text.set_visible(show_title)\n            elif not (has_col or has_row):\n                title = self._resolve_label(p, \"title\", None)\n                title_text = ax.set_title(title)",
                "filename": "seaborn/_core/plot.py",
                "start_index": 41266,
                "end_index": 41583,
                "start_line": 1180,
                "end_line": 1186,
                "max_line": 1777,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            },
            {
                "code": "class Subplots:",
                "filename": "seaborn/_core/subplots.py",
                "start_index": 411,
                "end_index": 426,
                "start_line": 16,
                "end_line": 16,
                "max_line": 269,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            },
            {
                "code": "# --- Finalize the plot\n\n        ax = self.ax if self.ax is not None else self.facets.axes.flat[0]\n        self._add_axis_labels(ax)\n\n        if \"hue\" in self.variables and legend:\n\n            # TODO if possible, I would like to move the contour\n            # intensity information into the legend too and label the\n            # iso proportions rather than the raw density values\n\n            artist_kws = {}\n            artist = partial(mpl.patches.Patch)\n            ax_obj = self.ax if self.ax is not None else self.facets\n            self._add_legend(\n                ax_obj, artist, True, False, \"layer\", 1, artist_kws, {},\n            )",
                "filename": "seaborn/distributions.py",
                "start_index": 32283,
                "end_index": 32927,
                "start_line": 718,
                "end_line": 1317,
                "max_line": 2541,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            },
            {
                "code": "\"\"\"\nPlotting on a large number of facets\n====================================\n\n_thumb: .4, .3\n\n\"\"\"\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_theme(style=\"ticks\")\n\n# Create a dataset with many short random walks\nrs = np.random.RandomState(4)\npos = rs.randint(-1, 2, (20, 5)).cumsum(axis=1)\npos -= pos[:, 0, np.newaxis]\nstep = np.tile(range(5), 20)\nwalk = np.repeat(range(20), 5)\ndf = pd.DataFrame(np.c_[pos.flat, step, walk],\n                  columns=[\"position\", \"step\", \"walk\"])\n\n# Initialize a grid of plots with an Axes for each walk\ngrid = sns.FacetGrid(df, col=\"walk\", hue=\"walk\", palette=\"tab20c\",\n                     col_wrap=4, height=1.5)\n\n# Draw a horizontal line to show the starting point\ngrid.refline(y=0, linestyle=\":\")\n\n# Draw a line plot to show the trajectory of each random walk\ngrid.map(plt.plot, \"step\", \"position\", marker=\"o\")\n\n# Adjust the tick positions and labels\ngrid.set(xticks=np.arange(5), yticks=[-3, 3],\n         xlim=(-.5, 4.5), ylim=(-3.5, 3.5))\n\n# Adjust the arrangement of the plots\ngrid.fig.tight_layout(w_pad=1)",
                "filename": "examples/many_facets.py",
                "start_index": 0,
                "end_index": 1109,
                "start_line": 1,
                "end_line": 39,
                "max_line": 39,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            },
            {
                "code": "def adjust_legend_subtitles(legend):\n    \"\"\"\n    Make invisible-handle \"subtitles\" entries look more like titles.\n\n    Note: This function is not part of the public API and may be changed or removed.\n\n    \"\"\"\n    # Legend title not in rcParams until 3.0\n    font_size = plt.rcParams.get(\"legend.title_fontsize\", None)\n    hpackers = legend.findobj(mpl.offsetbox.VPacker)[0].get_children()\n    for hpack in hpackers:\n        draw_area, text_area = hpack.get_children()\n        handles = draw_area.get_children()\n        if not all(artist.get_visible() for artist in handles):\n            draw_area.set_width(0)\n            for text in text_area.get_children():\n                if font_size is not None:\n                    text.set_size(font_size)\n\n\ndef _deprecate_ci(errorbar, ci):\n    \"\"\"\n    Warn on usage of ci= and convert to appropriate errorbar= arg.\n\n    ci was deprecated when errorbar was added in 0.12. It should not be removed\n    completely for some time, but it can be moved out of function definitions\n    (and extracted from kwargs) after one cycle.\n\n    \"\"\"\n    if ci is not deprecated and ci != \"deprecated\":\n        if ci is None:\n            errorbar = None\n        elif ci == \"sd\":\n            errorbar = \"sd\"\n        else:\n            errorbar = (\"ci\", ci)\n        msg = (\n            \"\\n\\nThe `ci` parameter is deprecated. \"\n            f\"Use `errorbar={repr(errorbar)}` for the same effect.\\n\"\n        )\n        warnings.warn(msg, FutureWarning, stacklevel=3)\n\n    return errorbar\n\n\ndef _get_transform_functions(ax, axis):\n    \"\"\"Return the forward and inverse transforms for a given axis.\"\"\"\n    axis_obj = getattr(ax, f\"{axis}axis\")\n    transform = axis_obj.get_transform()\n    return transform.transform, transform.inverted().transform\n\n\n@contextmanager\ndef _disable_autolayout():\n    \"\"\"Context manager for preventing rc-controlled auto-layout behavior.\"\"\"\n    # This is a workaround for an issue in matplotlib, for details see\n    # https://github.com/mwaskom/seaborn/issues/2914\n    # The only affect of this rcParam is to set the default value for\n    # layout= in plt.figure, so we could just do that instead.\n    # But then we would need to own the complexity of the transition\n    # from tight_layout=True -> layout=\"tight\". This seems easier,\n    # but can be removed when (if) that is simpler on the matplotlib side,\n    # or if the layout algorithms are improved to handle figure legends.\n    orig_val = mpl.rcParams[\"figure.autolayout\"]\n    try:\n        mpl.rcParams[\"figure.autolayout\"] = False\n        yield\n    finally:\n        mpl.rcParams[\"figure.autolayout\"] = orig_val\n\n\ndef _version_predates(lib: ModuleType, version: str) -> bool:\n    \"\"\"Helper function for checking version compatibility.\"\"\"\n    return Version(lib.__version__) < Version(version)",
                "filename": "seaborn/utils.py",
                "start_index": 26354,
                "end_index": 29147,
                "start_line": 823,
                "end_line": 896,
                "max_line": 896,
                "git_instance": "github",
                "repo_name": "testbed/mwaskom__seaborn__0.13",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "seaborn/_core/subplots.py": [
                {
                    "chunk": {
                        "code": "class Subplots:",
                        "filename": "seaborn/_core/subplots.py",
                        "start_index": 411,
                        "end_index": 426,
                        "start_line": 16,
                        "end_line": 16,
                        "max_line": 269,
                        "git_instance": "github",
                        "repo_name": "testbed/mwaskom__seaborn__0.13",
                        "sha": ""
                    },
                    "reason_for_relevance": "The issue mentions a specific line in the _core/subplots.py file which is likely part of the Subplots class. This snippet contains the class definition and is likely where the change needs to be made."
                }
            ]
        },
        "solution_task": "- Revert the change in `_core/subplots.py` from `figure = target` back to `figure = target.figure`.\n- Ensure that `fig.suptitle(\"Test title\")` is called after all subplots and their respective plots have been created and before `plt.show()`.",
        "bouncer_response": {
            "score": 2,
            "criteria": "The RESPONSE offers tangentially relevant advice but lacks actionable content. It suggests reverting a change that the user has identified as a solution, which is counterproductive. The advice to ensure that 'fig.suptitle(\"Test title\")' is called after all subplots are created is correct but does not address the core issue described in the PROMPT. The provided code snippet link is not actionable as it is a placeholder and does not lead to the actual codebase.",
            "supporting_evidence": "The RESPONSE suggests reverting a change that the user has already identified as a solution, which is not helpful and does not address the issue. The advice to call 'fig.suptitle(\"Test title\")' after creating all subplots is standard practice but does not solve the problem of the title being removed when using seaborn's objects API. The RESPONSE fails to address the user's question about the specific reason for fetching the parent figure and the implications for subfigures of subfigures. The code snippet links are placeholders and do not provide any actionable insight or direct guidance.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711735744.977013,
        "result": "Doesn't seem like we have fully grasped all the specifics of this ticket \ud83d\ude15.                   But we've outlined some ideas that might help you get started:\n\n- Revert the change in `_core/subplots.py` from `figure = target` back to `figure = target.figure`.\n- Ensure that `fig.suptitle(\"Test title\")` is called after all subplots and their respective plots have been created and before `plt.show()`.\n\n### Code snippets to check\n\n-  \u2192 [seaborn](https://github.com/testbed/mwaskom__seaborn__0.13/tree//seaborn) \u2192 [_core](https://github.com/testbed/mwaskom__seaborn__0.13/tree//seaborn/_core)- [Lines 16 - 16](https://github.com/testbed/mwaskom__seaborn__0.13/blob//seaborn/_core/subplots.py#L16-L16)\n\n The issue mentions a specific line in the _core/subplots.py file which is likely part of the Subplots class. This snippet contains the class definition and is likely where the change needs to be made."
    }
}