{
    "id": "id",
    "repo_name": "testbed/aftersell",
    "task_id": 1656833586660761139,
    "title": "",
    "body": "Fulfillment hold not releasing on time\n\nIs this related to a specific store?\n\nmyvillagegreen.myshopify.com\nhfulfillment holdttps://app.intercom.com/a/inbox/l7yr8zsg/inbox/shared/all/conversation/147709000013207?view=List\n\nWhat technical input is needed?\n\nOrders are being placed on hold for an hr, when they have the release  setting enabled:\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/aftersell.git",
    "requested_commit": "",
    "mayil_response": "- Verify that the `SettingsService.getSettings` method correctly retrieves and applies the `releaseFulfillmentHoldsAsap` setting for the specific store `myvillagegreen.myshopify.com`. Ensure that the setting is being saved and retrieved correctly from the database.\n- Check if there is a caching issue that might be causing outdated settings to be used when the `releaseFulfillmentHoldsAsap` setting is checked.\n- Confirm that the `userModel.findOne` method correctly retrieves the `accessToken` for the store `myvillagegreen.myshopify.com`. An invalid or expired `accessToken` could prevent the backend from communicating with Shopify to release the holds.\n- Review the `getOrderIsOnPostPurchaseFulfillmentHold` function to ensure it correctly identifies orders that are on post-purchase fulfillment hold. There might be a logic error that incorrectly filters orders, causing the system not to release holds even when it should.\n- Inspect the `shopifyService.releaseFulfillmentOrderHold` method to verify that it properly calls the Shopify API to release the hold on fulfillment orders. Ensure that the method handles any potential errors or exceptions that could occur during the API call.\n- Check the error handling in the `catch` block to ensure that it correctly logs and retries the release of fulfillment holds. There might be silent failures that are not being retried or logged, leading to holds not being released.\n- Ensure that the retry logic with `previousAttemptsCount` is functioning as expected and that it does not exceed the maximum number of attempts.\n- If the issue persists after checking the above points, consider adding additional logging to trace the flow of data and identify where the process is breaking down.\n- Once the root cause is identified and fixed, perform thorough testing to ensure that the issue is resolved and that the release of fulfillment holds behaves as expected when the setting is enabled.\n\n### Code snippets to check\n\n-  \u2192 [web](https://github.com/testbed/aftersell/tree//web) \u2192 [backend](https://github.com/testbed/aftersell/tree//web/backend) \u2192 [src](https://github.com/testbed/aftersell/tree//web/backend/src) \u2192 [modules](https://github.com/testbed/aftersell/tree//web/backend/src/modules) \u2192 [fulfillment-hold-release](https://github.com/testbed/aftersell/tree//web/backend/src/modules/fulfillment-hold-release)- [Lines 133 - 181](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts#L133-L181)\n\n This snippet contains the logic for releasing fulfillment holds and checks the setting 'releaseFulfillmentHoldsAsap' which is directly related to the issue. \n\n\n   - [Lines 184 - 194](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts#L184-L194)\n\n This snippet contains the function that checks if an order is on post-purchase fulfillment hold, which is relevant to the issue of holds not releasing on time. \n\n\n   - [Lines 121 - 121](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts#L121-L121)\n\n This snippet indicates the presence of a loop that processes scheduled hold releases, which could be relevant to the timing issue. \n\n\n   - [Lines 119 - 119](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts#L119-L119)\n\n This snippet defines the function that releases scheduled fulfillment holds, which is relevant to the issue.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree//web) \u2192 [client](https://github.com/testbed/aftersell/tree//web/client) \u2192 [src](https://github.com/testbed/aftersell/tree//web/client/src) \u2192 [pages](https://github.com/testbed/aftersell/tree//web/client/src/pages) \u2192 [settings](https://github.com/testbed/aftersell/tree//web/client/src/pages/settings)- [Lines 68 - 93](https://github.com/testbed/aftersell/blob//web/client/src/pages/settings/settings-fulfillment-and-payment.page.tsx#L68-L93)\n\n This snippet is from the settings page where the 'releaseFulfillmentHoldsAsap' setting is toggled, which is relevant to understand how the setting is being set by the user.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree//web) \u2192 [backend](https://github.com/testbed/aftersell/tree//web/backend) \u2192 [src](https://github.com/testbed/aftersell/tree//web/backend/src) \u2192 [modules](https://github.com/testbed/aftersell/tree//web/backend/src/modules) \u2192 [fulfillment-hold-release](https://github.com/testbed/aftersell/tree//web/backend/src/modules/fulfillment-hold-release)- [Lines 1 - 7](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.controller.ts#L1-L7)\n\n This snippet shows the controller that triggers the release of all scheduled fulfillment holds, which could be part of the issue if it's not being called correctly.",
    "ai_cost": {
        "issue_summarizer": 0.0055,
        "search_embedding": 1.157e-05,
        "repo_summary": 0.0046725,
        "issue_classifier": 0.000198,
        "documentation_agent": 0.00608,
        "snippet_processor": 0.03343,
        "issue_star_solver": 0.09632,
        "bouncer": 0.02705
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1712381556.736354,
        "initial_code_snippets": [
            {
                "code": "try {\n            const settings = await SettingsService.getSettings({ shop: scheduledHoldRelease.shop });\n            if (!settings.releaseFulfillmentHoldsAsap) {\n                continue;\n            }\n            const { accessToken } = (await userModel.findOne({ myshopify_domain: scheduledHoldRelease.shop })) as any;\n            const shopifyService = new ShopifyService({ shop: scheduledHoldRelease.shop, accessToken });\n            const fulfillmentOrders = await shopifyService.getFulfillmentOrders({\n                orderId: scheduledHoldRelease.orderId!,\n            });\n            if (getOrderIsOnPostPurchaseFulfillmentHold({ fulfillmentOrders })) {\n                const fulfillmentOrdersOnHold = fulfillmentOrders.filter(\n                    (fo) => fo.status === FulfillmentOrderStatusRest.ON_HOLD\n                );\n                for (const fulfillmentOrder of fulfillmentOrdersOnHold) {\n                    await shopifyService.releaseFulfillmentOrderHold({ fulfillmentOrderId: fulfillmentOrder.id });\n                    console.log(\n                        `[${scheduledHoldRelease.shop}] Released fulfillment order hold. Order: ${scheduledHoldRelease.orderId}. Fulfillment order: ${fulfillmentOrder.id}.`\n                    );\n                }\n            } else {\n                console.log(\n                    `[${scheduledHoldRelease.shop}] Skipped releasing fulfillment hold because order is no longer on hold. Order: ${scheduledHoldRelease.orderId}.`\n                );\n            }\n        } catch (e) {\n            if (scheduledHoldRelease.previousAttemptsCount < 5) {\n                // If there is an error, we will insert the hold release back into the\n                // database for some loop instance (maybe this one, maybe a different one)\n                // to process it again.\n                const recreatedScheduledRelease: ScheduledHoldRelease = {\n                    shop: scheduledHoldRelease.shop,\n                    orderId: scheduledHoldRelease.orderId,\n                    releaseHoldAt: scheduledHoldRelease.releaseHoldAt,\n                    previousAttemptsCount: scheduledHoldRelease.previousAttemptsCount + 1,\n                };\n                await ScheduledHoldReleasesModel.create(recreatedScheduledRelease);\n                console.log(\n                    `[${scheduledHoldRelease.shop}] Retrying fulfillment hold release. Attempt: ${scheduledHoldRelease.previousAttemptsCount}. Order: ${scheduledHoldRelease.orderId}.`\n                );\n            } else {\n                // If we've tried 5 times before, and failed again on the 6th time, we will log the error and\n                // move on.\n                console.error(\n                    `[${scheduledHoldRelease.shop}] Failed to release fulfillment hold. Order: ${scheduledHoldRelease.orderId}. ${e}`\n                );\n            }\n        }\n    }",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 6435,
                "end_index": 9313,
                "start_line": 133,
                "end_line": 181,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "import { SettingsService } from '../settings/settings.service';\nimport { FulfillmentOrderRest, FulfillmentOrderStatusRest, ShopifyService } from '../shopify/shopify.service';\nimport userModel from '../users/users.model';\nimport { PossibleHold, PossibleHoldsModel } from './possible-holds.model';\nimport { ScheduledHoldRelease, ScheduledHoldReleasesModel } from './scheduled-hold-releases.model';\n\nexport async function upsertPossibleFulfillmentHold({\n    shop,\n    checkoutToken,\n    minimumHoldMinutes,\n}: Pick<PossibleHold, 'shop' | 'checkoutToken' | 'minimumHoldMinutes'>) {\n    await PossibleHoldsModel.updateOne(\n        { shop, checkoutToken },\n        { minimumHoldMinutes, lastUpdatedAt: new Date() },\n        { upsert: true }\n    );\n}\n\nexport async function scheduleFulfillmentHoldReleaseIfNecessary({\n    shopifyService,\n    order: { id: orderId, checkout_token: checkoutToken },\n}: {\n    shopifyService: ShopifyService;\n    order: { id: number; checkout_token: string };\n}) {\n    // We use findOneAndDelete here to prevent storing old possible holds. We delete the possible hold\n    // regardless of whether or not the order actually has a fulfillment hold.\n    //\n    // We don't need to check if the setting is enabled here since the possible hold should only be created\n    // if the setting is enabled.\n    const possibleHold = await PossibleHoldsModel.findOneAndDelete({ shop: shopifyService.shop, checkoutToken });\n    if (!possibleHold) {\n        return;\n    }\n\n    // This call will fail if the merchant has not granted the `write_merchant_managed_fulfillment_orders` scope.\n    // This should only happen if the merchant enabled the setting but didn't add the scope. We can just throw in\n    // this case see the error in Sentry and contact the merchant to add the scope or disable the setting.\n    const fulfillmentOrders = await shopifyService.getFulfillmentOrders({ orderId });\n    const isOnHold = getOrderIsOnPostPurchaseFulfillmentHold({ fulfillmentOrders });\n\n    if (isOnHold) {\n        const scheduledHoldRelease: ScheduledHoldRelease = {\n            shop: shopifyService.shop,\n            orderId,\n            releaseHoldAt: new Date(Date.now() + possibleHold.minimumHoldMinutes * 60 * 1000),\n            previousAttemptsCount: 0,\n        };\n        await ScheduledHoldReleasesModel.create(scheduledHoldRelease);\n        console.log(`[${shopifyService.shop}] Scheduled fulfillment hold release. Order ID: ${orderId}`);\n    }\n}",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 0,
                "end_index": 2456,
                "start_line": 1,
                "end_line": 194,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "function getOrderIsOnPostPurchaseFulfillmentHold({\n    fulfillmentOrders,\n}: {\n    fulfillmentOrders: FulfillmentOrderRest[];\n}): boolean {\n    return fulfillmentOrders.some(\n        (fo) =>\n            fo.status === FulfillmentOrderStatusRest.ON_HOLD &&\n            fo.fulfillment_holds.some((fh) => fh.reason === 'online_store_post_purchase_cross_sell')\n    );\n}",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 9317,
                "end_index": 9681,
                "start_line": 184,
                "end_line": 194,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "import { RequestHandler } from 'express';\nimport { releaseScheduledFulfillmentHolds } from './fulfillment-hold-release';\n\nexport const releaseAllScheduledFulfillmentHoldsJob: RequestHandler = async (req, res, next) => {\n    await releaseScheduledFulfillmentHolds();\n    res.status(200).send();\n};",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.controller.ts",
                "start_index": 0,
                "end_index": 296,
                "start_line": 1,
                "end_line": 7,
                "max_line": 7,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "async function releaseScheduledFulfillmentHolds()",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 5638,
                "end_index": 5687,
                "start_line": 119,
                "end_line": 119,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "pename: 'ShopifyPaymentsDisputeFulfillment' }\n        |",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1917988,
                "end_index": 1918043,
                "start_line": 44888,
                "end_line": 44904,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "leaseHoldsPayload = {\n    __typename?: 'FulfillmentOrdersReleaseHoldsPayload';\n    /** The asynchronous job that will release the fulfillment holds. */\n    job?: Maybe<Job>;\n    /** The list of errors that occurred from executing the mutation. */\n    userErrors: Array<FulfillmentOrdersReleaseHoldsUserError>;\n};\n\n/** An error that occurs during the execution of `FulfillmentOrdersReleaseHolds`. */\nexport type FulfillmentOrdersReleaseHoldsUserError = DisplayableError & {\n    __typename?: 'FulfillmentOrdersReleaseHoldsUserError';\n    /** The error code. */\n    code?: Maybe<FulfillmentOrdersReleaseHoldsUserErrorCode>;\n    /** The path to the input field that caused the error. */\n    field?: Maybe<Array<Scalars['String']>>;\n    /** The error message. */\n    message: Scalars['String'];\n};\n\n/** Possible error codes that can be returned by `FulfillmentOrdersReleaseHoldsUserError`. */\nexport enum FulfillmentOrdersReleaseHoldsUserErrorCode {\n    /** Failed to create release fulfillment order holds job. */\n    FailedToCreateJob = 'FAILED_TO_CREATE_JOB',\n}\n\n/** Return type for `fulfillmentOrdersSetFulfillmentDeadline` mutation. */\nexport type FulfillmentOrdersSetFulfillmentDeadlinePayload = {\n    __typename?: 'FulfillmentOrdersSetFulfillmentDeadlinePayload';\n    /** Whether the fulfillment deadline was successfully set. */\n    success?: Maybe<Scalars['Boolean']>;\n    /** The list of errors that occurred from executing the mutation. */\n    userErrors: Array<FulfillmentOrdersSetFulfillmentDeadlineUserError>;\n};\n\n/** An error that occurs during the execution of `FulfillmentOrdersSetFulfillmentDeadline`. */\nexport type FulfillmentOrdersSetFulfillmentDeadlineUserError = DisplayableError & {\n    __typename?: 'FulfillmentOrdersSetFulfillmentDeadlineUserError';\n    /** The error code. */\n    code?: Maybe<FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode>;\n    /** The path to the input field that caused the error. */\n    field?: Maybe<Array<Scalars['String']>>;\n    /** The error message. */\n    message: Scalars['String'];\n};\n\n/** Possible error codes that can be returned by `FulfillmentOrdersSetFulfillmentDeadlineUserError`. */\nexport enum FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode {\n    /** The fulfillment orders could not be found. */\n    FulfillmentOrdersNotFound = 'FULFILLMENT_ORDERS_NOT_FOUND',\n}\n\n/** The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center. */\nexport type FulfillmentOriginAd",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 609111,
                "end_index": 611601,
                "start_line": 14620,
                "end_line": 14689,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "while (hasScheduledHoldRelease)",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 5734,
                "end_index": 5765,
                "start_line": 121,
                "end_line": 121,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "{\n    let hasScheduledHoldRelease = true;",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 5688,
                "end_index": 5729,
                "start_line": 1,
                "end_line": 120,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "ame?: 'ShopifyPaymentsDispute' }",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1859473,
                "end_index": 1859505,
                "start_line": 43520,
                "end_line": 44516,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "ame?: 'ShopifyPaymentsDispute' }",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1859473,
                "end_index": 1859505,
                "start_line": 43520,
                "end_line": 44516,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "ame?: 'ShopifyPaymentsDispute' }",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1859473,
                "end_index": 1859505,
                "start_line": 43520,
                "end_line": 44516,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "ickup notification to the customer to let them know that their order is ready\n     * to be picked up.\n     *\n     */\n    fulfillmentOrderLineItemsPreparedForPickup?: Maybe<FulfillmentOrderLineItemsPreparedForPickupPayload>;\n    /**\n     * Changes the location which is assigned to fulfill a number of unfulfilled fulfillment order line items.\n     *\n     * Line items which have already been fulfilled can't be re-assigned\n     * and will always remain assigned to the original location.\n     *\n     * You can't change the assigned location while a fulfillment order has a\n     * [request status](https://shopify.dev/docs/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus)\n     * of `SUBMITTED`, `ACCEPTED`, `CANCELLATION_REQUESTED`, or `CANCELLATION_REJECTED`.\n     * These request statuses mean that a fulfillment order is awaiting action by a fulfillment service\n     * and can't be re-assigned without first having the fulfillment service accept a cancellation request.\n     * This behavior is intended to prevent items from being fulfilled by multiple locations or fulfillment services.\n     *\n     * ### How re-assigning line items affects fulfillment orders\n     *\n     * **First scenario:** Re-assign all line items belonging to a fulfillment order to a new location.\n     *\n     * In this case, the\n     * [assignedLocation](https://shopify.dev/docs/api/admin-graphql/latest/objects/fulfillmentorder#field-fulfillmentorder-assignedlocation)\n     * of the original fulfillment order will be updated to the new location.\n     *\n     * **Second scenario:** Re-assign a subset of the line items belonging to a fulfillment order to a new location.\n     * You can specify a subset of line items using the `fulfillmentOrderLineItems` parameter\n     * (available as of the `2023-07` API version),\n     * or specify that the original fulfillment order contains line items which have already been fulfilled.\n     *\n     * If the new location is already assigned to another active fulfillment order, on the same order,\n     * then the line items are moved to the existing fulfillment order.\n     * Otherwise, a new fulfillment order is created for the new location, and the line items are moved to the new location.\n     *\n     */\n    fulfillmentOrderMove?: Maybe<FulfillmentOrderMovePayload>;\n    /** Marks a scheduled fulfillment order as open. */\n    fulfillmentOrderOpen?: Maybe<FulfillmentOrderOpenPayload>;\n    /** Rejects a cancellation request sent to a fulfillment service for a fulfillment order. */\n    fulfillmentOrderRejectCancellationRequest?: Maybe<FulfillmentOrderRejectCancellationRequestPayload>;\n    /** Rejects a fulfillment request sent to a fulfillment service for a fulfillment order. */\n    fulfillmentOrderRejectFulfillmentRequest?: Maybe<FulfillmentOrderRejectFulfillmentRequestPayload>;\n    /** Releases the fulfillment hold on a fulfillment order. */\n    fulfillmentOrderReleaseHold?: Maybe<FulfillmentOrderReleaseHoldPayload>;",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 913079,
                "end_index": 916043,
                "start_line": 21804,
                "end_line": 21848,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<Checkbox\n                                    label=\"Release fulfillment holds from 1-click offers when offer timer ends\"\n                                    helpText='If the customer closes their browser tab while on the post-purchase page, the order will stay \"On Hold\" for 60 minutes by default. This setting reduces the delay to be equal to the upsell offer timer duration (e.g. 10 minutes).'\n                                    checked={fields.releaseFulfillmentHoldsAsap.value}\n                                    onChange={fields.releaseFulfillmentHoldsAsap.onChange}\n                                    disabled={!hasAllRequiredScopes}\n                                />\n                            </VerticalStack>\n                        </VerticalStack>\n                    </Card>\n                </AnnotatedLayout>\n                <AnnotatedLayout title=\"Partially paid\">\n                    <Card>\n                        <VerticalStack gap=\"3\">\n                            <VerticalStack gap=\"2\">\n                                <Checkbox\n                                    label={\n                                        tyPageOrderMergingEnabled\n                                            ? 'Automatically remove unpaid upsell products (from 1-click and TY page) from orders'\n                                            : 'Automatically remove unpaid 1-click upsell products from orders'\n                                    }\n                                    checked={fields.removePartiallyPaidItems.value}\n                                    onChange={fields.removePartiallyPaidItems.onChange}\n                                />\n                                {fields.removePartiallyPaidItems.value && (\n                                    <Box paddingInlineStart=\"6\">",
                "filename": "web/client/src/pages/settings/settings-fulfillment-and-payment.page.tsx",
                "start_index": 2848,
                "end_index": 4640,
                "start_line": 68,
                "end_line": 93,
                "max_line": 141,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "{\n        // To start the loop, we need to atomically remove a scheduled hold release. There may\n        // be many other instances of this function running in parallel, so we need to make sure\n        // that we are the only one that processes this hold release.\n        const scheduledHoldRelease = await ScheduledHoldReleasesModel.findOneAndDelete({\n            releaseHoldAt: { $lte: Date.now() },\n        });\n        hasScheduledHoldRelease = Boolean(hasScheduledHoldRelease);\n        // If we have no more hold releases in the database, we can exit this loop and return from the function.\n        if (!scheduledHoldRelease) {\n            break;\n        }",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 5766,
                "end_index": 6426,
                "start_line": 1,
                "end_line": 180,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "me?: 'ReverseFulfillmentOrderDisposition' }",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1858829,
                "end_index": 1858872,
                "start_line": 43507,
                "end_line": 44503,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "tus {\n    /** The fulfillment order has been cancelled by the merchant. */\n    Cancelled = 'CANCELLED',\n    /** The fulfillment order has been completed and closed. */\n    Closed = 'CLOSED',\n    /** The fulfillment order cannot be completed as requested. */\n    Incomplete = 'INCOMPLETE',\n    /** The fulfillment order is being processed. */\n    InProgress = 'IN_PROGRESS',\n    /** The fulfillment order is on hold. The fulfillment process can't be initiated until the hold on the fulfillment order is released. */\n    OnHold = 'ON_HOLD',\n    /** The fulfillment order is ready for fulfillment. */\n    Open = 'OPEN',\n    /** The fulfillment order is deferred and will be ready for fulfillment after the date and time specified in `fulfill_at`. */\n    Scheduled = 'SCHEDULED',\n}\n\n/** Return type for `fulfillmentOrderSubmitCancellationRequest` mutation. */\nexport type FulfillmentOrderSubmitCancellationRequestPayload = {\n    __typename?: 'FulfillmentOrderSubmitCancellationRequestPayload';\n    /** The fulfillment order specified in the cancelation request. */\n    fulfillmentOrder?: Maybe<FulfillmentOrder>;\n    /** The list of errors that occurred from executing the mutation. */\n    userErrors: Array<UserError>;\n};\n\n/** Return type for `fulfillmentOrderSubmitFulfillmentRequest` mutation. */\nexport type FulfillmentOrderSubmitFulfillmentRequestPayload = {\n    __typename?: 'FulfillmentOrderSubmitFulfillmentRequestPayload';\n    /**\n     * The original fulfillment order intended to request fulfillment for.\n     *\n     */\n    originalFulfillmentOrder?: Maybe<FulfillmentOrder>;\n    /**\n     * The fulfillment order that was submitted to the fulfillment service. This will be the same as\n     * the original fulfillment order field. The exception to this is partial fulfillment requests or\n     * fulfillment request for cancelled or incomplete fulfillment orders.\n     *\n     */\n    submittedFulfillmentOrder?: Maybe<FulfillmentOrder>;\n    /**\n     * This field will only be present for partial fulfillment requests. This will represent the new\n     * fulfillment order with the remaining line items not submitted to the fulfillment service.\n     *\n     */\n    unsubmittedFulfillmentOrder?: Maybe<FulfillmentOrder>;\n    /** The list of errors that occurred from executing the mutation. */\n    userErrors: Array<UserError>;\n};\n\n/**\n * One of the actions that the fulfillment order supports in its current state.\n *\n */\nexport type FulfillmentOrderSupportedAction = {\n    __typename?: 'FulfillmentOrderSupportedAction';\n    /** The action value. */\n    action: FulfillmentOrderAction;\n    /**\n     * The external URL to be used to initiate the fulfillment process outside Shopify.\n     * Applicable only when the `action` value is `EXTERNAL`.\n     *\n     */\n    externalUrl?: Maybe<Scalars['URL']>;\n};\n\n/** Return type for `fulfillmentOrdersReleaseHolds` mutation. */\nexport type FulfillmentOrdersRe",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 606210,
                "end_index": 609111,
                "start_line": 834,
                "end_line": 14629,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "import { getModelForClass, prop } from '@typegoose/typegoose';\nimport { REGEX_MYSHOPIFY } from '../../utils/regexes';\n\n// We can delete the possible hold after 3 days since it is almost\n// impossible that the customer would leave the checkout page open for\n// 3 days, come back, and then checkout without refreshing the page.\nconst POSSIBLE_HOLD_TTL_SECS = 259_200; // 3 days in seconds\n\nexport class PossibleHold {\n    @prop({ required: true, expires: POSSIBLE_HOLD_TTL_SECS, default: Date.now() })\n    lastUpdatedAt!: Date;\n\n    @prop({ required: true, match: REGEX_MYSHOPIFY })\n    shop!: string;\n\n    @prop({ required: true })\n    checkoutToken!: string;\n\n    @prop({ required: true })\n    minimumHoldMinutes!: number;\n}\n\nexport const PossibleHoldsModel = getModelForClass(PossibleHold);",
                "filename": "web/backend/src/modules/fulfillment-hold-release/possible-holds.model.ts",
                "start_index": 0,
                "end_index": 791,
                "start_line": 1,
                "end_line": 23,
                "max_line": 23,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "_typename?: 'ReverseFulfillmentOrder",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1456892,
                "end_index": 1456928,
                "start_line": 34520,
                "end_line": 44504,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "_typename?: 'ReverseFulfillmentOrder",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1456892,
                "end_index": 1456928,
                "start_line": 34520,
                "end_line": 44504,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            }
        ],
        "mmr_code_snippets_initial": [
            {
                "code": "try {\n            const settings = await SettingsService.getSettings({ shop: scheduledHoldRelease.shop });\n            if (!settings.releaseFulfillmentHoldsAsap) {\n                continue;\n            }\n            const { accessToken } = (await userModel.findOne({ myshopify_domain: scheduledHoldRelease.shop })) as any;\n            const shopifyService = new ShopifyService({ shop: scheduledHoldRelease.shop, accessToken });\n            const fulfillmentOrders = await shopifyService.getFulfillmentOrders({\n                orderId: scheduledHoldRelease.orderId!,\n            });\n            if (getOrderIsOnPostPurchaseFulfillmentHold({ fulfillmentOrders })) {\n                const fulfillmentOrdersOnHold = fulfillmentOrders.filter(\n                    (fo) => fo.status === FulfillmentOrderStatusRest.ON_HOLD\n                );\n                for (const fulfillmentOrder of fulfillmentOrdersOnHold) {\n                    await shopifyService.releaseFulfillmentOrderHold({ fulfillmentOrderId: fulfillmentOrder.id });\n                    console.log(\n                        `[${scheduledHoldRelease.shop}] Released fulfillment order hold. Order: ${scheduledHoldRelease.orderId}. Fulfillment order: ${fulfillmentOrder.id}.`\n                    );\n                }\n            } else {\n                console.log(\n                    `[${scheduledHoldRelease.shop}] Skipped releasing fulfillment hold because order is no longer on hold. Order: ${scheduledHoldRelease.orderId}.`\n                );\n            }\n        } catch (e) {\n            if (scheduledHoldRelease.previousAttemptsCount < 5) {\n                // If there is an error, we will insert the hold release back into the\n                // database for some loop instance (maybe this one, maybe a different one)\n                // to process it again.\n                const recreatedScheduledRelease: ScheduledHoldRelease = {\n                    shop: scheduledHoldRelease.shop,\n                    orderId: scheduledHoldRelease.orderId,\n                    releaseHoldAt: scheduledHoldRelease.releaseHoldAt,\n                    previousAttemptsCount: scheduledHoldRelease.previousAttemptsCount + 1,\n                };\n                await ScheduledHoldReleasesModel.create(recreatedScheduledRelease);\n                console.log(\n                    `[${scheduledHoldRelease.shop}] Retrying fulfillment hold release. Attempt: ${scheduledHoldRelease.previousAttemptsCount}. Order: ${scheduledHoldRelease.orderId}.`\n                );\n            } else {\n                // If we've tried 5 times before, and failed again on the 6th time, we will log the error and\n                // move on.\n                console.error(\n                    `[${scheduledHoldRelease.shop}] Failed to release fulfillment hold. Order: ${scheduledHoldRelease.orderId}. ${e}`\n                );\n            }\n        }\n    }",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 6435,
                "end_index": 9313,
                "start_line": 133,
                "end_line": 181,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "ame?: 'ShopifyPaymentsDispute' }",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1859473,
                "end_index": 1859505,
                "start_line": 43520,
                "end_line": 44516,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<Checkbox\n                                    label=\"Release fulfillment holds from 1-click offers when offer timer ends\"\n                                    helpText='If the customer closes their browser tab while on the post-purchase page, the order will stay \"On Hold\" for 60 minutes by default. This setting reduces the delay to be equal to the upsell offer timer duration (e.g. 10 minutes).'\n                                    checked={fields.releaseFulfillmentHoldsAsap.value}\n                                    onChange={fields.releaseFulfillmentHoldsAsap.onChange}\n                                    disabled={!hasAllRequiredScopes}\n                                />\n                            </VerticalStack>\n                        </VerticalStack>\n                    </Card>\n                </AnnotatedLayout>\n                <AnnotatedLayout title=\"Partially paid\">\n                    <Card>\n                        <VerticalStack gap=\"3\">\n                            <VerticalStack gap=\"2\">\n                                <Checkbox\n                                    label={\n                                        tyPageOrderMergingEnabled\n                                            ? 'Automatically remove unpaid upsell products (from 1-click and TY page) from orders'\n                                            : 'Automatically remove unpaid 1-click upsell products from orders'\n                                    }\n                                    checked={fields.removePartiallyPaidItems.value}\n                                    onChange={fields.removePartiallyPaidItems.onChange}\n                                />\n                                {fields.removePartiallyPaidItems.value && (\n                                    <Box paddingInlineStart=\"6\">",
                "filename": "web/client/src/pages/settings/settings-fulfillment-and-payment.page.tsx",
                "start_index": 2848,
                "end_index": 4640,
                "start_line": 68,
                "end_line": 93,
                "max_line": 141,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "function getOrderIsOnPostPurchaseFulfillmentHold({\n    fulfillmentOrders,\n}: {\n    fulfillmentOrders: FulfillmentOrderRest[];\n}): boolean {\n    return fulfillmentOrders.some(\n        (fo) =>\n            fo.status === FulfillmentOrderStatusRest.ON_HOLD &&\n            fo.fulfillment_holds.some((fh) => fh.reason === 'online_store_post_purchase_cross_sell')\n    );\n}",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 9317,
                "end_index": 9681,
                "start_line": 184,
                "end_line": 194,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "_typename?: 'ReverseFulfillmentOrder",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 1456892,
                "end_index": 1456928,
                "start_line": 34520,
                "end_line": 44504,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "leaseHoldsPayload = {\n    __typename?: 'FulfillmentOrdersReleaseHoldsPayload';\n    /** The asynchronous job that will release the fulfillment holds. */\n    job?: Maybe<Job>;\n    /** The list of errors that occurred from executing the mutation. */\n    userErrors: Array<FulfillmentOrdersReleaseHoldsUserError>;\n};\n\n/** An error that occurs during the execution of `FulfillmentOrdersReleaseHolds`. */\nexport type FulfillmentOrdersReleaseHoldsUserError = DisplayableError & {\n    __typename?: 'FulfillmentOrdersReleaseHoldsUserError';\n    /** The error code. */\n    code?: Maybe<FulfillmentOrdersReleaseHoldsUserErrorCode>;\n    /** The path to the input field that caused the error. */\n    field?: Maybe<Array<Scalars['String']>>;\n    /** The error message. */\n    message: Scalars['String'];\n};\n\n/** Possible error codes that can be returned by `FulfillmentOrdersReleaseHoldsUserError`. */\nexport enum FulfillmentOrdersReleaseHoldsUserErrorCode {\n    /** Failed to create release fulfillment order holds job. */\n    FailedToCreateJob = 'FAILED_TO_CREATE_JOB',\n}\n\n/** Return type for `fulfillmentOrdersSetFulfillmentDeadline` mutation. */\nexport type FulfillmentOrdersSetFulfillmentDeadlinePayload = {\n    __typename?: 'FulfillmentOrdersSetFulfillmentDeadlinePayload';\n    /** Whether the fulfillment deadline was successfully set. */\n    success?: Maybe<Scalars['Boolean']>;\n    /** The list of errors that occurred from executing the mutation. */\n    userErrors: Array<FulfillmentOrdersSetFulfillmentDeadlineUserError>;\n};\n\n/** An error that occurs during the execution of `FulfillmentOrdersSetFulfillmentDeadline`. */\nexport type FulfillmentOrdersSetFulfillmentDeadlineUserError = DisplayableError & {\n    __typename?: 'FulfillmentOrdersSetFulfillmentDeadlineUserError';\n    /** The error code. */\n    code?: Maybe<FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode>;\n    /** The path to the input field that caused the error. */\n    field?: Maybe<Array<Scalars['String']>>;\n    /** The error message. */\n    message: Scalars['String'];\n};\n\n/** Possible error codes that can be returned by `FulfillmentOrdersSetFulfillmentDeadlineUserError`. */\nexport enum FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode {\n    /** The fulfillment orders could not be found. */\n    FulfillmentOrdersNotFound = 'FULFILLMENT_ORDERS_NOT_FOUND',\n}\n\n/** The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center. */\nexport type FulfillmentOriginAd",
                "filename": "web/backend/src/modules/shopify/graphql/generated/index.ts",
                "start_index": 609111,
                "end_index": 611601,
                "start_line": 14620,
                "end_line": 14689,
                "max_line": 45780,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "while (hasScheduledHoldRelease)",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 5734,
                "end_index": 5765,
                "start_line": 121,
                "end_line": 121,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "import { getModelForClass, prop } from '@typegoose/typegoose';\nimport { REGEX_MYSHOPIFY } from '../../utils/regexes';\n\n// We can delete the possible hold after 3 days since it is almost\n// impossible that the customer would leave the checkout page open for\n// 3 days, come back, and then checkout without refreshing the page.\nconst POSSIBLE_HOLD_TTL_SECS = 259_200; // 3 days in seconds\n\nexport class PossibleHold {\n    @prop({ required: true, expires: POSSIBLE_HOLD_TTL_SECS, default: Date.now() })\n    lastUpdatedAt!: Date;\n\n    @prop({ required: true, match: REGEX_MYSHOPIFY })\n    shop!: string;\n\n    @prop({ required: true })\n    checkoutToken!: string;\n\n    @prop({ required: true })\n    minimumHoldMinutes!: number;\n}\n\nexport const PossibleHoldsModel = getModelForClass(PossibleHold);",
                "filename": "web/backend/src/modules/fulfillment-hold-release/possible-holds.model.ts",
                "start_index": 0,
                "end_index": 791,
                "start_line": 1,
                "end_line": 23,
                "max_line": 23,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "async function releaseScheduledFulfillmentHolds()",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                "start_index": 5638,
                "end_index": 5687,
                "start_line": 119,
                "end_line": 119,
                "max_line": 194,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "import { RequestHandler } from 'express';\nimport { releaseScheduledFulfillmentHolds } from './fulfillment-hold-release';\n\nexport const releaseAllScheduledFulfillmentHoldsJob: RequestHandler = async (req, res, next) => {\n    await releaseScheduledFulfillmentHolds();\n    res.status(200).send();\n};",
                "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.controller.ts",
                "start_index": 0,
                "end_index": 296,
                "start_line": 1,
                "end_line": 7,
                "max_line": 7,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            }
        ],
        "initial_doc_snippets": [
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/backend` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 1000,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<head>\n        <!-- Shopify App Bridge [START] -->\n        <meta name=\"shopify-api-key\" content=\"%SHOPIFY_API_KEY%\" />",
                "filename": "web/client/index.html",
                "start_index": 38,
                "end_index": 156,
                "start_line": 4,
                "end_line": 6,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"content-box__row text-container\">\n                                                <h2 class=\"heading-2 os-step__title\" id=\"main-header\" tabindex=\"-1\">\n                                                    Your order is confirmed\n                                                </h2>\n                                                <p class=\"os-step__description\">\n                                                    You\u2019ll receive an email when your order is ready.\n                                                </p>\n                                            </div>\n                                        </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 317828,
                "end_index": 318454,
                "start_line": 6200,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"step__sections\">\n                                <div class=\"section\">\n                                    <div class=\"section__header os-header\">\n                                        <svg\n                                            width=\"56\"\n                                            height=\"56\"\n                                            viewBox=\"0 0 56 56\"\n                                            fill=\"none\"\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                            <circle cx=\"28\" cy=\"28\" r=\"26\" stroke=\"#E5E5E5\" stroke-width=\"2.29412\" />\n                                            <path\n                                                fill-rule=\"evenodd\"\n                                                clip-rule=\"evenodd\"\n                                                d=\"M22.4811 37.3603L16.3636 31.3947C15.5663 30.6172 15.5663 29.3605 16.3636 28.583C17.1609 27.8055 18.4497 27.8055 19.247 28.583L23.8066 33.0293L36.6493 18.7538C37.3834 17.9186 38.6701 17.8231 39.5225 18.537C40.379 19.2529 40.4789 20.5056 39.7448 21.3388L25.4706 37.2469C25.1015 37.6685 24.5672 37.9191 24.0003 37.9409C23.3825 37.9429 22.8625 37.7341 22.4811 37.3603Z\"\n                                                fill=\"#008060\"\n                                                stroke=\"#E5E5E5\"\n                                                stroke-width=\"0.764706\"\n                                            />\n                                        </svg>\n                                        <div class=\"os-header__heading\">\n                                            <span class=\"os-order-number\"> Order #1001 </span>\n                                            <h2 class=\"os-header__title\" id=\"main-header\" tabindex=\"-1\">\n                                                Thank you {{Customer Name}}!\n                                            </h2>\n                                        </div>\n                                    </div>\n                                </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245858,
                "end_index": 247957,
                "start_line": 6161,
                "end_line": 6451,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<script defer src=\"./thankyoupage_bundle.js?v2\"></script>\n        <script defer src=\"/apps/aftersell_sdk.bundle.min.js?v2\"></script>\n    </head>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241237,
                "end_index": 241381,
                "start_line": 6073,
                "end_line": 6075,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<html\n    lang=\"en\"\n    dir=\"ltr\"\n    class=\"js desktop page--no-banner page--logo-main page--show page--show card-fields cors svg opacity placeholder no-touchevents displaytable display-table generatedcontent cssanimations flexbox no-flexboxtweener anyflexbox shopemoji floating-labels\"\n>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 0,
                "end_index": 289,
                "start_line": 1,
                "end_line": 6518,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# Shopify Function development with Rust\n\n## Dependencies\n\n-   [Install Rust](https://www.rust-lang.org/tools/install)\n    -   On Windows, Rust requires the [Microsoft C++ Build Tools](https://docs.microsoft.com/en-us/windows/dev-environment/rust/setup). Be sure to select the _Desktop development with C++_ workload when installing them.\n-   Install [`cargo-wasi`](https://bytecodealliance.github.io/cargo-wasi/)\n    -   `cargo install cargo-wasi`\n-   On Macs with Apple Silicon, you'll also need to install the Binaryen toolchain and set the `WASM_OPT` environment variable. ([related issue](https://github.com/bytecodealliance/cargo-wasi/issues/112))\n    -   `brew install binaryen`\n    -   Add `export WASM_OPT=/opt/homebrew/bin/wasm-opt` to your `.bashrc` or `.zshrc`\n\n## Building the function\n\nYou can build this individual function using `cargo wasi`.\n\n```shell\ncargo wasi build --release\n```\n\nThe Shopify CLI `build` command will also execute this, based on the configuration in `shopify.function.extension.toml`.\n\n## Testing\n\n> Requires Node v16+\n\n1. Create a temporary JSON file (e.g., `a.json`) in the following format:\n\n```json\n{\n    \"data\": {\n        \"foo\": \"bar\"\n    },\n    \"secretKey\": \"abc123\"\n}\n```\n\n2. Run the following command\n\n```\nyarn test:new-hmac < a.json\n```\n\n3. Copy the generated HMAC into the test file",
                "filename": "extensions/upsell-offer-discount-function/README.md",
                "start_index": 0,
                "end_index": 1329,
                "start_line": 1,
                "end_line": 44,
                "max_line": 44,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<body class=\"aftersell-preview\">\n        <a href=\"#main-header\" class=\"skip-to-content\"> Skip to content </a>\n\n        <header class=\"banner\" data-header=\"\" role=\"banner\">\n            <div class=\"wrap\">\n                <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n            </div>\n        </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241387,
                "end_index": 241804,
                "start_line": 6077,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"order-summary__section__content\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323949,
                "end_index": 323994,
                "start_line": 6297,
                "end_line": 6297,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<span class=\"order-summary-toggle__inner\">\n                        <span class=\"order-summary-toggle__icon-wrapper\">\n                            <svg\n                                width=\"20\"\n                                height=\"19\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__icon\"\n                            >\n                                <path\n                                    d=\"M17.178 13.088H5.453c-.454 0-.91-.364-.91-.818L3.727 1.818H0V0h4.544c.455 0 .91.364.91.818l.09 1.272h13.45c.274 0 .547.09.73.364.18.182.27.454.18.727l-1.817 9.18c-.09.455-.455.728-.91.728zM6.27 11.27h10.09l1.454-7.362H5.634l.637 7.362zm.092 7.715c1.004 0 1.818-.813 1.818-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817zm9.18 0c1.004 0 1.817-.813 1.817-1.817s-.814-1.818-1.818-1.818-1.818.814-1.818 1.818.814 1.817 1.818 1.817z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--show\">\n                            <span>Show order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"6\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M.504 1.813l4.358 3.845.496.438.496-.438 4.642-4.096L9.504.438 4.862 4.534h.992L1.496.69.504 1.812z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span class=\"order-summary-toggle__text order-summary-toggle__text--hide\">\n                            <span>Hide order summary</span>\n                            <svg\n                                width=\"11\"\n                                height=\"7\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                class=\"order-summary-toggle__dropdown\"\n                                fill=\"#000\"\n                            >\n                                <path\n                                    d=\"M6.138.876L5.642.438l-.496.438L.504 4.972l.992 1.124L6.138 2l-.496.436 3.862 3.408.992-1.122L6.138.876z\"\n                                ></path>\n                            </svg>\n                        </span>\n                        <span\n                            class=\"order-summary-toggle__total-recap total-recap\"\n                            data-order-summary-section=\"toggle-total-recap\"\n                        >\n                            <span class=\"total-recap__final-price\" data-checkout-payment-due-target=\"5073\">$50.73</span>\n                        </span>\n                    </span>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 242214,
                "end_index": 245205,
                "start_line": 6097,
                "end_line": 6446,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"hidden\">\n                            <span class=\"visually-hidden\" id=\"forwarding-external-new-window-message\">\n                                Opens external website in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-new-window-message\">\n                                Opens in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-external-message\">\n                                Opens external website.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"checkout-context-step-one\">\n                                Customer information - Checkout\n                            </span>\n                        </div>\n                    </main>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 322226,
                "end_index": 323078,
                "start_line": 6265,
                "end_line": 6282,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"section__content\">\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Contact information</h3>\n\n                                                            <p class=\"as-dummy-line\"></p>\n\n                                                            <h3 class=\"heading-3\">Shipping address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n\n                                                            <h3 class=\"heading-3\">Shipping method</h3>\n                                                            <p class=\"as-dummy-line as-w40\"></p>\n                                                        </div>\n                                                    </div>\n\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Payment method</h3>\n                                                            <ul class=\"payment-method-list\">\n                                                                <li class=\"payment-method-list__item\">\n                                                                    <p class=\"as-dummy-line as-w80\"></p>\n                                                                </li>\n                                                            </ul>\n\n                                                            <h3 class=\"heading-3\">Billing address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n                                                        </div>\n                                                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318877,
                "end_index": 321837,
                "start_line": 6191,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<th class=\"product__description\" scope=\"row\">\n                                                        <span class=\"product__description__name order-summary__emphasis\"\n                                                            >Product Name</span\n                                                        >\n                                                        <span\n                                                            class=\"product__description__variant order-summary__small-text\"\n                                                            >Variant Name</span\n                                                        >\n                                                    </th>\n                                                    <td class=\"product__quantity visually-hidden\">1</td>\n                                                    <td class=\"product__price\">\n                                                        <span class=\"order-summary__emphasis\">$42.99</span>\n                                                    </td>\n                                                </tr>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 331038,
                "end_index": 332129,
                "start_line": 6363,
                "end_line": 6376,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<tbody data-order-summary-section=\"line-items\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 325247,
                "end_index": 325294,
                "start_line": 6314,
                "end_line": 6314,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# [[[ --- CLIENT --- ]]]\nFROM node:18.16.1-alpine AS client\nARG SHOPIFY_API_KEY\nENV SHOPIFY_API_KEY=$SHOPIFY_API_KEY\nARG HOST\nENV HOST=$HOST\nARG NODE_ENV\nENV NODE_ENV=$NODE_ENV\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/client/package.json ./web/client/package.json\nCOPY web/client/yarn.lock ./web/client/yarn.lock\nRUN cd web/client && yarn install --frozen-lockfile --production=false\nCOPY extensions-web-common/package.json ./extensions-web-common/package.json\nCOPY extensions-web-common/yarn.lock ./extensions-web-common/yarn.lock\nRUN cd extensions-web-common && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY extensions/post-purchase ./extensions/post-purchase\nCOPY extensions-web-common/post-purchase ./extensions-web-common/post-purchase\nCOPY extensions-web-common/checkout ./extensions-web-common/checkout\nCOPY extensions-web-common/shared ./extensions-web-common/shared\nCOPY extensions-web-common/ty-page ./extensions-web-common/ty-page\nCOPY web/client ./web/client\nRUN cd web/client && yarn build\n\n# [[[ --- TY PAGE --- ]]]\nFROM node:18.16.1-alpine AS ty-page\nARG HOST\nENV HOST=$HOST\nWORKDIR /usr/src/app\nCOPY web/widgets/package.json ./web/widgets/package.json\nCOPY web/widgets/yarn.lock ./web/widgets/yarn.lock\nRUN cd web/widgets && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY web/widgets ./web/widgets\nRUN cd web/widgets && yarn build\n\n# [[[ --- BACKEND --- ]]]\nFROM node:18.16.1-alpine AS backend\nWORKDIR /usr/src/app\nCOPY web/backend/package.json ./web/backend/package.json\nCOPY web/backend/yarn.lock ./web/backend/yarn.lock\nCOPY web/backend/patches ./web/backend/patches\nRUN cd web/backend && yarn install --frozen-lockfile --production=false\nCOPY web/backend ./web/backend\nCOPY web/common ./web/common\nRUN cd web/backend && yarn build\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM node:18.16.1-alpine AS final\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/backend/package.json ./web/backend/package.json\nCOPY web/backend/yarn.lock ./web/backend/yarn.lock\nCOPY web/backend/patches ./web/backend/patches\nRUN cd web/backend && yarn install --frozen-lockfile --production=true\nCOPY --from=backend /usr/src/app/web/backend/build ./web/backend/build\nCOPY --from=ty-page /usr/src/app/web/widgets/dist ./web/backend/build/backend/dist\nCOPY --from=client /usr/src/app/web/client/dist ./web/backend/build/backend/dist/client\nCOPY package.json ./package.json\nCMD [\"yarn\", \"start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2540,
                "start_line": 1,
                "end_line": 61,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# AfterSell\n\n### All Docs on Notion \ud83d\udc49 [AfterSell Notion Docs](https://www.notion.so/aftersell/AfterSell-Docs-9d43566167b5426d86b5983925872953?pvs=4)",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 148,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"order-summary__sections\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323769,
                "end_index": 323806,
                "start_line": 6295,
                "end_line": 6295,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"order-summary__section order-summary__section--product-list\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323839,
                "end_index": 323912,
                "start_line": 6296,
                "end_line": 6296,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            }
        ],
        "reranked_doc_snippets_initial": [
            {
                "code": "<script src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"></script>\n        <!-- Shopify App Bridge [END] -->\n\n        <!-- User Pre-fetching [START] -->\n        <script>\n            window.indexHtmlPrefetchedUserPromise = fetch('/api/v1/user').then((res) => res.json());\n        </script>\n        <!-- User Pre-fetching [END] -->\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" id=\"aftersell-viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon.svg\" />\n        <meta name=\"description\" content=\"AfterSell App\" />\n        <script>\n            const global = globalThis;\n        </script>\n        <script>\n            (function () {\n                const w = window;\n                const ic = w.Intercom;\n                if (typeof ic === 'function') {\n                    ic('reattach_activator');\n                    ic('update', w.intercomSettings);\n                } else {\n                    const d = document;\n                    var i = function () {\n                        i.c(arguments);\n                    };\n                    i.q = [];\n                    i.c = function (args) {\n                        i.q.push(args);\n                    };\n                    w.Intercom = i;\n                    const l = function () {\n                        const s = d.createElement('script');\n                        s.type = 'text/javascript';\n                        s.async = true;\n                        s.src = 'https://widget.intercom.io/widget/l7yr8zsg';\n                        const x = d.getElementsByTagName('script')[0];\n                        x.parentNode.insertBefore(s, x);\n                    };\n                    if (w.attachEvent) {\n                        w.attachEvent('onload', l);\n                    } else {\n                        w.addEventListener('load', l, false);\n                    }\n                }\n            })();\n        </script>\n\n        <!-- FirstPromoter [START] -->\n        <script>\n            (function (w) {\n                w.fpr =\n                    w.fpr ||\n                    function () {\n                        w.fpr.q = w.fpr.q || [];\n                        w.fpr.q[arguments[0] == 'set' ? 'unshift' : 'push'](arguments);\n                    };\n            })(window);\n            fpr('init', { cid: '1z5h5vjx' });\n            fpr('click');\n        </script>\n        <!-- NOTE this FirstPromoter script is our own copy of the source file with some modifications. Original: https://cdn.firstpromoter.com/fpr.js -->\n        <script type=\"module\" src=\"/src/libs/fpr/fpr.ts\" defer></script>\n        <!-- FirstPromoter [END] -->\n\n        <!-- Facebook Pixel Code -->",
                "filename": "web/client/index.html",
                "start_index": 3507,
                "end_index": 6223,
                "start_line": 51,
                "end_line": 118,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# Post-purchase checkout extension\n\n## Dev Setup\n\n1. Ensure that you have an `.env` file in the `/backend` directory. The extension will use the `HOST` variable from this file\n\n2. Run `yarn dev` to start serving the post-purchase extension code. This will print:\n\n```\n\ud83d\udd2d > Your extension is available at http://localhost:{{PORT}}/assets/extension.js\n```\n\n3. Download the [Shopify post-purchase Chrome extension](https://chrome.google.com/webstore/detail/shopify-post-purchase-dev/nenmcifhoegealiiblnpihbnjenleong)\n\n4. Enable the Chrome extension\n   ![](docs/images/chrome-extension-activate.png)\n\n5. Open the post-purchase Chrome extension setup page\n   ![](docs/images/chrome-extension-details.png)\n   ![](docs/images/chrome-extension-options-link.png)\n\n6. Past the `http://localhost:{{PORT}}/assets/extension.js` URL into the setup page\n7. Copy the API key from your app setup page and paste into the setup page\n   ![](docs/images/chrome-extension-script-url.png)\n   ![](docs/images/app-api-key.png)",
                "filename": "extensions/post-purchase/README.md",
                "start_index": 0,
                "end_index": 1000,
                "start_line": 1,
                "end_line": 25,
                "max_line": 25,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<head>\n        <!-- Shopify App Bridge [START] -->\n        <meta name=\"shopify-api-key\" content=\"%SHOPIFY_API_KEY%\" />",
                "filename": "web/client/index.html",
                "start_index": 38,
                "end_index": 156,
                "start_line": 4,
                "end_line": 6,
                "max_line": 183,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"content-box__row text-container\">\n                                                <h2 class=\"heading-2 os-step__title\" id=\"main-header\" tabindex=\"-1\">\n                                                    Your order is confirmed\n                                                </h2>\n                                                <p class=\"os-step__description\">\n                                                    You\u2019ll receive an email when your order is ready.\n                                                </p>\n                                            </div>\n                                        </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 317828,
                "end_index": 318454,
                "start_line": 6200,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"step__sections\">\n                                <div class=\"section\">\n                                    <div class=\"section__header os-header\">\n                                        <svg\n                                            width=\"56\"\n                                            height=\"56\"\n                                            viewBox=\"0 0 56 56\"\n                                            fill=\"none\"\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                        >\n                                            <circle cx=\"28\" cy=\"28\" r=\"26\" stroke=\"#E5E5E5\" stroke-width=\"2.29412\" />\n                                            <path\n                                                fill-rule=\"evenodd\"\n                                                clip-rule=\"evenodd\"\n                                                d=\"M22.4811 37.3603L16.3636 31.3947C15.5663 30.6172 15.5663 29.3605 16.3636 28.583C17.1609 27.8055 18.4497 27.8055 19.247 28.583L23.8066 33.0293L36.6493 18.7538C37.3834 17.9186 38.6701 17.8231 39.5225 18.537C40.379 19.2529 40.4789 20.5056 39.7448 21.3388L25.4706 37.2469C25.1015 37.6685 24.5672 37.9191 24.0003 37.9409C23.3825 37.9429 22.8625 37.7341 22.4811 37.3603Z\"\n                                                fill=\"#008060\"\n                                                stroke=\"#E5E5E5\"\n                                                stroke-width=\"0.764706\"\n                                            />\n                                        </svg>\n                                        <div class=\"os-header__heading\">\n                                            <span class=\"os-order-number\"> Order #1001 </span>\n                                            <h2 class=\"os-header__title\" id=\"main-header\" tabindex=\"-1\">\n                                                Thank you {{Customer Name}}!\n                                            </h2>\n                                        </div>\n                                    </div>\n                                </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 245858,
                "end_index": 247957,
                "start_line": 6161,
                "end_line": 6451,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# Checkout Upsell Discounts\n\n## Overview\n\nThis document describes the data flow and security reasoning for our implementation of checkout upsell discounts.\n\nIt is difficult to understand the overall process for checkout upsell discounts by just looking at the code. This is because the code is fragmented across different areas and data is indirectly passed across some boundaries. This convoluted system is necessary for security reasons described below, but it makes the code harder to trace.\n\nThis document can hopefully be used to better understand the checkout upsell discount system as a whole, to allow us to debug or make changes in the future.\n\n## Implementation\n\n### Checkout\n\n> Part 1. Generate a `TamperProofCartAttribute` (Checkout Extension and Server)\n\n1. **Checkout Extension:** Request a `TamperProofCartAttribute` from the server for the offer being added.\n    - **Action:** The checkout extension sends a request to the server with the current `CheckoutData` and the ID of the offer.\n2. **Server:** Decide if a discount should be applied.\n    - **Action:** The server decides if a discount should be applied based on the provided `CheckoutData`. The server must **ONLY** use the provided `CheckoutData`, along with active offers from the database, when determining whether or not to apply a discount. The server must **NOT** use any other information regarding the current checkout.\n    - **Security:**\n        - The `CheckoutData` from the checkout extension is **NOT** secure since it is being sent to an insecure endpoint. Note that even with checkout session tokens, the `CheckoutData` is not secure because a customer could inspect the network requests to find the session token and then make arbitrary requests.\n        - The server does not need to verify the `CheckoutData`. It only needs to decide whether or not a discount should be applied _if the provided `CheckoutData` turns out to be verified_. The server can assume that the discount will only be applied for the given `CheckoutData`. If the checkout data is not actually what was provided, the discount will not be applied. Verification of the `CheckoutData` occurs in the Function.\n        - The server must not use any data other than the provided `CheckoutData` when determining whether or not a discount should be applied. This is because the Function is only provided the trusted `CheckoutData` by Shopify. The Function would not be able to invalidate a discount when a necessary factor changed, if that factor was not part of the `CheckoutData`.\n3. **Server:** Create a `TamperProofCartAttribute` using an HMAC signature of the `UnverifiedState` and `DiscountToApplyIfStateIsVerified`.\n    - **Action:** The server creates an HMAC signature from the combination of the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified`. The `UnverifiedState` is composed of the `CheckoutData` and the `ActiveOfferVersion`.\n        - Creating an HMAC signature involves first stringifying the relevant data and then signing the string with the shared secret between the Function and the server.\n    - **Security:**\n        - This HMAC signature will be used by the Function to verify that the `TamperProofCartAttribute` has not been tampered with. If the HMAC signature matches in the Function, this means that _if the `State` is X_, then the discount should be applied. The HMAC does not provide any indication of whether or not the `State` is verified.\n        - The `ActiveOfferVersion` is included in the `State` to ensure that the discount can be invalidated in the future. For example, the merchant might offer a lower discount amount after BFCM is finished, in which case the old discounts should no longer be valid. The merchant may also change the triggers for an offer such that the offer is only valid over $100, in which case any old discounts should no longer be valid.\n4. **Server:** Respond to the Checkout Extension with a `TamperProofCartAttribute`.\n    - **Action:** The server responds to the checkout extension's request with the newly generated `TamperProofCartAttribute`.\n5. **Checkout Extension:** Add the `TamperProofCartAttribute` to the cart.\n\n> Part 2. Apply a Discount from a `TamperProofCartAttribute` (Function)\n\n6. **Function:** Read the `TamperProofCartAttribute` and `TrustedState` from GraphQL input.\n    - **Security:**\n        - The `TrustedState` is composed of:\n            - `CheckoutData` from the GraphQL input. This is trusted because it is provided directly to the Function by Shopify's servers.\n            - A map of `ActiveOfferVersion`s from a discount private metafield. This is trusted because it can only be set from our server using the Admin API.\n7. **Function:** Verify that the `TamperProofCartAttribute` has not been tampered with.\n    - **Action:** The Function creates an HMAC signature from the data string of the `TamperProofCartAttribute` and the shared secret. The Function compares the HMAC that it generated against the HMAC from the `TamperProofCartAttribute`. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - This ensures that the attribute was generated by our server, and has not been modified (e.g., by the customer).\n        - This does **NOT** provide any indication of whether or not the state contained in the data of the `TamperProofCartAttribute` matches reality. The state must still be verified against the trusted state.\n        - This tells us that the _relationship_ between the `UnverifiedState` and the `DiscountToApplyIfStateIsVerified` is true. That is, if the `UnverifiedState` is true then our server says that the discount should be applied.\n8. **Function:** Verify the `UnverifiedState` using the `TrustedState`.\n    - **Action:** The Function compares the `UnverifiedState` from the `TamperProofCartAttribute` to the `TrustedState` from its GraphQL input. If these are not equal, then the discount should **NOT** be applied.\n    - **Security:**\n        - If the `TrustedState` matches the `UnverifiedState`, then it is safe to apply the `DiscountToApplyIfStateIsVerified`.\n        - If the states are not equal, then one of the following may have happened:\n            1. The request to the server was forged and sent with a `CheckoutData` that did not match reality, or\n            2. The `CheckoutData` has changed since the `TamperProofCartAttribute` was created, or\n            3. The `ActiveOfferVersion` has changed since the `TamperProofCartAttribute` (e.g., due to the merchant editing the offer)\n9. **Function:** Apply the `DiscountToApplyIfStateIsVerified` from the `TamperProofCartAttribute`, if all previous checks pass.\n\n### Editor\n\n**Discount Metafields**\n\n-   `$app:upsell-offer-discount-function.private-state`:\n    -   `activeOfferVersions`: A key-value map of offer ID to active version number. This is used by the Function as part of the `TrustedState`.\n-   `$app:upsell-offer-discount-function.private-shared-secret-key`: This is the shared secret between the server and the Function used to generate HMAC signatures. This value should be _unique_ for each discount code to limit the damage if a key is compromised.\n\n**Updating Offers**\n\nWhen a discounted offer is changed, the active version number must be incremented. The combination of the offer ID and the active version number are used to create a `ActiveOfferVersion`. When the version number is incremented, then any `ActiveOfferVersion` that uses the old version number becomes invalid. This ensures that discounts from previous offer versions cannot be applied.\n\n## Type Definitions\n\n```typescript\n/**\n * A cart attribute that is used to transfer non-secret trusted data from our Server to the Function.\n * This is created on our server and verified in the Function.\n */\ninterface TamperProofCartAttribute {\n    /**\n     * A string containing the non-secret trusted data to be transfered.  In the case of checkout\n     * upsell discounts, this is the JSON stringification of a `TamperProofCartAttributeData` object.\n     */\n    data: string;\n    /**\n     *  A SHA-256 hash of the `data`, generating using a shared secret key between the Server and\n     * Function. This can be verified to ensure the integrity of the `data`.\n     */\n    hmac: string;\n}\n\n/**\n * The data contained in a `TamperProofCartAttribute` for checkout upsell discounts.\n */\ninterface TamperProofCartAttributeData {\n    unverifiedState: UnverifiedState;\n    discountToApplyIfStateIsVerified: DiscountToApplyIfStateIsVerified;\n}\n\n/**\n * All of the relevant information about the contents of a checkout that are necessary to determine\n * whether or not the checkout is eligible for a given discount.\n */\ninterface CheckoutData {\n    lineItems: GenericLineItem[];\n}\n\ninterface GenericLineItem {\n    quantity: number; // u64\n    /**\n     * The numeric ID of the variant. This is `null` if the line item is not a product on the\n     * store (e.g., custom line items in draft orders).\n     *\n     * Also known as the legacy ID.\n     *\n     * @example 123456789\n     */\n    variantId: number | null; // u128\n}\n\n/**\n * This is the same as the `GenericLineItem`, except the `variantId` is non-null.\n */\ninterface VariantLineItem {\n    quantity: number;\n    variantId: number;\n}\n\n/**\n * The discount which should be applied by the function if the `UnverifiedState` is verified.\n */\ninterface DiscountToApplyIfStateIsVerified {\n    targetLineItem: VariantLineItem;\n    value:\n        | {\n              discountType: 'percentage';\n              percentageOutOf100: number; // f64\n          }\n        | {\n              discountType: 'fixedAmount';\n              amountInShopCurrency: number; // f64\n          };\n}\n\n/**\n * A general concept including the ID of an offer and the most recent version number. Version\n * numbers should be incremented whenever a change happens to the offer that would affect\n * the discount. For example, changing the triggers for the offer or changing the discount\n * amount.\n */\ninterface ActiveOfferVersion {}\n\n/**\n * All information required to determine whether or not a discount should be applied to a checkout.\n * See `UnverifiedState` and `TrustedState` for specific usages.\n */\ninterface State {}\n\n/**\n * A `State` that may or may not be match reality. The `UnverifiedState` may be outright incorrect,\n * or reality may have changed since the `UnverifiedState` was created. This is used to determine\n * the `DiscountToApplyIfStateIsVerified`.\n */\ninterface UnverifiedState {\n    checkoutData: CheckoutData;\n    activeOfferVersion: {\n        offerId: string;\n        offerVersion: number; // u32\n    };\n}\n\n/**\n * The \"real\" `State`, strictly composed of trusted information. This can be used to verify the\n * `UnverifiedState`.\n */\ninterface TrustedState {\n    checkoutData: CheckoutData;\n    /**\n     * A key-value map containing all active offer IDs (keys) and their corresponding version numbers (values).\n     */\n    activeOfferVersions: Record<string, number>;\n}\n```",
                "filename": "docs/checkout-upsell-discounts.md",
                "start_index": 0,
                "end_index": 10969,
                "start_line": 1,
                "end_line": 181,
                "max_line": 181,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<script defer src=\"./thankyoupage_bundle.js?v2\"></script>\n        <script defer src=\"/apps/aftersell_sdk.bundle.min.js?v2\"></script>\n    </head>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241237,
                "end_index": 241381,
                "start_line": 6073,
                "end_line": 6075,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# Shopify Function development with Rust\n\n## Dependencies\n\n-   [Install Rust](https://www.rust-lang.org/tools/install)\n    -   On Windows, Rust requires the [Microsoft C++ Build Tools](https://docs.microsoft.com/en-us/windows/dev-environment/rust/setup). Be sure to select the _Desktop development with C++_ workload when installing them.\n-   Install [`cargo-wasi`](https://bytecodealliance.github.io/cargo-wasi/)\n    -   `cargo install cargo-wasi`\n-   On Macs with Apple Silicon, you'll also need to install the Binaryen toolchain and set the `WASM_OPT` environment variable. ([related issue](https://github.com/bytecodealliance/cargo-wasi/issues/112))\n    -   `brew install binaryen`\n    -   Add `export WASM_OPT=/opt/homebrew/bin/wasm-opt` to your `.bashrc` or `.zshrc`\n\n## Building the function\n\nYou can build this individual function using `cargo wasi`.\n\n```shell\ncargo wasi build --release\n```\n\nThe Shopify CLI `build` command will also execute this, based on the configuration in `shopify.function.extension.toml`.\n\n## Testing\n\n> Requires Node v16+\n\n1. Create a temporary JSON file (e.g., `a.json`) in the following format:\n\n```json\n{\n    \"data\": {\n        \"foo\": \"bar\"\n    },\n    \"secretKey\": \"abc123\"\n}\n```\n\n2. Run the following command\n\n```\nyarn test:new-hmac < a.json\n```\n\n3. Copy the generated HMAC into the test file",
                "filename": "extensions/upsell-offer-discount-function/README.md",
                "start_index": 0,
                "end_index": 1329,
                "start_line": 1,
                "end_line": 44,
                "max_line": 44,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<body class=\"aftersell-preview\">\n        <a href=\"#main-header\" class=\"skip-to-content\"> Skip to content </a>\n\n        <header class=\"banner\" data-header=\"\" role=\"banner\">\n            <div class=\"wrap\">\n                <a class=\"logo logo--left\"><span class=\"logo__text heading-1\">Shop Name</span></a>\n\n                <h1 class=\"visually-hidden\">Thank you for your purchase!</h1>\n            </div>\n        </header>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 241387,
                "end_index": 241804,
                "start_line": 6077,
                "end_line": 6158,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"order-summary__section__content\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323949,
                "end_index": 323994,
                "start_line": 6297,
                "end_line": 6297,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"hidden\">\n                            <span class=\"visually-hidden\" id=\"forwarding-external-new-window-message\">\n                                Opens external website in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-new-window-message\">\n                                Opens in a new window.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"forwarding-external-message\">\n                                Opens external website.\n                            </span>\n\n                            <span class=\"visually-hidden\" id=\"checkout-context-step-one\">\n                                Customer information - Checkout\n                            </span>\n                        </div>\n                    </main>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 322226,
                "end_index": 323078,
                "start_line": 6265,
                "end_line": 6282,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"section__content\">\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Contact information</h3>\n\n                                                            <p class=\"as-dummy-line\"></p>\n\n                                                            <h3 class=\"heading-3\">Shipping address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n\n                                                            <h3 class=\"heading-3\">Shipping method</h3>\n                                                            <p class=\"as-dummy-line as-w40\"></p>\n                                                        </div>\n                                                    </div>\n\n                                                    <div\n                                                        class=\"section__content__column section__content__column--half\"\n                                                    >\n                                                        <div class=\"text-container\">\n                                                            <h3 class=\"heading-3\">Payment method</h3>\n                                                            <ul class=\"payment-method-list\">\n                                                                <li class=\"payment-method-list__item\">\n                                                                    <p class=\"as-dummy-line as-w80\"></p>\n                                                                </li>\n                                                            </ul>\n\n                                                            <h3 class=\"heading-3\">Billing address</h3>\n                                                            <address class=\"address\">\n                                                                <p class=\"as-dummy-line\"></p>\n                                                                <p class=\"as-dummy-line as-w80\"></p>\n                                                                <p class=\"as-dummy-line as-w40\"></p>\n                                                            </address>\n                                                        </div>\n                                                    </div>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 318877,
                "end_index": 321837,
                "start_line": 6191,
                "end_line": 6361,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<th class=\"product__description\" scope=\"row\">\n                                                        <span class=\"product__description__name order-summary__emphasis\"\n                                                            >Product Name</span\n                                                        >\n                                                        <span\n                                                            class=\"product__description__variant order-summary__small-text\"\n                                                            >Variant Name</span\n                                                        >\n                                                    </th>\n                                                    <td class=\"product__quantity visually-hidden\">1</td>\n                                                    <td class=\"product__price\">\n                                                        <span class=\"order-summary__emphasis\">$42.99</span>\n                                                    </td>\n                                                </tr>",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 331038,
                "end_index": 332129,
                "start_line": 6363,
                "end_line": 6376,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<tbody data-order-summary-section=\"line-items\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 325247,
                "end_index": 325294,
                "start_line": 6314,
                "end_line": 6314,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# [[[ --- CLIENT --- ]]]\nFROM node:18.16.1-alpine AS client\nARG SHOPIFY_API_KEY\nENV SHOPIFY_API_KEY=$SHOPIFY_API_KEY\nARG HOST\nENV HOST=$HOST\nARG NODE_ENV\nENV NODE_ENV=$NODE_ENV\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/client/package.json ./web/client/package.json\nCOPY web/client/yarn.lock ./web/client/yarn.lock\nRUN cd web/client && yarn install --frozen-lockfile --production=false\nCOPY extensions-web-common/package.json ./extensions-web-common/package.json\nCOPY extensions-web-common/yarn.lock ./extensions-web-common/yarn.lock\nRUN cd extensions-web-common && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY extensions/post-purchase ./extensions/post-purchase\nCOPY extensions-web-common/post-purchase ./extensions-web-common/post-purchase\nCOPY extensions-web-common/checkout ./extensions-web-common/checkout\nCOPY extensions-web-common/shared ./extensions-web-common/shared\nCOPY extensions-web-common/ty-page ./extensions-web-common/ty-page\nCOPY web/client ./web/client\nRUN cd web/client && yarn build\n\n# [[[ --- TY PAGE --- ]]]\nFROM node:18.16.1-alpine AS ty-page\nARG HOST\nENV HOST=$HOST\nWORKDIR /usr/src/app\nCOPY web/widgets/package.json ./web/widgets/package.json\nCOPY web/widgets/yarn.lock ./web/widgets/yarn.lock\nRUN cd web/widgets && yarn install --frozen-lockfile --production=false\nCOPY web/common ./web/common\nCOPY web/widgets ./web/widgets\nRUN cd web/widgets && yarn build\n\n# [[[ --- BACKEND --- ]]]\nFROM node:18.16.1-alpine AS backend\nWORKDIR /usr/src/app\nCOPY web/backend/package.json ./web/backend/package.json\nCOPY web/backend/yarn.lock ./web/backend/yarn.lock\nCOPY web/backend/patches ./web/backend/patches\nRUN cd web/backend && yarn install --frozen-lockfile --production=false\nCOPY web/backend ./web/backend\nCOPY web/common ./web/common\nRUN cd web/backend && yarn build\n\n# [[[ --- STAGE: FINAL/RUNTIME --- ]]]\nFROM node:18.16.1-alpine AS final\nWORKDIR /usr/src/app\nRUN echo -e \"name = \\\"AfterSell\\\"\" > shopify.app.toml\nCOPY web/backend/package.json ./web/backend/package.json\nCOPY web/backend/yarn.lock ./web/backend/yarn.lock\nCOPY web/backend/patches ./web/backend/patches\nRUN cd web/backend && yarn install --frozen-lockfile --production=true\nCOPY --from=backend /usr/src/app/web/backend/build ./web/backend/build\nCOPY --from=ty-page /usr/src/app/web/widgets/dist ./web/backend/build/backend/dist\nCOPY --from=client /usr/src/app/web/client/dist ./web/backend/build/backend/dist/client\nCOPY package.json ./package.json\nCMD [\"yarn\", \"start\"]",
                "filename": "Dockerfile",
                "start_index": 0,
                "end_index": 2540,
                "start_line": 1,
                "end_line": 61,
                "max_line": 61,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "# AfterSell\n\n### All Docs on Notion \ud83d\udc49 [AfterSell Notion Docs](https://www.notion.so/aftersell/AfterSell-Docs-9d43566167b5426d86b5983925872953?pvs=4)",
                "filename": "README.md",
                "start_index": 0,
                "end_index": 148,
                "start_line": 1,
                "end_line": 3,
                "max_line": 3,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"order-summary__sections\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323769,
                "end_index": 323806,
                "start_line": 6295,
                "end_line": 6295,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            },
            {
                "code": "<div class=\"order-summary__section order-summary__section--product-list\">",
                "filename": "web/widgets/src/components/thankyoupage/public/index.html",
                "start_index": 323839,
                "end_index": 323912,
                "start_line": 6296,
                "end_line": 6296,
                "max_line": 6518,
                "git_instance": "github",
                "repo_name": "testbed/aftersell",
                "sha": ""
            }
        ],
        "classification": "bug",
        "additional_documentation": {},
        "all_documentation_snippets": [],
        "snippet_processor_task": {
            "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts": [
                {
                    "chunk": {
                        "code": "try {\n            const settings = await SettingsService.getSettings({ shop: scheduledHoldRelease.shop });\n            if (!settings.releaseFulfillmentHoldsAsap) {\n                continue;\n            }\n            const { accessToken } = (await userModel.findOne({ myshopify_domain: scheduledHoldRelease.shop })) as any;\n            const shopifyService = new ShopifyService({ shop: scheduledHoldRelease.shop, accessToken });\n            const fulfillmentOrders = await shopifyService.getFulfillmentOrders({\n                orderId: scheduledHoldRelease.orderId!,\n            });\n            if (getOrderIsOnPostPurchaseFulfillmentHold({ fulfillmentOrders })) {\n                const fulfillmentOrdersOnHold = fulfillmentOrders.filter(\n                    (fo) => fo.status === FulfillmentOrderStatusRest.ON_HOLD\n                );\n                for (const fulfillmentOrder of fulfillmentOrdersOnHold) {\n                    await shopifyService.releaseFulfillmentOrderHold({ fulfillmentOrderId: fulfillmentOrder.id });\n                    console.log(\n                        `[${scheduledHoldRelease.shop}] Released fulfillment order hold. Order: ${scheduledHoldRelease.orderId}. Fulfillment order: ${fulfillmentOrder.id}.`\n                    );\n                }\n            } else {\n                console.log(\n                    `[${scheduledHoldRelease.shop}] Skipped releasing fulfillment hold because order is no longer on hold. Order: ${scheduledHoldRelease.orderId}.`\n                );\n            }\n        } catch (e) {\n            if (scheduledHoldRelease.previousAttemptsCount < 5) {\n                // If there is an error, we will insert the hold release back into the\n                // database for some loop instance (maybe this one, maybe a different one)\n                // to process it again.\n                const recreatedScheduledRelease: ScheduledHoldRelease = {\n                    shop: scheduledHoldRelease.shop,\n                    orderId: scheduledHoldRelease.orderId,\n                    releaseHoldAt: scheduledHoldRelease.releaseHoldAt,\n                    previousAttemptsCount: scheduledHoldRelease.previousAttemptsCount + 1,\n                };\n                await ScheduledHoldReleasesModel.create(recreatedScheduledRelease);\n                console.log(\n                    `[${scheduledHoldRelease.shop}] Retrying fulfillment hold release. Attempt: ${scheduledHoldRelease.previousAttemptsCount}. Order: ${scheduledHoldRelease.orderId}.`\n                );\n            } else {\n                // If we've tried 5 times before, and failed again on the 6th time, we will log the error and\n                // move on.\n                console.error(\n                    `[${scheduledHoldRelease.shop}] Failed to release fulfillment hold. Order: ${scheduledHoldRelease.orderId}. ${e}`\n                );\n            }\n        }\n    }",
                        "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                        "start_index": 6435,
                        "end_index": 9313,
                        "start_line": 133,
                        "end_line": 181,
                        "max_line": 194,
                        "git_instance": "github",
                        "repo_name": "testbed/aftersell",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the logic for releasing fulfillment holds and checks the setting 'releaseFulfillmentHoldsAsap' which is directly related to the issue."
                },
                {
                    "chunk": {
                        "code": "function getOrderIsOnPostPurchaseFulfillmentHold({\n    fulfillmentOrders,\n}: {\n    fulfillmentOrders: FulfillmentOrderRest[];\n}): boolean {\n    return fulfillmentOrders.some(\n        (fo) =>\n            fo.status === FulfillmentOrderStatusRest.ON_HOLD &&\n            fo.fulfillment_holds.some((fh) => fh.reason === 'online_store_post_purchase_cross_sell')\n    );\n}",
                        "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                        "start_index": 9317,
                        "end_index": 9681,
                        "start_line": 184,
                        "end_line": 194,
                        "max_line": 194,
                        "git_instance": "github",
                        "repo_name": "testbed/aftersell",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the function that checks if an order is on post-purchase fulfillment hold, which is relevant to the issue of holds not releasing on time."
                },
                {
                    "chunk": {
                        "code": "while (hasScheduledHoldRelease)",
                        "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                        "start_index": 5734,
                        "end_index": 5765,
                        "start_line": 121,
                        "end_line": 121,
                        "max_line": 194,
                        "git_instance": "github",
                        "repo_name": "testbed/aftersell",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet indicates the presence of a loop that processes scheduled hold releases, which could be relevant to the timing issue."
                },
                {
                    "chunk": {
                        "code": "async function releaseScheduledFulfillmentHolds()",
                        "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts",
                        "start_index": 5638,
                        "end_index": 5687,
                        "start_line": 119,
                        "end_line": 119,
                        "max_line": 194,
                        "git_instance": "github",
                        "repo_name": "testbed/aftersell",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet defines the function that releases scheduled fulfillment holds, which is relevant to the issue."
                }
            ],
            "web/client/src/pages/settings/settings-fulfillment-and-payment.page.tsx": [
                {
                    "chunk": {
                        "code": "<Checkbox\n                                    label=\"Release fulfillment holds from 1-click offers when offer timer ends\"\n                                    helpText='If the customer closes their browser tab while on the post-purchase page, the order will stay \"On Hold\" for 60 minutes by default. This setting reduces the delay to be equal to the upsell offer timer duration (e.g. 10 minutes).'\n                                    checked={fields.releaseFulfillmentHoldsAsap.value}\n                                    onChange={fields.releaseFulfillmentHoldsAsap.onChange}\n                                    disabled={!hasAllRequiredScopes}\n                                />\n                            </VerticalStack>\n                        </VerticalStack>\n                    </Card>\n                </AnnotatedLayout>\n                <AnnotatedLayout title=\"Partially paid\">\n                    <Card>\n                        <VerticalStack gap=\"3\">\n                            <VerticalStack gap=\"2\">\n                                <Checkbox\n                                    label={\n                                        tyPageOrderMergingEnabled\n                                            ? 'Automatically remove unpaid upsell products (from 1-click and TY page) from orders'\n                                            : 'Automatically remove unpaid 1-click upsell products from orders'\n                                    }\n                                    checked={fields.removePartiallyPaidItems.value}\n                                    onChange={fields.removePartiallyPaidItems.onChange}\n                                />\n                                {fields.removePartiallyPaidItems.value && (\n                                    <Box paddingInlineStart=\"6\">",
                        "filename": "web/client/src/pages/settings/settings-fulfillment-and-payment.page.tsx",
                        "start_index": 2848,
                        "end_index": 4640,
                        "start_line": 68,
                        "end_line": 93,
                        "max_line": 141,
                        "git_instance": "github",
                        "repo_name": "testbed/aftersell",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is from the settings page where the 'releaseFulfillmentHoldsAsap' setting is toggled, which is relevant to understand how the setting is being set by the user."
                }
            ],
            "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.controller.ts": [
                {
                    "chunk": {
                        "code": "import { RequestHandler } from 'express';\nimport { releaseScheduledFulfillmentHolds } from './fulfillment-hold-release';\n\nexport const releaseAllScheduledFulfillmentHoldsJob: RequestHandler = async (req, res, next) => {\n    await releaseScheduledFulfillmentHolds();\n    res.status(200).send();\n};",
                        "filename": "web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.controller.ts",
                        "start_index": 0,
                        "end_index": 296,
                        "start_line": 1,
                        "end_line": 7,
                        "max_line": 7,
                        "git_instance": "github",
                        "repo_name": "testbed/aftersell",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet shows the controller that triggers the release of all scheduled fulfillment holds, which could be part of the issue if it's not being called correctly."
                }
            ]
        },
        "solution_task": "- Verify that the `SettingsService.getSettings` method correctly retrieves and applies the `releaseFulfillmentHoldsAsap` setting for the specific store `myvillagegreen.myshopify.com`. Ensure that the setting is being saved and retrieved correctly from the database.\n- Check if there is a caching issue that might be causing outdated settings to be used when the `releaseFulfillmentHoldsAsap` setting is checked.\n- Confirm that the `userModel.findOne` method correctly retrieves the `accessToken` for the store `myvillagegreen.myshopify.com`. An invalid or expired `accessToken` could prevent the backend from communicating with Shopify to release the holds.\n- Review the `getOrderIsOnPostPurchaseFulfillmentHold` function to ensure it correctly identifies orders that are on post-purchase fulfillment hold. There might be a logic error that incorrectly filters orders, causing the system not to release holds even when it should.\n- Inspect the `shopifyService.releaseFulfillmentOrderHold` method to verify that it properly calls the Shopify API to release the hold on fulfillment orders. Ensure that the method handles any potential errors or exceptions that could occur during the API call.\n- Check the error handling in the `catch` block to ensure that it correctly logs and retries the release of fulfillment holds. There might be silent failures that are not being retried or logged, leading to holds not being released.\n- Ensure that the retry logic with `previousAttemptsCount` is functioning as expected and that it does not exceed the maximum number of attempts.\n- If the issue persists after checking the above points, consider adding additional logging to trace the flow of data and identify where the process is breaking down.\n- Once the root cause is identified and fixed, perform thorough testing to ensure that the issue is resolved and that the release of fulfillment holds behaves as expected when the setting is enabled.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a comprehensive list of actionable steps to investigate the issue of fulfillment holds not releasing on time. It addresses the specific store mentioned in the PROMPT and suggests verifying the correct retrieval and application of settings, checking for caching issues, confirming the retrieval of the accessToken, reviewing the logic for identifying orders on hold, inspecting the method that calls the Shopify API, and ensuring proper error handling and retry logic. Additionally, the RESPONSE includes a suggestion to add more logging if the issue persists, which is a valuable step in debugging. The inclusion of specific code snippets to check is highly relevant and provides a clear direction for where to look in the codebase to address the problem. The RESPONSE is well-tailored to the PROMPT and covers nearly all aspects of the described bug.",
            "clarification_questions": "NONE"
        },
        "end_time": 1712381603.563195,
        "result": "- Verify that the `SettingsService.getSettings` method correctly retrieves and applies the `releaseFulfillmentHoldsAsap` setting for the specific store `myvillagegreen.myshopify.com`. Ensure that the setting is being saved and retrieved correctly from the database.\n- Check if there is a caching issue that might be causing outdated settings to be used when the `releaseFulfillmentHoldsAsap` setting is checked.\n- Confirm that the `userModel.findOne` method correctly retrieves the `accessToken` for the store `myvillagegreen.myshopify.com`. An invalid or expired `accessToken` could prevent the backend from communicating with Shopify to release the holds.\n- Review the `getOrderIsOnPostPurchaseFulfillmentHold` function to ensure it correctly identifies orders that are on post-purchase fulfillment hold. There might be a logic error that incorrectly filters orders, causing the system not to release holds even when it should.\n- Inspect the `shopifyService.releaseFulfillmentOrderHold` method to verify that it properly calls the Shopify API to release the hold on fulfillment orders. Ensure that the method handles any potential errors or exceptions that could occur during the API call.\n- Check the error handling in the `catch` block to ensure that it correctly logs and retries the release of fulfillment holds. There might be silent failures that are not being retried or logged, leading to holds not being released.\n- Ensure that the retry logic with `previousAttemptsCount` is functioning as expected and that it does not exceed the maximum number of attempts.\n- If the issue persists after checking the above points, consider adding additional logging to trace the flow of data and identify where the process is breaking down.\n- Once the root cause is identified and fixed, perform thorough testing to ensure that the issue is resolved and that the release of fulfillment holds behaves as expected when the setting is enabled.\n\n### Code snippets to check\n\n-  \u2192 [web](https://github.com/testbed/aftersell/tree//web) \u2192 [backend](https://github.com/testbed/aftersell/tree//web/backend) \u2192 [src](https://github.com/testbed/aftersell/tree//web/backend/src) \u2192 [modules](https://github.com/testbed/aftersell/tree//web/backend/src/modules) \u2192 [fulfillment-hold-release](https://github.com/testbed/aftersell/tree//web/backend/src/modules/fulfillment-hold-release)- [Lines 133 - 181](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts#L133-L181)\n\n This snippet contains the logic for releasing fulfillment holds and checks the setting 'releaseFulfillmentHoldsAsap' which is directly related to the issue. \n\n\n   - [Lines 184 - 194](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts#L184-L194)\n\n This snippet contains the function that checks if an order is on post-purchase fulfillment hold, which is relevant to the issue of holds not releasing on time. \n\n\n   - [Lines 121 - 121](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts#L121-L121)\n\n This snippet indicates the presence of a loop that processes scheduled hold releases, which could be relevant to the timing issue. \n\n\n   - [Lines 119 - 119](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.ts#L119-L119)\n\n This snippet defines the function that releases scheduled fulfillment holds, which is relevant to the issue.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree//web) \u2192 [client](https://github.com/testbed/aftersell/tree//web/client) \u2192 [src](https://github.com/testbed/aftersell/tree//web/client/src) \u2192 [pages](https://github.com/testbed/aftersell/tree//web/client/src/pages) \u2192 [settings](https://github.com/testbed/aftersell/tree//web/client/src/pages/settings)- [Lines 68 - 93](https://github.com/testbed/aftersell/blob//web/client/src/pages/settings/settings-fulfillment-and-payment.page.tsx#L68-L93)\n\n This snippet is from the settings page where the 'releaseFulfillmentHoldsAsap' setting is toggled, which is relevant to understand how the setting is being set by the user.\n-  \u2192 [web](https://github.com/testbed/aftersell/tree//web) \u2192 [backend](https://github.com/testbed/aftersell/tree//web/backend) \u2192 [src](https://github.com/testbed/aftersell/tree//web/backend/src) \u2192 [modules](https://github.com/testbed/aftersell/tree//web/backend/src/modules) \u2192 [fulfillment-hold-release](https://github.com/testbed/aftersell/tree//web/backend/src/modules/fulfillment-hold-release)- [Lines 1 - 7](https://github.com/testbed/aftersell/blob//web/backend/src/modules/fulfillment-hold-release/fulfillment-hold-release.controller.ts#L1-L7)\n\n This snippet shows the controller that triggers the release of all scheduled fulfillment holds, which could be part of the issue if it's not being called correctly."
    }
}