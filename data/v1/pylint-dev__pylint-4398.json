{
    "id": "pylint-dev__pylint-4398",
    "repo_name": "testbed/pylint-dev__pylint__2.8",
    "task_id": 1709030921078227529,
    "title": "Add --fail-on option to always return error code if specific issues (or issue types) are found",
    "body": "We're using pylint in CI with two primary goals:\r\n\r\n1. Ensure there are no error-category issues - this can be achieved by looking at the exit code\r\n2. Ensure the overall linting score doesn't deteriorate too much - this can be achieved by using `--fail-under=8`\r\n\r\nHowever if `--fail-under` is used, and the score is above that, then it passes even if there are error-category issues detected. Essentially it's acting as a \"only throw fail (non-zero) codes if under this\", instead of a \"fail if under this, otherwise change nothing\".\r\n\r\nTwo possible solutions I can think of here are:\r\n\r\n1. Have a configuration option to prevent `--fail-under` from consuming other exit statuses. I.e. a way to say \"if score is under N, return error code X, regardless of all else, otherwise change nothing\".\r\n2. Add a new option like `--fail-on=E,unused-import` which means that if there are any `E*` code (error-category) issues, or any `unused-error` issues, then fail, otherwise change nothing.\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pylint-dev__pylint__2.8.git",
    "requested_commit": "",
    "mayil_response": "To implement the feature described in the ticket, you would need to modify the pylint codebase to add the new command-line options and the logic to handle them. Here's a high-level overview of the steps to implement the feature:\n\n- Add new command-line options to `pylint/lint/base_options.py`:\n  - `--fail-on` option to specify the error codes or issue types that should cause pylint to fail.\n  - Modify the `--fail-under` option to include a flag that prevents it from overriding other exit statuses.\n\n- Update the `pylint/lint/pylinter.py` to handle the new options:\n  - For `--fail-on`, add logic to check if any of the specified error codes or issue types are present in the final report. If so, set the exit code to a non-zero value.\n  - For `--fail-under`, ensure that if the score is under the specified threshold, the exit code is set to a non-zero value, but do not override other exit statuses.\n\nHere is a pseudo-code example of how you might implement the `--fail-on` option:\n\n```python\n# pylint/lint/base_options.py\n# Add new command-line option\n{\n    \"fail-on\",\n    {\n        \"type\": \"csv\",\n        \"metavar\": \"<error_code[,error_code]>\",\n        \"default\": [],\n        \"help\": \"Comma-separated list of error codes or issue types that will cause pylint to return a non-zero exit code if found.\",\n    },\n}\n\n# pylint/lint/pylinter.py\n# Modify the _run_checkers method to handle the new option\ndef _run_checkers(self):\n    # ... existing code ...\n    \n    # New logic for --fail-on\n    fail_on_issues = self.config.fail_on\n    if fail_on_issues:\n        for message in self.reporter.messages:\n            if message.msg_id in fail_on_issues or message.symbol in fail_on_issues:\n                self.set_exit_code(1)\n                break\n    \n    # ... existing code ...\n```\n\nFor the `--fail-under` option, you would need to modify the existing logic that sets the exit code based on the score to ensure it doesn't override other exit statuses if the score is above the threshold.\n\nRemember to update the documentation and help messages to reflect the new options and their usage. Additionally, you should write unit tests to cover the new functionality to ensure it works as expected and does not introduce regressions.\n\nThis is a high-level overview, and the actual implementation may require more in-depth changes depending on the existing pylint codebase structure and how the current options and exit codes are handled.\n\n### Code snippets to check\n\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.8/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__2.8/tree//pylint/lint)- [Lines 3 - 595](https://github.com/testbed/pylint-dev__pylint__2.8/blob//pylint/lint/base_options.py#L3-L595)\n\n This snippet contains the current implementation of the 'exit-zero' option, which is related to the issue as it deals with exit codes. It may need to be modified or used as a reference for implementing the new '--fail-on' option.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.8/tree//pylint) \u2192 [checkers](https://github.com/testbed/pylint-dev__pylint__2.8/tree//pylint/checkers)- [Lines 47 - 840](https://github.com/testbed/pylint-dev__pylint__2.8/blob//pylint/checkers/imports.py#L47-L840)\n\n This snippet lists the error codes and their descriptions, which are relevant to the issue since the new '--fail-on' option should allow users to specify certain error codes to trigger a failure.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.000265,
        "snippet_processor": 0.054180000000000006,
        "issue_star_creation": 0.03181,
        "issue_star_solver": 0.0598,
        "bouncer": 0.02572
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711700634.06287,
        "relevant_snippets": [
            {
                "code": "name: \u2728 Feature request\ndescription: Suggest an idea for pylint\nlabels: [\"Needs triage :inbox_tray:\"]\nbody:\n  - type: markdown\n    attributes:\n      value: |\n        **Thank you for wanting to make a suggestion for pylint!**\n\n        \u26a0 Please make sure that [this feature wasn't already requested][issue search] or already implemented in the main branch.\n\n\n        [issue search]: https://github.com/pylint-dev/pylint/issues?q=is%3Aissue+is%3Aopen+\n\n  - type: textarea\n    id: current-problem\n    attributes:\n      label: Current problem\n      description:\n        What are you trying to do, that you are unable to achieve with pylint as it\n        currently stands?\n      placeholder: >-\n        I'm trying to do X and I'm missing feature Y for this to be easily achievable.\n    validations:\n      required: true\n  - type: textarea\n    id: proposed-solution\n    attributes:\n      label: Desired solution\n      description: A clear and concise description of what you want to happen.\n      placeholder: >-\n        When I do X, I want to achieve Y in a situation when Z.\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: Additional context\n      description: >\n        Add any other context, links, etc. about the feature here. Describe how the\n        feature would be used, why it is needed and what it would solve.\n\n        **HINT:** You can paste https://gist.github.com links for larger files.\n      placeholder: >-\n        I asked on https://stackoverflow.com/... and the community advised me to do X, Y\n        and Z.",
                "filename": ".github/ISSUE_TEMPLATE/FEATURE-REQUEST.yml",
                "start_index": 0,
                "end_index": 1559,
                "start_line": 1,
                "end_line": 45,
                "max_line": 45,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.8",
                "sha": ""
            },
            {
                "code": "{\n    \"E0401\": (\n        \"Unable to import %s\",\n        \"import-error\",\n        \"Used when pylint has been unable to import a module.\",\n        {\"old_names\": [(\"F0401\", \"old-import-error\")]},\n    ),\n    \"E0402\": (\n        \"Attempted relative import beyond top-level package\",\n        \"relative-beyond-top-level\",\n        \"Used when a relative import tries to access too many levels \"\n        \"in the current package.\",\n    ),\n    \"R0401\": (\n        \"Cyclic import (%s)\",\n        \"cyclic-import\",\n        \"Used when a cyclic import between two or more modules is detected.\",\n    ),\n    \"R0402\": (\n        \"Use 'from %s import %s' instead\",\n        \"consider-using-from-import\",\n        \"Emitted when a submodule of a package is imported and \"\n        \"aliased with the same name, \"\n        \"e.g., instead of ``import concurrent.futures as futures`` use \"\n        \"``from concurrent import futures``.\",\n    ),\n    \"W0401\": (\n        \"Wildcard import %s\",\n        \"wildcard-import\",\n        \"Used when `from module import *` is detected.\",\n    ),\n    \"W0404\": (\n        \"Reimport %r (imported line %s)\",\n        \"reimported\",\n        \"Used when a module is imported more than once.\",\n    ),\n    \"W0406\": (\n        \"Module import itself\",\n        \"import-self\",\n        \"Used when a module is importing itself.\",\n    ),\n    \"W0407\": (\n        \"Prefer importing %r instead of %r\",\n        \"preferred-module\",\n        \"Used when a module imported has a preferred replacement module.\",\n    ),\n    \"W0410\": (\n        \"__future__ import is not the first non docstring statement\",\n        \"misplaced-future\",\n        \"Python 2.5 and greater require __future__ import to be the \"\n        \"first non docstring statement in the module.\",\n    ),\n    \"C0410\": (\n        \"Multiple imports on one line (%s)\",\n        \"multiple-imports\",\n        \"Used when import statement importing multiple modules is detected.\",\n    ),\n    \"C0411\": (\n        \"%s should be placed before %s\",\n        \"wrong-import-order\",\n        \"Used when PEP8 import order is not respected (standard imports \"\n        \"first, then third-party libraries, then local imports).\",\n    ),\n    \"C0412\": (\n        \"Imports from package %s are not grouped\",\n        \"ungrouped-imports\",\n        \"Used when imports are not grouped by packages.\",\n    ),\n    \"C0413\": (\n        'Import \"%s\" should be placed at the top of the module',\n        \"wrong-import-position\",\n        \"Used when code and imports are mixed.\",\n    ),\n    \"C0414\": (\n        \"Import alias does not rename original package\",\n        \"useless-import-alias\",\n        \"Used when an import alias is same as original package, \"\n        \"e.g., using import numpy as numpy instead of import numpy as np.\",\n    ),\n    \"C0415\": (\n        \"Import outside toplevel (%s)\",\n        \"import-outside-toplevel\",\n        \"Used when an import statement is used anywhere other than the module \"\n        \"toplevel. Move this import to the top of the file.\",\n    ),",
                "filename": "pylint/checkers/imports.py",
                "start_index": 7547,
                "end_index": 10506,
                "start_line": 47,
                "end_line": 840,
                "max_line": 1102,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.8",
                "sha": ""
            },
            {
                "code": "name: \ud83e\udd14 Support question\ndescription: Questions about pylint that are not covered in the documentation\nlabels: [\"Needs triage :inbox_tray:\", \"Question\", \"Documentation :green_book:\"]\nbody:\n  - type: markdown\n    attributes:\n      value: >\n        **Thank you for wanting to report a problem with pylint documentation!**\n\n\n        Please fill out your suggestions below. If the problem seems straightforward,\n        feel free to go ahead and submit a pull request instead!\n\n\n        \u26a0 Verify first that your issue is not [already reported on GitHub][issue\n        search].\n\n        \ud83d\udcac If you are seeking community support, please consider [starting a discussion\n        on Discord][Discussions].\n\n\n        [issue search]:\n        https://github.com/pylint-dev/pylint/issues?q=is%3Aissue+is%3Aopen+\n\n        [Discussions]: https://discord.com/invite/Egy6P8AMB5\n\n  - type: textarea\n    id: question\n    attributes:\n      label: Question\n    validations:\n      required: true\n  - type: textarea\n    id: documentation\n    attributes:\n      label: Documentation for future user\n      description:\n        Where did you expect this information to be? What do we need to add or what do\n        we need to reorganize?\n    validations:\n      required: true\n  - type: textarea\n    attributes:\n      label: Additional context\n      description: >\n        Add any other context, links, etc. about the question here.\n      placeholder: >-\n        I asked on https://stackoverflow.com/... and the community advised me to do X, Y\n        and Z.",
                "filename": ".github/ISSUE_TEMPLATE/QUESTION.yml",
                "start_index": 0,
                "end_index": 1528,
                "start_line": 1,
                "end_line": 49,
                "max_line": 49,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.8",
                "sha": ""
            },
            {
                "code": "(\n            \"unsafe-load-any-extension\",\n            {\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"default\": False,\n                \"hide\": True,\n                \"help\": (\n                    \"Allow loading of arbitrary C extensions. Extensions\"\n                    \" are imported into the active Python interpreter and\"\n                    \" may run arbitrary code.\"\n                ),\n            },\n        ),\n        (\n            \"limit-inference-results\",\n            {\n                \"type\": \"int\",\n                \"metavar\": \"<number-of-results>\",\n                \"default\": 100,\n                \"help\": (\n                    \"Control the amount of potential inferred values when inferring \"\n                    \"a single object. This can help the performance when dealing with \"\n                    \"large functions or complex, nested conditions.\"\n                ),\n            },\n        ),\n        (\n            \"extension-pkg-allow-list\",\n            {\n                \"type\": \"csv\",\n                \"metavar\": \"<pkg[,pkg]>\",\n                \"default\": [],\n                \"help\": (\n                    \"A comma-separated list of package or module names\"\n                    \" from where C extensions may be loaded. Extensions are\"\n                    \" loading into the active Python interpreter and may run\"\n                    \" arbitrary code.\"\n                ),\n            },\n        ),\n        (\n            \"extension-pkg-whitelist\",\n            {\n                \"type\": \"csv\",\n                \"metavar\": \"<pkg[,pkg]>\",\n                \"default\": [],\n                \"help\": (\n                    \"A comma-separated list of package or module names\"\n                    \" from where C extensions may be loaded. Extensions are\"\n                    \" loading into the active Python interpreter and may run\"\n                    \" arbitrary code. (This is an alternative name to\"\n                    \" extension-pkg-allow-list for backward compatibility.)\"\n                ),\n            },\n        ),\n        (\n            \"suggestion-mode\",\n            {\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"default\": True,\n                \"help\": (\n                    \"When enabled, pylint would attempt to guess common \"\n                    \"misconfiguration and emit user-friendly hints instead \"\n                    \"of false-positive error messages.\"\n                ),\n            },\n        ),\n        (\n            \"exit-zero\",\n            {\n                \"action\": \"store_true\",\n                \"default\": False,\n                \"metavar\": \"<flag>\",\n                \"help\": (\n                    \"Always return a 0 (non-error) status code, even if \"\n                    \"lint errors are found. This is primarily useful in \"\n                    \"continuous integration scripts.\"\n                ),\n            },\n        ),",
                "filename": "pylint/lint/base_options.py",
                "start_index": 9512,
                "end_index": 12444,
                "start_line": 3,
                "end_line": 595,
                "max_line": 596,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.8",
                "sha": ""
            },
            {
                "code": "(\n        (\n            \"ignore-on-opaque-inference\",\n            {\n                \"default\": True,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"This flag controls whether pylint should warn about \"\n                \"no-member and similar checks whenever an opaque object \"\n                \"is returned when inferring. The inference can return \"\n                \"multiple potential results while evaluating a Python object, \"\n                \"but some branches might not be evaluated, which results in \"\n                \"partial inference. In that case, it might be useful to still emit \"\n                \"no-member and other checks for the rest of the inferred objects.\",\n            },\n        ),\n        (\n            \"mixin-class-rgx\",\n            {\n                \"default\": \".*[Mm]ixin\",\n                \"type\": \"regexp\",\n                \"metavar\": \"<regexp>\",\n                \"help\": \"Regex pattern to define which classes are considered mixins.\",\n            },\n        ),\n        (\n            \"ignore-mixin-members\",\n            {\n                \"default\": True,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Tells whether missing members accessed in mixin \"\n                \"class should be ignored. A class is considered mixin if its name matches \"\n                \"the mixin-class-rgx option.\",\n                \"kwargs\": {\"new_names\": [\"ignore-checks-for-mixin\"]},\n            },\n        ),\n        (\n            \"ignored-checks-for-mixins\",\n            {\n                \"default\": [\n                    \"no-member\",\n                    \"not-async-context-manager\",\n                    \"not-context-manager\",\n                    \"attribute-defined-outside-init\",\n                ],\n                \"type\": \"csv\",\n                \"metavar\": \"<list of messages names>\",\n                \"help\": \"List of symbolic message names to ignore for Mixin members.\",\n            },\n        ),\n        (\n            \"ignore-none\",\n            {\n                \"default\": True,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Tells whether to warn about missing members when the owner \"\n                \"of the attribute is inferred to be None.\",\n            },\n        ),\n        # the defaults here are *stdlib* names that (almost) always\n        # lead to false positives, since their idiomatic use is\n        # 'too dynamic' for pylint to grok.",
                "filename": "pylint/checkers/typecheck.py",
                "start_index": 29796,
                "end_index": 32290,
                "start_line": 3,
                "end_line": 902,
                "max_line": 2314,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.8",
                "sha": ""
            },
            {
                "code": "\"R1716\": (\n            \"Simplify chained comparison between the operands\",\n            \"chained-comparison\",\n            \"This message is emitted when pylint encounters boolean operation like \"\n            '\"a < b and b < c\", suggesting instead to refactor it to \"a < b < c\"',\n        ),\n        \"R1717\": (\n            \"Consider using a dictionary comprehension\",\n            \"consider-using-dict-comprehension\",\n            \"Emitted when we detect the creation of a dictionary \"\n            \"using the dict() callable and a transient list. \"\n            \"Although there is nothing syntactically wrong with this code, \"\n            \"it is hard to read and can be simplified to a dict comprehension. \"\n            \"Also it is faster since you don't need to create another \"\n            \"transient list\",\n        ),\n        \"R1718\": (\n            \"Consider using a set comprehension\",\n            \"consider-using-set-comprehension\",\n            \"Although there is nothing syntactically wrong with this code, \"\n            \"it is hard to read and can be simplified to a set comprehension. \"\n            \"Also it is faster since you don't need to create another \"\n            \"transient list\",\n        ),\n        \"R1719\": (\n            \"The if expression can be replaced with %s\",\n            \"simplifiable-if-expression\",\n            \"Used when an if expression can be replaced with 'bool(test)' \"\n            \"or simply 'test' if the boolean cast is implicit.\",\n        ),\n        \"R1720\": (\n            'Unnecessary \"%s\" after \"raise\", %s',\n            \"no-else-raise\",\n            \"Used in order to highlight an unnecessary block of \"\n            \"code following an if containing a raise statement. \"\n            \"As such, it will warn when it encounters an else \"\n            \"following a chain of ifs, all of them containing a \"\n            \"raise statement.\",\n        ),\n        \"R1721\": (\n            \"Unnecessary use of a comprehension, use %s instead.\",\n            \"unnecessary-comprehension\",\n            \"Instead of using an identity comprehension, \"\n            \"consider using the list, dict or set constructor. \"\n            \"It is faster and simpler.\",\n        ),\n        \"R1722\": (\n            \"Consider using 'sys.exit' instead\",\n            \"consider-using-sys-exit\",\n            \"Contrary to 'exit()' or 'quit()', 'sys.exit' does not rely on the \"\n            \"site module being available (as the 'sys' module is always available).\",\n        ),\n        \"R1723\": (\n            'Unnecessary \"%s\" after \"break\", %s',\n            \"no-else-break\",\n            \"Used in order to highlight an unnecessary block of \"\n            \"code following an if containing a break statement. \"\n            \"As such, it will warn when it encounters an else \"\n            \"following a chain of ifs, all of them containing a \"\n            \"break statement.\",\n        ),",
                "filename": "pylint/checkers/refactoring/refactoring_checker.py",
                "start_index": 13759,
                "end_index": 16623,
                "start_line": 355,
                "end_line": 2175,
                "max_line": 2368,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.8",
                "sha": ""
            },
            {
                "code": "\"I0022\": (\n        'Pragma \"%s\" is deprecated, use \"%s\" instead',\n        \"deprecated-pragma\",\n        \"Some inline pylint options have been renamed or reworked, \"\n        \"only the most recent form should be used. \"\n        \"NOTE:skip-all is only available with pylint >= 0.26\",\n        {\n            \"old_names\": [(\"I0014\", \"deprecated-disable-all\")],\n            \"scope\": WarningScope.LINE,\n            \"default_enabled\": False,\n        },\n    ),\n    \"E0001\": (\n        \"%s\",\n        \"syntax-error\",\n        \"Used when a syntax error is raised for a module.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0011\": (\n        \"Unrecognized file option %r\",\n        \"unrecognized-inline-option\",\n        \"Used when an unknown inline option is encountered.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"W0012\": (\n        \"Unknown option value for '%s', expected a valid pylint message and got '%s'\",\n        \"unknown-option-value\",\n        \"Used when an unknown value is encountered for an option.\",\n        {\n            \"scope\": WarningScope.LINE,\n            \"old_names\": [(\"E0012\", \"bad-option-value\")],\n        },\n    ),\n    \"R0022\": (\n        \"Useless option value for '%s', %s\",\n        \"useless-option-value\",\n        \"Used when a value for an option that is now deleted from pylint\"\n        \" is encountered.\",\n        {\n            \"scope\": WarningScope.LINE,\n            \"old_names\": [(\"E0012\", \"bad-option-value\")],\n        },\n    ),\n    \"E0013\": (\n        \"Plugin '%s' is impossible to load, is it installed ? ('%s')\",\n        \"bad-plugin-value\",\n        \"Used when a bad value is used in 'load-plugins'.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0014\": (\n        \"Out-of-place setting encountered in top level configuration-section '%s' : '%s'\",\n        \"bad-configuration-section\",\n        \"Used when we detect a setting in the top level of a toml configuration that\"\n        \" shouldn't be there.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n    \"E0015\": (\n        \"Unrecognized option found: %s\",\n        \"unrecognized-option\",\n        \"Used when we detect an option that we do not recognize.\",\n        {\"scope\": WarningScope.LINE},\n    ),\n}",
                "filename": "pylint/lint/pylinter.py",
                "start_index": 6020,
                "end_index": 8200,
                "start_line": 190,
                "end_line": 1141,
                "max_line": 1310,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.8",
                "sha": ""
            },
            {
                "code": "\"https://github.com/pylint-dev/pylint/pull/4942\":",
                "filename": "pylint/message/_deleted_message_ids.py",
                "start_index": 576,
                "end_index": 625,
                "start_line": 21,
                "end_line": 21,
                "max_line": 179,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.8",
                "sha": ""
            },
            {
                "code": "options = (\n        (\n            \"init-import\",\n            {\n                \"default\": False,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Tells whether we should check for unused import in \"\n                \"__init__ files.\",\n            },\n        ),\n        (\n            \"dummy-variables-rgx\",\n            {\n                \"default\": \"_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_\",\n                \"type\": \"regexp\",\n                \"metavar\": \"<regexp>\",\n                \"help\": \"A regular expression matching the name of dummy \"\n                \"variables (i.e. expected to not be used).\",\n            },\n        ),\n        (\n            \"additional-builtins\",\n            {\n                \"default\": (),\n                \"type\": \"csv\",\n                \"metavar\": \"<comma separated list>\",\n                \"help\": \"List of additional names supposed to be defined in \"\n                \"builtins. Remember that you should avoid defining new builtins \"\n                \"when possible.\",\n            },\n        ),\n        (\n            \"callbacks\",\n            {\n                \"default\": (\"cb_\", \"_cb\"),\n                \"type\": \"csv\",\n                \"metavar\": \"<callbacks>\",\n                \"help\": \"List of strings which can identify a callback \"\n                \"function by name. A callback name must start or \"\n                \"end with one of those strings.\",\n            },\n        ),\n        (\n            \"redefining-builtins-modules\",\n            {\n                \"default\": (\n                    \"six.moves\",\n                    \"past.builtins\",\n                    \"future.builtins\",\n                    \"builtins\",\n                    \"io\",\n                ),\n                \"type\": \"csv\",\n                \"metavar\": \"<comma separated list>\",\n                \"help\": \"List of qualified module names which can have objects \"\n                \"that can redefine builtins.\",\n            },\n        ),\n        (\n            \"ignored-argument-names\",\n            {\n                \"default\": IGNORED_ARGUMENT_NAMES,\n                \"type\": \"regexp\",\n                \"metavar\": \"<regexp>\",\n                \"help\": \"Argument names that match this expression will be ignored.\",\n            },\n        ),\n        (\n            \"allow-global-unused-variables\",\n            {\n                \"default\": True,\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"help\": \"Tells whether unused global variables should be treated as a violation.\",\n            },\n        ),\n        (\n            \"allowed-redefined-builtins\",\n            {\n                \"default\": (),\n                \"type\": \"csv\",\n                \"metavar\": \"<comma separated list>\",\n                \"help\": \"List of names allowed to shadow builtins\",\n            },\n        ),\n    )",
                "filename": "pylint/checkers/variables.py",
                "start_index": 45198,
                "end_index": 48056,
                "start_line": 1197,
                "end_line": 3311,
                "max_line": 3326,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.8",
                "sha": ""
            },
            {
                "code": "{\n    \"F0202\": (\n        \"Unable to check methods signature (%s / %s)\",\n        \"method-check-failed\",\n        \"Used when Pylint has been unable to check methods signature \"\n        \"compatibility for an unexpected reason. Please report this kind \"\n        \"if you don't make sense of it.\",\n    ),\n    \"E0202\": (\n        \"An attribute defined in %s line %s hides this method\",\n        \"method-hidden\",\n        \"Used when a class defines a method which is hidden by an \"\n        \"instance attribute from an ancestor class or set by some \"\n        \"client code.\",\n    ),\n    \"E0203\": (\n        \"Access to member %r before its definition line %s\",\n        \"access-member-before-definition\",\n        \"Used when an instance member is accessed before it's actually assigned.\",\n    ),\n    \"W0201\": (\n        \"Attribute %r defined outside __init__\",\n        \"attribute-defined-outside-init\",\n        \"Used when an instance attribute is defined outside the __init__ method.\",\n    ),\n    \"W0212\": (\n        \"Access to a protected member %s of a client class\",  # E0214\n        \"protected-access\",\n        \"Used when a protected member (i.e. class member with a name \"\n        \"beginning with an underscore) is access outside the class or a \"\n        \"descendant of the class where it's defined.\",\n    ),\n    \"W0213\": (\n        \"Flag member %(overlap)s shares bit positions with %(sources)s\",\n        \"implicit-flag-alias\",\n        \"Used when multiple integer values declared within an enum.IntFlag \"\n        \"class share a common bit position.\",\n    ),\n    \"E0211\": (\n        \"Method %r has no argument\",\n        \"no-method-argument\",\n        \"Used when a method which should have the bound instance as \"\n        \"first argument has no argument defined.\",\n    ),\n    \"E0213\": (\n        'Method %r should have \"self\" as first argument',\n        \"no-self-argument\",\n        'Used when a method has an attribute different the \"self\" as '\n        \"first argument. This is considered as an error since this is \"\n        \"a so common convention that you shouldn't break it!\",\n    ),\n    \"C0202\": (\n        \"Class method %s should have %s as first argument\",\n        \"bad-classmethod-argument\",\n        \"Used when a class method has a first argument named differently \"\n        \"than the value specified in valid-classmethod-first-arg option \"\n        '(default to \"cls\"), recommended to easily differentiate them '\n        \"from regular instance methods.\",\n    ),\n    \"C0203\": (\n        \"Metaclass method %s should have %s as first argument\",\n        \"bad-mcs-method-argument\",\n        \"Used when a metaclass method has a first argument named \"\n        \"differently than the value specified in valid-classmethod-first\"\n        '-arg option (default to \"cls\"), recommended to easily '\n        \"differentiate them from regular instance methods.\",\n    ),",
                "filename": "pylint/checkers/classes/class_checker.py",
                "start_index": 16707,
                "end_index": 19542,
                "start_line": 51,
                "end_line": 947,
                "max_line": 2356,
                "git_instance": "github",
                "repo_name": "testbed/pylint-dev__pylint__2.8",
                "sha": ""
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {
            "pylint/lint/base_options.py": [
                {
                    "chunk": {
                        "code": "(\n            \"unsafe-load-any-extension\",\n            {\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"default\": False,\n                \"hide\": True,\n                \"help\": (\n                    \"Allow loading of arbitrary C extensions. Extensions\"\n                    \" are imported into the active Python interpreter and\"\n                    \" may run arbitrary code.\"\n                ),\n            },\n        ),\n        (\n            \"limit-inference-results\",\n            {\n                \"type\": \"int\",\n                \"metavar\": \"<number-of-results>\",\n                \"default\": 100,\n                \"help\": (\n                    \"Control the amount of potential inferred values when inferring \"\n                    \"a single object. This can help the performance when dealing with \"\n                    \"large functions or complex, nested conditions.\"\n                ),\n            },\n        ),\n        (\n            \"extension-pkg-allow-list\",\n            {\n                \"type\": \"csv\",\n                \"metavar\": \"<pkg[,pkg]>\",\n                \"default\": [],\n                \"help\": (\n                    \"A comma-separated list of package or module names\"\n                    \" from where C extensions may be loaded. Extensions are\"\n                    \" loading into the active Python interpreter and may run\"\n                    \" arbitrary code.\"\n                ),\n            },\n        ),\n        (\n            \"extension-pkg-whitelist\",\n            {\n                \"type\": \"csv\",\n                \"metavar\": \"<pkg[,pkg]>\",\n                \"default\": [],\n                \"help\": (\n                    \"A comma-separated list of package or module names\"\n                    \" from where C extensions may be loaded. Extensions are\"\n                    \" loading into the active Python interpreter and may run\"\n                    \" arbitrary code. (This is an alternative name to\"\n                    \" extension-pkg-allow-list for backward compatibility.)\"\n                ),\n            },\n        ),\n        (\n            \"suggestion-mode\",\n            {\n                \"type\": \"yn\",\n                \"metavar\": \"<y or n>\",\n                \"default\": True,\n                \"help\": (\n                    \"When enabled, pylint would attempt to guess common \"\n                    \"misconfiguration and emit user-friendly hints instead \"\n                    \"of false-positive error messages.\"\n                ),\n            },\n        ),\n        (\n            \"exit-zero\",\n            {\n                \"action\": \"store_true\",\n                \"default\": False,\n                \"metavar\": \"<flag>\",\n                \"help\": (\n                    \"Always return a 0 (non-error) status code, even if \"\n                    \"lint errors are found. This is primarily useful in \"\n                    \"continuous integration scripts.\"\n                ),\n            },\n        ),",
                        "filename": "pylint/lint/base_options.py",
                        "start_index": 9512,
                        "end_index": 12444,
                        "start_line": 3,
                        "end_line": 595,
                        "max_line": 596,
                        "git_instance": "github",
                        "repo_name": "testbed/pylint-dev__pylint__2.8",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the current implementation of the 'exit-zero' option, which is related to the issue as it deals with exit codes. It may need to be modified or used as a reference for implementing the new '--fail-on' option."
                }
            ],
            "pylint/checkers/imports.py": [
                {
                    "chunk": {
                        "code": "{\n    \"E0401\": (\n        \"Unable to import %s\",\n        \"import-error\",\n        \"Used when pylint has been unable to import a module.\",\n        {\"old_names\": [(\"F0401\", \"old-import-error\")]},\n    ),\n    \"E0402\": (\n        \"Attempted relative import beyond top-level package\",\n        \"relative-beyond-top-level\",\n        \"Used when a relative import tries to access too many levels \"\n        \"in the current package.\",\n    ),\n    \"R0401\": (\n        \"Cyclic import (%s)\",\n        \"cyclic-import\",\n        \"Used when a cyclic import between two or more modules is detected.\",\n    ),\n    \"R0402\": (\n        \"Use 'from %s import %s' instead\",\n        \"consider-using-from-import\",\n        \"Emitted when a submodule of a package is imported and \"\n        \"aliased with the same name, \"\n        \"e.g., instead of ``import concurrent.futures as futures`` use \"\n        \"``from concurrent import futures``.\",\n    ),\n    \"W0401\": (\n        \"Wildcard import %s\",\n        \"wildcard-import\",\n        \"Used when `from module import *` is detected.\",\n    ),\n    \"W0404\": (\n        \"Reimport %r (imported line %s)\",\n        \"reimported\",\n        \"Used when a module is imported more than once.\",\n    ),\n    \"W0406\": (\n        \"Module import itself\",\n        \"import-self\",\n        \"Used when a module is importing itself.\",\n    ),\n    \"W0407\": (\n        \"Prefer importing %r instead of %r\",\n        \"preferred-module\",\n        \"Used when a module imported has a preferred replacement module.\",\n    ),\n    \"W0410\": (\n        \"__future__ import is not the first non docstring statement\",\n        \"misplaced-future\",\n        \"Python 2.5 and greater require __future__ import to be the \"\n        \"first non docstring statement in the module.\",\n    ),\n    \"C0410\": (\n        \"Multiple imports on one line (%s)\",\n        \"multiple-imports\",\n        \"Used when import statement importing multiple modules is detected.\",\n    ),\n    \"C0411\": (\n        \"%s should be placed before %s\",\n        \"wrong-import-order\",\n        \"Used when PEP8 import order is not respected (standard imports \"\n        \"first, then third-party libraries, then local imports).\",\n    ),\n    \"C0412\": (\n        \"Imports from package %s are not grouped\",\n        \"ungrouped-imports\",\n        \"Used when imports are not grouped by packages.\",\n    ),\n    \"C0413\": (\n        'Import \"%s\" should be placed at the top of the module',\n        \"wrong-import-position\",\n        \"Used when code and imports are mixed.\",\n    ),\n    \"C0414\": (\n        \"Import alias does not rename original package\",\n        \"useless-import-alias\",\n        \"Used when an import alias is same as original package, \"\n        \"e.g., using import numpy as numpy instead of import numpy as np.\",\n    ),\n    \"C0415\": (\n        \"Import outside toplevel (%s)\",\n        \"import-outside-toplevel\",\n        \"Used when an import statement is used anywhere other than the module \"\n        \"toplevel. Move this import to the top of the file.\",\n    ),",
                        "filename": "pylint/checkers/imports.py",
                        "start_index": 7547,
                        "end_index": 10506,
                        "start_line": 47,
                        "end_line": 840,
                        "max_line": 1102,
                        "git_instance": "github",
                        "repo_name": "testbed/pylint-dev__pylint__2.8",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet lists the error codes and their descriptions, which are relevant to the issue since the new '--fail-on' option should allow users to specify certain error codes to trigger a failure."
                }
            ]
        },
        "solution_task": "To implement the feature described in the ticket, you would need to modify the pylint codebase to add the new command-line options and the logic to handle them. Here's a high-level overview of the steps to implement the feature:\n\n- Add new command-line options to `pylint/lint/base_options.py`:\n  - `--fail-on` option to specify the error codes or issue types that should cause pylint to fail.\n  - Modify the `--fail-under` option to include a flag that prevents it from overriding other exit statuses.\n\n- Update the `pylint/lint/pylinter.py` to handle the new options:\n  - For `--fail-on`, add logic to check if any of the specified error codes or issue types are present in the final report. If so, set the exit code to a non-zero value.\n  - For `--fail-under`, ensure that if the score is under the specified threshold, the exit code is set to a non-zero value, but do not override other exit statuses.\n\nHere is a pseudo-code example of how you might implement the `--fail-on` option:\n\n```python\n# pylint/lint/base_options.py\n# Add new command-line option\n{\n    \"fail-on\",\n    {\n        \"type\": \"csv\",\n        \"metavar\": \"<error_code[,error_code]>\",\n        \"default\": [],\n        \"help\": \"Comma-separated list of error codes or issue types that will cause pylint to return a non-zero exit code if found.\",\n    },\n}\n\n# pylint/lint/pylinter.py\n# Modify the _run_checkers method to handle the new option\ndef _run_checkers(self):\n    # ... existing code ...\n    \n    # New logic for --fail-on\n    fail_on_issues = self.config.fail_on\n    if fail_on_issues:\n        for message in self.reporter.messages:\n            if message.msg_id in fail_on_issues or message.symbol in fail_on_issues:\n                self.set_exit_code(1)\n                break\n    \n    # ... existing code ...\n```\n\nFor the `--fail-under` option, you would need to modify the existing logic that sets the exit code based on the score to ensure it doesn't override other exit statuses if the score is above the threshold.\n\nRemember to update the documentation and help messages to reflect the new options and their usage. Additionally, you should write unit tests to cover the new functionality to ensure it works as expected and does not introduce regressions.\n\nThis is a high-level overview, and the actual implementation may require more in-depth changes depending on the existing pylint codebase structure and how the current options and exit codes are handled.",
        "bouncer_response": {
            "score": 8,
            "criteria": "The VALUE score should reflect how well the RESPONSE addresses the specific needs and context presented in the PROMPT, regardless of the completeness of the PROMPT itself. RESPONSES that are highly relevant, offering clear and comprehensive suggestions or solutions for the described described feature request, should score between 7 and 9.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable plan for implementing the requested feature, including specific file paths and code snippets that would need to be modified or added. It offers a clear explanation of how to add the new command-line options and the logic to handle them, which is directly relevant to the feature request. The RESPONSE also includes pseudo-code to illustrate the implementation of the `--fail-on` option, which adds value by giving a practical example of how the feature could be coded. Furthermore, it suggests updating documentation and writing unit tests, which are important steps in the development process. The RESPONSE does not address every single detail, such as the exact logic for the `--fail-under` modification, which prevents it from scoring a perfect 10. However, it provides a substantial amount of actionable guidance that would significantly aid in the feature's development.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711700736.9698281,
        "result": "To implement the feature described in the ticket, you would need to modify the pylint codebase to add the new command-line options and the logic to handle them. Here's a high-level overview of the steps to implement the feature:\n\n- Add new command-line options to `pylint/lint/base_options.py`:\n  - `--fail-on` option to specify the error codes or issue types that should cause pylint to fail.\n  - Modify the `--fail-under` option to include a flag that prevents it from overriding other exit statuses.\n\n- Update the `pylint/lint/pylinter.py` to handle the new options:\n  - For `--fail-on`, add logic to check if any of the specified error codes or issue types are present in the final report. If so, set the exit code to a non-zero value.\n  - For `--fail-under`, ensure that if the score is under the specified threshold, the exit code is set to a non-zero value, but do not override other exit statuses.\n\nHere is a pseudo-code example of how you might implement the `--fail-on` option:\n\n```python\n# pylint/lint/base_options.py\n# Add new command-line option\n{\n    \"fail-on\",\n    {\n        \"type\": \"csv\",\n        \"metavar\": \"<error_code[,error_code]>\",\n        \"default\": [],\n        \"help\": \"Comma-separated list of error codes or issue types that will cause pylint to return a non-zero exit code if found.\",\n    },\n}\n\n# pylint/lint/pylinter.py\n# Modify the _run_checkers method to handle the new option\ndef _run_checkers(self):\n    # ... existing code ...\n    \n    # New logic for --fail-on\n    fail_on_issues = self.config.fail_on\n    if fail_on_issues:\n        for message in self.reporter.messages:\n            if message.msg_id in fail_on_issues or message.symbol in fail_on_issues:\n                self.set_exit_code(1)\n                break\n    \n    # ... existing code ...\n```\n\nFor the `--fail-under` option, you would need to modify the existing logic that sets the exit code based on the score to ensure it doesn't override other exit statuses if the score is above the threshold.\n\nRemember to update the documentation and help messages to reflect the new options and their usage. Additionally, you should write unit tests to cover the new functionality to ensure it works as expected and does not introduce regressions.\n\nThis is a high-level overview, and the actual implementation may require more in-depth changes depending on the existing pylint codebase structure and how the current options and exit codes are handled.\n\n### Code snippets to check\n\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.8/tree//pylint) \u2192 [lint](https://github.com/testbed/pylint-dev__pylint__2.8/tree//pylint/lint)- [Lines 3 - 595](https://github.com/testbed/pylint-dev__pylint__2.8/blob//pylint/lint/base_options.py#L3-L595)\n\n This snippet contains the current implementation of the 'exit-zero' option, which is related to the issue as it deals with exit codes. It may need to be modified or used as a reference for implementing the new '--fail-on' option.\n-  \u2192 [pylint](https://github.com/testbed/pylint-dev__pylint__2.8/tree//pylint) \u2192 [checkers](https://github.com/testbed/pylint-dev__pylint__2.8/tree//pylint/checkers)- [Lines 47 - 840](https://github.com/testbed/pylint-dev__pylint__2.8/blob//pylint/checkers/imports.py#L47-L840)\n\n This snippet lists the error codes and their descriptions, which are relevant to the issue since the new '--fail-on' option should allow users to specify certain error codes to trigger a failure."
    }
}