{
    "id": "sympy__sympy-23824",
    "repo_name": "testbed/sympy__sympy__1.12",
    "task_id": 6520934279449369555,
    "title": "physics.hep.kahane_simplify() incorrectly reverses order of leading uncontracted gamma matrices",
    "body": "The kahane_simplify() function applies [identities](https://en.wikipedia.org/w/index.php?title=Gamma_matrices&oldid=1098219980#Miscellaneous_identities) such as $\\gamma^\\mu \\gamma_\\mu = 4 I_4$ to simplify products of gamma matrices in which contracted matrices occur. Leading gamma matrices without contractions should be unaffected, but a bug causes such leading terms to be prepended in reverse order.\r\n\r\nThe bug is illustrated by the following example:\r\n```python\r\nimport sympy\r\nfrom sympy.physics.hep.gamma_matrices import GammaMatrix as G, gamma_trace, LorentzIndex\r\nfrom sympy.physics.hep.gamma_matrices import kahane_simplify\r\nfrom sympy.tensor.tensor import tensor_indices\r\n\r\ndef test_kahane_leading_gamma_matrix_bug():\r\n    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\r\n    \r\n    t = G(mu)*G(-mu)*G(rho)*G(sigma)\r\n    r = kahane_simplify(t)\r\n    print(r)\r\n    assert r.equals(4*G(rho)*G(sigma))\r\n    \r\n    t = G(rho)*G(sigma)*G(mu)*G(-mu)\r\n    r = kahane_simplify(t)\r\n    print(r)\r\n    assert r.equals(4*G(rho)*G(sigma))\r\n```\r\n\r\nThe result is\r\n```\r\n4*GammaMatrix(rho)*GammaMatrix(sigma)\r\n4*GammaMatrix(sigma)*GammaMatrix(rho)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/gahs/Documents/sympy/sympy-dev/test_kahane_leading_gamma_matrix_bug.py\", line 17, in test_kahane_leading_gamma_matrix_bug\r\n    assert r.equals(4*G(rho)*G(sigma))\r\nAssertionError\r\n```\r\n\r\nBoth $\\gamma^\\mu \\gamma_\\mu \\gamma^\\rho \\gamma^\\sigma$ and $\\gamma^\\rho \\gamma^\\sigma \\gamma^\\mu \\gamma_\\mu$ should simplify to $4\\gamma^\\rho \\gamma^\\sigma$, but the order of $\\gamma^\\rho$ and $\\gamma^\\sigma$ is flipped in the second case due to the bug.\r\n\r\nI found the source of the bug and it is simple to fix. In `kahane_simplify()` the leading matrices are removed at the beginning of the function and then inserted at the start of the product at the end of the function, and the insertion loop is just backward.\r\n\r\nI'll generate a pull request for this shortly.\r\n\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/sympy__sympy__1.12.git",
    "requested_commit": "",
    "mayil_response": "- The issue is with the `kahane_simplify()` function which is reversing the order of uncontracted gamma matrices.\n- The relevant code snippet is in the file `sympy/physics/hep/gamma_matrices.py` in the function `kahane_simplify()`.\n\nTo fix the issue:\n- Locate the loop in `kahane_simplify()` that iterates over the indices and constructs the resulting expression with gamma matrices.\n- Ensure that the loop preserves the original order of uncontracted gamma matrices when constructing the `resulting_indices` list.\n- If the loop uses `insert(0, ...)` or similar methods that reverse the order, replace them with `append(...)` or adjust the logic to maintain the correct order.\n- After modifying the loop, re-run the assertion test to confirm that the order is now correct and the `AssertionError` is resolved.\n\n### Code snippets to check\n\n-  \u2192 [sympy](https://github.com/testbed/sympy__sympy__1.12/tree//sympy) \u2192 [physics](https://github.com/testbed/sympy__sympy__1.12/tree//sympy/physics) \u2192 [hep](https://github.com/testbed/sympy__sympy__1.12/tree//sympy/physics/hep)- [Lines 335 - 433](https://github.com/testbed/sympy__sympy__1.12/blob//sympy/physics/hep/gamma_matrices.py#L335-L433)\n\n This snippet contains the kahane_simplify() function which is where the bug is located. \n\n\n   - [Lines 434 - 509](https://github.com/testbed/sympy__sympy__1.12/blob//sympy/physics/hep/gamma_matrices.py#L434-L509)\n\n This snippet continues from snippet #1 and includes the algorithm details where the bug related to the order of gamma matrices is likely to be found. \n\n\n   - [Lines 558 - 641](https://github.com/testbed/sympy__sympy__1.12/blob//sympy/physics/hep/gamma_matrices.py#L558-L641)\n\n This snippet is part of the kahane_simplify() function and may contain the loop that incorrectly reverses the order of uncontracted gamma matrices. \n\n\n   - [Lines 642 - 716](https://github.com/testbed/sympy__sympy__1.12/blob//sympy/physics/hep/gamma_matrices.py#L642-L716)\n\n This snippet is part of the kahane_simplify() function and may contain the loop that incorrectly reverses the order of uncontracted gamma matrices.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.000437,
        "snippet_processor": 0.08967000000000001,
        "issue_star_creation": 0.026609999999999998,
        "issue_star_solver": 0.06778,
        "bouncer": 0.026189999999999998
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711743125.054784,
        "relevant_snippets": [
            {
                "code": "r\"\"\"\n    This function cancels contracted elements in a product of four\n    dimensional gamma matrices, resulting in an expression equal to the given\n    one, without the contracted gamma matrices.\n\n    Parameters\n    ==========\n\n    `expression`    the tensor expression containing the gamma matrices to simplify.\n\n    Notes\n    =====\n\n    If spinor indices are given, the matrices must be given in\n    the order given in the product.\n\n    Algorithm\n    =========\n\n    The idea behind the algorithm is to use some well-known identities,\n    i.e., for contractions enclosing an even number of `\\gamma` matrices\n\n    `\\gamma^\\mu \\gamma_{a_1} \\cdots \\gamma_{a_{2N}} \\gamma_\\mu = 2 (\\gamma_{a_{2N}} \\gamma_{a_1} \\cdots \\gamma_{a_{2N-1}} + \\gamma_{a_{2N-1}} \\cdots \\gamma_{a_1} \\gamma_{a_{2N}} )`\n\n    for an odd number of `\\gamma` matrices\n\n    `\\gamma^\\mu \\gamma_{a_1} \\cdots \\gamma_{a_{2N+1}} \\gamma_\\mu = -2 \\gamma_{a_{2N+1}} \\gamma_{a_{2N}} \\cdots \\gamma_{a_{1}}`\n\n    Instead of repeatedly applying these identities to cancel out all contracted indices,\n    it is possible to recognize the links that would result from such an operation,\n    the problem is thus reduced to a simple rearrangement of free gamma matrices.\n\n    Examples\n    ========\n\n    When using, always remember that the original expression coefficient\n    has to be handled separately\n\n    >>> from sympy.physics.hep.gamma_matrices import GammaMatrix as G, LorentzIndex\n    >>> from sympy.physics.hep.gamma_matrices import kahane_simplify\n    >>> from sympy.tensor.tensor import tensor_indices\n    >>> i0, i1, i2 = tensor_indices('i0:3', LorentzIndex)\n    >>> ta = G(i0)*G(-i0)\n    >>> kahane_simplify(ta)\n    Matrix([\n    [4, 0, 0, 0],\n    [0, 4, 0, 0],\n    [0, 0, 4, 0],\n    [0, 0, 0, 4]])\n    >>> tb = G(i0)*G(i1)*G(-i0)\n    >>> kahane_simplify(tb)\n    -2*GammaMatrix(i1)\n    >>> t = G(i0)*G(-i0)\n    >>> kahane_simplify(t)\n    Matrix([\n    [4, 0, 0, 0],\n    [0, 4, 0, 0],\n    [0, 0, 4, 0],\n    [0, 0, 0, 4]])\n    >>> t = G(i0)*G(-i0)\n    >>> kahane_simplify(t)\n    Matrix([\n    [4, 0, 0, 0],\n    [0, 4, 0, 0],\n    [0, 0, 4, 0],\n    [0, 0, 0, 4]])\n\n    If there are no contractions, the same expression is returned\n\n    >>> tc = G(i0)*G(i1)\n    >>> kahane_simplify(tc)\n    GammaMatrix(i0)*GammaMatrix(i1)\n\n    References\n    ==========\n\n    [1] Algorithm for Reducing Contracted Products of gamma Matrices,\n    Joseph Kahane, Journal of Mathematical Physics, Vol. 9, No. 10, October 1968.\n    \"\"\"\n\n    if isinstance(expression, Mul):\n        return expression\n    if isinstance(expression, TensAdd):\n        return TensAdd(*[kahane_simplify(arg) for arg in expression.args])\n\n    if isinstance(expression, Tensor):\n        return expression\n\n    assert isinstance(expression, TensMul)\n\n    gammas = expression.args\n\n    for gamma in gammas:\n        assert gamma.component == GammaMatrix\n\n    free = expression.free\n    # spinor_free = [_ for _ in expression.free_in_args if _[1] != 0]\n\n    # if len(spinor_free) == 2:",
                "filename": "sympy/physics/hep/gamma_matrices.py",
                "start_index": 9877,
                "end_index": 12868,
                "start_line": 335,
                "end_line": 433,
                "max_line": 716,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.12",
                "sha": ""
            },
            {
                "code": "#     spinor_free.sort(key=lambda x: x[2])\n    #     assert spinor_free[0][1] == 1 and spinor_free[-1][1] == 2\n    #     assert spinor_free[0][2] == 0\n    # elif spinor_free:\n    #     raise ValueError('spinor indices do not match')\n\n    dum = []\n    for dum_pair in expression.dum:\n        if expression.index_types[dum_pair[0]] == LorentzIndex:\n            dum.append((dum_pair[0], dum_pair[1]))\n\n    dum = sorted(dum)\n\n    if len(dum) == 0:  # or GammaMatrixHead:\n        # no contractions in `expression`, just return it.\n        return expression\n\n    # find the `first_dum_pos`, i.e. the position of the first contracted\n    # gamma matrix, Kahane's algorithm as described in his paper requires the\n    # gamma matrix expression to start with a contracted gamma matrix, this is\n    # a workaround which ignores possible initial free indices, and re-adds\n    # them later.\n\n    first_dum_pos = min(map(min, dum))\n\n    # for p1, p2, a1, a2 in expression.dum_in_args:\n    #     if p1 != 0 or p2 != 0:\n    #         # only Lorentz indices, skip Dirac indices:\n    #         continue\n    #     first_dum_pos = min(p1, p2)\n    #     break\n\n    total_number = len(free) + len(dum)*2\n    number_of_contractions = len(dum)\n\n    free_pos = [None]*total_number\n    for i in free:\n        free_pos[i[1]] = i[0]\n\n    # `index_is_free` is a list of booleans, to identify index position\n    # and whether that index is free or dummy.\n    index_is_free = [False]*total_number\n\n    for i, indx in enumerate(free):\n        index_is_free[indx[1]] = True\n\n    # `links` is a dictionary containing the graph described in Kahane's paper,\n    # to every key correspond one or two values, representing the linked indices.\n    # All values in `links` are integers, negative numbers are used in the case\n    # where it is necessary to insert gamma matrices between free indices, in\n    # order to make Kahane's algorithm work (see paper).\n    links = dict()\n    for i in range(first_dum_pos, total_number):\n        links[i] = []\n\n    # `cum_sign` is a step variable to mark the sign of every index, see paper.\n    cum_sign = -1\n    # `cum_sign_list` keeps storage for all `cum_sign` (every index).\n    cum_sign_list = [None]*total_number\n    block_free_count = 0\n\n    # multiply `resulting_coeff` by the coefficient parameter, the rest\n    # of the algorithm ignores a scalar coefficient.\n    resulting_coeff = S.One\n\n    # initialize a list of lists of indices. The outer list will contain all\n    # additive tensor expressions, while the inner list will contain the\n    # free indices (rearranged according to the algorithm).\n    resulting_indices = [[]]\n\n    # start to count the `connected_components`, which together with the number\n    # of contractions, determines a -1 or +1 factor to be multiplied.\n    connected_components = 1\n\n    # First loop: here we fill `cum_sign_list`, and draw the links\n    # among consecutive indices (they are stored in `links`). Links among",
                "filename": "sympy/physics/hep/gamma_matrices.py",
                "start_index": 12873,
                "end_index": 15831,
                "start_line": 434,
                "end_line": 509,
                "max_line": 716,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.12",
                "sha": ""
            },
            {
                "code": "for gammas, numer, denom in [(\n                numer_gammas, numer_others, denom_others),\n                    (denom_gammas, denom_others, numer_others)]:\n                new = []\n                while gammas:\n                    g1 = gammas.pop()\n                    if g1.is_integer:\n                        new.append(g1)\n                        continue\n                    for i, g2 in enumerate(gammas):\n                        n = g1 + g2 - 1\n                        if not n.is_Integer:\n                            continue\n                        numer.append(S.Pi)\n                        denom.append(sin(S.Pi*g1))\n                        gammas.pop(i)\n                        if n > 0:\n                            for k in range(n):\n                                numer.append(1 - g1 + k)\n                        elif n < 0:\n                            for k in range(-n):\n                                denom.append(-g1 - k)\n                        break\n                    else:\n                        new.append(g1)\n                # /!\\ updating IN PLACE\n                gammas[:] = new\n\n            # Try to reduce the number of gammas by using the duplication\n            # theorem to cancel an upper and lower: gamma(2*s)/gamma(s) =\n            # 2**(2*s + 1)/(4*sqrt(pi))*gamma(s + 1/2). Although this could\n            # be done with higher argument ratios like gamma(3*x)/gamma(x),\n            # this would not reduce the number of gammas as in this case.\n            for ng, dg, no, do in [(numer_gammas, denom_gammas, numer_others,\n                                    denom_others),\n                                   (denom_gammas, numer_gammas, denom_others,\n                                    numer_others)]:\n\n                while True:\n                    for x in ng:\n                        for y in dg:\n                            n = x - 2*y\n                            if n.is_Integer:\n                                break\n                        else:\n                            continue\n                        break\n                    else:\n                        break\n                    ng.remove(x)\n                    dg.remove(y)\n                    if n > 0:\n                        for k in range(n):\n                            no.append(2*y + k)\n                    elif n < 0:\n                        for k in range(-n):\n                            do.append(2*y - 1 - k)\n                    ng.append(y + S.Half)\n                    no.append(2**(2*y - 1))\n                    do.append(sqrt(S.Pi))\n\n            # Try to reduce the number of gamma factors by applying the\n            # multiplication theorem (used when n gammas with args differing\n            # by 1/n mod 1 are encountered).\n            #\n            # run of 2 with args differing by 1/2\n            #\n            # >>> gammasimp(gamma(x)*gamma(x+S.Half))\n            # 2*sqrt(2)*2**(-2*x - 1/2)*sqrt(pi)*gamma(2*x)\n            #",
                "filename": "sympy/simplify/gammasimp.py",
                "start_index": 7455,
                "end_index": 10412,
                "start_line": 224,
                "end_line": 453,
                "max_line": 510,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.12",
                "sha": ""
            },
            {
                "code": "\"\"\"\n    Module to handle gamma matrices expressed as tensor objects.\n\n    Examples\n    ========\n\n    >>> from sympy.physics.hep.gamma_matrices import GammaMatrix as G, LorentzIndex\n    >>> from sympy.tensor.tensor import tensor_indices\n    >>> i = tensor_indices('i', LorentzIndex)\n    >>> G(i)\n    GammaMatrix(i)\n\n    Note that there is already an instance of GammaMatrixHead in four dimensions:\n    GammaMatrix, which is simply declare as\n\n    >>> from sympy.physics.hep.gamma_matrices import GammaMatrix\n    >>> from sympy.tensor.tensor import tensor_indices\n    >>> i = tensor_indices('i', LorentzIndex)\n    >>> GammaMatrix(i)\n    GammaMatrix(i)\n\n    To access the metric tensor\n\n    >>> LorentzIndex.metric\n    metric(LorentzIndex,LorentzIndex)\n\n\"\"\"\nfrom sympy import S, Mul, eye, trace\nfrom sympy.tensor.tensor import TensorIndexType, TensorIndex,\\\n    TensMul, TensAdd, tensor_mul, Tensor, TensorHead, TensorSymmetry\n\n\n# DiracSpinorIndex = TensorIndexType('DiracSpinorIndex', dim=4, dummy_name=\"S\")\n\n\nLorentzIndex = TensorIndexType('LorentzIndex', dim=4, dummy_name=\"L\")\n\n\nGammaMatrix = TensorHead(\"GammaMatrix\", [LorentzIndex],\n                         TensorSymmetry.no_symmetry(1), comm=None)\n\n\ndef extract_type_tens(expression, component):\n    \"\"\"\n    Extract from a ``TensExpr`` all tensors with `component`.\n\n    Returns two tensor expressions:\n\n    * the first contains all ``Tensor`` of having `component`.\n    * the second contains all remaining.\n\n\n    \"\"\"\n    if isinstance(expression, Tensor):\n        sp = [expression]\n    elif isinstance(expression, TensMul):\n        sp = expression.args\n    else:\n        raise ValueError('wrong type')\n\n    # Collect all gamma matrices of the same dimension\n    new_expr = S.One\n    residual_expr = S.One\n    for i in sp:\n        if isinstance(i, Tensor) and i.component == component:\n            new_expr *= i\n        else:\n            residual_expr *= i\n    return new_expr, residual_expr\n\n\ndef simplify_gamma_expression(expression):\n    extracted_expr, residual_expr = extract_type_tens(expression, GammaMatrix)\n    res_expr = _simplify_single_line(extracted_expr)\n    return res_expr * residual_expr",
                "filename": "sympy/physics/hep/gamma_matrices.py",
                "start_index": 0,
                "end_index": 2159,
                "start_line": 1,
                "end_line": 75,
                "max_line": 716,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.12",
                "sha": ""
            },
            {
                "code": "for i in dum:\n        # get the positions of the two contracted indices:\n        pos1 = i[0]\n        pos2 = i[1]\n\n        # create Kahane's upper links, i.e. the upper arcs between dummy\n        # (i.e. contracted) indices:\n        links[pos1].append(pos2)\n        links[pos2].append(pos1)\n\n        # create Kahane's lower links, this corresponds to the arcs below\n        # the line described in the paper:\n\n        # first we move `pos1` and `pos2` according to the sign of the indices:\n        linkpos1 = pos1 + cum_sign_list[pos1]\n        linkpos2 = pos2 + cum_sign_list[pos2]\n\n        # otherwise, perform some checks before creating the lower arcs:\n\n        # make sure we are not exceeding the total number of indices:\n        if linkpos1 >= total_number:\n            continue\n        if linkpos2 >= total_number:\n            continue\n\n        # make sure we are not below the first dummy index in `expression`:\n        if linkpos1 < first_dum_pos:\n            continue\n        if linkpos2 < first_dum_pos:\n            continue\n\n        # check if the previous loop created \"virtual\" indices between dummy\n        # indices, in such a case relink `linkpos1` and `linkpos2`:\n        if (-1-linkpos1) in links:\n            linkpos1 = -1-linkpos1\n        if (-1-linkpos2) in links:\n            linkpos2 = -1-linkpos2\n\n        # move only if not next to free index:\n        if linkpos1 >= 0 and not index_is_free[linkpos1]:\n            linkpos1 = pos1\n\n        if linkpos2 >=0 and not index_is_free[linkpos2]:\n            linkpos2 = pos2\n\n        # create the lower arcs:\n        if linkpos2 not in links[linkpos1]:\n            links[linkpos1].append(linkpos2)\n        if linkpos1 not in links[linkpos2]:\n            links[linkpos2].append(linkpos1)\n\n    # This loop starts from the `first_dum_pos` index (first dummy index)\n    # walks through the graph deleting the visited indices from `links`,\n    # it adds a gamma matrix for every free index in encounters, while it\n    # completely ignores dummy indices and virtual indices.\n    pointer = first_dum_pos\n    previous_pointer = 0\n    while True:\n        if pointer in links:\n            next_ones = links.pop(pointer)\n        else:\n            break\n\n        if previous_pointer in next_ones:\n            next_ones.remove(previous_pointer)\n\n        previous_pointer = pointer\n\n        if next_ones:\n            pointer = next_ones[0]\n        else:\n            break\n\n        if pointer == previous_pointer:\n            break\n        if pointer >=0 and free_pos[pointer] is not None:\n            for ri in resulting_indices:\n                ri.append(free_pos[pointer])\n\n    # The following loop removes the remaining connected components in `links`.\n    # If there are free indices inside a connected component, it gives a\n    # contribution to the resulting expression given by the factor\n    # `gamma_a gamma_b ... gamma_z + gamma_z ... gamma_b gamma_a`, in Kahanes's\n    # paper represented as  {gamma_a, gamma_b, ... , gamma_z},",
                "filename": "sympy/physics/hep/gamma_matrices.py",
                "start_index": 18300,
                "end_index": 21290,
                "start_line": 558,
                "end_line": 641,
                "max_line": 716,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.12",
                "sha": ""
            },
            {
                "code": "def _gamma_trace1(*a):\n    gctr = 4  # FIXME specific for d=4\n    g = LorentzIndex.metric\n    if not a:\n        return gctr\n    n = len(a)\n    if n%2 == 1:\n        #return TensMul.from_data(S.Zero, [], [], [])\n        return S.Zero\n    if n == 2:\n        ind0 = a[0].get_indices()[0]\n        ind1 = a[1].get_indices()[0]\n        return gctr*g(ind0, ind1)\n    if n == 4:\n        ind0 = a[0].get_indices()[0]\n        ind1 = a[1].get_indices()[0]\n        ind2 = a[2].get_indices()[0]\n        ind3 = a[3].get_indices()[0]\n\n        return gctr*(g(ind0, ind1)*g(ind2, ind3) - \\\n           g(ind0, ind2)*g(ind1, ind3) + g(ind0, ind3)*g(ind1, ind2))",
                "filename": "sympy/physics/hep/gamma_matrices.py",
                "start_index": 9196,
                "end_index": 9837,
                "start_line": 311,
                "end_line": 331,
                "max_line": 716,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.12",
                "sha": ""
            },
            {
                "code": "def gamma_trace(t):\n    \"\"\"\n    trace of a single line of gamma matrices\n\n    Examples\n    ========\n\n    >>> from sympy.physics.hep.gamma_matrices import GammaMatrix as G, \\\n        gamma_trace, LorentzIndex\n    >>> from sympy.tensor.tensor import tensor_indices, tensor_heads\n    >>> p, q = tensor_heads('p, q', [LorentzIndex])\n    >>> i0,i1,i2,i3,i4,i5 = tensor_indices('i0:6', LorentzIndex)\n    >>> ps = p(i0)*G(-i0)\n    >>> qs = q(i0)*G(-i0)\n    >>> gamma_trace(G(i0)*G(i1))\n    4*metric(i0, i1)\n    >>> gamma_trace(ps*ps) - 4*p(i0)*p(-i0)\n    0\n    >>> gamma_trace(ps*qs + ps*ps) - 4*p(i0)*p(-i0) - 4*p(i0)*q(-i0)\n    0\n\n    \"\"\"\n    if isinstance(t, TensAdd):\n        res = TensAdd(*[_trace_single_line(x) for x in t.args])\n        return res\n    t = _simplify_single_line(t)\n    res = _trace_single_line(t)\n    return res\n\n\ndef _simplify_single_line(expression):\n    \"\"\"\n    Simplify single-line product of gamma matrices.\n\n    Examples\n    ========\n\n    >>> from sympy.physics.hep.gamma_matrices import GammaMatrix as G, \\\n        LorentzIndex, _simplify_single_line\n    >>> from sympy.tensor.tensor import tensor_indices, TensorHead\n    >>> p = TensorHead('p', [LorentzIndex])\n    >>> i0,i1 = tensor_indices('i0:2', LorentzIndex)\n    >>> _simplify_single_line(G(i0)*G(i1)*p(-i1)*G(-i0)) + 2*G(i0)*p(-i0)\n    0\n\n    \"\"\"\n    t1, t2 = extract_type_tens(expression, GammaMatrix)\n    if t1 != 1:\n        t1 = kahane_simplify(t1)\n    res = t1*t2\n    return res",
                "filename": "sympy/physics/hep/gamma_matrices.py",
                "start_index": 4933,
                "end_index": 6395,
                "start_line": 167,
                "end_line": 217,
                "max_line": 716,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.12",
                "sha": ""
            },
            {
                "code": "# https://github.com/sympy/sympy/pull/12854",
                "filename": "sympy/matrices/matrices.py",
                "start_index": 21142,
                "end_index": 21185,
                "start_line": 587,
                "end_line": 587,
                "max_line": 2310,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.12",
                "sha": ""
            },
            {
                "code": "def simplify_gpgp(ex, sort=True):\n    \"\"\"\n    simplify products ``G(i)*p(-i)*G(j)*p(-j) -> p(i)*p(-i)``\n\n    Examples\n    ========\n\n    >>> from sympy.physics.hep.gamma_matrices import GammaMatrix as G, \\\n        LorentzIndex, simplify_gpgp\n    >>> from sympy.tensor.tensor import tensor_indices, tensor_heads\n    >>> p, q = tensor_heads('p, q', [LorentzIndex])\n    >>> i0,i1,i2,i3,i4,i5 = tensor_indices('i0:6', LorentzIndex)\n    >>> ps = p(i0)*G(-i0)\n    >>> qs = q(i0)*G(-i0)\n    >>> simplify_gpgp(ps*qs*qs)\n    GammaMatrix(-L_0)*p(L_0)*q(L_1)*q(-L_1)\n    \"\"\"\n    def _simplify_gpgp(ex):\n        components = ex.components\n        a = []\n        comp_map = []\n        for i, comp in enumerate(components):\n            comp_map.extend([i]*comp.rank)\n        dum = [(i[0], i[1], comp_map[i[0]], comp_map[i[1]]) for i in ex.dum]\n        for i in range(len(components)):\n            if components[i] != GammaMatrix:\n                continue\n            for dx in dum:\n                if dx[2] == i:\n                    p_pos1 = dx[3]\n                elif dx[3] == i:\n                    p_pos1 = dx[2]\n                else:\n                    continue\n                comp1 = components[p_pos1]\n                if comp1.comm == 0 and comp1.rank == 1:\n                    a.append((i, p_pos1))\n        if not a:\n            return ex\n        elim = set()\n        tv = []\n        hit = True\n        coeff = S.One\n        ta = None\n        while hit:\n            hit = False\n            for i, ai in enumerate(a[:-1]):\n                if ai[0] in elim:\n                    continue\n                if ai[0] != a[i + 1][0] - 1:\n                    continue\n                if components[ai[1]] != components[a[i + 1][1]]:\n                    continue\n                elim.add(ai[0])\n                elim.add(ai[1])\n                elim.add(a[i + 1][0])\n                elim.add(a[i + 1][1])\n                if not ta:\n                    ta = ex.split()\n                    mu = TensorIndex('mu', LorentzIndex)\n                hit = True\n                if i == 0:\n                    coeff = ex.coeff\n                tx = components[ai[1]](mu)*components[ai[1]](-mu)\n                if len(a) == 2:\n                    tx *= 4  # eye(4)\n                tv.append(tx)\n                break\n\n        if tv:\n            a = [x for j, x in enumerate(ta) if j not in elim]\n            a.extend(tv)\n            t = tensor_mul(*a)*coeff\n            # t = t.replace(lambda x: x.is_Matrix, lambda x: 1)\n            return t\n        else:\n            return ex\n\n    if sort:\n        ex = ex.sorted_components()\n    # this would be better off with pattern matching\n    while 1:\n        t = _simplify_gpgp(ex)\n        if t != ex:\n            ex = t\n        else:\n            return t",
                "filename": "sympy/physics/hep/gamma_matrices.py",
                "start_index": 2162,
                "end_index": 4930,
                "start_line": 78,
                "end_line": 298,
                "max_line": 716,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.12",
                "sha": ""
            },
            {
                "code": "# virtual indices are ignored. The variable `connected_components` is\n    # increased by one for every connected component this loop encounters.\n\n    # If the connected component has virtual and dummy indices only\n    # (no free indices), it contributes to `resulting_indices` by a factor of two.\n    # The multiplication by two is a result of the\n    # factor {gamma^0, gamma^0} = 2 I, as it appears in Kahane's paper.\n    # Note: curly brackets are meant as in the paper, as a generalized\n    # multi-element anticommutator!\n\n    while links:\n        connected_components += 1\n        pointer = min(links.keys())\n        previous_pointer = pointer\n        # the inner loop erases the visited indices from `links`, and it adds\n        # all free indices to `prepend_indices` list, virtual indices are\n        # ignored.\n        prepend_indices = []\n        while True:\n            if pointer in links:\n                next_ones = links.pop(pointer)\n            else:\n                break\n\n            if previous_pointer in next_ones:\n                if len(next_ones) > 1:\n                    next_ones.remove(previous_pointer)\n\n            previous_pointer = pointer\n\n            if next_ones:\n                pointer = next_ones[0]\n\n            if pointer >= first_dum_pos and free_pos[pointer] is not None:\n                prepend_indices.insert(0, free_pos[pointer])\n        # if `prepend_indices` is void, it means there are no free indices\n        # in the loop (and it can be shown that there must be a virtual index),\n        # loops of virtual indices only contribute by a factor of two:\n        if len(prepend_indices) == 0:\n            resulting_coeff *= 2\n        # otherwise, add the free indices in `prepend_indices` to\n        # the `resulting_indices`:\n        else:\n            expr1 = prepend_indices\n            expr2 = list(reversed(prepend_indices))\n            resulting_indices = [expri + ri for ri in resulting_indices for expri in (expr1, expr2)]\n\n    # sign correction, as described in Kahane's paper:\n    resulting_coeff *= -1 if (number_of_contractions - connected_components + 1) % 2 else 1\n    # power of two factor, as described in Kahane's paper:\n    resulting_coeff *= 2**(number_of_contractions)\n\n    # If `first_dum_pos` is not zero, it means that there are trailing free gamma\n    # matrices in front of `expression`, so multiply by them:\n    for i in range(0, first_dum_pos):\n        [ri.insert(0, free_pos[i]) for ri in resulting_indices]\n\n    resulting_expr = S.Zero\n    for i in resulting_indices:\n        temp_expr = S.One\n        for j in i:\n            temp_expr *= GammaMatrix(j)\n        resulting_expr += temp_expr\n\n    t = resulting_coeff * resulting_expr\n    t1 = None\n    if isinstance(t, TensAdd):\n        t1 = t.args[0]\n    elif isinstance(t, TensMul):\n        t1 = t\n    if t1:\n        pass\n    else:\n        t = eye(4)*t\n    return t",
                "filename": "sympy/physics/hep/gamma_matrices.py",
                "start_index": 21295,
                "end_index": 24183,
                "start_line": 642,
                "end_line": 716,
                "max_line": 716,
                "git_instance": "github",
                "repo_name": "testbed/sympy__sympy__1.12",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "sympy/physics/hep/gamma_matrices.py": [
                {
                    "chunk": {
                        "code": "r\"\"\"\n    This function cancels contracted elements in a product of four\n    dimensional gamma matrices, resulting in an expression equal to the given\n    one, without the contracted gamma matrices.\n\n    Parameters\n    ==========\n\n    `expression`    the tensor expression containing the gamma matrices to simplify.\n\n    Notes\n    =====\n\n    If spinor indices are given, the matrices must be given in\n    the order given in the product.\n\n    Algorithm\n    =========\n\n    The idea behind the algorithm is to use some well-known identities,\n    i.e., for contractions enclosing an even number of `\\gamma` matrices\n\n    `\\gamma^\\mu \\gamma_{a_1} \\cdots \\gamma_{a_{2N}} \\gamma_\\mu = 2 (\\gamma_{a_{2N}} \\gamma_{a_1} \\cdots \\gamma_{a_{2N-1}} + \\gamma_{a_{2N-1}} \\cdots \\gamma_{a_1} \\gamma_{a_{2N}} )`\n\n    for an odd number of `\\gamma` matrices\n\n    `\\gamma^\\mu \\gamma_{a_1} \\cdots \\gamma_{a_{2N+1}} \\gamma_\\mu = -2 \\gamma_{a_{2N+1}} \\gamma_{a_{2N}} \\cdots \\gamma_{a_{1}}`\n\n    Instead of repeatedly applying these identities to cancel out all contracted indices,\n    it is possible to recognize the links that would result from such an operation,\n    the problem is thus reduced to a simple rearrangement of free gamma matrices.\n\n    Examples\n    ========\n\n    When using, always remember that the original expression coefficient\n    has to be handled separately\n\n    >>> from sympy.physics.hep.gamma_matrices import GammaMatrix as G, LorentzIndex\n    >>> from sympy.physics.hep.gamma_matrices import kahane_simplify\n    >>> from sympy.tensor.tensor import tensor_indices\n    >>> i0, i1, i2 = tensor_indices('i0:3', LorentzIndex)\n    >>> ta = G(i0)*G(-i0)\n    >>> kahane_simplify(ta)\n    Matrix([\n    [4, 0, 0, 0],\n    [0, 4, 0, 0],\n    [0, 0, 4, 0],\n    [0, 0, 0, 4]])\n    >>> tb = G(i0)*G(i1)*G(-i0)\n    >>> kahane_simplify(tb)\n    -2*GammaMatrix(i1)\n    >>> t = G(i0)*G(-i0)\n    >>> kahane_simplify(t)\n    Matrix([\n    [4, 0, 0, 0],\n    [0, 4, 0, 0],\n    [0, 0, 4, 0],\n    [0, 0, 0, 4]])\n    >>> t = G(i0)*G(-i0)\n    >>> kahane_simplify(t)\n    Matrix([\n    [4, 0, 0, 0],\n    [0, 4, 0, 0],\n    [0, 0, 4, 0],\n    [0, 0, 0, 4]])\n\n    If there are no contractions, the same expression is returned\n\n    >>> tc = G(i0)*G(i1)\n    >>> kahane_simplify(tc)\n    GammaMatrix(i0)*GammaMatrix(i1)\n\n    References\n    ==========\n\n    [1] Algorithm for Reducing Contracted Products of gamma Matrices,\n    Joseph Kahane, Journal of Mathematical Physics, Vol. 9, No. 10, October 1968.\n    \"\"\"\n\n    if isinstance(expression, Mul):\n        return expression\n    if isinstance(expression, TensAdd):\n        return TensAdd(*[kahane_simplify(arg) for arg in expression.args])\n\n    if isinstance(expression, Tensor):\n        return expression\n\n    assert isinstance(expression, TensMul)\n\n    gammas = expression.args\n\n    for gamma in gammas:\n        assert gamma.component == GammaMatrix\n\n    free = expression.free\n    # spinor_free = [_ for _ in expression.free_in_args if _[1] != 0]\n\n    # if len(spinor_free) == 2:",
                        "filename": "sympy/physics/hep/gamma_matrices.py",
                        "start_index": 9877,
                        "end_index": 12868,
                        "start_line": 335,
                        "end_line": 433,
                        "max_line": 716,
                        "git_instance": "github",
                        "repo_name": "testbed/sympy__sympy__1.12",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the kahane_simplify() function which is where the bug is located."
                },
                {
                    "chunk": {
                        "code": "#     spinor_free.sort(key=lambda x: x[2])\n    #     assert spinor_free[0][1] == 1 and spinor_free[-1][1] == 2\n    #     assert spinor_free[0][2] == 0\n    # elif spinor_free:\n    #     raise ValueError('spinor indices do not match')\n\n    dum = []\n    for dum_pair in expression.dum:\n        if expression.index_types[dum_pair[0]] == LorentzIndex:\n            dum.append((dum_pair[0], dum_pair[1]))\n\n    dum = sorted(dum)\n\n    if len(dum) == 0:  # or GammaMatrixHead:\n        # no contractions in `expression`, just return it.\n        return expression\n\n    # find the `first_dum_pos`, i.e. the position of the first contracted\n    # gamma matrix, Kahane's algorithm as described in his paper requires the\n    # gamma matrix expression to start with a contracted gamma matrix, this is\n    # a workaround which ignores possible initial free indices, and re-adds\n    # them later.\n\n    first_dum_pos = min(map(min, dum))\n\n    # for p1, p2, a1, a2 in expression.dum_in_args:\n    #     if p1 != 0 or p2 != 0:\n    #         # only Lorentz indices, skip Dirac indices:\n    #         continue\n    #     first_dum_pos = min(p1, p2)\n    #     break\n\n    total_number = len(free) + len(dum)*2\n    number_of_contractions = len(dum)\n\n    free_pos = [None]*total_number\n    for i in free:\n        free_pos[i[1]] = i[0]\n\n    # `index_is_free` is a list of booleans, to identify index position\n    # and whether that index is free or dummy.\n    index_is_free = [False]*total_number\n\n    for i, indx in enumerate(free):\n        index_is_free[indx[1]] = True\n\n    # `links` is a dictionary containing the graph described in Kahane's paper,\n    # to every key correspond one or two values, representing the linked indices.\n    # All values in `links` are integers, negative numbers are used in the case\n    # where it is necessary to insert gamma matrices between free indices, in\n    # order to make Kahane's algorithm work (see paper).\n    links = dict()\n    for i in range(first_dum_pos, total_number):\n        links[i] = []\n\n    # `cum_sign` is a step variable to mark the sign of every index, see paper.\n    cum_sign = -1\n    # `cum_sign_list` keeps storage for all `cum_sign` (every index).\n    cum_sign_list = [None]*total_number\n    block_free_count = 0\n\n    # multiply `resulting_coeff` by the coefficient parameter, the rest\n    # of the algorithm ignores a scalar coefficient.\n    resulting_coeff = S.One\n\n    # initialize a list of lists of indices. The outer list will contain all\n    # additive tensor expressions, while the inner list will contain the\n    # free indices (rearranged according to the algorithm).\n    resulting_indices = [[]]\n\n    # start to count the `connected_components`, which together with the number\n    # of contractions, determines a -1 or +1 factor to be multiplied.\n    connected_components = 1\n\n    # First loop: here we fill `cum_sign_list`, and draw the links\n    # among consecutive indices (they are stored in `links`). Links among",
                        "filename": "sympy/physics/hep/gamma_matrices.py",
                        "start_index": 12873,
                        "end_index": 15831,
                        "start_line": 434,
                        "end_line": 509,
                        "max_line": 716,
                        "git_instance": "github",
                        "repo_name": "testbed/sympy__sympy__1.12",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet continues from snippet #1 and includes the algorithm details where the bug related to the order of gamma matrices is likely to be found."
                },
                {
                    "chunk": {
                        "code": "for i in dum:\n        # get the positions of the two contracted indices:\n        pos1 = i[0]\n        pos2 = i[1]\n\n        # create Kahane's upper links, i.e. the upper arcs between dummy\n        # (i.e. contracted) indices:\n        links[pos1].append(pos2)\n        links[pos2].append(pos1)\n\n        # create Kahane's lower links, this corresponds to the arcs below\n        # the line described in the paper:\n\n        # first we move `pos1` and `pos2` according to the sign of the indices:\n        linkpos1 = pos1 + cum_sign_list[pos1]\n        linkpos2 = pos2 + cum_sign_list[pos2]\n\n        # otherwise, perform some checks before creating the lower arcs:\n\n        # make sure we are not exceeding the total number of indices:\n        if linkpos1 >= total_number:\n            continue\n        if linkpos2 >= total_number:\n            continue\n\n        # make sure we are not below the first dummy index in `expression`:\n        if linkpos1 < first_dum_pos:\n            continue\n        if linkpos2 < first_dum_pos:\n            continue\n\n        # check if the previous loop created \"virtual\" indices between dummy\n        # indices, in such a case relink `linkpos1` and `linkpos2`:\n        if (-1-linkpos1) in links:\n            linkpos1 = -1-linkpos1\n        if (-1-linkpos2) in links:\n            linkpos2 = -1-linkpos2\n\n        # move only if not next to free index:\n        if linkpos1 >= 0 and not index_is_free[linkpos1]:\n            linkpos1 = pos1\n\n        if linkpos2 >=0 and not index_is_free[linkpos2]:\n            linkpos2 = pos2\n\n        # create the lower arcs:\n        if linkpos2 not in links[linkpos1]:\n            links[linkpos1].append(linkpos2)\n        if linkpos1 not in links[linkpos2]:\n            links[linkpos2].append(linkpos1)\n\n    # This loop starts from the `first_dum_pos` index (first dummy index)\n    # walks through the graph deleting the visited indices from `links`,\n    # it adds a gamma matrix for every free index in encounters, while it\n    # completely ignores dummy indices and virtual indices.\n    pointer = first_dum_pos\n    previous_pointer = 0\n    while True:\n        if pointer in links:\n            next_ones = links.pop(pointer)\n        else:\n            break\n\n        if previous_pointer in next_ones:\n            next_ones.remove(previous_pointer)\n\n        previous_pointer = pointer\n\n        if next_ones:\n            pointer = next_ones[0]\n        else:\n            break\n\n        if pointer == previous_pointer:\n            break\n        if pointer >=0 and free_pos[pointer] is not None:\n            for ri in resulting_indices:\n                ri.append(free_pos[pointer])\n\n    # The following loop removes the remaining connected components in `links`.\n    # If there are free indices inside a connected component, it gives a\n    # contribution to the resulting expression given by the factor\n    # `gamma_a gamma_b ... gamma_z + gamma_z ... gamma_b gamma_a`, in Kahanes's\n    # paper represented as  {gamma_a, gamma_b, ... , gamma_z},",
                        "filename": "sympy/physics/hep/gamma_matrices.py",
                        "start_index": 18300,
                        "end_index": 21290,
                        "start_line": 558,
                        "end_line": 641,
                        "max_line": 716,
                        "git_instance": "github",
                        "repo_name": "testbed/sympy__sympy__1.12",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is part of the kahane_simplify() function and may contain the loop that incorrectly reverses the order of uncontracted gamma matrices."
                },
                {
                    "chunk": {
                        "code": "# virtual indices are ignored. The variable `connected_components` is\n    # increased by one for every connected component this loop encounters.\n\n    # If the connected component has virtual and dummy indices only\n    # (no free indices), it contributes to `resulting_indices` by a factor of two.\n    # The multiplication by two is a result of the\n    # factor {gamma^0, gamma^0} = 2 I, as it appears in Kahane's paper.\n    # Note: curly brackets are meant as in the paper, as a generalized\n    # multi-element anticommutator!\n\n    while links:\n        connected_components += 1\n        pointer = min(links.keys())\n        previous_pointer = pointer\n        # the inner loop erases the visited indices from `links`, and it adds\n        # all free indices to `prepend_indices` list, virtual indices are\n        # ignored.\n        prepend_indices = []\n        while True:\n            if pointer in links:\n                next_ones = links.pop(pointer)\n            else:\n                break\n\n            if previous_pointer in next_ones:\n                if len(next_ones) > 1:\n                    next_ones.remove(previous_pointer)\n\n            previous_pointer = pointer\n\n            if next_ones:\n                pointer = next_ones[0]\n\n            if pointer >= first_dum_pos and free_pos[pointer] is not None:\n                prepend_indices.insert(0, free_pos[pointer])\n        # if `prepend_indices` is void, it means there are no free indices\n        # in the loop (and it can be shown that there must be a virtual index),\n        # loops of virtual indices only contribute by a factor of two:\n        if len(prepend_indices) == 0:\n            resulting_coeff *= 2\n        # otherwise, add the free indices in `prepend_indices` to\n        # the `resulting_indices`:\n        else:\n            expr1 = prepend_indices\n            expr2 = list(reversed(prepend_indices))\n            resulting_indices = [expri + ri for ri in resulting_indices for expri in (expr1, expr2)]\n\n    # sign correction, as described in Kahane's paper:\n    resulting_coeff *= -1 if (number_of_contractions - connected_components + 1) % 2 else 1\n    # power of two factor, as described in Kahane's paper:\n    resulting_coeff *= 2**(number_of_contractions)\n\n    # If `first_dum_pos` is not zero, it means that there are trailing free gamma\n    # matrices in front of `expression`, so multiply by them:\n    for i in range(0, first_dum_pos):\n        [ri.insert(0, free_pos[i]) for ri in resulting_indices]\n\n    resulting_expr = S.Zero\n    for i in resulting_indices:\n        temp_expr = S.One\n        for j in i:\n            temp_expr *= GammaMatrix(j)\n        resulting_expr += temp_expr\n\n    t = resulting_coeff * resulting_expr\n    t1 = None\n    if isinstance(t, TensAdd):\n        t1 = t.args[0]\n    elif isinstance(t, TensMul):\n        t1 = t\n    if t1:\n        pass\n    else:\n        t = eye(4)*t\n    return t",
                        "filename": "sympy/physics/hep/gamma_matrices.py",
                        "start_index": 21295,
                        "end_index": 24183,
                        "start_line": 642,
                        "end_line": 716,
                        "max_line": 716,
                        "git_instance": "github",
                        "repo_name": "testbed/sympy__sympy__1.12",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is part of the kahane_simplify() function and may contain the loop that incorrectly reverses the order of uncontracted gamma matrices."
                }
            ]
        },
        "solution_task": "- The issue is with the `kahane_simplify()` function which is reversing the order of uncontracted gamma matrices.\n- The relevant code snippet is in the file `sympy/physics/hep/gamma_matrices.py` in the function `kahane_simplify()`.\n\nTo fix the issue:\n- Locate the loop in `kahane_simplify()` that iterates over the indices and constructs the resulting expression with gamma matrices.\n- Ensure that the loop preserves the original order of uncontracted gamma matrices when constructing the `resulting_indices` list.\n- If the loop uses `insert(0, ...)` or similar methods that reverse the order, replace them with `append(...)` or adjust the logic to maintain the correct order.\n- After modifying the loop, re-run the assertion test to confirm that the order is now correct and the `AssertionError` is resolved.",
        "bouncer_response": {
            "score": 7,
            "criteria": "The RESPONSE provides clear and actionable guidance on how to address the bug in the kahane_simplify() function, which is reversing the order of uncontracted gamma matrices. It correctly identifies the need to locate and adjust the loop that constructs the resulting expression with gamma matrices to preserve the original order. The RESPONSE also suggests re-running the assertion test to confirm the fix, which is a good practice in software development.",
            "supporting_evidence": "The RESPONSE is highly relevant and offers actionable advice on how to fix the bug. It correctly identifies the location of the bug within the kahane_simplify() function and provides a general approach to fixing the loop that is causing the order reversal. The RESPONSE also includes links to the code snippets where the bug is likely to be found, which is helpful for someone looking to implement the fix. However, it does not provide the exact code change needed, which would have made it a complete solution.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711743264.6516402,
        "result": "- The issue is with the `kahane_simplify()` function which is reversing the order of uncontracted gamma matrices.\n- The relevant code snippet is in the file `sympy/physics/hep/gamma_matrices.py` in the function `kahane_simplify()`.\n\nTo fix the issue:\n- Locate the loop in `kahane_simplify()` that iterates over the indices and constructs the resulting expression with gamma matrices.\n- Ensure that the loop preserves the original order of uncontracted gamma matrices when constructing the `resulting_indices` list.\n- If the loop uses `insert(0, ...)` or similar methods that reverse the order, replace them with `append(...)` or adjust the logic to maintain the correct order.\n- After modifying the loop, re-run the assertion test to confirm that the order is now correct and the `AssertionError` is resolved.\n\n### Code snippets to check\n\n-  \u2192 [sympy](https://github.com/testbed/sympy__sympy__1.12/tree//sympy) \u2192 [physics](https://github.com/testbed/sympy__sympy__1.12/tree//sympy/physics) \u2192 [hep](https://github.com/testbed/sympy__sympy__1.12/tree//sympy/physics/hep)- [Lines 335 - 433](https://github.com/testbed/sympy__sympy__1.12/blob//sympy/physics/hep/gamma_matrices.py#L335-L433)\n\n This snippet contains the kahane_simplify() function which is where the bug is located. \n\n\n   - [Lines 434 - 509](https://github.com/testbed/sympy__sympy__1.12/blob//sympy/physics/hep/gamma_matrices.py#L434-L509)\n\n This snippet continues from snippet #1 and includes the algorithm details where the bug related to the order of gamma matrices is likely to be found. \n\n\n   - [Lines 558 - 641](https://github.com/testbed/sympy__sympy__1.12/blob//sympy/physics/hep/gamma_matrices.py#L558-L641)\n\n This snippet is part of the kahane_simplify() function and may contain the loop that incorrectly reverses the order of uncontracted gamma matrices. \n\n\n   - [Lines 642 - 716](https://github.com/testbed/sympy__sympy__1.12/blob//sympy/physics/hep/gamma_matrices.py#L642-L716)\n\n This snippet is part of the kahane_simplify() function and may contain the loop that incorrectly reverses the order of uncontracted gamma matrices."
    }
}