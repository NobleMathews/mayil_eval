{
    "id": "scikit-learn__scikit-learn-9274",
    "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
    "task_id": 3179416006766340423,
    "title": "Training MLP using l-bfgs limited to default l-bfgs maxiter value",
    "body": "#### Description\r\n\r\nTraining an MLP regressor (or classifier) using l-bfgs currently cannot run for more than (approx) 15000 iterations.\r\nThis artificial limit is caused by the call site to l-bfgs passing the MLP argument value \"max_iters\" to the argument for \"maxfun\" (maximum number of function calls), but not for \"maxiter\" (maximum number of iterations), so that no matter how large a number you pass as \"max_iters\" to train for MLP, the iterations are capped by the default value for maxiter (15000).\r\n\r\n#### Steps/Code to Reproduce\r\nFit an MLP for a problem that requires > 15000 iterations\r\n\r\nHere is an example (tested in python 2.7):\r\nhttps://gist.github.com/daniel-perry/d9e356a03936673e58e0ce47d5fc70ef\r\n\r\n(you will need data.npy from the gist linked to above)\r\n\r\n````\r\nfrom __future__ import print_function\r\nimport numpy as np\r\nfrom sklearn.neural_network import MLPRegressor\r\n\r\ntrain = np.load(\"data.npy\").tolist()\r\n\r\nmax_iter = 18000\r\nclf = MLPRegressor(max_iter=max_iter, activation='relu', solver='lbfgs', verbose=True)\r\n\r\nclf.fit(train[\"train_x\"],train[\"train_y\"])\r\n\r\nprint(\"score: \", clf.score(train[\"train_x\"],train[\"train_y\"]))\r\nprint(\"iters: \", clf.n_iter_, \" / \", max_iter)\r\n````\r\n\r\n#### Expected Results\r\n\r\nThe training should run for 18000 iterations.\r\n\r\n#### Actual Results\r\n\r\nThe training runs for 15000 iterations.\r\n\r\n#### Versions\r\n\r\nHere are my local version details, though the problem appears to exist on the current head, and so should exist for any python/sklearn versions.\r\n\r\n'Python', '2.7.12 (default, Jul  1 2016, 15:12:24) \\n[GCC 5.4.0 20160609]'\r\n'NumPy', '1.13.0'\r\n'SciPy', '0.19.1'\r\n'Scikit-Learn', '0.18'\r\n\r\n\r\n\n[WIP] FIX: use maxiter rather than maxfun in MultiLayerPerceptron with solver='lbfgs'\nIn my limited experience with LBFGS, the number of function calls is greater than the number of iterations.\r\n\r\nThe impact of this bug is that with solver='lbfgs' is probably not doing as many iterations as it should in master although I am not sure it matters that much in practice.\r\n\r\nTo get an idea how much funtion calls differ from iterations, I tweaked `examples/neural_networks/plot_mnist_filters.py` to be able to run for a few hundred iterations:\r\n\r\n```py\r\nmlp = MLPClassifier(hidden_layer_sizes=(100,), max_iter=1000, alpha=1e-4,\r\n                    solver='lbfgs', verbose=10, tol=1e-16, random_state=1,\r\n                    learning_rate_init=.1)\r\n```\r\n\r\nThe result: 393 iterations and 414 function calls.\r\n\r\nNot sure whether we nest to test this, and how to test it, suggestions more than welcome!\r\n\r\n- [ ] add a whats_new entry once there is agreement\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/scikit-learn__scikit-learn__0.22.git",
    "requested_commit": "",
    "mayil_response": "- Identify the `MLPRegressor` and `MLPClassifier` classes in the `_multilayer_perceptron.py` file.\n- Locate the `fit` method within these classes.\n- Within the `fit` method, find the conditional block where `self.solver == 'lbfgs'`.\n- Ensure that the `max_iter` parameter is passed correctly to the `_optimize_lbfgs` method.\n- In the `_optimize_lbfgs` method, ensure that the `maxiter` parameter is used correctly when calling the underlying L-BFGS optimizer.\n- If the `max_fun` parameter is being used instead of `max_iter` for the L-BFGS solver, replace it with `max_iter`.\n- Confirm that the `max_iter` parameter is used to control the maximum number of iterations and `max_fun` is used to control the maximum number of function calls, as per the documentation in the `MLPRegressor` and `MLPClassifier` class docstrings.\n- Ensure that the `n_iter_` attribute is set to the actual number of iterations performed by the L-BFGS solver after the optimization is complete.\n- Check that the `max_iter` parameter is correctly documented in the class docstrings and is consistent with the actual behavior of the code.\n- The changes should be made in a way that respects the existing API contracts and does not introduce backward-incompatible changes.\n\n### Code snippets to check\n\n-  \u2192 [sklearn](https://github.com/testbed/scikit-learn__scikit-learn__0.22/tree//sklearn) \u2192 [neural_network](https://github.com/testbed/scikit-learn__scikit-learn__0.22/tree//sklearn/neural_network)- [Lines 1259 - 1645](https://github.com/testbed/scikit-learn__scikit-learn__0.22/blob//sklearn/neural_network/_multilayer_perceptron.py#L1259-L1645)\n\n This snippet contains the definition of the MLPRegressor class, including the 'max_iter' and 'max_fun' parameters, which are directly related to the issue. \n\n\n   - [Lines 766 - 1645](https://github.com/testbed/scikit-learn__scikit-learn__0.22/blob//sklearn/neural_network/_multilayer_perceptron.py#L766-L1645)\n\n This snippet contains the definition of the MLPClassifier class, including the 'max_iter' and 'max_fun' parameters, which are directly related to the issue.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0005394999999999999,
        "snippet_processor": 0.08021,
        "issue_star_creation": 0.03338,
        "issue_star_solver": 0.08541,
        "bouncer": 0.023790000000000002
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711739737.155485,
        "relevant_snippets": [
            {
                "code": "for i in range(max_iterations):\n    if len(unlabeled_indices) == 0:\n        print(\"No unlabeled items left to label.\")\n        break\n    y_train = np.copy(y)\n    y_train[unlabeled_indices] = -1\n\n    lp_model = LabelSpreading(gamma=0.25, max_iter=20)\n    lp_model.fit(X, y_train)\n\n    predicted_labels = lp_model.transduction_[unlabeled_indices]\n    true_labels = y[unlabeled_indices]\n\n    cm = confusion_matrix(true_labels, predicted_labels, labels=lp_model.classes_)\n\n    print(\"Iteration %i %s\" % (i, 70 * \"_\"))\n    print(\n        \"Label Spreading model: %d labeled & %d unlabeled (%d total)\"\n        % (n_labeled_points, n_total_samples - n_labeled_points, n_total_samples)\n    )\n\n    print(classification_report(true_labels, predicted_labels))\n\n    print(\"Confusion matrix\")\n    print(cm)\n\n    # compute the entropies of transduced label distributions\n    pred_entropies = stats.distributions.entropy(lp_model.label_distributions_.T)\n\n    # select up to 5 digit examples that the classifier is most uncertain about\n    uncertainty_index = np.argsort(pred_entropies)[::-1]\n    uncertainty_index = uncertainty_index[\n        np.in1d(uncertainty_index, unlabeled_indices)\n    ][:5]\n\n    # keep track of indices that we get labels for\n    delete_indices = np.array([], dtype=int)\n\n    # for more than 5 iterations, visualize the gain only on the first 5\n    if i < 5:\n        f.text(\n            0.05,\n            (1 - (i + 1) * 0.183),\n            \"model %d\\n\\nfit with\\n%d labels\" % ((i + 1), i * 5 + 10),\n            size=10,\n        )\n    for index, image_index in enumerate(uncertainty_index):\n        image = images[image_index]\n\n        # for more than 5 iterations, visualize the gain only on the first 5\n        if i < 5:\n            sub = f.add_subplot(5, 5, index + 1 + (5 * i))\n            sub.imshow(image, cmap=plt.cm.gray_r, interpolation=\"none\")\n            sub.set_title(\n                \"predict: %i\\ntrue: %i\"\n                % (lp_model.transduction_[image_index], y[image_index]),\n                size=10,\n            )\n            sub.axis(\"off\")\n\n        # labeling 5 points, remote from labeled set\n        (delete_index,) = np.where(unlabeled_indices == image_index)\n        delete_indices = np.concatenate((delete_indices, delete_index))\n\n    unlabeled_indices = np.delete(unlabeled_indices, delete_indices)\n    n_labeled_points += len(uncertainty_index)\n\nf.suptitle(\n    (\n        \"Active learning with Label Propagation.\\nRows show 5 most \"\n        \"uncertain labels to learn with the next model.\"\n    ),\n    y=1.15,\n)\nplt.subplots_adjust(left=0.2, bottom=0.03, right=0.9, top=0.9, wspace=0.2, hspace=0.85)\nplt.show()",
                "filename": "examples/semi_supervised/plot_label_propagation_digits_active_learning.py",
                "start_index": 1557,
                "end_index": 4202,
                "start_line": 50,
                "end_line": 125,
                "max_line": 125,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            },
            {
                "code": "try:\n        # be robust to the max_iter=0 edge case, see:\n        # https://github.com/scikit-learn/scikit-learn/issues/4134",
                "filename": "sklearn/covariance/_graph_lasso.py",
                "start_index": 3490,
                "end_index": 3615,
                "start_line": 106,
                "end_line": 108,
                "max_line": 1094,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            },
            {
                "code": "while(iter < max_iter)",
                "filename": "sklearn/svm/src/liblinear/linear.cpp",
                "start_index": 11787,
                "end_index": 11809,
                "start_line": 624,
                "end_line": 1915,
                "max_line": 3075,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            },
            {
                "code": "for i in range(max_iter):",
                "filename": "sklearn/covariance/_graph_lasso.py",
                "start_index": 3750,
                "end_index": 3775,
                "start_line": 112,
                "end_line": 112,
                "max_line": 1094,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            },
            {
                "code": "if (iter >= max_iter)\n\t\tinfo(\"\\nWARNING: reaching max number of iterations\\n\");\n\n\t// calculate objective value\n\tdouble v = 0;\n\tint nSV = 0;\n\tfor(i=0;i<w_size*nr_class;i++)\n\t\tv += w[i]*w[i];\n\tv = 0.5*v;\n\tfor(i=0;i<l*nr_class;i++)\n\t{\n\t\tv += alpha[i];\n\t\tif(fabs(alpha[i]) > 0)\n\t\t\tnSV++;\n\t}\n\tfor(i=0;i<l;i++)\n\t\tv -= alpha[i*nr_class+(int)prob->y[i]];\n\tinfo(\"Objective value = %lf\\n\",v);\n\tinfo(\"nSV = %d\\n\",nSV);\n\n\tdelete [] alpha;\n\tdelete [] alpha_new;\n\tdelete [] index;\n\tdelete [] QD;\n\tdelete [] d_ind;\n\tdelete [] d_val;\n\tdelete [] alpha_index;\n\tdelete [] y_index;\n\tdelete [] active_size_i;\n\treturn iter;\n}",
                "filename": "sklearn/svm/src/liblinear/linear.cpp",
                "start_index": 14734,
                "end_index": 15337,
                "start_line": 757,
                "end_line": 3075,
                "max_line": 3075,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            },
            {
                "code": "while(iter < max_iter)\n\t{\n\t\tdouble stopping = -INF;\n\t\tfor(i=0;i<active_size;i++)\n\t\t{\n\t\t\tint j = i+bounded_rand_int(active_size-i);\n\t\t\tswap(index[i], index[j]);\n\t\t}\n\t\tfor(s=0;s<active_size;s++)\n\t\t{\n\t\t\ti = index[s];\n\t\t\tdouble Ai = QD[i];\n\t\t\tdouble *alpha_i = &alpha[i*nr_class];\n\t\t\tint *alpha_index_i = &alpha_index[i*nr_class];\n\n\t\t\tif(Ai > 0)\n\t\t\t{\n\t\t\t\tfor(m=0;m<active_size_i[i];m++)\n\t\t\t\t\tG[m] = 1;\n\t\t\t\tif(y_index[i] < active_size_i[i])\n\t\t\t\t\tG[y_index[i]] = 0;\n\n\t\t\t\tfeature_node *xi = prob->x[i];\n\t\t\t\twhile(xi->index!= -1)\n\t\t\t\t{\n\t\t\t\t\tdouble *w_i = &w[(xi->index-1)*nr_class];\n\t\t\t\t\tfor(m=0;m<active_size_i[i];m++)\n\t\t\t\t\t\tG[m] += w_i[alpha_index_i[m]]*(xi->value);\n\t\t\t\t\txi++;\n\t\t\t\t}\n\n\t\t\t\tdouble minG = INF;\n\t\t\t\tdouble maxG = -INF;\n\t\t\t\tfor(m=0;m<active_size_i[i];m++)\n\t\t\t\t{\n\t\t\t\t\tif(alpha_i[alpha_index_i[m]] < 0 && G[m] < minG)\n\t\t\t\t\t\tminG = G[m];\n\t\t\t\t\tif(G[m] > maxG)\n\t\t\t\t\t\tmaxG = G[m];\n\t\t\t\t}\n\t\t\t\tif(y_index[i] < active_size_i[i])\n\t\t\t\t\tif(alpha_i[(int) prob->y[i]] < C[GETI(i)] && G[y_index[i]] < minG)\n\t\t\t\t\t\tminG = G[y_index[i]];\n\n\t\t\t\tfor(m=0;m<active_size_i[i];m++)\n\t\t\t\t{\n\t\t\t\t\tif(be_shrunk(i, m, y_index[i], alpha_i[alpha_index_i[m]], minG))\n\t\t\t\t\t{\n\t\t\t\t\t\tactive_size_i[i]--;\n\t\t\t\t\t\twhile(active_size_i[i]>m)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(!be_shrunk(i, active_size_i[i], y_index[i],\n\t\t\t\t\t\t\t\t\t\t\talpha_i[alpha_index_i[active_size_i[i]]], minG))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tswap(alpha_index_i[m], alpha_index_i[active_size_i[i]]);\n\t\t\t\t\t\t\t\tswap(G[m], G[active_size_i[i]]);\n\t\t\t\t\t\t\t\tif(y_index[i] == active_size_i[i])\n\t\t\t\t\t\t\t\t\ty_index[i] = m;\n\t\t\t\t\t\t\t\telse if(y_index[i] == m)\n\t\t\t\t\t\t\t\t\ty_index[i] = active_size_i[i];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tactive_size_i[i]--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(active_size_i[i] <= 1)\n\t\t\t\t{\n\t\t\t\t\tactive_size--;\n\t\t\t\t\tswap(index[s], index[active_size]);\n\t\t\t\t\ts--;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif(maxG-minG <= 1e-12)\n\t\t\t\t\tcontinue;\n\t\t\t\telse\n\t\t\t\t\tstopping = max(maxG - minG, stopping);\n\n\t\t\t\tfor(m=0;m<active_size_i[i];m++)\n\t\t\t\t\tB[m] = G[m] - Ai*alpha_i[alpha_index_i[m]] ;\n\n\t\t\t\tsolve_sub_problem(Ai, y_index[i], C[GETI(i)], active_size_i[i], alpha_new);\n\t\t\t\tint nz_d = 0;\n\t\t\t\tfor(m=0;m<active_size_i[i];m++)\n\t\t\t\t{\n\t\t\t\t\tdouble d = alpha_new[m] - alpha_i[alpha_index_i[m]];\n\t\t\t\t\talpha_i[alpha_index_i[m]] = alpha_new[m];\n\t\t\t\t\tif(fabs(d) >= 1e-12)\n\t\t\t\t\t{\n\t\t\t\t\t\td_ind[nz_d] = alpha_index_i[m];\n\t\t\t\t\t\td_val[nz_d] = d;\n\t\t\t\t\t\tnz_d++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\txi = prob->x[i];\n\t\t\t\twhile(xi->index != -1)\n\t\t\t\t{\n\t\t\t\t\tdouble *w_i = &w[(xi->index-1)*nr_class];\n\t\t\t\t\tfor(m=0;m<nz_d;m++)\n\t\t\t\t\t\tw_i[d_ind[m]] += d_val[m]*xi->value;\n\t\t\t\t\txi++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\titer++;\n\t\tif(iter % 10 == 0)\n\t\t{\n\t\t\tinfo(\".\");\n\t\t}\n\n\t\tif(stopping < eps_shrink)\n\t\t{\n\t\t\tif(stopping < eps && start_from_all == true)\n\t\t\t\tbreak;\n\t\t\telse\n\t\t\t{\n\t\t\t\tactive_size = l;\n\t\t\t\tfor(i=0;i<l;i++)\n\t\t\t\t\tactive_size_i[i] = nr_class;\n\t\t\t\tinfo(\"*\");\n\t\t\t\teps_shrink = max(eps_shrink/2, eps);\n\t\t\t\tstart_from_all = true;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tstart_from_all = false;\n\t}\n\n\tinfo(\"\\noptimization finished, #iter = %d\\n\",iter);",
                "filename": "sklearn/svm/src/liblinear/linear.cpp",
                "start_index": 11787,
                "end_index": 14732,
                "start_line": 624,
                "end_line": 1427,
                "max_line": 3075,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            },
            {
                "code": "\"\"\"Multi-layer Perceptron regressor.\n\n    This model optimizes the squared error using LBFGS or stochastic gradient\n    descent.\n\n    .. versionadded:: 0.18\n\n    Parameters\n    ----------\n    hidden_layer_sizes : array-like of shape(n_layers - 2,), default=(100,)\n        The ith element represents the number of neurons in the ith\n        hidden layer.\n\n    activation : {'identity', 'logistic', 'tanh', 'relu'}, default='relu'\n        Activation function for the hidden layer.\n\n        - 'identity', no-op activation, useful to implement linear bottleneck,\n          returns f(x) = x\n\n        - 'logistic', the logistic sigmoid function,\n          returns f(x) = 1 / (1 + exp(-x)).\n\n        - 'tanh', the hyperbolic tan function,\n          returns f(x) = tanh(x).\n\n        - 'relu', the rectified linear unit function,\n          returns f(x) = max(0, x)\n\n    solver : {'lbfgs', 'sgd', 'adam'}, default='adam'\n        The solver for weight optimization.\n\n        - 'lbfgs' is an optimizer in the family of quasi-Newton methods.\n\n        - 'sgd' refers to stochastic gradient descent.\n\n        - 'adam' refers to a stochastic gradient-based optimizer proposed by\n          Kingma, Diederik, and Jimmy Ba\n\n        Note: The default solver 'adam' works pretty well on relatively\n        large datasets (with thousands of training samples or more) in terms of\n        both training time and validation score.\n        For small datasets, however, 'lbfgs' can converge faster and perform\n        better.\n\n    alpha : float, default=0.0001\n        Strength of the L2 regularization term. The L2 regularization term\n        is divided by the sample size when added to the loss.\n\n    batch_size : int, default='auto'\n        Size of minibatches for stochastic optimizers.\n        If the solver is 'lbfgs', the regressor will not use minibatch.\n        When set to \"auto\", `batch_size=min(200, n_samples)`.\n\n    learning_rate : {'constant', 'invscaling', 'adaptive'}, default='constant'\n        Learning rate schedule for weight updates.\n\n        - 'constant' is a constant learning rate given by\n          'learning_rate_init'.\n\n        - 'invscaling' gradually decreases the learning rate ``learning_rate_``\n          at each time step 't' using an inverse scaling exponent of 'power_t'.\n          effective_learning_rate = learning_rate_init / pow(t, power_t)\n\n        - 'adaptive' keeps the learning rate constant to\n          'learning_rate_init' as long as training loss keeps decreasing.\n          Each time two consecutive epochs fail to decrease training loss by at\n          least tol, or fail to increase validation score by at least tol if\n          'early_stopping' is on, the current learning rate is divided by 5.\n\n        Only used when solver='sgd'.\n\n    learning_rate_init : float, default=0.001\n        The initial learning rate used. It controls the step-size\n        in updating the weights. Only used when solver='sgd' or 'adam'.\n\n    power_t : float, default=0.5\n        The exponent for inverse scaling learning rate.\n        It is used in updating effective learning rate when the learning_rate\n        is set to 'invscaling'. Only used when solver='sgd'.\n\n    max_iter : int, default=200\n        Maximum number of iterations. The solver iterates until convergence\n        (determined by 'tol') or this number of iterations. For stochastic\n        solvers ('sgd', 'adam'), note that this determines the number of epochs\n        (how many times each data point will be used), not the number of\n        gradient steps.\n\n    shuffle : bool, default=True\n        Whether to shuffle samples in each iteration. Only used when\n        solver='sgd' or 'adam'.\n\n    random_state : int, RandomState instance, default=None\n        Determines random number generation for weights and bias\n        initialization, train-test split if early stopping is used, and batch\n        sampling when solver='sgd' or 'adam'.\n        Pass an int for reproducible results across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    tol : float, default=1e-4\n        Tolerance for the optimization. When the loss or score is not improving\n        by at least ``tol`` for ``n_iter_no_change`` consecutive iterations,\n        unless ``learning_rate`` is set to 'adaptive', convergence is\n        considered to be reached and training stops.\n\n    verbose : bool, default=False\n        Whether to print progress messages to stdout.\n\n    warm_start : bool, default=False\n        When set to True, reuse the solution of the previous\n        call to fit as initialization, otherwise, just erase the\n        previous solution. See :term:`the Glossary <warm_start>`.\n\n    momentum : float, default=0.9\n        Momentum for gradient descent update. Should be between 0 and 1. Only\n        used when solver='sgd'.\n\n    nesterovs_momentum : bool, default=True\n        Whether to use Nesterov's momentum. Only used when solver='sgd' and\n        momentum > 0.\n\n    early_stopping : bool, default=False\n        Whether to use early stopping to terminate training when validation\n        score is not improving. If set to True, it will automatically set\n        aside ``validation_fraction`` of training data as validation and\n        terminate training when validation score is not improving by at\n        least ``tol`` for ``n_iter_no_change`` consecutive epochs.\n        Only effective when solver='sgd' or 'adam'.\n\n    validation_fraction : float, default=0.1\n        The proportion of training data to set aside as validation set for\n        early stopping. Must be between 0 and 1.\n        Only used if early_stopping is True.\n\n    beta_1 : float, default=0.9\n        Exponential decay rate for estimates of first moment vector in adam,\n        should be in [0, 1). Only used when solver='adam'.\n\n    beta_2 : float, default=0.999\n        Exponential decay rate for estimates of second moment vector in adam,\n        should be in [0, 1). Only used when solver='adam'.\n\n    epsilon : float, default=1e-8\n        Value for numerical stability in adam. Only used when solver='adam'.\n\n    n_iter_no_change : int, default=10\n        Maximum number of epochs to not meet ``tol`` improvement.\n        Only effective when solver='sgd' or 'adam'.\n\n        .. versionadded:: 0.20\n\n    max_fun : int, default=15000\n        Only used when solver='lbfgs'. Maximum number of function calls.\n        The solver iterates until convergence (determined by ``tol``), number\n        of iterations reaches max_iter, or this number of function calls.\n        Note that number of function calls will be greater than or equal to\n        the number of iterations for the MLPRegressor.\n\n        .. versionadded:: 0.22\n\n    Attributes\n    ----------\n    loss_ : float\n        The current loss computed with the loss function.\n\n    best_loss_ : float\n        The minimum loss reached by the solver throughout fitting.\n        If `early_stopping=True`, this attribute is set to `None`. Refer to\n        the `best_validation_score_` fitted attribute instead.\n        Only accessible when solver='sgd' or 'adam'.\n\n    loss_curve_ : list of shape (`n_iter_`,)\n        Loss value evaluated at the end of each training step.\n        The ith element in the list represents the loss at the ith iteration.\n        Only accessible when solver='sgd' or 'adam'.\n\n    validation_scores_ : list of shape (`n_iter_`,) or None\n        The score at each iteration on a held-out validation set. The score\n        reported is the R2 score. Only available if `early_stopping=True`,\n        otherwise the attribute is set to `None`.\n        Only accessible when solver='sgd' or 'adam'.\n\n    best_validation_score_ : float or None\n        The best validation score (i.e. R2 score) that triggered the\n        early stopping. Only available if `early_stopping=True`, otherwise the\n        attribute is set to `None`.\n        Only accessible when solver='sgd' or 'adam'.\n\n    t_ : int\n        The number of training samples seen by the solver during fitting.\n        Mathematically equals `n_iters * X.shape[0]`, it means\n        `time_step` and it is used by optimizer's learning rate scheduler.\n\n    coefs_ : list of shape (n_layers - 1,)\n        The ith element in the list represents the weight matrix corresponding\n        to layer i.\n\n    intercepts_ : list of shape (n_layers - 1,)\n        The ith element in the list represents the bias vector corresponding to\n        layer i + 1.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_iter_ : int\n        The number of iterations the solver has run.\n\n    n_layers_ : int\n        Number of layers.\n\n    n_outputs_ : int\n        Number of outputs.\n\n    out_activation_ : str\n        Name of the output activation function.\n\n    See Also\n    --------\n    BernoulliRBM : Bernoulli Restricted Boltzmann Machine (RBM).\n    MLPClassifier : Multi-layer Perceptron classifier.\n    sklearn.linear_model.SGDRegressor : Linear model fitted by minimizing\n        a regularized empirical loss with SGD.\n\n    Notes\n    -----\n    MLPRegressor trains iteratively since at each time step\n    the partial derivatives of the loss function with respect to the model\n    parameters are computed to update the parameters.\n\n    It can also have a regularization term added to the loss function\n    that shrinks model parameters to prevent overfitting.\n\n    This implementation works with data represented as dense and sparse numpy\n    arrays of floating point values.\n\n    References\n    ----------\n    Hinton, Geoffrey E. \"Connectionist learning procedures.\"\n    Artificial intelligence 40.1 (1989): 185-234.\n\n    Glorot, Xavier, and Yoshua Bengio.\n    \"Understanding the difficulty of training deep feedforward neural networks.\"\n    International Conference on Artificial Intelligence and Statistics. 2010.\n\n    :arxiv:`He, Kaiming, et al (2015). \"Delving deep into rectifiers:\n    Surpassing human-level performance on imagenet classification.\" <1502.01852>`\n\n    :arxiv:`Kingma, Diederik, and Jimmy Ba (2014)\n    \"Adam: A method for stochastic optimization.\" <1412.6980>`\n\n    Examples\n    --------\n    >>> from sklearn.neural_network import MLPRegressor\n    >>> from sklearn.datasets import make_regression\n    >>> from sklearn.model_selection import train_test_split\n    >>> X, y = make_regression(n_samples=200, random_state=1)\n    >>> X_train, X_test, y_train, y_test = train_test_split(X, y,\n    ...                                                     random_state=1)\n    >>> regr = MLPRegressor(random_state=1, max_iter=500).fit(X_train, y_train)\n    >>> regr.predict(X_test[:2])\n    array([-0.9..., -7.1...])\n    >>> regr.score(X_test, y_test)\n    0.4...\n    \"\"\"",
                "filename": "sklearn/neural_network/_multilayer_perceptron.py",
                "start_index": 46195,
                "end_index": 57128,
                "start_line": 1259,
                "end_line": 1645,
                "max_line": 1646,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            },
            {
                "code": "\"\"\"\n================================================\nVarying regularization in Multi-layer Perceptron\n================================================\n\nA comparison of different values for regularization parameter 'alpha' on\nsynthetic datasets. The plot shows that different alphas yield different\ndecision functions.\n\nAlpha is a parameter for regularization term, aka penalty term, that combats\noverfitting by constraining the size of the weights. Increasing alpha may fix\nhigh variance (a sign of overfitting) by encouraging smaller weights, resulting\nin a decision boundary plot that appears with lesser curvatures.\nSimilarly, decreasing alpha may fix high bias (a sign of underfitting) by\nencouraging larger weights, potentially resulting in a more complicated\ndecision boundary.\n\n\"\"\"\n\n# Author: Issam H. Laradji\n# License: BSD 3 clause\n\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom matplotlib.colors import ListedColormap\n\nfrom sklearn.datasets import make_circles, make_classification, make_moons\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nh = 0.02  # step size in the mesh\n\nalphas = np.logspace(-1, 1, 5)\n\nclassifiers = []\nnames = []\nfor alpha in alphas:\n    classifiers.append(\n        make_pipeline(\n            StandardScaler(),\n            MLPClassifier(\n                solver=\"lbfgs\",\n                alpha=alpha,\n                random_state=1,\n                max_iter=2000,\n                early_stopping=True,\n                hidden_layer_sizes=[10, 10],\n            ),\n        )\n    )\n    names.append(f\"alpha {alpha:.2f}\")\n\nX, y = make_classification(\n    n_features=2, n_redundant=0, n_informative=2, random_state=0, n_clusters_per_class=1\n)\nrng = np.random.RandomState(2)\nX += 2 * rng.uniform(size=X.shape)\nlinearly_separable = (X, y)\n\ndatasets = [\n    make_moons(noise=0.3, random_state=0),\n    make_circles(noise=0.2, factor=0.5, random_state=1),\n    linearly_separable,\n]\n\nfigure = plt.figure(figsize=(17, 9))\ni = 1\n# iterate over datasets",
                "filename": "examples/neural_networks/plot_mlp_alpha.py",
                "start_index": 0,
                "end_index": 2131,
                "start_line": 1,
                "end_line": 70,
                "max_line": 147,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            },
            {
                "code": "@ignore_warnings(category=FutureWarning)\ndef check_non_transformer_estimators_n_iter(name, estimator_orig):\n    # Test that estimators that are not transformers with a parameter\n    # max_iter, return the attribute of n_iter_ at least 1.\n\n    # These models are dependent on external solvers like\n    # libsvm and accessing the iter parameter is non-trivial.\n    # SelfTrainingClassifier does not perform an iteration if all samples are\n    # labeled, hence n_iter_ = 0 is valid.\n    not_run_check_n_iter = [\n        \"Ridge\",\n        \"RidgeClassifier\",\n        \"RandomizedLasso\",\n        \"LogisticRegressionCV\",\n        \"LinearSVC\",\n        \"LogisticRegression\",\n        \"SelfTrainingClassifier\",\n    ]\n\n    # Tested in test_transformer_n_iter\n    not_run_check_n_iter += CROSS_DECOMPOSITION\n    if name in not_run_check_n_iter:\n        return\n\n    # LassoLars stops early for the default alpha=1.0 the iris dataset.\n    if name == \"LassoLars\":\n        estimator = clone(estimator_orig).set_params(alpha=0.0)\n    else:\n        estimator = clone(estimator_orig)\n    if hasattr(estimator, \"max_iter\"):\n        iris = load_iris()\n        X, y_ = iris.data, iris.target\n        y_ = _enforce_estimator_tags_y(estimator, y_)\n\n        set_random_state(estimator, 0)\n\n        X = _enforce_estimator_tags_X(estimator_orig, X)\n\n        estimator.fit(X, y_)\n\n        assert np.all(estimator.n_iter_ >= 1)\n\n\n@ignore_warnings(category=FutureWarning)\ndef check_transformer_n_iter(name, estimator_orig):\n    # Test that transformers with a parameter max_iter, return the\n    # attribute of n_iter_ at least 1.\n    estimator = clone(estimator_orig)\n    if hasattr(estimator, \"max_iter\"):\n        if name in CROSS_DECOMPOSITION:\n            # Check using default data\n            X = [[0.0, 0.0, 1.0], [1.0, 0.0, 0.0], [2.0, 2.0, 2.0], [2.0, 5.0, 4.0]]\n            y_ = [[0.1, -0.2], [0.9, 1.1], [0.1, -0.5], [0.3, -0.2]]\n\n        else:\n            X, y_ = make_blobs(\n                n_samples=30,\n                centers=[[0, 0, 0], [1, 1, 1]],\n                random_state=0,\n                n_features=2,\n                cluster_std=0.1,\n            )\n            X = _enforce_estimator_tags_X(estimator_orig, X)\n        set_random_state(estimator, 0)\n        estimator.fit(X, y_)\n\n        # These return a n_iter per component.\n        if name in CROSS_DECOMPOSITION:\n            for iter_ in estimator.n_iter_:\n                assert iter_ >= 1\n        else:\n            assert estimator.n_iter_ >= 1\n\n\n@ignore_warnings(category=FutureWarning)\ndef check_get_params_invariance(name, estimator_orig):\n    # Checks if get_params(deep=False) is a subset of get_params(deep=True)\n    e = clone(estimator_orig)\n\n    shallow_params = e.get_params(deep=False)\n    deep_params = e.get_params(deep=True)\n\n    assert all(item in deep_params.items() for item in shallow_params.items())",
                "filename": "sklearn/utils/estimator_checks.py",
                "start_index": 126361,
                "end_index": 129224,
                "start_line": 181,
                "end_line": 3662,
                "max_line": 4639,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            },
            {
                "code": "\"\"\"Multi-layer Perceptron classifier.\n\n    This model optimizes the log-loss function using LBFGS or stochastic\n    gradient descent.\n\n    .. versionadded:: 0.18\n\n    Parameters\n    ----------\n    hidden_layer_sizes : array-like of shape(n_layers - 2,), default=(100,)\n        The ith element represents the number of neurons in the ith\n        hidden layer.\n\n    activation : {'identity', 'logistic', 'tanh', 'relu'}, default='relu'\n        Activation function for the hidden layer.\n\n        - 'identity', no-op activation, useful to implement linear bottleneck,\n          returns f(x) = x\n\n        - 'logistic', the logistic sigmoid function,\n          returns f(x) = 1 / (1 + exp(-x)).\n\n        - 'tanh', the hyperbolic tan function,\n          returns f(x) = tanh(x).\n\n        - 'relu', the rectified linear unit function,\n          returns f(x) = max(0, x)\n\n    solver : {'lbfgs', 'sgd', 'adam'}, default='adam'\n        The solver for weight optimization.\n\n        - 'lbfgs' is an optimizer in the family of quasi-Newton methods.\n\n        - 'sgd' refers to stochastic gradient descent.\n\n        - 'adam' refers to a stochastic gradient-based optimizer proposed\n          by Kingma, Diederik, and Jimmy Ba\n\n        Note: The default solver 'adam' works pretty well on relatively\n        large datasets (with thousands of training samples or more) in terms of\n        both training time and validation score.\n        For small datasets, however, 'lbfgs' can converge faster and perform\n        better.\n\n    alpha : float, default=0.0001\n        Strength of the L2 regularization term. The L2 regularization term\n        is divided by the sample size when added to the loss.\n\n    batch_size : int, default='auto'\n        Size of minibatches for stochastic optimizers.\n        If the solver is 'lbfgs', the classifier will not use minibatch.\n        When set to \"auto\", `batch_size=min(200, n_samples)`.\n\n    learning_rate : {'constant', 'invscaling', 'adaptive'}, default='constant'\n        Learning rate schedule for weight updates.\n\n        - 'constant' is a constant learning rate given by\n          'learning_rate_init'.\n\n        - 'invscaling' gradually decreases the learning rate at each\n          time step 't' using an inverse scaling exponent of 'power_t'.\n          effective_learning_rate = learning_rate_init / pow(t, power_t)\n\n        - 'adaptive' keeps the learning rate constant to\n          'learning_rate_init' as long as training loss keeps decreasing.\n          Each time two consecutive epochs fail to decrease training loss by at\n          least tol, or fail to increase validation score by at least tol if\n          'early_stopping' is on, the current learning rate is divided by 5.\n\n        Only used when ``solver='sgd'``.\n\n    learning_rate_init : float, default=0.001\n        The initial learning rate used. It controls the step-size\n        in updating the weights. Only used when solver='sgd' or 'adam'.\n\n    power_t : float, default=0.5\n        The exponent for inverse scaling learning rate.\n        It is used in updating effective learning rate when the learning_rate\n        is set to 'invscaling'. Only used when solver='sgd'.\n\n    max_iter : int, default=200\n        Maximum number of iterations. The solver iterates until convergence\n        (determined by 'tol') or this number of iterations. For stochastic\n        solvers ('sgd', 'adam'), note that this determines the number of epochs\n        (how many times each data point will be used), not the number of\n        gradient steps.\n\n    shuffle : bool, default=True\n        Whether to shuffle samples in each iteration. Only used when\n        solver='sgd' or 'adam'.\n\n    random_state : int, RandomState instance, default=None\n        Determines random number generation for weights and bias\n        initialization, train-test split if early stopping is used, and batch\n        sampling when solver='sgd' or 'adam'.\n        Pass an int for reproducible results across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    tol : float, default=1e-4\n        Tolerance for the optimization. When the loss or score is not improving\n        by at least ``tol`` for ``n_iter_no_change`` consecutive iterations,\n        unless ``learning_rate`` is set to 'adaptive', convergence is\n        considered to be reached and training stops.\n\n    verbose : bool, default=False\n        Whether to print progress messages to stdout.\n\n    warm_start : bool, default=False\n        When set to True, reuse the solution of the previous\n        call to fit as initialization, otherwise, just erase the\n        previous solution. See :term:`the Glossary <warm_start>`.\n\n    momentum : float, default=0.9\n        Momentum for gradient descent update. Should be between 0 and 1. Only\n        used when solver='sgd'.\n\n    nesterovs_momentum : bool, default=True\n        Whether to use Nesterov's momentum. Only used when solver='sgd' and\n        momentum > 0.\n\n    early_stopping : bool, default=False\n        Whether to use early stopping to terminate training when validation\n        score is not improving. If set to true, it will automatically set\n        aside 10% of training data as validation and terminate training when\n        validation score is not improving by at least tol for\n        ``n_iter_no_change`` consecutive epochs. The split is stratified,\n        except in a multilabel setting.\n        If early stopping is False, then the training stops when the training\n        loss does not improve by more than tol for n_iter_no_change consecutive\n        passes over the training set.\n        Only effective when solver='sgd' or 'adam'.\n\n    validation_fraction : float, default=0.1\n        The proportion of training data to set aside as validation set for\n        early stopping. Must be between 0 and 1.\n        Only used if early_stopping is True.\n\n    beta_1 : float, default=0.9\n        Exponential decay rate for estimates of first moment vector in adam,\n        should be in [0, 1). Only used when solver='adam'.\n\n    beta_2 : float, default=0.999\n        Exponential decay rate for estimates of second moment vector in adam,\n        should be in [0, 1). Only used when solver='adam'.\n\n    epsilon : float, default=1e-8\n        Value for numerical stability in adam. Only used when solver='adam'.\n\n    n_iter_no_change : int, default=10\n        Maximum number of epochs to not meet ``tol`` improvement.\n        Only effective when solver='sgd' or 'adam'.\n\n        .. versionadded:: 0.20\n\n    max_fun : int, default=15000\n        Only used when solver='lbfgs'. Maximum number of loss function calls.\n        The solver iterates until convergence (determined by 'tol'), number\n        of iterations reaches max_iter, or this number of loss function calls.\n        Note that number of loss function calls will be greater than or equal\n        to the number of iterations for the `MLPClassifier`.\n\n        .. versionadded:: 0.22\n\n    Attributes\n    ----------\n    classes_ : ndarray or list of ndarray of shape (n_classes,)\n        Class labels for each output.\n\n    loss_ : float\n        The current loss computed with the loss function.\n\n    best_loss_ : float or None\n        The minimum loss reached by the solver throughout fitting.\n        If `early_stopping=True`, this attribute is set to `None`. Refer to\n        the `best_validation_score_` fitted attribute instead.\n\n    loss_curve_ : list of shape (`n_iter_`,)\n        The ith element in the list represents the loss at the ith iteration.\n\n    validation_scores_ : list of shape (`n_iter_`,) or None\n        The score at each iteration on a held-out validation set. The score\n        reported is the accuracy score. Only available if `early_stopping=True`,\n        otherwise the attribute is set to `None`.\n\n    best_validation_score_ : float or None\n        The best validation score (i.e. accuracy score) that triggered the\n        early stopping. Only available if `early_stopping=True`, otherwise the\n        attribute is set to `None`.\n\n    t_ : int\n        The number of training samples seen by the solver during fitting.\n\n    coefs_ : list of shape (n_layers - 1,)\n        The ith element in the list represents the weight matrix corresponding\n        to layer i.\n\n    intercepts_ : list of shape (n_layers - 1,)\n        The ith element in the list represents the bias vector corresponding to\n        layer i + 1.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_iter_ : int\n        The number of iterations the solver has run.\n\n    n_layers_ : int\n        Number of layers.\n\n    n_outputs_ : int\n        Number of outputs.\n\n    out_activation_ : str\n        Name of the output activation function.\n\n    See Also\n    --------\n    MLPRegressor : Multi-layer Perceptron regressor.\n    BernoulliRBM : Bernoulli Restricted Boltzmann Machine (RBM).\n\n    Notes\n    -----\n    MLPClassifier trains iteratively since at each time step\n    the partial derivatives of the loss function with respect to the model\n    parameters are computed to update the parameters.\n\n    It can also have a regularization term added to the loss function\n    that shrinks model parameters to prevent overfitting.\n\n    This implementation works with data represented as dense numpy arrays or\n    sparse scipy arrays of floating point values.\n\n    References\n    ----------\n    Hinton, Geoffrey E. \"Connectionist learning procedures.\"\n    Artificial intelligence 40.1 (1989): 185-234.\n\n    Glorot, Xavier, and Yoshua Bengio.\n    \"Understanding the difficulty of training deep feedforward neural networks.\"\n    International Conference on Artificial Intelligence and Statistics. 2010.\n\n    :arxiv:`He, Kaiming, et al (2015). \"Delving deep into rectifiers:\n    Surpassing human-level performance on imagenet classification.\" <1502.01852>`\n\n    :arxiv:`Kingma, Diederik, and Jimmy Ba (2014)\n    \"Adam: A method for stochastic optimization.\" <1412.6980>`\n\n    Examples\n    --------\n    >>> from sklearn.neural_network import MLPClassifier\n    >>> from sklearn.datasets import make_classification\n    >>> from sklearn.model_selection import train_test_split\n    >>> X, y = make_classification(n_samples=100, random_state=1)\n    >>> X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y,\n    ...                                                     random_state=1)\n    >>> clf = MLPClassifier(random_state=1, max_iter=300).fit(X_train, y_train)\n    >>> clf.predict_proba(X_test[:1])\n    array([[0.038..., 0.961...]])\n    >>> clf.predict(X_test[:5, :])\n    array([1, 0, 1, 0, 1])\n    >>> clf.score(X_test, y_test)\n    0.8...\n    \"\"\"",
                "filename": "sklearn/neural_network/_multilayer_perceptron.py",
                "start_index": 27626,
                "end_index": 38494,
                "start_line": 766,
                "end_line": 1645,
                "max_line": 1646,
                "git_instance": "github",
                "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "sklearn/neural_network/_multilayer_perceptron.py": [
                {
                    "chunk": {
                        "code": "\"\"\"Multi-layer Perceptron regressor.\n\n    This model optimizes the squared error using LBFGS or stochastic gradient\n    descent.\n\n    .. versionadded:: 0.18\n\n    Parameters\n    ----------\n    hidden_layer_sizes : array-like of shape(n_layers - 2,), default=(100,)\n        The ith element represents the number of neurons in the ith\n        hidden layer.\n\n    activation : {'identity', 'logistic', 'tanh', 'relu'}, default='relu'\n        Activation function for the hidden layer.\n\n        - 'identity', no-op activation, useful to implement linear bottleneck,\n          returns f(x) = x\n\n        - 'logistic', the logistic sigmoid function,\n          returns f(x) = 1 / (1 + exp(-x)).\n\n        - 'tanh', the hyperbolic tan function,\n          returns f(x) = tanh(x).\n\n        - 'relu', the rectified linear unit function,\n          returns f(x) = max(0, x)\n\n    solver : {'lbfgs', 'sgd', 'adam'}, default='adam'\n        The solver for weight optimization.\n\n        - 'lbfgs' is an optimizer in the family of quasi-Newton methods.\n\n        - 'sgd' refers to stochastic gradient descent.\n\n        - 'adam' refers to a stochastic gradient-based optimizer proposed by\n          Kingma, Diederik, and Jimmy Ba\n\n        Note: The default solver 'adam' works pretty well on relatively\n        large datasets (with thousands of training samples or more) in terms of\n        both training time and validation score.\n        For small datasets, however, 'lbfgs' can converge faster and perform\n        better.\n\n    alpha : float, default=0.0001\n        Strength of the L2 regularization term. The L2 regularization term\n        is divided by the sample size when added to the loss.\n\n    batch_size : int, default='auto'\n        Size of minibatches for stochastic optimizers.\n        If the solver is 'lbfgs', the regressor will not use minibatch.\n        When set to \"auto\", `batch_size=min(200, n_samples)`.\n\n    learning_rate : {'constant', 'invscaling', 'adaptive'}, default='constant'\n        Learning rate schedule for weight updates.\n\n        - 'constant' is a constant learning rate given by\n          'learning_rate_init'.\n\n        - 'invscaling' gradually decreases the learning rate ``learning_rate_``\n          at each time step 't' using an inverse scaling exponent of 'power_t'.\n          effective_learning_rate = learning_rate_init / pow(t, power_t)\n\n        - 'adaptive' keeps the learning rate constant to\n          'learning_rate_init' as long as training loss keeps decreasing.\n          Each time two consecutive epochs fail to decrease training loss by at\n          least tol, or fail to increase validation score by at least tol if\n          'early_stopping' is on, the current learning rate is divided by 5.\n\n        Only used when solver='sgd'.\n\n    learning_rate_init : float, default=0.001\n        The initial learning rate used. It controls the step-size\n        in updating the weights. Only used when solver='sgd' or 'adam'.\n\n    power_t : float, default=0.5\n        The exponent for inverse scaling learning rate.\n        It is used in updating effective learning rate when the learning_rate\n        is set to 'invscaling'. Only used when solver='sgd'.\n\n    max_iter : int, default=200\n        Maximum number of iterations. The solver iterates until convergence\n        (determined by 'tol') or this number of iterations. For stochastic\n        solvers ('sgd', 'adam'), note that this determines the number of epochs\n        (how many times each data point will be used), not the number of\n        gradient steps.\n\n    shuffle : bool, default=True\n        Whether to shuffle samples in each iteration. Only used when\n        solver='sgd' or 'adam'.\n\n    random_state : int, RandomState instance, default=None\n        Determines random number generation for weights and bias\n        initialization, train-test split if early stopping is used, and batch\n        sampling when solver='sgd' or 'adam'.\n        Pass an int for reproducible results across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    tol : float, default=1e-4\n        Tolerance for the optimization. When the loss or score is not improving\n        by at least ``tol`` for ``n_iter_no_change`` consecutive iterations,\n        unless ``learning_rate`` is set to 'adaptive', convergence is\n        considered to be reached and training stops.\n\n    verbose : bool, default=False\n        Whether to print progress messages to stdout.\n\n    warm_start : bool, default=False\n        When set to True, reuse the solution of the previous\n        call to fit as initialization, otherwise, just erase the\n        previous solution. See :term:`the Glossary <warm_start>`.\n\n    momentum : float, default=0.9\n        Momentum for gradient descent update. Should be between 0 and 1. Only\n        used when solver='sgd'.\n\n    nesterovs_momentum : bool, default=True\n        Whether to use Nesterov's momentum. Only used when solver='sgd' and\n        momentum > 0.\n\n    early_stopping : bool, default=False\n        Whether to use early stopping to terminate training when validation\n        score is not improving. If set to True, it will automatically set\n        aside ``validation_fraction`` of training data as validation and\n        terminate training when validation score is not improving by at\n        least ``tol`` for ``n_iter_no_change`` consecutive epochs.\n        Only effective when solver='sgd' or 'adam'.\n\n    validation_fraction : float, default=0.1\n        The proportion of training data to set aside as validation set for\n        early stopping. Must be between 0 and 1.\n        Only used if early_stopping is True.\n\n    beta_1 : float, default=0.9\n        Exponential decay rate for estimates of first moment vector in adam,\n        should be in [0, 1). Only used when solver='adam'.\n\n    beta_2 : float, default=0.999\n        Exponential decay rate for estimates of second moment vector in adam,\n        should be in [0, 1). Only used when solver='adam'.\n\n    epsilon : float, default=1e-8\n        Value for numerical stability in adam. Only used when solver='adam'.\n\n    n_iter_no_change : int, default=10\n        Maximum number of epochs to not meet ``tol`` improvement.\n        Only effective when solver='sgd' or 'adam'.\n\n        .. versionadded:: 0.20\n\n    max_fun : int, default=15000\n        Only used when solver='lbfgs'. Maximum number of function calls.\n        The solver iterates until convergence (determined by ``tol``), number\n        of iterations reaches max_iter, or this number of function calls.\n        Note that number of function calls will be greater than or equal to\n        the number of iterations for the MLPRegressor.\n\n        .. versionadded:: 0.22\n\n    Attributes\n    ----------\n    loss_ : float\n        The current loss computed with the loss function.\n\n    best_loss_ : float\n        The minimum loss reached by the solver throughout fitting.\n        If `early_stopping=True`, this attribute is set to `None`. Refer to\n        the `best_validation_score_` fitted attribute instead.\n        Only accessible when solver='sgd' or 'adam'.\n\n    loss_curve_ : list of shape (`n_iter_`,)\n        Loss value evaluated at the end of each training step.\n        The ith element in the list represents the loss at the ith iteration.\n        Only accessible when solver='sgd' or 'adam'.\n\n    validation_scores_ : list of shape (`n_iter_`,) or None\n        The score at each iteration on a held-out validation set. The score\n        reported is the R2 score. Only available if `early_stopping=True`,\n        otherwise the attribute is set to `None`.\n        Only accessible when solver='sgd' or 'adam'.\n\n    best_validation_score_ : float or None\n        The best validation score (i.e. R2 score) that triggered the\n        early stopping. Only available if `early_stopping=True`, otherwise the\n        attribute is set to `None`.\n        Only accessible when solver='sgd' or 'adam'.\n\n    t_ : int\n        The number of training samples seen by the solver during fitting.\n        Mathematically equals `n_iters * X.shape[0]`, it means\n        `time_step` and it is used by optimizer's learning rate scheduler.\n\n    coefs_ : list of shape (n_layers - 1,)\n        The ith element in the list represents the weight matrix corresponding\n        to layer i.\n\n    intercepts_ : list of shape (n_layers - 1,)\n        The ith element in the list represents the bias vector corresponding to\n        layer i + 1.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_iter_ : int\n        The number of iterations the solver has run.\n\n    n_layers_ : int\n        Number of layers.\n\n    n_outputs_ : int\n        Number of outputs.\n\n    out_activation_ : str\n        Name of the output activation function.\n\n    See Also\n    --------\n    BernoulliRBM : Bernoulli Restricted Boltzmann Machine (RBM).\n    MLPClassifier : Multi-layer Perceptron classifier.\n    sklearn.linear_model.SGDRegressor : Linear model fitted by minimizing\n        a regularized empirical loss with SGD.\n\n    Notes\n    -----\n    MLPRegressor trains iteratively since at each time step\n    the partial derivatives of the loss function with respect to the model\n    parameters are computed to update the parameters.\n\n    It can also have a regularization term added to the loss function\n    that shrinks model parameters to prevent overfitting.\n\n    This implementation works with data represented as dense and sparse numpy\n    arrays of floating point values.\n\n    References\n    ----------\n    Hinton, Geoffrey E. \"Connectionist learning procedures.\"\n    Artificial intelligence 40.1 (1989): 185-234.\n\n    Glorot, Xavier, and Yoshua Bengio.\n    \"Understanding the difficulty of training deep feedforward neural networks.\"\n    International Conference on Artificial Intelligence and Statistics. 2010.\n\n    :arxiv:`He, Kaiming, et al (2015). \"Delving deep into rectifiers:\n    Surpassing human-level performance on imagenet classification.\" <1502.01852>`\n\n    :arxiv:`Kingma, Diederik, and Jimmy Ba (2014)\n    \"Adam: A method for stochastic optimization.\" <1412.6980>`\n\n    Examples\n    --------\n    >>> from sklearn.neural_network import MLPRegressor\n    >>> from sklearn.datasets import make_regression\n    >>> from sklearn.model_selection import train_test_split\n    >>> X, y = make_regression(n_samples=200, random_state=1)\n    >>> X_train, X_test, y_train, y_test = train_test_split(X, y,\n    ...                                                     random_state=1)\n    >>> regr = MLPRegressor(random_state=1, max_iter=500).fit(X_train, y_train)\n    >>> regr.predict(X_test[:2])\n    array([-0.9..., -7.1...])\n    >>> regr.score(X_test, y_test)\n    0.4...\n    \"\"\"",
                        "filename": "sklearn/neural_network/_multilayer_perceptron.py",
                        "start_index": 46195,
                        "end_index": 57128,
                        "start_line": 1259,
                        "end_line": 1645,
                        "max_line": 1646,
                        "git_instance": "github",
                        "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the definition of the MLPRegressor class, including the 'max_iter' and 'max_fun' parameters, which are directly related to the issue."
                },
                {
                    "chunk": {
                        "code": "\"\"\"Multi-layer Perceptron classifier.\n\n    This model optimizes the log-loss function using LBFGS or stochastic\n    gradient descent.\n\n    .. versionadded:: 0.18\n\n    Parameters\n    ----------\n    hidden_layer_sizes : array-like of shape(n_layers - 2,), default=(100,)\n        The ith element represents the number of neurons in the ith\n        hidden layer.\n\n    activation : {'identity', 'logistic', 'tanh', 'relu'}, default='relu'\n        Activation function for the hidden layer.\n\n        - 'identity', no-op activation, useful to implement linear bottleneck,\n          returns f(x) = x\n\n        - 'logistic', the logistic sigmoid function,\n          returns f(x) = 1 / (1 + exp(-x)).\n\n        - 'tanh', the hyperbolic tan function,\n          returns f(x) = tanh(x).\n\n        - 'relu', the rectified linear unit function,\n          returns f(x) = max(0, x)\n\n    solver : {'lbfgs', 'sgd', 'adam'}, default='adam'\n        The solver for weight optimization.\n\n        - 'lbfgs' is an optimizer in the family of quasi-Newton methods.\n\n        - 'sgd' refers to stochastic gradient descent.\n\n        - 'adam' refers to a stochastic gradient-based optimizer proposed\n          by Kingma, Diederik, and Jimmy Ba\n\n        Note: The default solver 'adam' works pretty well on relatively\n        large datasets (with thousands of training samples or more) in terms of\n        both training time and validation score.\n        For small datasets, however, 'lbfgs' can converge faster and perform\n        better.\n\n    alpha : float, default=0.0001\n        Strength of the L2 regularization term. The L2 regularization term\n        is divided by the sample size when added to the loss.\n\n    batch_size : int, default='auto'\n        Size of minibatches for stochastic optimizers.\n        If the solver is 'lbfgs', the classifier will not use minibatch.\n        When set to \"auto\", `batch_size=min(200, n_samples)`.\n\n    learning_rate : {'constant', 'invscaling', 'adaptive'}, default='constant'\n        Learning rate schedule for weight updates.\n\n        - 'constant' is a constant learning rate given by\n          'learning_rate_init'.\n\n        - 'invscaling' gradually decreases the learning rate at each\n          time step 't' using an inverse scaling exponent of 'power_t'.\n          effective_learning_rate = learning_rate_init / pow(t, power_t)\n\n        - 'adaptive' keeps the learning rate constant to\n          'learning_rate_init' as long as training loss keeps decreasing.\n          Each time two consecutive epochs fail to decrease training loss by at\n          least tol, or fail to increase validation score by at least tol if\n          'early_stopping' is on, the current learning rate is divided by 5.\n\n        Only used when ``solver='sgd'``.\n\n    learning_rate_init : float, default=0.001\n        The initial learning rate used. It controls the step-size\n        in updating the weights. Only used when solver='sgd' or 'adam'.\n\n    power_t : float, default=0.5\n        The exponent for inverse scaling learning rate.\n        It is used in updating effective learning rate when the learning_rate\n        is set to 'invscaling'. Only used when solver='sgd'.\n\n    max_iter : int, default=200\n        Maximum number of iterations. The solver iterates until convergence\n        (determined by 'tol') or this number of iterations. For stochastic\n        solvers ('sgd', 'adam'), note that this determines the number of epochs\n        (how many times each data point will be used), not the number of\n        gradient steps.\n\n    shuffle : bool, default=True\n        Whether to shuffle samples in each iteration. Only used when\n        solver='sgd' or 'adam'.\n\n    random_state : int, RandomState instance, default=None\n        Determines random number generation for weights and bias\n        initialization, train-test split if early stopping is used, and batch\n        sampling when solver='sgd' or 'adam'.\n        Pass an int for reproducible results across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    tol : float, default=1e-4\n        Tolerance for the optimization. When the loss or score is not improving\n        by at least ``tol`` for ``n_iter_no_change`` consecutive iterations,\n        unless ``learning_rate`` is set to 'adaptive', convergence is\n        considered to be reached and training stops.\n\n    verbose : bool, default=False\n        Whether to print progress messages to stdout.\n\n    warm_start : bool, default=False\n        When set to True, reuse the solution of the previous\n        call to fit as initialization, otherwise, just erase the\n        previous solution. See :term:`the Glossary <warm_start>`.\n\n    momentum : float, default=0.9\n        Momentum for gradient descent update. Should be between 0 and 1. Only\n        used when solver='sgd'.\n\n    nesterovs_momentum : bool, default=True\n        Whether to use Nesterov's momentum. Only used when solver='sgd' and\n        momentum > 0.\n\n    early_stopping : bool, default=False\n        Whether to use early stopping to terminate training when validation\n        score is not improving. If set to true, it will automatically set\n        aside 10% of training data as validation and terminate training when\n        validation score is not improving by at least tol for\n        ``n_iter_no_change`` consecutive epochs. The split is stratified,\n        except in a multilabel setting.\n        If early stopping is False, then the training stops when the training\n        loss does not improve by more than tol for n_iter_no_change consecutive\n        passes over the training set.\n        Only effective when solver='sgd' or 'adam'.\n\n    validation_fraction : float, default=0.1\n        The proportion of training data to set aside as validation set for\n        early stopping. Must be between 0 and 1.\n        Only used if early_stopping is True.\n\n    beta_1 : float, default=0.9\n        Exponential decay rate for estimates of first moment vector in adam,\n        should be in [0, 1). Only used when solver='adam'.\n\n    beta_2 : float, default=0.999\n        Exponential decay rate for estimates of second moment vector in adam,\n        should be in [0, 1). Only used when solver='adam'.\n\n    epsilon : float, default=1e-8\n        Value for numerical stability in adam. Only used when solver='adam'.\n\n    n_iter_no_change : int, default=10\n        Maximum number of epochs to not meet ``tol`` improvement.\n        Only effective when solver='sgd' or 'adam'.\n\n        .. versionadded:: 0.20\n\n    max_fun : int, default=15000\n        Only used when solver='lbfgs'. Maximum number of loss function calls.\n        The solver iterates until convergence (determined by 'tol'), number\n        of iterations reaches max_iter, or this number of loss function calls.\n        Note that number of loss function calls will be greater than or equal\n        to the number of iterations for the `MLPClassifier`.\n\n        .. versionadded:: 0.22\n\n    Attributes\n    ----------\n    classes_ : ndarray or list of ndarray of shape (n_classes,)\n        Class labels for each output.\n\n    loss_ : float\n        The current loss computed with the loss function.\n\n    best_loss_ : float or None\n        The minimum loss reached by the solver throughout fitting.\n        If `early_stopping=True`, this attribute is set to `None`. Refer to\n        the `best_validation_score_` fitted attribute instead.\n\n    loss_curve_ : list of shape (`n_iter_`,)\n        The ith element in the list represents the loss at the ith iteration.\n\n    validation_scores_ : list of shape (`n_iter_`,) or None\n        The score at each iteration on a held-out validation set. The score\n        reported is the accuracy score. Only available if `early_stopping=True`,\n        otherwise the attribute is set to `None`.\n\n    best_validation_score_ : float or None\n        The best validation score (i.e. accuracy score) that triggered the\n        early stopping. Only available if `early_stopping=True`, otherwise the\n        attribute is set to `None`.\n\n    t_ : int\n        The number of training samples seen by the solver during fitting.\n\n    coefs_ : list of shape (n_layers - 1,)\n        The ith element in the list represents the weight matrix corresponding\n        to layer i.\n\n    intercepts_ : list of shape (n_layers - 1,)\n        The ith element in the list represents the bias vector corresponding to\n        layer i + 1.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_iter_ : int\n        The number of iterations the solver has run.\n\n    n_layers_ : int\n        Number of layers.\n\n    n_outputs_ : int\n        Number of outputs.\n\n    out_activation_ : str\n        Name of the output activation function.\n\n    See Also\n    --------\n    MLPRegressor : Multi-layer Perceptron regressor.\n    BernoulliRBM : Bernoulli Restricted Boltzmann Machine (RBM).\n\n    Notes\n    -----\n    MLPClassifier trains iteratively since at each time step\n    the partial derivatives of the loss function with respect to the model\n    parameters are computed to update the parameters.\n\n    It can also have a regularization term added to the loss function\n    that shrinks model parameters to prevent overfitting.\n\n    This implementation works with data represented as dense numpy arrays or\n    sparse scipy arrays of floating point values.\n\n    References\n    ----------\n    Hinton, Geoffrey E. \"Connectionist learning procedures.\"\n    Artificial intelligence 40.1 (1989): 185-234.\n\n    Glorot, Xavier, and Yoshua Bengio.\n    \"Understanding the difficulty of training deep feedforward neural networks.\"\n    International Conference on Artificial Intelligence and Statistics. 2010.\n\n    :arxiv:`He, Kaiming, et al (2015). \"Delving deep into rectifiers:\n    Surpassing human-level performance on imagenet classification.\" <1502.01852>`\n\n    :arxiv:`Kingma, Diederik, and Jimmy Ba (2014)\n    \"Adam: A method for stochastic optimization.\" <1412.6980>`\n\n    Examples\n    --------\n    >>> from sklearn.neural_network import MLPClassifier\n    >>> from sklearn.datasets import make_classification\n    >>> from sklearn.model_selection import train_test_split\n    >>> X, y = make_classification(n_samples=100, random_state=1)\n    >>> X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y,\n    ...                                                     random_state=1)\n    >>> clf = MLPClassifier(random_state=1, max_iter=300).fit(X_train, y_train)\n    >>> clf.predict_proba(X_test[:1])\n    array([[0.038..., 0.961...]])\n    >>> clf.predict(X_test[:5, :])\n    array([1, 0, 1, 0, 1])\n    >>> clf.score(X_test, y_test)\n    0.8...\n    \"\"\"",
                        "filename": "sklearn/neural_network/_multilayer_perceptron.py",
                        "start_index": 27626,
                        "end_index": 38494,
                        "start_line": 766,
                        "end_line": 1645,
                        "max_line": 1646,
                        "git_instance": "github",
                        "repo_name": "testbed/scikit-learn__scikit-learn__0.22",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the definition of the MLPClassifier class, including the 'max_iter' and 'max_fun' parameters, which are directly related to the issue."
                }
            ]
        },
        "solution_task": "- Identify the `MLPRegressor` and `MLPClassifier` classes in the `_multilayer_perceptron.py` file.\n- Locate the `fit` method within these classes.\n- Within the `fit` method, find the conditional block where `self.solver == 'lbfgs'`.\n- Ensure that the `max_iter` parameter is passed correctly to the `_optimize_lbfgs` method.\n- In the `_optimize_lbfgs` method, ensure that the `maxiter` parameter is used correctly when calling the underlying L-BFGS optimizer.\n- If the `max_fun` parameter is being used instead of `max_iter` for the L-BFGS solver, replace it with `max_iter`.\n- Confirm that the `max_iter` parameter is used to control the maximum number of iterations and `max_fun` is used to control the maximum number of function calls, as per the documentation in the `MLPRegressor` and `MLPClassifier` class docstrings.\n- Ensure that the `n_iter_` attribute is set to the actual number of iterations performed by the L-BFGS solver after the optimization is complete.\n- Check that the `max_iter` parameter is correctly documented in the class docstrings and is consistent with the actual behavior of the code.\n- The changes should be made in a way that respects the existing API contracts and does not introduce backward-incompatible changes.",
        "bouncer_response": {
            "score": 9,
            "criteria": "RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable step-by-step guide to address the bug described in the PROMPT. It correctly identifies the need to ensure that the 'max_iter' parameter is passed correctly to the '_optimize_lbfgs' method and that the 'maxiter' parameter is used correctly when calling the underlying L-BFGS optimizer. The RESPONSE also suggests confirming that the 'max_iter' parameter is used to control the maximum number of iterations and 'max_fun' is used to control the maximum number of function calls, which is the core issue in the PROMPT. Additionally, the RESPONSE provides links to the relevant code snippets, which is extremely helpful for developers looking to fix the bug. The RESPONSE does not receive a perfect score because it does not explicitly mention testing the changes to ensure they work as expected, which is an important part of resolving any bug.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711739935.5099661,
        "result": "- Identify the `MLPRegressor` and `MLPClassifier` classes in the `_multilayer_perceptron.py` file.\n- Locate the `fit` method within these classes.\n- Within the `fit` method, find the conditional block where `self.solver == 'lbfgs'`.\n- Ensure that the `max_iter` parameter is passed correctly to the `_optimize_lbfgs` method.\n- In the `_optimize_lbfgs` method, ensure that the `maxiter` parameter is used correctly when calling the underlying L-BFGS optimizer.\n- If the `max_fun` parameter is being used instead of `max_iter` for the L-BFGS solver, replace it with `max_iter`.\n- Confirm that the `max_iter` parameter is used to control the maximum number of iterations and `max_fun` is used to control the maximum number of function calls, as per the documentation in the `MLPRegressor` and `MLPClassifier` class docstrings.\n- Ensure that the `n_iter_` attribute is set to the actual number of iterations performed by the L-BFGS solver after the optimization is complete.\n- Check that the `max_iter` parameter is correctly documented in the class docstrings and is consistent with the actual behavior of the code.\n- The changes should be made in a way that respects the existing API contracts and does not introduce backward-incompatible changes.\n\n### Code snippets to check\n\n-  \u2192 [sklearn](https://github.com/testbed/scikit-learn__scikit-learn__0.22/tree//sklearn) \u2192 [neural_network](https://github.com/testbed/scikit-learn__scikit-learn__0.22/tree//sklearn/neural_network)- [Lines 1259 - 1645](https://github.com/testbed/scikit-learn__scikit-learn__0.22/blob//sklearn/neural_network/_multilayer_perceptron.py#L1259-L1645)\n\n This snippet contains the definition of the MLPRegressor class, including the 'max_iter' and 'max_fun' parameters, which are directly related to the issue. \n\n\n   - [Lines 766 - 1645](https://github.com/testbed/scikit-learn__scikit-learn__0.22/blob//sklearn/neural_network/_multilayer_perceptron.py#L766-L1645)\n\n This snippet contains the definition of the MLPClassifier class, including the 'max_iter' and 'max_fun' parameters, which are directly related to the issue."
    }
}