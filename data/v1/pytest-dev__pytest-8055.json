{
    "id": "pytest-dev__pytest-8055",
    "repo_name": "testbed/pytest-dev__pytest__6.2",
    "task_id": 5868494477703480815,
    "title": "set sys.unraisablehook (py38)",
    "body": "Python 3.8 has a new hook: sys.unraisablehook https://github.com/python/cpython/pull/13187\r\n\r\nPytest should set this to be able to associate unraisable exceptions with tests\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pytest-dev__pytest__6.2.git",
    "requested_commit": "",
    "mayil_response": "To implement the feature of setting `sys.unraisablehook` in pytest to associate unraisable exceptions with tests, follow these steps:\n\n- Identify the appropriate location in the pytest codebase to set the `sys.unraisablehook`. This is typically done in the pytest configuration or initialization phase.\n- Define a custom function that will act as the new unraisable hook. This function should handle the unraisable exceptions and associate them with the current test context.\n- Set `sys.unraisablehook` to the custom function early in the pytest session before any tests are run.\n\nHere is a high-level overview of the implementation:\n\n```python\nimport sys\n\ndef pytest_unraisablehook(unraisable):\n    \"\"\"\n    Custom hook for handling unraisable exceptions.\n    \"\"\"\n    # Implement logic to associate the unraisable exception with the current test.\n    # This may involve logging the exception or storing it in a test report.\n    # Access to the current test context may be required.\n\n# This function should be called early in the pytest configuration phase.\ndef pytest_configure(config):\n    \"\"\"\n    Pytest hook to perform initial configuration. This is where we set the custom unraisable hook.\n    \"\"\"\n    original_unraisablehook = sys.unraisablehook\n    sys.unraisablehook = pytest_unraisablehook\n\n    # It's important to restore the original hook after the test session is finished.\n    def restore_unraisablehook():\n        sys.unraisablehook = original_unraisablehook\n    config.add_cleanup(restore_unraisablehook)\n```\n\n- Add the `pytest_configure` function to a conftest.py file or an appropriate plugin file within the pytest codebase.\n- Ensure that the custom unraisable hook is properly tested by adding unit tests that simulate unraisable exceptions and verify that they are handled as expected.\n\nRemember to handle edge cases, such as when multiple tests cause unraisable exceptions, and ensure that the hook is thread-safe if pytest is running tests in parallel.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.00021549999999999998,
        "snippet_processor": 0.03931,
        "issue_star_creation": 0.02319,
        "issue_star_solver": 0.03424,
        "bouncer": 0.02556
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711734680.9587479,
        "relevant_snippets": [
            {
                "code": "blank_issues_enabled: false\ncontact_links:\n  - name: \u2753 Support Question\n    url: https://github.com/pytest-dev/pytest/discussions\n    about: Use GitHub's new Discussions feature for questions",
                "filename": ".github/ISSUE_TEMPLATE/config.yml",
                "start_index": 0,
                "end_index": 191,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": ""
            },
            {
                "code": "# shim for pylib going away\n# if pylib is installed this file will get skipped\n# (`py/__init__.py` has higher precedence)\nimport sys\n\nimport _pytest._py.error as error\nimport _pytest._py.path as path\n\nsys.modules[\"py.error\"] = error\nsys.modules[\"py.path\"] = path",
                "filename": "src/py.py",
                "start_index": 0,
                "end_index": 262,
                "start_line": 1,
                "end_line": 10,
                "max_line": 10,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": ""
            },
            {
                "code": "rtd:\n  project: pytest",
                "filename": ".github/config.yml",
                "start_index": 0,
                "end_index": 22,
                "start_line": 1,
                "end_line": 2,
                "max_line": 2,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": ""
            },
            {
                "code": "-   repo: local\n    hooks:\n    -   id: rst\n        name: rst\n        entry: rst-lint --encoding utf-8\n        files: ^(RELEASING.rst|README.rst|TIDELIFT.rst)$\n        language: python\n        additional_dependencies: [pygments, restructuredtext_lint]\n    -   id: changelogs-rst\n        name: changelog filenames\n        language: fail\n        entry: 'changelog files must be named ####.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst'\n        exclude: changelog/(\\d+\\.(breaking|bugfix|deprecation|doc|feature|improvement|trivial|vendor).rst|README.rst|_template.rst)\n        files: ^changelog/\n    -   id: py-deprecated\n        name: py library is deprecated\n        language: pygrep\n        entry: >\n            (?x)\\bpy\\.(\n                _code\\.|\n                builtin\\.|\n                code\\.|\n                io\\.|\n                path\\.local\\.sysfind|\n                process\\.|\n                std\\.|\n                error\\.|\n                xml\\.\n            )\n        types: [python]\n    -   id: py-path-deprecated\n        name: py.path usage is deprecated\n        exclude: docs|src/_pytest/deprecated.py|testing/deprecated_test.py|src/_pytest/legacypath.py\n        language: pygrep\n        entry: \\bpy\\.path\\.local\n        types: [python]",
                "filename": ".pre-commit-config.yaml",
                "start_index": 2166,
                "end_index": 3442,
                "start_line": 73,
                "end_line": 108,
                "max_line": 108,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": ""
            },
            {
                "code": "-   repo: https://github.com/psf/black\n    rev: 23.7.0\n    hooks:\n    -   id: black\n        args: [--safe, --quiet]\n-   repo: https://github.com/asottile/blacken-docs\n    rev: 1.16.0\n    hooks:\n    -   id: blacken-docs\n        additional_dependencies: [black==23.7.0]\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: fix-encoding-pragma\n        args: [--remove]\n    -   id: check-yaml\n    -   id: debug-statements\n        exclude: _pytest/(debugging|hookspec).py\n        language_version: python3\n-   repo: https://github.com/PyCQA/autoflake\n    rev: v2.2.0\n    hooks:\n    -   id: autoflake\n        name: autoflake\n        args: [\"--in-place\", \"--remove-unused-variables\", \"--remove-all-unused-imports\"]\n        language: python\n        files: \\.py$\n-   repo: https://github.com/PyCQA/flake8\n    rev: 6.1.0\n    hooks:\n    -   id: flake8\n        language_version: python3\n        additional_dependencies:\n          - flake8-typing-imports==1.12.0\n          - flake8-docstrings==1.5.0\n-   repo: https://github.com/asottile/reorder-python-imports\n    rev: v3.10.0\n    hooks:\n    -   id: reorder-python-imports\n        args: ['--application-directories=.:src', --py38-plus]\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v3.10.1\n    hooks:\n    -   id: pyupgrade\n        args: [--py38-plus]\n-   repo: https://github.com/asottile/setup-cfg-fmt\n    rev: v2.4.0\n    hooks:\n    -   id: setup-cfg-fmt\n        args: [\"--max-py-version=3.12\", \"--include-version-classifiers\"]\n-   repo: https://github.com/pre-commit/pygrep-hooks\n    rev: v1.10.0\n    hooks:\n    -   id: python-use-type-annotations\n-   repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.5.1\n    hooks:\n    -   id: mypy\n        files: ^(src/|testing/)\n        args: []\n        additional_dependencies:\n          - iniconfig>=1.1.0\n          - attrs>=19.2.0\n          - packaging\n          - tomli\n          - types-pkg_resources\n            # for mypy running on python>=3.11 since exceptiongroup is only a dependency\n            # on <3.11\n          - exceptiongroup>=1.0.0rc8",
                "filename": ".pre-commit-config.yaml",
                "start_index": 7,
                "end_index": 2165,
                "start_line": 2,
                "end_line": 72,
                "max_line": 108,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": ""
            },
            {
                "code": "import pytest\n\n\n@pytest.fixture(scope=\"module\", params=range(966))\ndef foo(request):\n    return request.param\n\n\ndef test_it(foo):\n    pass\n\n\ndef test_it2(foo):\n    pass",
                "filename": "bench/manyparam.py",
                "start_index": 0,
                "end_index": 168,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": ""
            },
            {
                "code": "# info:\n# * https://help.github.com/en/articles/displaying-a-sponsor-button-in-your-repository\n# * https://tidelift.com/subscription/how-to-connect-tidelift-with-github\ntidelift: pypi/pytest\nopen_collective: pytest",
                "filename": ".github/FUNDING.yml",
                "start_index": 0,
                "end_index": 214,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": ""
            },
            {
                "code": "import sys\n\nif __name__ == \"__main__\":\n    import cProfile\n    import pytest  # NOQA\n    import pstats\n\n    script = sys.argv[1:] if len(sys.argv) > 1 else [\"empty.py\"]\n    cProfile.run(\"pytest.cmdline.main(%r)\" % script, \"prof\")\n    p = pstats.Stats(\"prof\")\n    p.strip_dirs()\n    p.sort_stats(\"cumulative\")\n    print(p.print_stats(500))",
                "filename": "bench/bench.py",
                "start_index": 0,
                "end_index": 338,
                "start_line": 1,
                "end_line": 13,
                "max_line": 13,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": ""
            },
            {
                "code": "import sys\nfrom subprocess import call\n\n\ndef main():\n    \"\"\"\n    Platform agnostic wrapper script for towncrier.\n    Fixes the issue (#7251) where windows users are unable to natively run tox -e docs to build pytest docs.\n    \"\"\"\n    with open(\n        \"doc/en/_changelog_towncrier_draft.rst\", \"w\", encoding=\"utf-8\"\n    ) as draft_file:\n        return call((\"towncrier\", \"--draft\"), stdout=draft_file)\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
                "filename": "scripts/towncrier-draft-to-file.py",
                "start_index": 0,
                "end_index": 451,
                "start_line": 1,
                "end_line": 17,
                "max_line": 17,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": ""
            },
            {
                "code": "import pytest\n\nSKIP = True\n\n\n@pytest.mark.parametrize(\"x\", range(5000))\ndef test_foo(x):\n    if SKIP:\n        pytest.skip(\"heh\")",
                "filename": "bench/skip.py",
                "start_index": 0,
                "end_index": 128,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.2",
                "sha": ""
            }
        ],
        "classification": "feature request",
        "snippet_processor_task": {},
        "solution_task": "To implement the feature of setting `sys.unraisablehook` in pytest to associate unraisable exceptions with tests, follow these steps:\n\n- Identify the appropriate location in the pytest codebase to set the `sys.unraisablehook`. This is typically done in the pytest configuration or initialization phase.\n- Define a custom function that will act as the new unraisable hook. This function should handle the unraisable exceptions and associate them with the current test context.\n- Set `sys.unraisablehook` to the custom function early in the pytest session before any tests are run.\n\nHere is a high-level overview of the implementation:\n\n```python\nimport sys\n\ndef pytest_unraisablehook(unraisable):\n    \"\"\"\n    Custom hook for handling unraisable exceptions.\n    \"\"\"\n    # Implement logic to associate the unraisable exception with the current test.\n    # This may involve logging the exception or storing it in a test report.\n    # Access to the current test context may be required.\n\n# This function should be called early in the pytest configuration phase.\ndef pytest_configure(config):\n    \"\"\"\n    Pytest hook to perform initial configuration. This is where we set the custom unraisable hook.\n    \"\"\"\n    original_unraisablehook = sys.unraisablehook\n    sys.unraisablehook = pytest_unraisablehook\n\n    # It's important to restore the original hook after the test session is finished.\n    def restore_unraisablehook():\n        sys.unraisablehook = original_unraisablehook\n    config.add_cleanup(restore_unraisablehook)\n```\n\n- Add the `pytest_configure` function to a conftest.py file or an appropriate plugin file within the pytest codebase.\n- Ensure that the custom unraisable hook is properly tested by adding unit tests that simulate unraisable exceptions and verify that they are handled as expected.\n\nRemember to handle edge cases, such as when multiple tests cause unraisable exceptions, and ensure that the hook is thread-safe if pytest is running tests in parallel.",
        "bouncer_response": {
            "score": 8,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant suggestions that can directly lead to the successful implementation or improvement of the requested feature.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable step-by-step guide on how to implement the feature of setting `sys.unraisablehook` in pytest. It suggests identifying the appropriate location in the pytest codebase, defining a custom function for the hook, and setting the hook early in the pytest session. The RESPONSE also includes a high-level overview of the implementation with example code, which is directly relevant to the feature request. Additionally, it advises on adding cleanup procedures and unit tests, which are important for maintaining the integrity of the codebase. The RESPONSE also considers edge cases and thread safety, which are crucial aspects of the feature's robustness.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711734737.922108,
        "result": "To implement the feature of setting `sys.unraisablehook` in pytest to associate unraisable exceptions with tests, follow these steps:\n\n- Identify the appropriate location in the pytest codebase to set the `sys.unraisablehook`. This is typically done in the pytest configuration or initialization phase.\n- Define a custom function that will act as the new unraisable hook. This function should handle the unraisable exceptions and associate them with the current test context.\n- Set `sys.unraisablehook` to the custom function early in the pytest session before any tests are run.\n\nHere is a high-level overview of the implementation:\n\n```python\nimport sys\n\ndef pytest_unraisablehook(unraisable):\n    \"\"\"\n    Custom hook for handling unraisable exceptions.\n    \"\"\"\n    # Implement logic to associate the unraisable exception with the current test.\n    # This may involve logging the exception or storing it in a test report.\n    # Access to the current test context may be required.\n\n# This function should be called early in the pytest configuration phase.\ndef pytest_configure(config):\n    \"\"\"\n    Pytest hook to perform initial configuration. This is where we set the custom unraisable hook.\n    \"\"\"\n    original_unraisablehook = sys.unraisablehook\n    sys.unraisablehook = pytest_unraisablehook\n\n    # It's important to restore the original hook after the test session is finished.\n    def restore_unraisablehook():\n        sys.unraisablehook = original_unraisablehook\n    config.add_cleanup(restore_unraisablehook)\n```\n\n- Add the `pytest_configure` function to a conftest.py file or an appropriate plugin file within the pytest codebase.\n- Ensure that the custom unraisable hook is properly tested by adding unit tests that simulate unraisable exceptions and verify that they are handled as expected.\n\nRemember to handle edge cases, such as when multiple tests cause unraisable exceptions, and ensure that the hook is thread-safe if pytest is running tests in parallel."
    }
}