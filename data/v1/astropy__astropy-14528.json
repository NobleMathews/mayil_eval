{
    "id": "astropy__astropy-14528",
    "repo_name": "testbed/astropy__astropy__5.1",
    "task_id": 6873999301862312339,
    "title": "`io.fits` creates a corrupt FITS files if a `ImageHDU` contains zero-dimensional data",
    "body": "### Description\n\n`ImageHDU` accepts a ndarray with shape `()` (zero-dimensional) as a data array. This later causes issues when writing to a file because `io.fits` assumes that the data has at least 1 dimension, resulting in a corrupt FITS file.\n\n### Expected behavior\n\n`io.fits` should never silently create a corrupt FITS file.\n\n### How to Reproduce\n\nMinimal reproducible example:\r\n\r\n```python\r\nimport numpy as np\r\nfrom astropy.io import fits\r\n\r\nfilename = 'corrupted.fits'\r\nhdu = fits.ImageHDU(name='test', data=np.array(1.0))\r\nhdu.writeto(filename, overwrite=True)\r\n```\r\nAlthough this causes no errors/warnings, the resulting file is not valid FITS and will fail to properly open with `fits.getdata(filename)`.\n\n### Versions\n\nWindows-10-10.0.19044-SP0\r\nPython 3.10.10 (tags/v3.10.10:aad5f6a, Feb  7 2023, 17:20:36) [MSC v.1929 64 bit (AMD64)]\r\nastropy 5.2.1\r\nNumpy 1.24.2\r\npyerfa 2.0.0.1\r\nScipy 1.10.0\r\nMatplotlib 3.6.3\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/astropy__astropy__5.1.git",
    "requested_commit": "",
    "mayil_response": "- Check if the `ImageHDU` class or its parent classes have a method to validate the data before writing to a file.\n- If not, implement a `_validate_data` method in the `ImageHDU` class to check for zero-dimensional ndarrays and raise an error if encountered.\n- Ensure that the `_validate_data` method is called before writing the HDU to a file in the `writeto` method.\n- Update the `writeto` method to include the `overwrite` parameter and pass it to the underlying file writing mechanisms.\n\n```python\nfrom astropy.io.fits.hdu.image import _ImageBaseHDU\n\nclass ImageHDU(_ImageBaseHDU):\n    # ... existing code ...\n\n    def _validate_data(self, data):\n        if data is not None and data.shape == ():\n            raise ValueError(\"Zero-dimensional data is not supported.\")\n\n    def writeto(self, filename, overwrite=False, ...):\n        # ... existing code ...\n        self._validate_data(self.data)\n        # ... file writing code ...\n        if overwrite:\n            with suppress(OSError):\n                os.remove(filename)\n        # ... continue with writing the file ...\n```\n\n- Ensure that the `overwrite` parameter is handled correctly when calling `writeto` from other parts of the codebase.\n- Test the changes with an ndarray that has a shape `()` to confirm that a `ValueError` is raised.\n\n### Code snippets to check\n\n-  \u2192 [astropy](https://github.com/testbed/astropy__astropy__5.1/tree//astropy) \u2192 [io](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/io) \u2192 [fits](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/io/fits) \u2192 [hdu](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/io/fits/hdu)- [Lines 1 - 21](https://github.com/testbed/astropy__astropy__5.1/blob//astropy/io/fits/hdu/image.py#L1-L21)\n\n This snippet is from the file where `ImageHDU` is defined, which is directly related to the issue of handling zero-dimensional data. \n\n\n   - [Lines 24 - 24](https://github.com/testbed/astropy__astropy__5.1/blob//astropy/io/fits/hdu/image.py#L24-L24)\n\n This snippet indicates the existence of an `_ImageBaseHDU` class which might be the parent class of `ImageHDU` and relevant to the issue.\n-  \u2192 [astropy](https://github.com/testbed/astropy__astropy__5.1/tree//astropy) \u2192 [io](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/io) \u2192 [fits](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/io/fits) \u2192 [hdu](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/io/fits/hdu)- [Lines 1 - 1661](https://github.com/testbed/astropy__astropy__5.1/blob//astropy/io/fits/hdu/base.py#L1-L1661)\n\n This snippet contains the base class for HDUs and may contain relevant code for initializing and validating HDU objects, including `ImageHDU`. \n\n\n   - [Lines 786 - 830](https://github.com/testbed/astropy__astropy__5.1/blob//astropy/io/fits/hdu/base.py#L786-L830)\n\n This snippet defines a `_CorruptedHDU` class which might be relevant for handling cases where an HDU is considered corrupted, such as when zero-dimensional data is provided.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0004969999999999999,
        "snippet_processor": 0.060770000000000005,
        "issue_star_creation": 0.030649999999999997,
        "issue_star_solver": 0.0659,
        "bouncer": 0.0239
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711736155.7588758,
        "relevant_snippets": [
            {
                "code": "\"\"\"\n==========================================\nCreate a very large FITS file from scratch\n==========================================\n\nThis example demonstrates how to create a large file (larger than will fit in\nmemory) from scratch using `astropy.io.fits`.\n\n\n*By: Erik Bray*\n\n*License: BSD*\n\n\"\"\"\n\n##############################################################################\n#  Normally to create a single image FITS file one would do something like:\n\nimport os\n\nimport numpy as np\n\nfrom astropy.io import fits\n\ndata = np.zeros((40000, 40000), dtype=np.float64)\nhdu = fits.PrimaryHDU(data=data)\n\n##############################################################################\n# Then use the `astropy.io.fits.writeto()` method to write out the new\n# file to disk\n\nhdu.writeto('large.fits')\n\n##############################################################################\n# However, a 40000 x 40000 array of doubles is nearly twelve gigabytes! Most\n# systems won't be able to create that in memory just to write out to disk. In\n# order to create such a large file efficiently requires a little extra work,\n# and a few assumptions.\n#\n# First, it is helpful to anticipate about how large (as in, how many keywords)\n# the header will have in it. FITS headers must be written in 2880 byte\n# blocks, large enough for 36 keywords per block (including the END keyword in\n# the final block). Typical headers have somewhere between 1 and 4 blocks,\n# though sometimes more.\n#\n# Since the first thing we write to a FITS file is the header, we want to write\n# enough header blocks so that there is plenty of padding in which to add new\n# keywords without having to resize the whole file. Say you want the header to\n# use 4 blocks by default. Then, excluding the END card which Astropy will add\n# automatically, create the header and pad it out to 36 * 4 cards.\n#\n# Create a stub array to initialize the HDU; its\n# exact size is irrelevant, as long as it has the desired number of\n# dimensions\n\ndata = np.zeros((100, 100), dtype=np.float64)\nhdu = fits.PrimaryHDU(data=data)\nheader = hdu.header\nwhile len(header) < (36 * 4 - 1):\n    header.append()  # Adds a blank card to the end\n\n##############################################################################\n# Now adjust the NAXISn keywords to the desired size of the array, and write\n# only the header out to a file. Using the ``hdu.writeto()`` method will cause\n# astropy to \"helpfully\" reset the NAXISn keywords to match the size of the\n# dummy array. That is because it works hard to ensure that only valid FITS\n# files are written. Instead, we can write just the header to a file using the\n# `astropy.io.fits.Header.tofile` method:\n\nheader['NAXIS1'] = 40000\nheader['NAXIS2'] = 40000\nheader.tofile('large.fits')\n\n##############################################################################\n# Finally, grow out the end of the file to match the length of the\n# data (plus the length of the header). This can be done very efficiently on",
                "filename": "examples/io/skip_create-large-fits.py",
                "start_index": 0,
                "end_index": 2976,
                "start_line": 1,
                "end_line": 76,
                "max_line": 112,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "# most systems by seeking past the end of the file and writing a single byte,\n# like so:\n\nwith open('large.fits', 'rb+') as fobj:\n    # Seek past the length of the header, plus the length of the\n    # Data we want to write.\n    # 8 is the number of bytes per value, i.e. abs(header['BITPIX'])/8\n    # (this example is assuming a 64-bit float)\n    # The -1 is to account for the final byte that we are about to\n    # write:\n    fobj.seek(len(header.tostring()) + (40000 * 40000 * 8) - 1)\n    fobj.write(b'\\0')\n\n##############################################################################\n# More generally, this can be written:\n\nshape = tuple(header[f'NAXIS{ii}'] for ii in range(1, header['NAXIS']+1))\nwith open('large.fits', 'rb+') as fobj:\n    fobj.seek(len(header.tostring()) + (np.prod(shape) * np.abs(header['BITPIX']//8)) - 1)\n    fobj.write(b'\\0')\n\n##############################################################################\n# On modern operating systems this will cause the file (past the header) to be\n# filled with zeros out to the ~12GB needed to hold a 40000 x 40000 image. On\n# filesystems that support sparse file creation (most Linux filesystems, but not\n# the HFS+ filesystem used by most Macs) this is a very fast, efficient\n# operation. On other systems your mileage may vary.\n#\n# This isn't the only way to build up a large file, but probably one of the\n# safest. This method can also be used to create large multi-extension FITS\n# files, with a little care.\n\n##############################################################################\n# Finally, we'll remove the file we created:\n\nos.remove('large.fits')",
                "filename": "examples/io/skip_create-large-fits.py",
                "start_index": 2977,
                "end_index": 4608,
                "start_line": 77,
                "end_line": 112,
                "max_line": 112,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "# Licensed under a 3-clause BSD style license - see PYFITS.rst\n\nimport mmap\nimport sys\nimport warnings\n\nimport numpy as np\n\nfrom astropy.io.fits.header import Header\nfrom astropy.io.fits.util import (\n    _is_dask_array,\n    _is_int,\n    _is_pseudo_integer,\n    _pseudo_zero,\n)\nfrom astropy.io.fits.verify import VerifyWarning\nfrom astropy.utils import isiterable, lazyproperty\n\nfrom .base import BITPIX2DTYPE, DELAYED, DTYPE2BITPIX, ExtensionHDU, _ValidHDU\n\n__all__ = [\"Section\", \"PrimaryHDU\", \"ImageHDU\"]",
                "filename": "astropy/io/fits/hdu/image.py",
                "start_index": 0,
                "end_index": 506,
                "start_line": 1,
                "end_line": 21,
                "max_line": 1291,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "# Licensed under a 3-clause BSD style license - see PYFITS.rst\n\n\nimport datetime\nimport numbers\nimport os\nimport sys\nimport warnings\nfrom contextlib import suppress\nfrom inspect import Parameter, signature\n\nimport numpy as np\n\nfrom astropy.io.fits import conf\nfrom astropy.io.fits.file import _File\nfrom astropy.io.fits.header import Header, _BasicHeader, _DelayedHeader, _pad_length\nfrom astropy.io.fits.util import (\n    _extract_number,\n    _free_space_check,\n    _get_array_mmap,\n    _is_int,\n    _is_pseudo_integer,\n    _pseudo_zero,\n    decode_ascii,\n    first,\n    itersubclasses,\n)\nfrom astropy.io.fits.verify import _ErrList, _Verify\nfrom astropy.utils import lazyproperty\nfrom astropy.utils.exceptions import AstropyUserWarning\n\n__all__ = [\n    \"DELAYED\",\n    # classes\n    \"InvalidHDUException\",\n    \"ExtensionHDU\",\n    \"NonstandardExtHDU\",\n]\n\n\nclass _Delayed:\n    pass\n\n\nDELAYED = _Delayed()\n\n\nBITPIX2DTYPE = {\n    8: \"uint8\",\n    16: \"int16\",\n    32: \"int32\",\n    64: \"int64\",\n    -32: \"float32\",\n    -64: \"float64\",\n}\n\"\"\"Maps FITS BITPIX values to Numpy dtype names.\"\"\"\n\nDTYPE2BITPIX = {\n    \"int8\": 8,\n    \"uint8\": 8,\n    \"int16\": 16,\n    \"uint16\": 16,\n    \"int32\": 32,\n    \"uint32\": 32,\n    \"int64\": 64,\n    \"uint64\": 64,\n    \"float32\": -32,\n    \"float64\": -64,\n}\n\"\"\"\nMaps Numpy dtype names to FITS BITPIX values (this includes unsigned\nintegers, with the assumption that the pseudo-unsigned integer convention\nwill be used in this case.\n\"\"\"\n\n\nclass InvalidHDUException(Exception):\n    \"\"\"\n    A custom exception class used mainly to signal to _BaseHDU.__new__ that\n    an HDU cannot possibly be considered valid, and must be assumed to be\n    corrupted.\n    \"\"\"",
                "filename": "astropy/io/fits/hdu/base.py",
                "start_index": 0,
                "end_index": 1678,
                "start_line": 1,
                "end_line": 1661,
                "max_line": 1666,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "# For backwards-compatibility, though nobody should have\n# been using this directly:\n_AllHDU = _BaseHDU\n\n# For convenience...\n# TODO: register_hdu could be made into a class decorator which would be pretty\n# cool, but only once 2.6 support is dropped.\nregister_hdu = _BaseHDU.register_hdu\nunregister_hdu = _BaseHDU.unregister_hdu\n\n\nclass _CorruptedHDU(_BaseHDU):\n    \"\"\"\n    A Corrupted HDU class.\n\n    This class is used when one or more mandatory `Card`s are\n    corrupted (unparsable), such as the ``BITPIX``, ``NAXIS``, or\n    ``END`` cards.  A corrupted HDU usually means that the data size\n    cannot be calculated or the ``END`` card is not found.  In the case\n    of a missing ``END`` card, the `Header` may also contain the binary\n    data\n\n    .. note::\n       In future, it may be possible to decipher where the last block\n       of the `Header` ends, but this task may be difficult when the\n       extension is a `TableHDU` containing ASCII data.\n    \"\"\"\n\n    @property\n    def size(self):\n        \"\"\"\n        Returns the size (in bytes) of the HDU's data part.\n        \"\"\"\n        # Note: On compressed files this might report a negative size; but the\n        # file is corrupt anyways so I'm not too worried about it.\n        if self._buffer is not None:\n            return len(self._buffer) - self._data_offset\n\n        return self._file.size - self._data_offset\n\n    def _summary(self):\n        return (self.name, self.ver, \"CorruptedHDU\")\n\n    def verify(self):\n        pass",
                "filename": "astropy/io/fits/hdu/base.py",
                "start_index": 29598,
                "end_index": 31089,
                "start_line": 786,
                "end_line": 830,
                "max_line": 1666,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "\"\"\"\n    Base class for all HDUs which are not corrupted.\n    \"\"\"\n\n    def __init__(self, data=None, header=None, name=None, ver=None, **kwargs):\n        super().__init__(data=data, header=header)\n\n        if header is not None and not isinstance(header, (Header, _BasicHeader)):\n            # TODO: Instead maybe try initializing a new Header object from\n            # whatever is passed in as the header--there are various types\n            # of objects that could work for this...\n            raise ValueError(\"header must be a Header object\")\n\n        # NOTE:  private data members _checksum and _datasum are used by the\n        # utility script \"fitscheck\" to detect missing checksums.\n        self._checksum = None\n        self._checksum_valid = None\n        self._datasum = None\n        self._datasum_valid = None\n\n        if name is not None:\n            self.name = name\n        if ver is not None:\n            self.ver = ver\n\n    @classmethod\n    def match_header(cls, header):\n        \"\"\"\n        Matches any HDU that is not recognized as having either the SIMPLE or\n        XTENSION keyword in its header's first card, but is nonetheless not\n        corrupted.\n\n        TODO: Maybe it would make more sense to use _NonstandardHDU in this\n        case?  Not sure...\n        \"\"\"\n        return first(header.keys()) not in (\"SIMPLE\", \"XTENSION\")\n\n    @property\n    def size(self):\n        \"\"\"\n        Size (in bytes) of the data portion of the HDU.\n        \"\"\"\n        return self._header.data_size\n\n    def filebytes(self):\n        \"\"\"\n        Calculates and returns the number of bytes that this HDU will write to\n        a file.\n        \"\"\"\n        f = _File()\n        # TODO: Fix this once new HDU writing API is settled on\n        return self._writeheader(f)[1] + self._writedata(f)[1]",
                "filename": "astropy/io/fits/hdu/base.py",
                "start_index": 33607,
                "end_index": 35405,
                "start_line": 56,
                "end_line": 966,
                "max_line": 1666,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "\"\"\"\n=====================================================\nCreate a multi-extension FITS (MEF) file from scratch\n=====================================================\n\nThis example demonstrates how to create a multi-extension FITS (MEF)\nfile from scratch using `astropy.io.fits`.\n\n\n*By: Erik Bray*\n\n*License: BSD*\n\n\n\"\"\"\n\nimport os\n\nfrom astropy.io import fits\n\n##############################################################################\n# HDUList objects are used to hold all the HDUs in a FITS file. This\n# ``HDUList`` class is a subclass of Python's builtin `list` and can be\n# created from scratch. For example, to create a FITS file with\n# three extensions:\n\nnew_hdul = fits.HDUList()\nnew_hdul.append(fits.ImageHDU())\nnew_hdul.append(fits.ImageHDU())\n\n##############################################################################\n# Write out the new file to disk:\n\nnew_hdul.writeto('test.fits')\n\n##############################################################################\n# Alternatively, the HDU instances can be created first (or read from an\n# existing FITS file).\n#\n# Create a multi-extension FITS file with two empty IMAGE extensions (a\n# default PRIMARY HDU is prepended automatically if one is not specified;\n# we use ``overwrite=True`` to overwrite the file if it already exists):\n\nhdu1 = fits.PrimaryHDU()\nhdu2 = fits.ImageHDU()\nnew_hdul = fits.HDUList([hdu1, hdu2])\nnew_hdul.writeto('test.fits', overwrite=True)\n\n##############################################################################\n# Finally, we'll remove the file we created:\n\nos.remove('test.fits')",
                "filename": "examples/io/create-mef.py",
                "start_index": 0,
                "end_index": 1580,
                "start_line": 1,
                "end_line": 52,
                "max_line": 52,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "if self.wcs:\n            # Simply extending the FITS header with the WCS can lead to\n            # duplicates of the WCS keywords; iterating over the WCS\n            # header should be safer.\n            #\n            # Turns out if I had read the io.fits.Header.extend docs more\n            # carefully, I would have realized that the keywords exist to\n            # avoid duplicates and preserve, as much as possible, the\n            # structure of the commentary cards.\n            #\n            # Note that until astropy/astropy#3967 is closed, the extend\n            # will fail if there are comment cards in the WCS header but\n            # not header.\n            wcs_header = self.wcs.to_header(relax=wcs_relax)\n            header.extend(wcs_header, useblanks=False, update=True)\n\n        if as_image_hdu:\n            hdus = [fits.ImageHDU(self.data, header)]\n        else:\n            hdus = [fits.PrimaryHDU(self.data, header)]\n\n        if hdu_mask and self.mask is not None:\n            # Always assuming that the mask is a np.ndarray (check that it has\n            # a 'shape').\n            if not hasattr(self.mask, \"shape\"):\n                raise ValueError(\"only a numpy.ndarray mask can be saved.\")\n\n            # Convert boolean mask to uint since io.fits cannot handle bool.\n            hduMask = fits.ImageHDU(self.mask.astype(np.uint8), name=hdu_mask)\n            hdus.append(hduMask)",
                "filename": "astropy/nddata/ccddata.py",
                "start_index": 13049,
                "end_index": 14453,
                "start_line": 368,
                "end_line": 397,
                "max_line": 814,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "class _ImageBaseHDU(_ValidHDU):",
                "filename": "astropy/io/fits/hdu/image.py",
                "start_index": 509,
                "end_index": 540,
                "start_line": 24,
                "end_line": 24,
                "max_line": 1291,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            },
            {
                "code": "# Licensed under a 3-clause BSD style license - see PYFITS.rst\n\nimport errno\nimport gzip\nimport http.client\nimport io\nimport mmap\nimport operator\nimport os\nimport re\nimport sys\nimport tempfile\nimport warnings\nimport zipfile\nfrom functools import reduce\n\nimport numpy as np\n\n# NOTE: Python can be built without bz2.\nfrom astropy.utils.compat.optional_deps import HAS_BZ2\nfrom astropy.utils.data import (\n    _is_url,\n    _requires_fsspec,\n    download_file,\n    get_readable_fileobj,\n)\nfrom astropy.utils.decorators import classproperty\nfrom astropy.utils.exceptions import AstropyUserWarning\nfrom astropy.utils.misc import NOT_OVERWRITING_MSG\n\nfrom .util import (\n    _array_from_file,\n    _array_to_file,\n    _write_string,\n    fileobj_closed,\n    fileobj_mode,\n    fileobj_name,\n    isfile,\n    isreadable,\n    iswritable,\n    path_like,\n)\n\nif HAS_BZ2:\n    import bz2\n\n\n# Maps astropy.io.fits-specific file mode names to the appropriate file\n# modes to use for the underlying raw files.\nIO_FITS_MODES = {\n    \"readonly\": \"rb\",\n    \"copyonwrite\": \"rb\",\n    \"update\": \"rb+\",\n    \"append\": \"ab+\",\n    \"ostream\": \"wb\",\n    \"denywrite\": \"rb\",\n}\n\n# Maps OS-level file modes to the appropriate astropy.io.fits specific mode\n# to use when given file objects but no mode specified; obviously in\n# IO_FITS_MODES there are overlaps; for example 'readonly' and 'denywrite'\n# both require the file to be opened in 'rb' mode.  But 'readonly' is the\n# default behavior for such files if not otherwise specified.\n# Note: 'ab' is only supported for 'ostream' which is output-only.\nFILE_MODES = {\n    \"rb\": \"readonly\",\n    \"rb+\": \"update\",\n    \"wb\": \"ostream\",\n    \"wb+\": \"update\",\n    \"ab\": \"ostream\",\n    \"ab+\": \"append\",\n}\n\n# A match indicates the file was opened in text mode, which is not allowed\nTEXT_RE = re.compile(r\"^[rwa]((t?\\+?)|(\\+?t?))$\")\n\n\n# readonly actually uses copyonwrite for mmap so that readonly without mmap and\n# with mmap still have to same behavior with regard to updating the array.  To\n# get a truly readonly mmap use denywrite\n# the name 'denywrite' comes from a deprecated flag to mmap() on Linux--it\n# should be clarified that 'denywrite' mode is not directly analogous to the\n# use of that flag; it was just taken, for lack of anything better, as a name\n# that means something like \"read only\" but isn't readonly.\nMEMMAP_MODES = {\n    \"readonly\": mmap.ACCESS_COPY,\n    \"copyonwrite\": mmap.ACCESS_COPY,\n    \"update\": mmap.ACCESS_WRITE,\n    \"append\": mmap.ACCESS_COPY,\n    \"denywrite\": mmap.ACCESS_READ,\n}\n\n# TODO: Eventually raise a warning, and maybe even later disable the use of\n# 'copyonwrite' and 'denywrite' modes unless memmap=True.  For now, however,\n# that would generate too many warnings for too many users.  If nothing else,\n# wait until the new logging system is in place.\n\nGZIP_MAGIC = b\"\\x1f\\x8b\\x08\"\nPKZIP_MAGIC = b\"\\x50\\x4b\\x03\\x04\"\nBZIP2_MAGIC = b\"\\x42\\x5a\"",
                "filename": "astropy/io/fits/file.py",
                "start_index": 0,
                "end_index": 2889,
                "start_line": 1,
                "end_line": 100,
                "max_line": 701,
                "git_instance": "github",
                "repo_name": "testbed/astropy__astropy__5.1",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "astropy/io/fits/hdu/image.py": [
                {
                    "chunk": {
                        "code": "# Licensed under a 3-clause BSD style license - see PYFITS.rst\n\nimport mmap\nimport sys\nimport warnings\n\nimport numpy as np\n\nfrom astropy.io.fits.header import Header\nfrom astropy.io.fits.util import (\n    _is_dask_array,\n    _is_int,\n    _is_pseudo_integer,\n    _pseudo_zero,\n)\nfrom astropy.io.fits.verify import VerifyWarning\nfrom astropy.utils import isiterable, lazyproperty\n\nfrom .base import BITPIX2DTYPE, DELAYED, DTYPE2BITPIX, ExtensionHDU, _ValidHDU\n\n__all__ = [\"Section\", \"PrimaryHDU\", \"ImageHDU\"]",
                        "filename": "astropy/io/fits/hdu/image.py",
                        "start_index": 0,
                        "end_index": 506,
                        "start_line": 1,
                        "end_line": 21,
                        "max_line": 1291,
                        "git_instance": "github",
                        "repo_name": "testbed/astropy__astropy__5.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet is from the file where `ImageHDU` is defined, which is directly related to the issue of handling zero-dimensional data."
                },
                {
                    "chunk": {
                        "code": "class _ImageBaseHDU(_ValidHDU):",
                        "filename": "astropy/io/fits/hdu/image.py",
                        "start_index": 509,
                        "end_index": 540,
                        "start_line": 24,
                        "end_line": 24,
                        "max_line": 1291,
                        "git_instance": "github",
                        "repo_name": "testbed/astropy__astropy__5.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet indicates the existence of an `_ImageBaseHDU` class which might be the parent class of `ImageHDU` and relevant to the issue."
                }
            ],
            "astropy/io/fits/hdu/base.py": [
                {
                    "chunk": {
                        "code": "# Licensed under a 3-clause BSD style license - see PYFITS.rst\n\n\nimport datetime\nimport numbers\nimport os\nimport sys\nimport warnings\nfrom contextlib import suppress\nfrom inspect import Parameter, signature\n\nimport numpy as np\n\nfrom astropy.io.fits import conf\nfrom astropy.io.fits.file import _File\nfrom astropy.io.fits.header import Header, _BasicHeader, _DelayedHeader, _pad_length\nfrom astropy.io.fits.util import (\n    _extract_number,\n    _free_space_check,\n    _get_array_mmap,\n    _is_int,\n    _is_pseudo_integer,\n    _pseudo_zero,\n    decode_ascii,\n    first,\n    itersubclasses,\n)\nfrom astropy.io.fits.verify import _ErrList, _Verify\nfrom astropy.utils import lazyproperty\nfrom astropy.utils.exceptions import AstropyUserWarning\n\n__all__ = [\n    \"DELAYED\",\n    # classes\n    \"InvalidHDUException\",\n    \"ExtensionHDU\",\n    \"NonstandardExtHDU\",\n]\n\n\nclass _Delayed:\n    pass\n\n\nDELAYED = _Delayed()\n\n\nBITPIX2DTYPE = {\n    8: \"uint8\",\n    16: \"int16\",\n    32: \"int32\",\n    64: \"int64\",\n    -32: \"float32\",\n    -64: \"float64\",\n}\n\"\"\"Maps FITS BITPIX values to Numpy dtype names.\"\"\"\n\nDTYPE2BITPIX = {\n    \"int8\": 8,\n    \"uint8\": 8,\n    \"int16\": 16,\n    \"uint16\": 16,\n    \"int32\": 32,\n    \"uint32\": 32,\n    \"int64\": 64,\n    \"uint64\": 64,\n    \"float32\": -32,\n    \"float64\": -64,\n}\n\"\"\"\nMaps Numpy dtype names to FITS BITPIX values (this includes unsigned\nintegers, with the assumption that the pseudo-unsigned integer convention\nwill be used in this case.\n\"\"\"\n\n\nclass InvalidHDUException(Exception):\n    \"\"\"\n    A custom exception class used mainly to signal to _BaseHDU.__new__ that\n    an HDU cannot possibly be considered valid, and must be assumed to be\n    corrupted.\n    \"\"\"",
                        "filename": "astropy/io/fits/hdu/base.py",
                        "start_index": 0,
                        "end_index": 1678,
                        "start_line": 1,
                        "end_line": 1661,
                        "max_line": 1666,
                        "git_instance": "github",
                        "repo_name": "testbed/astropy__astropy__5.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the base class for HDUs and may contain relevant code for initializing and validating HDU objects, including `ImageHDU`."
                },
                {
                    "chunk": {
                        "code": "# For backwards-compatibility, though nobody should have\n# been using this directly:\n_AllHDU = _BaseHDU\n\n# For convenience...\n# TODO: register_hdu could be made into a class decorator which would be pretty\n# cool, but only once 2.6 support is dropped.\nregister_hdu = _BaseHDU.register_hdu\nunregister_hdu = _BaseHDU.unregister_hdu\n\n\nclass _CorruptedHDU(_BaseHDU):\n    \"\"\"\n    A Corrupted HDU class.\n\n    This class is used when one or more mandatory `Card`s are\n    corrupted (unparsable), such as the ``BITPIX``, ``NAXIS``, or\n    ``END`` cards.  A corrupted HDU usually means that the data size\n    cannot be calculated or the ``END`` card is not found.  In the case\n    of a missing ``END`` card, the `Header` may also contain the binary\n    data\n\n    .. note::\n       In future, it may be possible to decipher where the last block\n       of the `Header` ends, but this task may be difficult when the\n       extension is a `TableHDU` containing ASCII data.\n    \"\"\"\n\n    @property\n    def size(self):\n        \"\"\"\n        Returns the size (in bytes) of the HDU's data part.\n        \"\"\"\n        # Note: On compressed files this might report a negative size; but the\n        # file is corrupt anyways so I'm not too worried about it.\n        if self._buffer is not None:\n            return len(self._buffer) - self._data_offset\n\n        return self._file.size - self._data_offset\n\n    def _summary(self):\n        return (self.name, self.ver, \"CorruptedHDU\")\n\n    def verify(self):\n        pass",
                        "filename": "astropy/io/fits/hdu/base.py",
                        "start_index": 29598,
                        "end_index": 31089,
                        "start_line": 786,
                        "end_line": 830,
                        "max_line": 1666,
                        "git_instance": "github",
                        "repo_name": "testbed/astropy__astropy__5.1",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet defines a `_CorruptedHDU` class which might be relevant for handling cases where an HDU is considered corrupted, such as when zero-dimensional data is provided."
                }
            ]
        },
        "solution_task": "- Check if the `ImageHDU` class or its parent classes have a method to validate the data before writing to a file.\n- If not, implement a `_validate_data` method in the `ImageHDU` class to check for zero-dimensional ndarrays and raise an error if encountered.\n- Ensure that the `_validate_data` method is called before writing the HDU to a file in the `writeto` method.\n- Update the `writeto` method to include the `overwrite` parameter and pass it to the underlying file writing mechanisms.\n\n```python\nfrom astropy.io.fits.hdu.image import _ImageBaseHDU\n\nclass ImageHDU(_ImageBaseHDU):\n    # ... existing code ...\n\n    def _validate_data(self, data):\n        if data is not None and data.shape == ():\n            raise ValueError(\"Zero-dimensional data is not supported.\")\n\n    def writeto(self, filename, overwrite=False, ...):\n        # ... existing code ...\n        self._validate_data(self.data)\n        # ... file writing code ...\n        if overwrite:\n            with suppress(OSError):\n                os.remove(filename)\n        # ... continue with writing the file ...\n```\n\n- Ensure that the `overwrite` parameter is handled correctly when calling `writeto` from other parts of the codebase.\n- Test the changes with an ndarray that has a shape `()` to confirm that a `ValueError` is raised.",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a detailed and actionable solution to the problem of `io.fits` creating corrupt FITS files when an `ImageHDU` contains zero-dimensional data. It suggests checking for a validation method, implementing a `_validate_data` method to catch zero-dimensional ndarrays, and ensuring this method is called before writing to a file. The RESPONSE also correctly addresses the need to handle the `overwrite` parameter and provides a code snippet that demonstrates how to integrate the proposed changes into the `ImageHDU` class. Additionally, the RESPONSE includes a suggestion to test the changes, which is a good practice for software development. The links to the code snippets are relevant and provide a starting point for locating the necessary code to modify. The RESPONSE is comprehensive and addresses all aspects of the described bug, facilitating its resolution.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711736298.978494,
        "result": "- Check if the `ImageHDU` class or its parent classes have a method to validate the data before writing to a file.\n- If not, implement a `_validate_data` method in the `ImageHDU` class to check for zero-dimensional ndarrays and raise an error if encountered.\n- Ensure that the `_validate_data` method is called before writing the HDU to a file in the `writeto` method.\n- Update the `writeto` method to include the `overwrite` parameter and pass it to the underlying file writing mechanisms.\n\n```python\nfrom astropy.io.fits.hdu.image import _ImageBaseHDU\n\nclass ImageHDU(_ImageBaseHDU):\n    # ... existing code ...\n\n    def _validate_data(self, data):\n        if data is not None and data.shape == ():\n            raise ValueError(\"Zero-dimensional data is not supported.\")\n\n    def writeto(self, filename, overwrite=False, ...):\n        # ... existing code ...\n        self._validate_data(self.data)\n        # ... file writing code ...\n        if overwrite:\n            with suppress(OSError):\n                os.remove(filename)\n        # ... continue with writing the file ...\n```\n\n- Ensure that the `overwrite` parameter is handled correctly when calling `writeto` from other parts of the codebase.\n- Test the changes with an ndarray that has a shape `()` to confirm that a `ValueError` is raised.\n\n### Code snippets to check\n\n-  \u2192 [astropy](https://github.com/testbed/astropy__astropy__5.1/tree//astropy) \u2192 [io](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/io) \u2192 [fits](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/io/fits) \u2192 [hdu](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/io/fits/hdu)- [Lines 1 - 21](https://github.com/testbed/astropy__astropy__5.1/blob//astropy/io/fits/hdu/image.py#L1-L21)\n\n This snippet is from the file where `ImageHDU` is defined, which is directly related to the issue of handling zero-dimensional data. \n\n\n   - [Lines 24 - 24](https://github.com/testbed/astropy__astropy__5.1/blob//astropy/io/fits/hdu/image.py#L24-L24)\n\n This snippet indicates the existence of an `_ImageBaseHDU` class which might be the parent class of `ImageHDU` and relevant to the issue.\n-  \u2192 [astropy](https://github.com/testbed/astropy__astropy__5.1/tree//astropy) \u2192 [io](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/io) \u2192 [fits](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/io/fits) \u2192 [hdu](https://github.com/testbed/astropy__astropy__5.1/tree//astropy/io/fits/hdu)- [Lines 1 - 1661](https://github.com/testbed/astropy__astropy__5.1/blob//astropy/io/fits/hdu/base.py#L1-L1661)\n\n This snippet contains the base class for HDUs and may contain relevant code for initializing and validating HDU objects, including `ImageHDU`. \n\n\n   - [Lines 786 - 830](https://github.com/testbed/astropy__astropy__5.1/blob//astropy/io/fits/hdu/base.py#L786-L830)\n\n This snippet defines a `_CorruptedHDU` class which might be relevant for handling cases where an HDU is considered corrupted, such as when zero-dimensional data is provided."
    }
}