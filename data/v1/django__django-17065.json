{
    "id": "django__django-17065",
    "repo_name": "testbed/django__django__5.0",
    "task_id": 4513525894178022107,
    "title": "BoundField.as_widget() ignores aria-describedby in attrs argument",
    "body": "Description\n\t \n\t\t(last modified by Sage Abdullah)\n\t \nBoundField.as_widget() ignores aria-describedby that is passed in the attrs argument.\nUse case:\nIn Wagtail, we have our own mechanism for rendering form fields (called \"Panels\") that is built on top of Django's Forms API. We use BoundField.as_widget() in our rendering process to render only the form field's widget, while its help text element is rendered separately via our Panels API with a custom markup (including HTML id) that conforms to our design system. We've been passing additional attributes to BoundField.as_widget() to improve accessibility, including aria-describedby, to establish the relationship between the field widget rendered by Django and our help text element.\nAs of 966ecdd482167f3f6b08b00f484936c837751cb9, Django automatically adds aria-describedby to form fields with a help_text. The logic in build_widget_attrs() (used by as_widget()) checks for an existing aria-describedby in the field's widget's attrs before automatically generating one. However, it does not take into account the possibility of an existing aria-describedby in the attrs argument.\nA workaround on Wagtail's side could be to modify the widget's attrs before using as_widget(), but this is not ideal as the widget is customisable by the developer and we would have to copy the widget instance to avoid modifying the existing widget instance (which might be shared across form fields).\nI believe Django should check for aria-describedby in attrs first, before falling back to widget.attrs and the auto-generated value.\nTest case:\nclass BoundFieldTests(SimpleTestCase):\n\tdef test_as_widget_with_custom_aria_describedby(self):\n\t\tclass TestForm(Form):\n\t\t\tdata = CharField(help_text=\"Some help text\")\n\t\tform = TestForm({\"data\": \"some value\"})\n\t\tself.assertHTMLEqual(\n\t\t\tform[\"data\"].as_widget(attrs={\"aria-describedby\": \"custom_help_text_id\"}),\n\t\t\t\"\"\"\n\t\t\t<input type=\"text\" name=\"data\" value=\"some value\"\n\t\t\taria-describedby=\"custom_help_text_id\" required id=\"id_data\">\n\t\t\t\"\"\",\n\t\t)\nPatch:\ndiff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex deba739329..e4261d5e50 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -290,10 +290,11 @@ class BoundField(RenderableFieldMixin):\n\t\t # If a custom aria-describedby attribute is given and help_text is\n\t\t # used, the custom aria-described by is preserved so user can set the\n\t\t # desired order.\n-\t\tif custom_aria_described_by_id := widget.attrs.get(\"aria-describedby\"):\n-\t\t\tattrs[\"aria-describedby\"] = custom_aria_described_by_id\n-\t\telif self.field.help_text and self.id_for_label:\n-\t\t\tattrs[\"aria-describedby\"] = f\"{self.id_for_label}_helptext\"\n+\t\tif not attrs.get(\"aria-describedby\"):\n+\t\t\tif custom_aria_described_by_id := widget.attrs.get(\"aria-describedby\"):\n+\t\t\t\tattrs[\"aria-describedby\"] = custom_aria_described_by_id\n+\t\t\telif self.field.help_text and self.id_for_label:\n+\t\t\t\tattrs[\"aria-describedby\"] = f\"{self.id_for_label}_helptext\"\n\t\t return attrs\n \n\t @property\nHappy to submit a PR if this is accepted.\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/django__django__5.0.git",
    "requested_commit": "",
    "mayil_response": "- Modify the `build_widget_attrs` method in `django/forms/boundfield.py` to ensure that if `attrs` contains an `aria-describedby` attribute, it is not overwritten by the method logic. The check for `self.field.help_text` and `self.id_for_label` should only add `aria-describedby` if it is not already specified in `attrs`.\n\n```python\ndef build_widget_attrs(self, attrs, widget=None):\n    widget = widget or self.field.widget\n    attrs = dict(attrs)  # Copy attrs to avoid modifying the argument.\n    # ... existing code ...\n\n    # Modify the condition to check if 'aria-describedby' is already in attrs\n    if 'aria-describedby' not in attrs and self.field.help_text and self.id_for_label:\n        attrs['aria-describedby'] = f\"{self.id_for_label}_helptext\"\n    return attrs\n```\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__5.0/tree//django) \u2192 [forms](https://github.com/testbed/django__django__5.0/tree//django/forms)- [Lines 266 - 313](https://github.com/testbed/django__django__5.0/blob//django/forms/boundfield.py#L266-L313)\n\n This snippet contains the build_widget_attrs function where the logic for handling aria-describedby is implemented. The issue describes a problem with this logic, so changes are required here. \n\n\n   - [Lines 85 - 163](https://github.com/testbed/django__django__5.0/blob//django/forms/boundfield.py#L85-L163)\n\n This snippet contains the as_widget method which calls build_widget_attrs. Understanding the flow of how as_widget uses build_widget_attrs is necessary to address the issue.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.0002445,
        "snippet_processor": 0.056990000000000006,
        "issue_star_creation": 0.03148,
        "issue_star_solver": 0.058730000000000004,
        "bouncer": 0.02228
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711705073.264423,
        "relevant_snippets": [
            {
                "code": "def build_widget_attrs(self, attrs, widget=None):\n        widget = widget or self.field.widget\n        attrs = dict(attrs)  # Copy attrs to avoid modifying the argument.\n        if (\n            widget.use_required_attribute(self.initial)\n            and self.field.required\n            and self.form.use_required_attribute\n        ):\n            # MultiValueField has require_all_fields: if False, fall back\n            # on subfields.\n            if (\n                hasattr(self.field, \"require_all_fields\")\n                and not self.field.require_all_fields\n                and isinstance(self.field.widget, MultiWidget)\n            ):\n                for subfield, subwidget in zip(self.field.fields, widget.widgets):\n                    subwidget.attrs[\"required\"] = (\n                        subwidget.use_required_attribute(self.initial)\n                        and subfield.required\n                    )\n            else:\n                attrs[\"required\"] = True\n        if self.field.disabled:\n            attrs[\"disabled\"] = True\n        # If a custom aria-describedby attribute is given (either via the attrs\n        # argument or widget.attrs) and help_text is used, the custom\n        # aria-described by is preserved so user can set the desired order.\n        if (\n            not attrs.get(\"aria-describedby\")\n            and not widget.attrs.get(\"aria-describedby\")\n            and self.field.help_text\n            and self.id_for_label\n        ):\n            attrs[\"aria-describedby\"] = f\"{self.id_for_label}_helptext\"\n        return attrs\n\n    @property\n    def widget_type(self):\n        return re.sub(\n            r\"widget$|input$\", \"\", self.field.widget.__class__.__name__.lower()\n        )\n\n    @property\n    def use_fieldset(self):\n        \"\"\"\n        Return the value of this BoundField widget's use_fieldset attribute.\n        \"\"\"\n        return self.field.widget.use_fieldset",
                "filename": "django/forms/boundfield.py",
                "start_index": 9796,
                "end_index": 11703,
                "start_line": 266,
                "end_line": 313,
                "max_line": 355,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": ""
            },
            {
                "code": "def as_widget(self, widget=None, attrs=None, only_initial=False):\n        \"\"\"\n        Render the field by rendering the passed widget, adding any HTML\n        attributes passed as attrs. If a widget isn't specified, use the\n        field's default widget.\n        \"\"\"\n        widget = widget or self.field.widget\n        if self.field.localize:\n            widget.is_localized = True\n        attrs = attrs or {}\n        attrs = self.build_widget_attrs(attrs, widget)\n        if self.auto_id and \"id\" not in widget.attrs:\n            attrs.setdefault(\n                \"id\", self.html_initial_id if only_initial else self.auto_id\n            )\n        if only_initial and self.html_initial_name in self.form.data:\n            # Propagate the hidden initial value.\n            value = self.form._widget_data_value(\n                self.field.hidden_widget(),\n                self.html_initial_name,\n            )\n        else:\n            value = self.value()\n        return widget.render(\n            name=self.html_initial_name if only_initial else self.html_name,\n            value=value,\n            attrs=attrs,\n            renderer=self.form.renderer,\n        )\n\n    def as_text(self, attrs=None, **kwargs):\n        \"\"\"\n        Return a string of HTML for representing this as an <input type=\"text\">.\n        \"\"\"\n        return self.as_widget(TextInput(), attrs, **kwargs)\n\n    def as_textarea(self, attrs=None, **kwargs):\n        \"\"\"Return a string of HTML for representing this as a <textarea>.\"\"\"\n        return self.as_widget(Textarea(), attrs, **kwargs)\n\n    def as_hidden(self, attrs=None, **kwargs):\n        \"\"\"\n        Return a string of HTML for representing this as an <input type=\"hidden\">.\n        \"\"\"\n        return self.as_widget(self.field.hidden_widget(), attrs, **kwargs)\n\n    @property\n    def data(self):\n        \"\"\"\n        Return the data for this BoundField, or None if it wasn't given.\n        \"\"\"\n        return self.form._widget_data_value(self.field.widget, self.html_name)\n\n    def value(self):\n        \"\"\"\n        Return the value for this BoundField, using the initial value if\n        the form is not bound or the data otherwise.\n        \"\"\"\n        data = self.initial\n        if self.form.is_bound:\n            data = self.field.bound_data(self.data, data)\n        return self.field.prepare_value(data)\n\n    def _has_changed(self):\n        field = self.field\n        if field.show_hidden_initial:\n            hidden_widget = field.hidden_widget()\n            initial_value = self.form._widget_data_value(\n                hidden_widget,\n                self.html_initial_name,\n            )\n            try:\n                initial_value = field.to_python(initial_value)\n            except ValidationError:\n                # Always assume data has changed if validation fails.\n                return True\n        else:\n            initial_value = self.initial\n        return field.has_changed(initial_value, self.data)",
                "filename": "django/forms/boundfield.py",
                "start_index": 2742,
                "end_index": 5694,
                "start_line": 85,
                "end_line": 163,
                "max_line": 355,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": ""
            },
            {
                "code": "class AdminTextareaWidget(forms.Textarea):\n    def __init__(self, attrs=None):\n        super().__init__(attrs={\"class\": \"vLargeTextField\", **(attrs or {})})\n\n\nclass AdminTextInputWidget(forms.TextInput):\n    def __init__(self, attrs=None):\n        super().__init__(attrs={\"class\": \"vTextField\", **(attrs or {})})\n\n\nclass AdminEmailInputWidget(forms.EmailInput):\n    def __init__(self, attrs=None):\n        super().__init__(attrs={\"class\": \"vTextField\", **(attrs or {})})\n\n\nclass AdminURLFieldWidget(forms.URLInput):\n    template_name = \"admin/widgets/url.html\"\n\n    def __init__(self, attrs=None, validator_class=URLValidator):\n        super().__init__(attrs={\"class\": \"vURLField\", **(attrs or {})})\n        self.validator = validator_class()\n\n    def get_context(self, name, value, attrs):\n        try:\n            self.validator(value if value else \"\")\n            url_valid = True\n        except ValidationError:\n            url_valid = False\n        context = super().get_context(name, value, attrs)\n        context[\"current_label\"] = _(\"Currently:\")\n        context[\"change_label\"] = _(\"Change:\")\n        context[\"widget\"][\"href\"] = (\n            smart_urlquote(context[\"widget\"][\"value\"]) if value else \"\"\n        )\n        context[\"url_valid\"] = url_valid\n        return context\n\n\nclass AdminIntegerFieldWidget(forms.NumberInput):\n    class_name = \"vIntegerField\"\n\n    def __init__(self, attrs=None):\n        super().__init__(attrs={\"class\": self.class_name, **(attrs or {})})\n\n\nclass AdminBigIntegerFieldWidget(AdminIntegerFieldWidget):\n    class_name = \"vBigIntegerField\"\n\n\nclass AdminUUIDInputWidget(forms.TextInput):\n    def __init__(self, attrs=None):\n        super().__init__(attrs={\"class\": \"vUUIDField\", **(attrs or {})})\n\n\n# Mapping of lowercase language codes [returned by Django's get_language()] to\n# language codes supported by select2.\n# See django/contrib/admin/static/admin/js/vendor/select2/i18n/*\nSELECT2_TRANSLATIONS = {\n    x.lower(): x\n    for x in [\n        \"ar\",\n        \"az\",\n        \"bg\",\n        \"ca\",\n        \"cs\",\n        \"da\",\n        \"de\",\n        \"el\",\n        \"en\",\n        \"es\",\n        \"et\",\n        \"eu\",\n        \"fa\",\n        \"fi\",\n        \"fr\",\n        \"gl\",\n        \"he\",\n        \"hi\",\n        \"hr\",\n        \"hu\",\n        \"id\",\n        \"is\",\n        \"it\",\n        \"ja\",\n        \"km\",\n        \"ko\",\n        \"lt\",\n        \"lv\",\n        \"mk\",\n        \"ms\",\n        \"nb\",\n        \"nl\",\n        \"pl\",\n        \"pt-BR\",\n        \"pt\",\n        \"ro\",\n        \"ru\",\n        \"sk\",\n        \"sr-Cyrl\",\n        \"sr\",\n        \"sv\",\n        \"th\",\n        \"tr\",\n        \"uk\",\n        \"vi\",\n    ]\n}\nSELECT2_TRANSLATIONS.update({\"zh-hans\": \"zh-CN\", \"zh-hant\": \"zh-TW\"})",
                "filename": "django/contrib/admin/widgets.py",
                "start_index": 11903,
                "end_index": 14597,
                "start_line": 354,
                "end_line": 461,
                "max_line": 595,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": ""
            },
            {
                "code": "class Widget(metaclass=MediaDefiningClass):\n    needs_multipart_form = False  # Determines does this widget need multipart form\n    is_localized = False\n    is_required = False\n    supports_microseconds = True\n    use_fieldset = False\n\n    def __init__(self, attrs=None):\n        self.attrs = {} if attrs is None else attrs.copy()\n\n    def __deepcopy__(self, memo):\n        obj = copy.copy(self)\n        obj.attrs = self.attrs.copy()\n        memo[id(self)] = obj\n        return obj\n\n    @property\n    def is_hidden(self):\n        return self.input_type == \"hidden\" if hasattr(self, \"input_type\") else False\n\n    def subwidgets(self, name, value, attrs=None):\n        context = self.get_context(name, value, attrs)\n        yield context[\"widget\"]\n\n    def format_value(self, value):\n        \"\"\"\n        Return a value as it should appear when rendered in a template.\n        \"\"\"\n        if value == \"\" or value is None:\n            return None\n        if self.is_localized:\n            return formats.localize_input(value)\n        return str(value)\n\n    def get_context(self, name, value, attrs):\n        return {\n            \"widget\": {\n                \"name\": name,\n                \"is_hidden\": self.is_hidden,\n                \"required\": self.is_required,\n                \"value\": self.format_value(value),\n                \"attrs\": self.build_attrs(self.attrs, attrs),\n                \"template_name\": self.template_name,\n            },\n        }\n\n    def render(self, name, value, attrs=None, renderer=None):\n        \"\"\"Render the widget as an HTML string.\"\"\"\n        context = self.get_context(name, value, attrs)\n        return self._render(self.template_name, context, renderer)\n\n    def _render(self, template_name, context, renderer=None):\n        if renderer is None:\n            renderer = get_default_renderer()\n        return mark_safe(renderer.render(template_name, context))\n\n    def build_attrs(self, base_attrs, extra_attrs=None):\n        \"\"\"Build an attribute dictionary.\"\"\"\n        return {**base_attrs, **(extra_attrs or {})}\n\n    def value_from_datadict(self, data, files, name):\n        \"\"\"\n        Given a dictionary of data and this widget's name, return the value\n        of this widget or None if it's not provided.\n        \"\"\"\n        return data.get(name)\n\n    def value_omitted_from_data(self, data, files, name):\n        return name not in data\n\n    def id_for_label(self, id_):\n        \"\"\"\n        Return the HTML ID attribute of this Widget for use by a <label>, given\n        the ID of the field. Return an empty string if no ID is available.\n\n        This hook is necessary because some widgets have multiple HTML\n        elements and, thus, multiple IDs. In that case, this method should\n        return an ID value that corresponds to the first ID in the widget's\n        tags.\n        \"\"\"\n        return id_\n\n    def use_required_attribute(self, initial):\n        return not self.is_hidden",
                "filename": "django/forms/widgets.py",
                "start_index": 6687,
                "end_index": 9611,
                "start_line": 225,
                "end_line": 308,
                "max_line": 1200,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": ""
            },
            {
                "code": "class RadioSelect(ChoiceWidget):\n    input_type = \"radio\"\n    template_name = \"django/forms/widgets/radio.html\"\n    option_template_name = \"django/forms/widgets/radio_option.html\"\n    use_fieldset = True\n\n    def id_for_label(self, id_, index=None):\n        \"\"\"\n        Don't include for=\"field_0\" in <label> to improve accessibility when\n        using a screen reader, in addition clicking such a label would toggle\n        the first input.\n        \"\"\"\n        if index is None:\n            return \"\"\n        return super().id_for_label(id_, index)\n\n\nclass CheckboxSelectMultiple(RadioSelect):\n    allow_multiple_selected = True\n    input_type = \"checkbox\"\n    template_name = \"django/forms/widgets/checkbox_select.html\"\n    option_template_name = \"django/forms/widgets/checkbox_option.html\"\n\n    def use_required_attribute(self, initial):\n        # Don't use the 'required' attribute because browser validation would\n        # require all checkboxes to be checked instead of at least one.\n        return False\n\n    def value_omitted_from_data(self, data, files, name):\n        # HTML checkboxes don't appear in POST data if not checked, so it's\n        # never known if the value is actually omitted.\n        return False",
                "filename": "django/forms/widgets.py",
                "start_index": 26683,
                "end_index": 27906,
                "start_line": 841,
                "end_line": 872,
                "max_line": 1200,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": ""
            },
            {
                "code": "class BoundField(RenderableFieldMixin):",
                "filename": "django/forms/boundfield.py",
                "start_index": 382,
                "end_index": 421,
                "start_line": 13,
                "end_line": 13,
                "max_line": 355,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": ""
            },
            {
                "code": "'use strict';\n{\n    const inputTags = ['BUTTON', 'INPUT', 'SELECT', 'TEXTAREA'];\n    const modelName = document.getElementById('django-admin-form-add-constants').dataset.modelName;\n    if (modelName) {\n        const form = document.getElementById(modelName + '_form');\n        for (const element of form.elements) {\n            // HTMLElement.offsetParent returns null when the element is not\n            // rendered.\n            if (inputTags.includes(element.tagName) && !element.disabled && element.offsetParent) {\n                element.focus();\n                break;\n            }\n        }\n    }\n}",
                "filename": "django/contrib/admin/static/admin/js/change_form.js",
                "start_index": 0,
                "end_index": 605,
                "start_line": 1,
                "end_line": 16,
                "max_line": 16,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": ""
            },
            {
                "code": "def formfield_for_dbfield(self, db_field, request, **kwargs):",
                "filename": "django/contrib/admin/options.py",
                "start_index": 4972,
                "end_index": 5033,
                "start_line": 156,
                "end_line": 156,
                "max_line": 2529,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": ""
            },
            {
                "code": "# by adding to ModelAdmin.formfield_overrides.\n\nFORMFIELD_FOR_DBFIELD_DEFAULTS = {\n    models.DateTimeField: {\n        \"form_class\": forms.SplitDateTimeField,\n        \"widget\": widgets.AdminSplitDateTime,\n    },\n    models.DateField: {\"widget\": widgets.AdminDateWidget},\n    models.TimeField: {\"widget\": widgets.AdminTimeWidget},\n    models.TextField: {\"widget\": widgets.AdminTextareaWidget},\n    models.URLField: {\"widget\": widgets.AdminURLFieldWidget},\n    models.IntegerField: {\"widget\": widgets.AdminIntegerFieldWidget},\n    models.BigIntegerField: {\"widget\": widgets.AdminBigIntegerFieldWidget},\n    models.CharField: {\"widget\": widgets.AdminTextInputWidget},\n    models.ImageField: {\"widget\": widgets.AdminFileWidget},\n    models.FileField: {\"widget\": widgets.AdminFileWidget},\n    models.EmailField: {\"widget\": widgets.AdminEmailInputWidget},\n    models.UUIDField: {\"widget\": widgets.AdminUUIDInputWidget},\n}\n\ncsrf_protect_m = method_decorator(csrf_protect)",
                "filename": "django/contrib/admin/options.py",
                "start_index": 2992,
                "end_index": 3956,
                "start_line": 101,
                "end_line": 121,
                "max_line": 2529,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": ""
            },
            {
                "code": "import unicodedata\n\nfrom django import forms\nfrom django.contrib.auth import authenticate, get_user_model, password_validation\nfrom django.contrib.auth.hashers import UNUSABLE_PASSWORD_PREFIX, identify_hasher\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.tokens import default_token_generator\nfrom django.contrib.sites.shortcuts import get_current_site\nfrom django.core.exceptions import ValidationError\nfrom django.core.mail import EmailMultiAlternatives\nfrom django.template import loader\nfrom django.utils.encoding import force_bytes\nfrom django.utils.http import urlsafe_base64_encode\nfrom django.utils.text import capfirst\nfrom django.utils.translation import gettext\nfrom django.utils.translation import gettext_lazy as _\n\nUserModel = get_user_model()\n\n\ndef _unicode_ci_compare(s1, s2):\n    \"\"\"\n    Perform case-insensitive comparison of two identifiers, using the\n    recommended algorithm from Unicode Technical Report 36, section\n    2.11.2(B)(2).\n    \"\"\"\n    return (\n        unicodedata.normalize(\"NFKC\", s1).casefold()\n        == unicodedata.normalize(\"NFKC\", s2).casefold()\n    )\n\n\nclass ReadOnlyPasswordHashWidget(forms.Widget):\n    template_name = \"auth/widgets/read_only_password_hash.html\"\n    read_only = True\n\n    def get_context(self, name, value, attrs):\n        context = super().get_context(name, value, attrs)\n        summary = []\n        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n            summary.append({\"label\": gettext(\"No password set.\")})\n        else:\n            try:\n                hasher = identify_hasher(value)\n            except ValueError:\n                summary.append(\n                    {\n                        \"label\": gettext(\n                            \"Invalid password format or unknown hashing algorithm.\"\n                        )\n                    }\n                )\n            else:\n                for key, value_ in hasher.safe_summary(value).items():\n                    summary.append({\"label\": gettext(key), \"value\": value_})\n        context[\"summary\"] = summary\n        return context\n\n    def id_for_label(self, id_):\n        return None\n\n\nclass ReadOnlyPasswordHashField(forms.Field):\n    widget = ReadOnlyPasswordHashWidget\n\n    def __init__(self, *args, **kwargs):\n        kwargs.setdefault(\"required\", False)\n        kwargs.setdefault(\"disabled\", True)\n        super().__init__(*args, **kwargs)\n\n\nclass UsernameField(forms.CharField):\n    def to_python(self, value):\n        return unicodedata.normalize(\"NFKC\", super().to_python(value))\n\n    def widget_attrs(self, widget):\n        return {\n            **super().widget_attrs(widget),\n            \"autocapitalize\": \"none\",\n            \"autocomplete\": \"username\",\n        }",
                "filename": "django/contrib/auth/forms.py",
                "start_index": 0,
                "end_index": 2738,
                "start_line": 1,
                "end_line": 367,
                "max_line": 510,
                "git_instance": "github",
                "repo_name": "testbed/django__django__5.0",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {
            "django/forms/boundfield.py": [
                {
                    "chunk": {
                        "code": "def build_widget_attrs(self, attrs, widget=None):\n        widget = widget or self.field.widget\n        attrs = dict(attrs)  # Copy attrs to avoid modifying the argument.\n        if (\n            widget.use_required_attribute(self.initial)\n            and self.field.required\n            and self.form.use_required_attribute\n        ):\n            # MultiValueField has require_all_fields: if False, fall back\n            # on subfields.\n            if (\n                hasattr(self.field, \"require_all_fields\")\n                and not self.field.require_all_fields\n                and isinstance(self.field.widget, MultiWidget)\n            ):\n                for subfield, subwidget in zip(self.field.fields, widget.widgets):\n                    subwidget.attrs[\"required\"] = (\n                        subwidget.use_required_attribute(self.initial)\n                        and subfield.required\n                    )\n            else:\n                attrs[\"required\"] = True\n        if self.field.disabled:\n            attrs[\"disabled\"] = True\n        # If a custom aria-describedby attribute is given (either via the attrs\n        # argument or widget.attrs) and help_text is used, the custom\n        # aria-described by is preserved so user can set the desired order.\n        if (\n            not attrs.get(\"aria-describedby\")\n            and not widget.attrs.get(\"aria-describedby\")\n            and self.field.help_text\n            and self.id_for_label\n        ):\n            attrs[\"aria-describedby\"] = f\"{self.id_for_label}_helptext\"\n        return attrs\n\n    @property\n    def widget_type(self):\n        return re.sub(\n            r\"widget$|input$\", \"\", self.field.widget.__class__.__name__.lower()\n        )\n\n    @property\n    def use_fieldset(self):\n        \"\"\"\n        Return the value of this BoundField widget's use_fieldset attribute.\n        \"\"\"\n        return self.field.widget.use_fieldset",
                        "filename": "django/forms/boundfield.py",
                        "start_index": 9796,
                        "end_index": 11703,
                        "start_line": 266,
                        "end_line": 313,
                        "max_line": 355,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__5.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the build_widget_attrs function where the logic for handling aria-describedby is implemented. The issue describes a problem with this logic, so changes are required here."
                },
                {
                    "chunk": {
                        "code": "def as_widget(self, widget=None, attrs=None, only_initial=False):\n        \"\"\"\n        Render the field by rendering the passed widget, adding any HTML\n        attributes passed as attrs. If a widget isn't specified, use the\n        field's default widget.\n        \"\"\"\n        widget = widget or self.field.widget\n        if self.field.localize:\n            widget.is_localized = True\n        attrs = attrs or {}\n        attrs = self.build_widget_attrs(attrs, widget)\n        if self.auto_id and \"id\" not in widget.attrs:\n            attrs.setdefault(\n                \"id\", self.html_initial_id if only_initial else self.auto_id\n            )\n        if only_initial and self.html_initial_name in self.form.data:\n            # Propagate the hidden initial value.\n            value = self.form._widget_data_value(\n                self.field.hidden_widget(),\n                self.html_initial_name,\n            )\n        else:\n            value = self.value()\n        return widget.render(\n            name=self.html_initial_name if only_initial else self.html_name,\n            value=value,\n            attrs=attrs,\n            renderer=self.form.renderer,\n        )\n\n    def as_text(self, attrs=None, **kwargs):\n        \"\"\"\n        Return a string of HTML for representing this as an <input type=\"text\">.\n        \"\"\"\n        return self.as_widget(TextInput(), attrs, **kwargs)\n\n    def as_textarea(self, attrs=None, **kwargs):\n        \"\"\"Return a string of HTML for representing this as a <textarea>.\"\"\"\n        return self.as_widget(Textarea(), attrs, **kwargs)\n\n    def as_hidden(self, attrs=None, **kwargs):\n        \"\"\"\n        Return a string of HTML for representing this as an <input type=\"hidden\">.\n        \"\"\"\n        return self.as_widget(self.field.hidden_widget(), attrs, **kwargs)\n\n    @property\n    def data(self):\n        \"\"\"\n        Return the data for this BoundField, or None if it wasn't given.\n        \"\"\"\n        return self.form._widget_data_value(self.field.widget, self.html_name)\n\n    def value(self):\n        \"\"\"\n        Return the value for this BoundField, using the initial value if\n        the form is not bound or the data otherwise.\n        \"\"\"\n        data = self.initial\n        if self.form.is_bound:\n            data = self.field.bound_data(self.data, data)\n        return self.field.prepare_value(data)\n\n    def _has_changed(self):\n        field = self.field\n        if field.show_hidden_initial:\n            hidden_widget = field.hidden_widget()\n            initial_value = self.form._widget_data_value(\n                hidden_widget,\n                self.html_initial_name,\n            )\n            try:\n                initial_value = field.to_python(initial_value)\n            except ValidationError:\n                # Always assume data has changed if validation fails.\n                return True\n        else:\n            initial_value = self.initial\n        return field.has_changed(initial_value, self.data)",
                        "filename": "django/forms/boundfield.py",
                        "start_index": 2742,
                        "end_index": 5694,
                        "start_line": 85,
                        "end_line": 163,
                        "max_line": 355,
                        "git_instance": "github",
                        "repo_name": "testbed/django__django__5.0",
                        "sha": ""
                    },
                    "reason_for_relevance": "This snippet contains the as_widget method which calls build_widget_attrs. Understanding the flow of how as_widget uses build_widget_attrs is necessary to address the issue."
                }
            ]
        },
        "solution_task": "- Modify the `build_widget_attrs` method in `django/forms/boundfield.py` to ensure that if `attrs` contains an `aria-describedby` attribute, it is not overwritten by the method logic. The check for `self.field.help_text` and `self.id_for_label` should only add `aria-describedby` if it is not already specified in `attrs`.\n\n```python\ndef build_widget_attrs(self, attrs, widget=None):\n    widget = widget or self.field.widget\n    attrs = dict(attrs)  # Copy attrs to avoid modifying the argument.\n    # ... existing code ...\n\n    # Modify the condition to check if 'aria-describedby' is already in attrs\n    if 'aria-describedby' not in attrs and self.field.help_text and self.id_for_label:\n        attrs['aria-describedby'] = f\"{self.id_for_label}_helptext\"\n    return attrs\n```",
        "bouncer_response": {
            "score": 9,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable solution to the described bug by suggesting a modification to the build_widget_attrs method in django/forms/boundfield.py. It correctly identifies the need to check if 'aria-describedby' is already present in the attrs argument before adding it based on the field's help_text and id_for_label. The provided code snippet is directly relevant and would likely resolve the issue if implemented. Additionally, the RESPONSE includes references to the relevant code snippets in the Django repository, which is helpful for locating the areas of the codebase that need to be reviewed and potentially modified. The only reason it does not score a 10 is that it does not explicitly mention the need to submit a PR, which was part of the original prompt's final statement. However, this is a minor omission and does not significantly detract from the overall utility of the RESPONSE.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711705179.253977,
        "result": "- Modify the `build_widget_attrs` method in `django/forms/boundfield.py` to ensure that if `attrs` contains an `aria-describedby` attribute, it is not overwritten by the method logic. The check for `self.field.help_text` and `self.id_for_label` should only add `aria-describedby` if it is not already specified in `attrs`.\n\n```python\ndef build_widget_attrs(self, attrs, widget=None):\n    widget = widget or self.field.widget\n    attrs = dict(attrs)  # Copy attrs to avoid modifying the argument.\n    # ... existing code ...\n\n    # Modify the condition to check if 'aria-describedby' is already in attrs\n    if 'aria-describedby' not in attrs and self.field.help_text and self.id_for_label:\n        attrs['aria-describedby'] = f\"{self.id_for_label}_helptext\"\n    return attrs\n```\n\n### Code snippets to check\n\n-  \u2192 [django](https://github.com/testbed/django__django__5.0/tree//django) \u2192 [forms](https://github.com/testbed/django__django__5.0/tree//django/forms)- [Lines 266 - 313](https://github.com/testbed/django__django__5.0/blob//django/forms/boundfield.py#L266-L313)\n\n This snippet contains the build_widget_attrs function where the logic for handling aria-describedby is implemented. The issue describes a problem with this logic, so changes are required here. \n\n\n   - [Lines 85 - 163](https://github.com/testbed/django__django__5.0/blob//django/forms/boundfield.py#L85-L163)\n\n This snippet contains the as_widget method which calls build_widget_attrs. Understanding the flow of how as_widget uses build_widget_attrs is necessary to address the issue."
    }
}