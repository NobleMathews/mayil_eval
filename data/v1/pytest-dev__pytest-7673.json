{
    "id": "pytest-dev__pytest-7673",
    "repo_name": "testbed/pytest-dev__pytest__6.0",
    "task_id": 8763656423201870733,
    "title": "logging: handler level restored incorrectly if caplog.set_level is called more than once",
    "body": "pytest version: 6.0.1\r\n\r\nThe fix in #7571 (backported to 6.0.1) has a bug where it does a \"set\" instead of \"setdefault\" to the `_initial_handler_level`. So if there are multiple calls to `caplog.set_level`, the level will be restored to that of the one-before-last call, instead of the value before the test.\r\n\r\nWill submit a fix for this shortly.\n",
    "state": "closed",
    "repo_link": "https://github.com/testbed/pytest-dev__pytest__6.0.git",
    "requested_commit": "",
    "mayil_response": "To address the issue with `caplog.set_level` and the incorrect restoration of `_initial_handler_level` after multiple calls to `caplog.set_level`, you should:\n\n- Locate the `caplog.set_level` method within the pytest codebase.\n- Modify the method to use a stack or another mechanism to keep track of each call to `set_level` and the corresponding logging level that should be restored.\n- Ensure that after the test is completed, the logging level is restored to the value it had before the first call to `caplog.set_level`.\n- Replace any \"set\" operations that overwrite the `_initial_handler_level` with \"setdefault\" or similar logic that only sets the initial level if it has not been set before.\n- Add tests to verify that multiple calls to `caplog.set_level` within the same test correctly restore the logging level to its original state after the test concludes.",
    "ai_cost": {
        "search_embedding": 1.3e-07,
        "issue_classifier": 0.000192,
        "snippet_processor": 0.07088,
        "issue_star_creation": 0.05451,
        "issue_star_solver": 0.03578,
        "bouncer": 0.046090000000000006
    },
    "mayil_collected_data": {
        "status": "completed",
        "start_time": 1711734747.679518,
        "relevant_snippets": [
            {
                "code": "import pytest\n\n\n@pytest.fixture(scope=\"module\", params=range(966))\ndef foo(request):\n    return request.param\n\n\ndef test_it(foo):\n    pass\n\n\ndef test_it2(foo):\n    pass",
                "filename": "bench/manyparam.py",
                "start_index": 0,
                "end_index": 168,
                "start_line": 1,
                "end_line": 14,
                "max_line": 14,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.0",
                "sha": ""
            },
            {
                "code": "rtd:\n  project: pytest",
                "filename": ".github/config.yml",
                "start_index": 0,
                "end_index": 22,
                "start_line": 1,
                "end_line": 2,
                "max_line": 2,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.0",
                "sha": ""
            },
            {
                "code": "# shim for pylib going away\n# if pylib is installed this file will get skipped\n# (`py/__init__.py` has higher precedence)\nimport sys\n\nimport _pytest._py.error as error\nimport _pytest._py.path as path\n\nsys.modules[\"py.error\"] = error\nsys.modules[\"py.path\"] = path",
                "filename": "src/py.py",
                "start_index": 0,
                "end_index": 262,
                "start_line": 1,
                "end_line": 10,
                "max_line": 10,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.0",
                "sha": ""
            },
            {
                "code": "blank_issues_enabled: false\ncontact_links:\n  - name: \u2753 Support Question\n    url: https://github.com/pytest-dev/pytest/discussions\n    about: Use GitHub's new Discussions feature for questions",
                "filename": ".github/ISSUE_TEMPLATE/config.yml",
                "start_index": 0,
                "end_index": 191,
                "start_line": 1,
                "end_line": 5,
                "max_line": 5,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.0",
                "sha": ""
            },
            {
                "code": "import pytest\n\nSKIP = True\n\n\n@pytest.mark.parametrize(\"x\", range(5000))\ndef test_foo(x):\n    if SKIP:\n        pytest.skip(\"heh\")",
                "filename": "bench/skip.py",
                "start_index": 0,
                "end_index": 128,
                "start_line": 1,
                "end_line": 9,
                "max_line": 9,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.0",
                "sha": ""
            },
            {
                "code": "import json\nfrom pathlib import Path\n\nimport requests\n\nissues_url = \"https://api.github.com/repos/pytest-dev/pytest/issues\"\n\n\ndef get_issues():\n    issues = []\n    url = issues_url\n    while 1:\n        get_data = {\"state\": \"all\"}\n        r = requests.get(url, params=get_data)\n        data = r.json()\n        if r.status_code == 403:\n            # API request limit exceeded\n            print(data[\"message\"])\n            exit(1)\n        issues.extend(data)\n\n        # Look for next page\n        links = requests.utils.parse_header_links(r.headers[\"Link\"])\n        another_page = False\n        for link in links:\n            if link[\"rel\"] == \"next\":\n                url = link[\"url\"]\n                another_page = True\n        if not another_page:\n            return issues\n\n\ndef main(args):\n    cachefile = Path(args.cache)\n    if not cachefile.exists() or args.refresh:\n        issues = get_issues()\n        cachefile.write_text(json.dumps(issues), \"utf-8\")\n    else:\n        issues = json.loads(cachefile.read_text(\"utf-8\"))\n\n    open_issues = [x for x in issues if x[\"state\"] == \"open\"]\n\n    open_issues.sort(key=lambda x: x[\"number\"])\n    report(open_issues)\n\n\ndef _get_kind(issue):\n    labels = [label[\"name\"] for label in issue[\"labels\"]]\n    for key in (\"bug\", \"enhancement\", \"proposal\"):\n        if key in labels:\n            return key\n    return \"issue\"\n\n\ndef report(issues):\n    for issue in issues:\n        title = issue[\"title\"]\n        # body = issue[\"body\"]\n        kind = _get_kind(issue)\n        status = issue[\"state\"]\n        number = issue[\"number\"]\n        link = \"https://github.com/pytest-dev/pytest/issues/%s/\" % number\n        print(\"----\")\n        print(status, kind, link)\n        print(title)\n        # print()\n        # lines = body.split(\"\\n\")\n        # print(\"\\n\".join(lines[:3]))\n        # if len(lines) > 3 or len(body) > 240:\n        #    print(\"...\")\n    print(\"\\n\\nFound %s open issues\" % len(issues))\n\n\nif __name__ == \"__main__\":\n    import argparse\n\n    parser = argparse.ArgumentParser(\"process bitbucket issues\")\n    parser.add_argument(\n        \"--refresh\", action=\"store_true\", help=\"invalidate cache, refresh issues\"\n    )\n    parser.add_argument(\n        \"--cache\", action=\"store\", default=\"issues.json\", help=\"cache file\"\n    )\n    args = parser.parse_args()\n    main(args)",
                "filename": "extra/get_issues.py",
                "start_index": 0,
                "end_index": 2321,
                "start_line": 1,
                "end_line": 85,
                "max_line": 85,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.0",
                "sha": ""
            },
            {
                "code": "# reference: https://docs.codecov.io/docs/codecovyml-reference\ncoverage:\n  status:\n    patch: true\n    project: false\ncomment: false",
                "filename": "codecov.yml",
                "start_index": 0,
                "end_index": 132,
                "start_line": 1,
                "end_line": 6,
                "max_line": 6,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.0",
                "sha": ""
            },
            {
                "code": "\"\"\"\nThis script is part of the pytest release process which is triggered manually in the Actions\ntab of the repository.\n\nThe user will need to enter the base branch to start the release from (for example\n``6.1.x`` or ``main``) and if it should be a major release.\n\nThe appropriate version will be obtained based on the given branch automatically.\n\nAfter that, it will create a release using the `release` tox environment, and push a new PR.\n\n**Token**: currently the token from the GitHub Actions is used, pushed with\n`pytest bot <pytestbot@gmail.com>` commit author.\n\"\"\"\nimport argparse\nimport re\nfrom pathlib import Path\nfrom subprocess import check_call\nfrom subprocess import check_output\nfrom subprocess import run\n\nfrom colorama import Fore\nfrom colorama import init\nfrom github3.repos import Repository\n\n\nclass InvalidFeatureRelease(Exception):\n    pass\n\n\nSLUG = \"pytest-dev/pytest\"\n\nPR_BODY = \"\"\"\\\nCreated automatically from manual trigger.\n\nOnce all builds pass and it has been **approved** by one or more maintainers, the build\ncan be released by pushing a tag `{version}` to this repository.\n\"\"\"\n\n\ndef login(token: str) -> Repository:\n    import github3\n\n    github = github3.login(token=token)\n    owner, repo = SLUG.split(\"/\")\n    return github.repository(owner, repo)",
                "filename": "scripts/prepare-release-pr.py",
                "start_index": 0,
                "end_index": 1281,
                "start_line": 1,
                "end_line": 46,
                "max_line": 174,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.0",
                "sha": ""
            },
            {
                "code": "import sys\n\nif __name__ == \"__main__\":\n    import cProfile\n    import pytest  # NOQA\n    import pstats\n\n    script = sys.argv[1:] if len(sys.argv) > 1 else [\"empty.py\"]\n    cProfile.run(\"pytest.cmdline.main(%r)\" % script, \"prof\")\n    p = pstats.Stats(\"prof\")\n    p.strip_dirs()\n    p.sort_stats(\"cumulative\")\n    print(p.print_stats(500))",
                "filename": "bench/bench.py",
                "start_index": 0,
                "end_index": 338,
                "start_line": 1,
                "end_line": 13,
                "max_line": 13,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.0",
                "sha": ""
            },
            {
                "code": "version: 2\nupdates:\n- package-ecosystem: pip\n  directory: \"/testing/plugins_integration\"\n  schedule:\n    interval: weekly\n    time: \"03:00\"\n  open-pull-requests-limit: 10\n  allow:\n  - dependency-type: direct\n  - dependency-type: indirect\n- package-ecosystem: github-actions\n  directory: /\n  schedule:\n    interval: weekly\n    time: \"03:00\"\n  open-pull-requests-limit: 10",
                "filename": ".github/dependabot.yml",
                "start_index": 0,
                "end_index": 370,
                "start_line": 1,
                "end_line": 17,
                "max_line": 17,
                "git_instance": "github",
                "repo_name": "testbed/pytest-dev__pytest__6.0",
                "sha": ""
            }
        ],
        "classification": "bug",
        "snippet_processor_task": {},
        "solution_task": "To address the issue with `caplog.set_level` and the incorrect restoration of `_initial_handler_level` after multiple calls to `caplog.set_level`, you should:\n\n- Locate the `caplog.set_level` method within the pytest codebase.\n- Modify the method to use a stack or another mechanism to keep track of each call to `set_level` and the corresponding logging level that should be restored.\n- Ensure that after the test is completed, the logging level is restored to the value it had before the first call to `caplog.set_level`.\n- Replace any \"set\" operations that overwrite the `_initial_handler_level` with \"setdefault\" or similar logic that only sets the initial level if it has not been set before.\n- Add tests to verify that multiple calls to `caplog.set_level` within the same test correctly restore the logging level to its original state after the test concludes.",
        "bouncer_response": {
            "score": 8,
            "criteria": "The RESPONSE delivers precise, actionable, and highly relevant hints and solutions that can directly lead to resolving the issues outlined in the PROMPT.",
            "supporting_evidence": "The RESPONSE provides a clear and actionable step-by-step approach to address the bug related to `caplog.set_level` in pytest. It suggests modifying the method to track each call and ensure the correct restoration of the logging level, which is directly related to the bug described. The RESPONSE also correctly identifies the need to replace 'set' operations with 'setdefault' or similar logic, which aligns with the issue mentioned in the PROMPT. Furthermore, it advises adding tests to verify the fix, which is a best practice in software development. The RESPONSE does not address all aspects of the bug, such as the specific details of implementing the stack mechanism, but it provides a solid foundation for resolving the issue.",
            "clarification_questions": "NONE"
        },
        "end_time": 1711734840.1722372,
        "result": "To address the issue with `caplog.set_level` and the incorrect restoration of `_initial_handler_level` after multiple calls to `caplog.set_level`, you should:\n\n- Locate the `caplog.set_level` method within the pytest codebase.\n- Modify the method to use a stack or another mechanism to keep track of each call to `set_level` and the corresponding logging level that should be restored.\n- Ensure that after the test is completed, the logging level is restored to the value it had before the first call to `caplog.set_level`.\n- Replace any \"set\" operations that overwrite the `_initial_handler_level` with \"setdefault\" or similar logic that only sets the initial level if it has not been set before.\n- Add tests to verify that multiple calls to `caplog.set_level` within the same test correctly restore the logging level to its original state after the test concludes."
    }
}